
//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.WITSML141.ComponentSchemas;
using Energistics.DataAccess.WITSML141.ReferenceData;
using Energistics.DataAccess.Reflection;
using Energistics.DataAccess.Validation;

namespace Energistics.DataAccess.WITSML141
{
    #region Classes
    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the abstractMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FootageEastWest))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FootageNorthSouth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellElevationCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellVerticalDepthCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasuredDepthCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RatioGenericMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GenericMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasureOrQuantity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasurePercent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(YAxisAzimuth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeFlowRateMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VelocityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermodynamicTemperatureMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermalVolumetricExpansionMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermalConductivityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardVolumePerTimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecificVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SpecificHeatCapacityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelativePowerMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PressureMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PowerMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneAngleMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PermeabilityRockMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MomentOfForceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassPerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassConcentrationMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MagneticInductionMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthPerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IlluminanceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForcePerVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForcePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ForceMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquivalentPerMassMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricPotentialMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricCurrentMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DynamicViscosityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DimensionlessMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DensityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompressibilityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaPerAreaMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AreaMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnglePerTimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AnglePerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AccelerationLinearMeasure))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="abstractMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the abstractMeasure xsd type.")]
    public abstract partial class AbstractMeasure : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ValueSpecified {
            get {
                return ValueSpecifiedField;
            } 
            set {
                ValueSpecifiedField = value;
                NotifyPropertyChanged("ValueSpecified");
            }
        }

        private bool ValueSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                 this.ValueSpecified = true;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the abstractObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreGeometryList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TubularList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TrajectoryList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToolErrorTermSetList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToolErrorModelList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TargetList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SurveyProgramList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimJobList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SidewallCoreList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RiskList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RigList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OpsReportList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ObjectGroupList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MessageList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LogList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FormationMarkerList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidsReportList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DrillReportList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateReferenceSystemList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ConvCoreList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChangeLogList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BhaRunList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AttachmentList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellCompletionList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellCMLedgerList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreCompletionList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DownholeComponentList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DepthRegImageList))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/schemas/abstract")]
    [System.Xml.Serialization.XmlRootAttribute("abstractDataObject", Namespace="http://www.energistics.org/schemas/abstract", IsNullable=false)]
	[Description("This class represents the abstractObject xsd type.")]
    public abstract partial class AbstractObject : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The non-contextual content of a WITSML Wellbore object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellbore", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Wellbore object.")]
    public partial class Wellbore : Object, IWitsmlDataObject, ICommonDataObject, IWellObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// This is a pointer to the parent wellbore. No parent = starts from top. 
        /// </summary>
		[Description("This is a pointer to the parent wellbore. No parent = starts from top.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("parentWellbore")]
        public RefNameString ParentWellbore {
            get {
                return parentWellboreField;
            } 
            set {
                parentWellboreField = value;
                NotifyPropertyChanged("ParentWellbore");
            }
        }

        private RefNameString parentWellboreField; 

        /// <summary>
        /// Operator borehole number. 
        /// </summary>
		[StringLength(32)]
        [Description("Operator borehole number.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("number")]
        public string Number {
            get {
                return numberField;
            } 
            set {
                numberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private string numberField; 

        /// <summary>
        /// API suffix. 
        /// </summary>
		[StringLength(64)]
        [Description("API suffix.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("suffixAPI")]
        public string SuffixAPI {
            get {
                return suffixAPIField;
            } 
            set {
                suffixAPIField = value;
                NotifyPropertyChanged("SuffixAPI");
            }
        }

        private string suffixAPIField; 

        /// <summary>
        /// Government assigned number. 
        /// </summary>
		[StringLength(64)]
        [Description("Government assigned number.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("numGovt")]
        public string NumGovt {
            get {
                return numGovtField;
            } 
            set {
                numGovtField = value;
                NotifyPropertyChanged("NumGovt");
            }
        }

        private string numGovtField; 

        /// <summary>
        /// POSC wellbore status. 
        /// </summary>
		[Description("POSC wellbore status.")]
        [EnergisticsDataTypeAttribute(DataType = "WellStatus")]
		[XmlElement("statusWellbore")]
        public WellStatus? StatusWellbore {
            get {
                return statusWellboreField;
            } 
            set {
                statusWellboreField = value;
                 this.StatusWellboreSpecified = true;
                NotifyPropertyChanged("StatusWellbore");
            }
        }

        private WellStatus? statusWellboreField; 

        /// <summary>
        /// statusWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusWellboreSpecified {
            get {
                return statusWellboreSpecifiedField;
            } 
            set {
                statusWellboreSpecifiedField = value;
                NotifyPropertyChanged("StatusWellboreSpecified");
            }
        }

        private bool statusWellboreSpecifiedField; 

        /// <summary>
        /// True (="1" or "true") indicates that the wellbore is active. False (="0" or "false") indicates otherwise. It is the servers responsibility to set this value based on its available internal data (e.g., what objects are changing).
        /// </summary>
		[Description("True (=\"1\" or \"true\") indicates that the wellbore is active. False (=\"0\" or \"false\") indicates otherwise. It is the servers responsibility to  set this value based on its available internal data (e.g., what objects are changing).")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isActive")]
        public bool? IsActive {
            get {
                return isActiveField;
            } 
            set {
                isActiveField = value;
                 this.IsActiveSpecified = true;
                NotifyPropertyChanged("IsActive");
            }
        }

        private bool? isActiveField; 

        /// <summary>
        /// isActiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsActiveSpecified {
            get {
                return isActiveSpecifiedField;
            } 
            set {
                isActiveSpecifiedField = value;
                NotifyPropertyChanged("IsActiveSpecified");
            }
        }

        private bool isActiveSpecifiedField; 

        /// <summary>
        /// POSC wellbore purpose. 
        /// </summary>
		[Description("POSC wellbore purpose.")]
        [EnergisticsDataTypeAttribute(DataType = "WellPurpose")]
		[XmlElement("purposeWellbore")]
        public WellPurpose? PurposeWellbore {
            get {
                return purposeWellboreField;
            } 
            set {
                purposeWellboreField = value;
                 this.PurposeWellboreSpecified = true;
                NotifyPropertyChanged("PurposeWellbore");
            }
        }

        private WellPurpose? purposeWellboreField; 

        /// <summary>
        /// purposeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PurposeWellboreSpecified {
            get {
                return purposeWellboreSpecifiedField;
            } 
            set {
                purposeWellboreSpecifiedField = value;
                NotifyPropertyChanged("PurposeWellboreSpecified");
            }
        }

        private bool purposeWellboreSpecifiedField; 

        /// <summary>
        /// Type of wellbore. 
        /// </summary>
		[Description("Type of wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "WellboreType")]
		[XmlElement("typeWellbore")]
        public WellboreType? TypeWellbore {
            get {
                return typeWellboreField;
            } 
            set {
                typeWellboreField = value;
                 this.TypeWellboreSpecified = true;
                NotifyPropertyChanged("TypeWellbore");
            }
        }

        private WellboreType? typeWellboreField; 

        /// <summary>
        /// typeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeWellboreSpecified {
            get {
                return typeWellboreSpecifiedField;
            } 
            set {
                typeWellboreSpecifiedField = value;
                NotifyPropertyChanged("TypeWellboreSpecified");
            }
        }

        private bool typeWellboreSpecifiedField; 

        /// <summary>
        /// POSC wellbore trajectory shape. 
        /// </summary>
		[Description("POSC wellbore trajectory shape.")]
        [EnergisticsDataTypeAttribute(DataType = "WellboreShape")]
		[XmlElement("shape")]
        public WellboreShape? Shape {
            get {
                return shapeField;
            } 
            set {
                shapeField = value;
                 this.ShapeSpecified = true;
                NotifyPropertyChanged("Shape");
            }
        }

        private WellboreShape? shapeField; 

        /// <summary>
        /// shapeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShapeSpecified {
            get {
                return shapeSpecifiedField;
            } 
            set {
                shapeSpecifiedField = value;
                NotifyPropertyChanged("ShapeSpecified");
            }
        }

        private bool shapeSpecifiedField; 

        /// <summary>
        /// Date and time of wellbore kickoff. 
        /// </summary>
		[Description("Date and time of wellbore kickoff.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimKickoff")]
        public Timestamp? DateTimeKickoff {
            get {
                return dTimKickoffField;
            } 
            set {
                dTimKickoffField = value;
                 this.DateTimeKickoffSpecified = true;
                NotifyPropertyChanged("DateTimeKickoff");
            }
        }

        private Timestamp? dTimKickoffField; 

        /// <summary>
        /// dTimKickoffSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeKickoffSpecified {
            get {
                return dTimKickoffSpecifiedField;
            } 
            set {
                dTimKickoffSpecifiedField = value;
                NotifyPropertyChanged("DateTimeKickoffSpecified");
            }
        }

        private bool dTimKickoffSpecifiedField; 

        /// <summary>
        /// True ("true" of "1") indicates that the wellbore has acheieved total depth. That is, drilling has completed. False ("false" or "0") indicates otherwise. Not given indicates that it is not known whether total depth has been reached.
        /// </summary>
		[Description("True (\"true\" of \"1\") indicates that the wellbore has  acheieved total depth. That is, drilling has completed. False (\"false\" or \"0\") indicates otherwise.  Not given indicates that it is not known whether total depth has been reached.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("achievedTD")]
        public bool? AchievedTD {
            get {
                return achievedTDField;
            } 
            set {
                achievedTDField = value;
                 this.AchievedTDSpecified = true;
                NotifyPropertyChanged("AchievedTD");
            }
        }

        private bool? achievedTDField; 

        /// <summary>
        /// achievedTDSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AchievedTDSpecified {
            get {
                return achievedTDSpecifiedField;
            } 
            set {
                achievedTDSpecifiedField = value;
                NotifyPropertyChanged("AchievedTDSpecified");
            }
        }

        private bool achievedTDSpecifiedField; 

        /// <summary>
        /// The measured depth of the borehole. If status is plugged, indicates the maximum depth reached before plugging. It is recommended that this value be updated about every 10 minutes by an assigned raw data provider at a site.
        /// </summary>
		[Description("The measured depth of the borehole.  If status is plugged, indicates the maximum depth reached before plugging. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// The true vertical depth of the borehole. If status is plugged, indicates the maximum depth reached before plugging. It is recommended that this value be updated about every 10 minutes by an assigned raw data provider at a site.
        /// </summary>
		[Description("The  true vertical depth of the borehole.   If status is plugged, indicates the maximum depth reached before plugging.  It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// The measured depth of the bit. If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned raw data provider at a site.
        /// </summary>
		[Description("The measured depth of the bit.  If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return mdBitField;
            } 
            set {
                mdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord mdBitField; 

        /// <summary>
        /// The true vertical depth of the bit. If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned raw data provider at a site.
        /// </summary>
		[Description("The true vertical depth of the bit. If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBit")]
        public WellVerticalDepthCoord TvdBit {
            get {
                return tvdBitField;
            } 
            set {
                tvdBitField = value;
                NotifyPropertyChanged("TvdBit");
            }
        }

        private WellVerticalDepthCoord tvdBitField; 

        /// <summary>
        /// Kickoff measured depth of the wellbore. 
        /// </summary>
		[Description("Kickoff measured depth of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdKickoff")]
        public MeasuredDepthCoord MDKickoff {
            get {
                return mdKickoffField;
            } 
            set {
                mdKickoffField = value;
                NotifyPropertyChanged("MDKickoff");
            }
        }

        private MeasuredDepthCoord mdKickoffField; 

        /// <summary>
        /// Kickoff true vertical depth of the wellbore. 
        /// </summary>
		[Description("Kickoff true vertical depth of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdKickoff")]
        public WellVerticalDepthCoord TvdKickoff {
            get {
                return tvdKickoffField;
            } 
            set {
                tvdKickoffField = value;
                NotifyPropertyChanged("TvdKickoff");
            }
        }

        private WellVerticalDepthCoord tvdKickoffField; 

        /// <summary>
        /// Planned measured depth for the wellbore total depth. 
        /// </summary>
		[Description("Planned measured depth for the wellbore total depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdPlanned")]
        public MeasuredDepthCoord MDPlanned {
            get {
                return mdPlannedField;
            } 
            set {
                mdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord mdPlannedField; 

        /// <summary>
        /// Planned true vertical depth for the wellbore total depth. 
        /// </summary>
		[Description("Planned true vertical depth for the wellbore total depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdPlanned")]
        public WellVerticalDepthCoord TvdPlanned {
            get {
                return tvdPlannedField;
            } 
            set {
                tvdPlannedField = value;
                NotifyPropertyChanged("TvdPlanned");
            }
        }

        private WellVerticalDepthCoord tvdPlannedField; 

        /// <summary>
        /// Planned measured for the wellbore total depth - with respect to seabed. 
        /// </summary>
		[Description("Planned measured for the wellbore total depth - with respect to seabed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdSubSeaPlanned")]
        public MeasuredDepthCoord MDSubSeaPlanned {
            get {
                return mdSubSeaPlannedField;
            } 
            set {
                mdSubSeaPlannedField = value;
                NotifyPropertyChanged("MDSubSeaPlanned");
            }
        }

        private MeasuredDepthCoord mdSubSeaPlannedField; 

        /// <summary>
        /// Planned true vertical depth for the wellbore total depth - with respect to seabed. 
        /// </summary>
		[Description("Planned true vertical depth for the wellbore total depth - with respect to seabed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdSubSeaPlanned")]
        public WellVerticalDepthCoord TvdSubSeaPlanned {
            get {
                return tvdSubSeaPlannedField;
            } 
            set {
                tvdSubSeaPlannedField = value;
                NotifyPropertyChanged("TvdSubSeaPlanned");
            }
        }

        private WellVerticalDepthCoord tvdSubSeaPlannedField; 

        /// <summary>
        /// Target days for drilling wellbore. 
        /// </summary>
		[Description("Target days for drilling wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("dayTarget")]
        public TimeMeasure DayTarget {
            get {
                return dayTargetField;
            } 
            set {
                dayTargetField = value;
                NotifyPropertyChanged("DayTarget");
            }
        }

        private TimeMeasure dayTargetField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refNameString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refNameString", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the refNameString xsd type.")]
    public partial class RefNameString : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefNameString class.
        /// </summary>
        public RefNameString() {}

        /// <summary>
        /// Initializes a new instance of the RefNameString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public RefNameString(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the node referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A reference to the unique identifier (uid attribute) in the node referenced by the name value.  This attribute is required within the context of a WITSML server.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("uidRef")]
		
        public string UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private string uidRefField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the measuredDepthCoord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="measuredDepthCoord", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the measuredDepthCoord xsd type.")]
    public partial class MeasuredDepthCoord : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        public MeasuredDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasuredDepthCoord(double value, MeasuredDepthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the quantity value.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthUom")]
        [XmlAttribute("uom")]
		
        public MeasuredDepthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MeasuredDepthUom uomField; 

		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. This value is assumed to match the uid value in a WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A pointer to the reference datum for this coordinate  value as defined in WellDatum. This value is assumed to match the uid value in a WellDatum. If not given then the default WellDatum must be assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "refWellDatum")]
        [XmlAttribute("datum")]
		
        public string Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string datumField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the footageEastWest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="footageEastWest", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the footageEastWest xsd type.")]
    public partial class FootageEastWest : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FootageEastWest class.
        /// </summary>
        public FootageEastWest() {}

        /// <summary>
        /// Initializes a new instance of the FootageEastWest class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public FootageEastWest(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the distance value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the distance value.")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

		/// <summary>
        /// Specifies the reference line that is the origin of the distance.
        /// </summary>
		[Required]
        [Description("Specifies the reference line that is the origin of the distance.")]
        [EnergisticsDataTypeAttribute(DataType = "EastOrWest")]
        [XmlAttribute("ref")]
		
        public EastOrWest Ref {
            get {
                return refField;
            } 
            set {
                refField = value;
                NotifyPropertyChanged("Ref");
            }
        }

        private EastOrWest refField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the footageNorthSouth xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="footageNorthSouth", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the footageNorthSouth xsd type.")]
    public partial class FootageNorthSouth : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FootageNorthSouth class.
        /// </summary>
        public FootageNorthSouth() {}

        /// <summary>
        /// Initializes a new instance of the FootageNorthSouth class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public FootageNorthSouth(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the distance value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the distance value.")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

		/// <summary>
        /// Specifies the reference line that is the origin of the distance.
        /// </summary>
		[Required]
        [Description("Specifies the reference line that is the origin of the distance.")]
        [EnergisticsDataTypeAttribute(DataType = "NorthOrSouth")]
        [XmlAttribute("ref")]
		
        public NorthOrSouth Ref {
            get {
                return refField;
            } 
            set {
                refField = value;
                NotifyPropertyChanged("Ref");
            }
        }

        private NorthOrSouth refField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellElevationCoord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellElevationCoord", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the wellElevationCoord xsd type.")]
    public partial class WellElevationCoord : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        public WellElevationCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellElevationCoord(double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value. If not given then the default unit of measure of the explicitly or implicitly given datum must be assumed.
        /// </summary>
		[Required]
        [Description("The unit of measure of the quantity value. If not given then the default unit of measure of the explicitly or implicitly given datum must be assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalCoordinateUom")]
        [XmlAttribute("uom")]
		
        public WellVerticalCoordinateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private WellVerticalCoordinateUom uomField; 

		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A pointer to the reference datum for this coordinate  value as defined in WellDatum.  If not given then the default WellDatum must be assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "refWellDatum")]
        [XmlAttribute("datum")]
		
        public string Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string datumField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellVerticalDepthCoord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellVerticalDepthCoord", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the wellVerticalDepthCoord xsd type.")]
    public partial class WellVerticalDepthCoord : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellVerticalDepthCoord class.
        /// </summary>
        public WellVerticalDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellVerticalDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellVerticalDepthCoord(double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the quantity value.")]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalCoordinateUom")]
        [XmlAttribute("uom")]
		
        public WellVerticalCoordinateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private WellVerticalCoordinateUom uomField; 

		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A pointer to the reference datum for this coordinate  value as defined in WellDatum.  If not given then the default WellDatum must be assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "refWellDatum")]
        [XmlAttribute("datum")]
		
        public string Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string datumField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ratioGenericMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ratioGenericMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the ratioGenericMeasure xsd type.")]
    public partial class RatioGenericMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RatioGenericMeasure class.
        /// </summary>
        public RatioGenericMeasure() {}

        /// <summary>
        /// Initializes a new instance of the RatioGenericMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public RatioGenericMeasure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [StringLength(24)]
        [Description("The unit of measure for the quantity. If for some reason a uom is not appropriate for the quantity, a unit of \"Euc\" should be used.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

		/// <summary>
        /// numerator property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
        [XmlAttribute("numerator")]
		
        public double Numerator {
            get {
                return numeratorField;
            } 
            set {
                numeratorField = value;
                 this.NumeratorSpecified = true;
                NotifyPropertyChanged("Numerator");
            }
        }

        private double numeratorField; 

        /// <summary>
        /// numeratorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumeratorSpecified {
            get {
                return numeratorSpecifiedField;
            } 
            set {
                numeratorSpecifiedField = value;
                NotifyPropertyChanged("NumeratorSpecified");
            }
        }

        private bool numeratorSpecifiedField; 

		/// <summary>
        /// denominator property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
        [XmlAttribute("denominator")]
		
        public double Denominator {
            get {
                return denominatorField;
            } 
            set {
                denominatorField = value;
                 this.DenominatorSpecified = true;
                NotifyPropertyChanged("Denominator");
            }
        }

        private double denominatorField; 

        /// <summary>
        /// denominatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DenominatorSpecified {
            get {
                return denominatorSpecifiedField;
            } 
            set {
                denominatorSpecifiedField = value;
                NotifyPropertyChanged("DenominatorSpecified");
            }
        }

        private bool denominatorSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the genericMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="genericMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the genericMeasure xsd type.")]
    public partial class GenericMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GenericMeasure class.
        /// </summary>
        public GenericMeasure() {}

        /// <summary>
        /// Initializes a new instance of the GenericMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public GenericMeasure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the quantity.
        /// </summary>
		[Required]
        [StringLength(24)]
        [Description("The unit of measure for the quantity.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the measureOrQuantity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="measureOrQuantity", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the measureOrQuantity xsd type.")]
    public partial class MeasureOrQuantity : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        public MeasureOrQuantity() {}

        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasureOrQuantity(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the quantity. This value must conform to the values allowed by a measure class. If the value is a measure then the uom must be specified.
        /// </summary>
		[StringLength(24)]
        [Description("The unit of measure for the quantity. This value must conform to the values allowed by a measure class.  If the value is a measure then the uom must be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerVolumeMeasurePercent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasurePercent", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the volumePerVolumeMeasurePercent xsd type.")]
    public partial class VolumePerVolumeMeasurePercent : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasurePercent class.
        /// </summary>
        public VolumePerVolumeMeasurePercent() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasurePercent class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasurePercent(double value, PercentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PercentUom")]
        [XmlAttribute("uom")]
		
        public PercentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PercentUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the yAxisAzimuth xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="yAxisAzimuth", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the yAxisAzimuth xsd type.")]
    public partial class YAxisAzimuth : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the YAxisAzimuth class.
        /// </summary>
        public YAxisAzimuth() {}

        /// <summary>
        /// Initializes a new instance of the YAxisAzimuth class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public YAxisAzimuth(double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the azimuth value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the azimuth value.")]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleUom")]
        [XmlAttribute("uom")]
		
        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 

		/// <summary>
        /// Specifies the direction to be considered North for the y axis.
        /// </summary>
		[Description("Specifies the direction to be considered North for the y axis.")]
        [EnergisticsDataTypeAttribute(DataType = "AziRef")]
        [XmlAttribute("northDirection")]
		
        public AziRef NorthDirection {
            get {
                return northDirectionField;
            } 
            set {
                northDirectionField = value;
                 this.NorthDirectionSpecified = true;
                NotifyPropertyChanged("NorthDirection");
            }
        }

        private AziRef northDirectionField; 

        /// <summary>
        /// northDirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NorthDirectionSpecified {
            get {
                return northDirectionSpecifiedField;
            } 
            set {
                northDirectionSpecifiedField = value;
                NotifyPropertyChanged("NorthDirectionSpecified");
            }
        }

        private bool northDirectionSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the volumePerVolumeMeasure xsd type.")]
    public partial class VolumePerVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        public VolumePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasure(double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the volumePerLengthMeasure xsd type.")]
    public partial class VolumePerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerLengthMeasure class.
        /// </summary>
        public VolumePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerLengthMeasure(double value, VolumePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerLengthUom")]
        [XmlAttribute("uom")]
		
        public VolumePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeFlowRateMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeFlowRateMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the volumeFlowRateMeasure xsd type.")]
    public partial class VolumeFlowRateMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeFlowRateMeasure class.
        /// </summary>
        public VolumeFlowRateMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeFlowRateMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeFlowRateMeasure(double value, VolumeFlowRateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeFlowRateUom")]
        [XmlAttribute("uom")]
		
        public VolumeFlowRateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeFlowRateUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the volumeMeasure xsd type.")]
    public partial class VolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        public VolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeMeasure(double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the velocityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="velocityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the velocityMeasure xsd type.")]
    public partial class VelocityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VelocityMeasure class.
        /// </summary>
        public VelocityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VelocityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VelocityMeasure(double value, VelocityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VelocityUom")]
        [XmlAttribute("uom")]
		
        public VelocityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VelocityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the timeMeasure xsd type.")]
    public partial class TimeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        public TimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public TimeMeasure(double value, TimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "TimeUom")]
        [XmlAttribute("uom")]
		
        public TimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private TimeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermodynamicTemperatureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermodynamicTemperatureMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the thermodynamicTemperatureMeasure xsd type.")]
    public partial class ThermodynamicTemperatureMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        public ThermodynamicTemperatureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermodynamicTemperatureMeasure(double value, ThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureUom")]
        [XmlAttribute("uom")]
		
        public ThermodynamicTemperatureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermodynamicTemperatureUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermalVolumetricExpansionMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermalVolumetricExpansionMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the thermalVolumetricExpansionMeasure xsd type.")]
    public partial class ThermalVolumetricExpansionMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermalVolumetricExpansionMeasure class.
        /// </summary>
        public ThermalVolumetricExpansionMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermalVolumetricExpansionMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermalVolumetricExpansionMeasure(double value, ThermalVolumetricExpansionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ThermalVolumetricExpansionUom")]
        [XmlAttribute("uom")]
		
        public ThermalVolumetricExpansionUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermalVolumetricExpansionUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermalConductivityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermalConductivityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the thermalConductivityMeasure xsd type.")]
    public partial class ThermalConductivityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermalConductivityMeasure class.
        /// </summary>
        public ThermalConductivityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermalConductivityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermalConductivityMeasure(double value, ThermalConductivityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ThermalConductivityUom")]
        [XmlAttribute("uom")]
		
        public ThermalConductivityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermalConductivityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the standardVolumePerTimeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="standardVolumePerTimeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the standardVolumePerTimeMeasure xsd type.")]
    public partial class StandardVolumePerTimeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StandardVolumePerTimeMeasure class.
        /// </summary>
        public StandardVolumePerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the StandardVolumePerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public StandardVolumePerTimeMeasure(double value, StandardVolumePerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "StandardVolumePerTimeUom")]
        [XmlAttribute("uom")]
		
        public StandardVolumePerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private StandardVolumePerTimeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the standardVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="standardVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the standardVolumeMeasure xsd type.")]
    public partial class StandardVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StandardVolumeMeasure class.
        /// </summary>
        public StandardVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the StandardVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public StandardVolumeMeasure(double value, StandardVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "StandardVolumeUom")]
        [XmlAttribute("uom")]
		
        public StandardVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private StandardVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the specificVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="specificVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the specificVolumeMeasure xsd type.")]
    public partial class SpecificVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SpecificVolumeMeasure class.
        /// </summary>
        public SpecificVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the SpecificVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public SpecificVolumeMeasure(double value, SpecificVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "SpecificVolumeUom")]
        [XmlAttribute("uom")]
		
        public SpecificVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private SpecificVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the specificHeatCapacityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="specificHeatCapacityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the specificHeatCapacityMeasure xsd type.")]
    public partial class SpecificHeatCapacityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SpecificHeatCapacityMeasure class.
        /// </summary>
        public SpecificHeatCapacityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the SpecificHeatCapacityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public SpecificHeatCapacityMeasure(double value, SpecificHeatCapacityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "SpecificHeatCapacityUom")]
        [XmlAttribute("uom")]
		
        public SpecificHeatCapacityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private SpecificHeatCapacityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the relativePowerMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="relativePowerMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the relativePowerMeasure xsd type.")]
    public partial class RelativePowerMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RelativePowerMeasure class.
        /// </summary>
        public RelativePowerMeasure() {}

        /// <summary>
        /// Initializes a new instance of the RelativePowerMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public RelativePowerMeasure(double value, RelativePowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "RelativePowerUom")]
        [XmlAttribute("uom")]
		
        public RelativePowerUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private RelativePowerUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the pressureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="pressureMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the pressureMeasure xsd type.")]
    public partial class PressureMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        public PressureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PressureMeasure(double value, PressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PressureUom")]
        [XmlAttribute("uom")]
		
        public PressureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PressureUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the powerMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="powerMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the powerMeasure xsd type.")]
    public partial class PowerMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PowerMeasure class.
        /// </summary>
        public PowerMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PowerMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PowerMeasure(double value, PowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PowerUom")]
        [XmlAttribute("uom")]
		
        public PowerUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PowerUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the planeAngleMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="planeAngleMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the planeAngleMeasure xsd type.")]
    public partial class PlaneAngleMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        public PlaneAngleMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PlaneAngleMeasure(double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleUom")]
        [XmlAttribute("uom")]
		
        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the permeabilityRockMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="permeabilityRockMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the permeabilityRockMeasure xsd type.")]
    public partial class PermeabilityRockMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PermeabilityRockMeasure class.
        /// </summary>
        public PermeabilityRockMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PermeabilityRockMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PermeabilityRockMeasure(double value, PermeabilityRockUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityRockUom")]
        [XmlAttribute("uom")]
		
        public PermeabilityRockUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PermeabilityRockUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the perLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="perLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the perLengthMeasure xsd type.")]
    public partial class PerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PerLengthMeasure class.
        /// </summary>
        public PerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PerLengthMeasure(double value, PerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PerLengthUom")]
        [XmlAttribute("uom")]
		
        public PerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the momentOfForceMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="momentOfForceMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the momentOfForceMeasure xsd type.")]
    public partial class MomentOfForceMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MomentOfForceMeasure class.
        /// </summary>
        public MomentOfForceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MomentOfForceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MomentOfForceMeasure(double value, MomentOfForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceUom")]
        [XmlAttribute("uom")]
		
        public MomentOfForceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MomentOfForceUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massPerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massPerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the massPerLengthMeasure xsd type.")]
    public partial class MassPerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerLengthMeasure class.
        /// </summary>
        public MassPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerLengthMeasure(double value, MassPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassPerLengthUom")]
        [XmlAttribute("uom")]
		
        public MassPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the massMeasure xsd type.")]
    public partial class MassMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        public MassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassMeasure(double value, MassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassUom")]
        [XmlAttribute("uom")]
		
        public MassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massConcentrationMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massConcentrationMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the massConcentrationMeasure xsd type.")]
    public partial class MassConcentrationMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassConcentrationMeasure class.
        /// </summary>
        public MassConcentrationMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassConcentrationMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassConcentrationMeasure(double value, MassConcentrationUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassConcentrationUom")]
        [XmlAttribute("uom")]
		
        public MassConcentrationUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassConcentrationUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the magneticInductionMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="magneticInductionMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the magneticInductionMeasure xsd type.")]
    public partial class MagneticInductionMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MagneticInductionMeasure class.
        /// </summary>
        public MagneticInductionMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MagneticInductionMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MagneticInductionMeasure(double value, MagneticInductionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MagneticInductionUom")]
        [XmlAttribute("uom")]
		
        public MagneticInductionUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MagneticInductionUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lengthPerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthPerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the lengthPerLengthMeasure xsd type.")]
    public partial class LengthPerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        public LengthPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthPerLengthMeasure(double value, LengthPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerLengthUom")]
        [XmlAttribute("uom")]
		
        public LengthPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthPerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the lengthMeasure xsd type.")]
    public partial class LengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        public LengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasure(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the illuminanceMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="illuminanceMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the illuminanceMeasure xsd type.")]
    public partial class IlluminanceMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IlluminanceMeasure class.
        /// </summary>
        public IlluminanceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the IlluminanceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IlluminanceMeasure(double value, IlluminanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "IlluminanceUom")]
        [XmlAttribute("uom")]
		
        public IlluminanceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private IlluminanceUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forcePerVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forcePerVolumeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the forcePerVolumeMeasure xsd type.")]
    public partial class ForcePerVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasure class.
        /// </summary>
        public ForcePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerVolumeMeasure(double value, ForcePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeUom")]
        [XmlAttribute("uom")]
		
        public ForcePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forcePerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forcePerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the forcePerLengthMeasure xsd type.")]
    public partial class ForcePerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        public ForcePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerLengthMeasure(double value, ForcePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerLengthUom")]
        [XmlAttribute("uom")]
		
        public ForcePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the forceMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="forceMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the forceMeasure xsd type.")]
    public partial class ForceMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForceMeasure class.
        /// </summary>
        public ForceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForceMeasure(double value, ForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ForceUom")]
        [XmlAttribute("uom")]
		
        public ForceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForceUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the equivalentPerMassMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="equivalentPerMassMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the equivalentPerMassMeasure xsd type.")]
    public partial class EquivalentPerMassMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EquivalentPerMassMeasure class.
        /// </summary>
        public EquivalentPerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the EquivalentPerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public EquivalentPerMassMeasure(double value, EquivalentPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "EquivalentPerMassUom")]
        [XmlAttribute("uom")]
		
        public EquivalentPerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private EquivalentPerMassUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the electricPotentialMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricPotentialMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the electricPotentialMeasure xsd type.")]
    public partial class ElectricPotentialMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricPotentialMeasure class.
        /// </summary>
        public ElectricPotentialMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricPotentialMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricPotentialMeasure(double value, ElectricPotentialUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ElectricPotentialUom")]
        [XmlAttribute("uom")]
		
        public ElectricPotentialUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricPotentialUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the electricCurrentMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricCurrentMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the electricCurrentMeasure xsd type.")]
    public partial class ElectricCurrentMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        public ElectricCurrentMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricCurrentMeasure(double value, ElectricCurrentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ElectricCurrentUom")]
        [XmlAttribute("uom")]
		
        public ElectricCurrentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricCurrentUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the dynamicViscosityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dynamicViscosityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the dynamicViscosityMeasure xsd type.")]
    public partial class DynamicViscosityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        public DynamicViscosityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DynamicViscosityMeasure(double value, DynamicViscosityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityUom")]
        [XmlAttribute("uom")]
		
        public DynamicViscosityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DynamicViscosityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the dimensionlessMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dimensionlessMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the dimensionlessMeasure xsd type.")]
    public partial class DimensionlessMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        public DimensionlessMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DimensionlessMeasure(double value, DimensionlessUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessUom")]
        [XmlAttribute("uom")]
		
        public DimensionlessUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DimensionlessUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the densityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="densityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the densityMeasure xsd type.")]
    public partial class DensityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DensityMeasure class.
        /// </summary>
        public DensityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DensityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DensityMeasure(double value, DensityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DensityUom")]
        [XmlAttribute("uom")]
		
        public DensityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DensityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the compressibilityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="compressibilityMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the compressibilityMeasure xsd type.")]
    public partial class CompressibilityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CompressibilityMeasure class.
        /// </summary>
        public CompressibilityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the CompressibilityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public CompressibilityMeasure(double value, CompressibilityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "CompressibilityUom")]
        [XmlAttribute("uom")]
		
        public CompressibilityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private CompressibilityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the areaPerAreaMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="areaPerAreaMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the areaPerAreaMeasure xsd type.")]
    public partial class AreaPerAreaMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaPerAreaMeasure class.
        /// </summary>
        public AreaPerAreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaPerAreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaPerAreaMeasure(double value, AreaPerAreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AreaPerAreaUom")]
        [XmlAttribute("uom")]
		
        public AreaPerAreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaPerAreaUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the areaMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="areaMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the areaMeasure xsd type.")]
    public partial class AreaMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        public AreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaMeasure(double value, AreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AreaUom")]
        [XmlAttribute("uom")]
		
        public AreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the anglePerTimeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="anglePerTimeMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the anglePerTimeMeasure xsd type.")]
    public partial class AnglePerTimeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AnglePerTimeMeasure class.
        /// </summary>
        public AnglePerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AnglePerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AnglePerTimeMeasure(double value, AnglePerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerTimeUom")]
        [XmlAttribute("uom")]
		
        public AnglePerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AnglePerTimeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the anglePerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="anglePerLengthMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the anglePerLengthMeasure xsd type.")]
    public partial class AnglePerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AnglePerLengthMeasure class.
        /// </summary>
        public AnglePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AnglePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AnglePerLengthMeasure(double value, AnglePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerLengthUom")]
        [XmlAttribute("uom")]
		
        public AnglePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AnglePerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the accelerationLinearMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="accelerationLinearMeasure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the accelerationLinearMeasure xsd type.")]
    public partial class AccelerationLinearMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AccelerationLinearMeasure class.
        /// </summary>
        public AccelerationLinearMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AccelerationLinearMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AccelerationLinearMeasure(double value, AccelerationLinearUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AccelerationLinearUom")]
        [XmlAttribute("uom")]
		
        public AccelerationLinearUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AccelerationLinearUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Common Data Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_commonData", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Common Data Component Schema ")]
    public partial class CommonData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// An identifier to indicate the data originator. This identifies the server that originally created the object and thus most of the uids in the object (but not necessarily the uids of the parents). This is typically a url. 
        /// </summary>
		[StringLength(64)]
        [Description("An identifier to indicate the data originator. This identifies the server that originally created  the object and thus most of the uids in the object (but not  necessarily the uids of the parents). This is typically a url.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("sourceName")]
        public string SourceName {
            get {
                return sourceNameField;
            } 
            set {
                sourceNameField = value;
                NotifyPropertyChanged("SourceName");
            }
        }

        private string sourceNameField; 

        /// <summary>
        /// When the data was created at the persistent data store. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("When the data was created at the persistent data store.  This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the  behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimCreation")]
        public Timestamp? DateTimeCreation {
            get {
                return dTimCreationField;
            } 
            set {
                dTimCreationField = value;
                 this.DateTimeCreationSpecified = true;
                NotifyPropertyChanged("DateTimeCreation");
            }
        }

        private Timestamp? dTimCreationField; 

        /// <summary>
        /// dTimCreationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCreationSpecified {
            get {
                return dTimCreationSpecifiedField;
            } 
            set {
                dTimCreationSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCreationSpecified");
            }
        }

        private bool dTimCreationSpecifiedField; 

        /// <summary>
        /// Last change of any element of the data at the persistent data store. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("Last change of any element of the data at the persistent data store. This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the  behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimLastChange")]
        public Timestamp? DateTimeLastChange {
            get {
                return dTimLastChangeField;
            } 
            set {
                dTimLastChangeField = value;
                 this.DateTimeLastChangeSpecified = true;
                NotifyPropertyChanged("DateTimeLastChange");
            }
        }

        private Timestamp? dTimLastChangeField; 

        /// <summary>
        /// dTimLastChangeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeLastChangeSpecified {
            get {
                return dTimLastChangeSpecifiedField;
            } 
            set {
                dTimLastChangeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeLastChangeSpecified");
            }
        }

        private bool dTimLastChangeSpecifiedField; 

        /// <summary>
        /// The item state for the data object. 
        /// </summary>
		[Description("The item state for the data object.")]
        [EnergisticsDataTypeAttribute(DataType = "ItemState")]
		[XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set {
                itemStateField = value;
                 this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ItemState? itemStateField; 

        /// <summary>
        /// itemStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemStateSpecified {
            get {
                return itemStateSpecifiedField;
            } 
            set {
                itemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private bool itemStateSpecifiedField; 

        /// <summary>
        /// The category of the service related to the creation of the object. For example, "mud log service", "cement service", "LWD service", "rig service", "drilling service". 
        /// </summary>
		[StringLength(50)]
        [Description("The category of the service related to the creation of the object.  For example, \"mud log service\", \"cement service\", \"LWD service\", \"rig service\", \"drilling service\".")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("serviceCategory")]
        public string ServiceCategory {
            get {
                return serviceCategoryField;
            } 
            set {
                serviceCategoryField = value;
                NotifyPropertyChanged("ServiceCategory");
            }
        }

        private string serviceCategoryField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// The local time zone of the original acquisition date-time values. It is the deviation in hours and minutes from UTC. The first occurrence should be the actual local time zone at the start of acquisition and may represent a seasonally adjusted value such as daylight savings. The dTim attribute must be populated in the second and subsequent occurrences if the local time zone changes during acquisition. This knowledge is required because the original time zone in a dateTime value may be lost when software converts to a different time zone.
        /// </summary>
		[Description("The local time zone of the original acquisition date-time values.  It is the deviation in hours and minutes from UTC. The first occurrence should be the actual local time zone at the start of acquisition and may represent a seasonally adjusted value such as daylight savings. The dTim attribute must be populated in the second and subsequent occurrences  if the local time zone changes during acquisition. This knowledge is required because the original time zone in a dateTime value may be lost when software converts to a different time zone.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "timestampedTimeZone")]
		[XmlElement("acquisitionTimeZone")]
        public List<TimestampedTimeZone> AcquisitionTimeZone {
            get {
                return acquisitionTimeZoneField;
            } 
            set {
                acquisitionTimeZoneField = value;
                NotifyPropertyChanged("AcquisitionTimeZone");
            }
        }

         /// <summary>
         /// bool to indicate if AcquisitionTimeZone has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AcquisitionTimeZoneSpecified
         {
             get {
             if(acquisitionTimeZoneField!=null)
                 return acquisitionTimeZoneField.Count>0?true:false;
             else return false;
             }
         }
        private List<TimestampedTimeZone> acquisitionTimeZoneField; 

        /// <summary>
        /// A pointer to the default wellDatum for measured depth coordinates, vertical depth coordinates and elevation coordinates in this object. Depth coordinates that do not specify a datum attribute shall be assumed to be measured relative to this default vertical datum. The referenced wellDatum must be defined within the well object associated with this object.
        /// </summary>
		[Description("A pointer to the default wellDatum for measured depth coordinates, vertical depth coordinates and elevation coordinates in this object.  Depth coordinates that do not specify a datum attribute shall be  assumed to be measured relative to this default vertical datum. The referenced wellDatum must be defined within the well object associated with this object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("defaultDatum")]
        public RefNameString DefaultDatum {
            get {
                return defaultDatumField;
            } 
            set {
                defaultDatumField = value;
                NotifyPropertyChanged("DefaultDatum");
            }
        }

        private RefNameString defaultDatumField; 

        /// <summary>
        /// This is an API query parameter. See the API specification for the behavior related to this element.
        /// </summary>
		[Description("This is an API query parameter. See the API specification for the behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("privateGroupOnly")]
        public bool? PrivateGroupOnly {
            get {
                return privateGroupOnlyField;
            } 
            set {
                privateGroupOnlyField = value;
                 this.PrivateGroupOnlySpecified = true;
                NotifyPropertyChanged("PrivateGroupOnly");
            }
        }

        private bool? privateGroupOnlyField; 

        /// <summary>
        /// privateGroupOnlySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PrivateGroupOnlySpecified {
            get {
                return privateGroupOnlySpecifiedField;
            } 
            set {
                privateGroupOnlySpecifiedField = value;
                NotifyPropertyChanged("PrivateGroupOnlySpecified");
            }
        }

        private bool privateGroupOnlySpecifiedField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timestampedTimeZone xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timestampedTimeZone", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the timestampedTimeZone xsd type.")]
    public partial class TimestampedTimeZone : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimestampedTimeZone class.
        /// </summary>
        public TimestampedTimeZone() {}

        /// <summary>
        /// Initializes a new instance of the TimestampedTimeZone class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TimestampedTimeZone(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The date and time when this local time zone became active. This value must be defined on the second and subsequent occurrences.
        /// </summary>
		[Description("The date and time when this local time zone became active. This value must be defined on the second and subsequent occurrences.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        [XmlAttribute("dTim")]
		
        public DateTime DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        [RegularExpression("[Z]|([\\-+](([01][0-9])|(2[0-3])):[0-5][0-9])")]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Extension Schema. The intent is to allow standard WITSML schema extensions which will validate in older clients or servers. A client or server can ignore any schema that it does not recognize. New versions will modify specific elements to replace this type with a type that adds new elements, including another element with this type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_extensionAny", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Extension Schema. The intent is to allow standard WITSML schema extensions which will validate in older clients or servers. A client or server can ignore any schema that it does not recognize. New versions will modify specific elements to replace this type with a type that adds new elements, including another element with this type.")]
    public partial class ExtensionAny : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Any property
        /// </summary>
		[RecurringElement]
		[XmlAnyElement]
        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

         /// <summary>
         /// bool to indicate if Any has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnySpecified
         {
             get {
             if(AnyField!=null)
                 return AnyField.Count>0?true:false;
             else return false;
             }
         }
        private List<XmlElement> AnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Extension values Schema. The intent is to allow standard WITSML "named" extensions without having to modify the schema. A client or server can ignore any name that it does not recognize but certain meta data is required in order to allow generic clients or servers to process the value.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_extensionNameValue", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Extension values Schema. The intent is to allow standard WITSML named extensions without having to modify the schema. A client or server can ignore any name that it does not recognize but certain meta data is required in order to allow generic clients or servers to process the value.")]
    public partial class ExtensionNameValue : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size. For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the WITSML SIG Technical Team before use.
        /// </summary>
		[Required]
        [Description("The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size.  For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the  WITSML SIG Technical Team before use.")]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionName")]
		[XmlElement("name")]
        public ExtensionName Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private ExtensionName nameField; 

        /// <summary>
        /// The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.
        /// </summary>
		[Required]
        [Description("The value of the extension.  This may also include a uom attribute.  The content should conform to constraints defined by the data type.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "extensionvalue")]
		[XmlElement("value")]
        public Extensionvalue Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Extensionvalue valueField; 

        /// <summary>
        /// The underlying XML type of the value.
        /// </summary>
		[Required]
        [Description("The underlying XML type of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "PrimitiveType")]
		[XmlElement("dataType")]
        public PrimitiveType? DataType {
            get {
                return dataTypeField;
            } 
            set {
                dataTypeField = value;
                 this.DataTypeSpecified = true;
                NotifyPropertyChanged("DataType");
            }
        }

        
        private bool DataTypeSpecifiedField = false;
        
        /// <summary>
        /// DataTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DataTypeSpecified {
            get {
                return DataTypeSpecifiedField;
            } 
            set {
                DataTypeSpecifiedField = value;
                NotifyPropertyChanged("DataTypeSpecified");
            }
        }
        
        private PrimitiveType? dataTypeField; 

        /// <summary>
        /// The date-time associated with the value.
        /// </summary>
		[Description("The date-time associated with the value.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// The measured depth associated with the value.
        /// </summary>
		[Description("The measured depth associated with the value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Indexes things with the same name. That is, 1 indicates the first one, 2 incidates the second one, etc.
        /// </summary>
		[Description("Indexes things with the same name.  That is, 1 indicates the first one, 2 incidates the second one, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("index")]
        public short? Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private short? indexField; 

        /// <summary>
        /// indexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexSpecified {
            get {
                return indexSpecifiedField;
            } 
            set {
                indexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private bool indexSpecifiedField; 

        /// <summary>
        /// The kind of the measure. For example, "length". This should be specified if the value requires a unit of measure.
        /// </summary>
		[Description("The kind of the measure. For example, \"length\". This should be specified if the value requires a unit of measure.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set {
                measureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass measureClassField; 

        /// <summary>
        /// measureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return measureClassSpecifiedField;
            } 
            set {
                measureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool measureClassSpecifiedField; 

        /// <summary>
        /// A textual description of the extension.
        /// </summary>
		[StringLength(256)]
        [Description("A textual description of the extension.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the extensionvalue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="extensionvalue", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the extensionvalue xsd type.")]
    public partial class Extensionvalue : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the Extensionvalue class.
        /// </summary>
        public Extensionvalue() {}

        /// <summary>
        /// Initializes a new instance of the Extensionvalue class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public Extensionvalue(string value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the value. This value must conform to the values allowed by a measure class.
        /// </summary>
		[StringLength(24)]
        [Description("The unit of measure for the value. This value must conform to the values allowed by a measure class.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_customData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_customData", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_customData xsd type.")]
    public partial class CustomData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Any property
        /// </summary>
		[RecurringElement]
		[XmlAnyElement]
        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

         /// <summary>
         /// bool to indicate if Any has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnySpecified
         {
             get {
             if(AnyField!=null)
                 return AnyField.Count>0?true:false;
             else return false;
             }
         }
        private List<XmlElement> AnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Reference Point Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_referencePoint", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Reference Point Component Schema.")]
    public partial class ReferencePoint : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the point. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the point.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The kind of point. For example, 'well reference point', 'platform reference point', 'sea surface', 'sea bottom'. 
        /// </summary>
		[StringLength(50)]
        [Description("The kind of point. For example,  'well reference point', 'platform reference point', 'sea surface', 'sea bottom'.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// The gravity based elevation coordinate of this point as measured from a datum. Positive moving upward from the elevation datum. 
        /// </summary>
		[Description("The gravity based elevation coordinate of this point  as measured from a datum. Positive moving upward from the elevation datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellElevationCoord")]
		[XmlElement("elevation")]
        public WellElevationCoord Elevation {
            get {
                return elevationField;
            } 
            set {
                elevationField = value;
                NotifyPropertyChanged("Elevation");
            }
        }

        private WellElevationCoord elevationField; 

        /// <summary>
        /// The measured depth coordinate of this reference point. Positive moving toward the bottomhole from the measured depth datum. This should be given when the reference is "downhole", such as an ocean bottom template, or when the reference point is also used as a vertical well datum. The measured depth value can be used to determine if the reference point and a vertical well datum are at the same point.
        /// </summary>
		[Description("The measured depth coordinate of this reference point. Positive moving toward the bottomhole from the measured depth datum. This should be given when the reference is \"downhole\", such as an ocean  bottom template, or when the reference point is also used as a vertical well datum. The measured depth value can be used to determine if the reference point and a vertical well datum are at the same point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("measuredDepth")]
        public MeasuredDepthCoord MeasuredDepth {
            get {
                return measuredDepthField;
            } 
            set {
                measuredDepthField = value;
                NotifyPropertyChanged("MeasuredDepth");
            }
        }

        private MeasuredDepthCoord measuredDepthField; 

        /// <summary>
        /// Two dimensional coordinates that locate the point. 
        /// </summary>
		[Required]
        [Description("Two dimensional coordinates that locate the point.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_location")]
		[XmlElement("location")]
        public List<Location> Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         /// <summary>
         /// bool to indicate if Location has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LocationSpecified
         {
             get {
             if(locationField!=null)
                 return locationField.Count>0?true:false;
             else return false;
             }
         }
        private List<Location> locationField; 

        /// <summary>
        /// A textual description of the point. 
        /// </summary>
		[StringLength(4000)]
        [Description("A textual description of the point.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Location Component Schema This is a location that is expressed in terms of 2D coordinates. In order that the location be understood, the coordinate reference system (CRS) must be known. The survey location is given by a pair of tagged values. The pairs may be: (1) latitude/longitude, (2) easting/northing, (3) westing/southing, (4) projectedX/projectedY, or (5) localX/localY. The appropriate pair must be chosen for the data.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_location", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Location Component Schema This is a location that is expressed in terms of 2D coordinates. In order that the location be understood, the coordinate reference system (CRS) must be known. The survey location is given by a pair of tagged values. The pairs may be: (1) latitude/longitude, (2) easting/northing, (3) westing/southing, (4) projectedX/projectedY, or (5) localX/localY. The appropriate pair must be chosen for the data.")]
    public partial class Location : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the wellCRS that defines the CRS for the coordinates. While optional, it is strongly recommended that this be specified.
        /// </summary>
		[Description("A pointer to the wellCRS that defines the CRS for the coordinates.  While optional, it is strongly recommended that this be specified.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellCRS")]
        public RefNameString WellCRS {
            get {
                return wellCRSField;
            } 
            set {
                wellCRSField = value;
                NotifyPropertyChanged("WellCRS");
            }
        }

        private RefNameString wellCRSField; 

        /// <summary>
        /// The latitude with north being positive. If you set this property, you must also set Longitude.
        /// </summary>
        [ComponentElement]
        [XmlElement("latitude")]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
        public PlaneAngleMeasure Latitude {
            get {
                return latitudeField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Latitude when property Easting is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Latitude when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Latitude when property LocalY is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Latitude when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Latitude when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Latitude when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Latitude when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Latitude when property Westing is already set");
                latitudeField = value;
                LatitudeSpecified = (value!=null);
                NotifyPropertyChanged("Latitude");
            }
        }

        private PlaneAngleMeasure latitudeField; 
        private bool latitudeSpecified = false; 

        /// <summary>
        /// bool to indicate if Latitude has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LatitudeSpecified
        {
            get {
                return latitudeSpecified;
            }
            set {
                latitudeSpecified= value;
            }
        }

        /// <summary>
        /// The longitude with east being positive. If you set this property, you must also set Latitude.
        /// </summary>
        [ComponentElement]
        [XmlElement("longitude")]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
        public PlaneAngleMeasure Longitude {
            get {
                return longitudeField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Longitude when property Easting is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Longitude when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Longitude when property LocalY is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Longitude when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Longitude when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Longitude when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Longitude when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Longitude when property Westing is already set");
                longitudeField = value;
                LongitudeSpecified = (value!=null);
                NotifyPropertyChanged("Longitude");
            }
        }

        private PlaneAngleMeasure longitudeField; 
        private bool longitudeSpecified = false; 

        /// <summary>
        /// bool to indicate if Longitude has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LongitudeSpecified
        {
            get {
                return longitudeSpecified;
            }
            set {
                longitudeSpecified= value;
            }
        }

        /// <summary>
        /// The projected coordinate with east being positive. This is the most common type of projected coordinates. UTM coordinates are expressed in Easting and Northing. If you set this property, you must also set Northing.
        /// </summary>
        [ComponentElement]
        [XmlElement("easting")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure Easting {
            get {
                return eastingField;
            } 
            set {
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Easting when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Easting when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Easting when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Easting when property Longitude is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Easting when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Easting when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Easting when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Easting when property Westing is already set");
                eastingField = value;
                EastingSpecified = (value!=null);
                NotifyPropertyChanged("Easting");
            }
        }

        private LengthMeasure eastingField; 
        private bool eastingSpecified = false; 

        /// <summary>
        /// bool to indicate if Easting has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool EastingSpecified
        {
            get {
                return eastingSpecified;
            }
            set {
                eastingSpecified= value;
            }
        }

        /// <summary>
        /// The projected coordinate with north being positive. This is the most common type of projected coordinates. UTM coordinates are expressed in Easting and Northing. If you set this property, you must also set Easting.
        /// </summary>
        [ComponentElement]
        [XmlElement("northing")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure Northing {
            get {
                return northingField;
            } 
            set {
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Northing when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Northing when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Northing when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Northing when property Longitude is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Northing when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Northing when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Northing when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Northing when property Westing is already set");
                northingField = value;
                NorthingSpecified = (value!=null);
                NotifyPropertyChanged("Northing");
            }
        }

        private LengthMeasure northingField; 
        private bool northingSpecified = false; 

        /// <summary>
        /// bool to indicate if Northing has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool NorthingSpecified
        {
            get {
                return northingSpecified;
            }
            set {
                northingSpecified= value;
            }
        }

        /// <summary>
        /// The projected coordinate with west being positive. The positive directions are reversed from the usual Easting and Northing values. These values are generally located in the southern hemisphere, most notably in South Africa and Australia. If you set this property, you must also set Southing.
        /// </summary>
        [ComponentElement]
        [XmlElement("westing")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure Westing {
            get {
                return westingField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Westing when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Westing when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Westing when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Westing when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Westing when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Westing when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Westing when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Westing when property ProjectedY is already set");
                westingField = value;
                WestingSpecified = (value!=null);
                NotifyPropertyChanged("Westing");
            }
        }

        private LengthMeasure westingField; 
        private bool westingSpecified = false; 

        /// <summary>
        /// bool to indicate if Westing has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool WestingSpecified
        {
            get {
                return westingSpecified;
            }
            set {
                westingSpecified= value;
            }
        }

        /// <summary>
        /// The projected coordinate with south being positive. The positive directions are reversed from the usual Easting and Northing values. These values are generally located in the southern hemisphere, most notably in South Africa and Australia. If you set this property, you must also set Westing.
        /// </summary>
        [ComponentElement]
        [XmlElement("southing")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure Southing {
            get {
                return southingField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Southing when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Southing when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Southing when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Southing when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Southing when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Southing when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Southing when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Southing when property ProjectedY is already set");
                southingField = value;
                SouthingSpecified = (value!=null);
                NotifyPropertyChanged("Southing");
            }
        }

        private LengthMeasure southingField; 
        private bool southingSpecified = false; 

        /// <summary>
        /// bool to indicate if Southing has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SouthingSpecified
        {
            get {
                return southingSpecified;
            }
            set {
                southingSpecified= value;
            }
        }

        /// <summary>
        /// The projected X coordinate with the positive direction unknown. ProjectedX and ProjectedY are used when it is not known what the meaning of the coordinates is. If the meaning is known, the Easting/Northing or Westing/Southing should be used. Use of this pair implies a lack of knowledge on the part of the sender. If you set this property, you must also set ProjectedY.
        /// </summary>
        [ComponentElement]
        [XmlElement("projectedX")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure ProjectedX {
            get {
                return projectedXField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property ProjectedX when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property ProjectedX when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property ProjectedX when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property ProjectedX when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property ProjectedX when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property ProjectedX when property Northing is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property ProjectedX when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property ProjectedX when property Westing is already set");
                projectedXField = value;
                ProjectedXSpecified = (value!=null);
                NotifyPropertyChanged("ProjectedX");
            }
        }

        private LengthMeasure projectedXField; 
        private bool projectedXSpecified = false; 

        /// <summary>
        /// bool to indicate if ProjectedX has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ProjectedXSpecified
        {
            get {
                return projectedXSpecified;
            }
            set {
                projectedXSpecified= value;
            }
        }

        /// <summary>
        /// The projected Y coordinate with the positive direction unknown. ProjectedX and ProjectedY are used when it is not known what the meaning of the coordinates is. If the meaning is known, the Easting/Northing or Westing/Southing should be used. Use of this pair implies a lack of knowledge on the part of the sender. If you set this property, you must also set ProjectedX.
        /// </summary>
        [ComponentElement]
        [XmlElement("projectedY")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure ProjectedY {
            get {
                return projectedYField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property ProjectedY when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property ProjectedY when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property ProjectedY when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property ProjectedY when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property ProjectedY when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property ProjectedY when property Northing is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property ProjectedY when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property ProjectedY when property Westing is already set");
                projectedYField = value;
                ProjectedYSpecified = (value!=null);
                NotifyPropertyChanged("ProjectedY");
            }
        }

        private LengthMeasure projectedYField; 
        private bool projectedYSpecified = false; 

        /// <summary>
        /// bool to indicate if ProjectedY has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ProjectedYSpecified
        {
            get {
                return projectedYSpecified;
            }
            set {
                projectedYSpecified= value;
            }
        }

        /// <summary>
        /// The local (engineering) X coordinate. The CRS will define the orientation of the axis. If you set this property, you must also set LocalY.
        /// </summary>
        [ComponentElement]
        [XmlElement("localX")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure LocalX {
            get {
                return localXField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property LocalX when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property LocalX when property Latitude is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property LocalX when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property LocalX when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property LocalX when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property LocalX when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property LocalX when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property LocalX when property Westing is already set");
                localXField = value;
                LocalXSpecified = (value!=null);
                NotifyPropertyChanged("LocalX");
            }
        }

        private LengthMeasure localXField; 
        private bool localXSpecified = false; 

        /// <summary>
        /// bool to indicate if LocalX has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LocalXSpecified
        {
            get {
                return localXSpecified;
            }
            set {
                localXSpecified= value;
            }
        }

        /// <summary>
        /// The local (engineering) Y coordinate. The CRS will define the orientation of the axis. If you set this property, you must also set LocalX.
        /// </summary>
        [ComponentElement]
        [XmlElement("localY")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure LocalY {
            get {
                return localYField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property LocalY when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property LocalY when property Latitude is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property LocalY when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property LocalY when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property LocalY when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property LocalY when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property LocalY when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property LocalY when property Westing is already set");
                localYField = value;
                LocalYSpecified = (value!=null);
                NotifyPropertyChanged("LocalY");
            }
        }

        private LengthMeasure localYField; 
        private bool localYSpecified = false; 

        /// <summary>
        /// bool to indicate if LocalY has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LocalYSpecified
        {
            get {
                return localYSpecified;
            }
            set {
                localYSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType> ItemsElementNameField; 

        /// <summary>
        /// Flag indicating (if "true" or "1") that this pair of values was the original data given for the location. If the pair of values was calculated from an original pair of values, this flag should be "false" (or "0"), or not present.
        /// </summary>
		[Description("Flag indicating (if \"true\" or \"1\") that this pair of values was  the original data given for the location. If the pair of values was  calculated from an original pair of values, this flag should be \"false\" (or \"0\"),  or not present.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("original")]
        public bool? Original {
            get {
                return originalField;
            } 
            set {
                originalField = value;
                 this.OriginalSpecified = true;
                NotifyPropertyChanged("Original");
            }
        }

        private bool? originalField; 

        /// <summary>
        /// originalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OriginalSpecified {
            get {
                return originalSpecifiedField;
            } 
            set {
                originalSpecifiedField = value;
                NotifyPropertyChanged("OriginalSpecified");
            }
        }

        private bool originalSpecifiedField; 

        /// <summary>
        /// A Comment, generally given to help the reader interpret the coordinates if the CRS and the chosen pair do not make them clear.
        /// </summary>
		[StringLength(256)]
        [Description("A Comment, generally given to help the reader  interpret the coordinates if the CRS and the chosen pair do not make them clear.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_publicLandSurveySystem xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_publicLandSurveySystem", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_publicLandSurveySystem xsd type.")]
    public partial class PublicLandSurveySystem : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Principal meridian for this location.
        /// </summary>
		[Description("Principal meridian for this location.")]
        [EnergisticsDataTypeAttribute(DataType = "PrincipalMeridian")]
		[XmlElement("principalMeridian")]
        public PrincipalMeridian? PrincipalMeridian {
            get {
                return principalMeridianField;
            } 
            set {
                principalMeridianField = value;
                 this.PrincipalMeridianSpecified = true;
                NotifyPropertyChanged("PrincipalMeridian");
            }
        }

        private PrincipalMeridian? principalMeridianField; 

        /// <summary>
        /// principalMeridianSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PrincipalMeridianSpecified {
            get {
                return principalMeridianSpecifiedField;
            } 
            set {
                principalMeridianSpecifiedField = value;
                NotifyPropertyChanged("PrincipalMeridianSpecified");
            }
        }

        private bool principalMeridianSpecifiedField; 

        /// <summary>
        /// Range number.
        /// </summary>
		[Description("Range number.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("range")]
        public short? Range {
            get {
                return rangeField;
            } 
            set {
                rangeField = value;
                 this.RangeSpecified = true;
                NotifyPropertyChanged("Range");
            }
        }

        private short? rangeField; 

        /// <summary>
        /// rangeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RangeSpecified {
            get {
                return rangeSpecifiedField;
            } 
            set {
                rangeSpecifiedField = value;
                NotifyPropertyChanged("RangeSpecified");
            }
        }

        private bool rangeSpecifiedField; 

        /// <summary>
        /// Range direction.
        /// </summary>
		[Description("Range direction.")]
        [EnergisticsDataTypeAttribute(DataType = "EastOrWest")]
		[XmlElement("rangeDir")]
        public EastOrWest? RangeDir {
            get {
                return rangeDirField;
            } 
            set {
                rangeDirField = value;
                 this.RangeDirSpecified = true;
                NotifyPropertyChanged("RangeDir");
            }
        }

        private EastOrWest? rangeDirField; 

        /// <summary>
        /// rangeDirSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RangeDirSpecified {
            get {
                return rangeDirSpecifiedField;
            } 
            set {
                rangeDirSpecifiedField = value;
                NotifyPropertyChanged("RangeDirSpecified");
            }
        }

        private bool rangeDirSpecifiedField; 

        /// <summary>
        /// Township number.
        /// </summary>
		[Description("Township number.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("township")]
        public short? Township {
            get {
                return townshipField;
            } 
            set {
                townshipField = value;
                 this.TownshipSpecified = true;
                NotifyPropertyChanged("Township");
            }
        }

        private short? townshipField; 

        /// <summary>
        /// townshipSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TownshipSpecified {
            get {
                return townshipSpecifiedField;
            } 
            set {
                townshipSpecifiedField = value;
                NotifyPropertyChanged("TownshipSpecified");
            }
        }

        private bool townshipSpecifiedField; 

        /// <summary>
        /// Township direction.
        /// </summary>
		[Description("Township direction.")]
        [EnergisticsDataTypeAttribute(DataType = "NorthOrSouth")]
		[XmlElement("townshipDir")]
        public NorthOrSouth? TownshipDir {
            get {
                return townshipDirField;
            } 
            set {
                townshipDirField = value;
                 this.TownshipDirSpecified = true;
                NotifyPropertyChanged("TownshipDir");
            }
        }

        private NorthOrSouth? townshipDirField; 

        /// <summary>
        /// townshipDirSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TownshipDirSpecified {
            get {
                return townshipDirSpecifiedField;
            } 
            set {
                townshipDirSpecifiedField = value;
                NotifyPropertyChanged("TownshipDirSpecified");
            }
        }

        private bool townshipDirSpecifiedField; 

        /// <summary>
        /// Section number.
        /// </summary>
		[RegularExpression("[+]?([1-9]|[1-2][0-9]|3[0-6])\\.?[0-9]?")]
        [Description("Section number.")]
        [EnergisticsDataTypeAttribute(DataType = "sectionNumber")]
		[XmlElement("section")]
        public string Section {
            get {
                return sectionField;
            } 
            set {
                sectionField = value;
                NotifyPropertyChanged("Section");
            }
        }

        private string sectionField; 

        /// <summary>
        /// The location of the well within the section, with the primary component listed first. Spot location will be made some from combination of the following codes: NE, NW, SW, SE, N2, S2, E2, W2, C (center quarter), LTxx (where xx represents a two digit lot designation), TRzz (where zz represents a one or two character trac designation). Free format will allow for entries such as NESW (southwest quarter of northeast quarter), E2NESE (southeast quarter of northeast quarter of east half), CNE (northeast quarter of center quarter), etc.
        /// </summary>
		[RegularExpression("(NE|NW|SW|SE|N2|S2|E2|W2|C|LT[0-9]{2,2}|TR[a-zA-Z0-9]{1,2}){1,3}")]
        [StringLength(12)]
        [Description("The location of the well within the section,  with the primary component listed first. Spot location will be made some from combination of the following codes: NE, NW, SW, SE, N2, S2, E2, W2, C (center quarter),  LTxx (where xx represents a two digit lot designation),  TRzz (where zz represents a one or two character trac designation).  Free format will allow for entries such as NESW (southwest quarter of northeast quarter),  E2NESE (southeast quarter of northeast quarter of east half), CNE (northeast quarter of center quarter), etc.")]
        [EnergisticsDataTypeAttribute(DataType = "publicLandSurveySystemQuarterSection")]
		[XmlElement("quarterSection")]
        public string QuarterSection {
            get {
                return quarterSectionField;
            } 
            set {
                quarterSectionField = value;
                NotifyPropertyChanged("QuarterSection");
            }
        }

        private string quarterSectionField; 

        /// <summary>
        /// Quarter township.
        /// </summary>
		[RegularExpression("NE|NW|SW|SE")]
        [StringLength(12)]
        [Description("Quarter township.")]
        [EnergisticsDataTypeAttribute(DataType = "publicLandSurveySystemQuarterTownship")]
		[XmlElement("quarterTownship")]
        public string QuarterTownship {
            get {
                return quarterTownshipField;
            } 
            set {
                quarterTownshipField = value;
                NotifyPropertyChanged("QuarterTownship");
            }
        }

        private string quarterTownshipField; 

        /// <summary>
        /// Distance inside of the boundary line of the specified section. North specifies the distance from the north boundary line.
        /// </summary>
		[Description("Distance inside of the boundary line of the specified section.  North specifies the distance from the north boundary line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "footageNorthSouth")]
		[XmlElement("footageNS")]
        public FootageNorthSouth FootageNS {
            get {
                return footageNSField;
            } 
            set {
                footageNSField = value;
                NotifyPropertyChanged("FootageNS");
            }
        }

        private FootageNorthSouth footageNSField; 

        /// <summary>
        /// Distance inside of the boundary line of the specified section. East specifies the distance from the east boundary line.
        /// </summary>
		[Description("Distance inside of the boundary line of the specified section.  East specifies the distance from the east boundary line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "footageEastWest")]
		[XmlElement("footageEW")]
        public FootageEastWest FootageEW {
            get {
                return footageEWField;
            } 
            set {
                footageEWField = value;
                NotifyPropertyChanged("FootageEW");
            }
        }

        private FootageEastWest footageEWField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Well object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_well", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Well object.")]
    public partial class Well : Object, IWitsmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Legal name of the well. 
        /// </summary>
		[StringLength(64)]
        [Description("Legal name of the well.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameLegal")]
        public string NameLegal {
            get {
                return nameLegalField;
            } 
            set {
                nameLegalField = value;
                NotifyPropertyChanged("NameLegal");
            }
        }

        private string nameLegalField; 

        /// <summary>
        /// License number of the well. 
        /// </summary>
		[StringLength(64)]
        [Description("License number of the well.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("numLicense")]
        public string NumLicense {
            get {
                return numLicenseField;
            } 
            set {
                numLicenseField = value;
                NotifyPropertyChanged("NumLicense");
            }
        }

        private string numLicenseField; 

        /// <summary>
        /// Government assigned well number. 
        /// </summary>
		[StringLength(64)]
        [Description("Government assigned well number.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("numGovt")]
        public string NumGovt {
            get {
                return numGovtField;
            } 
            set {
                numGovtField = value;
                NotifyPropertyChanged("NumGovt");
            }
        }

        private string numGovtField; 

        /// <summary>
        /// Date and time license was issued. 
        /// </summary>
		[Description("Date and time license  was issued.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimLicense")]
        public Timestamp? DateTimeLicense {
            get {
                return dTimLicenseField;
            } 
            set {
                dTimLicenseField = value;
                 this.DateTimeLicenseSpecified = true;
                NotifyPropertyChanged("DateTimeLicense");
            }
        }

        private Timestamp? dTimLicenseField; 

        /// <summary>
        /// dTimLicenseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeLicenseSpecified {
            get {
                return dTimLicenseSpecifiedField;
            } 
            set {
                dTimLicenseSpecifiedField = value;
                NotifyPropertyChanged("DateTimeLicenseSpecified");
            }
        }

        private bool dTimLicenseSpecifiedField; 

        /// <summary>
        /// Name of the field in which the well is located. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of the field in which the well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("field")]
        public string Field {
            get {
                return fieldField;
            } 
            set {
                fieldField = value;
                NotifyPropertyChanged("Field");
            }
        }

        private string fieldField; 

        /// <summary>
        /// Country in which well is located. 
        /// </summary>
		[StringLength(32)]
        [Description("Country in which well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("country")]
        public string Country {
            get {
                return countryField;
            } 
            set {
                countryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private string countryField; 

        /// <summary>
        /// State or province in which well is located. 
        /// </summary>
		[StringLength(32)]
        [Description("State or province in which well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("state")]
        public string State {
            get {
                return stateField;
            } 
            set {
                stateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private string stateField; 

        /// <summary>
        /// County in which the well is located. 
        /// </summary>
		[StringLength(32)]
        [Description("County in which the well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("county")]
        public string County {
            get {
                return countyField;
            } 
            set {
                countyField = value;
                NotifyPropertyChanged("County");
            }
        }

        private string countyField; 

        /// <summary>
        /// Geo-political region. 
        /// </summary>
		[StringLength(32)]
        [Description("Geo-political region.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("region")]
        public string Region {
            get {
                return regionField;
            } 
            set {
                regionField = value;
                NotifyPropertyChanged("Region");
            }
        }

        private string regionField; 

        /// <summary>
        /// Geo-political district name. 
        /// </summary>
		[StringLength(32)]
        [Description("Geo-political district name.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("district")]
        public string District {
            get {
                return districtField;
            } 
            set {
                districtField = value;
                NotifyPropertyChanged("District");
            }
        }

        private string districtField; 

        /// <summary>
        /// Block name in which well is located. 
        /// </summary>
		[StringLength(32)]
        [Description("Block name in which well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("block")]
        public string Block {
            get {
                return blockField;
            } 
            set {
                blockField = value;
                NotifyPropertyChanged("Block");
            }
        }

        private string blockField; 

        /// <summary>
        /// The time zone in which well is located. It is the deviation in hours and minutes from UTC. This should be the normal time zone at the well and not a seasonally adjusted value such as daylight savings time.
        /// </summary>
		[Required]
        [RegularExpression("[Z]|([\\-+](([01][0-9])|(2[0-3])):[0-5][0-9])")]
        [Description("The time zone in which well is located.   It is the deviation in hours and minutes from UTC. This should be the normal time zone at the well and not a seasonally  adjusted value such as daylight savings time.")]
        [EnergisticsDataTypeAttribute(DataType = "timeZone")]
		[XmlElement("timeZone")]
        public string TimeZone {
            get {
                return timeZoneField;
            } 
            set {
                timeZoneField = value;
                NotifyPropertyChanged("TimeZone");
            }
        }

        private string timeZoneField; 

        /// <summary>
        /// Operator company name. 
        /// </summary>
		[StringLength(64)]
        [Description("Operator company name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("operator")]
        public string Operator {
            get {
                return operatorField;
            } 
            set {
                operatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private string operatorField; 

        /// <summary>
        /// Division of operator company. 
        /// </summary>
		[StringLength(64)]
        [Description("Division of operator company.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("operatorDiv")]
        public string OperatorDivision {
            get {
                return operatorDivField;
            } 
            set {
                operatorDivField = value;
                NotifyPropertyChanged("OperatorDivision");
            }
        }

        private string operatorDivField; 

        /// <summary>
        /// Interest for Operator. Commonly in percent. 
        /// </summary>
		[Description("Interest for Operator. Commonly in percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("pcInterest")]
        public DimensionlessMeasure PercentInterest {
            get {
                return pcInterestField;
            } 
            set {
                pcInterestField = value;
                NotifyPropertyChanged("PercentInterest");
            }
        }

        private DimensionlessMeasure pcInterestField; 

        /// <summary>
        /// American Petroleum Institute well number. 
        /// </summary>
		[StringLength(32)]
        [Description("American Petroleum Institute well number.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("numAPI")]
        public string NumAPI {
            get {
                return numAPIField;
            } 
            set {
                numAPIField = value;
                NotifyPropertyChanged("NumAPI");
            }
        }

        private string numAPIField; 

        /// <summary>
        /// POSC Well status. 
        /// </summary>
		[Description("POSC Well status.")]
        [EnergisticsDataTypeAttribute(DataType = "WellStatus")]
		[XmlElement("statusWell")]
        public WellStatus? StatusWell {
            get {
                return statusWellField;
            } 
            set {
                statusWellField = value;
                 this.StatusWellSpecified = true;
                NotifyPropertyChanged("StatusWell");
            }
        }

        private WellStatus? statusWellField; 

        /// <summary>
        /// statusWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusWellSpecified {
            get {
                return statusWellSpecifiedField;
            } 
            set {
                statusWellSpecifiedField = value;
                NotifyPropertyChanged("StatusWellSpecified");
            }
        }

        private bool statusWellSpecifiedField; 

        /// <summary>
        /// POSC well purpose. 
        /// </summary>
		[Description("POSC well purpose.")]
        [EnergisticsDataTypeAttribute(DataType = "WellPurpose")]
		[XmlElement("purposeWell")]
        public WellPurpose? PurposeWell {
            get {
                return purposeWellField;
            } 
            set {
                purposeWellField = value;
                 this.PurposeWellSpecified = true;
                NotifyPropertyChanged("PurposeWell");
            }
        }

        private WellPurpose? purposeWellField; 

        /// <summary>
        /// purposeWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PurposeWellSpecified {
            get {
                return purposeWellSpecifiedField;
            } 
            set {
                purposeWellSpecifiedField = value;
                NotifyPropertyChanged("PurposeWellSpecified");
            }
        }

        private bool purposeWellSpecifiedField; 

        /// <summary>
        /// POSC well fluid. The type of fluid being produced from or injected into a well facility. 
        /// </summary>
		[Description("POSC well fluid. The type of fluid being produced from or injected  into a well facility.")]
        [EnergisticsDataTypeAttribute(DataType = "WellFluid")]
		[XmlElement("fluidWell")]
        public WellFluid? FluidWell {
            get {
                return fluidWellField;
            } 
            set {
                fluidWellField = value;
                 this.FluidWellSpecified = true;
                NotifyPropertyChanged("FluidWell");
            }
        }

        private WellFluid? fluidWellField; 

        /// <summary>
        /// fluidWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidWellSpecified {
            get {
                return fluidWellSpecifiedField;
            } 
            set {
                fluidWellSpecifiedField = value;
                NotifyPropertyChanged("FluidWellSpecified");
            }
        }

        private bool fluidWellSpecifiedField; 

        /// <summary>
        /// POSC well direction. The direction of flow of the fluids in a well facility (generally, injected or produced, or some combination). 
        /// </summary>
		[Description("POSC well direction. The direction of flow of the fluids in a well facility (generally, injected or produced, or some combination).")]
        [EnergisticsDataTypeAttribute(DataType = "WellDirection")]
		[XmlElement("directionWell")]
        public WellDirection? DirectionWell {
            get {
                return directionWellField;
            } 
            set {
                directionWellField = value;
                 this.DirectionWellSpecified = true;
                NotifyPropertyChanged("DirectionWell");
            }
        }

        private WellDirection? directionWellField; 

        /// <summary>
        /// directionWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionWellSpecified {
            get {
                return directionWellSpecifiedField;
            } 
            set {
                directionWellSpecifiedField = value;
                NotifyPropertyChanged("DirectionWellSpecified");
            }
        }

        private bool directionWellSpecifiedField; 

        /// <summary>
        /// Date and time at which well was spudded. 
        /// </summary>
		[Description("Date and time at which well was spudded.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimSpud")]
        public Timestamp? DateTimeSpud {
            get {
                return dTimSpudField;
            } 
            set {
                dTimSpudField = value;
                 this.DateTimeSpudSpecified = true;
                NotifyPropertyChanged("DateTimeSpud");
            }
        }

        private Timestamp? dTimSpudField; 

        /// <summary>
        /// dTimSpudSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpudSpecified {
            get {
                return dTimSpudSpecifiedField;
            } 
            set {
                dTimSpudSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpudSpecified");
            }
        }

        private bool dTimSpudSpecifiedField; 

        /// <summary>
        /// Date and time at which well was plugged and abandoned. 
        /// </summary>
		[Description("Date and time at which well was plugged and abandoned.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimPa")]
        public Timestamp? DateTimePluggedAndAbandoned {
            get {
                return dTimPaField;
            } 
            set {
                dTimPaField = value;
                 this.DateTimePluggedAndAbandonedSpecified = true;
                NotifyPropertyChanged("DateTimePluggedAndAbandoned");
            }
        }

        private Timestamp? dTimPaField; 

        /// <summary>
        /// dTimPaSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePluggedAndAbandonedSpecified {
            get {
                return dTimPaSpecifiedField;
            } 
            set {
                dTimPaSpecifiedField = value;
                NotifyPropertyChanged("DateTimePluggedAndAbandonedSpecified");
            }
        }

        private bool dTimPaSpecifiedField; 

        /// <summary>
        /// Elevation of wellhead relative to a wellDatum. 
        /// </summary>
		[Description("Elevation of wellhead relative to a wellDatum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellElevationCoord")]
		[XmlElement("wellheadElevation")]
        public WellElevationCoord WellheadElevation {
            get {
                return wellheadElevationField;
            } 
            set {
                wellheadElevationField = value;
                NotifyPropertyChanged("WellheadElevation");
            }
        }

        private WellElevationCoord wellheadElevationField; 

        /// <summary>
        /// A vertical datum to which elevations and depths are referenced. 
        /// </summary>
		[Description("A vertical datum to which elevations and depths are referenced.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellDatum")]
		[XmlElement("wellDatum")]
        public List<WellDatum> WellDatum {
            get {
                return wellDatumField;
            } 
            set {
                wellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

         /// <summary>
         /// bool to indicate if WellDatum has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellDatumSpecified
         {
             get {
             if(wellDatumField!=null)
                 return wellDatumField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellDatum> wellDatumField; 

        /// <summary>
        /// Elevation of ground level (land rigs). 
        /// </summary>
		[Description("Elevation of ground level (land rigs).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellElevationCoord")]
		[XmlElement("groundElevation")]
        public WellElevationCoord GroundElevation {
            get {
                return groundElevationField;
            } 
            set {
                groundElevationField = value;
                NotifyPropertyChanged("GroundElevation");
            }
        }

        private WellElevationCoord groundElevationField; 

        /// <summary>
        /// Depth of water (not land rigs). 
        /// </summary>
		[Description("Depth of water (not land rigs).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("waterDepth")]
        public LengthMeasure WaterDepth {
            get {
                return waterDepthField;
            } 
            set {
                waterDepthField = value;
                NotifyPropertyChanged("WaterDepth");
            }
        }

        private LengthMeasure waterDepthField; 

        /// <summary>
        /// the 2D coordinates of the well surface point in one coordinate reference system. This is where the well crosses ground level on land and crosses the platform offshore. 
        /// </summary>
		[Description("the 2D coordinates of the well surface point in one coordinate reference system.  This is where the well crosses ground level on land and crosses the platform offshore.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_location")]
		[XmlElement("wellLocation")]
        public List<Location> WellLocation {
            get {
                return wellLocationField;
            } 
            set {
                wellLocationField = value;
                NotifyPropertyChanged("WellLocation");
            }
        }

         /// <summary>
         /// bool to indicate if WellLocation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellLocationSpecified
         {
             get {
             if(wellLocationField!=null)
                 return wellLocationField.Count>0?true:false;
             else return false;
             }
         }
        private List<Location> wellLocationField; 

        /// <summary>
        /// Township, section, range, quarter, and footage calls for USA Public Land Survey System.
        /// </summary>
		[Description("Township, section, range, quarter, and footage calls for USA Public Land Survey System.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_publicLandSurveySystem")]
		[XmlElement("wellPublicLandSurveySystemLocation")]
        public PublicLandSurveySystem WellPublicLandSurveySystemLocation {
            get {
                return wellPublicLandSurveySystemLocationField;
            } 
            set {
                wellPublicLandSurveySystemLocationField = value;
                NotifyPropertyChanged("WellPublicLandSurveySystemLocation");
            }
        }

        private PublicLandSurveySystem wellPublicLandSurveySystemLocationField; 

        /// <summary>
        /// Defines a reference point within the context of the well. 
        /// </summary>
		[Description("Defines a reference point within the context of the well.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_referencePoint")]
		[XmlElement("referencePoint")]
        public List<ReferencePoint> ReferencePoint {
            get {
                return referencePointField;
            } 
            set {
                referencePointField = value;
                NotifyPropertyChanged("ReferencePoint");
            }
        }

         /// <summary>
         /// bool to indicate if ReferencePoint has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ReferencePointSpecified
         {
             get {
             if(referencePointField!=null)
                 return referencePointField.Count>0?true:false;
             else return false;
             }
         }
        private List<ReferencePoint> referencePointField; 

        /// <summary>
        /// A coordinate reference system that was used within the context of this well. 
        /// </summary>
		[Description("A coordinate reference system that was used within  the context of this well.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellCRS")]
		[XmlElement("wellCRS")]
        public List<WellCRS> WellCRS {
            get {
                return wellCRSField;
            } 
            set {
                wellCRSField = value;
                NotifyPropertyChanged("WellCRS");
            }
        }

         /// <summary>
         /// bool to indicate if WellCRS has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellCRSSpecified
         {
             get {
             if(wellCRSField!=null)
                 return wellCRSField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellCRS> wellCRSField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates within the context of a well. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellDatum", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates within the context of a well. ")]
    public partial class WellDatum : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The human understandable contextual name of the reference datum.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The human understandable contextual name of the reference datum.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The code value that represents the type of reference datum. This may represent a point on a device (e.g., kelly bushing) or it may represent a vertical reference datum (e.g., mean sea level).
        /// </summary>
		[Description("The code value that represents the type of reference datum.  This may represent a point on a device (e.g., kelly bushing) or it may represent  a vertical reference datum (e.g., mean sea level).")]
        [EnergisticsDataTypeAttribute(DataType = "ElevCodeEnum")]
		[XmlElement("code")]
        public ElevCodeEnum? Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                 this.CodeSpecified = true;
                NotifyPropertyChanged("Code");
            }
        }

        private ElevCodeEnum? codeField; 

        /// <summary>
        /// codeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CodeSpecified {
            get {
                return codeSpecifiedField;
            } 
            set {
                codeSpecifiedField = value;
                NotifyPropertyChanged("CodeSpecified");
            }
        }

        private bool codeSpecifiedField; 

        /// <summary>
        /// The name of the vertical reference datum in a particular naming system. This should only be specified if the above 'code' represents some variation of sea level. An optional short name (code) can also be specified. Specifying a well known datum is highly desired if the above code is a variant of sea level because sea level varies over time and space. An example would be to specify a name of 'Caspian Sea' with a code of '5106' in the 'EPSG' naming system.
        /// </summary>
        [ComponentElement]
        [XmlElement("datumName")]
        [EnergisticsDataTypeAttribute(DataType = "wellKnownNameStruct")]
        public WellKnownNameStruct DatumName {
            get {
                return datumNameField;
            } 
            set {
                if (value != null && DatumCRSSpecified) throw new Exception("Cannot set property DatumName when property DatumCRS is already set");
                datumNameField = value;
                DatumNameSpecified = (value!=null);
                NotifyPropertyChanged("DatumName");
            }
        }

        private WellKnownNameStruct datumNameField; 
        private bool datumNameSpecified = false; 

        /// <summary>
        /// bool to indicate if DatumName has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DatumNameSpecified
        {
            get {
                return datumNameSpecified;
            }
            set {
                datumNameSpecified= value;
            }
        }

        /// <summary>
        /// A reference to the coordinateReferenceSystem object representing the vertical reference datum (i.e., this wellDatum). This should only be specified if the above 'code' represents some variation of sea level. 
        /// </summary>
        [ComponentElement]
        [XmlElement("datumCRS")]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
        public RefNameString DatumCRS {
            get {
                return datumCRSField;
            } 
            set {
                if (value != null && DatumNameSpecified) throw new Exception("Cannot set property DatumCRS when property DatumName is already set");
                datumCRSField = value;
                DatumCRSSpecified = (value!=null);
                NotifyPropertyChanged("DatumCRS");
            }
        }

        private RefNameString datumCRSField; 
        private bool datumCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if DatumCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DatumCRSSpecified
        {
            get {
                return datumCRSSpecified;
            }
            set {
                datumCRSSpecified= value;
            }
        }


        /// <summary>
        /// Since various activities may use different points as measurement datums, it is useful to characterize the point based on its usage. A well reference datum may have more than one such characterization. For example, it may be the datum used by the driller and logger for measuring their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).
        /// </summary>
		[Description("Since various activities may use different points as  measurement datums, it is useful to characterize the point based on its usage.  A well reference datum may have more than one such characterization.  For example, it may be the datum used by the driller and logger for measuring  their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("kind")]
        public List<string> Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

         /// <summary>
         /// bool to indicate if Kind has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KindSpecified
         {
             get {
             if(kindField!=null)
                 return kindField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> kindField; 

        /// <summary>
        /// A pointer to the wellbore that contains the reference datum. This should be specified if a measured depth is given.
        /// </summary>
		[Description("A pointer to the wellbore that contains the reference datum. This should be specified if a measured depth is given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_refWellWellbore")]
		[XmlElement("wellbore")]
        public RefWellWellbore Wellbore {
            get {
                return wellboreField;
            } 
            set {
                wellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private RefWellWellbore wellboreField; 

        /// <summary>
        /// A pointer to the rig that contains the device used as a reference datum. The rig may be associated with a wellbore in another well (e.g., pattern drilling using a rig on a track).
        /// </summary>
		[Description("A pointer to the rig that contains the device used  as a reference datum. The rig may be associated with a wellbore in another well (e.g., pattern drilling using a rig on a track).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_refWellWellboreRig")]
		[XmlElement("rig")]
        public RefWellWellboreRig Rig {
            get {
                return rigField;
            } 
            set {
                rigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private RefWellWellboreRig rigField; 

        /// <summary>
        /// The gravity based elevation coordinate of this reference datum as measured from another datum. Positive moving upward from the elevation datum. An elevation should be given unless this is a vertical reference datum (e.g., sea level). 
        /// </summary>
		[Description("The gravity based elevation coordinate of this reference datum  as measured from another datum. Positive moving upward from the elevation datum. An elevation should be given unless this is a vertical reference datum (e.g., sea level).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellElevationCoord")]
		[XmlElement("elevation")]
        public WellElevationCoord Elevation {
            get {
                return elevationField;
            } 
            set {
                elevationField = value;
                NotifyPropertyChanged("Elevation");
            }
        }

        private WellElevationCoord elevationField; 

        /// <summary>
        /// The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is "downhole", such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a Depth is given then an Elevation should also be given.
        /// </summary>
		[Description("The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is \"downhole\",  such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a Depth is given then an Elevation should also be given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("measuredDepth")]
        public MeasuredDepthCoord MeasuredDepth {
            get {
                return measuredDepthField;
            } 
            set {
                measuredDepthField = value;
                NotifyPropertyChanged("MeasuredDepth");
            }
        }

        private MeasuredDepthCoord measuredDepthField; 

        /// <summary>
        /// The horizontal location of the point being used as a well datum. This may be used when the point is not directly above or below the well point location. For example, a well being drilled from a platform may have its location at the entrance into the sea floor, while the well datum may be located on the drilling rig. Or the well datum may be a kickoff point, that is not directly under the well surface point. 
        /// </summary>
		[Description("The horizontal location of the point being used as a well datum.  This may be used when the point is not directly above or below the well point location.  For example, a well being drilled from a platform may have its location at the entrance  into the sea floor, while the well datum may be located on the drilling rig.  Or the well datum may be a kickoff point, that is not directly under the well surface point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_location")]
		[XmlElement("horizontalLocation")]
        public Location HorizontalLocation {
            get {
                return horizontalLocationField;
            } 
            set {
                horizontalLocationField = value;
                NotifyPropertyChanged("HorizontalLocation");
            }
        }

        private Location horizontalLocationField; 

        /// <summary>
        /// A contextual description of the well reference datum.
        /// </summary>
		[StringLength(4000)]
        [Description("A contextual description of the well reference datum.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// The unique identifier of the node. All measured depth, vertical depth and elevation coordinates may point to this uid using attribute "datum". Alternatively, the commonData elements defaultMeasuredDatum, defaultVerticalDatum and defaultElevationDatum may point to this value. The best practice for the uid is to derive it from the name. For example, by changing spaces to underscores.
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of the node. All measured depth, vertical depth and elevation coordinates may point to this uid using attribute \"datum\". Alternatively, the commonData elements defaultMeasuredDatum, defaultVerticalDatum and defaultElevationDatum may point to this value. The best practice for the uid is to derive it from the name. For example, by changing spaces to underscores.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellKnownNameStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellKnownNameStruct", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the wellKnownNameStruct xsd type.")]
    public partial class WellKnownNameStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellKnownNameStruct class.
        /// </summary>
        public WellKnownNameStruct() {}

        /// <summary>
        /// Initializes a new instance of the WellKnownNameStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public WellKnownNameStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is unique.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The naming system within the name is unique.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("namingSystem")]
		
        public string NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private string namingSystemField; 

		/// <summary>
        /// A unique (short) code associated with the name.
        /// </summary>
		[StringLength(50)]
        [Description("A unique (short) code associated with the name.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
        [XmlAttribute("code")]
		
        public string Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private string codeField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Data that represents a foreign key to a wellbore. The wellbore may be defined within the context of another well.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellWellbore", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Data that represents a foreign key to a wellbore. The wellbore may be defined within the context of another well.")]
    public partial class RefWellWellbore : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer the wellbore with which there is a relationship.
        /// </summary>
		[Required]
        [Description("A pointer the wellbore with which there is a relationship.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellboreReference")]
        public RefNameString WellboreReference {
            get {
                return wellboreReferenceField;
            } 
            set {
                wellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private RefNameString wellboreReferenceField; 

        /// <summary>
        /// A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
		[Description("A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the  context of a common parent well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellParent")]
        public RefNameString WellParent {
            get {
                return wellParentField;
            } 
            set {
                wellParentField = value;
                NotifyPropertyChanged("WellParent");
            }
        }

        private RefNameString wellParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A reference to a rig within a wellbore. The wellbore may be defined within the context of another well. This value represents a foreign key from one node to another.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellWellboreRig", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A reference to a rig within a wellbore. The wellbore may be defined within the context of another well. This value represents a foreign key from one node to another.")]
    public partial class RefWellWellboreRig : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the rig with which there is a relationship.
        /// </summary>
		[Required]
        [Description("A pointer to the rig with which there is a relationship.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("rigReference")]
        public RefNameString RigReference {
            get {
                return rigReferenceField;
            } 
            set {
                rigReferenceField = value;
                NotifyPropertyChanged("RigReference");
            }
        }

        private RefNameString rigReferenceField; 

        /// <summary>
        /// A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the context of a common parent wellbore.
        /// </summary>
		[Description("A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the  context of a common parent wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellboreParent")]
        public RefNameString WellboreParent {
            get {
                return wellboreParentField;
            } 
            set {
                wellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private RefNameString wellboreParentField; 

        /// <summary>
        /// A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
		[Description("A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the  context of a common parent well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellParent")]
        public RefNameString WellParent {
            get {
                return wellParentField;
            } 
            set {
                wellParentField = value;
                NotifyPropertyChanged("WellParent");
            }
        }

        private RefNameString wellParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Well Coordinate Reference System Component Schema. Note that this is intended for use with two dimensional coordinates. That does not prevent the use of a three dimensional CRS. It just means that only two coordinates will be specified in that 3D system. The veritcal coordinates are specified separately and, for 3D systems, one of the linked wellDatums should represent the vertical datum of that 3D system so that the height in the 3d system can be determined. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellCRS", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Well Coordinate Reference System Component Schema. Note that this is intended for use with two dimensional coordinates. That does not prevent the use of a three dimensional CRS. It just means that only two coordinates will be specified in that 3D system. The veritcal coordinates are specified separately and, for 3D systems, one of the linked wellDatums should represent the vertical datum of that 3D system so that the height in the 3d system can be determined. ")]
    public partial class WellCRS : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the system. For a geodetic system this is commonly the name of the datum. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the system.  For a geodetic system this is commonly the name of the datum.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Map projection system. Note that these structures do not truly define a CRS but rather specify information that could be used to describe a CRS. 
        /// </summary>
        [ComponentElement]
        [XmlElement("mapProjection")]
        [EnergisticsDataTypeAttribute(DataType = "cs_projectionx")]
        public Projectionx MapProjection {
            get {
                return mapProjectionField;
            } 
            set {
                if (value != null && GeodeticCRSSpecified) throw new Exception("Cannot set property MapProjection when property GeodeticCRS is already set");
                if (value != null && GeographicSpecified) throw new Exception("Cannot set property MapProjection when property Geographic is already set");
                if (value != null && LocalCRSSpecified) throw new Exception("Cannot set property MapProjection when property LocalCRS is already set");
                if (value != null && MapProjectionCRSSpecified) throw new Exception("Cannot set property MapProjection when property MapProjectionCRS is already set");
                mapProjectionField = value;
                MapProjectionSpecified = (value!=null);
                NotifyPropertyChanged("MapProjection");
            }
        }

        private Projectionx mapProjectionField; 
        private bool mapProjectionSpecified = false; 

        /// <summary>
        /// bool to indicate if MapProjection has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool MapProjectionSpecified
        {
            get {
                return mapProjectionSpecified;
            }
            set {
                mapProjectionSpecified= value;
            }
        }

        /// <summary>
        /// Geographic system. Note that these structures do not truly define a CRS but rather specify information that could be used to describe a CRS. 
        /// </summary>
        [ComponentElement]
        [XmlElement("geographic")]
        [EnergisticsDataTypeAttribute(DataType = "cs_geodeticModel")]
        public GeodeticModel Geographic {
            get {
                return geographicField;
            } 
            set {
                if (value != null && GeodeticCRSSpecified) throw new Exception("Cannot set property Geographic when property GeodeticCRS is already set");
                if (value != null && LocalCRSSpecified) throw new Exception("Cannot set property Geographic when property LocalCRS is already set");
                if (value != null && MapProjectionSpecified) throw new Exception("Cannot set property Geographic when property MapProjection is already set");
                if (value != null && MapProjectionCRSSpecified) throw new Exception("Cannot set property Geographic when property MapProjectionCRS is already set");
                geographicField = value;
                GeographicSpecified = (value!=null);
                NotifyPropertyChanged("Geographic");
            }
        }

        private GeodeticModel geographicField; 
        private bool geographicSpecified = false; 

        /// <summary>
        /// bool to indicate if Geographic has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool GeographicSpecified
        {
            get {
                return geographicSpecified;
            }
            set {
                geographicSpecified= value;
            }
        }

        /// <summary>
        /// A reference to the coordinateReferenceSystems object representing the Map projection system.
        /// </summary>
        [ComponentElement]
        [XmlElement("mapProjectionCRS")]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
        public RefNameString MapProjectionCRS {
            get {
                return mapProjectionCRSField;
            } 
            set {
                if (value != null && GeodeticCRSSpecified) throw new Exception("Cannot set property MapProjectionCRS when property GeodeticCRS is already set");
                if (value != null && GeographicSpecified) throw new Exception("Cannot set property MapProjectionCRS when property Geographic is already set");
                if (value != null && LocalCRSSpecified) throw new Exception("Cannot set property MapProjectionCRS when property LocalCRS is already set");
                if (value != null && MapProjectionSpecified) throw new Exception("Cannot set property MapProjectionCRS when property MapProjection is already set");
                mapProjectionCRSField = value;
                MapProjectionCRSSpecified = (value!=null);
                NotifyPropertyChanged("MapProjectionCRS");
            }
        }

        private RefNameString mapProjectionCRSField; 
        private bool mapProjectionCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if MapProjectionCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool MapProjectionCRSSpecified
        {
            get {
                return mapProjectionCRSSpecified;
            }
            set {
                mapProjectionCRSSpecified= value;
            }
        }

        /// <summary>
        /// A reference to the coordinateReferenceSystems object representing the Geodetic (i.e., Geocentric or Geographic) system.
        /// </summary>
        [ComponentElement]
        [XmlElement("geodeticCRS")]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
        public RefNameString GeodeticCRS {
            get {
                return geodeticCRSField;
            } 
            set {
                if (value != null && GeographicSpecified) throw new Exception("Cannot set property GeodeticCRS when property Geographic is already set");
                if (value != null && LocalCRSSpecified) throw new Exception("Cannot set property GeodeticCRS when property LocalCRS is already set");
                if (value != null && MapProjectionSpecified) throw new Exception("Cannot set property GeodeticCRS when property MapProjection is already set");
                if (value != null && MapProjectionCRSSpecified) throw new Exception("Cannot set property GeodeticCRS when property MapProjectionCRS is already set");
                geodeticCRSField = value;
                GeodeticCRSSpecified = (value!=null);
                NotifyPropertyChanged("GeodeticCRS");
            }
        }

        private RefNameString geodeticCRSField; 
        private bool geodeticCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if GeodeticCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool GeodeticCRSSpecified
        {
            get {
                return geodeticCRSSpecified;
            }
            set {
                geodeticCRSSpecified= value;
            }
        }

        /// <summary>
        /// Local (engineering) system. Note that these structures do not truly define a CRS but rather specify information that could be used to describe a CRS. 
        /// </summary>
        [ComponentElement]
        [XmlElement("localCRS")]
        [EnergisticsDataTypeAttribute(DataType = "cs_localCRS")]
        public LocalCRS LocalCRS {
            get {
                return localCRSField;
            } 
            set {
                if (value != null && GeodeticCRSSpecified) throw new Exception("Cannot set property LocalCRS when property GeodeticCRS is already set");
                if (value != null && GeographicSpecified) throw new Exception("Cannot set property LocalCRS when property Geographic is already set");
                if (value != null && MapProjectionSpecified) throw new Exception("Cannot set property LocalCRS when property MapProjection is already set");
                if (value != null && MapProjectionCRSSpecified) throw new Exception("Cannot set property LocalCRS when property MapProjectionCRS is already set");
                localCRSField = value;
                LocalCRSSpecified = (value!=null);
                NotifyPropertyChanged("LocalCRS");
            }
        }

        private LocalCRS localCRSField; 
        private bool localCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if LocalCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LocalCRSSpecified
        {
            get {
                return localCRSSpecified;
            }
            set {
                localCRSSpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType? ItemElementNameField; 

        /// <summary>
        /// A textual description of the system. 
        /// </summary>
		[StringLength(256)]
        [Description("A textual description of the system.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Geodetic Model Component Schema. All elements except nameCRS have been deprecated. Either use a well known name of a CRS or use the wellCRS reference to a gmlCoordinateReferenceSystem.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geodeticModel", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Geodetic Model Component Schema. All elements except nameCRS have been deprecated. Either use a well known name of a CRS or use the wellCRS reference to a gmlCoordinateReferenceSystem.")]
    public partial class GeodeticModel : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'ED50' with a code of '4230' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
		[Description("The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'ED50' with a code of '4230' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is  also true for any other naming system. If in doubt, contact your local geodesist.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellKnownNameStruct")]
		[XmlElement("nameCRS")]
        public WellKnownNameStruct NameCRS {
            get {
                return nameCRSField;
            } 
            set {
                nameCRSField = value;
                NotifyPropertyChanged("NameCRS");
            }
        }

        private WellKnownNameStruct nameCRSField; 

        /// <summary>
        /// DEPRECATED. Geodetic datum code. This defines a system in the Geoshare naming system and should probably not be used with CRSName. 
        /// </summary>
		[Description("DEPRECATED. Geodetic datum code. This defines a system in the Geoshare naming system and should probably not be used with CRSName.")]
        [EnergisticsDataTypeAttribute(DataType = "GeodeticDatum")]
		[XmlElement("geodeticDatumCode")]
        public GeodeticDatum? GeodeticDatumCode {
            get {
                return geodeticDatumCodeField;
            } 
            set {
                geodeticDatumCodeField = value;
                 this.GeodeticDatumCodeSpecified = true;
                NotifyPropertyChanged("GeodeticDatumCode");
            }
        }

        private GeodeticDatum? geodeticDatumCodeField; 

        /// <summary>
        /// geodeticDatumCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GeodeticDatumCodeSpecified {
            get {
                return geodeticDatumCodeSpecifiedField;
            } 
            set {
                geodeticDatumCodeSpecifiedField = value;
                NotifyPropertyChanged("GeodeticDatumCodeSpecified");
            }
        }

        private bool geodeticDatumCodeSpecifiedField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid translation (3). Units are meters by convention.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("xTranslation")]
        public LengthMeasure XTranslation {
            get {
                return xTranslationField;
            } 
            set {
                xTranslationField = value;
                NotifyPropertyChanged("XTranslation");
            }
        }

        private LengthMeasure xTranslationField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid translation (3). Units are meters by convention.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("yTranslation")]
        public LengthMeasure YTranslation {
            get {
                return yTranslationField;
            } 
            set {
                yTranslationField = value;
                NotifyPropertyChanged("YTranslation");
            }
        }

        private LengthMeasure yTranslationField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid translation (3). Units are meters by convention. 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid translation (3). Units are meters by convention.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("zTranslation")]
        public LengthMeasure ZTranslation {
            get {
                return zTranslationField;
            } 
            set {
                zTranslationField = value;
                NotifyPropertyChanged("ZTranslation");
            }
        }

        private LengthMeasure zTranslationField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid rotation (3). Seconds of arc by convention.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("xRotation")]
        public PlaneAngleMeasure XRotation {
            get {
                return xRotationField;
            } 
            set {
                xRotationField = value;
                NotifyPropertyChanged("XRotation");
            }
        }

        private PlaneAngleMeasure xRotationField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid rotation (3). Seconds of arc by convention.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("yRotation")]
        public PlaneAngleMeasure YRotation {
            get {
                return yRotationField;
            } 
            set {
                yRotationField = value;
                NotifyPropertyChanged("YRotation");
            }
        }

        private PlaneAngleMeasure yRotationField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid rotation (3). Seconds of arc by convention. 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid rotation (3). Seconds of arc by convention.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("zRotation")]
        public PlaneAngleMeasure ZRotation {
            get {
                return zRotationField;
            } 
            set {
                zRotationField = value;
                NotifyPropertyChanged("ZRotation");
            }
        }

        private PlaneAngleMeasure zRotationField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid scale factor. 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid scale factor.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("scaleFactor")]
        public double? ScaleFactor {
            get {
                return scaleFactorField;
            } 
            set {
                scaleFactorField = value;
                 this.ScaleFactorSpecified = true;
                NotifyPropertyChanged("ScaleFactor");
            }
        }

        private double? scaleFactorField; 

        /// <summary>
        /// scaleFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ScaleFactorSpecified {
            get {
                return scaleFactorSpecifiedField;
            } 
            set {
                scaleFactorSpecifiedField = value;
                NotifyPropertyChanged("ScaleFactorSpecified");
            }
        }

        private bool scaleFactorSpecifiedField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid code (spheroid) defining geographic or planar coordinates. Implied if geodeticDatumCode is specified (and is not user defined). 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid code (spheroid) defining geographic or planar coordinates.  Implied if geodeticDatumCode is specified (and is not user defined).")]
        [EnergisticsDataTypeAttribute(DataType = "Ellipsoid")]
		[XmlElement("ellipsoidCode")]
        public Ellipsoid? EllipsoidCode {
            get {
                return ellipsoidCodeField;
            } 
            set {
                ellipsoidCodeField = value;
                 this.EllipsoidCodeSpecified = true;
                NotifyPropertyChanged("EllipsoidCode");
            }
        }

        private Ellipsoid? ellipsoidCodeField; 

        /// <summary>
        /// ellipsoidCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EllipsoidCodeSpecified {
            get {
                return ellipsoidCodeSpecifiedField;
            } 
            set {
                ellipsoidCodeSpecifiedField = value;
                NotifyPropertyChanged("EllipsoidCodeSpecified");
            }
        }

        private bool ellipsoidCodeSpecifiedField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid semi-major axis size. Implied if geodeticDatumCode or ellipsoidCode specified. 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid semi-major axis size. Implied if geodeticDatumCode or ellipsoidCode  specified.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("ellipsoidSemiMajorAxis")]
        public LengthMeasure EllipsoidSemiMajorAxis {
            get {
                return ellipsoidSemiMajorAxisField;
            } 
            set {
                ellipsoidSemiMajorAxisField = value;
                NotifyPropertyChanged("EllipsoidSemiMajorAxis");
            }
        }

        private LengthMeasure ellipsoidSemiMajorAxisField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid inverse flattening value (ie. 1/x). Implied if geodeticDatumCode or ellipsoidCode specified. 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid inverse flattening value (ie. 1/x). Implied if geodeticDatumCode  or ellipsoidCode specified.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("ellipsoidInverseFlattening")]
        public double? EllipsoidInverseFlattening {
            get {
                return ellipsoidInverseFlatteningField;
            } 
            set {
                ellipsoidInverseFlatteningField = value;
                 this.EllipsoidInverseFlatteningSpecified = true;
                NotifyPropertyChanged("EllipsoidInverseFlattening");
            }
        }

        private double? ellipsoidInverseFlatteningField; 

        /// <summary>
        /// ellipsoidInverseFlatteningSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EllipsoidInverseFlatteningSpecified {
            get {
                return ellipsoidInverseFlatteningSpecifiedField;
            } 
            set {
                ellipsoidInverseFlatteningSpecifiedField = value;
                NotifyPropertyChanged("EllipsoidInverseFlatteningSpecified");
            }
        }

        private bool ellipsoidInverseFlatteningSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_localCRS xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_localCRS", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_localCRS xsd type.")]
    public partial class LocalCRS : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// True ("true" or "1") indicates that the well surface point is the origin of this CRS. False ("false" or "0") or not given indicates otherwise.
        /// </summary>
        [XmlElement("usesWellAsOrigin")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? UsesWellAsOrigin {
            get {
                return usesWellAsOriginField;
            } 
            set {
                if (value != null && OriginSpecified) throw new Exception("Cannot set property UsesWellAsOrigin when property Origin is already set");
                if (value != null && OriginDescriptionSpecified) throw new Exception("Cannot set property UsesWellAsOrigin when property OriginDescription is already set");
                usesWellAsOriginField = value;
                UsesWellAsOriginSpecified = (value!=null);
                NotifyPropertyChanged("UsesWellAsOrigin");
            }
        }

        private bool? usesWellAsOriginField; 
        private bool usesWellAsOriginSpecified = false; 

        /// <summary>
        /// bool to indicate if UsesWellAsOrigin has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool UsesWellAsOriginSpecified
        {
            get {
                return usesWellAsOriginSpecified;
            }
            set {
                usesWellAsOriginSpecified= value;
            }
        }

        /// <summary>
        /// A pointer to the well reference point that is the origin of this CRS.
        /// </summary>
        [ComponentElement]
        [XmlElement("origin")]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
        public RefNameString Origin {
            get {
                return originField;
            } 
            set {
                if (value != null && OriginDescriptionSpecified) throw new Exception("Cannot set property Origin when property OriginDescription is already set");
                if (value != null && UsesWellAsOriginSpecified) throw new Exception("Cannot set property Origin when property UsesWellAsOrigin is already set");
                originField = value;
                OriginSpecified = (value!=null);
                NotifyPropertyChanged("Origin");
            }
        }

        private RefNameString originField; 
        private bool originSpecified = false; 

        /// <summary>
        /// bool to indicate if Origin has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OriginSpecified
        {
            get {
                return originSpecified;
            }
            set {
                originSpecified= value;
            }
        }

        /// <summary>
        /// A textual description of the origin.
        /// </summary>
        [XmlElement("originDescription")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
        public string OriginDescription {
            get {
                return originDescriptionField;
            } 
            set {
                if (value != null && OriginSpecified) throw new Exception("Cannot set property OriginDescription when property Origin is already set");
                if (value != null && UsesWellAsOriginSpecified) throw new Exception("Cannot set property OriginDescription when property UsesWellAsOrigin is already set");
                originDescriptionField = value;
                OriginDescriptionSpecified = (value!=null);
                NotifyPropertyChanged("OriginDescription");
            }
        }

        private string originDescriptionField; 
        private bool originDescriptionSpecified = false; 

        /// <summary>
        /// bool to indicate if OriginDescription has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OriginDescriptionSpecified
        {
            get {
                return originDescriptionSpecified;
            }
            set {
                originDescriptionSpecified= value;
            }
        }


        /// <summary>
        /// The angle of the Y axis from North (as described in attribute northDirection). Defaults to zero. Positive clockwise.
        /// </summary>
		[Description("The angle of the Y axis from North (as described  in attribute northDirection). Defaults to zero. Positive clockwise.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "yAxisAzimuth")]
		[XmlElement("yAxisAzimuth")]
        public YAxisAzimuth YAxisAzimuth {
            get {
                return yAxisAzimuthField;
            } 
            set {
                yAxisAzimuthField = value;
                NotifyPropertyChanged("YAxisAzimuth");
            }
        }

        private YAxisAzimuth yAxisAzimuthField; 

        /// <summary>
        /// The angle between magnetic north and true north. The angle is measured positive clockwise from true north to magnetic north. This value SHOULD be given if the yAxisAzimuth is measured from the magnetic north direction.
        /// </summary>
		[Description("The angle between magnetic north and true north.  The angle is measured positive clockwise from true north to magnetic north.  This value SHOULD be given if the yAxisAzimuth is measured from the magnetic  north direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("magneticDeclination")]
        public PlaneAngleMeasure MagneticDeclination {
            get {
                return magneticDeclinationField;
            } 
            set {
                magneticDeclinationField = value;
                NotifyPropertyChanged("MagneticDeclination");
            }
        }

        private PlaneAngleMeasure magneticDeclinationField; 

        /// <summary>
        /// The angle between true north and the northing axis or the projection grid being used. The angle is measured at the point in question, and is measured from true north to grid north, positive clockwise.
        /// </summary>
		[Description("The angle between true north and the northing axis or the  projection grid being used. The angle is measured at the point in question, and is  measured from true north to grid north, positive clockwise.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("gridConvergence")]
        public PlaneAngleMeasure GridConvergence {
            get {
                return gridConvergenceField;
            } 
            set {
                gridConvergenceField = value;
                NotifyPropertyChanged("GridConvergence");
            }
        }

        private PlaneAngleMeasure gridConvergenceField; 

        /// <summary>
        /// A free-form description of the Y axis. Examples would be 'parallel to the west side of the platform', or 'along the main entry road'.
        /// </summary>
		[StringLength(4000)]
        [Description("A free-form description of the Y axis.  Examples would be 'parallel to the west side of the platform', or  'along the main entry road'.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("yAxisDescription")]
        public string YAxisDescription {
            get {
                return yAxisDescriptionField;
            } 
            set {
                yAxisDescriptionField = value;
                NotifyPropertyChanged("YAxisDescription");
            }
        }

        private string yAxisDescriptionField; 

        /// <summary>
        /// True ("true" or "1") indicates that the X axis is rotated counter-clockwise from the Y axis when viewed from above the earth looking down. False ("false" or "0") or not given indicates a clockwise rotation. Generally the X axis is rotated clockwise.
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that the X axis is rotated  counter-clockwise from the Y axis when viewed from above the earth looking down. False (\"false\" or \"0\") or not given indicates a clockwise rotation.  Generally the X axis is rotated clockwise.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("xRotationCounterClockwise")]
        public bool? XRotationCounterClockwise {
            get {
                return xRotationCounterClockwiseField;
            } 
            set {
                xRotationCounterClockwiseField = value;
                 this.XRotationCounterClockwiseSpecified = true;
                NotifyPropertyChanged("XRotationCounterClockwise");
            }
        }

        private bool? xRotationCounterClockwiseField; 

        /// <summary>
        /// xRotationCounterClockwiseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool XRotationCounterClockwiseSpecified {
            get {
                return xRotationCounterClockwiseSpecifiedField;
            } 
            set {
                xRotationCounterClockwiseSpecifiedField = value;
                NotifyPropertyChanged("XRotationCounterClockwiseSpecified");
            }
        }

        private bool xRotationCounterClockwiseSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Element Types All elements except nameCRS have been deprecated. Either use a well known name of a CRS or use the wellCRS reference to a gmlCoordinateReferenceSystem.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_projectionx", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Element Types All elements except nameCRS have been deprecated. Either use a well known name of a CRS or use the wellCRS reference to a gmlCoordinateReferenceSystem.")]
    public partial class Projectionx : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'WGS 84 / UTM zone 10N' with a code of '32610' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
		[Description("The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'WGS 84 / UTM zone 10N' with a code of '32610' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is  also true for any other naming system. If in doubt, contact your local geodesist.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellKnownNameStruct")]
		[XmlElement("nameCRS")]
        public WellKnownNameStruct NameCRS {
            get {
                return nameCRSField;
            } 
            set {
                nameCRSField = value;
                NotifyPropertyChanged("NameCRS");
            }
        }

        private WellKnownNameStruct nameCRSField; 

        /// <summary>
        /// DEPRECATED. A code to identify the type of projection. 
        /// </summary>
		[Description("DEPRECATED. A code to identify the type of projection.")]
        [EnergisticsDataTypeAttribute(DataType = "Projection")]
		[XmlElement("projectionCode")]
        public Projection? ProjectionCode {
            get {
                return projectionCodeField;
            } 
            set {
                projectionCodeField = value;
                 this.ProjectionCodeSpecified = true;
                NotifyPropertyChanged("ProjectionCode");
            }
        }

        private Projection? projectionCodeField; 

        /// <summary>
        /// projectionCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProjectionCodeSpecified {
            get {
                return projectionCodeSpecifiedField;
            } 
            set {
                projectionCodeSpecifiedField = value;
                NotifyPropertyChanged("ProjectionCodeSpecified");
            }
        }

        private bool projectionCodeSpecifiedField; 

        /// <summary>
        /// DEPRECATED. A pointer to the wellCRS that represents the geographic system from which this system was projected.
        /// </summary>
		[Description("DEPRECATED. A pointer to the wellCRS that represents the geographic system from which this system was projected.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("projectedFrom")]
        public RefNameString ProjectedFrom {
            get {
                return projectedFromField;
            } 
            set {
                projectedFromField = value;
                NotifyPropertyChanged("ProjectedFrom");
            }
        }

        private RefNameString projectedFromField; 

        /// <summary>
        /// DEPRECATED. Latitude of first standard parallel. 
        /// </summary>
		[Description("DEPRECATED. Latitude of first standard parallel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("stdParallel1")]
        public PlaneAngleMeasure StdParallel1 {
            get {
                return stdParallel1Field;
            } 
            set {
                stdParallel1Field = value;
                NotifyPropertyChanged("StdParallel1");
            }
        }

        private PlaneAngleMeasure stdParallel1Field; 

        /// <summary>
        /// DEPRECATED. Latitude of second standard parallel, if used. 
        /// </summary>
		[Description("DEPRECATED. Latitude of second standard parallel, if used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("stdParallel2")]
        public PlaneAngleMeasure StdParallel2 {
            get {
                return stdParallel2Field;
            } 
            set {
                stdParallel2Field = value;
                NotifyPropertyChanged("StdParallel2");
            }
        }

        private PlaneAngleMeasure stdParallel2Field; 

        /// <summary>
        /// DEPRECATED. Longitude of the Y axis of the resulting map. 
        /// </summary>
		[Description("DEPRECATED. Longitude of the Y axis of the resulting map.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("centralMeridian")]
        public PlaneAngleMeasure CentralMeridian {
            get {
                return centralMeridianField;
            } 
            set {
                centralMeridianField = value;
                NotifyPropertyChanged("CentralMeridian");
            }
        }

        private PlaneAngleMeasure centralMeridianField; 

        /// <summary>
        /// DEPRECATED. Latitude at which the X axis intersects the central meridian. 
        /// </summary>
		[Description("DEPRECATED. Latitude at which the X axis intersects the central meridian.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("originLatitude")]
        public PlaneAngleMeasure OriginLatitude {
            get {
                return originLatitudeField;
            } 
            set {
                originLatitudeField = value;
                NotifyPropertyChanged("OriginLatitude");
            }
        }

        private PlaneAngleMeasure originLatitudeField; 

        /// <summary>
        /// DEPRECATED. Longitude of the central meridian. 
        /// </summary>
		[Description("DEPRECATED. Longitude of the central meridian.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("originLongitude")]
        public PlaneAngleMeasure OriginLongitude {
            get {
                return originLongitudeField;
            } 
            set {
                originLongitudeField = value;
                NotifyPropertyChanged("OriginLongitude");
            }
        }

        private PlaneAngleMeasure originLongitudeField; 

        /// <summary>
        /// DEPRECATED. Latitude of the first point if the two-point specification of the central line is used. 
        /// </summary>
		[Description("DEPRECATED. Latitude of the first point if the two-point specification  of the central line is used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("latitude1")]
        public PlaneAngleMeasure Latitude1 {
            get {
                return latitude1Field;
            } 
            set {
                latitude1Field = value;
                NotifyPropertyChanged("Latitude1");
            }
        }

        private PlaneAngleMeasure latitude1Field; 

        /// <summary>
        /// DEPRECATED. Longitude of the first point if the two-point specification of the central line is used. 
        /// </summary>
		[Description("DEPRECATED. Longitude of the first point if the two-point specification  of the central line is used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("longitude1")]
        public PlaneAngleMeasure Longitude1 {
            get {
                return longitude1Field;
            } 
            set {
                longitude1Field = value;
                NotifyPropertyChanged("Longitude1");
            }
        }

        private PlaneAngleMeasure longitude1Field; 

        /// <summary>
        /// DEPRECATED. Latitude of the second point if the two-point specification of the central line is used. 
        /// </summary>
		[Description("DEPRECATED. Latitude of the second point if the two-point specification  of the central line is used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("latitude2")]
        public PlaneAngleMeasure Latitude2 {
            get {
                return latitude2Field;
            } 
            set {
                latitude2Field = value;
                NotifyPropertyChanged("Latitude2");
            }
        }

        private PlaneAngleMeasure latitude2Field; 

        /// <summary>
        /// DEPRECATED. Longitude of the second point if the two-point specification of the central line is used. 
        /// </summary>
		[Description("DEPRECATED. Longitude of the second point if the two-point specification  of the central line is used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("longitude2")]
        public PlaneAngleMeasure Longitude2 {
            get {
                return longitude2Field;
            } 
            set {
                longitude2Field = value;
                NotifyPropertyChanged("Longitude2");
            }
        }

        private PlaneAngleMeasure longitude2Field; 

        /// <summary>
        /// DEPRECATED. Latitude of a point for which the scale factor is specified exactly. Default to origin. 
        /// </summary>
		[Description("DEPRECATED. Latitude of a point for which the scale factor is specified exactly.  Default to origin.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("latitudeForScale")]
        public PlaneAngleMeasure LatitudeForScale {
            get {
                return latitudeForScaleField;
            } 
            set {
                latitudeForScaleField = value;
                NotifyPropertyChanged("LatitudeForScale");
            }
        }

        private PlaneAngleMeasure latitudeForScaleField; 

        /// <summary>
        /// DEPRECATED. Longitude of a point for which the scale factor is specified exactly. Default to origin. 
        /// </summary>
		[Description("DEPRECATED. Longitude of a point for which the scale factor is specified exactly.  Default to origin.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("longitudeForScale")]
        public PlaneAngleMeasure LongitudeForScale {
            get {
                return longitudeForScaleField;
            } 
            set {
                longitudeForScaleField = value;
                NotifyPropertyChanged("LongitudeForScale");
            }
        }

        private PlaneAngleMeasure longitudeForScaleField; 

        /// <summary>
        /// DEPRECATED. Latitude at which the scale on the map is exact. If none is provided, scale is assumed to be exact at the equator. 
        /// </summary>
		[Description("DEPRECATED. Latitude at which the scale on the map is exact. If none is provided,  scale is assumed to be exact at the equator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("trueScaleLatitude")]
        public PlaneAngleMeasure TrueScaleLatitude {
            get {
                return trueScaleLatitudeField;
            } 
            set {
                trueScaleLatitudeField = value;
                NotifyPropertyChanged("TrueScaleLatitude");
            }
        }

        private PlaneAngleMeasure trueScaleLatitudeField; 

        /// <summary>
        /// DEPRECATED. Spheroid radius. 
        /// </summary>
		[Description("DEPRECATED. Spheroid radius.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("spheroidRadius")]
        public LengthMeasure SpheroidRadius {
            get {
                return spheroidRadiusField;
            } 
            set {
                spheroidRadiusField = value;
                NotifyPropertyChanged("SpheroidRadius");
            }
        }

        private LengthMeasure spheroidRadiusField; 

        /// <summary>
        /// DEPRECATED. Ellipsoid scale factor. 
        /// </summary>
		[Description("DEPRECATED. Ellipsoid scale factor.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("scaleFactor")]
        public double? ScaleFactor {
            get {
                return scaleFactorField;
            } 
            set {
                scaleFactorField = value;
                 this.ScaleFactorSpecified = true;
                NotifyPropertyChanged("ScaleFactor");
            }
        }

        private double? scaleFactorField; 

        /// <summary>
        /// scaleFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ScaleFactorSpecified {
            get {
                return scaleFactorSpecifiedField;
            } 
            set {
                scaleFactorSpecifiedField = value;
                NotifyPropertyChanged("ScaleFactorSpecified");
            }
        }

        private bool scaleFactorSpecifiedField; 

        /// <summary>
        /// DEPRECATED. Projection method variant - establishes minor variations of the projection. Geoshare proposal. 
        /// </summary>
		[Description("DEPRECATED. Projection method variant - establishes minor variations of the projection.  Geoshare proposal.")]
        [EnergisticsDataTypeAttribute(DataType = "ProjectionVariantsObliqueMercator")]
		[XmlElement("methodVariant")]
        public ProjectionVariantsObliqueMercator? MethodVariant {
            get {
                return methodVariantField;
            } 
            set {
                methodVariantField = value;
                 this.MethodVariantSpecified = true;
                NotifyPropertyChanged("MethodVariant");
            }
        }

        private ProjectionVariantsObliqueMercator? methodVariantField; 

        /// <summary>
        /// methodVariantSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MethodVariantSpecified {
            get {
                return methodVariantSpecifiedField;
            } 
            set {
                methodVariantSpecifiedField = value;
                NotifyPropertyChanged("MethodVariantSpecified");
            }
        }

        private bool methodVariantSpecifiedField; 

        /// <summary>
        /// DEPRECATED. Height above the surface origin location from which the perspective is taken. 
        /// </summary>
		[Description("DEPRECATED. Height above the surface origin location from which the perspective is taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("perspectiveHeight")]
        public LengthMeasure PerspectiveHeight {
            get {
                return perspectiveHeightField;
            } 
            set {
                perspectiveHeightField = value;
                NotifyPropertyChanged("PerspectiveHeight");
            }
        }

        private LengthMeasure perspectiveHeightField; 

        /// <summary>
        /// DEPRECATED. Zone for the type of projection. Zones have values from 1 to 60 with a required direction of "N" (North) or "S" (South). For example, "21N". 
        /// </summary>
		[RegularExpression("([1-9]|[1-5][0-9]|60)[NS]")]
        [StringLength(3)]
        [Description("DEPRECATED. Zone for the type of projection. Zones have values from 1 to 60 with a required direction of \"N\" (North) or \"S\" (South). For example, \"21N\".")]
        [EnergisticsDataTypeAttribute(DataType = "geodeticZoneString")]
		[XmlElement("zone")]
        public string Zone {
            get {
                return zoneField;
            } 
            set {
                zoneField = value;
                NotifyPropertyChanged("Zone");
            }
        }

        private string zoneField; 

        /// <summary>
        /// DEPRECATED. North American Datum type. 
        /// </summary>
		[Description("DEPRECATED. North American Datum type.")]
        [EnergisticsDataTypeAttribute(DataType = "NADTypes")]
		[XmlElement("NADType")]
        public NADTypeList? NADType {
            get {
                return NADTypeField;
            } 
            set {
                NADTypeField = value;
                 this.NADTypeSpecified = true;
                NotifyPropertyChanged("NADType");
            }
        }

        private NADTypeList? NADTypeField; 

        /// <summary>
        /// NADTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NADTypeSpecified {
            get {
                return NADTypeSpecifiedField;
            } 
            set {
                NADTypeSpecifiedField = value;
                NotifyPropertyChanged("NADTypeSpecified");
            }
        }

        private bool NADTypeSpecifiedField; 

        /// <summary>
        /// DEPRECATED. Artificial value added to the X axis. 
        /// </summary>
		[Description("DEPRECATED. Artificial value added to the X axis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("falseEasting")]
        public LengthMeasure FalseEasting {
            get {
                return falseEastingField;
            } 
            set {
                falseEastingField = value;
                NotifyPropertyChanged("FalseEasting");
            }
        }

        private LengthMeasure falseEastingField; 

        /// <summary>
        /// DEPRECATED. Artificial value added to the Y axis. 
        /// </summary>
		[Description("DEPRECATED. Artificial value added to the Y axis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("falseNorthing")]
        public LengthMeasure FalseNorthing {
            get {
                return falseNorthingField;
            } 
            set {
                falseNorthingField = value;
                NotifyPropertyChanged("FalseNorthing");
            }
        }

        private LengthMeasure falseNorthingField; 

        /// <summary>
        /// DEPRECATED. Bearing angle of the great circle with respect to north at the central point. 
        /// </summary>
		[Description("DEPRECATED. Bearing angle of the great circle with respect to north at the central  point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("bearing")]
        public PlaneAngleMeasure Bearing {
            get {
                return bearingField;
            } 
            set {
                bearingField = value;
                NotifyPropertyChanged("Bearing");
            }
        }

        private PlaneAngleMeasure bearingField; 

        /// <summary>
        /// DEPRECATED. Is the projection in the northern hemisphere or the southern hemisphere. 
        /// </summary>
		[Description("DEPRECATED. Is the projection in the northern hemisphere or the southern hemisphere.")]
        [EnergisticsDataTypeAttribute(DataType = "Hemispheres")]
		[XmlElement("hemisphere")]
        public HemisphereList? Hemisphere {
            get {
                return hemisphereField;
            } 
            set {
                hemisphereField = value;
                 this.HemisphereSpecified = true;
                NotifyPropertyChanged("Hemisphere");
            }
        }

        private HemisphereList? hemisphereField; 

        /// <summary>
        /// hemisphereSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool HemisphereSpecified {
            get {
                return hemisphereSpecifiedField;
            } 
            set {
                hemisphereSpecifiedField = value;
                NotifyPropertyChanged("HemisphereSpecified");
            }
        }

        private bool hemisphereSpecifiedField; 

        /// <summary>
        /// DEPRECATED. Description of item and details. 
        /// </summary>
		[StringLength(4000)]
        [Description("DEPRECATED. Description of item and details.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// DEPRECATED. Parameter describing the user-defined projection. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
		[Description("DEPRECATED. Parameter describing the user-defined projection.   For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "indexedObject")]
		[XmlElement("parameter")]
        public List<IndexedObject> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(parameterField!=null)
                 return parameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> parameterField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the indexedObject xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="indexedObject", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the indexedObject xsd type.")]
    public partial class IndexedObject : Object, IDataObject, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IndexedObject class.
        /// </summary>
        public IndexedObject() {}

        /// <summary>
        /// Initializes a new instance of the IndexedObject class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IndexedObject(string value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// index property
        /// </summary>
		[Required]
        [Description("Indexes things with the same name.  That is the first one, the second one, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
        [XmlAttribute("index")]
		
        public short Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private short indexField; 

		/// <summary>
        /// name property
        /// </summary>
		[StringLength(50)]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

		/// <summary>
        /// uom property
        /// </summary>
		[StringLength(24)]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

		/// <summary>
        /// description property
        /// </summary>
		[StringLength(256)]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
        [XmlAttribute("description")]
		
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(50)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// WITSML - Wellbore Geometry Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wbGeometry", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("WITSML - Wellbore Geometry Component Schema ")]
    public partial class StandAloneWellboreGeometry : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the wellbore geometry. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the wellbore geometry.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the wellbore geometry. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore geometry.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Time report generated. 
        /// </summary>
		[Required]
        [Description("Time report generated.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimReport")]
        public Timestamp? DateTimeReport {
            get {
                return dTimReportField;
            } 
            set {
                dTimReportField = value;
                NotifyPropertyChanged("DateTimeReport");
            }
        }

        private Timestamp? dTimReportField; 

        /// <summary>
        /// Measured depth at bottom. 
        /// </summary>
		[Description("Measured depth at bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// Air gap. 
        /// </summary>
		[Description("Air gap.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("gapAir")]
        public LengthMeasure GapAir {
            get {
                return gapAirField;
            } 
            set {
                gapAirField = value;
                NotifyPropertyChanged("GapAir");
            }
        }

        private LengthMeasure gapAirField; 

        /// <summary>
        /// Water depth. 
        /// </summary>
		[Description("Water depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("depthWaterMean")]
        public LengthMeasure DepthWaterMean {
            get {
                return depthWaterMeanField;
            } 
            set {
                depthWaterMeanField = value;
                NotifyPropertyChanged("DepthWaterMean");
            }
        }

        private LengthMeasure depthWaterMeanField; 

        /// <summary>
        /// Wellbore geometry section object. 
        /// </summary>
		[Description("Wellbore geometry section object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wbGeometrySection")]
		[XmlElement("wbGeometrySection")]
        public List<WellboreGeometrySection> WellboreGeometrySection {
            get {
                return wbGeometrySectionField;
            } 
            set {
                wbGeometrySectionField = value;
                NotifyPropertyChanged("WellboreGeometrySection");
            }
        }

         /// <summary>
         /// bool to indicate if WellboreGeometrySection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellboreGeometrySectionSpecified
         {
             get {
             if(wbGeometrySectionField!=null)
                 return wbGeometrySectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellboreGeometrySection> wbGeometrySectionField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Wellbore Geometry Component Schema. This defines the "fixed" components in a wellbore. It does not define the "transient" drilling strings or the "hanging" production components. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wbGeometrySection", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Wellbore Geometry Component Schema. This defines the fixed components in a wellbore. It does not define the transient drilling strings or the hanging production components. ")]
    public partial class WellboreGeometrySection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Type of fixed component. 
        /// </summary>
		[Description("Type of fixed component.")]
        [EnergisticsDataTypeAttribute(DataType = "HoleCasingType")]
		[XmlElement("typeHoleCasing")]
        public HoleCasingType? TypeHoleCasing {
            get {
                return typeHoleCasingField;
            } 
            set {
                typeHoleCasingField = value;
                 this.TypeHoleCasingSpecified = true;
                NotifyPropertyChanged("TypeHoleCasing");
            }
        }

        private HoleCasingType? typeHoleCasingField; 

        /// <summary>
        /// typeHoleCasingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeHoleCasingSpecified {
            get {
                return typeHoleCasingSpecifiedField;
            } 
            set {
                typeHoleCasingSpecifiedField = value;
                NotifyPropertyChanged("TypeHoleCasingSpecified");
            }
        }

        private bool typeHoleCasingSpecifiedField; 

        /// <summary>
        /// Measured depth at Top of Interval. 
        /// </summary>
		[Description("Measured depth at Top of Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at bottom of the section. 
        /// </summary>
		[Description("Measured depth at bottom of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth at top of the section. 
        /// </summary>
		[Description("True vertical depth at top of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at bottom of the section. 
        /// </summary>
		[Description("True vertical depth at bottom of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// Inner diameter. 
        /// </summary>
		[Description("Inner diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idSection")]
        public LengthMeasure InnerDiameterSection {
            get {
                return idSectionField;
            } 
            set {
                idSectionField = value;
                NotifyPropertyChanged("InnerDiameterSection");
            }
        }

        private LengthMeasure idSectionField; 

        /// <summary>
        /// Outer diameter - Only for casings and risers. 
        /// </summary>
		[Description("Outer diameter - Only for casings and risers.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odSection")]
        public LengthMeasure OuterDiameterSection {
            get {
                return odSectionField;
            } 
            set {
                odSectionField = value;
                NotifyPropertyChanged("OuterDiameterSection");
            }
        }

        private LengthMeasure odSectionField; 

        /// <summary>
        /// Weight per unit length for casing sections. 
        /// </summary>
		[Description("Weight per unit length for casing sections.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massPerLengthMeasure")]
		[XmlElement("wtPerLen")]
        public MassPerLengthMeasure WeightPerLen {
            get {
                return wtPerLenField;
            } 
            set {
                wtPerLenField = value;
                NotifyPropertyChanged("WeightPerLen");
            }
        }

        private MassPerLengthMeasure wtPerLenField; 

        /// <summary>
        /// Material grade for the tubular section. 
        /// </summary>
		[StringLength(32)]
        [Description("Material grade for the tubular section.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("grade")]
        public string Grade {
            get {
                return gradeField;
            } 
            set {
                gradeField = value;
                NotifyPropertyChanged("Grade");
            }
        }

        private string gradeField; 

        /// <summary>
        /// Curved conductor? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[Description("Curved conductor? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("curveConductor")]
        public bool? CurveConductor {
            get {
                return curveConductorField;
            } 
            set {
                curveConductorField = value;
                 this.CurveConductorSpecified = true;
                NotifyPropertyChanged("CurveConductor");
            }
        }

        private bool? curveConductorField; 

        /// <summary>
        /// curveConductorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurveConductorSpecified {
            get {
                return curveConductorSpecifiedField;
            } 
            set {
                curveConductorSpecifiedField = value;
                NotifyPropertyChanged("CurveConductorSpecified");
            }
        }

        private bool curveConductorSpecifiedField; 

        /// <summary>
        /// Maximum diameter that can pass through. 
        /// </summary>
		[Description("Maximum diameter that can pass through.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaDrift")]
        public LengthMeasure DiaDrift {
            get {
                return diaDriftField;
            } 
            set {
                diaDriftField = value;
                NotifyPropertyChanged("DiaDrift");
            }
        }

        private LengthMeasure diaDriftField; 

        /// <summary>
        /// Friction factor. 
        /// </summary>
		[Description("Friction factor.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("factFric")]
        public double? FactFric {
            get {
                return factFricField;
            } 
            set {
                factFricField = value;
                 this.FactFricSpecified = true;
                NotifyPropertyChanged("FactFric");
            }
        }

        private double? factFricField; 

        /// <summary>
        /// factFricSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FactFricSpecified {
            get {
                return factFricSpecifiedField;
            } 
            set {
                factFricSpecifiedField = value;
                NotifyPropertyChanged("FactFricSpecified");
            }
        }

        private bool factFricSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rotary Steerable Tool Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rotarySteerableTool", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Rotary Steerable Tool Component Schema ")]
    public partial class RotarySteerableTool : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Method used to direct the deviation of the trajectory: PointBit or PushBit.
        /// </summary>
		[Required]
        [Description("Method used to direct the deviation of the trajectory: PointBit or PushBit.")]
        [EnergisticsDataTypeAttribute(DataType = "DeflectionMethod")]
		[XmlElement("deflectionMethod")]
        public DeflectionMethod? DeflectionMethod {
            get {
                return deflectionMethodField;
            } 
            set {
                deflectionMethodField = value;
                 this.DeflectionMethodSpecified = true;
                NotifyPropertyChanged("DeflectionMethod");
            }
        }

        
        private bool DeflectionMethodSpecifiedField = false;
        
        /// <summary>
        /// DeflectionMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DeflectionMethodSpecified {
            get {
                return DeflectionMethodSpecifiedField;
            } 
            set {
                DeflectionMethodSpecifiedField = value;
                NotifyPropertyChanged("DeflectionMethodSpecified");
            }
        }
        
        private DeflectionMethod? deflectionMethodField; 

        /// <summary>
        /// Used with PointTheBit type RSS tools, describes the angle of the bit.
        /// </summary>
        [ComponentElement]
        [XmlElement("bendAngle")]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
        public PlaneAngleMeasure BendAngle {
            get {
                return bendAngleField;
            } 
            set {
                if (value != null && BendOffsetSpecified) throw new Exception("Cannot set property BendAngle when property BendOffset is already set");
                bendAngleField = value;
                BendAngleSpecified = (value!=null);
                NotifyPropertyChanged("BendAngle");
            }
        }

        private PlaneAngleMeasure bendAngleField; 
        private bool bendAngleSpecified = false; 

        /// <summary>
        /// bool to indicate if BendAngle has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BendAngleSpecified
        {
            get {
                return bendAngleSpecified;
            }
            set {
                bendAngleSpecified= value;
            }
        }

        /// <summary>
        /// Offset from bottom connection to bend.
        /// </summary>
        [ComponentElement]
        [XmlElement("bendOffset")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure BendOffset {
            get {
                return bendOffsetField;
            } 
            set {
                if (value != null && BendAngleSpecified) throw new Exception("Cannot set property BendOffset when property BendAngle is already set");
                bendOffsetField = value;
                BendOffsetSpecified = (value!=null);
                NotifyPropertyChanged("BendOffset");
            }
        }

        private LengthMeasure bendOffsetField; 
        private bool bendOffsetSpecified = false; 

        /// <summary>
        /// bool to indicate if BendOffset has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BendOffsetSpecified
        {
            get {
                return bendOffsetSpecified;
            }
            set {
                bendOffsetSpecified= value;
            }
        }


        /// <summary>
        /// Minimum size of hole in which the tool can operate.
        /// </summary>
		[Description("Minimum size of hole in which the tool can operate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("holeSizeMn")]
        public LengthMeasure HoleSizeMin {
            get {
                return holeSizeMnField;
            } 
            set {
                holeSizeMnField = value;
                NotifyPropertyChanged("HoleSizeMin");
            }
        }

        private LengthMeasure holeSizeMnField; 

        /// <summary>
        /// Maximum size of hole in which the tool can operate.
        /// </summary>
		[Description("Maximum size of hole in which the tool can operate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("holeSizeMx")]
        public LengthMeasure HoleSizeMax {
            get {
                return holeSizeMxField;
            } 
            set {
                holeSizeMxField = value;
                NotifyPropertyChanged("HoleSizeMax");
            }
        }

        private LengthMeasure holeSizeMxField; 

        /// <summary>
        /// Maximum weight on the bit.
        /// </summary>
		[Description("Maximum weight on the bit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("wobMx")]
        public ForceMeasure WobMax {
            get {
                return wobMxField;
            } 
            set {
                wobMxField = value;
                NotifyPropertyChanged("WobMax");
            }
        }

        private ForceMeasure wobMxField; 

        /// <summary>
        /// Suggested operating speed.
        /// </summary>
		[Description("Suggested operating speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("operatingSpeed")]
        public AnglePerTimeMeasure OperatingSpeed {
            get {
                return operatingSpeedField;
            } 
            set {
                operatingSpeedField = value;
                NotifyPropertyChanged("OperatingSpeed");
            }
        }

        private AnglePerTimeMeasure operatingSpeedField; 

        /// <summary>
        /// Maximum rotation speed.
        /// </summary>
		[Description("Maximum rotation speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("speedMx")]
        public AnglePerTimeMeasure SpeedMax {
            get {
                return speedMxField;
            } 
            set {
                speedMxField = value;
                NotifyPropertyChanged("SpeedMax");
            }
        }

        private AnglePerTimeMeasure speedMxField; 

        /// <summary>
        /// Minimum flow rate for tool operation.
        /// </summary>
		[Description("Minimum flow rate for tool operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowRateMn")]
        public VolumeFlowRateMeasure FlowRateMin {
            get {
                return flowRateMnField;
            } 
            set {
                flowRateMnField = value;
                NotifyPropertyChanged("FlowRateMin");
            }
        }

        private VolumeFlowRateMeasure flowRateMnField; 

        /// <summary>
        /// Maximum flow rate for tool operation.
        /// </summary>
		[Description("Maximum flow rate for tool operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowRateMx")]
        public VolumeFlowRateMeasure FlowRateMax {
            get {
                return flowRateMxField;
            } 
            set {
                flowRateMxField = value;
                NotifyPropertyChanged("FlowRateMax");
            }
        }

        private VolumeFlowRateMeasure flowRateMxField; 

        /// <summary>
        /// Minimum flow rate for programming tool.
        /// </summary>
		[Description("Minimum flow rate for programming tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("downLinkFlowRateMn")]
        public VolumeFlowRateMeasure DownLinkFlowRateMin {
            get {
                return downLinkFlowRateMnField;
            } 
            set {
                downLinkFlowRateMnField = value;
                NotifyPropertyChanged("DownLinkFlowRateMin");
            }
        }

        private VolumeFlowRateMeasure downLinkFlowRateMnField; 

        /// <summary>
        /// Maximum flow rate for programming tool.
        /// </summary>
		[Description("Maximum flow rate for programming tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("downLinkFlowRateMx")]
        public VolumeFlowRateMeasure DownLinkFlowRateMax {
            get {
                return downLinkFlowRateMxField;
            } 
            set {
                downLinkFlowRateMxField = value;
                NotifyPropertyChanged("DownLinkFlowRateMax");
            }
        }

        private VolumeFlowRateMeasure downLinkFlowRateMxField; 

        /// <summary>
        /// Pressure drop across tool.
        /// </summary>
		[Description("Pressure drop across tool.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("pressLossFact")]
        public double? PressLossFact {
            get {
                return pressLossFactField;
            } 
            set {
                pressLossFactField = value;
                 this.PressLossFactSpecified = true;
                NotifyPropertyChanged("PressLossFact");
            }
        }

        private double? pressLossFactField; 

        /// <summary>
        /// pressLossFactSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PressLossFactSpecified {
            get {
                return pressLossFactSpecifiedField;
            } 
            set {
                pressLossFactSpecifiedField = value;
                NotifyPropertyChanged("PressLossFactSpecified");
            }
        }

        private bool pressLossFactSpecifiedField; 

        /// <summary>
        /// The number of contact pads.
        /// </summary>
		[Description("The number of contact pads.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("padCount")]
        public short? PadCount {
            get {
                return padCountField;
            } 
            set {
                padCountField = value;
                 this.PadCountSpecified = true;
                NotifyPropertyChanged("PadCount");
            }
        }

        private short? padCountField; 

        /// <summary>
        /// padCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PadCountSpecified {
            get {
                return padCountSpecifiedField;
            } 
            set {
                padCountSpecifiedField = value;
                NotifyPropertyChanged("PadCountSpecified");
            }
        }

        private bool padCountSpecifiedField; 

        /// <summary>
        /// Length of contact pad.
        /// </summary>
		[Description("Length of contact pad.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("padLen")]
        public LengthMeasure PadLen {
            get {
                return padLenField;
            } 
            set {
                padLenField = value;
                NotifyPropertyChanged("PadLen");
            }
        }

        private LengthMeasure padLenField; 

        /// <summary>
        /// Width of contact pad.
        /// </summary>
		[Description("Width of contact pad.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("padWidth")]
        public LengthMeasure PadWidth {
            get {
                return padWidthField;
            } 
            set {
                padWidthField = value;
                NotifyPropertyChanged("PadWidth");
            }
        }

        private LengthMeasure padWidthField; 

        /// <summary>
        /// Offset from bottom of pad to bottom connector.
        /// </summary>
		[Description("Offset from bottom of pad to bottom connector.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("padOffset")]
        public LengthMeasure PadOffset {
            get {
                return padOffsetField;
            } 
            set {
                padOffsetField = value;
                NotifyPropertyChanged("PadOffset");
            }
        }

        private LengthMeasure padOffsetField; 

        /// <summary>
        /// Outside diameter of tool when pads are activated.
        /// </summary>
		[Description("Outside diameter of tool when pads are activated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("openPadOd")]
        public LengthMeasure OpenPadOuterDiameter {
            get {
                return openPadOdField;
            } 
            set {
                openPadOdField = value;
                NotifyPropertyChanged("OpenPadOuterDiameter");
            }
        }

        private LengthMeasure openPadOdField; 

        /// <summary>
        /// Outiside diameter of tool when pads are closed.
        /// </summary>
		[Description("Outiside diameter of tool when pads are closed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("closePadOd")]
        public LengthMeasure ClosePadOuterDiameter {
            get {
                return closePadOdField;
            } 
            set {
                closePadOdField = value;
                NotifyPropertyChanged("ClosePadOuterDiameter");
            }
        }

        private LengthMeasure closePadOdField; 

        /// <summary>
        /// A sensor.
        /// </summary>
		[Description("A sensor.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_sensor")]
		[XmlElement("sensor")]
        public List<Sensor> Sensor {
            get {
                return sensorField;
            } 
            set {
                sensorField = value;
                NotifyPropertyChanged("Sensor");
            }
        }

         /// <summary>
         /// bool to indicate if Sensor has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SensorSpecified
         {
             get {
             if(sensorField!=null)
                 return sensorField.Count>0?true:false;
             else return false;
             }
         }
        private List<Sensor> sensorField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Sensor Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_sensor", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Tubular Sensor Component Schema")]
    public partial class Sensor : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Type from POSC. 
        /// </summary>
		[Description("Type from POSC.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasurementType")]
		[XmlElement("typeMeasurement")]
        public MeasurementType? TypeMeasurement {
            get {
                return typeMeasurementField;
            } 
            set {
                typeMeasurementField = value;
                 this.TypeMeasurementSpecified = true;
                NotifyPropertyChanged("TypeMeasurement");
            }
        }

        private MeasurementType? typeMeasurementField; 

        /// <summary>
        /// typeMeasurementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeMeasurementSpecified {
            get {
                return typeMeasurementSpecifiedField;
            } 
            set {
                typeMeasurementSpecifiedField = value;
                NotifyPropertyChanged("TypeMeasurementSpecified");
            }
        }

        private bool typeMeasurementSpecifiedField; 

        /// <summary>
        /// Offset from bottom of measurement while drilling tool. 
        /// </summary>
		[Description("Offset from bottom of measurement while drilling tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("offsetBot")]
        public LengthMeasure OffsetBot {
            get {
                return offsetBotField;
            } 
            set {
                offsetBotField = value;
                NotifyPropertyChanged("OffsetBot");
            }
        }

        private LengthMeasure offsetBotField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Hole Opener Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_holeOpener", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Hole Opener Component Schema")]
    public partial class HoleOpener : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Under reamer or fixed blade. 
        /// </summary>
		[Description("Under reamer or fixed blade.")]
        [EnergisticsDataTypeAttribute(DataType = "HoleOpenerType")]
		[XmlElement("typeHoleOpener")]
        public HoleOpenerType? TypeHoleOpener {
            get {
                return typeHoleOpenerField;
            } 
            set {
                typeHoleOpenerField = value;
                 this.TypeHoleOpenerSpecified = true;
                NotifyPropertyChanged("TypeHoleOpener");
            }
        }

        private HoleOpenerType? typeHoleOpenerField; 

        /// <summary>
        /// typeHoleOpenerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeHoleOpenerSpecified {
            get {
                return typeHoleOpenerSpecifiedField;
            } 
            set {
                typeHoleOpenerSpecifiedField = value;
                NotifyPropertyChanged("TypeHoleOpenerSpecified");
            }
        }

        private bool typeHoleOpenerSpecifiedField; 

        /// <summary>
        /// Number of cutters. 
        /// </summary>
		[Description("Number of cutters.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numCutter")]
        public short? NumCutter {
            get {
                return numCutterField;
            } 
            set {
                numCutterField = value;
                 this.NumCutterSpecified = true;
                NotifyPropertyChanged("NumCutter");
            }
        }

        private short? numCutterField; 

        /// <summary>
        /// numCutterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumCutterSpecified {
            get {
                return numCutterSpecifiedField;
            } 
            set {
                numCutterSpecifiedField = value;
                NotifyPropertyChanged("NumCutterSpecified");
            }
        }

        private bool numCutterSpecifiedField; 

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Diameter of the reamer. 
        /// </summary>
		[Description("Diameter of the reamer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaHoleOpener")]
        public LengthMeasure DiaHoleOpener {
            get {
                return diaHoleOpenerField;
            } 
            set {
                diaHoleOpenerField = value;
                NotifyPropertyChanged("DiaHoleOpener");
            }
        }

        private LengthMeasure diaHoleOpenerField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Bend Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bend", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Tubular Bend Component Schema.")]
    public partial class Bend : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Angle of the bend. 
        /// </summary>
		[Description("Angle of the bend.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("angle")]
        public PlaneAngleMeasure Angle {
            get {
                return angleField;
            } 
            set {
                angleField = value;
                NotifyPropertyChanged("Angle");
            }
        }

        private PlaneAngleMeasure angleField; 

        /// <summary>
        /// Distance of bend from bottom of component. 
        /// </summary>
		[Description("Distance of bend from bottom of component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distBendBot")]
        public LengthMeasure DistBendBot {
            get {
                return distBendBotField;
            } 
            set {
                distBendBotField = value;
                NotifyPropertyChanged("DistBendBot");
            }
        }

        private LengthMeasure distBendBotField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Stablizer Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stabilizer", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Stablizer Component Schema")]
    public partial class Stabilizer : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Length of blade. 
        /// </summary>
		[Description("Length of blade.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenBlade")]
        public LengthMeasure LenBlade {
            get {
                return lenBladeField;
            } 
            set {
                lenBladeField = value;
                NotifyPropertyChanged("LenBlade");
            }
        }

        private LengthMeasure lenBladeField; 

        /// <summary>
        /// Gauge Length of blade. That is, the length of the blade which measures at the odBladeMx.
        /// </summary>
		[Description("Gauge Length of blade. That is, the length of the blade which measures at the odBladeMx.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenBladeGauge")]
        public LengthMeasure LenBladeGauge {
            get {
                return lenBladeGaugeField;
            } 
            set {
                lenBladeGaugeField = value;
                NotifyPropertyChanged("LenBladeGauge");
            }
        }

        private LengthMeasure lenBladeGaugeField; 

        /// <summary>
        /// Maximum outer diameter of blade. 
        /// </summary>
		[Description("Maximum outer diameter of blade.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odBladeMx")]
        public LengthMeasure OuterDiameterBladeMax {
            get {
                return odBladeMxField;
            } 
            set {
                odBladeMxField = value;
                NotifyPropertyChanged("OuterDiameterBladeMax");
            }
        }

        private LengthMeasure odBladeMxField; 

        /// <summary>
        /// Minimum outer diameter of blade. 
        /// </summary>
		[Description("Minimum outer diameter of blade.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odBladeMn")]
        public LengthMeasure OuterDiameterBladeMin {
            get {
                return odBladeMnField;
            } 
            set {
                odBladeMnField = value;
                NotifyPropertyChanged("OuterDiameterBladeMin");
            }
        }

        private LengthMeasure odBladeMnField; 

        /// <summary>
        /// Distance of blade bottom from bottom of component. 
        /// </summary>
		[Description("Distance of blade bottom from bottom of component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distBladeBot")]
        public LengthMeasure DistBladeBot {
            get {
                return distBladeBotField;
            } 
            set {
                distBladeBotField = value;
                NotifyPropertyChanged("DistBladeBot");
            }
        }

        private LengthMeasure distBladeBotField; 

        /// <summary>
        /// Blade shape. 
        /// </summary>
		[Description("Blade shape.")]
        [EnergisticsDataTypeAttribute(DataType = "BladeShapeType")]
		[XmlElement("shapeBlade")]
        public BladeShapeType? ShapeBlade {
            get {
                return shapeBladeField;
            } 
            set {
                shapeBladeField = value;
                 this.ShapeBladeSpecified = true;
                NotifyPropertyChanged("ShapeBlade");
            }
        }

        private BladeShapeType? shapeBladeField; 

        /// <summary>
        /// shapeBladeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShapeBladeSpecified {
            get {
                return shapeBladeSpecifiedField;
            } 
            set {
                shapeBladeSpecifiedField = value;
                NotifyPropertyChanged("ShapeBladeSpecified");
            }
        }

        private bool shapeBladeSpecifiedField; 

        /// <summary>
        /// Friction factor. 
        /// </summary>
		[Description("Friction factor.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("factFric")]
        public double? FactFric {
            get {
                return factFricField;
            } 
            set {
                factFricField = value;
                 this.FactFricSpecified = true;
                NotifyPropertyChanged("FactFric");
            }
        }

        private double? factFricField; 

        /// <summary>
        /// factFricSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FactFricSpecified {
            get {
                return factFricSpecifiedField;
            } 
            set {
                factFricSpecifiedField = value;
                NotifyPropertyChanged("FactFricSpecified");
            }
        }

        private bool factFricSpecifiedField; 

        /// <summary>
        /// Blade type. 
        /// </summary>
		[Description("Blade type.")]
        [EnergisticsDataTypeAttribute(DataType = "BladeType")]
		[XmlElement("typeBlade")]
        public BladeType? TypeBlade {
            get {
                return typeBladeField;
            } 
            set {
                typeBladeField = value;
                 this.TypeBladeSpecified = true;
                NotifyPropertyChanged("TypeBlade");
            }
        }

        private BladeType? typeBladeField; 

        /// <summary>
        /// typeBladeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeBladeSpecified {
            get {
                return typeBladeSpecifiedField;
            } 
            set {
                typeBladeSpecifiedField = value;
                NotifyPropertyChanged("TypeBladeSpecified");
            }
        }

        private bool typeBladeSpecifiedField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Motor Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_motor", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Tubular Motor Component Schema")]
    public partial class Motor : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Tool offset from bottom. 
        /// </summary>
		[Description("Tool offset from bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("offsetTool")]
        public LengthMeasure OffsetTool {
            get {
                return offsetToolField;
            } 
            set {
                offsetToolField = value;
                NotifyPropertyChanged("OffsetTool");
            }
        }

        private LengthMeasure offsetToolField; 

        /// <summary>
        /// Pressure loss factor. 
        /// </summary>
		[Description("Pressure loss factor.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("presLossFact")]
        public double? PresLossFact {
            get {
                return presLossFactField;
            } 
            set {
                presLossFactField = value;
                 this.PresLossFactSpecified = true;
                NotifyPropertyChanged("PresLossFact");
            }
        }

        private double? presLossFactField; 

        /// <summary>
        /// presLossFactSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PresLossFactSpecified {
            get {
                return presLossFactSpecifiedField;
            } 
            set {
                presLossFactSpecifiedField = value;
                NotifyPropertyChanged("PresLossFactSpecified");
            }
        }

        private bool presLossFactSpecifiedField; 

        /// <summary>
        /// Minimum flow rate. 
        /// </summary>
		[Description("Minimum flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateMn")]
        public VolumeFlowRateMeasure FlowrateMin {
            get {
                return flowrateMnField;
            } 
            set {
                flowrateMnField = value;
                NotifyPropertyChanged("FlowrateMin");
            }
        }

        private VolumeFlowRateMeasure flowrateMnField; 

        /// <summary>
        /// Maximum flow rate. 
        /// </summary>
		[Description("Maximum flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateMx")]
        public VolumeFlowRateMeasure FlowrateMax {
            get {
                return flowrateMxField;
            } 
            set {
                flowrateMxField = value;
                NotifyPropertyChanged("FlowrateMax");
            }
        }

        private VolumeFlowRateMeasure flowrateMxField; 

        /// <summary>
        /// Diameter of rotor at nozzle. 
        /// </summary>
		[Description("Diameter of rotor at nozzle.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaRotorNozzle")]
        public LengthMeasure DiaRotorNozzle {
            get {
                return diaRotorNozzleField;
            } 
            set {
                diaRotorNozzleField = value;
                NotifyPropertyChanged("DiaRotorNozzle");
            }
        }

        private LengthMeasure diaRotorNozzleField; 

        /// <summary>
        /// Clearance inside bearing box. 
        /// </summary>
		[Description("Clearance inside bearing box.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("clearanceBearBox")]
        public LengthMeasure ClearanceBearBox {
            get {
                return clearanceBearBoxField;
            } 
            set {
                clearanceBearBoxField = value;
                NotifyPropertyChanged("ClearanceBearBox");
            }
        }

        private LengthMeasure clearanceBearBoxField; 

        /// <summary>
        /// Number of rotor lobes. 
        /// </summary>
		[Description("Number of rotor lobes.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("lobesRotor")]
        public short? LobesRotor {
            get {
                return lobesRotorField;
            } 
            set {
                lobesRotorField = value;
                 this.LobesRotorSpecified = true;
                NotifyPropertyChanged("LobesRotor");
            }
        }

        private short? lobesRotorField; 

        /// <summary>
        /// lobesRotorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LobesRotorSpecified {
            get {
                return lobesRotorSpecifiedField;
            } 
            set {
                lobesRotorSpecifiedField = value;
                NotifyPropertyChanged("LobesRotorSpecified");
            }
        }

        private bool lobesRotorSpecifiedField; 

        /// <summary>
        /// Number of stator lobes. 
        /// </summary>
		[Description("Number of stator lobes.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("lobesStator")]
        public short? LobesStator {
            get {
                return lobesStatorField;
            } 
            set {
                lobesStatorField = value;
                 this.LobesStatorSpecified = true;
                NotifyPropertyChanged("LobesStator");
            }
        }

        private short? lobesStatorField; 

        /// <summary>
        /// lobesStatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LobesStatorSpecified {
            get {
                return lobesStatorSpecifiedField;
            } 
            set {
                lobesStatorSpecifiedField = value;
                NotifyPropertyChanged("LobesStatorSpecified");
            }
        }

        private bool lobesStatorSpecifiedField; 

        /// <summary>
        /// Type of bearing. 
        /// </summary>
		[Description("Type of bearing.")]
        [EnergisticsDataTypeAttribute(DataType = "BearingType")]
		[XmlElement("typeBearing")]
        public BearingType? TypeBearing {
            get {
                return typeBearingField;
            } 
            set {
                typeBearingField = value;
                 this.TypeBearingSpecified = true;
                NotifyPropertyChanged("TypeBearing");
            }
        }

        private BearingType? typeBearingField; 

        /// <summary>
        /// typeBearingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeBearingSpecified {
            get {
                return typeBearingSpecifiedField;
            } 
            set {
                typeBearingSpecifiedField = value;
                NotifyPropertyChanged("TypeBearingSpecified");
            }
        }

        private bool typeBearingSpecifiedField; 

        /// <summary>
        /// Maximum operating temperature. 
        /// </summary>
		[Description("Maximum operating temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempOpMx")]
        public ThermodynamicTemperatureMeasure TempOperatingMax {
            get {
                return tempOpMxField;
            } 
            set {
                tempOpMxField = value;
                NotifyPropertyChanged("TempOperatingMax");
            }
        }

        private ThermodynamicTemperatureMeasure tempOpMxField; 

        /// <summary>
        /// Is rotor catcher present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is rotor catcher present?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("rotorCatcher")]
        public bool? RotorCatcher {
            get {
                return rotorCatcherField;
            } 
            set {
                rotorCatcherField = value;
                 this.RotorCatcherSpecified = true;
                NotifyPropertyChanged("RotorCatcher");
            }
        }

        private bool? rotorCatcherField; 

        /// <summary>
        /// rotorCatcherSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RotorCatcherSpecified {
            get {
                return rotorCatcherSpecifiedField;
            } 
            set {
                rotorCatcherSpecifiedField = value;
                NotifyPropertyChanged("RotorCatcherSpecified");
            }
        }

        private bool rotorCatcherSpecifiedField; 

        /// <summary>
        /// Is dump valve present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is dump valve present?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("dumpValve")]
        public bool? DumpValve {
            get {
                return dumpValveField;
            } 
            set {
                dumpValveField = value;
                 this.DumpValveSpecified = true;
                NotifyPropertyChanged("DumpValve");
            }
        }

        private bool? dumpValveField; 

        /// <summary>
        /// dumpValveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DumpValveSpecified {
            get {
                return dumpValveSpecifiedField;
            } 
            set {
                dumpValveSpecifiedField = value;
                NotifyPropertyChanged("DumpValveSpecified");
            }
        }

        private bool dumpValveSpecifiedField; 

        /// <summary>
        /// Nozzle diameter. 
        /// </summary>
		[Description("Nozzle diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaNozzle")]
        public LengthMeasure DiaNozzle {
            get {
                return diaNozzleField;
            } 
            set {
                diaNozzleField = value;
                NotifyPropertyChanged("DiaNozzle");
            }
        }

        private LengthMeasure diaNozzleField; 

        /// <summary>
        /// Is motor rotatable? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is motor rotatable?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("rotatable")]
        public bool? Rotatable {
            get {
                return rotatableField;
            } 
            set {
                rotatableField = value;
                 this.RotatableSpecified = true;
                NotifyPropertyChanged("Rotatable");
            }
        }

        private bool? rotatableField; 

        /// <summary>
        /// rotatableSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RotatableSpecified {
            get {
                return rotatableSpecifiedField;
            } 
            set {
                rotatableSpecifiedField = value;
                NotifyPropertyChanged("RotatableSpecified");
            }
        }

        private bool rotatableSpecifiedField; 

        /// <summary>
        /// Minimum bend angle setting. 
        /// </summary>
		[Description("Minimum bend angle setting.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("bendSettingsMn")]
        public PlaneAngleMeasure BendSettingsMin {
            get {
                return bendSettingsMnField;
            } 
            set {
                bendSettingsMnField = value;
                NotifyPropertyChanged("BendSettingsMin");
            }
        }

        private PlaneAngleMeasure bendSettingsMnField; 

        /// <summary>
        /// Maximum bend angle setting. 
        /// </summary>
		[Description("Maximum bend angle setting.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("bendSettingsMx")]
        public PlaneAngleMeasure BendSettingsMax {
            get {
                return bendSettingsMxField;
            } 
            set {
                bendSettingsMxField = value;
                NotifyPropertyChanged("BendSettingsMax");
            }
        }

        private PlaneAngleMeasure bendSettingsMxField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular MWD Tool Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mwdTool", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Tubular MWD Tool Component Schema")]
    public partial class MwdTool : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Minimum flow rate. 
        /// </summary>
		[Description("Minimum flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateMn")]
        public VolumeFlowRateMeasure FlowrateMin {
            get {
                return flowrateMnField;
            } 
            set {
                flowrateMnField = value;
                NotifyPropertyChanged("FlowrateMin");
            }
        }

        private VolumeFlowRateMeasure flowrateMnField; 

        /// <summary>
        /// Maximum flow rate. 
        /// </summary>
		[Description("Maximum flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateMx")]
        public VolumeFlowRateMeasure FlowrateMax {
            get {
                return flowrateMxField;
            } 
            set {
                flowrateMxField = value;
                NotifyPropertyChanged("FlowrateMax");
            }
        }

        private VolumeFlowRateMeasure flowrateMxField; 

        /// <summary>
        /// Maximum Temperature. 
        /// </summary>
		[Description("Maximum Temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempMx")]
        public ThermodynamicTemperatureMeasure TempMax {
            get {
                return tempMxField;
            } 
            set {
                tempMxField = value;
                NotifyPropertyChanged("TempMax");
            }
        }

        private ThermodynamicTemperatureMeasure tempMxField; 

        /// <summary>
        /// Equivalent inner diameter. 
        /// </summary>
		[Description("Equivalent inner diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idEquv")]
        public LengthMeasure IdEquv {
            get {
                return idEquvField;
            } 
            set {
                idEquvField = value;
                NotifyPropertyChanged("IdEquv");
            }
        }

        private LengthMeasure idEquvField; 

        /// <summary>
        /// Sensor object. 
        /// </summary>
		[Description("Sensor object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_sensor")]
		[XmlElement("sensor")]
        public List<Sensor> Sensor {
            get {
                return sensorField;
            } 
            set {
                sensorField = value;
                NotifyPropertyChanged("Sensor");
            }
        }

         /// <summary>
         /// bool to indicate if Sensor has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SensorSpecified
         {
             get {
             if(sensorField!=null)
                 return sensorField.Count>0?true:false;
             else return false;
             }
         }
        private List<Sensor> sensorField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Tubular Jar Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_jar", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Tubular Jar Component Schema")]
    public partial class Jar : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Up set force. 
        /// </summary>
		[Description("Up set force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("forUpSet")]
        public ForceMeasure ForUpSet {
            get {
                return forUpSetField;
            } 
            set {
                forUpSetField = value;
                NotifyPropertyChanged("ForUpSet");
            }
        }

        private ForceMeasure forUpSetField; 

        /// <summary>
        /// Down set force. 
        /// </summary>
		[Description("Down set force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("forDownSet")]
        public ForceMeasure ForDownSet {
            get {
                return forDownSetField;
            } 
            set {
                forDownSetField = value;
                NotifyPropertyChanged("ForDownSet");
            }
        }

        private ForceMeasure forDownSetField; 

        /// <summary>
        /// Up trip force. 
        /// </summary>
		[Description("Up trip force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("forUpTrip")]
        public ForceMeasure ForUpTrip {
            get {
                return forUpTripField;
            } 
            set {
                forUpTripField = value;
                NotifyPropertyChanged("ForUpTrip");
            }
        }

        private ForceMeasure forUpTripField; 

        /// <summary>
        /// Down trip force. 
        /// </summary>
		[Description("Down trip force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("forDownTrip")]
        public ForceMeasure ForDownTrip {
            get {
                return forDownTripField;
            } 
            set {
                forDownTripField = value;
                NotifyPropertyChanged("ForDownTrip");
            }
        }

        private ForceMeasure forDownTripField; 

        /// <summary>
        /// Pump open force. 
        /// </summary>
		[Description("Pump open force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("forPmpOpen")]
        public ForceMeasure ForPmpOpen {
            get {
                return forPmpOpenField;
            } 
            set {
                forPmpOpenField = value;
                NotifyPropertyChanged("ForPmpOpen");
            }
        }

        private ForceMeasure forPmpOpenField; 

        /// <summary>
        /// Seal friction force. 
        /// </summary>
		[Description("Seal friction force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("forSealFric")]
        public ForceMeasure ForSealFric {
            get {
                return forSealFricField;
            } 
            set {
                forSealFricField = value;
                NotifyPropertyChanged("ForSealFric");
            }
        }

        private ForceMeasure forSealFricField; 

        /// <summary>
        /// The kind of jar. 
        /// </summary>
		[Description("The kind of jar.")]
        [EnergisticsDataTypeAttribute(DataType = "JarType")]
		[XmlElement("typeJar")]
        public JarType? TypeJar {
            get {
                return typeJarField;
            } 
            set {
                typeJarField = value;
                 this.TypeJarSpecified = true;
                NotifyPropertyChanged("TypeJar");
            }
        }

        private JarType? typeJarField; 

        /// <summary>
        /// typeJarSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeJarSpecified {
            get {
                return typeJarSpecifiedField;
            } 
            set {
                typeJarSpecifiedField = value;
                NotifyPropertyChanged("TypeJarSpecified");
            }
        }

        private bool typeJarSpecifiedField; 

        /// <summary>
        /// The jar action. 
        /// </summary>
		[Description("The jar action.")]
        [EnergisticsDataTypeAttribute(DataType = "JarAction")]
		[XmlElement("jarAction")]
        public JarAction? JarAction {
            get {
                return jarActionField;
            } 
            set {
                jarActionField = value;
                 this.JarActionSpecified = true;
                NotifyPropertyChanged("JarAction");
            }
        }

        private JarAction? jarActionField; 

        /// <summary>
        /// jarActionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool JarActionSpecified {
            get {
                return jarActionSpecifiedField;
            } 
            set {
                jarActionSpecifiedField = value;
                NotifyPropertyChanged("JarActionSpecified");
            }
        }

        private bool jarActionSpecifiedField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Nozzle Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_nozzle", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Nozzle Component Schema")]
    public partial class Nozzle : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Index if this is an indexed object. 
        /// </summary>
		[Description("Index if this is an indexed object.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("index")]
        public short? Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private short? indexField; 

        /// <summary>
        /// indexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexSpecified {
            get {
                return indexSpecifiedField;
            } 
            set {
                indexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private bool indexSpecifiedField; 

        /// <summary>
        /// Nozzle diameter. 
        /// </summary>
		[Description("Nozzle diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaNozzle")]
        public LengthMeasure DiaNozzle {
            get {
                return diaNozzleField;
            } 
            set {
                diaNozzleField = value;
                NotifyPropertyChanged("DiaNozzle");
            }
        }

        private LengthMeasure diaNozzleField; 

        /// <summary>
        /// Nozzle type. 
        /// </summary>
		[Description("Nozzle type.")]
        [EnergisticsDataTypeAttribute(DataType = "NozzleType")]
		[XmlElement("typeNozzle")]
        public NozzleType? TypeNozzle {
            get {
                return typeNozzleField;
            } 
            set {
                typeNozzleField = value;
                 this.TypeNozzleSpecified = true;
                NotifyPropertyChanged("TypeNozzle");
            }
        }

        private NozzleType? typeNozzleField; 

        /// <summary>
        /// typeNozzleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeNozzleSpecified {
            get {
                return typeNozzleSpecifiedField;
            } 
            set {
                typeNozzleSpecifiedField = value;
                NotifyPropertyChanged("TypeNozzleSpecified");
            }
        }

        private bool typeNozzleSpecifiedField; 

        /// <summary>
        /// Length of the nozzle. 
        /// </summary>
		[Description("Length of the nozzle.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("len")]
        public LengthMeasure Len {
            get {
                return lenField;
            } 
            set {
                lenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure lenField; 

        /// <summary>
        /// Nozzle orientation. 
        /// </summary>
		[StringLength(32)]
        [Description("Nozzle orientation.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("orientation")]
        public string Orientation {
            get {
                return orientationField;
            } 
            set {
                orientationField = value;
                NotifyPropertyChanged("Orientation");
            }
        }

        private string orientationField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - tubular component - component schema. The order of the components in the XML instance is significant. The components are list in the order that they enter the hole. That is, the first component is closest to the bit.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_tubularComponent", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - tubular component - component schema. The order of the components in the XML instance is significant. The components are list in the order that they enter the hole. That is, the first component is closest to the bit.")]
    public partial class TubularComponent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Type of component. 
        /// </summary>
		[Required]
        [Description("Type of component.")]
        [EnergisticsDataTypeAttribute(DataType = "TubularComponent")]
		[XmlElement("typeTubularComp")]
        public TubularComponentType? TypeTubularComp {
            get {
                return typeTubularCompField;
            } 
            set {
                typeTubularCompField = value;
                 this.TypeTubularCompSpecified = true;
                NotifyPropertyChanged("TypeTubularComp");
            }
        }

        
        private bool TypeTubularCompSpecifiedField = false;
        
        /// <summary>
        /// TypeTubularCompSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeTubularCompSpecified {
            get {
                return TypeTubularCompSpecifiedField;
            } 
            set {
                TypeTubularCompSpecifiedField = value;
                NotifyPropertyChanged("TypeTubularCompSpecified");
            }
        }
        
        private TubularComponentType? typeTubularCompField; 

        /// <summary>
        /// The sequence within which the components entered the hole. That is, a sequence number of 1 entered first, 2 entered next, etc. 
        /// </summary>
		[Required]
        [Description("The sequence within which the components entered the hole. That is, a sequence number of 1 entered first, 2 entered next, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("sequence")]
        public short? Sequence {
            get {
                return sequenceField;
            } 
            set {
                sequenceField = value;
                NotifyPropertyChanged("Sequence");
            }
        }

        private short? sequenceField; 

        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[StringLength(4000)]
        [Description("Description of item and details.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
		[Required]
        [Description("Internal diameter of object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("id")]
        public LengthMeasure InnerDiameter {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure idField; 

        /// <summary>
        /// Outside diameter of the body of the item. 
        /// </summary>
		[Required]
        [Description("Outside diameter of the body of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("od")]
        public LengthMeasure OuterDiameter {
            get {
                return odField;
            } 
            set {
                odField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure odField; 

        /// <summary>
        /// Maximum outside diameter.
        /// </summary>
		[Description("Maximum outside diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odMx")]
        public LengthMeasure OuterDiameterMax {
            get {
                return odMxField;
            } 
            set {
                odMxField = value;
                NotifyPropertyChanged("OuterDiameterMax");
            }
        }

        private LengthMeasure odMxField; 

        /// <summary>
        /// Length of the item. 
        /// </summary>
		[Required]
        [Description("Length of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("len")]
        public LengthMeasure Len {
            get {
                return lenField;
            } 
            set {
                lenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure lenField; 

        /// <summary>
        /// Average length of joint for tubulars. 
        /// </summary>
		[Description("Average length of joint for tubulars.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenJointAv")]
        public LengthMeasure LenJointAverage {
            get {
                return lenJointAvField;
            } 
            set {
                lenJointAvField = value;
                NotifyPropertyChanged("LenJointAverage");
            }
        }

        private LengthMeasure lenJointAvField; 

        /// <summary>
        /// Number of joints per stand of tubular. 
        /// </summary>
		[Description("Number of joints per stand of tubular.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numJointStand")]
        public short? NumJointStand {
            get {
                return numJointStandField;
            } 
            set {
                numJointStandField = value;
                 this.NumJointStandSpecified = true;
                NotifyPropertyChanged("NumJointStand");
            }
        }

        private short? numJointStandField; 

        /// <summary>
        /// numJointStandSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumJointStandSpecified {
            get {
                return numJointStandSpecifiedField;
            } 
            set {
                numJointStandSpecifiedField = value;
                NotifyPropertyChanged("NumJointStandSpecified");
            }
        }

        private bool numJointStandSpecifiedField; 

        /// <summary>
        /// Weight per unit length. 
        /// </summary>
		[Description("Weight per unit length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massPerLengthMeasure")]
		[XmlElement("wtPerLen")]
        public MassPerLengthMeasure WeightPerLen {
            get {
                return wtPerLenField;
            } 
            set {
                wtPerLenField = value;
                NotifyPropertyChanged("WeightPerLen");
            }
        }

        private MassPerLengthMeasure wtPerLenField; 

        /// <summary>
        /// Material grade for the tubular section. 
        /// </summary>
		[StringLength(32)]
        [Description("Material grade for the tubular section.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("grade")]
        public string Grade {
            get {
                return gradeField;
            } 
            set {
                gradeField = value;
                NotifyPropertyChanged("Grade");
            }
        }

        private string gradeField; 

        /// <summary>
        /// Minimum pass through diameter. 
        /// </summary>
		[Description("Minimum pass through diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odDrift")]
        public LengthMeasure OuterDiameterDrift {
            get {
                return odDriftField;
            } 
            set {
                odDriftField = value;
                NotifyPropertyChanged("OuterDiameterDrift");
            }
        }

        private LengthMeasure odDriftField; 

        /// <summary>
        /// Yield stress of steel - worn stress. 
        /// </summary>
		[Description("Yield stress of steel - worn stress.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("tensYield")]
        public PressureMeasure TensYield {
            get {
                return tensYieldField;
            } 
            set {
                tensYieldField = value;
                NotifyPropertyChanged("TensYield");
            }
        }

        private PressureMeasure tensYieldField; 

        /// <summary>
        /// Torque at which yield occurs.
        /// </summary>
		[Description("Torque at which yield occurs.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqYield")]
        public MomentOfForceMeasure TorqueYield {
            get {
                return tqYieldField;
            } 
            set {
                tqYieldField = value;
                NotifyPropertyChanged("TorqueYield");
            }
        }

        private MomentOfForceMeasure tqYieldField; 

        /// <summary>
        /// Fatigue endurance limit. 
        /// </summary>
		[Description("Fatigue endurance limit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("stressFatig")]
        public PressureMeasure StressFatig {
            get {
                return stressFatigField;
            } 
            set {
                stressFatigField = value;
                NotifyPropertyChanged("StressFatig");
            }
        }

        private PressureMeasure stressFatigField; 

        /// <summary>
        /// Fish neck length. 
        /// </summary>
		[Description("Fish neck length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenFishneck")]
        public LengthMeasure LenFishneck {
            get {
                return lenFishneckField;
            } 
            set {
                lenFishneckField = value;
                NotifyPropertyChanged("LenFishneck");
            }
        }

        private LengthMeasure lenFishneckField; 

        /// <summary>
        /// Fish neck inside diameter. 
        /// </summary>
		[Description("Fish neck inside diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idFishneck")]
        public LengthMeasure InnerDiameterFishneck {
            get {
                return idFishneckField;
            } 
            set {
                idFishneckField = value;
                NotifyPropertyChanged("InnerDiameterFishneck");
            }
        }

        private LengthMeasure idFishneckField; 

        /// <summary>
        /// Fish neck outside diameter. 
        /// </summary>
		[Description("Fish neck outside diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odFishneck")]
        public LengthMeasure OuterDiameterFishneck {
            get {
                return odFishneckField;
            } 
            set {
                odFishneckField = value;
                NotifyPropertyChanged("OuterDiameterFishneck");
            }
        }

        private LengthMeasure odFishneckField; 

        /// <summary>
        /// Closed end displacement. 
        /// </summary>
		[Description("Closed end displacement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("disp")]
        public VolumeMeasure Disp {
            get {
                return dispField;
            } 
            set {
                dispField = value;
                NotifyPropertyChanged("Disp");
            }
        }

        private VolumeMeasure dispField; 

        /// <summary>
        /// Burst pressure. 
        /// </summary>
		[Description("Burst pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presBurst")]
        public PressureMeasure PresBurst {
            get {
                return presBurstField;
            } 
            set {
                presBurstField = value;
                NotifyPropertyChanged("PresBurst");
            }
        }

        private PressureMeasure presBurstField; 

        /// <summary>
        /// Collapse pressure. 
        /// </summary>
		[Description("Collapse pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presCollapse")]
        public PressureMeasure PresCollapse {
            get {
                return presCollapseField;
            } 
            set {
                presCollapseField = value;
                NotifyPropertyChanged("PresCollapse");
            }
        }

        private PressureMeasure presCollapseField; 

        /// <summary>
        /// Service class. 
        /// </summary>
		[StringLength(32)]
        [Description("Service class.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("classService")]
        public string ClassService {
            get {
                return classServiceField;
            } 
            set {
                classServiceField = value;
                NotifyPropertyChanged("ClassService");
            }
        }

        private string classServiceField; 

        /// <summary>
        /// Wall thickness wear (commonly in percent). 
        /// </summary>
		[Description("Wall thickness wear (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthPerLengthMeasure")]
		[XmlElement("wearWall")]
        public LengthPerLengthMeasure WearWall {
            get {
                return wearWallField;
            } 
            set {
                wearWallField = value;
                NotifyPropertyChanged("WearWall");
            }
        }

        private LengthPerLengthMeasure wearWallField; 

        /// <summary>
        /// Wall thickness. 
        /// </summary>
		[Description("Wall thickness.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("thickWall")]
        public LengthMeasure ThickWall {
            get {
                return thickWallField;
            } 
            set {
                thickWallField = value;
                NotifyPropertyChanged("ThickWall");
            }
        }

        private LengthMeasure thickWallField; 

        /// <summary>
        /// Box/Pin configuration. 
        /// </summary>
		[Description("Box/Pin configuration.")]
        [EnergisticsDataTypeAttribute(DataType = "BoxPinConfig")]
		[XmlElement("configCon")]
        public BoxPinConfig? ConfigCon {
            get {
                return configConField;
            } 
            set {
                configConField = value;
                 this.ConfigConSpecified = true;
                NotifyPropertyChanged("ConfigCon");
            }
        }

        private BoxPinConfig? configConField; 

        /// <summary>
        /// configConSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ConfigConSpecified {
            get {
                return configConSpecifiedField;
            } 
            set {
                configConSpecifiedField = value;
                NotifyPropertyChanged("ConfigConSpecified");
            }
        }

        private bool configConSpecifiedField; 

        /// <summary>
        /// Bending stiffness of tubular. 
        /// </summary>
		[Description("Bending stiffness of tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forcePerLengthMeasure")]
		[XmlElement("bendStiffness")]
        public ForcePerLengthMeasure BendStiffness {
            get {
                return bendStiffnessField;
            } 
            set {
                bendStiffnessField = value;
                NotifyPropertyChanged("BendStiffness");
            }
        }

        private ForcePerLengthMeasure bendStiffnessField; 

        /// <summary>
        /// Axial stiffness of tubular. 
        /// </summary>
		[Description("Axial stiffness of tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forcePerLengthMeasure")]
		[XmlElement("axialStiffness")]
        public ForcePerLengthMeasure AxialStiffness {
            get {
                return axialStiffnessField;
            } 
            set {
                axialStiffnessField = value;
                NotifyPropertyChanged("AxialStiffness");
            }
        }

        private ForcePerLengthMeasure axialStiffnessField; 

        /// <summary>
        /// Torsional stiffness of tubular. 
        /// </summary>
		[Description("Torsional stiffness of tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forcePerLengthMeasure")]
		[XmlElement("torsionalStiffness")]
        public ForcePerLengthMeasure TorsionalStiffness {
            get {
                return torsionalStiffnessField;
            } 
            set {
                torsionalStiffnessField = value;
                NotifyPropertyChanged("TorsionalStiffness");
            }
        }

        private ForcePerLengthMeasure torsionalStiffnessField; 

        /// <summary>
        /// Type of material. 
        /// </summary>
		[Description("Type of material.")]
        [EnergisticsDataTypeAttribute(DataType = "MaterialType")]
		[XmlElement("typeMaterial")]
        public MaterialType? TypeMaterial {
            get {
                return typeMaterialField;
            } 
            set {
                typeMaterialField = value;
                 this.TypeMaterialSpecified = true;
                NotifyPropertyChanged("TypeMaterial");
            }
        }

        private MaterialType? typeMaterialField; 

        /// <summary>
        /// typeMaterialSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeMaterialSpecified {
            get {
                return typeMaterialSpecifiedField;
            } 
            set {
                typeMaterialSpecifiedField = value;
                NotifyPropertyChanged("TypeMaterialSpecified");
            }
        }

        private bool typeMaterialSpecifiedField; 

        /// <summary>
        /// Maximum dogleg severity. 
        /// </summary>
		[Description("Maximum dogleg severity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerLengthMeasure")]
		[XmlElement("doglegMx")]
        public AnglePerLengthMeasure DoglegMax {
            get {
                return doglegMxField;
            } 
            set {
                doglegMxField = value;
                NotifyPropertyChanged("DoglegMax");
            }
        }

        private AnglePerLengthMeasure doglegMxField; 

        /// <summary>
        /// Name of vendor. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of vendor.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("vendor")]
        public string Vendor {
            get {
                return vendorField;
            } 
            set {
                vendorField = value;
                NotifyPropertyChanged("Vendor");
            }
        }

        private string vendorField; 

        /// <summary>
        /// Component name from manufacturer. 
        /// </summary>
		[StringLength(64)]
        [Description("Component name from manufacturer.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("model")]
        public string Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string modelField; 

        /// <summary>
        /// An identification tag for the component tool. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the component tool. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_nameTag")]
		[XmlElement("nameTag")]
        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(nameTagField!=null)
                 return nameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> nameTagField; 

        /// <summary>
        /// Bit object. 
        /// </summary>
		[Description("Bit object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_bitRecord")]
		[XmlElement("bitRecord")]
        public BitRecord BitRecord {
            get {
                return bitRecordField;
            } 
            set {
                bitRecordField = value;
                NotifyPropertyChanged("BitRecord");
            }
        }

        private BitRecord bitRecordField; 

        /// <summary>
        /// Total area of nozzles. 
        /// </summary>
		[Description("Total area of nozzles.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaMeasure")]
		[XmlElement("areaNozzleFlow")]
        public AreaMeasure AreaNozzleFlow {
            get {
                return areaNozzleFlowField;
            } 
            set {
                areaNozzleFlowField = value;
                NotifyPropertyChanged("AreaNozzleFlow");
            }
        }

        private AreaMeasure areaNozzleFlowField; 

        /// <summary>
        /// Set of nozzle objects. Examples of items that have nozzles are bit, hole opener, circulation sub, jetting sub, pressure relief sub. 
        /// </summary>
		[Description("Set of nozzle objects.  Examples of items that have nozzles are bit, hole opener, circulation sub, jetting sub, pressure relief sub.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_nozzle")]
		[XmlElement("nozzle")]
        public List<Nozzle> Nozzle {
            get {
                return nozzleField;
            } 
            set {
                nozzleField = value;
                NotifyPropertyChanged("Nozzle");
            }
        }

         /// <summary>
         /// bool to indicate if Nozzle has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NozzleSpecified
         {
             get {
             if(nozzleField!=null)
                 return nozzleField.Count>0?true:false;
             else return false;
             }
         }
        private List<Nozzle> nozzleField; 

        /// <summary>
        /// Connection object. 
        /// </summary>
		[Description("Connection object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_connection")]
		[XmlElement("connection")]
        public List<Connection> Connection {
            get {
                return connectionField;
            } 
            set {
                connectionField = value;
                NotifyPropertyChanged("Connection");
            }
        }

         /// <summary>
         /// bool to indicate if Connection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectionSpecified
         {
             get {
             if(connectionField!=null)
                 return connectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<Connection> connectionField; 

        /// <summary>
        /// Jar object. 
        /// </summary>
		[Description("Jar object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_jar")]
		[XmlElement("jar")]
        public Jar Jar {
            get {
                return jarField;
            } 
            set {
                jarField = value;
                NotifyPropertyChanged("Jar");
            }
        }

        private Jar jarField; 

        /// <summary>
        /// MWD (measurement while drilling) tool object. 
        /// </summary>
		[Description("MWD (measurement while drilling) tool object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_mwdTool")]
		[XmlElement("mwdTool")]
        public MwdTool MwdTool {
            get {
                return mwdToolField;
            } 
            set {
                mwdToolField = value;
                NotifyPropertyChanged("MwdTool");
            }
        }

        private MwdTool mwdToolField; 

        /// <summary>
        /// Motor object. 
        /// </summary>
		[Description("Motor object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_motor")]
		[XmlElement("motor")]
        public Motor Motor {
            get {
                return motorField;
            } 
            set {
                motorField = value;
                NotifyPropertyChanged("Motor");
            }
        }

        private Motor motorField; 

        /// <summary>
        /// Stabilizer object. 
        /// </summary>
		[Description("Stabilizer object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stabilizer")]
		[XmlElement("stabilizer")]
        public List<Stabilizer> Stabilizer {
            get {
                return stabilizerField;
            } 
            set {
                stabilizerField = value;
                NotifyPropertyChanged("Stabilizer");
            }
        }

         /// <summary>
         /// bool to indicate if Stabilizer has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StabilizerSpecified
         {
             get {
             if(stabilizerField!=null)
                 return stabilizerField.Count>0?true:false;
             else return false;
             }
         }
        private List<Stabilizer> stabilizerField; 

        /// <summary>
        /// Bend object. 
        /// </summary>
		[Description("Bend object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_bend")]
		[XmlElement("bend")]
        public List<Bend> Bend {
            get {
                return bendField;
            } 
            set {
                bendField = value;
                NotifyPropertyChanged("Bend");
            }
        }

         /// <summary>
         /// bool to indicate if Bend has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BendSpecified
         {
             get {
             if(bendField!=null)
                 return bendField.Count>0?true:false;
             else return false;
             }
         }
        private List<Bend> bendField; 

        /// <summary>
        /// Hole opener object. 
        /// </summary>
		[Description("Hole opener object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_holeOpener")]
		[XmlElement("holeOpener")]
        public HoleOpener HoleOpener {
            get {
                return holeOpenerField;
            } 
            set {
                holeOpenerField = value;
                NotifyPropertyChanged("HoleOpener");
            }
        }

        private HoleOpener holeOpenerField; 

        /// <summary>
        /// Rotary Steerable Tool. 
        /// </summary>
		[Description("Rotary Steerable Tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_rotarySteerableTool")]
		[XmlElement("rotarySteerableTool")]
        public RotarySteerableTool RotarySteerableTool {
            get {
                return rotarySteerableToolField;
            } 
            set {
                rotarySteerableToolField = value;
                NotifyPropertyChanged("RotarySteerableTool");
            }
        }

        private RotarySteerableTool rotarySteerableToolField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Equipment NameTag Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_nameTag", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Equipment NameTag Schema")]
    public partial class NameTag : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The physical identification string of the equipment tag.
        /// </summary>
		[Required]
        [StringLength(50)]
        [Description("The physical identification string of the equipment tag.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The format or encoding specification of the equipment tag. The tag may contain may different pieces of information and knowledge of that information is inherent in the specification. The "identification string" is a mandatory part of the information in a tag.
        /// </summary>
		[Required]
        [Description("The format or encoding specification of the equipment tag.  The tag may contain may different pieces of information and knowledge of that  information is inherent in the specification.  The \"identification string\" is a mandatory part of the information in a tag.")]
        [EnergisticsDataTypeAttribute(DataType = "NameTagNumberingScheme")]
		[XmlElement("numberingScheme")]
        public NameTagNumberingScheme NumberingScheme {
            get {
                return numberingSchemeField;
            } 
            set {
                numberingSchemeField = value;
                NotifyPropertyChanged("NumberingScheme");
            }
        }

        private NameTagNumberingScheme numberingSchemeField; 

        /// <summary>
        /// Identifies the general type of identifier on an item. If multiple identifiers exist on an item, a separate description set for each identifier should be created. For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling. The barcode label may in turn be an RFID equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label' - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label' - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.
        /// </summary>
		[Description("Identifies the general type of identifier on an item.  If multiple identifiers exist on an item, a separate description set for each identifier should be created.   For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling.  The barcode label may in turn be an RFID equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label'  - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label'  - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.")]
        [EnergisticsDataTypeAttribute(DataType = "NameTagTechnology")]
		[XmlElement("technology")]
        public NameTagTechnology Technology {
            get {
                return technologyField;
            } 
            set {
                technologyField = value;
                 this.TechnologySpecified = true;
                NotifyPropertyChanged("Technology");
            }
        }

        private NameTagTechnology technologyField; 

        /// <summary>
        /// technologySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TechnologySpecified {
            get {
                return technologySpecifiedField;
            } 
            set {
                technologySpecifiedField = value;
                NotifyPropertyChanged("TechnologySpecified");
            }
        }

        private bool technologySpecifiedField; 

        /// <summary>
        /// An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item. This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener. 'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item. Most non-downhole tools will use either 'body', 'other' or not specified as the location tends to lose value with smaller or non threaded items.
        /// </summary>
		[Description("An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item.  This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener.  'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item.  Most non-downhole tools will use either 'body', 'other' or not specified as the location tends to lose value with smaller or non threaded items.")]
        [EnergisticsDataTypeAttribute(DataType = "NameTagLocation")]
		[XmlElement("location")]
        public NameTagLocation Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                 this.LocationSpecified = true;
                NotifyPropertyChanged("Location");
            }
        }

        private NameTagLocation locationField; 

        /// <summary>
        /// locationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LocationSpecified {
            get {
                return locationSpecifiedField;
            } 
            set {
                locationSpecifiedField = value;
                NotifyPropertyChanged("LocationSpecified");
            }
        }

        private bool locationSpecifiedField; 

        /// <summary>
        /// When the tag was installed in or on the item. 
        /// </summary>
		[Description("When the tag was installed in or on the item.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("installationDate")]
        public Timestamp? InstallationDate {
            get {
                return installationDateField;
            } 
            set {
                installationDateField = value;
                 this.InstallationDateSpecified = true;
                NotifyPropertyChanged("InstallationDate");
            }
        }

        private Timestamp? installationDateField; 

        /// <summary>
        /// installationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InstallationDateSpecified {
            get {
                return installationDateSpecifiedField;
            } 
            set {
                installationDateSpecifiedField = value;
                NotifyPropertyChanged("InstallationDateSpecified");
            }
        }

        private bool installationDateSpecifiedField; 

        /// <summary>
        /// The name of the company that installed the tag. 
        /// </summary>
		[StringLength(64)]
        [Description("The name of the company that installed the tag.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("installationCompany")]
        public string InstallationCompany {
            get {
                return installationCompanyField;
            } 
            set {
                installationCompanyField = value;
                NotifyPropertyChanged("InstallationCompany");
            }
        }

        private string installationCompanyField; 

        /// <summary>
        /// Reference to a manufacturers or installers installation description, code, or method. 
        /// </summary>
		[StringLength(50)]
        [Description("Reference to a manufacturers or installers installation  description, code, or method.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("mountingCode")]
        public string MountingCode {
            get {
                return mountingCodeField;
            } 
            set {
                mountingCodeField = value;
                NotifyPropertyChanged("MountingCode");
            }
        }

        private string mountingCodeField; 

        /// <summary>
        /// A comment or remark about the tag.
        /// </summary>
		[StringLength(4000)]
        [Description("A comment or remark about the tag.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Bit Record Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bitRecord", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Bit Record Component Schema.")]
    public partial class BitRecord : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Bit number and rerun number e.g. "4.1" for the first rerun of bit 4. 
        /// </summary>
		[StringLength(32)]
        [Description("Bit number and rerun number e.g. \"4.1\" for the first rerun of bit 4.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("numBit")]
        public string NumBit {
            get {
                return numBitField;
            } 
            set {
                numBitField = value;
                NotifyPropertyChanged("NumBit");
            }
        }

        private string numBitField; 

        /// <summary>
        /// Diameter of drilled hole. 
        /// </summary>
		[Required]
        [Description("Diameter of drilled hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaBit")]
        public LengthMeasure DiaBit {
            get {
                return diaBitField;
            } 
            set {
                diaBitField = value;
                NotifyPropertyChanged("DiaBit");
            }
        }

        private LengthMeasure diaBitField; 

        /// <summary>
        /// Minimum hole or tubing which bit will pass through (for bi-center bits). 
        /// </summary>
		[Description("Minimum hole or tubing which bit will pass through (for bi-center bits).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaPassThru")]
        public LengthMeasure DiaPassThru {
            get {
                return diaPassThruField;
            } 
            set {
                diaPassThruField = value;
                NotifyPropertyChanged("DiaPassThru");
            }
        }

        private LengthMeasure diaPassThruField; 

        /// <summary>
        /// Diameter of pilot bit (for bi-center bits). 
        /// </summary>
		[Description("Diameter of pilot bit (for bi-center bits).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaPilot")]
        public LengthMeasure DiaPilot {
            get {
                return diaPilotField;
            } 
            set {
                diaPilotField = value;
                NotifyPropertyChanged("DiaPilot");
            }
        }

        private LengthMeasure diaPilotField; 

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Type of bit. 
        /// </summary>
		[Description("Type of bit.")]
        [EnergisticsDataTypeAttribute(DataType = "BitType")]
		[XmlElement("typeBit")]
        public BitType? TypeBit {
            get {
                return typeBitField;
            } 
            set {
                typeBitField = value;
                 this.TypeBitSpecified = true;
                NotifyPropertyChanged("TypeBit");
            }
        }

        private BitType? typeBitField; 

        /// <summary>
        /// typeBitSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeBitSpecified {
            get {
                return typeBitSpecifiedField;
            } 
            set {
                typeBitSpecifiedField = value;
                NotifyPropertyChanged("TypeBitSpecified");
            }
        }

        private bool typeBitSpecifiedField; 

        /// <summary>
        /// Bit cost in local currency. 
        /// </summary>
		[Description("Bit cost in local currency.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cost")]
		[XmlElement("cost")]
        public Cost Cost {
            get {
                return costField;
            } 
            set {
                costField = value;
                NotifyPropertyChanged("Cost");
            }
        }

        private Cost costField; 

        /// <summary>
        /// The manufacturers code for the bit. 
        /// </summary>
		[StringLength(32)]
        [Description("The manufacturers code for the bit.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("codeMfg")]
        public string CodeMfg {
            get {
                return codeMfgField;
            } 
            set {
                codeMfgField = value;
                NotifyPropertyChanged("CodeMfg");
            }
        }

        private string codeMfgField; 

        /// <summary>
        /// IADC bit code. 
        /// </summary>
		[StringLength(32)]
        [Description("IADC bit code.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("codeIADC")]
        public string CodeIADC {
            get {
                return codeIADCField;
            } 
            set {
                codeIADCField = value;
                NotifyPropertyChanged("CodeIADC");
            }
        }

        private string codeIADCField; 

        /// <summary>
        /// Condition of inner tooth rows (inner 2/3 of bit) (0-8). 
        /// </summary>
		[Range(0, 8)]
        [Description("Condition of inner tooth rows (inner 2/3 of bit) (0-8).")]
        [EnergisticsDataTypeAttribute(DataType = "iadcIntegerCode")]
		[XmlElement("condInitInner")]
        public short? CondInitInner {
            get {
                return condInitInnerField;
            } 
            set {
                condInitInnerField = value;
                 this.CondInitInnerSpecified = true;
                NotifyPropertyChanged("CondInitInner");
            }
        }

        private short? condInitInnerField; 

        /// <summary>
        /// condInitInnerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondInitInnerSpecified {
            get {
                return condInitInnerSpecifiedField;
            } 
            set {
                condInitInnerSpecifiedField = value;
                NotifyPropertyChanged("CondInitInnerSpecified");
            }
        }

        private bool condInitInnerSpecifiedField; 

        /// <summary>
        /// Condition of outer tooth rows (outer 1/3 of bit) (0-8). 
        /// </summary>
		[Range(0, 8)]
        [Description("Condition of outer tooth rows (outer 1/3 of bit) (0-8).")]
        [EnergisticsDataTypeAttribute(DataType = "iadcIntegerCode")]
		[XmlElement("condInitOuter")]
        public short? CondInitOuter {
            get {
                return condInitOuterField;
            } 
            set {
                condInitOuterField = value;
                 this.CondInitOuterSpecified = true;
                NotifyPropertyChanged("CondInitOuter");
            }
        }

        private short? condInitOuterField; 

        /// <summary>
        /// condInitOuterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondInitOuterSpecified {
            get {
                return condInitOuterSpecifiedField;
            } 
            set {
                condInitOuterSpecifiedField = value;
                NotifyPropertyChanged("CondInitOuterSpecified");
            }
        }

        private bool condInitOuterSpecifiedField; 

        /// <summary>
        /// Overall dull condition from IADC bit wear 2 character codes. 
        /// </summary>
		[Description("Overall dull condition from IADC bit wear 2 character codes.")]
        [EnergisticsDataTypeAttribute(DataType = "BitDullCode")]
		[XmlElement("condInitDull")]
        public BitDullCode? CondInitDull {
            get {
                return condInitDullField;
            } 
            set {
                condInitDullField = value;
                 this.CondInitDullSpecified = true;
                NotifyPropertyChanged("CondInitDull");
            }
        }

        private BitDullCode? condInitDullField; 

        /// <summary>
        /// condInitDullSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondInitDullSpecified {
            get {
                return condInitDullSpecifiedField;
            } 
            set {
                condInitDullSpecifiedField = value;
                NotifyPropertyChanged("CondInitDullSpecified");
            }
        }

        private bool condInitDullSpecifiedField; 

        /// <summary>
        /// Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc). 
        /// </summary>
		[StringLength(32)]
        [Description("Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc).")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("condInitLocation")]
        public string CondInitLocation {
            get {
                return condInitLocationField;
            } 
            set {
                condInitLocationField = value;
                NotifyPropertyChanged("CondInitLocation");
            }
        }

        private string condInitLocationField; 

        /// <summary>
        /// Condition of bit bearings (integer 0-8 or E, F, N or X)). 
        /// </summary>
		[RegularExpression("[0-8EFNX]")]
        [StringLength(1)]
        [Description("Condition of bit bearings (integer 0-8 or E, F, N or X)).")]
        [EnergisticsDataTypeAttribute(DataType = "iadcBearingWearCode")]
		[XmlElement("condInitBearing")]
        public string CondInitBearing {
            get {
                return condInitBearingField;
            } 
            set {
                condInitBearingField = value;
                NotifyPropertyChanged("CondInitBearing");
            }
        }

        private string condInitBearingField; 

        /// <summary>
        /// Condition of bit gauge in 1/16 of an inch. I = in gauge, else number of 16ths out of gauge. 
        /// </summary>
		[StringLength(32)]
        [Description("Condition of bit gauge in 1/16 of an inch. I = in gauge, else number of 16ths out of gauge.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("condInitGauge")]
        public string CondInitGauge {
            get {
                return condInitGaugeField;
            } 
            set {
                condInitGaugeField = value;
                NotifyPropertyChanged("CondInitGauge");
            }
        }

        private string condInitGaugeField; 

        /// <summary>
        /// Other comments on bit condition from IADC list (BitDullCode in standard list). 
        /// </summary>
		[StringLength(32)]
        [Description("Other comments on bit condition from IADC list (BitDullCode in standard list).")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("condInitOther")]
        public string CondInitOther {
            get {
                return condInitOtherField;
            } 
            set {
                condInitOtherField = value;
                NotifyPropertyChanged("CondInitOther");
            }
        }

        private string condInitOtherField; 

        /// <summary>
        /// Reason bit was pulled from IADC codes. 
        /// </summary>
		[Description("Reason bit was pulled from IADC codes.")]
        [EnergisticsDataTypeAttribute(DataType = "BitReasonPulled")]
		[XmlElement("condInitReason")]
        public BitReasonPulled? CondInitReason {
            get {
                return condInitReasonField;
            } 
            set {
                condInitReasonField = value;
                 this.CondInitReasonSpecified = true;
                NotifyPropertyChanged("CondInitReason");
            }
        }

        private BitReasonPulled? condInitReasonField; 

        /// <summary>
        /// condInitReasonSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondInitReasonSpecified {
            get {
                return condInitReasonSpecifiedField;
            } 
            set {
                condInitReasonSpecifiedField = value;
                NotifyPropertyChanged("CondInitReasonSpecified");
            }
        }

        private bool condInitReasonSpecifiedField; 

        /// <summary>
        /// Condition of inner tooth rows (inner 2/3 of bit) (0-8). 
        /// </summary>
		[Range(0, 8)]
        [Description("Condition of inner tooth rows (inner 2/3 of bit) (0-8).")]
        [EnergisticsDataTypeAttribute(DataType = "iadcIntegerCode")]
		[XmlElement("condFinalInner")]
        public short? CondFinalInner {
            get {
                return condFinalInnerField;
            } 
            set {
                condFinalInnerField = value;
                 this.CondFinalInnerSpecified = true;
                NotifyPropertyChanged("CondFinalInner");
            }
        }

        private short? condFinalInnerField; 

        /// <summary>
        /// condFinalInnerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondFinalInnerSpecified {
            get {
                return condFinalInnerSpecifiedField;
            } 
            set {
                condFinalInnerSpecifiedField = value;
                NotifyPropertyChanged("CondFinalInnerSpecified");
            }
        }

        private bool condFinalInnerSpecifiedField; 

        /// <summary>
        /// Condition of outer tooth rows (outer 1/3 of bit) (0-8). 
        /// </summary>
		[Range(0, 8)]
        [Description("Condition of outer tooth rows (outer 1/3 of bit) (0-8).")]
        [EnergisticsDataTypeAttribute(DataType = "iadcIntegerCode")]
		[XmlElement("condFinalOuter")]
        public short? CondFinalOuter {
            get {
                return condFinalOuterField;
            } 
            set {
                condFinalOuterField = value;
                 this.CondFinalOuterSpecified = true;
                NotifyPropertyChanged("CondFinalOuter");
            }
        }

        private short? condFinalOuterField; 

        /// <summary>
        /// condFinalOuterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondFinalOuterSpecified {
            get {
                return condFinalOuterSpecifiedField;
            } 
            set {
                condFinalOuterSpecifiedField = value;
                NotifyPropertyChanged("CondFinalOuterSpecified");
            }
        }

        private bool condFinalOuterSpecifiedField; 

        /// <summary>
        /// Overall dull condition from IADC bit wear 2 character codes. 
        /// </summary>
		[Description("Overall dull condition from IADC bit wear 2 character codes.")]
        [EnergisticsDataTypeAttribute(DataType = "BitDullCode")]
		[XmlElement("condFinalDull")]
        public BitDullCode? CondFinalDull {
            get {
                return condFinalDullField;
            } 
            set {
                condFinalDullField = value;
                 this.CondFinalDullSpecified = true;
                NotifyPropertyChanged("CondFinalDull");
            }
        }

        private BitDullCode? condFinalDullField; 

        /// <summary>
        /// condFinalDullSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondFinalDullSpecified {
            get {
                return condFinalDullSpecifiedField;
            } 
            set {
                condFinalDullSpecifiedField = value;
                NotifyPropertyChanged("CondFinalDullSpecified");
            }
        }

        private bool condFinalDullSpecifiedField; 

        /// <summary>
        /// Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc). 
        /// </summary>
		[StringLength(32)]
        [Description("Row and cone numbers for items which need location information (e.g. Cracked Cone, Lost Cone etc).")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("condFinalLocation")]
        public string CondFinalLocation {
            get {
                return condFinalLocationField;
            } 
            set {
                condFinalLocationField = value;
                NotifyPropertyChanged("CondFinalLocation");
            }
        }

        private string condFinalLocationField; 

        /// <summary>
        /// Condition of bit bearings (integer 0-8 or E, F, N or X). 
        /// </summary>
		[RegularExpression("[0-8EFNX]")]
        [StringLength(1)]
        [Description("Condition of bit bearings (integer 0-8 or E, F, N or X).")]
        [EnergisticsDataTypeAttribute(DataType = "iadcBearingWearCode")]
		[XmlElement("condFinalBearing")]
        public string CondFinalBearing {
            get {
                return condFinalBearingField;
            } 
            set {
                condFinalBearingField = value;
                NotifyPropertyChanged("CondFinalBearing");
            }
        }

        private string condFinalBearingField; 

        /// <summary>
        /// Condition of bit gauge in 1/16 of a inch. I = in gauge, else number of 16ths out of gauge. 
        /// </summary>
		[StringLength(32)]
        [Description("Condition of bit gauge in 1/16 of a inch. I = in gauge, else number of 16ths out of gauge.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("condFinalGauge")]
        public string CondFinalGauge {
            get {
                return condFinalGaugeField;
            } 
            set {
                condFinalGaugeField = value;
                NotifyPropertyChanged("CondFinalGauge");
            }
        }

        private string condFinalGaugeField; 

        /// <summary>
        /// Other comments on bit condition from IADC list (BitDullCode in Standard LISTS). 
        /// </summary>
		[StringLength(32)]
        [Description("Other comments on bit condition from IADC list (BitDullCode in Standard LISTS).")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("condFinalOther")]
        public string CondFinalOther {
            get {
                return condFinalOtherField;
            } 
            set {
                condFinalOtherField = value;
                NotifyPropertyChanged("CondFinalOther");
            }
        }

        private string condFinalOtherField; 

        /// <summary>
        /// Reason bit was pulled from IADC codes. 
        /// </summary>
		[Description("Reason bit was pulled from IADC codes.")]
        [EnergisticsDataTypeAttribute(DataType = "BitReasonPulled")]
		[XmlElement("condFinalReason")]
        public BitReasonPulled? CondFinalReason {
            get {
                return condFinalReasonField;
            } 
            set {
                condFinalReasonField = value;
                 this.CondFinalReasonSpecified = true;
                NotifyPropertyChanged("CondFinalReason");
            }
        }

        private BitReasonPulled? condFinalReasonField; 

        /// <summary>
        /// condFinalReasonSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondFinalReasonSpecified {
            get {
                return condFinalReasonSpecifiedField;
            } 
            set {
                condFinalReasonSpecifiedField = value;
                NotifyPropertyChanged("CondFinalReasonSpecified");
            }
        }

        private bool condFinalReasonSpecifiedField; 

        /// <summary>
        /// Bit drive type (Motor, rotary table etc). 
        /// </summary>
		[StringLength(32)]
        [Description("Bit drive type (Motor, rotary table etc).")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("drive")]
        public string Drive {
            get {
                return driveField;
            } 
            set {
                driveField = value;
                NotifyPropertyChanged("Drive");
            }
        }

        private string driveField; 

        /// <summary>
        /// N = new, U = used. 
        /// </summary>
		[StringLength(2)]
        [Description("N = new, U = used.")]
        [EnergisticsDataTypeAttribute(DataType = "str2")]
		[XmlElement("bitClass")]
        public string BitClass {
            get {
                return bitClassField;
            } 
            set {
                bitClassField = value;
                NotifyPropertyChanged("BitClass");
            }
        }

        private string bitClassField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cost xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cost", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cost xsd type.")]
    public partial class Cost : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the Cost class.
        /// </summary>
        public Cost() {}

        /// <summary>
        /// Initializes a new instance of the Cost class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public Cost(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// currency property
        /// </summary>
		[StringLength(50)]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
        [XmlAttribute("currency")]
		
        public string Currency {
            get {
                return currencyField;
            } 
            set {
                currencyField = value;
                NotifyPropertyChanged("Currency");
            }
        }

        private string currencyField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Tubular Connection Component Schema 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquipmentConnection))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_connection", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Tubular Connection Component Schema ")]
    public partial class Connection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
		[Description("Internal diameter of object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("id")]
        public LengthMeasure InnerDiameter {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure idField; 

        /// <summary>
        /// Outside diameter of the body of the item. 
        /// </summary>
		[Description("Outside diameter of the body of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("od")]
        public LengthMeasure OuterDiameter {
            get {
                return odField;
            } 
            set {
                odField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure odField; 

        /// <summary>
        /// Length of the item. 
        /// </summary>
		[Description("Length of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("len")]
        public LengthMeasure Len {
            get {
                return lenField;
            } 
            set {
                lenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure lenField; 

        /// <summary>
        /// Thread type from API RP7G, 5CT. 
        /// </summary>
		[StringLength(32)]
        [Description("Thread type from API RP7G, 5CT.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typeThread")]
        public string TypeThread {
            get {
                return typeThreadField;
            } 
            set {
                typeThreadField = value;
                NotifyPropertyChanged("TypeThread");
            }
        }

        private string typeThreadField; 

        /// <summary>
        /// Thread size. 
        /// </summary>
		[Description("Thread size.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("sizeThread")]
        public LengthMeasure SizeThread {
            get {
                return sizeThreadField;
            } 
            set {
                sizeThreadField = value;
                NotifyPropertyChanged("SizeThread");
            }
        }

        private LengthMeasure sizeThreadField; 

        /// <summary>
        /// Yield stress of steel - worn stress. 
        /// </summary>
		[Description("Yield stress of steel - worn stress.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("tensYield")]
        public PressureMeasure TensYield {
            get {
                return tensYieldField;
            } 
            set {
                tensYieldField = value;
                NotifyPropertyChanged("TensYield");
            }
        }

        private PressureMeasure tensYieldField; 

        /// <summary>
        /// Torque at which yield occurs.
        /// </summary>
		[Description("Torque at which yield occurs.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqYield")]
        public MomentOfForceMeasure TorqueYield {
            get {
                return tqYieldField;
            } 
            set {
                tqYieldField = value;
                NotifyPropertyChanged("TorqueYield");
            }
        }

        private MomentOfForceMeasure tqYieldField; 

        /// <summary>
        /// Where connected. 
        /// </summary>
		[Description("Where connected.")]
        [EnergisticsDataTypeAttribute(DataType = "ConnectionPosition")]
		[XmlElement("position")]
        public ConnectionPosition? Position {
            get {
                return positionField;
            } 
            set {
                positionField = value;
                 this.PositionSpecified = true;
                NotifyPropertyChanged("Position");
            }
        }

        private ConnectionPosition? positionField; 

        /// <summary>
        /// positionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PositionSpecified {
            get {
                return positionSpecifiedField;
            } 
            set {
                positionSpecifiedField = value;
                NotifyPropertyChanged("PositionSpecified");
            }
        }

        private bool positionSpecifiedField; 

        /// <summary>
        /// For bending stiffness ratio. 
        /// </summary>
		[Description("For bending stiffness ratio.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaMeasure")]
		[XmlElement("criticalCrossSection")]
        public AreaMeasure CriticalCrossSection {
            get {
                return criticalCrossSectionField;
            } 
            set {
                criticalCrossSectionField = value;
                NotifyPropertyChanged("CriticalCrossSection");
            }
        }

        private AreaMeasure criticalCrossSectionField; 

        /// <summary>
        /// Leak pressure rating. 
        /// </summary>
		[Description("Leak pressure rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presLeak")]
        public PressureMeasure PresLeak {
            get {
                return presLeakField;
            } 
            set {
                presLeakField = value;
                NotifyPropertyChanged("PresLeak");
            }
        }

        private PressureMeasure presLeakField; 

        /// <summary>
        /// Make up torque. 
        /// </summary>
		[Description("Make up torque.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqMakeup")]
        public MomentOfForceMeasure TorqueMakeup {
            get {
                return tqMakeupField;
            } 
            set {
                tqMakeupField = value;
                NotifyPropertyChanged("TorqueMakeup");
            }
        }

        private MomentOfForceMeasure tqMakeupField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_equipmentConnection xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_equipmentConnection", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_equipmentConnection xsd type.")]
    public partial class EquipmentConnection : Connection, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// radialOffset property
        /// </summary>
		[Description("measurement of radial offset")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("radialOffset")]
        public LengthMeasure RadialOffset {
            get {
                return radialOffsetField;
            } 
            set {
                radialOffsetField = value;
                NotifyPropertyChanged("RadialOffset");
            }
        }

        private LengthMeasure radialOffsetField; 

        /// <summary>
        /// casingConnectionType property
        /// </summary>
        [XmlElement("casingConnectionType")]
        [EnergisticsDataTypeAttribute(DataType = "CasingConnectionType")]
        public CasingConnectionType? CasingConnectionType {
            get {
                return casingConnectionTypeField;
            } 
            set {
                casingConnectionTypeField = value;
                CasingConnectionTypeSpecified = (value!=null);
                NotifyPropertyChanged("CasingConnectionType");
            }
        }

        private CasingConnectionType? casingConnectionTypeField; 
        private bool casingConnectionTypeSpecified = false; 

        /// <summary>
        /// bool to indicate if CasingConnectionType has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CasingConnectionTypeSpecified
        {
            get {
                return casingConnectionTypeSpecified;
            }
            set {
                casingConnectionTypeSpecified= value;
            }
        }

        /// <summary>
        /// otherConnectionType property
        /// </summary>
        [XmlElement("otherConnectionType")]
        [EnergisticsDataTypeAttribute(DataType = "OtherConnectionType")]
        public OtherConnectionType? OtherConnectionType {
            get {
                return otherConnectionTypeField;
            } 
            set {
                otherConnectionTypeField = value;
                OtherConnectionTypeSpecified = (value!=null);
                NotifyPropertyChanged("OtherConnectionType");
            }
        }

        private OtherConnectionType? otherConnectionTypeField; 
        private bool otherConnectionTypeSpecified = false; 

        /// <summary>
        /// bool to indicate if OtherConnectionType has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OtherConnectionTypeSpecified
        {
            get {
                return otherConnectionTypeSpecified;
            }
            set {
                otherConnectionTypeSpecified= value;
            }
        }

        /// <summary>
        /// rodConnectionType property
        /// </summary>
        [XmlElement("rodConnectionType")]
        [EnergisticsDataTypeAttribute(DataType = "RodConnectionType")]
        public RodConnectionType? RodConnectionType {
            get {
                return rodConnectionTypeField;
            } 
            set {
                rodConnectionTypeField = value;
                RodConnectionTypeSpecified = (value!=null);
                NotifyPropertyChanged("RodConnectionType");
            }
        }

        private RodConnectionType? rodConnectionTypeField; 
        private bool rodConnectionTypeSpecified = false; 

        /// <summary>
        /// bool to indicate if RodConnectionType has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool RodConnectionTypeSpecified
        {
            get {
                return rodConnectionTypeSpecified;
            }
            set {
                rodConnectionTypeSpecified= value;
            }
        }

        /// <summary>
        /// tubingConnectionType property
        /// </summary>
        [XmlElement("tubingConnectionType")]
        [EnergisticsDataTypeAttribute(DataType = "TubingConnectionType")]
        public TubingConnectionType? TubingConnectionType {
            get {
                return tubingConnectionTypeField;
            } 
            set {
                tubingConnectionTypeField = value;
                TubingConnectionTypeSpecified = (value!=null);
                NotifyPropertyChanged("TubingConnectionType");
            }
        }

        private TubingConnectionType? tubingConnectionTypeField; 
        private bool tubingConnectionTypeSpecified = false; 

        /// <summary>
        /// bool to indicate if TubingConnectionType has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TubingConnectionTypeSpecified
        {
            get {
                return tubingConnectionTypeSpecified;
            }
            set {
                tubingConnectionTypeSpecified= value;
            }
        }


        /// <summary>
        /// connectionForm property
        /// </summary>
		[Description("The form of connection: Box or Pin")]
        [EnergisticsDataTypeAttribute(DataType = "ConnectionFormType")]
		[XmlElement("connectionForm")]
        public ConnectionFormType? ConnectionForm {
            get {
                return connectionFormField;
            } 
            set {
                connectionFormField = value;
                 this.ConnectionFormSpecified = true;
                NotifyPropertyChanged("ConnectionForm");
            }
        }

        private ConnectionFormType? connectionFormField; 

        /// <summary>
        /// connectionFormSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ConnectionFormSpecified {
            get {
                return connectionFormSpecifiedField;
            } 
            set {
                connectionFormSpecifiedField = value;
                NotifyPropertyChanged("ConnectionFormSpecified");
            }
        }

        private bool connectionFormSpecifiedField; 

        /// <summary>
        /// connectionUpset property
        /// </summary>
		[StringLength(64)]
        [Description("Connection upset")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("connectionUpset")]
        public string ConnectionUpset {
            get {
                return connectionUpsetField;
            } 
            set {
                connectionUpsetField = value;
                NotifyPropertyChanged("ConnectionUpset");
            }
        }

        private string connectionUpsetField; 

		/// <summary>
        /// stringEquipmentRefUID property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the string equipment")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("stringEquipmentRefUID")]
		
        public string StringEquipmentRefUID {
            get {
                return stringEquipmentRefUIDField;
            } 
            set {
                stringEquipmentRefUIDField = value;
                NotifyPropertyChanged("StringEquipmentRefUID");
            }
        }

        private string stringEquipmentRefUIDField; 


    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML tubular object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_tubular", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML tubular object.")]
    public partial class Tubular : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the tubular. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the tubular.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the tubular (assembly). 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the tubular (assembly).")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Type of tubular assembly. 
        /// </summary>
		[Required]
        [Description("Type of tubular assembly.")]
        [EnergisticsDataTypeAttribute(DataType = "TubularAssembly")]
		[XmlElement("typeTubularAssy")]
        public TubularAssembly? TypeTubularAssy {
            get {
                return typeTubularAssyField;
            } 
            set {
                typeTubularAssyField = value;
                 this.TypeTubularAssySpecified = true;
                NotifyPropertyChanged("TypeTubularAssy");
            }
        }

        
        private bool TypeTubularAssySpecifiedField = false;
        
        /// <summary>
        /// TypeTubularAssySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeTubularAssySpecified {
            get {
                return TypeTubularAssySpecifiedField;
            } 
            set {
                TypeTubularAssySpecifiedField = value;
                NotifyPropertyChanged("TypeTubularAssySpecified");
            }
        }
        
        private TubularAssembly? typeTubularAssyField; 

        /// <summary>
        /// Is float valve present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is float valve present?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("valveFloat")]
        public bool? ValveFloat {
            get {
                return valveFloatField;
            } 
            set {
                valveFloatField = value;
                 this.ValveFloatSpecified = true;
                NotifyPropertyChanged("ValveFloat");
            }
        }

        private bool? valveFloatField; 

        /// <summary>
        /// valveFloatSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ValveFloatSpecified {
            get {
                return valveFloatSpecifiedField;
            } 
            set {
                valveFloatSpecifiedField = value;
                NotifyPropertyChanged("ValveFloatSpecified");
            }
        }

        private bool valveFloatSpecifiedField; 

        /// <summary>
        /// Is nuclear tool present? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is nuclear tool present?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("sourceNuclear")]
        public bool? SourceNuclear {
            get {
                return sourceNuclearField;
            } 
            set {
                sourceNuclearField = value;
                 this.SourceNuclearSpecified = true;
                NotifyPropertyChanged("SourceNuclear");
            }
        }

        private bool? sourceNuclearField; 

        /// <summary>
        /// sourceNuclearSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SourceNuclearSpecified {
            get {
                return sourceNuclearSpecifiedField;
            } 
            set {
                sourceNuclearSpecifiedField = value;
                NotifyPropertyChanged("SourceNuclearSpecified");
            }
        }

        private bool sourceNuclearSpecifiedField; 

        /// <summary>
        /// Maximum hole size generated by assembly. 
        /// </summary>
		[Description("Maximum hole size generated by assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaHoleAssy")]
        public LengthMeasure DiaHoleAssy {
            get {
                return diaHoleAssyField;
            } 
            set {
                diaHoleAssyField = value;
                NotifyPropertyChanged("DiaHoleAssy");
            }
        }

        private LengthMeasure diaHoleAssyField; 

        /// <summary>
        /// Container element for the tubular component elements. 
        /// </summary>
		[Description("Container element for the tubular component elements.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_tubularComponent")]
		[XmlElement("tubularComponent")]
        public List<TubularComponent> TubularComponent {
            get {
                return tubularComponentField;
            } 
            set {
                tubularComponentField = value;
                NotifyPropertyChanged("TubularComponent");
            }
        }

         /// <summary>
         /// bool to indicate if TubularComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TubularComponentSpecified
         {
             get {
             if(tubularComponentField!=null)
                 return tubularComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<TubularComponent> tubularComponentField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_refWellboreTrajectory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellboreTrajectory", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_refWellboreTrajectory xsd type.")]
    public partial class RefWellboreTrajectory : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the trajectory within the wellbore.
        /// </summary>
		[Required]
        [Description("A pointer to the trajectory within the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("trajectoryReference")]
        public RefNameString TrajectoryReference {
            get {
                return trajectoryReferenceField;
            } 
            set {
                trajectoryReferenceField = value;
                NotifyPropertyChanged("TrajectoryReference");
            }
        }

        private RefNameString trajectoryReferenceField; 

        /// <summary>
        /// A pointer to the wellbore that contains the trajectoryReference. This is not needed unless the trajectory is outside the context of a common parent wellbore.
        /// </summary>
		[Description("A pointer to the wellbore that contains the trajectoryReference. This is not needed unless the trajectory is outside the  context of a common parent wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellboreParent")]
        public RefNameString WellboreParent {
            get {
                return wellboreParentField;
            } 
            set {
                wellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private RefNameString wellboreParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Trajectory object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_trajectory", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Trajectory object.")]
    public partial class Trajectory : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the trajectory. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the trajectory.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the trajectory. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the trajectory.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the  behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("objectGrowing")]
        public bool? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set {
                objectGrowingField = value;
                 this.ObjectGrowingSpecified = true;
                NotifyPropertyChanged("ObjectGrowing");
            }
        }

        private bool? objectGrowingField; 

        /// <summary>
        /// objectGrowingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ObjectGrowingSpecified {
            get {
                return objectGrowingSpecifiedField;
            } 
            set {
                objectGrowingSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingSpecified");
            }
        }

        private bool objectGrowingSpecifiedField; 

        /// <summary>
        /// If a trajectory is tied into another trajectory, a pointer to the parent trajectory. The trajectory may be in another wellbore.
        /// </summary>
		[Description("If a trajectory is tied into another trajectory,  a pointer to the parent trajectory.   The trajectory may be in another wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_refWellboreTrajectory")]
		[XmlElement("parentTrajectory")]
        public RefWellboreTrajectory ParentTrajectory {
            get {
                return parentTrajectoryField;
            } 
            set {
                parentTrajectoryField = value;
                NotifyPropertyChanged("ParentTrajectory");
            }
        }

        private RefWellboreTrajectory parentTrajectoryField; 

        /// <summary>
        /// Start date and time of trajectory station measurements. Note that this is NOT a server query parameter.
        /// </summary>
		[Description("Start date and time of trajectory station measurements. Note that this is NOT a server query parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimTrajStart")]
        public Timestamp? DateTimeTrajStart {
            get {
                return dTimTrajStartField;
            } 
            set {
                dTimTrajStartField = value;
                 this.DateTimeTrajStartSpecified = true;
                NotifyPropertyChanged("DateTimeTrajStart");
            }
        }

        private Timestamp? dTimTrajStartField; 

        /// <summary>
        /// dTimTrajStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeTrajStartSpecified {
            get {
                return dTimTrajStartSpecifiedField;
            } 
            set {
                dTimTrajStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeTrajStartSpecified");
            }
        }

        private bool dTimTrajStartSpecifiedField; 

        /// <summary>
        /// End date and time of trajectory station measurements. Note that this is NOT a server query parameter.
        /// </summary>
		[Description("End date and time of trajectory station measurements. Note that this is NOT a server query parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimTrajEnd")]
        public Timestamp? DateTimeTrajEnd {
            get {
                return dTimTrajEndField;
            } 
            set {
                dTimTrajEndField = value;
                 this.DateTimeTrajEndSpecified = true;
                NotifyPropertyChanged("DateTimeTrajEnd");
            }
        }

        private Timestamp? dTimTrajEndField; 

        /// <summary>
        /// dTimTrajEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeTrajEndSpecified {
            get {
                return dTimTrajEndSpecifiedField;
            } 
            set {
                dTimTrajEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeTrajEndSpecified");
            }
        }

        private bool dTimTrajEndSpecifiedField; 

        /// <summary>
        /// Minimum measured depth of this object. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("Minimum measured depth of this object. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdMn")]
        public MeasuredDepthCoord MDMin {
            get {
                return mdMnField;
            } 
            set {
                mdMnField = value;
                NotifyPropertyChanged("MDMin");
            }
        }

        private MeasuredDepthCoord mdMnField; 

        /// <summary>
        /// Maximum measured depth of this object. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("Maximum measured depth of this object. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdMx")]
        public MeasuredDepthCoord MDMax {
            get {
                return mdMxField;
            } 
            set {
                mdMxField = value;
                NotifyPropertyChanged("MDMax");
            }
        }

        private MeasuredDepthCoord mdMxField; 

        /// <summary>
        /// Name of contractor who provided the service.
        /// </summary>
		[StringLength(64)]
        [Description("Name of contractor who provided the service.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("serviceCompany")]
        public string ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string serviceCompanyField; 

        /// <summary>
        /// Magnetic declination used to correct a Magnetic North referenced azimuth to a True North azimuth. Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added. Starting value if stations have individual values. 
        /// </summary>
		[Description("Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.  Starting value if stations have individual values.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("magDeclUsed")]
        public PlaneAngleMeasure MagDeclUsed {
            get {
                return magDeclUsedField;
            } 
            set {
                magDeclUsedField = value;
                NotifyPropertyChanged("MagDeclUsed");
            }
        }

        private PlaneAngleMeasure magDeclUsedField; 

        /// <summary>
        /// DEPRECATED - use gridConUsed. Grid correction used to correct a survey. Starting value if stations have individual values.
        /// </summary>
		[Description("DEPRECATED - use gridConUsed. Grid correction used to correct a survey.  Starting value if stations have individual values.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("gridCorUsed")]
        public PlaneAngleMeasure GridCorUsed {
            get {
                return gridCorUsedField;
            } 
            set {
                gridCorUsedField = value;
                NotifyPropertyChanged("GridCorUsed");
            }
        }

        private PlaneAngleMeasure gridCorUsedField; 

        /// <summary>
        /// Magnetic declination used to correct a Magnetic North referenced azimuth to a True North azimuth. Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added. Starting value if stations have individual values.
        /// </summary>
		[Description("Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added. Starting value if stations have individual values.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("gridConUsed")]
        public PlaneAngleMeasure GridConUsed {
            get {
                return gridConUsedField;
            } 
            set {
                gridConUsedField = value;
                NotifyPropertyChanged("GridConUsed");
            }
        }

        private PlaneAngleMeasure gridConUsedField; 

        /// <summary>
        /// Azimuth used for vertical section plot/computations.
        /// </summary>
		[Description("Azimuth used for vertical section plot/computations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("aziVertSect")]
        public PlaneAngleMeasure AziVertSect {
            get {
                return aziVertSectField;
            } 
            set {
                aziVertSectField = value;
                NotifyPropertyChanged("AziVertSect");
            }
        }

        private PlaneAngleMeasure aziVertSectField; 

        /// <summary>
        /// Origin north-south used for vertical section plot/computations.
        /// </summary>
		[Description("Origin north-south used for vertical section plot/computations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispNsVertSectOrig")]
        public LengthMeasure DispNSVertSectOrig {
            get {
                return dispNsVertSectOrigField;
            } 
            set {
                dispNsVertSectOrigField = value;
                NotifyPropertyChanged("DispNSVertSectOrig");
            }
        }

        private LengthMeasure dispNsVertSectOrigField; 

        /// <summary>
        /// Origin east-west used for vertical section plot/computations.
        /// </summary>
		[Description("Origin east-west used for vertical section plot/computations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispEwVertSectOrig")]
        public LengthMeasure DispEWVertSectOrig {
            get {
                return dispEwVertSectOrigField;
            } 
            set {
                dispEwVertSectOrigField = value;
                NotifyPropertyChanged("DispEWVertSectOrig");
            }
        }

        private LengthMeasure dispEwVertSectOrigField; 

        /// <summary>
        /// True ("true" or "1") indicates that this trajectory is definitive for this wellbore. False ("false" or "0") or not given indicates otherwise. There can only be one trajectory per wellbore with definitive=true and it must define the geometry of the whole wellbore (surface to bottom). The definitive trajectory may represent a composite of information in many other trajectories. A query requesting a subset of the possible information can provide a simplistic view of the geometry of the wellbore.
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that this trajectory is definitive for  this wellbore. False (\"false\" or \"0\") or not given indicates otherwise. There can only be one trajectory per wellbore with definitive=true and it must define the geometry of the whole wellbore (surface to bottom). The definitive trajectory may represent a composite of information in many other trajectories. A query requesting a subset of the possible information can provide a simplistic view of the geometry of the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("definitive")]
        public bool? Definitive {
            get {
                return definitiveField;
            } 
            set {
                definitiveField = value;
                 this.DefinitiveSpecified = true;
                NotifyPropertyChanged("Definitive");
            }
        }

        private bool? definitiveField; 

        /// <summary>
        /// definitiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DefinitiveSpecified {
            get {
                return definitiveSpecifiedField;
            } 
            set {
                definitiveSpecifiedField = value;
                NotifyPropertyChanged("DefinitiveSpecified");
            }
        }

        private bool definitiveSpecifiedField; 

        /// <summary>
        /// Is trajectory a result of a memory dump from a tool? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is trajectory a result of a memory dump from a tool?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("memory")]
        public bool? Memory {
            get {
                return memoryField;
            } 
            set {
                memoryField = value;
                 this.MemorySpecified = true;
                NotifyPropertyChanged("Memory");
            }
        }

        private bool? memoryField; 

        /// <summary>
        /// memorySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MemorySpecified {
            get {
                return memorySpecifiedField;
            } 
            set {
                memorySpecifiedField = value;
                NotifyPropertyChanged("MemorySpecified");
            }
        }

        private bool memorySpecifiedField; 

        /// <summary>
        /// Is trajectory a final or intermediate/preliminary? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is trajectory a final or intermediate/preliminary?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("finalTraj")]
        public bool? FinalTraj {
            get {
                return finalTrajField;
            } 
            set {
                finalTrajField = value;
                 this.FinalTrajSpecified = true;
                NotifyPropertyChanged("FinalTraj");
            }
        }

        private bool? finalTrajField; 

        /// <summary>
        /// finalTrajSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FinalTrajSpecified {
            get {
                return finalTrajSpecifiedField;
            } 
            set {
                finalTrajSpecifiedField = value;
                NotifyPropertyChanged("FinalTrajSpecified");
            }
        }

        private bool finalTrajSpecifiedField; 

        /// <summary>
        /// Specifies the definition of north. While this is optional because of legacy data, it is strongly recommended that this always be specified.
        /// </summary>
		[Description("Specifies the definition of north. While this is optional because of legacy data, it is strongly recommended  that this always be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "AziRef")]
		[XmlElement("aziRef")]
        public AziRef? AziRef {
            get {
                return aziRefField;
            } 
            set {
                aziRefField = value;
                 this.AziRefSpecified = true;
                NotifyPropertyChanged("AziRef");
            }
        }

        private AziRef? aziRefField; 

        /// <summary>
        /// aziRefSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AziRefSpecified {
            get {
                return aziRefSpecifiedField;
            } 
            set {
                aziRefSpecifiedField = value;
                NotifyPropertyChanged("AziRefSpecified");
            }
        }

        private bool aziRefSpecifiedField; 

        /// <summary>
        /// Container element for trajectory station elements. This is an API "data-node" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("Container element for trajectory station elements. This is an API \"data-node\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_trajectoryStation")]
		[XmlElement("trajectoryStation")]
        public List<TrajectoryStation> TrajectoryStation {
            get {
                return trajectoryStationField;
            } 
            set {
                trajectoryStationField = value;
                NotifyPropertyChanged("TrajectoryStation");
            }
        }

         /// <summary>
         /// bool to indicate if TrajectoryStation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TrajectoryStationSpecified
         {
             get {
             if(trajectoryStationField!=null)
                 return trajectoryStationField.Count>0?true:false;
             else return false;
             }
         }
        private List<TrajectoryStation> trajectoryStationField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Trajectory Station Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_trajectoryStation", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Trajectory Station Component Schema")]
    public partial class TrajectoryStation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the intended target of this station. 
        /// </summary>
		[Description("A pointer to the intended target of this station.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("target")]
        public RefNameString Target {
            get {
                return targetField;
            } 
            set {
                targetField = value;
                NotifyPropertyChanged("Target");
            }
        }

        private RefNameString targetField; 

        /// <summary>
        /// Date and time the station was measured or created. 
        /// </summary>
		[Description("Date and time the station was measured or created.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStn")]
        public Timestamp? DateTimeStn {
            get {
                return dTimStnField;
            } 
            set {
                dTimStnField = value;
                 this.DateTimeStnSpecified = true;
                NotifyPropertyChanged("DateTimeStn");
            }
        }

        private Timestamp? dTimStnField; 

        /// <summary>
        /// dTimStnSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStnSpecified {
            get {
                return dTimStnSpecifiedField;
            } 
            set {
                dTimStnSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStnSpecified");
            }
        }

        private bool dTimStnSpecifiedField; 

        /// <summary>
        /// Type of survey station. 
        /// </summary>
		[Required]
        [Description("Type of survey station.")]
        [EnergisticsDataTypeAttribute(DataType = "TrajStationType")]
		[XmlElement("typeTrajStation")]
        public TrajStationType? TypeTrajStation {
            get {
                return typeTrajStationField;
            } 
            set {
                typeTrajStationField = value;
                 this.TypeTrajStationSpecified = true;
                NotifyPropertyChanged("TypeTrajStation");
            }
        }

        
        private bool TypeTrajStationSpecifiedField = false;
        
        /// <summary>
        /// TypeTrajStationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeTrajStationSpecified {
            get {
                return TypeTrajStationSpecifiedField;
            } 
            set {
                TypeTrajStationSpecifiedField = value;
                NotifyPropertyChanged("TypeTrajStationSpecified");
            }
        }
        
        private TrajStationType? typeTrajStationField; 

        /// <summary>
        /// The type of tool used for the measurements.
        /// </summary>
		[StringLength(50)]
        [Description("The type of tool used for the measurements.")]
        [EnergisticsDataTypeAttribute(DataType = "TypeSurveyTool")]
		[XmlElement("typeSurveyTool")]
        public string TypeSurveyTool {
            get {
                return typeSurveyToolField;
            } 
            set {
                typeSurveyToolField = value;
                NotifyPropertyChanged("TypeSurveyTool");
            }
        }

        private string typeSurveyToolField; 

        /// <summary>
        /// The type of algorithm used in the position calculation.
        /// </summary>
		[StringLength(50)]
        [Description("The type of algorithm used in the position calculation.")]
        [EnergisticsDataTypeAttribute(DataType = "TrajStnCalcAlgorithm")]
		[XmlElement("calcAlgorithm")]
        public string CalcAlgorithm {
            get {
                return calcAlgorithmField;
            } 
            set {
                calcAlgorithmField = value;
                NotifyPropertyChanged("CalcAlgorithm");
            }
        }

        private string calcAlgorithmField; 

        /// <summary>
        /// Measured depth of measurement from the drill datum. This is an API "node-index" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Required]
        [Description("Measured depth of measurement from the drill datum. This is an API \"node-index\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
		[Description("Vertical depth of the measurements.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// Hole inclination, measured from vertical. 
        /// </summary>
		[Description("Hole inclination, measured from vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("incl")]
        public PlaneAngleMeasure Incl {
            get {
                return inclField;
            } 
            set {
                inclField = value;
                NotifyPropertyChanged("Incl");
            }
        }

        private PlaneAngleMeasure inclField; 

        /// <summary>
        /// Hole azimuth. Corrected to wells azimuth reference. 
        /// </summary>
		[Description("Hole azimuth. Corrected to wells azimuth reference.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("azi")]
        public PlaneAngleMeasure Azi {
            get {
                return aziField;
            } 
            set {
                aziField = value;
                NotifyPropertyChanged("Azi");
            }
        }

        private PlaneAngleMeasure aziField; 

        /// <summary>
        /// Toolface angle (magnetic). 
        /// </summary>
		[Description("Toolface angle (magnetic).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("mtf")]
        public PlaneAngleMeasure Mtf {
            get {
                return mtfField;
            } 
            set {
                mtfField = value;
                NotifyPropertyChanged("Mtf");
            }
        }

        private PlaneAngleMeasure mtfField; 

        /// <summary>
        /// Toolface angle (gravity). 
        /// </summary>
		[Description("Toolface angle (gravity).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("gtf")]
        public PlaneAngleMeasure Gtf {
            get {
                return gtfField;
            } 
            set {
                gtfField = value;
                NotifyPropertyChanged("Gtf");
            }
        }

        private PlaneAngleMeasure gtfField; 

        /// <summary>
        /// North-south offset, positive to the North. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.
        /// </summary>
		[Description("North-south offset, positive to the North.  This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispNs")]
        public LengthMeasure DispNS {
            get {
                return dispNsField;
            } 
            set {
                dispNsField = value;
                NotifyPropertyChanged("DispNS");
            }
        }

        private LengthMeasure dispNsField; 

        /// <summary>
        /// East-west offset, positive to the East. This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location. 
        /// </summary>
		[Description("East-west offset, positive to the East. This is relative to wellLocation with a North axis orientation of aziRef.  If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispEw")]
        public LengthMeasure DispEW {
            get {
                return dispEwField;
            } 
            set {
                dispEwField = value;
                NotifyPropertyChanged("DispEW");
            }
        }

        private LengthMeasure dispEwField; 

        /// <summary>
        /// Distance along vertical section azimuth plane. 
        /// </summary>
		[Description("Distance along vertical section azimuth plane.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("vertSect")]
        public LengthMeasure VertSect {
            get {
                return vertSectField;
            } 
            set {
                vertSectField = value;
                NotifyPropertyChanged("VertSect");
            }
        }

        private LengthMeasure vertSectField; 

        /// <summary>
        /// Dogleg severity. 
        /// </summary>
		[Description("Dogleg severity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerLengthMeasure")]
		[XmlElement("dls")]
        public AnglePerLengthMeasure DoglegSeverity {
            get {
                return dlsField;
            } 
            set {
                dlsField = value;
                NotifyPropertyChanged("DoglegSeverity");
            }
        }

        private AnglePerLengthMeasure dlsField; 

        /// <summary>
        /// Turn rate, radius of curvature computation. 
        /// </summary>
		[Description("Turn rate, radius of curvature computation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerLengthMeasure")]
		[XmlElement("rateTurn")]
        public AnglePerLengthMeasure RateTurn {
            get {
                return rateTurnField;
            } 
            set {
                rateTurnField = value;
                NotifyPropertyChanged("RateTurn");
            }
        }

        private AnglePerLengthMeasure rateTurnField; 

        /// <summary>
        /// Build Rate, radius of curvature computation. 
        /// </summary>
		[Description("Build Rate, radius of curvature computation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerLengthMeasure")]
		[XmlElement("rateBuild")]
        public AnglePerLengthMeasure RateBuild {
            get {
                return rateBuildField;
            } 
            set {
                rateBuildField = value;
                NotifyPropertyChanged("RateBuild");
            }
        }

        private AnglePerLengthMeasure rateBuildField; 

        /// <summary>
        /// Delta measured depth from previous station. 
        /// </summary>
		[Description("Delta measured depth from previous station.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("mdDelta")]
        public LengthMeasure MDDelta {
            get {
                return mdDeltaField;
            } 
            set {
                mdDeltaField = value;
                NotifyPropertyChanged("MDDelta");
            }
        }

        private LengthMeasure mdDeltaField; 

        /// <summary>
        /// Delta true vertical depth from previous station. 
        /// </summary>
		[Description("Delta true vertical depth from previous station.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("tvdDelta")]
        public LengthMeasure TvdDelta {
            get {
                return tvdDeltaField;
            } 
            set {
                tvdDeltaField = value;
                NotifyPropertyChanged("TvdDelta");
            }
        }

        private LengthMeasure tvdDeltaField; 

        /// <summary>
        /// DEPRECATED. Tool error model used to compute covariance matrix. 
        /// </summary>
		[StringLength(4000)]
        [Description("DEPRECATED. Tool error model used to compute covariance matrix.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("modelToolError")]
        public string ModelToolError {
            get {
                return modelToolErrorField;
            } 
            set {
                modelToolErrorField = value;
                NotifyPropertyChanged("ModelToolError");
            }
        }

        private string modelToolErrorField; 

        /// <summary>
        /// Reference to the toolErrorModel object used to compute covariance matrix.
        /// </summary>
		[Description("Reference to the toolErrorModel object used to compute covariance matrix.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("iscwsaToolErrorModel")]
        public RefNameString IscwsaToolErrorModel {
            get {
                return iscwsaToolErrorModelField;
            } 
            set {
                iscwsaToolErrorModelField = value;
                NotifyPropertyChanged("IscwsaToolErrorModel");
            }
        }

        private RefNameString iscwsaToolErrorModelField; 

        /// <summary>
        /// Survey tool gravity uncertainty. 
        /// </summary>
		[Description("Survey tool gravity uncertainty.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "accelerationLinearMeasure")]
		[XmlElement("gravTotalUncert")]
        public AccelerationLinearMeasure GravTotalUncert {
            get {
                return gravTotalUncertField;
            } 
            set {
                gravTotalUncertField = value;
                NotifyPropertyChanged("GravTotalUncert");
            }
        }

        private AccelerationLinearMeasure gravTotalUncertField; 

        /// <summary>
        /// Survey tool dip uncertainty. 
        /// </summary>
		[Description("Survey tool dip uncertainty.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("dipAngleUncert")]
        public PlaneAngleMeasure DipAngleUncert {
            get {
                return dipAngleUncertField;
            } 
            set {
                dipAngleUncertField = value;
                NotifyPropertyChanged("DipAngleUncert");
            }
        }

        private PlaneAngleMeasure dipAngleUncertField; 

        /// <summary>
        /// Survey tool magnetic uncertainty. 
        /// </summary>
		[Description("Survey tool magnetic uncertainty.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magTotalUncert")]
        public MagneticInductionMeasure MagTotalUncert {
            get {
                return magTotalUncertField;
            } 
            set {
                magTotalUncertField = value;
                NotifyPropertyChanged("MagTotalUncert");
            }
        }

        private MagneticInductionMeasure magTotalUncertField; 

        /// <summary>
        /// Was an accelerometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[Description("Was an accelerometer alignment correction applied to survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("gravAccelCorUsed")]
        public bool? GravAccelCorUsed {
            get {
                return gravAccelCorUsedField;
            } 
            set {
                gravAccelCorUsedField = value;
                 this.GravAccelCorUsedSpecified = true;
                NotifyPropertyChanged("GravAccelCorUsed");
            }
        }

        private bool? gravAccelCorUsedField; 

        /// <summary>
        /// gravAccelCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GravAccelCorUsedSpecified {
            get {
                return gravAccelCorUsedSpecifiedField;
            } 
            set {
                gravAccelCorUsedSpecifiedField = value;
                NotifyPropertyChanged("GravAccelCorUsedSpecified");
            }
        }

        private bool gravAccelCorUsedSpecifiedField; 

        /// <summary>
        /// Was a magnetometer alignment correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Was a magnetometer alignment correction applied to survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("magXAxialCorUsed")]
        public bool? MagXAxialCorUsed {
            get {
                return magXAxialCorUsedField;
            } 
            set {
                magXAxialCorUsedField = value;
                 this.MagXAxialCorUsedSpecified = true;
                NotifyPropertyChanged("MagXAxialCorUsed");
            }
        }

        private bool? magXAxialCorUsedField; 

        /// <summary>
        /// magXAxialCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MagXAxialCorUsedSpecified {
            get {
                return magXAxialCorUsedSpecifiedField;
            } 
            set {
                magXAxialCorUsedSpecifiedField = value;
                NotifyPropertyChanged("MagXAxialCorUsedSpecified");
            }
        }

        private bool magXAxialCorUsedSpecifiedField; 

        /// <summary>
        /// Was a bottom hole assembly sag correction applied to the survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Was a bottom hole assembly sag correction applied to the survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("sagCorUsed")]
        public bool? SagCorUsed {
            get {
                return sagCorUsedField;
            } 
            set {
                sagCorUsedField = value;
                 this.SagCorUsedSpecified = true;
                NotifyPropertyChanged("SagCorUsed");
            }
        }

        private bool? sagCorUsedField; 

        /// <summary>
        /// sagCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SagCorUsedSpecified {
            get {
                return sagCorUsedSpecifiedField;
            } 
            set {
                sagCorUsedSpecifiedField = value;
                NotifyPropertyChanged("SagCorUsedSpecified");
            }
        }

        private bool sagCorUsedSpecifiedField; 

        /// <summary>
        /// Was a drillstring magnetism correction applied to survey computation? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Was a drillstring magnetism correction applied to survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("magDrlstrCorUsed")]
        public bool? MagDrlstrCorUsed {
            get {
                return magDrlstrCorUsedField;
            } 
            set {
                magDrlstrCorUsedField = value;
                 this.MagDrlstrCorUsedSpecified = true;
                NotifyPropertyChanged("MagDrlstrCorUsed");
            }
        }

        private bool? magDrlstrCorUsedField; 

        /// <summary>
        /// magDrlstrCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MagDrlstrCorUsedSpecified {
            get {
                return magDrlstrCorUsedSpecifiedField;
            } 
            set {
                magDrlstrCorUsedSpecifiedField = value;
                NotifyPropertyChanged("MagDrlstrCorUsedSpecified");
            }
        }

        private bool magDrlstrCorUsedSpecifiedField; 

        /// <summary>
        /// Was an In Field Referencing (IFR) correction applied to the azimuth value? Values are "true" (or "1") and "false" (or "0"). An IFR survey measures the strength and direction of the Earth's magnetic field over the area of interest. By taking a geomagnetic modelled values away from these field survey results, we are left with a local crustal correction, which since it is assumed geological in nature, only varies over geological timescales. For MWD survey operations, these corrections are applied in addition to the geomagnetic model to provide accurate knowledge of the local magnetic field and hence to improve the accuracy of MWD magnetic azimuth measurements.
        /// </summary>
		[Description("Was an In Field Referencing (IFR) correction applied to the azimuth value?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). An IFR survey measures the strength and direction of the Earth's magnetic field over the area of interest.  By taking a geomagnetic modelled values away  from these field survey results, we are left with a local crustal correction,  which since it is assumed geological in nature, only varies over geological timescales.   For MWD survey operations, these corrections are applied in addition to the geomagnetic model  to provide accurate knowledge of the local magnetic field and hence to improve the  accuracy of MWD magnetic azimuth measurements.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("infieldRefCorUsed")]
        public bool? InfieldRefCorUsed {
            get {
                return infieldRefCorUsedField;
            } 
            set {
                infieldRefCorUsedField = value;
                 this.InfieldRefCorUsedSpecified = true;
                NotifyPropertyChanged("InfieldRefCorUsed");
            }
        }

        private bool? infieldRefCorUsedField; 

        /// <summary>
        /// infieldRefCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InfieldRefCorUsedSpecified {
            get {
                return infieldRefCorUsedSpecifiedField;
            } 
            set {
                infieldRefCorUsedSpecifiedField = value;
                NotifyPropertyChanged("InfieldRefCorUsedSpecified");
            }
        }

        private bool infieldRefCorUsedSpecifiedField; 

        /// <summary>
        /// Was an Interpolated In Field Referencing (IIFR) correction applied to the azimuth value? Values are "true" (or "1") and "false" (or "0"). Interpolated In Field Referencing measures the diurnal Earth magnetic field variations resulting from electrical currents in the ionosphere and effects of magnetic storms hitting the Earth. It increases again the accuracy of the magnetic azimuth measurement.
        /// </summary>
		[Description("Was an Interpolated In Field Referencing (IIFR) correction applied to the azimuth value?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). Interpolated In Field Referencing measures the diurnal Earth magnetic field variations resulting from electrical  currents in the ionosphere and effects of magnetic storms hitting the Earth. It increases again the accuracy  of the magnetic azimuth measurement.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("interpolatedInfieldRefCorUsed")]
        public bool? InterpolatedInfieldRefCorUsed {
            get {
                return interpolatedInfieldRefCorUsedField;
            } 
            set {
                interpolatedInfieldRefCorUsedField = value;
                 this.InterpolatedInfieldRefCorUsedSpecified = true;
                NotifyPropertyChanged("InterpolatedInfieldRefCorUsed");
            }
        }

        private bool? interpolatedInfieldRefCorUsedField; 

        /// <summary>
        /// interpolatedInfieldRefCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InterpolatedInfieldRefCorUsedSpecified {
            get {
                return interpolatedInfieldRefCorUsedSpecifiedField;
            } 
            set {
                interpolatedInfieldRefCorUsedSpecifiedField = value;
                NotifyPropertyChanged("InterpolatedInfieldRefCorUsedSpecified");
            }
        }

        private bool interpolatedInfieldRefCorUsedSpecifiedField; 

        /// <summary>
        /// Was an In Hole Referencing (IHR) correction applied to the inclination and/or azimuth values? Values are "true" (or "1") and "false" (or "0"). In-Hole Referencing essentially involves comparing gyro surveys to MWD surveys in a tangent section of a well. Once a small part of a tangent section has been drilled and surveyed using an MWD tool, then an open hole (OH) gyro is run. By comparing the Gyro surveys to the MWD surveys a correction can be calculated for the MWD. This correction is then assumed as valid for the rest of the tangent section allowing to have a near gyro accuracy for the whole section, therefore reducing the ellipse of uncertainty (EOU) size.
        /// </summary>
		[Description("Was an In Hole Referencing (IHR) correction applied to the inclination and/or azimuth values?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). In-Hole Referencing essentially involves comparing gyro surveys to MWD surveys in a tangent  section of a well. Once a small part of a tangent section has been drilled and surveyed using an  MWD tool, then an open hole (OH) gyro is run. By comparing the Gyro surveys to the MWD  surveys a correction can be calculated for the MWD. This correction is then assumed as valid  for the rest of the tangent section allowing to have a near gyro accuracy for the whole section,  therefore reducing the ellipse of uncertainty (EOU) size.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("inHoleRefCorUsed")]
        public bool? InHoleRefCorUsed {
            get {
                return inHoleRefCorUsedField;
            } 
            set {
                inHoleRefCorUsedField = value;
                 this.InHoleRefCorUsedSpecified = true;
                NotifyPropertyChanged("InHoleRefCorUsed");
            }
        }

        private bool? inHoleRefCorUsedField; 

        /// <summary>
        /// inHoleRefCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InHoleRefCorUsedSpecified {
            get {
                return inHoleRefCorUsedSpecifiedField;
            } 
            set {
                inHoleRefCorUsedSpecifiedField = value;
                NotifyPropertyChanged("InHoleRefCorUsedSpecified");
            }
        }

        private bool inHoleRefCorUsedSpecifiedField; 

        /// <summary>
        /// Was an Axial Magnetic Interference (AMI) correction applied to the azimuth value? Values are "true" (or "1") and "false" (or "0"). Most of the BHAs used to drill wells include an MWD tool. An MWD is a magnetic survey tool and as such suffer from magnetic interferences from a wide variety of sources. Magnetic interferences can be categorized into axial and radial type interferences. Axial interferences are mainly the result of magnetic poles from the drill string steel components located below and above the MWD tool. Radial interferences are numerous. Therefore, there is a risk that magXAxialCorUsed includes both Axial and radial corrections.
        /// </summary>
		[Description("Was an Axial Magnetic Interference (AMI) correction applied to the azimuth value?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). Most of the BHAs used to drill wells include an MWD tool. An MWD is a magnetic survey tool and as  such suffer from magnetic interferences from a wide variety of sources. Magnetic interferences can be  categorized into axial and radial type interferences.  Axial interferences are mainly the result of magnetic poles from the drill string steel components  located below and above the MWD tool. Radial interferences are numerous.  Therefore, there is a risk that magXAxialCorUsed includes both Axial and radial corrections.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("axialMagInterferenceCorUsed")]
        public bool? AxialMagInterferenceCorUsed {
            get {
                return axialMagInterferenceCorUsedField;
            } 
            set {
                axialMagInterferenceCorUsedField = value;
                 this.AxialMagInterferenceCorUsedSpecified = true;
                NotifyPropertyChanged("AxialMagInterferenceCorUsed");
            }
        }

        private bool? axialMagInterferenceCorUsedField; 

        /// <summary>
        /// axialMagInterferenceCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AxialMagInterferenceCorUsedSpecified {
            get {
                return axialMagInterferenceCorUsedSpecifiedField;
            } 
            set {
                axialMagInterferenceCorUsedSpecifiedField = value;
                NotifyPropertyChanged("AxialMagInterferenceCorUsedSpecified");
            }
        }

        private bool axialMagInterferenceCorUsedSpecifiedField; 

        /// <summary>
        /// WWas a Cosag Correction applied to the azimuth values? Values are "true" (or "1") and "false" (or "0"). The BHA Sag Correction is the same as the Sag Correction except it includes the horizontal misalignment (Cosag).
        /// </summary>
		[Description("WWas a Cosag Correction applied to the azimuth values?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). The BHA Sag Correction is the same as the Sag Correction except it includes the horizontal  misalignment (Cosag).")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("cosagCorUsed")]
        public bool? CosagCorUsed {
            get {
                return cosagCorUsedField;
            } 
            set {
                cosagCorUsedField = value;
                 this.CosagCorUsedSpecified = true;
                NotifyPropertyChanged("CosagCorUsed");
            }
        }

        private bool? cosagCorUsedField; 

        /// <summary>
        /// cosagCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CosagCorUsedSpecified {
            get {
                return cosagCorUsedSpecifiedField;
            } 
            set {
                cosagCorUsedSpecifiedField = value;
                NotifyPropertyChanged("CosagCorUsedSpecified");
            }
        }

        private bool cosagCorUsedSpecifiedField; 

        /// <summary>
        /// Was a correction applied to the survey due to a Multi-Station Analysis process? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Was a correction applied to the survey due to a  Multi-Station Analysis process?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("MSACorUsed")]
        public bool? MSACorUsed {
            get {
                return MSACorUsedField;
            } 
            set {
                MSACorUsedField = value;
                 this.MSACorUsedSpecified = true;
                NotifyPropertyChanged("MSACorUsed");
            }
        }

        private bool? MSACorUsedField; 

        /// <summary>
        /// MSACorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MSACorUsedSpecified {
            get {
                return MSACorUsedSpecifiedField;
            } 
            set {
                MSACorUsedSpecifiedField = value;
                NotifyPropertyChanged("MSACorUsedSpecified");
            }
        }

        private bool MSACorUsedSpecifiedField; 

        /// <summary>
        /// Gravitational field theoretical/reference value. 
        /// </summary>
		[Description("Gravitational field theoretical/reference value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "accelerationLinearMeasure")]
		[XmlElement("gravTotalFieldReference")]
        public AccelerationLinearMeasure GravTotalFieldReference {
            get {
                return gravTotalFieldReferenceField;
            } 
            set {
                gravTotalFieldReferenceField = value;
                NotifyPropertyChanged("GravTotalFieldReference");
            }
        }

        private AccelerationLinearMeasure gravTotalFieldReferenceField; 

        /// <summary>
        /// Geomagnetic field theoretical/reference value. 
        /// </summary>
		[Description("Geomagnetic field theoretical/reference value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magTotalFieldReference")]
        public MagneticInductionMeasure MagTotalFieldReference {
            get {
                return magTotalFieldReferenceField;
            } 
            set {
                magTotalFieldReferenceField = value;
                NotifyPropertyChanged("MagTotalFieldReference");
            }
        }

        private MagneticInductionMeasure magTotalFieldReferenceField; 

        /// <summary>
        /// Magnetic dip angle theoretical/reference value. 
        /// </summary>
		[Description("Magnetic dip angle theoretical/reference value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("magDipAngleReference")]
        public PlaneAngleMeasure MagDipAngleReference {
            get {
                return magDipAngleReferenceField;
            } 
            set {
                magDipAngleReferenceField = value;
                NotifyPropertyChanged("MagDipAngleReference");
            }
        }

        private PlaneAngleMeasure magDipAngleReferenceField; 

        /// <summary>
        /// Geomagnetic model used. 
        /// </summary>
		[StringLength(64)]
        [Description("Geomagnetic model used.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("magModelUsed")]
        public string MagModelUsed {
            get {
                return magModelUsedField;
            } 
            set {
                magModelUsedField = value;
                NotifyPropertyChanged("MagModelUsed");
            }
        }

        private string magModelUsedField; 

        /// <summary>
        /// Current valid interval for the geomagnetic model used. 
        /// </summary>
		[StringLength(64)]
        [Description("Current valid interval for the geomagnetic model used.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("magModelValid")]
        public string MagModelValid {
            get {
                return magModelValidField;
            } 
            set {
                magModelValidField = value;
                NotifyPropertyChanged("MagModelValid");
            }
        }

        private string magModelValidField; 

        /// <summary>
        /// Gravitational model used. 
        /// </summary>
		[StringLength(64)]
        [Description("Gravitational model used.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("geoModelUsed")]
        public string GeoModelUsed {
            get {
                return geoModelUsedField;
            } 
            set {
                geoModelUsedField = value;
                NotifyPropertyChanged("GeoModelUsed");
            }
        }

        private string geoModelUsedField; 

        /// <summary>
        /// Status of the station. 
        /// </summary>
		[Description("Status of the station.")]
        [EnergisticsDataTypeAttribute(DataType = "TrajStationStatus")]
		[XmlElement("statusTrajStation")]
        public TrajStationStatus? StatusTrajStation {
            get {
                return statusTrajStationField;
            } 
            set {
                statusTrajStationField = value;
                 this.StatusTrajStationSpecified = true;
                NotifyPropertyChanged("StatusTrajStation");
            }
        }

        private TrajStationStatus? statusTrajStationField; 

        /// <summary>
        /// statusTrajStationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusTrajStationSpecified {
            get {
                return statusTrajStationSpecifiedField;
            } 
            set {
                statusTrajStationSpecifiedField = value;
                NotifyPropertyChanged("StatusTrajStationSpecified");
            }
        }

        private bool statusTrajStationSpecifiedField; 

        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
		[Description("Applies only to measured magnetic stations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stnTrajRawData")]
		[XmlElement("rawData")]
        public StnTrajRawData RawData {
            get {
                return rawDataField;
            } 
            set {
                rawDataField = value;
                NotifyPropertyChanged("RawData");
            }
        }

        private StnTrajRawData rawDataField; 

        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
		[Description("Applies only to measured magnetic stations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stnTrajCorUsed")]
		[XmlElement("corUsed")]
        public StnTrajCorUsed CorUsed {
            get {
                return corUsedField;
            } 
            set {
                corUsedField = value;
                NotifyPropertyChanged("CorUsed");
            }
        }

        private StnTrajCorUsed corUsedField; 

        /// <summary>
        /// Applies only to measured magnetic stations. 
        /// </summary>
		[Description("Applies only to measured magnetic stations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stnTrajValid")]
		[XmlElement("valid")]
        public StnTrajValid Valid {
            get {
                return validField;
            } 
            set {
                validField = value;
                NotifyPropertyChanged("Valid");
            }
        }

        private StnTrajValid validField; 

        /// <summary>
        /// Covariance matrix for error model. 
        /// </summary>
		[Description("Covariance matrix for error model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stnTrajMatrixCov")]
		[XmlElement("matrixCov")]
        public StnTrajMatrixCov MatrixCov {
            get {
                return matrixCovField;
            } 
            set {
                matrixCovField = value;
                NotifyPropertyChanged("MatrixCov");
            }
        }

        private StnTrajMatrixCov matrixCovField; 

        /// <summary>
        /// The 2D coordinates of the item. Note that within the context of trajectory, the "original" coordinates are inherently local coordinates as defined above.
        /// </summary>
		[Description("The 2D coordinates of the item.  Note that within the context of trajectory, the \"original\" coordinates are inherently local coordinates as defined above.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_location")]
		[XmlElement("location")]
        public List<Location> Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         /// <summary>
         /// bool to indicate if Location has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LocationSpecified
         {
             get {
             if(locationField!=null)
                 return locationField.Count>0?true:false;
             else return false;
             }
         }
        private List<Location> locationField; 

        /// <summary>
        /// A pointer to the trajectoryStation from which this station was derived. The trajectoryStation may be in another wellbore.
        /// </summary>
		[Description("A pointer to the trajectoryStation from which this station was derived. The trajectoryStation may be in another wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_refWellboreTrajectoryStation")]
		[XmlElement("sourceStation")]
        public RefWellboreTrajectoryStation SourceStation {
            get {
                return sourceStationField;
            } 
            set {
                sourceStationField = value;
                NotifyPropertyChanged("SourceStation");
            }
        }

        private RefWellboreTrajectoryStation sourceStationField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Trajectory Station Raw Data
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajRawData", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Trajectory Station Raw Data")]
    public partial class StnTrajRawData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Uncorrected gravitational field strength measured in axial direction. 
        /// </summary>
		[Description("Uncorrected gravitational field strength measured in axial direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "accelerationLinearMeasure")]
		[XmlElement("gravAxialRaw")]
        public AccelerationLinearMeasure GravAxialRaw {
            get {
                return gravAxialRawField;
            } 
            set {
                gravAxialRawField = value;
                NotifyPropertyChanged("GravAxialRaw");
            }
        }

        private AccelerationLinearMeasure gravAxialRawField; 

        /// <summary>
        /// Uncorrected gravitational field strength measured in transverse direction. 
        /// </summary>
		[Description("Uncorrected gravitational field strength measured in transverse direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "accelerationLinearMeasure")]
		[XmlElement("gravTran1Raw")]
        public AccelerationLinearMeasure GravTran1Raw {
            get {
                return gravTran1RawField;
            } 
            set {
                gravTran1RawField = value;
                NotifyPropertyChanged("GravTran1Raw");
            }
        }

        private AccelerationLinearMeasure gravTran1RawField; 

        /// <summary>
        /// Uncorrected gravitational field strength measured in transverse direction, approximately normal to tran1. 
        /// </summary>
		[Description("Uncorrected gravitational field strength measured in transverse direction,  approximately normal to tran1.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "accelerationLinearMeasure")]
		[XmlElement("gravTran2Raw")]
        public AccelerationLinearMeasure GravTran2Raw {
            get {
                return gravTran2RawField;
            } 
            set {
                gravTran2RawField = value;
                NotifyPropertyChanged("GravTran2Raw");
            }
        }

        private AccelerationLinearMeasure gravTran2RawField; 

        /// <summary>
        /// Uncorrected magnetic field strength measured in axial direction. 
        /// </summary>
		[Description("Uncorrected magnetic field strength measured in axial direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magAxialRaw")]
        public MagneticInductionMeasure MagAxialRaw {
            get {
                return magAxialRawField;
            } 
            set {
                magAxialRawField = value;
                NotifyPropertyChanged("MagAxialRaw");
            }
        }

        private MagneticInductionMeasure magAxialRawField; 

        /// <summary>
        /// Uncorrected magnetic field strength measured in transverse direction. 
        /// </summary>
		[Description("Uncorrected magnetic field strength measured in transverse direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magTran1Raw")]
        public MagneticInductionMeasure MagTran1Raw {
            get {
                return magTran1RawField;
            } 
            set {
                magTran1RawField = value;
                NotifyPropertyChanged("MagTran1Raw");
            }
        }

        private MagneticInductionMeasure magTran1RawField; 

        /// <summary>
        /// Uncorrected magnetic field strength measured in transverse direction, approximately normal to tran1. 
        /// </summary>
		[Description("Uncorrected magnetic field strength measured in transverse direction,  approximately normal to tran1.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magTran2Raw")]
        public MagneticInductionMeasure MagTran2Raw {
            get {
                return magTran2RawField;
            } 
            set {
                magTran2RawField = value;
                NotifyPropertyChanged("MagTran2Raw");
            }
        }

        private MagneticInductionMeasure magTran2RawField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Trajectory Station Corrections Applied
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajCorUsed", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Trajectory Station Corrections Applied")]
    public partial class StnTrajCorUsed : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Calculated gravitational field strength correction. 
        /// </summary>
		[Description("Calculated gravitational field strength correction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "accelerationLinearMeasure")]
		[XmlElement("gravAxialAccelCor")]
        public AccelerationLinearMeasure GravAxialAccelCor {
            get {
                return gravAxialAccelCorField;
            } 
            set {
                gravAxialAccelCorField = value;
                NotifyPropertyChanged("GravAxialAccelCor");
            }
        }

        private AccelerationLinearMeasure gravAxialAccelCorField; 

        /// <summary>
        /// The correction applied to a cross-axial (direction 1) component of the Earths gravitational field.
        /// </summary>
		[Description("The correction applied to a cross-axial (direction 1) component  of the Earths gravitational field.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "accelerationLinearMeasure")]
		[XmlElement("gravTran1AccelCor")]
        public AccelerationLinearMeasure GravTran1AccelCor {
            get {
                return gravTran1AccelCorField;
            } 
            set {
                gravTran1AccelCorField = value;
                NotifyPropertyChanged("GravTran1AccelCor");
            }
        }

        private AccelerationLinearMeasure gravTran1AccelCorField; 

        /// <summary>
        /// The correction applied to a cross-axial (direction 2) component of the Earths gravitational field.
        /// </summary>
		[Description("The correction applied to a cross-axial (direction 2) component  of the Earths gravitational field.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "accelerationLinearMeasure")]
		[XmlElement("gravTran2AccelCor")]
        public AccelerationLinearMeasure GravTran2AccelCor {
            get {
                return gravTran2AccelCorField;
            } 
            set {
                gravTran2AccelCorField = value;
                NotifyPropertyChanged("GravTran2AccelCor");
            }
        }

        private AccelerationLinearMeasure gravTran2AccelCorField; 

        /// <summary>
        /// Axial magnetic drillstring correction. 
        /// </summary>
		[Description("Axial magnetic drillstring correction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magAxialDrlstrCor")]
        public MagneticInductionMeasure MagAxialDrlstrCor {
            get {
                return magAxialDrlstrCorField;
            } 
            set {
                magAxialDrlstrCorField = value;
                NotifyPropertyChanged("MagAxialDrlstrCor");
            }
        }

        private MagneticInductionMeasure magAxialDrlstrCorField; 

        /// <summary>
        /// Cross-axial magnetic correction. 
        /// </summary>
		[Description("Cross-axial magnetic correction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magTran1DrlstrCor")]
        public MagneticInductionMeasure MagTran1DrlstrCor {
            get {
                return magTran1DrlstrCorField;
            } 
            set {
                magTran1DrlstrCorField = value;
                NotifyPropertyChanged("MagTran1DrlstrCor");
            }
        }

        private MagneticInductionMeasure magTran1DrlstrCorField; 

        /// <summary>
        /// Cross-axial magnetic correction. 
        /// </summary>
		[Description("Cross-axial magnetic correction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magTran2DrlstrCor")]
        public MagneticInductionMeasure MagTran2DrlstrCor {
            get {
                return magTran2DrlstrCorField;
            } 
            set {
                magTran2DrlstrCorField = value;
                NotifyPropertyChanged("MagTran2DrlstrCor");
            }
        }

        private MagneticInductionMeasure magTran2DrlstrCorField; 

        /// <summary>
        /// Cross-axial (direction 1) magnetic correction due to multi-station analysis process.
        /// </summary>
		[Description("Cross-axial (direction 1) magnetic correction due to multi-station analysis process.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magTran1MSACor")]
        public MagneticInductionMeasure MagTran1MSACor {
            get {
                return magTran1MSACorField;
            } 
            set {
                magTran1MSACorField = value;
                NotifyPropertyChanged("MagTran1MSACor");
            }
        }

        private MagneticInductionMeasure magTran1MSACorField; 

        /// <summary>
        /// Cross-axial (direction 2) magnetic correction due to multi-station analysis process.
        /// </summary>
		[Description("Cross-axial (direction 2) magnetic correction due to multi-station analysis process.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magTran2MSACor")]
        public MagneticInductionMeasure MagTran2MSACor {
            get {
                return magTran2MSACorField;
            } 
            set {
                magTran2MSACorField = value;
                NotifyPropertyChanged("MagTran2MSACor");
            }
        }

        private MagneticInductionMeasure magTran2MSACorField; 

        /// <summary>
        /// Axial magnetic correction due to multi-station analysis process.
        /// </summary>
		[Description("Axial magnetic correction due to multi-station analysis process.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magAxialMSACor")]
        public MagneticInductionMeasure MagAxialMSACor {
            get {
                return magAxialMSACorField;
            } 
            set {
                magAxialMSACorField = value;
                NotifyPropertyChanged("MagAxialMSACor");
            }
        }

        private MagneticInductionMeasure magAxialMSACorField; 

        /// <summary>
        /// Calculated sag correction to inclination. 
        /// </summary>
		[Description("Calculated sag correction to inclination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("sagIncCor")]
        public PlaneAngleMeasure SagIncCor {
            get {
                return sagIncCorField;
            } 
            set {
                sagIncCorField = value;
                NotifyPropertyChanged("SagIncCor");
            }
        }

        private PlaneAngleMeasure sagIncCorField; 

        /// <summary>
        /// Calculated cosag correction to azimuth.
        /// </summary>
		[Description("Calculated cosag correction to azimuth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("sagAziCor")]
        public PlaneAngleMeasure SagAziCor {
            get {
                return sagAziCorField;
            } 
            set {
                sagAziCorField = value;
                NotifyPropertyChanged("SagAziCor");
            }
        }

        private PlaneAngleMeasure sagAziCorField; 

        /// <summary>
        /// Magnetic declination used to correct a Magnetic North referenced azimuth to a True North azimuth. Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.
        /// </summary>
		[Description("Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("stnMagDeclUsed")]
        public PlaneAngleMeasure StnMagDeclUsed {
            get {
                return stnMagDeclUsedField;
            } 
            set {
                stnMagDeclUsedField = value;
                NotifyPropertyChanged("StnMagDeclUsed");
            }
        }

        private PlaneAngleMeasure stnMagDeclUsedField; 

        /// <summary>
        /// DEPRECATED - use stnGridConUsed. Grid Correction (Meridian convergence). The angle between True North and Grid North. Grid Correction is positive when True North is west of Grid North. The correction is added to the raw observation, thus yielding a reduced or corrected observation that can go into the subsequent calculations.
        /// </summary>
		[Description("DEPRECATED - use stnGridConUsed. Grid Correction (Meridian convergence). The angle between  True North and Grid North. Grid Correction is positive when True North  is west of Grid North. The correction is added to the raw observation,  thus yielding a reduced or corrected observation that can go into  the subsequent calculations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("stnGridCorUsed")]
        public PlaneAngleMeasure StnGridCorUsed {
            get {
                return stnGridCorUsedField;
            } 
            set {
                stnGridCorUsedField = value;
                NotifyPropertyChanged("StnGridCorUsed");
            }
        }

        private PlaneAngleMeasure stnGridCorUsedField; 

        /// <summary>
        /// Magnetic declination used to correct a Magnetic North referenced azimuth to a True North azimuth. Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.
        /// </summary>
		[Description("Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("stnGridConUsed")]
        public PlaneAngleMeasure StnGridConUsed {
            get {
                return stnGridConUsedField;
            } 
            set {
                stnGridConUsedField = value;
                NotifyPropertyChanged("StnGridConUsed");
            }
        }

        private PlaneAngleMeasure stnGridConUsedField; 

        /// <summary>
        /// Offset relative to bit. 
        /// </summary>
		[Description("Offset relative to bit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dirSensorOffset")]
        public LengthMeasure DirSensorOffset {
            get {
                return dirSensorOffsetField;
            } 
            set {
                dirSensorOffsetField = value;
                NotifyPropertyChanged("DirSensorOffset");
            }
        }

        private LengthMeasure dirSensorOffsetField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Validation Information for Survey
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajValid", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Validation Information for Survey")]
    public partial class StnTrajValid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Calculated total intensity of the geomagnetic field as sum of BGGM, IFR and local field. 
        /// </summary>
		[Description("Calculated total intensity of the geomagnetic field as sum of BGGM,  IFR and local field.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "magneticInductionMeasure")]
		[XmlElement("magTotalFieldCalc")]
        public MagneticInductionMeasure MagTotalFieldCalc {
            get {
                return magTotalFieldCalcField;
            } 
            set {
                magTotalFieldCalcField = value;
                NotifyPropertyChanged("MagTotalFieldCalc");
            }
        }

        private MagneticInductionMeasure magTotalFieldCalcField; 

        /// <summary>
        /// Calculated magnetic dip (inclination), the angle between the horizontal and the geomagnetic field (positive down, res .001). 
        /// </summary>
		[Description("Calculated magnetic dip (inclination), the angle between the horizontal  and the geomagnetic field (positive down, res .001).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("magDipAngleCalc")]
        public PlaneAngleMeasure MagDipAngleCalc {
            get {
                return magDipAngleCalcField;
            } 
            set {
                magDipAngleCalcField = value;
                NotifyPropertyChanged("MagDipAngleCalc");
            }
        }

        private PlaneAngleMeasure magDipAngleCalcField; 

        /// <summary>
        /// Calculated total gravitational field. 
        /// </summary>
		[Description("Calculated total gravitational field.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "accelerationLinearMeasure")]
		[XmlElement("gravTotalFieldCalc")]
        public AccelerationLinearMeasure GravTotalFieldCalc {
            get {
                return gravTotalFieldCalcField;
            } 
            set {
                gravTotalFieldCalcField = value;
                NotifyPropertyChanged("GravTotalFieldCalc");
            }
        }

        private AccelerationLinearMeasure gravTotalFieldCalcField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Validation Information for Covariance Matrix
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stnTrajMatrixCov", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Validation Information for Covariance Matrix")]
    public partial class StnTrajMatrixCov : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Covariance north north. 
        /// </summary>
		[Description("Covariance north north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaMeasure")]
		[XmlElement("varianceNN")]
        public AreaMeasure VarianceNN {
            get {
                return varianceNNField;
            } 
            set {
                varianceNNField = value;
                NotifyPropertyChanged("VarianceNN");
            }
        }

        private AreaMeasure varianceNNField; 

        /// <summary>
        /// Crossvariance north east. 
        /// </summary>
		[Description("Crossvariance north east.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaMeasure")]
		[XmlElement("varianceNE")]
        public AreaMeasure VarianceNE {
            get {
                return varianceNEField;
            } 
            set {
                varianceNEField = value;
                NotifyPropertyChanged("VarianceNE");
            }
        }

        private AreaMeasure varianceNEField; 

        /// <summary>
        /// Crossvariance north vertical. 
        /// </summary>
		[Description("Crossvariance north vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaMeasure")]
		[XmlElement("varianceNVert")]
        public AreaMeasure VarianceNVert {
            get {
                return varianceNVertField;
            } 
            set {
                varianceNVertField = value;
                NotifyPropertyChanged("VarianceNVert");
            }
        }

        private AreaMeasure varianceNVertField; 

        /// <summary>
        /// Covariance east east. 
        /// </summary>
		[Description("Covariance east east.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaMeasure")]
		[XmlElement("varianceEE")]
        public AreaMeasure VarianceEE {
            get {
                return varianceEEField;
            } 
            set {
                varianceEEField = value;
                NotifyPropertyChanged("VarianceEE");
            }
        }

        private AreaMeasure varianceEEField; 

        /// <summary>
        /// Crossvariance east vertical. 
        /// </summary>
		[Description("Crossvariance east vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaMeasure")]
		[XmlElement("varianceEVert")]
        public AreaMeasure VarianceEVert {
            get {
                return varianceEVertField;
            } 
            set {
                varianceEVertField = value;
                NotifyPropertyChanged("VarianceEVert");
            }
        }

        private AreaMeasure varianceEVertField; 

        /// <summary>
        /// Covariance vertical vertical. 
        /// </summary>
		[Description("Covariance vertical vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaMeasure")]
		[XmlElement("varianceVertVert")]
        public AreaMeasure VarianceVertVert {
            get {
                return varianceVertVertField;
            } 
            set {
                varianceVertVertField = value;
                NotifyPropertyChanged("VarianceVertVert");
            }
        }

        private AreaMeasure varianceVertVertField; 

        /// <summary>
        /// Bias north. 
        /// </summary>
		[Description("Bias north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("biasN")]
        public LengthMeasure BiasN {
            get {
                return biasNField;
            } 
            set {
                biasNField = value;
                NotifyPropertyChanged("BiasN");
            }
        }

        private LengthMeasure biasNField; 

        /// <summary>
        /// Bias east. 
        /// </summary>
		[Description("Bias east.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("biasE")]
        public LengthMeasure BiasE {
            get {
                return biasEField;
            } 
            set {
                biasEField = value;
                NotifyPropertyChanged("BiasE");
            }
        }

        private LengthMeasure biasEField; 

        /// <summary>
        /// Bias vertical. The coordinate system is set up in a right-handed configuration which makes the vertical direction increasing (i.e., positive) downwards.
        /// </summary>
		[Description("Bias vertical. The coordinate system is set up in a right-handed  configuration which makes the vertical direction increasing (i.e., positive) downwards.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("biasVert")]
        public LengthMeasure BiasVert {
            get {
                return biasVertField;
            } 
            set {
                biasVertField = value;
                NotifyPropertyChanged("BiasVert");
            }
        }

        private LengthMeasure biasVertField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_refWellboreTrajectoryStation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellboreTrajectoryStation", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_refWellboreTrajectoryStation xsd type.")]
    public partial class RefWellboreTrajectoryStation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the trajectoryStation within the parent trajectory. This is a special case where we only use a uid for the pointer. The natural identity of a station is its physical characteristics (e.g., md).
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A pointer to the trajectoryStation within the parent trajectory. This is a special case where we only use a uid for the pointer. The natural identity of a station is its physical characteristics (e.g., md).")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("stationReference")]
        public string StationReference {
            get {
                return stationReferenceField;
            } 
            set {
                stationReferenceField = value;
                NotifyPropertyChanged("StationReference");
            }
        }

        private string stationReferenceField; 

        /// <summary>
        /// A pointer to the trajectory within the parent wellbore. This trajectory contains the trajectoryStation.
        /// </summary>
		[Required]
        [Description("A pointer to the trajectory within the parent wellbore. This trajectory contains the trajectoryStation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("trajectoryParent")]
        public RefNameString TrajectoryParent {
            get {
                return trajectoryParentField;
            } 
            set {
                trajectoryParentField = value;
                NotifyPropertyChanged("TrajectoryParent");
            }
        }

        private RefNameString trajectoryParentField; 

        /// <summary>
        /// A pointer to the wellbore that contains the trajectory. This is not needed unless the trajectory is outside the context of a common parent wellbore.
        /// </summary>
		[Description("A pointer to the wellbore that contains the trajectory. This is not needed unless the trajectory is outside the  context of a common parent wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellboreParent")]
        public RefNameString WellboreParent {
            get {
                return wellboreParentField;
            } 
            set {
                wellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private RefNameString wellboreParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Describes what survey measurement or value the error term applies to.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaErrorCoefficient", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Describes what survey measurement or value the error term applies to.")]
    public partial class IscwsaErrorCoefficient : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Measured horizontal azimuth.
        /// </summary>
        [XmlElement("azi")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
        public string Azi {
            get {
                return aziField;
            } 
            set {
                if (value != null && DepthSpecified) throw new Exception("Cannot set property Azi when property Depth is already set");
                if (value != null && IncSpecified) throw new Exception("Cannot set property Azi when property Inc is already set");
                if (value != null && TvdSpecified) throw new Exception("Cannot set property Azi when property Tvd is already set");
                aziField = value;
                AziSpecified = (value!=null);
                NotifyPropertyChanged("Azi");
            }
        }

        private string aziField; 
        private bool aziSpecified = false; 

        /// <summary>
        /// bool to indicate if Azi has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool AziSpecified
        {
            get {
                return aziSpecified;
            }
            set {
                aziSpecified= value;
            }
        }

        /// <summary>
        /// Measured deviation from vertical.
        /// </summary>
        [XmlElement("inc")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
        public string Inc {
            get {
                return incField;
            } 
            set {
                if (value != null && AziSpecified) throw new Exception("Cannot set property Inc when property Azi is already set");
                if (value != null && DepthSpecified) throw new Exception("Cannot set property Inc when property Depth is already set");
                if (value != null && TvdSpecified) throw new Exception("Cannot set property Inc when property Tvd is already set");
                incField = value;
                IncSpecified = (value!=null);
                NotifyPropertyChanged("Inc");
            }
        }

        private string incField; 
        private bool incSpecified = false; 

        /// <summary>
        /// bool to indicate if Inc has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool IncSpecified
        {
            get {
                return incSpecified;
            }
            set {
                incSpecified= value;
            }
        }

        /// <summary>
        /// Measured depth along the wellbore.
        /// </summary>
        [XmlElement("depth")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
        public string Depth {
            get {
                return depthField;
            } 
            set {
                if (value != null && AziSpecified) throw new Exception("Cannot set property Depth when property Azi is already set");
                if (value != null && IncSpecified) throw new Exception("Cannot set property Depth when property Inc is already set");
                if (value != null && TvdSpecified) throw new Exception("Cannot set property Depth when property Tvd is already set");
                depthField = value;
                DepthSpecified = (value!=null);
                NotifyPropertyChanged("Depth");
            }
        }

        private string depthField; 
        private bool depthSpecified = false; 

        /// <summary>
        /// bool to indicate if Depth has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DepthSpecified
        {
            get {
                return depthSpecified;
            }
            set {
                depthSpecified= value;
            }
        }

        /// <summary>
        /// True Vertical Depth.
        /// </summary>
        [XmlElement("tvd")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
        public string Tvd {
            get {
                return tvdField;
            } 
            set {
                if (value != null && AziSpecified) throw new Exception("Cannot set property Tvd when property Azi is already set");
                if (value != null && DepthSpecified) throw new Exception("Cannot set property Tvd when property Depth is already set");
                if (value != null && IncSpecified) throw new Exception("Cannot set property Tvd when property Inc is already set");
                tvdField = value;
                TvdSpecified = (value!=null);
                NotifyPropertyChanged("Tvd");
            }
        }

        private string tvdField; 
        private bool tvdSpecified = false; 

        /// <summary>
        /// bool to indicate if Tvd has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TvdSpecified
        {
            get {
                return tvdSpecified;
            }
            set {
                tvdSpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType2? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType2? ItemElementNameField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Error Term Component Schema. The reference error terms that are included in error models via ErrorTermValues.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaErrorTerm", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Error Term Component Schema. The reference error terms that are included in error models via ErrorTermValues.")]
    public partial class IscwsaErrorTerm : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// This is the unique mnemonic for this term. For example, "ABIX" or "DECR".
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("This is the unique mnemonic for this term.  For example, \"ABIX\" or \"DECR\".")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The class of the error source.
        /// </summary>
		[Description("The class of the error source.")]
        [EnergisticsDataTypeAttribute(DataType = "ErrorTermSource")]
		[XmlElement("type")]
        public ErrorTermSource? Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private ErrorTermSource? typeField; 

        /// <summary>
        /// typeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return typeSpecifiedField;
            } 
            set {
                typeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool typeSpecifiedField; 

        /// <summary>
        /// The kind of quantity that the term represents. This constrains the unit that can be used for any errorTermValues.
        /// </summary>
		[Description("The kind of quantity that the term represents. This constrains the unit that can be used for any errorTermValues.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set {
                measureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass measureClassField; 

        /// <summary>
        /// measureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return measureClassSpecifiedField;
            } 
            set {
                measureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool measureClassSpecifiedField; 

        /// <summary>
        /// Human-readable name for the term, may be presented in application software. E.g., "MWD: X-Acceleromter Bias with Z-Axis Corr."
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human-readable name for the term, may be presented in  application software. E.g., \"MWD: X-Acceleromter Bias with Z-Axis Corr.\"")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("label")]
        public string Label {
            get {
                return labelField;
            } 
            set {
                labelField = value;
                NotifyPropertyChanged("Label");
            }
        }

        private string labelField; 

        /// <summary>
        /// Human-readable name for the term, may be presented in application software. E.g., "MWD: X-Acceleromter Bias with Z-Axis Corr."
        /// </summary>
		[StringLength(4000)]
        [Description("Human-readable name for the term, may be presented in  application software. E.g., \"MWD: X-Acceleromter Bias with Z-Axis Corr.\"")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Describes what measurement(s) the error variance(s) apply to.
        /// </summary>
		[Required]
        [Description("Describes what measurement(s) the error variance(s) apply to.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaErrorCoefficient")]
		[XmlElement("errorCoefficient")]
        public List<IscwsaErrorCoefficient> ErrorCoefficient {
            get {
                return errorCoefficientField;
            } 
            set {
                errorCoefficientField = value;
                NotifyPropertyChanged("ErrorCoefficient");
            }
        }

         /// <summary>
         /// bool to indicate if ErrorCoefficient has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ErrorCoefficientSpecified
         {
             get {
             if(errorCoefficientField!=null)
                 return errorCoefficientField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaErrorCoefficient> errorCoefficientField; 

        /// <summary>
        /// Operating mode that is valid for this error term. In the absence of this element assume Stationary.
        /// </summary>
		[Description("Operating mode that is valid for this error term. In the absence of this element assume Stationary.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SurveyToolOperatingMode")]
		[XmlElement("operatingMode")]
        public List<SurveyToolOperatingMode> OperatingMode {
            get {
                return operatingModeField;
            } 
            set {
                operatingModeField = value;
                NotifyPropertyChanged("OperatingMode");
            }
        }

         /// <summary>
         /// bool to indicate if OperatingMode has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OperatingModeSpecified
         {
             get {
             if(operatingModeField!=null)
                 return operatingModeField.Count>0?true:false;
             else return false;
             }
         }
        private List<SurveyToolOperatingMode> operatingModeField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A nomenclature constant.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaNomenclatureConstant", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A nomenclature constant.")]
    public partial class IscwsaNomenclatureConstant : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the constant.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the constant.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The value of the constant.
        /// </summary>
		[Required]
        [Description("The value of the constant.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("value")]
        public double? Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double? valueField; 

        /// <summary>
        /// The unit of measure of the constant. This value must match an acronym from the WITSML unit of measure dictionary.
        /// </summary>
		[Required]
        [StringLength(24)]
        [Description("The unit of measure of the constant. This value must match an acronym from the WITSML unit of measure dictionary.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
		[XmlElement("unit")]
        public string Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string unitField; 

        /// <summary>
        /// A textual description of the constant.
        /// </summary>
		[Required]
        [StringLength(4000)]
        [Description("A textual description of the constant.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A generic type which captures a name and a description of something. The semantics of the something is defined by the parent element.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaNameAndDescription", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A generic type which captures a name and a description of something. The semantics of the something is defined by the parent element.")]
    public partial class IscwsaNameAndDescription : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the item.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A textual description of the item.
        /// </summary>
		[Required]
        [StringLength(4000)]
        [Description("A textual description of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A nomenclature for the description of errror terms.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaNomenclature", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A nomenclature for the description of errror terms.")]
    public partial class IscwsaNomenclature : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Variable names used within a function. Each parameter name must be unique within the context of this nomenclature.
        /// </summary>
		[Description("Variable names used within a function. Each parameter name must be unique within the context of this nomenclature.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaNameAndDescription")]
		[XmlElement("parameter")]
        public List<IscwsaNameAndDescription> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(parameterField!=null)
                 return parameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaNameAndDescription> parameterField; 

        /// <summary>
        /// Mathmatical function used to generate error term values from parameters. Each function name must be unique within the context of this nomenclature.
        /// </summary>
		[Description("Mathmatical function used to generate error term values from parameters. Each function name must be unique within the context of this nomenclature.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaNameAndDescription")]
		[XmlElement("function")]
        public List<IscwsaNameAndDescription> Function {
            get {
                return functionField;
            } 
            set {
                functionField = value;
                NotifyPropertyChanged("Function");
            }
        }

         /// <summary>
         /// bool to indicate if Function has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FunctionSpecified
         {
             get {
             if(functionField!=null)
                 return functionField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaNameAndDescription> functionField; 

        /// <summary>
        /// Numerical constant used by functions. Each constant name must be unique within the context of this nomenclature.
        /// </summary>
		[Description("Numerical constant used by functions. Each constant name must be unique within the context of this nomenclature.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaNomenclatureConstant")]
		[XmlElement("constant")]
        public List<IscwsaNomenclatureConstant> Constant {
            get {
                return constantField;
            } 
            set {
                constantField = value;
                NotifyPropertyChanged("Constant");
            }
        }

         /// <summary>
         /// bool to indicate if Constant has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConstantSpecified
         {
             get {
             if(constantField!=null)
                 return constantField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaNomenclatureConstant> constantField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML error term set object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_toolErrorTermSet", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML error term set object.")]
    public partial class ToolErrorTermSet : Object, IWitsmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human-readable name for the set of terms.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human-readable name for the set of terms.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The definitive source for this set of error terms.
        /// </summary>
		[Description("The definitive source for this set of error terms.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaAuthorizationData")]
		[XmlElement("authorization")]
        public IscwsaAuthorizationData Authorization {
            get {
                return authorizationField;
            } 
            set {
                authorizationField = value;
                NotifyPropertyChanged("Authorization");
            }
        }

        private IscwsaAuthorizationData authorizationField; 

        /// <summary>
        /// Defines the nomenclature used in the error terms.
        /// </summary>
		[Description("Defines the nomenclature used in the error terms.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaNomenclature")]
		[XmlElement("nomenclature")]
        public IscwsaNomenclature Nomenclature {
            get {
                return nomenclatureField;
            } 
            set {
                nomenclatureField = value;
                NotifyPropertyChanged("Nomenclature");
            }
        }

        private IscwsaNomenclature nomenclatureField; 

        /// <summary>
        /// Defines an error term.
        /// </summary>
		[Description("Defines an error term.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaErrorTerm")]
		[XmlElement("errorTerm")]
        public List<IscwsaErrorTerm> ErrorTerm {
            get {
                return errorTermField;
            } 
            set {
                errorTermField = value;
                NotifyPropertyChanged("ErrorTerm");
            }
        }

         /// <summary>
         /// bool to indicate if ErrorTerm has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ErrorTermSpecified
         {
             get {
             if(errorTermField!=null)
                 return errorTermField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaErrorTerm> errorTermField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Authorization state of some entity.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaAuthorizationData", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Authorization state of some entity.")]
    public partial class IscwsaAuthorizationData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Person responsible for the information.
        /// </summary>
		[StringLength(64)]
        [Description("Person responsible for the information.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("author")]
        public string Author {
            get {
                return authorField;
            } 
            set {
                authorField = value;
                NotifyPropertyChanged("Author");
            }
        }

        private string authorField; 

        /// <summary>
        /// Source from which the information is derived.
        /// </summary>
		[StringLength(64)]
        [Description("Source from which the information is derived.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("source")]
        public string Source {
            get {
                return sourceField;
            } 
            set {
                sourceField = value;
                NotifyPropertyChanged("Source");
            }
        }

        private string sourceField; 

        /// <summary>
        /// Person or collective body responsible for authorizing the information.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Person or collective body responsible for authorizing the information.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("authority")]
        public string Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string authorityField; 

        /// <summary>
        /// Authorization state of the information.
        /// </summary>
		[Required]
        [Description("Authorization state of the information.")]
        [EnergisticsDataTypeAttribute(DataType = "AuthorizationStatus")]
		[XmlElement("status")]
        public AuthorizationStatus? Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        
        private bool StatusSpecifiedField = false;
        
        /// <summary>
        /// StatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return StatusSpecifiedField;
            } 
            set {
                StatusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }
        
        private AuthorizationStatus? statusField; 

        /// <summary>
        /// Version name or number.
        /// </summary>
		[StringLength(64)]
        [Description("Version name or number.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("version")]
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField; 

        /// <summary>
        /// A comment about the object. This should include information regarding the derivation of the information.
        /// </summary>
		[StringLength(4000)]
        [Description("A comment about the object.  This should include information regarding the derivation of the information.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The instantiation of an error term in an error model. The content of this element (a number) is the variance scaling factor of the term in the model. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaErrorTermValue", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("The instantiation of an error term in an error model. The content of this element (a number) is the variance scaling factor of the term in the model. ")]
    public partial class IscwsaErrorTermValue : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the errorTerm represented by this value. This term must exist in the toolErrorTermSet referenced by the parent of this node. The same term may only be referenced once in the model.
        /// </summary>
		[Required]
        [Description("A pointer to the errorTerm represented by this value. This term must exist in the toolErrorTermSet referenced by the parent of this node. The same term may only be referenced once in the model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("term")]
        public RefNameString Term {
            get {
                return termField;
            } 
            set {
                termField = value;
                NotifyPropertyChanged("Term");
            }
        }

        private RefNameString termField; 

        /// <summary>
        /// This is the propagation mode for this term in this model.
        /// </summary>
		[Required]
        [Description("This is the propagation mode for this term in this model.")]
        [EnergisticsDataTypeAttribute(DataType = "ErrorPropagationMode")]
		[XmlElement("prop")]
        public ErrorPropagationMode? Prop {
            get {
                return propField;
            } 
            set {
                propField = value;
                 this.PropSpecified = true;
                NotifyPropertyChanged("Prop");
            }
        }

        
        private bool PropSpecifiedField = false;
        
        /// <summary>
        /// PropSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PropSpecified {
            get {
                return PropSpecifiedField;
            } 
            set {
                PropSpecifiedField = value;
                NotifyPropertyChanged("PropSpecified");
            }
        }
        
        private ErrorPropagationMode? propField; 

        /// <summary>
        /// The mean or expected value of the variance.
        /// </summary>
		[Description("The mean or expected value of the variance.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("bias")]
        public double? Bias {
            get {
                return biasField;
            } 
            set {
                biasField = value;
                 this.BiasSpecified = true;
                NotifyPropertyChanged("Bias");
            }
        }

        private double? biasField; 

        /// <summary>
        /// biasSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BiasSpecified {
            get {
                return biasSpecifiedField;
            } 
            set {
                biasSpecifiedField = value;
                NotifyPropertyChanged("BiasSpecified");
            }
        }

        private bool biasSpecifiedField; 

        /// <summary>
        /// The value of the error term in this model. The unit of measure must be in the set allowed by the measure class of the referenced error term.
        /// </summary>
		[Required]
        [Description("The value of the error term in this model. The unit of measure must be in the set allowed by the  measure class of the referenced error term.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measureOrQuantity")]
		[XmlElement("value")]
        public MeasureOrQuantity Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private MeasureOrQuantity valueField; 

        /// <summary>
        /// A textual comment about this error term value.
        /// </summary>
		[StringLength(4000)]
        [Description("A textual comment about this error term value.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Various parameters controlling the generation of the survey variance.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaModelParameters", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Various parameters controlling the generation of the survey variance.")]
    public partial class IscwsaModelParameters : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Choice of mathmatical modelling of misalignment.
        /// </summary>
		[Required]
        [Description("Choice of mathmatical modelling of misalignment.")]
        [EnergisticsDataTypeAttribute(DataType = "ErrorModelMisalignmentMode")]
		[XmlElement("misalignmentMode")]
        public ErrorModelMisalignmentMode? MisalignmentMode {
            get {
                return misalignmentModeField;
            } 
            set {
                misalignmentModeField = value;
                 this.MisalignmentModeSpecified = true;
                NotifyPropertyChanged("MisalignmentMode");
            }
        }

        
        private bool MisalignmentModeSpecifiedField = false;
        
        /// <summary>
        /// MisalignmentModeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MisalignmentModeSpecified {
            get {
                return MisalignmentModeSpecifiedField;
            } 
            set {
                MisalignmentModeSpecifiedField = value;
                NotifyPropertyChanged("MisalignmentModeSpecified");
            }
        }
        
        private ErrorModelMisalignmentMode? misalignmentModeField; 

        /// <summary>
        /// Inclination at which gyro initialization occurs.
        /// </summary>
		[Description("Inclination at which gyro initialization occurs.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("gyroInitialization")]
        public PlaneAngleMeasure GyroInitialization {
            get {
                return gyroInitializationField;
            } 
            set {
                gyroInitializationField = value;
                NotifyPropertyChanged("GyroInitialization");
            }
        }

        private PlaneAngleMeasure gyroInitializationField; 

        /// <summary>
        /// Maximum length of continuous survey before re-initialisation.
        /// </summary>
		[Description("Maximum length of continuous survey before re-initialisation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("gyroReinitializationDistance")]
        public LengthMeasure GyroReinitializationDistance {
            get {
                return gyroReinitializationDistanceField;
            } 
            set {
                gyroReinitializationDistanceField = value;
                NotifyPropertyChanged("GyroReinitializationDistance");
            }
        }

        private LengthMeasure gyroReinitializationDistanceField; 

        /// <summary>
        /// True if the survey tool is rotated at inclinations greater than 90 degrees.
        /// </summary>
		[Description("True if the survey tool is rotated at inclinations greater than 90 degrees.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("switching")]
        public bool? Switching {
            get {
                return switchingField;
            } 
            set {
                switchingField = value;
                 this.SwitchingSpecified = true;
                NotifyPropertyChanged("Switching");
            }
        }

        private bool? switchingField; 

        /// <summary>
        /// switchingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SwitchingSpecified {
            get {
                return switchingSpecifiedField;
            } 
            set {
                switchingSpecifiedField = value;
                NotifyPropertyChanged("SwitchingSpecified");
            }
        }

        private bool switchingSpecifiedField; 

        /// <summary>
        /// Factor applied to Random Noise error terms depending on mode of gyro initialisation. Values must be greater than zero and less than or equal to 1.
        /// </summary>
		[Description("Factor applied to Random Noise error terms depending on mode of gyro initialisation. Values must be greater than zero and less than or equal to 1.")]
        [EnergisticsDataTypeAttribute(DataType = "gtZeroAndLeOne")]
		[XmlElement("noiseReductionFactor")]
        public double? NoiseReductionFactor {
            get {
                return noiseReductionFactorField;
            } 
            set {
                noiseReductionFactorField = value;
                 this.NoiseReductionFactorSpecified = true;
                NotifyPropertyChanged("NoiseReductionFactor");
            }
        }

        private double? noiseReductionFactorField; 

        /// <summary>
        /// noiseReductionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NoiseReductionFactorSpecified {
            get {
                return noiseReductionFactorSpecifiedField;
            } 
            set {
                noiseReductionFactorSpecifiedField = value;
                NotifyPropertyChanged("NoiseReductionFactorSpecified");
            }
        }

        private bool noiseReductionFactorSpecifiedField; 

        /// <summary>
        /// Speed at which the tool traverses the wellbore during continuous survey.
        /// </summary>
		[Description("Speed at which the tool traverses the wellbore during continuous survey.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("gyroRunningSpeed")]
        public VelocityMeasure GyroRunningSpeed {
            get {
                return gyroRunningSpeedField;
            } 
            set {
                gyroRunningSpeedField = value;
                NotifyPropertyChanged("GyroRunningSpeed");
            }
        }

        private VelocityMeasure gyroRunningSpeedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Inclination interval for a particular operating mode. Intervals may overlap to suppress mode flip-flopping, but should cover the entire valid range of the tool. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaSurveyToolOperatingInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Inclination interval for a particular operating mode. Intervals may overlap to suppress mode flip-flopping, but should cover the entire valid range of the tool. ")]
    public partial class IscwsaSurveyToolOperatingInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Tool operating mode over this interval.
        /// </summary>
		[Required]
        [Description("Tool operating mode over this interval.")]
        [EnergisticsDataTypeAttribute(DataType = "SurveyToolOperatingMode")]
		[XmlElement("mode")]
        public SurveyToolOperatingMode? Mode {
            get {
                return modeField;
            } 
            set {
                modeField = value;
                 this.ModeSpecified = true;
                NotifyPropertyChanged("Mode");
            }
        }

        
        private bool ModeSpecifiedField = false;
        
        /// <summary>
        /// ModeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ModeSpecified {
            get {
                return ModeSpecifiedField;
            } 
            set {
                ModeSpecifiedField = value;
                NotifyPropertyChanged("ModeSpecified");
            }
        }
        
        private SurveyToolOperatingMode? modeField; 

        /// <summary>
        /// Inclination at which mode commences.
        /// </summary>
		[Required]
        [Description("Inclination at which mode commences.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("start")]
        public PlaneAngleMeasure Start {
            get {
                return startField;
            } 
            set {
                startField = value;
                NotifyPropertyChanged("Start");
            }
        }

        private PlaneAngleMeasure startField; 

        /// <summary>
        /// Inclination at which mode terminates.
        /// </summary>
		[Required]
        [Description("Inclination at which mode terminates.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("end")]
        public PlaneAngleMeasure End {
            get {
                return endField;
            } 
            set {
                endField = value;
                NotifyPropertyChanged("End");
            }
        }

        private PlaneAngleMeasure endField; 

        /// <summary>
        /// Running speed for continuous surveys.
        /// </summary>
		[Description("Running speed for continuous surveys.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("speed")]
        public VelocityMeasure Speed {
            get {
                return speedField;
            } 
            set {
                speedField = value;
                NotifyPropertyChanged("Speed");
            }
        }

        private VelocityMeasure speedField; 

        /// <summary>
        /// Time between survey samples for continuous surveys.
        /// </summary>
		[Description("Time between survey samples for continuous surveys.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("sampleRate")]
        public TimeMeasure SampleRate {
            get {
                return sampleRateField;
            } 
            set {
                sampleRateField = value;
                NotifyPropertyChanged("SampleRate");
            }
        }

        private TimeMeasure sampleRateField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Describes the survey acquisition context in which an error model is valid as a sequence of constraints
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_iscwsaSurveyToolOperatingCondition", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Describes the survey acquisition context in which an error model is valid as a sequence of constraints")]
    public partial class IscwsaSurveyToolOperatingCondition : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A particular constraint.
        /// </summary>
		[StringLength(64)]
        [Description("A particular constraint.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("parameter")]
        public string Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private string parameterField; 

        /// <summary>
        /// The least value the constraint may take.
        /// </summary>
		[Description("The least value the constraint may take.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("min")]
        public GenericMeasure Min {
            get {
                return minField;
            } 
            set {
                minField = value;
                NotifyPropertyChanged("Min");
            }
        }

        private GenericMeasure minField; 

        /// <summary>
        /// The greatest value the constraint may take.
        /// </summary>
		[Description("The greatest value the constraint may take.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("max")]
        public GenericMeasure Max {
            get {
                return maxField;
            } 
            set {
                maxField = value;
                NotifyPropertyChanged("Max");
            }
        }

        private GenericMeasure maxField; 

        /// <summary>
        /// A fixed value that the constraint must take.
        /// </summary>
		[StringLength(32)]
        [Description("A fixed value that the constraint must take.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("value")]
        public string Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string valueField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Tool Error Model object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_toolErrorModel", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Tool Error Model object.")]
    public partial class ToolErrorModel : Object, IWitsmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human-readable name for the model.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human-readable name for the model.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The definitive source, authority, status and version of this model.
        /// </summary>
		[Description("The definitive source, authority, status and version of this model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaAuthorizationData")]
		[XmlElement("authorization")]
        public IscwsaAuthorizationData Authorization {
            get {
                return authorizationField;
            } 
            set {
                authorizationField = value;
                NotifyPropertyChanged("Authorization");
            }
        }

        private IscwsaAuthorizationData authorizationField; 

        /// <summary>
        /// The type of tool used for the measurements. This is the same list as defined for a trajectoryStation.
        /// </summary>
		[StringLength(50)]
        [Description("The type of tool used for the measurements.   This is the same list as defined for a trajectoryStation.")]
        [EnergisticsDataTypeAttribute(DataType = "TypeSurveyTool")]
		[XmlElement("typeSurveyTool")]
        public string TypeSurveyTool {
            get {
                return typeSurveyToolField;
            } 
            set {
                typeSurveyToolField = value;
                NotifyPropertyChanged("TypeSurveyTool");
            }
        }

        private string typeSurveyToolField; 

        /// <summary>
        /// The operating condition for this tool. If not specified then stationary should be assumed.
        /// </summary>
		[Description("The operating condition for this tool.  If not specified then stationary should be assumed.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaSurveyToolOperatingCondition")]
		[XmlElement("operatingCondition")]
        public List<IscwsaSurveyToolOperatingCondition> OperatingCondition {
            get {
                return operatingConditionField;
            } 
            set {
                operatingConditionField = value;
                NotifyPropertyChanged("OperatingCondition");
            }
        }

         /// <summary>
         /// bool to indicate if OperatingCondition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OperatingConditionSpecified
         {
             get {
             if(operatingConditionField!=null)
                 return operatingConditionField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaSurveyToolOperatingCondition> operatingConditionField; 

        /// <summary>
        /// The operating interval for this tool. If not specified then stationary should be assumed.
        /// </summary>
		[Description("The operating interval for this tool.  If not specified then stationary should be assumed.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaSurveyToolOperatingInterval")]
		[XmlElement("operatingInterval")]
        public List<IscwsaSurveyToolOperatingInterval> OperatingInterval {
            get {
                return operatingIntervalField;
            } 
            set {
                operatingIntervalField = value;
                NotifyPropertyChanged("OperatingInterval");
            }
        }

         /// <summary>
         /// bool to indicate if OperatingInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OperatingIntervalSpecified
         {
             get {
             if(operatingIntervalField!=null)
                 return operatingIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaSurveyToolOperatingInterval> operatingIntervalField; 

        /// <summary>
        /// Values related to the tool running conditions that influence the variance generation.
        /// </summary>
		[Description("Values related to the tool running conditions that influence  the variance generation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaModelParameters")]
		[XmlElement("modelParameters")]
        public IscwsaModelParameters ModelParameters {
            get {
                return modelParametersField;
            } 
            set {
                modelParametersField = value;
                NotifyPropertyChanged("ModelParameters");
            }
        }

        private IscwsaModelParameters modelParametersField; 

        /// <summary>
        /// Reference to the toolErrorTermSet object that contains the error terms used in this model.
        /// </summary>
		[Description("Reference to the toolErrorTermSet object that  contains the error terms used in this model.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("useErrorTermSet")]
        public RefNameString UseErrorTermSet {
            get {
                return useErrorTermSetField;
            } 
            set {
                useErrorTermSetField = value;
                NotifyPropertyChanged("UseErrorTermSet");
            }
        }

        private RefNameString useErrorTermSetField; 

        /// <summary>
        /// Value for an error term that is part of the model.
        /// </summary>
		[Required]
        [Description("Value for an error term that is part of the model.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_iscwsaErrorTermValue")]
		[XmlElement("errorTermValue")]
        public List<IscwsaErrorTermValue> ErrorTermValue {
            get {
                return errorTermValueField;
            } 
            set {
                errorTermValueField = value;
                NotifyPropertyChanged("ErrorTermValue");
            }
        }

         /// <summary>
         /// bool to indicate if ErrorTermValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ErrorTermValueSpecified
         {
             get {
             if(errorTermValueField!=null)
                 return errorTermValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaErrorTermValue> errorTermValueField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Element Types
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_targetSection", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Element Types")]
    public partial class TargetSection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Sequence number of section, 1,2,3. 
        /// </summary>
		[Required]
        [Description("Sequence number of section, 1,2,3.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("sectNumber")]
        public short? SectNumber {
            get {
                return sectNumberField;
            } 
            set {
                sectNumberField = value;
                NotifyPropertyChanged("SectNumber");
            }
        }

        private short? sectNumberField; 

        /// <summary>
        /// Section scope: Line or Arc. 
        /// </summary>
		[Required]
        [Description("Section scope: Line or Arc.")]
        [EnergisticsDataTypeAttribute(DataType = "TargetSectionScope")]
		[XmlElement("typeTargetSectionScope")]
        public TargetSectionScope? TypeTargetSectionScope {
            get {
                return typeTargetSectionScopeField;
            } 
            set {
                typeTargetSectionScopeField = value;
                 this.TypeTargetSectionScopeSpecified = true;
                NotifyPropertyChanged("TypeTargetSectionScope");
            }
        }

        
        private bool TypeTargetSectionScopeSpecifiedField = false;
        
        /// <summary>
        /// TypeTargetSectionScopeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeTargetSectionScopeSpecified {
            get {
                return TypeTargetSectionScopeSpecifiedField;
            } 
            set {
                TypeTargetSectionScopeSpecifiedField = value;
                NotifyPropertyChanged("TypeTargetSectionScopeSpecified");
            }
        }
        
        private TargetSectionScope? typeTargetSectionScopeField; 

        /// <summary>
        /// Length of straight line section or radius of arc for continuous curve section. 
        /// </summary>
		[Description("Length of straight line section or radius of arc for continuous curve section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenRadius")]
        public LengthMeasure LenRadius {
            get {
                return lenRadiusField;
            } 
            set {
                lenRadiusField = value;
                NotifyPropertyChanged("LenRadius");
            }
        }

        private LengthMeasure lenRadiusField; 

        /// <summary>
        /// Direction of straight line section or radius of arc for continuous curve section. 
        /// </summary>
		[Description("Direction of straight line section or radius of arc for continuous curve section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("angleArc")]
        public PlaneAngleMeasure AngleArc {
            get {
                return angleArcField;
            } 
            set {
                angleArcField = value;
                NotifyPropertyChanged("AngleArc");
            }
        }

        private PlaneAngleMeasure angleArcField; 

        /// <summary>
        /// Height of target above center point at the start of the section. In the case of an arc, the thickness above should vary linearly with the arc length. 
        /// </summary>
		[Description("Height of target above center point at the start of the section.   In the case of an arc, the thickness above should vary linearly with the arc length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("thickAbove")]
        public LengthMeasure ThickAbove {
            get {
                return thickAboveField;
            } 
            set {
                thickAboveField = value;
                NotifyPropertyChanged("ThickAbove");
            }
        }

        private LengthMeasure thickAboveField; 

        /// <summary>
        /// Depth of target below center point at the start of the section. In the case of an arc, the thickness below should vary linearly with the arc length. 
        /// </summary>
		[Description("Depth of target below center point at the start of the section.   In the case of an arc, the thickness below should vary linearly with the arc length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("thickBelow")]
        public LengthMeasure ThickBelow {
            get {
                return thickBelowField;
            } 
            set {
                thickBelowField = value;
                NotifyPropertyChanged("ThickBelow");
            }
        }

        private LengthMeasure thickBelowField; 

        /// <summary>
        /// The 2D coordinates of the item at the start of the section. This is redundant information and can be computed by starting at the section origin and applying the sequence of angleArcs and lenRadius. 
        /// </summary>
		[Description("The 2D coordinates of the item at the start of the section.   This is redundant information and can be computed by starting at the section origin and applying  the sequence of angleArcs and lenRadius.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_location")]
		[XmlElement("location")]
        public List<Location> Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         /// <summary>
         /// bool to indicate if Location has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LocationSpecified
         {
             get {
             if(locationField!=null)
                 return locationField.Count>0?true:false;
             else return false;
             }
         }
        private List<Location> locationField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Target object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_target", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Target object.")]
    public partial class Target : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the target. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the target.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the target. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the target.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A pointer to the parent target. This represents a relationship between a drillers and geological target. 
        /// </summary>
		[Description("A pointer to the parent target. This represents a relationship  between a drillers and geological target.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("parentTarget")]
        public RefNameString ParentTarget {
            get {
                return parentTargetField;
            } 
            set {
                parentTargetField = value;
                NotifyPropertyChanged("ParentTarget");
            }
        }

        private RefNameString parentTargetField; 

        /// <summary>
        /// Northing of target center point in map coordinates. 
        /// </summary>
		[Description("Northing of target center point in map coordinates.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispNsCenter")]
        public LengthMeasure DispNSCenter {
            get {
                return dispNsCenterField;
            } 
            set {
                dispNsCenterField = value;
                NotifyPropertyChanged("DispNSCenter");
            }
        }

        private LengthMeasure dispNsCenterField; 

        /// <summary>
        /// Easting of target center point in map coordinates. 
        /// </summary>
		[Description("Easting of target center point in map coordinates.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispEwCenter")]
        public LengthMeasure DispEWCenter {
            get {
                return dispEwCenterField;
            } 
            set {
                dispEwCenterField = value;
                NotifyPropertyChanged("DispEWCenter");
            }
        }

        private LengthMeasure dispEwCenterField; 

        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
		[Description("Vertical depth of the measurements.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// North-south offset of target intercept point from shape center. 
        /// </summary>
		[Description("North-south offset of target intercept point from shape center.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispNsOffset")]
        public LengthMeasure DispNSOffset {
            get {
                return dispNsOffsetField;
            } 
            set {
                dispNsOffsetField = value;
                NotifyPropertyChanged("DispNSOffset");
            }
        }

        private LengthMeasure dispNsOffsetField; 

        /// <summary>
        /// East-west offset of target intercept point from shape center. 
        /// </summary>
		[Description("East-west offset of target intercept point from shape center.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispEwOffset")]
        public LengthMeasure DispEWOffset {
            get {
                return dispEwOffsetField;
            } 
            set {
                dispEwOffsetField = value;
                NotifyPropertyChanged("DispEWOffset");
            }
        }

        private LengthMeasure dispEwOffsetField; 

        /// <summary>
        /// Height of target above center point. 
        /// </summary>
		[Description("Height of target above center point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("thickAbove")]
        public LengthMeasure ThickAbove {
            get {
                return thickAboveField;
            } 
            set {
                thickAboveField = value;
                NotifyPropertyChanged("ThickAbove");
            }
        }

        private LengthMeasure thickAboveField; 

        /// <summary>
        /// Depth of target below center point. 
        /// </summary>
		[Description("Depth of target below center point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("thickBelow")]
        public LengthMeasure ThickBelow {
            get {
                return thickBelowField;
            } 
            set {
                thickBelowField = value;
                NotifyPropertyChanged("ThickBelow");
            }
        }

        private LengthMeasure thickBelowField; 

        /// <summary>
        /// Angle of dip with respect to horizontal. 
        /// </summary>
		[Description("Angle of dip with respect to horizontal.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("dip")]
        public PlaneAngleMeasure Dip {
            get {
                return dipField;
            } 
            set {
                dipField = value;
                NotifyPropertyChanged("Dip");
            }
        }

        private PlaneAngleMeasure dipField; 

        /// <summary>
        /// Direction of dip with respect to north azimuth reference. 
        /// </summary>
		[Description("Direction of dip with respect to north azimuth reference.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("strike")]
        public PlaneAngleMeasure Strike {
            get {
                return strikeField;
            } 
            set {
                strikeField = value;
                NotifyPropertyChanged("Strike");
            }
        }

        private PlaneAngleMeasure strikeField; 

        /// <summary>
        /// Direction of target geometry with respect to north azimuth reference. 
        /// </summary>
		[Description("Direction of target geometry with respect to north azimuth reference.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("rotation")]
        public PlaneAngleMeasure Rotation {
            get {
                return rotationField;
            } 
            set {
                rotationField = value;
                NotifyPropertyChanged("Rotation");
            }
        }

        private PlaneAngleMeasure rotationField; 

        /// <summary>
        /// Distance from center to perimeter in rotation direction. This may be ignored depending on the value of typeTargetScope.
        /// </summary>
		[Description("Distance from center to perimeter in rotation direction.   This may be ignored depending on the value of typeTargetScope.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenMajorAxis")]
        public LengthMeasure LenMajorAxis {
            get {
                return lenMajorAxisField;
            } 
            set {
                lenMajorAxisField = value;
                NotifyPropertyChanged("LenMajorAxis");
            }
        }

        private LengthMeasure lenMajorAxisField; 

        /// <summary>
        /// Distance from center to perimeter at 90 deg to rotation direction. This may be ignored depending on the value of typeTargetScope. 
        /// </summary>
		[Description("Distance from center to perimeter at 90 deg to rotation direction.   This may be ignored depending on the value of typeTargetScope.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("widMinorAxis")]
        public LengthMeasure WidMinorAxis {
            get {
                return widMinorAxisField;
            } 
            set {
                widMinorAxisField = value;
                NotifyPropertyChanged("WidMinorAxis");
            }
        }

        private LengthMeasure widMinorAxisField; 

        /// <summary>
        /// The type of scope of the drilling target.
        /// </summary>
		[Description("The type of scope of the drilling target.")]
        [EnergisticsDataTypeAttribute(DataType = "TargetScope")]
		[XmlElement("typeTargetScope")]
        public TargetScope? TypeTargetScope {
            get {
                return typeTargetScopeField;
            } 
            set {
                typeTargetScopeField = value;
                 this.TypeTargetScopeSpecified = true;
                NotifyPropertyChanged("TypeTargetScope");
            }
        }

        private TargetScope? typeTargetScopeField; 

        /// <summary>
        /// typeTargetScopeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeTargetScopeSpecified {
            get {
                return typeTargetScopeSpecifiedField;
            } 
            set {
                typeTargetScopeSpecifiedField = value;
                NotifyPropertyChanged("TypeTargetScopeSpecified");
            }
        }

        private bool typeTargetScopeSpecifiedField; 

        /// <summary>
        /// Origin north-south used as starting point for sections, mandatory parameter when sections are used.. 
        /// </summary>
		[Description("Origin north-south used as starting point for sections, mandatory parameter when sections are used..")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispNsSectOrig")]
        public LengthMeasure DispNSSectOrig {
            get {
                return dispNsSectOrigField;
            } 
            set {
                dispNsSectOrigField = value;
                NotifyPropertyChanged("DispNSSectOrig");
            }
        }

        private LengthMeasure dispNsSectOrigField; 

        /// <summary>
        /// Origin east-west used as starting point for sections, mandatory parameter when sections are used. 
        /// </summary>
		[Description("Origin east-west used as starting point for sections, mandatory parameter when sections are used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispEwSectOrig")]
        public LengthMeasure DispEWSectOrig {
            get {
                return dispEwSectOrigField;
            } 
            set {
                dispEwSectOrigField = value;
                NotifyPropertyChanged("DispEWSectOrig");
            }
        }

        private LengthMeasure dispEwSectOrigField; 

        /// <summary>
        /// Specifies the definition of north. 
        /// </summary>
		[Description("Specifies the definition of north.")]
        [EnergisticsDataTypeAttribute(DataType = "AziRef")]
		[XmlElement("aziRef")]
        public AziRef? AziRef {
            get {
                return aziRefField;
            } 
            set {
                aziRefField = value;
                 this.AziRefSpecified = true;
                NotifyPropertyChanged("AziRef");
            }
        }

        private AziRef? aziRefField; 

        /// <summary>
        /// aziRefSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AziRefSpecified {
            get {
                return aziRefSpecifiedField;
            } 
            set {
                aziRefSpecifiedField = value;
                NotifyPropertyChanged("AziRefSpecified");
            }
        }

        private bool aziRefSpecifiedField; 

        /// <summary>
        /// Geological or drillers target. 
        /// </summary>
		[Description("Geological or drillers target.")]
        [EnergisticsDataTypeAttribute(DataType = "TargetCategory")]
		[XmlElement("catTarg")]
        public TargetCategory? CatTarg {
            get {
                return catTargField;
            } 
            set {
                catTargField = value;
                 this.CatTargSpecified = true;
                NotifyPropertyChanged("CatTarg");
            }
        }

        private TargetCategory? catTargField; 

        /// <summary>
        /// catTargSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CatTargSpecified {
            get {
                return catTargSpecifiedField;
            } 
            set {
                catTargSpecifiedField = value;
                NotifyPropertyChanged("CatTargSpecified");
            }
        }

        private bool catTargSpecifiedField; 

        /// <summary>
        /// The 2D coordinates of the item at the start of the section. The location object is mandatory for the first section starting point. 
        /// </summary>
		[Description("The 2D coordinates of the item at the start of the  section. The location object is mandatory for the first section starting point.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_location")]
		[XmlElement("location")]
        public List<Location> Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         /// <summary>
         /// bool to indicate if Location has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LocationSpecified
         {
             get {
             if(locationField!=null)
                 return locationField.Count>0?true:false;
             else return false;
             }
         }
        private List<Location> locationField; 

        /// <summary>
        /// Sections describing target. These may be ignored depending on the value of typeTargetScope. 
        /// </summary>
		[Description("Sections describing target. These may be ignored depending on the value of typeTargetScope.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_targetSection")]
		[XmlElement("targetSection")]
        public List<TargetSection> TargetSection {
            get {
                return targetSectionField;
            } 
            set {
                targetSectionField = value;
                NotifyPropertyChanged("TargetSection");
            }
        }

         /// <summary>
         /// bool to indicate if TargetSection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TargetSectionSpecified
         {
             get {
             if(targetSectionField!=null)
                 return targetSectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<TargetSection> targetSectionField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Survey Section Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_surveySection", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Survey Section Component Schema ")]
    public partial class SurveySection : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Order in which program sections will be executed / were executed. 
        /// </summary>
		[Required]
        [Description("Order in which program sections will be executed / were executed.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("sequence")]
        public short? Sequence {
            get {
                return sequenceField;
            } 
            set {
                sequenceField = value;
                NotifyPropertyChanged("Sequence");
            }
        }

        private short? sequenceField; 

        /// <summary>
        /// Name of survey program section. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of survey program section.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Hole measured depth at which the survey run will begin/began. 
        /// </summary>
		[Required]
        [Description("Hole measured depth at which the survey run will begin/began.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdStart")]
        public MeasuredDepthCoord MDStart {
            get {
                return mdStartField;
            } 
            set {
                mdStartField = value;
                NotifyPropertyChanged("MDStart");
            }
        }

        private MeasuredDepthCoord mdStartField; 

        /// <summary>
        /// Hole measured depth at which the survey run will end/ended. 
        /// </summary>
		[Required]
        [Description("Hole measured depth at which the survey run will end/ended.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdEnd")]
        public MeasuredDepthCoord MDEnd {
            get {
                return mdEndField;
            } 
            set {
                mdEndField = value;
                NotifyPropertyChanged("MDEnd");
            }
        }

        private MeasuredDepthCoord mdEndField; 

        /// <summary>
        /// Company who will run / has run sruvey tool. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Company who will run / has run sruvey tool.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameSurveyCompany")]
        public string NameSurveyCompany {
            get {
                return nameSurveyCompanyField;
            } 
            set {
                nameSurveyCompanyField = value;
                NotifyPropertyChanged("NameSurveyCompany");
            }
        }

        private string nameSurveyCompanyField; 

        /// <summary>
        /// Name of survey tool to be used / used for this section. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name of survey tool to be used / used for this section.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameTool")]
        public string NameTool {
            get {
                return nameToolField;
            } 
            set {
                nameToolField = value;
                NotifyPropertyChanged("NameTool");
            }
        }

        private string nameToolField; 

        /// <summary>
        /// Type of tool used. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Type of tool used.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("typeTool")]
        public string TypeTool {
            get {
                return typeToolField;
            } 
            set {
                typeToolField = value;
                NotifyPropertyChanged("TypeTool");
            }
        }

        private string typeToolField; 

        /// <summary>
        /// Error model used to calculate ellipses of uncertainty. 
        /// </summary>
		[StringLength(64)]
        [Description("Error model used to calculate ellipses of uncertainty.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("modelError")]
        public string ModelError {
            get {
                return modelErrorField;
            } 
            set {
                modelErrorField = value;
                NotifyPropertyChanged("ModelError");
            }
        }

        private string modelErrorField; 

        /// <summary>
        /// Normally true, higher index trajectory takes precedence over overlapping section of previous trajectory. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Normally true, higher index trajectory takes precedence over overlapping  section of previous trajectory.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("overwrite")]
        public bool? Overwrite {
            get {
                return overwriteField;
            } 
            set {
                overwriteField = value;
                 this.OverwriteSpecified = true;
                NotifyPropertyChanged("Overwrite");
            }
        }

        private bool? overwriteField; 

        /// <summary>
        /// overwriteSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OverwriteSpecified {
            get {
                return overwriteSpecifiedField;
            } 
            set {
                overwriteSpecifiedField = value;
                NotifyPropertyChanged("OverwriteSpecified");
            }
        }

        private bool overwriteSpecifiedField; 

        /// <summary>
        /// Maximum allowable depth frequency for survey stations for this survey run. 
        /// </summary>
		[Description("Maximum allowable depth frequency for survey stations for this survey run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("frequencyMx")]
        public LengthMeasure FrequencyMax {
            get {
                return frequencyMxField;
            } 
            set {
                frequencyMxField = value;
                NotifyPropertyChanged("FrequencyMax");
            }
        }

        private LengthMeasure frequencyMxField; 

        /// <summary>
        /// The item state for the data object. 
        /// </summary>
		[Description("The item state for the data object.")]
        [EnergisticsDataTypeAttribute(DataType = "ItemState")]
		[XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set {
                itemStateField = value;
                 this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ItemState? itemStateField; 

        /// <summary>
        /// itemStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemStateSpecified {
            get {
                return itemStateSpecifiedField;
            } 
            set {
                itemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private bool itemStateSpecifiedField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Survey Program object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_surveyProgram", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Survey Program object.")]
    public partial class SurveyProgram : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the survey program. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the survey program.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the survey program. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the survey program.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Survey version number, incremented every time the program is modified. 
        /// </summary>
		[Required]
        [Description("Survey version number, incremented every time the program is modified.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("surveyVer")]
        public short? SurveyVer {
            get {
                return surveyVerField;
            } 
            set {
                surveyVerField = value;
                NotifyPropertyChanged("SurveyVer");
            }
        }

        private short? surveyVerField; 

        /// <summary>
        /// Date and time trajectory program was created or edited. 
        /// </summary>
		[Description("Date and time trajectory program was created or edited.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimTrajProg")]
        public Timestamp? DateTimeTrajProg {
            get {
                return dTimTrajProgField;
            } 
            set {
                dTimTrajProgField = value;
                 this.DateTimeTrajProgSpecified = true;
                NotifyPropertyChanged("DateTimeTrajProg");
            }
        }

        private Timestamp? dTimTrajProgField; 

        /// <summary>
        /// dTimTrajProgSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeTrajProgSpecified {
            get {
                return dTimTrajProgSpecifiedField;
            } 
            set {
                dTimTrajProgSpecifiedField = value;
                NotifyPropertyChanged("DateTimeTrajProgSpecified");
            }
        }

        private bool dTimTrajProgSpecifiedField; 

        /// <summary>
        /// Name of engineer. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of engineer.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("engineer")]
        public string Engineer {
            get {
                return engineerField;
            } 
            set {
                engineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private string engineerField; 

        /// <summary>
        /// Is program a final or intermediate/preliminary? 
        /// </summary>
		[StringLength(16)]
        [Description("Is program a final or intermediate/preliminary?")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("final")]
        public string Final {
            get {
                return finalField;
            } 
            set {
                finalField = value;
                NotifyPropertyChanged("Final");
            }
        }

        private string finalField; 

        /// <summary>
        /// Survey section object. 
        /// </summary>
		[Description("Survey section object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_surveySection")]
		[XmlElement("surveySection")]
        public List<SurveySection> SurveySection {
            get {
                return surveySectionField;
            } 
            set {
                surveySectionField = value;
                NotifyPropertyChanged("SurveySection");
            }
        }

         /// <summary>
         /// bool to indicate if SurveySection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SurveySectionSpecified
         {
             get {
             if(surveySectionField!=null)
                 return surveySectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<SurveySection> surveySectionField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about a set of perforations. The assumption is that all perforations within a given set are created with the same device or method. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimPerforationSet", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information about a set of perforations. The assumption is that all perforations within a given set are created with the same device or method. ")]
    public partial class StimPerforationSet : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of perforation and/or how the perforation was created.
        /// </summary>
		[StringLength(32)]
        [Description("The type of perforation and/or how the perforation was created.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// Measured depth of the top perforation.
        /// </summary>
		[Description("Measured depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdPerforationsTop")]
        public MeasuredDepthCoord MDPerforationsTop {
            get {
                return mdPerforationsTopField;
            } 
            set {
                mdPerforationsTopField = value;
                NotifyPropertyChanged("MDPerforationsTop");
            }
        }

        private MeasuredDepthCoord mdPerforationsTopField; 

        /// <summary>
        /// Measured depth of the bottom perforation.
        /// </summary>
		[Description("Measured depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdPerforationsBottom")]
        public MeasuredDepthCoord MDPerforationsBottom {
            get {
                return mdPerforationsBottomField;
            } 
            set {
                mdPerforationsBottomField = value;
                NotifyPropertyChanged("MDPerforationsBottom");
            }
        }

        private MeasuredDepthCoord mdPerforationsBottomField; 

        /// <summary>
        /// True vertical depth of the top perforation.
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdPerforationsTop")]
        public WellVerticalDepthCoord TvdPerforationsTop {
            get {
                return tvdPerforationsTopField;
            } 
            set {
                tvdPerforationsTopField = value;
                NotifyPropertyChanged("TvdPerforationsTop");
            }
        }

        private WellVerticalDepthCoord tvdPerforationsTopField; 

        /// <summary>
        /// True vertical depth of the bottom perforation.
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdPerforationsBottom")]
        public WellVerticalDepthCoord TvdPerforationsBottom {
            get {
                return tvdPerforationsBottomField;
            } 
            set {
                tvdPerforationsBottomField = value;
                NotifyPropertyChanged("TvdPerforationsBottom");
            }
        }

        private WellVerticalDepthCoord tvdPerforationsBottomField; 

        /// <summary>
        /// The number of perforations in this interval.
        /// </summary>
		[Description("The number of perforations in this interval.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("perforationCount")]
        public short? PerforationCount {
            get {
                return perforationCountField;
            } 
            set {
                perforationCountField = value;
                 this.PerforationCountSpecified = true;
                NotifyPropertyChanged("PerforationCount");
            }
        }

        private short? perforationCountField; 

        /// <summary>
        /// perforationCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerforationCountSpecified {
            get {
                return perforationCountSpecifiedField;
            } 
            set {
                perforationCountSpecifiedField = value;
                NotifyPropertyChanged("PerforationCountSpecified");
            }
        }

        private bool perforationCountSpecifiedField; 

        /// <summary>
        /// The size of the perforations.
        /// </summary>
		[Description("The size of the perforations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("size")]
        public LengthMeasure Size {
            get {
                return sizeField;
            } 
            set {
                sizeField = value;
                NotifyPropertyChanged("Size");
            }
        }

        private LengthMeasure sizeField; 

        /// <summary>
        /// The number of perforation holes per length across the treatment interval. Used to describe but not limited to the configuration of perforating guns or the placement of perforations (holes, slots, openings ...) in the wellbore, and is often abbreviated to spf (shots per foot).
        /// </summary>
		[Description("The number of perforation holes per length across the treatment interval.  Used to describe but not limited to the configuration of perforating guns or the placement  of perforations (holes, slots, openings ...) in the wellbore, and is often  abbreviated to spf (shots per foot).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "perLengthMeasure")]
		[XmlElement("densityPerforation")]
        public PerLengthMeasure DensityPerforation {
            get {
                return densityPerforationField;
            } 
            set {
                densityPerforationField = value;
                NotifyPropertyChanged("DensityPerforation");
            }
        }

        private PerLengthMeasure densityPerforationField; 

        /// <summary>
        /// The radial distribution of successive perforations around the wellbore axis. Radial distribution is commonly available in 0, 180 120, 90 and 60 degree phasing.
        /// </summary>
		[Description("The radial distribution of successive perforations around the wellbore axis.  Radial distribution is commonly available in 0, 180 120, 90 and 60 degree phasing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("phasingPerforation")]
        public PlaneAngleMeasure PhasingPerforation {
            get {
                return phasingPerforationField;
            } 
            set {
                phasingPerforationField = value;
                NotifyPropertyChanged("PhasingPerforation");
            }
        }

        private PlaneAngleMeasure phasingPerforationField; 

        /// <summary>
        /// The friction factor of each perforation set.
        /// </summary>
		[Description("The friction factor of each perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("frictionFactor")]
        public double? FrictionFactor {
            get {
                return frictionFactorField;
            } 
            set {
                frictionFactorField = value;
                 this.FrictionFactorSpecified = true;
                NotifyPropertyChanged("FrictionFactor");
            }
        }

        private double? frictionFactorField; 

        /// <summary>
        /// frictionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FrictionFactorSpecified {
            get {
                return frictionFactorSpecifiedField;
            } 
            set {
                frictionFactorSpecifiedField = value;
                NotifyPropertyChanged("FrictionFactorSpecified");
            }
        }

        private bool frictionFactorSpecifiedField; 

        /// <summary>
        /// The friction pressure for the perforation set.
        /// </summary>
		[Description("The friction pressure for the perforation set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("frictionPres")]
        public PressureMeasure FrictionPres {
            get {
                return frictionPresField;
            } 
            set {
                frictionPresField = value;
                NotifyPropertyChanged("FrictionPres");
            }
        }

        private PressureMeasure frictionPresField; 

        /// <summary>
        /// A coefficient used in the equation for calculation of pressure drop across a perforation set.
        /// </summary>
		[Description("A coefficient used in the equation for calculation of pressure drop across a perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("dischargeCoefficient")]
        public double? DischargeCoefficient {
            get {
                return dischargeCoefficientField;
            } 
            set {
                dischargeCoefficientField = value;
                 this.DischargeCoefficientSpecified = true;
                NotifyPropertyChanged("DischargeCoefficient");
            }
        }

        private double? dischargeCoefficientField; 

        /// <summary>
        /// dischargeCoefficientSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DischargeCoefficientSpecified {
            get {
                return dischargeCoefficientSpecifiedField;
            } 
            set {
                dischargeCoefficientSpecifiedField = value;
                NotifyPropertyChanged("DischargeCoefficientSpecified");
            }
        }

        private bool dischargeCoefficientSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Reservoir Interval Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimReservoirInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Reservoir Interval Component Schema.")]
    public partial class StimReservoirInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Measured depth at top of interval.
        /// </summary>
		[Description("Measured depth at top of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdLithTop")]
        public MeasuredDepthCoord MDLithTop {
            get {
                return mdLithTopField;
            } 
            set {
                mdLithTopField = value;
                NotifyPropertyChanged("MDLithTop");
            }
        }

        private MeasuredDepthCoord mdLithTopField; 

        /// <summary>
        /// Measured depth at base of interval.
        /// </summary>
		[Description("Measured depth at base of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdLithBottom")]
        public MeasuredDepthCoord MDLithBottom {
            get {
                return mdLithBottomField;
            } 
            set {
                mdLithBottomField = value;
                NotifyPropertyChanged("MDLithBottom");
            }
        }

        private MeasuredDepthCoord mdLithBottomField; 

        /// <summary>
        /// Formation permeability, a measurement of the ability of a fluid to flow through a rock. Commonly measured in milliDarcys (1m2 = 0.000000000000986923 Darcy).
        /// </summary>
		[Description("Formation permeability, a measurement of the ability of a fluid to flow  through a rock. Commonly measured in milliDarcys (1m2 = 0.000000000000986923 Darcy).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "permeabilityRockMeasure")]
		[XmlElement("lithFormationPermeability")]
        public PermeabilityRockMeasure LithFormationPermeability {
            get {
                return lithFormationPermeabilityField;
            } 
            set {
                lithFormationPermeabilityField = value;
                NotifyPropertyChanged("LithFormationPermeability");
            }
        }

        private PermeabilityRockMeasure lithFormationPermeabilityField; 

        /// <summary>
        /// Young's modulus (E) is a measure of the stiffness of an isotropic elastic material. It is also known as the Young modulus, modulus of elasticity, elastic modulus (though Young's modulus is actually one of several elastic moduli such as the bulk modulus and the shear modulus) or tensile modulus. It is defined as the ratio of the uniaxial stress over the uniaxial strain.
        /// </summary>
		[Description("Young's modulus (E) is a measure of the stiffness of an isotropic elastic material. It is also known as the Young modulus, modulus of elasticity, elastic modulus (though Young's modulus is actually one  of several elastic moduli such as the bulk modulus and the shear modulus) or tensile modulus. It is  defined as the ratio of the uniaxial stress over the uniaxial strain.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("lithYoungsModulus")]
        public PressureMeasure LithYoungsModulus {
            get {
                return lithYoungsModulusField;
            } 
            set {
                lithYoungsModulusField = value;
                NotifyPropertyChanged("LithYoungsModulus");
            }
        }

        private PressureMeasure lithYoungsModulusField; 

        /// <summary>
        /// Refers to the pressure of fluids held within a soil or rock, in gaps between particles formation porosity.
        /// </summary>
		[Description("Refers to the pressure of fluids held within a soil or rock, in gaps  between particles formation porosity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("lithPorePres")]
        public PressureMeasure LithPorePres {
            get {
                return lithPorePresField;
            } 
            set {
                lithPorePresField = value;
                NotifyPropertyChanged("LithPorePres");
            }
        }

        private PressureMeasure lithPorePresField; 

        /// <summary>
        /// Net pay is computed. It is the thickness of rock that can deliver hydrocarbons to the wellbore formation.
        /// </summary>
		[Description("Net pay is computed. It is the thickness of rock that can deliver hydrocarbons  to the wellbore formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lithNetPayThickness")]
        public LengthMeasure LithNetPayThickness {
            get {
                return lithNetPayThicknessField;
            } 
            set {
                lithNetPayThicknessField = value;
                NotifyPropertyChanged("LithNetPayThickness");
            }
        }

        private LengthMeasure lithNetPayThicknessField; 

        /// <summary>
        /// A name for the formation lithology.
        /// </summary>
		[StringLength(64)]
        [Description("A name for the formation lithology.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("lithName")]
        public string LithName {
            get {
                return lithNameField;
            } 
            set {
                lithNameField = value;
                NotifyPropertyChanged("LithName");
            }
        }

        private string lithNameField; 

        /// <summary>
        /// Measured depth of the top of the formation.
        /// </summary>
		[Description("Measured depth of the top of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdGrossPayTop")]
        public MeasuredDepthCoord MDGrossPayTop {
            get {
                return mdGrossPayTopField;
            } 
            set {
                mdGrossPayTopField = value;
                NotifyPropertyChanged("MDGrossPayTop");
            }
        }

        private MeasuredDepthCoord mdGrossPayTopField; 

        /// <summary>
        /// Measured depth of the bottom of the formation.
        /// </summary>
		[Description("Measured depth of the bottom of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdGrossPayBottom")]
        public MeasuredDepthCoord MDGrossPayBottom {
            get {
                return mdGrossPayBottomField;
            } 
            set {
                mdGrossPayBottomField = value;
                NotifyPropertyChanged("MDGrossPayBottom");
            }
        }

        private MeasuredDepthCoord mdGrossPayBottomField; 

        /// <summary>
        /// The total thickness of the interval being treated, whether or not it is productive.
        /// </summary>
		[Description("The total thickness of the interval being treated, whether or  not it is productive.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("grossPayThickness")]
        public LengthMeasure GrossPayThickness {
            get {
                return grossPayThicknessField;
            } 
            set {
                grossPayThicknessField = value;
                NotifyPropertyChanged("GrossPayThickness");
            }
        }

        private LengthMeasure grossPayThicknessField; 

        /// <summary>
        /// The thickness of the most productive part of the interval. Net pay is a subset of the gross.
        /// </summary>
		[Description("The thickness of the most productive part of the interval.  Net pay is a subset of the gross.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("netPayThickness")]
        public LengthMeasure NetPayThickness {
            get {
                return netPayThicknessField;
            } 
            set {
                netPayThicknessField = value;
                NotifyPropertyChanged("NetPayThickness");
            }
        }

        private LengthMeasure netPayThicknessField; 

        /// <summary>
        /// The pore pressure of the net pay.
        /// </summary>
		[Description("The pore pressure of the net pay.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("netPayPorePres")]
        public PressureMeasure NetPayPorePres {
            get {
                return netPayPorePresField;
            } 
            set {
                netPayPorePresField = value;
                NotifyPropertyChanged("NetPayPorePres");
            }
        }

        private PressureMeasure netPayPorePresField; 

        /// <summary>
        /// The volume change of the fluid in the net pay when pressure is applied.
        /// </summary>
		[Description("The volume change of the fluid in the net pay when pressure is applied.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "compressibilityMeasure")]
		[XmlElement("netPayFluidCompressibility")]
        public CompressibilityMeasure NetPayFluidCompressibility {
            get {
                return netPayFluidCompressibilityField;
            } 
            set {
                netPayFluidCompressibilityField = value;
                NotifyPropertyChanged("NetPayFluidCompressibility");
            }
        }

        private CompressibilityMeasure netPayFluidCompressibilityField; 

        /// <summary>
        /// With respect to the net pay, a measurement of the internal resistance of a fluid to flow against itself. Expressed as the ratio of shear stress to shear rate.
        /// </summary>
		[Description("With respect to the net pay, a measurement of the internal resistance of a fluid to flow against itself. Expressed as the ratio of shear stress to shear rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("netPayFluidViscosity")]
        public DynamicViscosityMeasure NetPayFluidViscosity {
            get {
                return netPayFluidViscosityField;
            } 
            set {
                netPayFluidViscosityField = value;
                NotifyPropertyChanged("NetPayFluidViscosity");
            }
        }

        private DynamicViscosityMeasure netPayFluidViscosityField; 

        /// <summary>
        /// The name used for the net pay zone.
        /// </summary>
		[StringLength(64)]
        [Description("The name used for the net pay zone.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("netPayName")]
        public string NetPayName {
            get {
                return netPayNameField;
            } 
            set {
                netPayNameField = value;
                NotifyPropertyChanged("NetPayName");
            }
        }

        private string netPayNameField; 

        /// <summary>
        /// The permeability of the net pay.
        /// </summary>
		[Description("The permeability of the net pay.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "permeabilityRockMeasure")]
		[XmlElement("netPayFormationPermeability")]
        public PermeabilityRockMeasure NetPayFormationPermeability {
            get {
                return netPayFormationPermeabilityField;
            } 
            set {
                netPayFormationPermeabilityField = value;
                NotifyPropertyChanged("NetPayFormationPermeability");
            }
        }

        private PermeabilityRockMeasure netPayFormationPermeabilityField; 

        /// <summary>
        /// The ratio of the relative contraction strain, or transverse strain (normal to the applied load), divided by the relative extension strain, or axial strain (in the direction of the applied load).
        /// </summary>
		[Description("The ratio of the relative contraction strain, or transverse strain (normal to the applied load),  divided by the relative extension strain, or axial strain (in the direction of the applied load).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("lithPoissonsRatio")]
        public DimensionlessMeasure LithPoissonsRatio {
            get {
                return lithPoissonsRatioField;
            } 
            set {
                lithPoissonsRatioField = value;
                NotifyPropertyChanged("LithPoissonsRatio");
            }
        }

        private DimensionlessMeasure lithPoissonsRatioField; 

        /// <summary>
        /// Porosity of the net pay formation.
        /// </summary>
		[Description("Porosity of the net pay formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("netPayFormationPorosity")]
        public VolumePerVolumeMeasurePercent NetPayFormationPorosity {
            get {
                return netPayFormationPorosityField;
            } 
            set {
                netPayFormationPorosityField = value;
                NotifyPropertyChanged("NetPayFormationPorosity");
            }
        }

        private VolumePerVolumeMeasurePercent netPayFormationPorosityField; 

        /// <summary>
        /// Permeability of the formation.
        /// </summary>
		[Description("Permeability of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "permeabilityRockMeasure")]
		[XmlElement("formationPermeability")]
        public PermeabilityRockMeasure FormationPermeability {
            get {
                return formationPermeabilityField;
            } 
            set {
                formationPermeabilityField = value;
                NotifyPropertyChanged("FormationPermeability");
            }
        }

        private PermeabilityRockMeasure formationPermeabilityField; 

        /// <summary>
        /// Porosity of the formation.
        /// </summary>
		[Description("Porosity of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("formationPorosity")]
        public VolumePerVolumeMeasurePercent FormationPorosity {
            get {
                return formationPorosityField;
            } 
            set {
                formationPorosityField = value;
                NotifyPropertyChanged("FormationPorosity");
            }
        }

        private VolumePerVolumeMeasurePercent formationPorosityField; 

        /// <summary>
        /// Name of the formation.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the formation.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameFormation")]
        public string NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private string nameFormationField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// In a step down pump diagnostics test, this item contains all the data for a particular step in that test.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimTestStep", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("In a step down pump diagnostics test, this item contains all the data for a particular step in that test.")]
    public partial class StimTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// number property
        /// </summary>
		[Required]
        [Description("The number of the step. Identifies the step within the step down test.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("number")]
        public short? Number {
            get {
                return numberField;
            } 
            set {
                numberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private short? numberField; 

        /// <summary>
        /// bottomholeRate property
        /// </summary>
		[Description("Bottomhole flow rate for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("bottomholeRate")]
        public VolumeFlowRateMeasure BottomholeRate {
            get {
                return bottomholeRateField;
            } 
            set {
                bottomholeRateField = value;
                NotifyPropertyChanged("BottomholeRate");
            }
        }

        private VolumeFlowRateMeasure bottomholeRateField; 

        /// <summary>
        /// pres property
        /// </summary>
		[Description("Surface pressure measured for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pres")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                presField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 

        /// <summary>
        /// pipeFriction property
        /// </summary>
		[Description("Calculated pipe friction for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pipeFriction")]
        public PressureMeasure PipeFriction {
            get {
                return pipeFrictionField;
            } 
            set {
                pipeFrictionField = value;
                NotifyPropertyChanged("PipeFriction");
            }
        }

        private PressureMeasure pipeFrictionField; 

        /// <summary>
        /// entryFriction property
        /// </summary>
		[Description("Calculated entry friction accounting for perforation and near  wellbore restrictions for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("entryFriction")]
        public PressureMeasure EntryFriction {
            get {
                return entryFrictionField;
            } 
            set {
                entryFrictionField = value;
                NotifyPropertyChanged("EntryFriction");
            }
        }

        private PressureMeasure entryFrictionField; 

        /// <summary>
        /// perfFriction property
        /// </summary>
		[Description("Calculated perforation friction for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("perfFriction")]
        public PressureMeasure PerfFriction {
            get {
                return perfFrictionField;
            } 
            set {
                perfFrictionField = value;
                NotifyPropertyChanged("PerfFriction");
            }
        }

        private PressureMeasure perfFrictionField; 

        /// <summary>
        /// nearWellboreFriction property
        /// </summary>
		[Description("Calculated Near WellBore friction loss.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("nearWellboreFriction")]
        public PressureMeasure NearWellboreFriction {
            get {
                return nearWellboreFrictionField;
            } 
            set {
                nearWellboreFrictionField = value;
                NotifyPropertyChanged("NearWellboreFriction");
            }
        }

        private PressureMeasure nearWellboreFrictionField; 

        /// <summary>
        /// surfaceRate property
        /// </summary>
		[Description("Surface rate entering the well for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("surfaceRate")]
        public VolumeFlowRateMeasure SurfaceRate {
            get {
                return surfaceRateField;
            } 
            set {
                surfaceRateField = value;
                NotifyPropertyChanged("SurfaceRate");
            }
        }

        private VolumeFlowRateMeasure surfaceRateField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Diagnostic test involving flowing a well back after treatment.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimStepDownTest", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Diagnostic test involving flowing a well back after treatment.")]
    public partial class StimStepDownTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The initial shutin pressure.
        /// </summary>
		[Description("The initial shutin pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("initialShutinPres")]
        public PressureMeasure InitialShutinPres {
            get {
                return initialShutinPresField;
            } 
            set {
                initialShutinPresField = value;
                NotifyPropertyChanged("InitialShutinPres");
            }
        }

        private PressureMeasure initialShutinPresField; 

        /// <summary>
        /// The density of the fluid at the bottom of the hole adjusting for bottomhole temperature and pressure during the step test.
        /// </summary>
		[Description("The density of the fluid at the bottom of the hole adjusting for bottomhole  temperature and pressure during the step test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("bottomholeFluidDensity")]
        public DensityMeasure BottomholeFluidDensity {
            get {
                return bottomholeFluidDensityField;
            } 
            set {
                bottomholeFluidDensityField = value;
                NotifyPropertyChanged("BottomholeFluidDensity");
            }
        }

        private DensityMeasure bottomholeFluidDensityField; 

        /// <summary>
        /// Diameter of the injection point or perforation.
        /// </summary>
		[Description("Diameter of the injection point or perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diameterEntryHole")]
        public LengthMeasure DiameterEntryHole {
            get {
                return diameterEntryHoleField;
            } 
            set {
                diameterEntryHoleField = value;
                NotifyPropertyChanged("DiameterEntryHole");
            }
        }

        private LengthMeasure diameterEntryHoleField; 

        /// <summary>
        /// The number of perforations in the interval being tested.
        /// </summary>
		[Description("The number of perforations in the interval being tested.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("perforationCount")]
        public short? PerforationCount {
            get {
                return perforationCountField;
            } 
            set {
                perforationCountField = value;
                 this.PerforationCountSpecified = true;
                NotifyPropertyChanged("PerforationCount");
            }
        }

        private short? perforationCountField; 

        /// <summary>
        /// perforationCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerforationCountSpecified {
            get {
                return perforationCountSpecifiedField;
            } 
            set {
                perforationCountSpecifiedField = value;
                NotifyPropertyChanged("PerforationCountSpecified");
            }
        }

        private bool perforationCountSpecifiedField; 

        /// <summary>
        /// A coefficient used in the equation for calculation of pressure drop across a perforation set.
        /// </summary>
		[Description("A coefficient used in the equation for calculation of pressure  drop across a perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("dischargeCoefficient")]
        public double? DischargeCoefficient {
            get {
                return dischargeCoefficientField;
            } 
            set {
                dischargeCoefficientField = value;
                 this.DischargeCoefficientSpecified = true;
                NotifyPropertyChanged("DischargeCoefficient");
            }
        }

        private double? dischargeCoefficientField; 

        /// <summary>
        /// dischargeCoefficientSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DischargeCoefficientSpecified {
            get {
                return dischargeCoefficientSpecifiedField;
            } 
            set {
                dischargeCoefficientSpecifiedField = value;
                NotifyPropertyChanged("DischargeCoefficientSpecified");
            }
        }

        private bool dischargeCoefficientSpecifiedField; 

        /// <summary>
        /// The number of perforations in the interval being tested calculated to be open to injection determined during the step down test.
        /// </summary>
		[Description("The number of perforations in the interval being tested calculated  to be open to injection determined during the step down test.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("effectivePerfs")]
        public double? EffectivePerfs {
            get {
                return effectivePerfsField;
            } 
            set {
                effectivePerfsField = value;
                 this.EffectivePerfsSpecified = true;
                NotifyPropertyChanged("EffectivePerfs");
            }
        }

        private double? effectivePerfsField; 

        /// <summary>
        /// effectivePerfsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EffectivePerfsSpecified {
            get {
                return effectivePerfsSpecifiedField;
            } 
            set {
                effectivePerfsSpecifiedField = value;
                NotifyPropertyChanged("EffectivePerfsSpecified");
            }
        }

        private bool effectivePerfsSpecifiedField; 

        /// <summary>
        /// The data related to a particular step in the step down test.
        /// </summary>
		[Description("The data related to a particular step in the step down test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimTestStep")]
		[XmlElement("step")]
        public List<StimTestStep> Step {
            get {
                return stepField;
            } 
            set {
                stepField = value;
                NotifyPropertyChanged("Step");
            }
        }

         /// <summary>
         /// bool to indicate if Step has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StepSpecified
         {
             get {
             if(stepField!=null)
                 return stepField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimTestStep> stepField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Diagnostic test involving flowing a well back after treatment.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimPumpFlowBackTest", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Diagnostic test involving flowing a well back after treatment.")]
    public partial class StimPumpFlowBackTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The time required for the fracture width to become zero.
        /// </summary>
		[Description("The time required for the fracture width to become zero.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("fractureCloseDuration")]
        public TimeMeasure FractureCloseDuration {
            get {
                return fractureCloseDurationField;
            } 
            set {
                fractureCloseDurationField = value;
                NotifyPropertyChanged("FractureCloseDuration");
            }
        }

        private TimeMeasure fractureCloseDurationField; 

        /// <summary>
        /// The pressure when the fracture width becomes zero.
        /// </summary>
		[Description("The pressure when the fracture width becomes zero.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("fractureClosePres")]
        public PressureMeasure FractureClosePres {
            get {
                return fractureClosePresField;
            } 
            set {
                fractureClosePresField = value;
                NotifyPropertyChanged("FractureClosePres");
            }
        }

        private PressureMeasure fractureClosePresField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A diagnostic test determining fluid efficiency.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimFetTest", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A diagnostic test determining fluid efficiency.")]
    public partial class StimFetTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// An analysis method used for this FET test.
        /// </summary>
		[Description("An analysis method used for this FET test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimAnalysisMethod")]
		[XmlElement("analysisMethod")]
        public List<StimAnalysisMethod> AnalysisMethod {
            get {
                return analysisMethodField;
            } 
            set {
                analysisMethodField = value;
                NotifyPropertyChanged("AnalysisMethod");
            }
        }

         /// <summary>
         /// bool to indicate if AnalysisMethod has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnalysisMethodSpecified
         {
             get {
             if(analysisMethodField!=null)
                 return analysisMethodField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimAnalysisMethod> analysisMethodField; 

        /// <summary>
        /// Start time for the fluid efficiency test (FET).
        /// </summary>
		[Description("Start time for the fluid efficiency test (FET).")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// End time for the fluid efficiency test.
        /// </summary>
		[Description("End time for the fluid efficiency test.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// The end of the pressure dependent leakoff portion of the fluid efficiency test.
        /// </summary>
		[Description("The end of the pressure dependent leakoff portion of the fluid efficiency test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("endPdlDuration")]
        public TimeMeasure EndPdlDuration {
            get {
                return endPdlDurationField;
            } 
            set {
                endPdlDurationField = value;
                NotifyPropertyChanged("EndPdlDuration");
            }
        }

        private TimeMeasure endPdlDurationField; 

        /// <summary>
        /// The time at which the fracture effectively closes without proppant in place.
        /// </summary>
		[Description("The time at which the fracture effectively closes without proppant in place.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("fractureCloseDuration")]
        public TimeMeasure FractureCloseDuration {
            get {
                return fractureCloseDurationField;
            } 
            set {
                fractureCloseDurationField = value;
                NotifyPropertyChanged("FractureCloseDuration");
            }
        }

        private TimeMeasure fractureCloseDurationField; 

        /// <summary>
        /// The pressure at which the fracture effectively closes without proppant in place.
        /// </summary>
		[Description("The pressure at which the fracture effectively closes without proppant in place.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("fractureClosePres")]
        public PressureMeasure FractureClosePres {
            get {
                return fractureClosePresField;
            } 
            set {
                fractureClosePresField = value;
                NotifyPropertyChanged("FractureClosePres");
            }
        }

        private PressureMeasure fractureClosePresField; 

        /// <summary>
        /// The fracture pressure limit for an unfractured formation is the fracture initiation pressure. This is typically considered the upper bound for the minimum horizontal stress or closure pressure. A step rate test is used to determine the fracture extension pressure.
        /// </summary>
		[Description("The fracture pressure limit for an unfractured formation is the fracture initiation pressure. This is typically considered the upper bound for the minimum horizontal stress or closure pressure. A step rate test is used to determine the fracture extension pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("fractureExtensionPres")]
        public PressureMeasure FractureExtensionPres {
            get {
                return fractureExtensionPresField;
            } 
            set {
                fractureExtensionPresField = value;
                NotifyPropertyChanged("FractureExtensionPres");
            }
        }

        private PressureMeasure fractureExtensionPresField; 

        /// <summary>
        /// The difference between the fracture extension pressure and the pressure that exists in the fracture.
        /// </summary>
		[Description("The difference between the fracture extension pressure and the pressure that  exists in the fracture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("netPres")]
        public PressureMeasure NetPres {
            get {
                return netPresField;
            } 
            set {
                netPresField = value;
                NotifyPropertyChanged("NetPres");
            }
        }

        private PressureMeasure netPresField; 

        /// <summary>
        /// The pressure of the liquids in the formation pores.
        /// </summary>
		[Description("The pressure of the liquids in the formation pores.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("porePres")]
        public PressureMeasure PorePres {
            get {
                return porePresField;
            } 
            set {
                porePresField = value;
                NotifyPropertyChanged("PorePres");
            }
        }

        private PressureMeasure porePresField; 

        /// <summary>
        /// The Horner plot is used to determine if pseudo-radial flow developed during pressure decline. If a semi-log straight line is observed and the line can be extrapolated to a reasonable value of reservoir pressure, radial or pseudo-radial flow may be affecting the decline behavior. This suggests that the fracture is already closed and that data beyond the point of influence need not be considered in the evaluation of closure.
        /// </summary>
		[Description("The Horner plot is used to determine if pseudo-radial flow developed during pressure decline.  If a semi-log straight line is observed and the line can be extrapolated to a reasonable value of reservoir pressure, radial or pseudo-radial flow may be affecting the decline behavior.  This suggests that the fracture is already closed and that data beyond the point of influence  need not be considered in the evaluation of closure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pseudoRadialPres")]
        public PressureMeasure PseudoRadialPres {
            get {
                return pseudoRadialPresField;
            } 
            set {
                pseudoRadialPresField = value;
                NotifyPropertyChanged("PseudoRadialPres");
            }
        }

        private PressureMeasure pseudoRadialPresField; 

        /// <summary>
        /// Fracture length is the length of the fracture tip to tip; fracture half length, the length of one wing of a fracture from the wellbore to the tip.
        /// </summary>
		[Description("Fracture length is the length of the fracture tip to tip; fracture half length,  the length of one wing of a fracture from the wellbore to the tip.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("fractureLength")]
        public LengthMeasure FractureLength {
            get {
                return fractureLengthField;
            } 
            set {
                fractureLengthField = value;
                NotifyPropertyChanged("FractureLength");
            }
        }

        private LengthMeasure fractureLengthField; 

        /// <summary>
        /// The width of a fracture at the wellbore. Hydraulic frac width is generated by frac fluid viscosity and/or pump rate (i.e., horsepower).
        /// </summary>
		[Description("The width of a fracture at the wellbore. Hydraulic frac width is  generated by frac fluid viscosity and/or pump rate (i.e., horsepower).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("fractureWidth")]
        public LengthMeasure FractureWidth {
            get {
                return fractureWidthField;
            } 
            set {
                fractureWidthField = value;
                NotifyPropertyChanged("FractureWidth");
            }
        }

        private LengthMeasure fractureWidthField; 

        /// <summary>
        /// A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.
        /// </summary>
		[Description("A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("fluidEfficiency")]
        public VolumePerVolumeMeasurePercent FluidEfficiency {
            get {
                return fluidEfficiencyField;
            } 
            set {
                fluidEfficiencyField = value;
                NotifyPropertyChanged("FluidEfficiency");
            }
        }

        private VolumePerVolumeMeasurePercent fluidEfficiencyField; 

        /// <summary>
        /// The pressure dependent leakoff coefficient.
        /// </summary>
		[Description("The pressure dependent leakoff coefficient.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("pdlCoef")]
        public double? PdlCoef {
            get {
                return pdlCoefField;
            } 
            set {
                pdlCoefField = value;
                 this.PdlCoefSpecified = true;
                NotifyPropertyChanged("PdlCoef");
            }
        }

        private double? pdlCoefField; 

        /// <summary>
        /// pdlCoefSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PdlCoefSpecified {
            get {
                return pdlCoefSpecifiedField;
            } 
            set {
                pdlCoefSpecifiedField = value;
                NotifyPropertyChanged("PdlCoefSpecified");
            }
        }

        private bool pdlCoefSpecifiedField; 

        /// <summary>
        /// That permeability which remains after a fractured formation has closed, allowing the the formation fracture face to be pressurized before the fracture is mechanically reopened.
        /// </summary>
		[Description("That permeability which remains after a fractured formation has closed, allowing the  the formation fracture face to be pressurized before the fracture is mechanically reopened.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "permeabilityRockMeasure")]
		[XmlElement("residualPermeability")]
        public PermeabilityRockMeasure ResidualPermeability {
            get {
                return residualPermeabilityField;
            } 
            set {
                residualPermeabilityField = value;
                NotifyPropertyChanged("ResidualPermeability");
            }
        }

        private PermeabilityRockMeasure residualPermeabilityField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// In an injection step test, the injection rate at a particular pressure.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimPressureFlowRate", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("In an injection step test, the injection rate at a particular pressure.")]
    public partial class StimPressureFlowRate : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure of the step test.
        /// </summary>
		[Description("The pressure of the step test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pres")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                presField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 

        /// <summary>
        /// The flow of the fluid at the bottomhole.
        /// </summary>
		[Description("The flow of the fluid at the bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("bottomholeRate")]
        public VolumeFlowRateMeasure BottomholeRate {
            get {
                return bottomholeRateField;
            } 
            set {
                bottomholeRateField = value;
                NotifyPropertyChanged("BottomholeRate");
            }
        }

        private VolumeFlowRateMeasure bottomholeRateField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimStepTest", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.")]
    public partial class StimStepTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pressure and fluid rate data reading.
        /// </summary>
		[Description("A pressure and fluid rate data reading.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimPressureFlowRate")]
		[XmlElement("presMeasurement")]
        public List<StimPressureFlowRate> PresMeasurement {
            get {
                return presMeasurementField;
            } 
            set {
                presMeasurementField = value;
                NotifyPropertyChanged("PresMeasurement");
            }
        }

         /// <summary>
         /// bool to indicate if PresMeasurement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PresMeasurementSpecified
         {
             get {
             if(presMeasurementField!=null)
                 return presMeasurementField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimPressureFlowRate> presMeasurementField; 

        /// <summary>
        /// The pressure necessary to extend the fracture once initiated. The fracture extension pressure may rise slightly with increasing fracture length and/or height because of friction pressure drop down the length of the fracture.
        /// </summary>
		[Description("The pressure necessary to extend the fracture once initiated.  The fracture extension pressure may rise slightly with increasing fracture length and/or  height because of friction pressure drop down the length of the fracture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("fractureExtensionPres")]
        public PressureMeasure FractureExtensionPres {
            get {
                return fractureExtensionPresField;
            } 
            set {
                fractureExtensionPresField = value;
                NotifyPropertyChanged("FractureExtensionPres");
            }
        }

        private PressureMeasure fractureExtensionPresField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A pumping diagnostics session.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimPdatSession", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A pumping diagnostics session.")]
    public partial class StimPdatSession : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the session.
        /// </summary>
		[StringLength(32)]
        [Description("The name of the session.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A description of the session.
        /// </summary>
		[StringLength(256)]
        [Description("A description of the session.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// The number of this pumping diagnostics session.
        /// </summary>
		[Description("The number of this pumping diagnostics session.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("number")]
        public short? Number {
            get {
                return numberField;
            } 
            set {
                numberField = value;
                 this.NumberSpecified = true;
                NotifyPropertyChanged("Number");
            }
        }

        private short? numberField; 

        /// <summary>
        /// numberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumberSpecified {
            get {
                return numberSpecifiedField;
            } 
            set {
                numberSpecifiedField = value;
                NotifyPropertyChanged("NumberSpecified");
            }
        }

        private bool numberSpecifiedField; 

        /// <summary>
        /// The date and time pumping began.
        /// </summary>
		[Description("The date and time pumping began.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimPumpOn")]
        public Timestamp? DateTimePumpOn {
            get {
                return dTimPumpOnField;
            } 
            set {
                dTimPumpOnField = value;
                 this.DateTimePumpOnSpecified = true;
                NotifyPropertyChanged("DateTimePumpOn");
            }
        }

        private Timestamp? dTimPumpOnField; 

        /// <summary>
        /// dTimPumpOnSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePumpOnSpecified {
            get {
                return dTimPumpOnSpecifiedField;
            } 
            set {
                dTimPumpOnSpecifiedField = value;
                NotifyPropertyChanged("DateTimePumpOnSpecified");
            }
        }

        private bool dTimPumpOnSpecifiedField; 

        /// <summary>
        /// The date and time pumping ended.
        /// </summary>
		[Description("The date and time pumping ended.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimPumpOff")]
        public Timestamp? DateTimePumpOff {
            get {
                return dTimPumpOffField;
            } 
            set {
                dTimPumpOffField = value;
                 this.DateTimePumpOffSpecified = true;
                NotifyPropertyChanged("DateTimePumpOff");
            }
        }

        private Timestamp? dTimPumpOffField; 

        /// <summary>
        /// dTimPumpOffSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePumpOffSpecified {
            get {
                return dTimPumpOffSpecifiedField;
            } 
            set {
                dTimPumpOffSpecifiedField = value;
                NotifyPropertyChanged("DateTimePumpOffSpecified");
            }
        }

        private bool dTimPumpOffSpecifiedField; 

        /// <summary>
        /// The date and time at which a well ceases flowing and the valves are closed.
        /// </summary>
		[Description("The date and time at which a well ceases flowing and the valves are closed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimWellShutin")]
        public Timestamp? DateTimeWellShutin {
            get {
                return dTimWellShutinField;
            } 
            set {
                dTimWellShutinField = value;
                 this.DateTimeWellShutinSpecified = true;
                NotifyPropertyChanged("DateTimeWellShutin");
            }
        }

        private Timestamp? dTimWellShutinField; 

        /// <summary>
        /// dTimWellShutinSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeWellShutinSpecified {
            get {
                return dTimWellShutinSpecifiedField;
            } 
            set {
                dTimWellShutinSpecifiedField = value;
                NotifyPropertyChanged("DateTimeWellShutinSpecified");
            }
        }

        private bool dTimWellShutinSpecifiedField; 

        /// <summary>
        /// The date and time when the fluid in the fracture is completely leaked off into the formation and the fracture closes on its faces.
        /// </summary>
		[Description("The date and time when the fluid in the fracture is completely leaked off  into the formation and the fracture closes on its faces.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimFractureClose")]
        public Timestamp? DateTimeFractureClose {
            get {
                return dTimFractureCloseField;
            } 
            set {
                dTimFractureCloseField = value;
                 this.DateTimeFractureCloseSpecified = true;
                NotifyPropertyChanged("DateTimeFractureClose");
            }
        }

        private Timestamp? dTimFractureCloseField; 

        /// <summary>
        /// dTimFractureCloseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeFractureCloseSpecified {
            get {
                return dTimFractureCloseSpecifiedField;
            } 
            set {
                dTimFractureCloseSpecifiedField = value;
                NotifyPropertyChanged("DateTimeFractureCloseSpecified");
            }
        }

        private bool dTimFractureCloseSpecifiedField; 

        /// <summary>
        /// The time between the shutin time and the pump on time.
        /// </summary>
		[Description("The time between the shutin time and the pump on time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("pumpDuration")]
        public TimeMeasure PumpDuration {
            get {
                return pumpDurationField;
            } 
            set {
                pumpDurationField = value;
                NotifyPropertyChanged("PumpDuration");
            }
        }

        private TimeMeasure pumpDurationField; 

        /// <summary>
        /// Average bottomhole treatment pressure.
        /// </summary>
		[Description("Average bottomhole treatment pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("avgBottomholeTreatmentPres")]
        public PressureMeasure AvgBottomholeTreatmentPres {
            get {
                return avgBottomholeTreatmentPresField;
            } 
            set {
                avgBottomholeTreatmentPresField = value;
                NotifyPropertyChanged("AvgBottomholeTreatmentPres");
            }
        }

        private PressureMeasure avgBottomholeTreatmentPresField; 

        /// <summary>
        /// Bottomhole hydrostatic pressure.
        /// </summary>
		[Description("Bottomhole hydrostatic pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("bottomholeHydrostaticPres")]
        public PressureMeasure BottomholeHydrostaticPres {
            get {
                return bottomholeHydrostaticPresField;
            } 
            set {
                bottomholeHydrostaticPresField = value;
                NotifyPropertyChanged("BottomholeHydrostaticPres");
            }
        }

        private PressureMeasure bottomholeHydrostaticPresField; 

        /// <summary>
        /// The pressure at which gas begins to break out of an under saturated oil and form a free gas phase in the matrix or a gas cap.
        /// </summary>
		[Description("The pressure at which gas begins to break out of an under saturated oil and form a  free gas phase in the matrix or a gas cap.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("bubblePointPres")]
        public PressureMeasure BubblePointPres {
            get {
                return bubblePointPresField;
            } 
            set {
                bubblePointPresField = value;
                NotifyPropertyChanged("BubblePointPres");
            }
        }

        private PressureMeasure bubblePointPresField; 

        /// <summary>
        /// The pressure when the fracture width becoms zero.
        /// </summary>
		[Description("The pressure when the fracture width becoms zero.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("fractureClosePres")]
        public PressureMeasure FractureClosePres {
            get {
                return fractureClosePresField;
            } 
            set {
                fractureClosePresField = value;
                NotifyPropertyChanged("FractureClosePres");
            }
        }

        private PressureMeasure fractureClosePresField; 

        /// <summary>
        /// The pressure loss due to fluid friction with the pipe while a fluid is being pumped.
        /// </summary>
		[Description("The pressure loss due to fluid friction with the pipe while a fluid is being pumped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("frictionPres")]
        public PressureMeasure FrictionPres {
            get {
                return frictionPresField;
            } 
            set {
                frictionPresField = value;
                NotifyPropertyChanged("FrictionPres");
            }
        }

        private PressureMeasure frictionPresField; 

        /// <summary>
        /// Initial shutin pressure.
        /// </summary>
		[Description("Initial shutin pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("initialShutinPres")]
        public PressureMeasure InitialShutinPres {
            get {
                return initialShutinPresField;
            } 
            set {
                initialShutinPresField = value;
                NotifyPropertyChanged("InitialShutinPres");
            }
        }

        private PressureMeasure initialShutinPresField; 

        /// <summary>
        /// The pressure of the liquids in the formation pores.
        /// </summary>
		[Description("The pressure of the liquids in the formation pores.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("porePres")]
        public PressureMeasure PorePres {
            get {
                return porePresField;
            } 
            set {
                porePresField = value;
                NotifyPropertyChanged("PorePres");
            }
        }

        private PressureMeasure porePresField; 

        /// <summary>
        /// Average bottomhole treatment flow rate.
        /// </summary>
		[Description("Average bottomhole treatment flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgBottomholeTreatmentRate")]
        public VolumeFlowRateMeasure AvgBottomholeTreatmentRate {
            get {
                return avgBottomholeTreatmentRateField;
            } 
            set {
                avgBottomholeTreatmentRateField = value;
                NotifyPropertyChanged("AvgBottomholeTreatmentRate");
            }
        }

        private VolumeFlowRateMeasure avgBottomholeTreatmentRateField; 

        /// <summary>
        /// The density of the fluid.
        /// </summary>
		[Description("The density of the fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("fluidDensity")]
        public DensityMeasure FluidDensity {
            get {
                return fluidDensityField;
            } 
            set {
                fluidDensityField = value;
                NotifyPropertyChanged("FluidDensity");
            }
        }

        private DensityMeasure fluidDensityField; 

        /// <summary>
        /// Base fluid volume entering equipment.
        /// </summary>
		[Description("Base fluid volume entering equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("baseFluidVol")]
        public VolumeMeasure BaseFluidVol {
            get {
                return baseFluidVolField;
            } 
            set {
                baseFluidVolField = value;
                NotifyPropertyChanged("BaseFluidVol");
            }
        }

        private VolumeMeasure baseFluidVolField; 

        /// <summary>
        /// The volume of fluid in the wellbore.
        /// </summary>
		[Description("The volume of fluid in the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("wellboreVolume")]
        public VolumeMeasure WellboreVolume {
            get {
                return wellboreVolumeField;
            } 
            set {
                wellboreVolumeField = value;
                NotifyPropertyChanged("WellboreVolume");
            }
        }

        private VolumeMeasure wellboreVolumeField; 

        /// <summary>
        /// The measured depth of the wellbore to its injection point.
        /// </summary>
		[Description("The measured depth of the wellbore to its injection point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdSurface")]
        public MeasuredDepthCoord MDSurface {
            get {
                return mdSurfaceField;
            } 
            set {
                mdSurfaceField = value;
                NotifyPropertyChanged("MDSurface");
            }
        }

        private MeasuredDepthCoord mdSurfaceField; 

        /// <summary>
        /// The measured depth of the bottom of the hole.
        /// </summary>
		[Description("The measured depth of the bottom of the hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottomhole")]
        public MeasuredDepthCoord MDBottomhole {
            get {
                return mdBottomholeField;
            } 
            set {
                mdBottomholeField = value;
                NotifyPropertyChanged("MDBottomhole");
            }
        }

        private MeasuredDepthCoord mdBottomholeField; 

        /// <summary>
        /// The measured depth of the middle perforation.
        /// </summary>
		[Description("The measured depth of the middle perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdMidPerforation")]
        public MeasuredDepthCoord MDMidPerforation {
            get {
                return mdMidPerforationField;
            } 
            set {
                mdMidPerforationField = value;
                NotifyPropertyChanged("MDMidPerforation");
            }
        }

        private MeasuredDepthCoord mdMidPerforationField; 

        /// <summary>
        /// The true vertical depth of the middle perforation.
        /// </summary>
		[Description("The true vertical depth of the middle perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdMidPerforation")]
        public WellVerticalDepthCoord TvdMidPerforation {
            get {
                return tvdMidPerforationField;
            } 
            set {
                tvdMidPerforationField = value;
                NotifyPropertyChanged("TvdMidPerforation");
            }
        }

        private WellVerticalDepthCoord tvdMidPerforationField; 

        /// <summary>
        /// The constant earth temperature at a given depth specific to a region.
        /// </summary>
		[Description("The constant earth temperature at a given depth specific to a region.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("surfaceTemperature")]
        public ThermodynamicTemperatureMeasure SurfaceTemperature {
            get {
                return surfaceTemperatureField;
            } 
            set {
                surfaceTemperatureField = value;
                NotifyPropertyChanged("SurfaceTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure surfaceTemperatureField; 

        /// <summary>
        /// Static bottomhole temperature.
        /// </summary>
		[Description("Static bottomhole temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("bottomholeTemperature")]
        public ThermodynamicTemperatureMeasure BottomholeTemperature {
            get {
                return bottomholeTemperatureField;
            } 
            set {
                bottomholeTemperatureField = value;
                NotifyPropertyChanged("BottomholeTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure bottomholeTemperatureField; 

        /// <summary>
        /// Temperature of the fluid at the surface.
        /// </summary>
		[Description("Temperature of the fluid at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("surfaceFluidTemperature")]
        public ThermodynamicTemperatureMeasure SurfaceFluidTemperature {
            get {
                return surfaceFluidTemperatureField;
            } 
            set {
                surfaceFluidTemperatureField = value;
                NotifyPropertyChanged("SurfaceFluidTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure surfaceFluidTemperatureField; 

        /// <summary>
        /// The volume change of a fluid when pressure is applied.
        /// </summary>
		[Description("The volume change of a fluid when pressure is applied.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "compressibilityMeasure")]
		[XmlElement("fluidCompressibility")]
        public CompressibilityMeasure FluidCompressibility {
            get {
                return fluidCompressibilityField;
            } 
            set {
                fluidCompressibilityField = value;
                NotifyPropertyChanged("FluidCompressibility");
            }
        }

        private CompressibilityMeasure fluidCompressibilityField; 

        /// <summary>
        /// The volume change of a reservoir material when pressure is applied.
        /// </summary>
		[Description("The volume change of a reservoir material when pressure is applied.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "compressibilityMeasure")]
		[XmlElement("reservoirTotalCompressibility")]
        public CompressibilityMeasure ReservoirTotalCompressibility {
            get {
                return reservoirTotalCompressibilityField;
            } 
            set {
                reservoirTotalCompressibilityField = value;
                NotifyPropertyChanged("ReservoirTotalCompressibility");
            }
        }

        private CompressibilityMeasure reservoirTotalCompressibilityField; 

        /// <summary>
        /// Power law component. As n decreases from 1, the fluid becomes more shear thinning. Reducing n produces more non-Newtonian behavior.
        /// </summary>
		[Description("Power law component. As n decreases from 1, the fluid becomes more shear thinning.  Reducing n produces more non-Newtonian behavior.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("fluidNprimeFactor")]
        public double? FluidNprimeFactor {
            get {
                return fluidNprimeFactorField;
            } 
            set {
                fluidNprimeFactorField = value;
                 this.FluidNprimeFactorSpecified = true;
                NotifyPropertyChanged("FluidNprimeFactor");
            }
        }

        private double? fluidNprimeFactorField; 

        /// <summary>
        /// fluidNprimeFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidNprimeFactorSpecified {
            get {
                return fluidNprimeFactorSpecifiedField;
            } 
            set {
                fluidNprimeFactorSpecifiedField = value;
                NotifyPropertyChanged("FluidNprimeFactorSpecified");
            }
        }

        private bool fluidNprimeFactorSpecifiedField; 

        /// <summary>
        /// The consistency index K is the shear stress or viscosity of the fluid at one sec-1 shear rate. An increasing K raises the effective viscosity.
        /// </summary>
		[Description("The consistency index K is the shear stress or viscosity of the fluid at one sec-1 shear rate. An increasing K raises the effective viscosity.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("fluidKprimeFactor")]
        public double? FluidKprimeFactor {
            get {
                return fluidKprimeFactorField;
            } 
            set {
                fluidKprimeFactorField = value;
                 this.FluidKprimeFactorSpecified = true;
                NotifyPropertyChanged("FluidKprimeFactor");
            }
        }

        private double? fluidKprimeFactorField; 

        /// <summary>
        /// fluidKprimeFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidKprimeFactorSpecified {
            get {
                return fluidKprimeFactorSpecifiedField;
            } 
            set {
                fluidKprimeFactorSpecifiedField = value;
                NotifyPropertyChanged("FluidKprimeFactorSpecified");
            }
        }

        private bool fluidKprimeFactorSpecifiedField; 

        /// <summary>
        /// The heat required to raise one unit mass of a substance by one degree.
        /// </summary>
		[Description("The heat required to raise one unit mass of a substance by one degree.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "specificHeatCapacityMeasure")]
		[XmlElement("fluidSpecificHeat")]
        public SpecificHeatCapacityMeasure FluidSpecificHeat {
            get {
                return fluidSpecificHeatField;
            } 
            set {
                fluidSpecificHeatField = value;
                NotifyPropertyChanged("FluidSpecificHeat");
            }
        }

        private SpecificHeatCapacityMeasure fluidSpecificHeatField; 

        /// <summary>
        /// In physics, thermal conductivity is the property of a material describing its ability to conduct heat. It appears primarily in Fourier's Law for heat conduction. Thermal conductivity is measured in watts per kelvin-meter. Multiplied by a temperature difference (in kelvins) and an area (in square meters), and divided by a thickness (in meters), the thermal conductivity predicts the rate of energy loss (in watts) through a piece of material.
        /// </summary>
		[Description("In physics, thermal conductivity is the property of a material describing its ability to conduct heat.  It appears primarily in Fourier's Law for heat conduction. Thermal conductivity is measured in watts per kelvin-meter.  Multiplied by a temperature difference (in kelvins) and an area (in square meters), and divided by a  thickness (in meters), the thermal conductivity predicts the rate of energy loss (in watts) through a piece of material.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermalConductivityMeasure")]
		[XmlElement("fluidThermalConductivity")]
        public ThermalConductivityMeasure FluidThermalConductivity {
            get {
                return fluidThermalConductivityField;
            } 
            set {
                fluidThermalConductivityField = value;
                NotifyPropertyChanged("FluidThermalConductivity");
            }
        }

        private ThermalConductivityMeasure fluidThermalConductivityField; 

        /// <summary>
        /// Dimensional response to temperature change is expressed by its coefficient of thermal expansion. When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling. The degree of expansion divided by the change in temperature is called the material's coefficient of thermal expansion and generally varies with temperature.
        /// </summary>
		[Description("Dimensional response to temperature change is expressed by its coefficient of thermal expansion. When the temperature of a substance changes, the energy that is stored in the intermolecular bonds  between atoms changes. When the stored energy increases, so does the length of the molecular bonds.  As a result, solids typically expand in response to heating and contract on cooling.  The degree of expansion divided by the change in temperature is called the material's coefficient  of thermal expansion and generally varies with temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermalVolumetricExpansionMeasure")]
		[XmlElement("fluidThermalExpansionCoefficient")]
        public ThermalVolumetricExpansionMeasure FluidThermalExpansionCoefficient {
            get {
                return fluidThermalExpansionCoefficientField;
            } 
            set {
                fluidThermalExpansionCoefficientField = value;
                NotifyPropertyChanged("FluidThermalExpansionCoefficient");
            }
        }

        private ThermalVolumetricExpansionMeasure fluidThermalExpansionCoefficientField; 

        /// <summary>
        /// A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.
        /// </summary>
		[Description("A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("fluidEfficiency")]
        public VolumePerVolumeMeasurePercent FluidEfficiency {
            get {
                return fluidEfficiencyField;
            } 
            set {
                fluidEfficiencyField = value;
                NotifyPropertyChanged("FluidEfficiency");
            }
        }

        private VolumePerVolumeMeasurePercent fluidEfficiencyField; 

        /// <summary>
        /// Foam quality percentage of foam for the job during the stimulation services.
        /// </summary>
		[Description("Foam quality percentage of foam for the job during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("foamQuality")]
        public VolumePerVolumeMeasurePercent FoamQuality {
            get {
                return foamQualityField;
            } 
            set {
                foamQualityField = value;
                NotifyPropertyChanged("FoamQuality");
            }
        }

        private VolumePerVolumeMeasurePercent foamQualityField; 

        /// <summary>
        /// The volume of the pad divided by the (volume of the pad + the volume of the proppant laden fluid).
        /// </summary>
		[Description("The volume of the pad divided by the (volume of the pad + the volume of the proppant laden fluid).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("percentPad")]
        public VolumePerVolumeMeasurePercent PercentPad {
            get {
                return percentPadField;
            } 
            set {
                percentPadField = value;
                NotifyPropertyChanged("PercentPad");
            }
        }

        private VolumePerVolumeMeasurePercent percentPadField; 

        /// <summary>
        /// The number of a stage associated with this diagnostics session.
        /// </summary>
		[Description("The number of a stage associated with this diagnostics session.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("stageNumber")]
        public short? StageNumber {
            get {
                return stageNumberField;
            } 
            set {
                stageNumberField = value;
                 this.StageNumberSpecified = true;
                NotifyPropertyChanged("StageNumber");
            }
        }

        private short? stageNumberField; 

        /// <summary>
        /// stageNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StageNumberSpecified {
            get {
                return stageNumberSpecifiedField;
            } 
            set {
                stageNumberSpecifiedField = value;
                NotifyPropertyChanged("StageNumberSpecified");
            }
        }

        private bool stageNumberSpecifiedField; 

        /// <summary>
        /// Are the calculations corrected for temperature. A value of "true" (or "1") indicates that the calculations were corrected for temperature. A value of "false" (or "0") or not given indicates otherwise.
        /// </summary>
		[Description("Are the calculations corrected for temperature. A value of \"true\" (or \"1\") indicates that the calculations were corrected for temperature.  A value of \"false\" (or \"0\") or not given indicates otherwise.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("temperatureCorrectionApplied")]
        public bool? TemperatureCorrectionApplied {
            get {
                return temperatureCorrectionAppliedField;
            } 
            set {
                temperatureCorrectionAppliedField = value;
                 this.TemperatureCorrectionAppliedSpecified = true;
                NotifyPropertyChanged("TemperatureCorrectionApplied");
            }
        }

        private bool? temperatureCorrectionAppliedField; 

        /// <summary>
        /// temperatureCorrectionAppliedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TemperatureCorrectionAppliedSpecified {
            get {
                return temperatureCorrectionAppliedSpecifiedField;
            } 
            set {
                temperatureCorrectionAppliedSpecifiedField = value;
                NotifyPropertyChanged("TemperatureCorrectionAppliedSpecified");
            }
        }

        private bool temperatureCorrectionAppliedSpecifiedField; 

        /// <summary>
        /// An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.
        /// </summary>
		[Description("An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimStepTest")]
		[XmlElement("stepRateTest")]
        public List<StimStepTest> StepRateTest {
            get {
                return stepRateTestField;
            } 
            set {
                stepRateTestField = value;
                NotifyPropertyChanged("StepRateTest");
            }
        }

         /// <summary>
         /// bool to indicate if StepRateTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StepRateTestSpecified
         {
             get {
             if(stepRateTestField!=null)
                 return stepRateTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimStepTest> stepRateTestField; 

        /// <summary>
        /// A diagnostic test determining fluid efficiency.
        /// </summary>
		[Description("A diagnostic test determining fluid efficiency.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimFetTest")]
		[XmlElement("fluidEfficiencyTest")]
        public List<StimFetTest> FluidEfficiencyTest {
            get {
                return fluidEfficiencyTestField;
            } 
            set {
                fluidEfficiencyTestField = value;
                NotifyPropertyChanged("FluidEfficiencyTest");
            }
        }

         /// <summary>
         /// bool to indicate if FluidEfficiencyTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidEfficiencyTestSpecified
         {
             get {
             if(fluidEfficiencyTestField!=null)
                 return fluidEfficiencyTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimFetTest> fluidEfficiencyTestField; 

        /// <summary>
        /// A diagnostic test involving flowing a well back after treatment.
        /// </summary>
		[Description("A diagnostic test involving flowing a well back after treatment.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimPumpFlowBackTest")]
		[XmlElement("pumpFlowBackTest")]
        public List<StimPumpFlowBackTest> PumpFlowBackTest {
            get {
                return pumpFlowBackTestField;
            } 
            set {
                pumpFlowBackTestField = value;
                NotifyPropertyChanged("PumpFlowBackTest");
            }
        }

         /// <summary>
         /// bool to indicate if PumpFlowBackTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PumpFlowBackTestSpecified
         {
             get {
             if(pumpFlowBackTestField!=null)
                 return pumpFlowBackTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimPumpFlowBackTest> pumpFlowBackTestField; 

        /// <summary>
        /// An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure.
        /// </summary>
		[Description("An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimStepDownTest")]
		[XmlElement("stepDownTest")]
        public List<StimStepDownTest> StepDownTest {
            get {
                return stepDownTestField;
            } 
            set {
                stepDownTestField = value;
                NotifyPropertyChanged("StepDownTest");
            }
        }

         /// <summary>
         /// bool to indicate if StepDownTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StepDownTestSpecified
         {
             get {
             if(stepDownTestField!=null)
                 return stepDownTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimStepDownTest> stepDownTestField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - event log for stimulation jobs.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimEvent", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - event log for stimulation jobs.")]
    public partial class StimEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Event number.
        /// </summary>
		[Required]
        [Description("Event number.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("number")]
        public short? Number {
            get {
                return numberField;
            } 
            set {
                numberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private short? numberField; 

        /// <summary>
        /// Date time of this event.
        /// </summary>
		[Description("Date time of this event.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// A short description of the event.
        /// </summary>
		[StringLength(4000)]
        [Description("A short description of the event.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Stage number - use to reference an existing job stage entry.
        /// </summary>
		[Description("Stage number - use to reference an existing job stage entry.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("numStage")]
        public short? NumStage {
            get {
                return numStageField;
            } 
            set {
                numStageField = value;
                 this.NumStageSpecified = true;
                NotifyPropertyChanged("NumStage");
            }
        }

        private short? numStageField; 

        /// <summary>
        /// numStageSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumStageSpecified {
            get {
                return numStageSpecifiedField;
            } 
            set {
                numStageSpecifiedField = value;
                NotifyPropertyChanged("NumStageSpecified");
            }
        }

        private bool numStageSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - proppants for stimulation jobs.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimProppant", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - proppants for stimulation jobs.")]
    public partial class StimProppant : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Proppant name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Proppant name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Proppant type or Function.
        /// </summary>
		[Description("Proppant type or Function.")]
        [EnergisticsDataTypeAttribute(DataType = "StimProppantType")]
		[XmlElement("kind")]
        public StimProppantType? Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private StimProppantType? kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

        /// <summary>
        /// Volume of the additive used.
        /// </summary>
		[Description("Volume of the additive used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("weight")]
        public MassMeasure Weight {
            get {
                return weightField;
            } 
            set {
                weightField = value;
                NotifyPropertyChanged("Weight");
            }
        }

        private MassMeasure weightField; 

        /// <summary>
        /// The size of the sieve through which a proppant will pass. Measures the fineness of the grind.
        /// </summary>
		[StringLength(32)]
        [Description("The size of the sieve through which a proppant will pass.   Measures the fineness of the grind.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("sieveSize")]
        public string SieveSize {
            get {
                return sieveSizeField;
            } 
            set {
                sieveSizeField = value;
                NotifyPropertyChanged("SieveSize");
            }
        }

        private string sieveSizeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - additive for stimulation jobs.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimAdditive", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - additive for stimulation jobs.")]
    public partial class StimAdditive : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Additive name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Additive name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Additive type or function.
        /// </summary>
		[Description("Additive type or function.")]
        [EnergisticsDataTypeAttribute(DataType = "StimAdditiveType")]
		[XmlElement("kind")]
        public StimAdditiveType? Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private StimAdditiveType? kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

        /// <summary>
        /// Volume of the liquid additive used.
        /// </summary>
		[Description("Volume of the liquid additive used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volume")]
        public VolumeMeasure Volume {
            get {
                return volumeField;
            } 
            set {
                volumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeMeasure volumeField; 

        /// <summary>
        /// The mass of the dry additive used.
        /// </summary>
		[Description("The mass of the dry additive used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("mass")]
        public MassMeasure Mass {
            get {
                return massField;
            } 
            set {
                massField = value;
                NotifyPropertyChanged("Mass");
            }
        }

        private MassMeasure massField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Stimulation Fluid Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimFluid", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Stimulation Fluid Component Schema.")]
    public partial class StimFluid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the fluid.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Volume of fluid.
        /// </summary>
		[Description("Volume of fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("fluidVol")]
        public VolumeMeasure FluidVol {
            get {
                return fluidVolField;
            } 
            set {
                fluidVolField = value;
                NotifyPropertyChanged("FluidVol");
            }
        }

        private VolumeMeasure fluidVolField; 

        /// <summary>
        /// Source of the water used in the fluid. 256 char max size.
        /// </summary>
		[StringLength(256)]
        [Description("Source of the water used in the fluid. 256 char max size.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("waterSource")]
        public string WaterSource {
            get {
                return waterSourceField;
            } 
            set {
                waterSourceField = value;
                NotifyPropertyChanged("WaterSource");
            }
        }

        private string waterSourceField; 

        /// <summary>
        /// Additives used in the fluid.
        /// </summary>
		[Description("Additives used in the fluid.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimAdditive")]
		[XmlElement("additive")]
        public List<StimAdditive> Additive {
            get {
                return additiveField;
            } 
            set {
                additiveField = value;
                NotifyPropertyChanged("Additive");
            }
        }

         /// <summary>
         /// bool to indicate if Additive has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AdditiveSpecified
         {
             get {
             if(additiveField!=null)
                 return additiveField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimAdditive> additiveField; 

        /// <summary>
        /// Proppants used in the fluid.
        /// </summary>
		[Description("Proppants used in the fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimProppant")]
		[XmlElement("proppant")]
        public StimProppant Proppant {
            get {
                return proppantField;
            } 
            set {
                proppantField = value;
                NotifyPropertyChanged("Proppant");
            }
        }

        private StimProppant proppantField; 

        /// <summary>
        /// The density of the fluid.
        /// </summary>
		[Description("The density of the fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// The pH of the fluid.
        /// </summary>
		[Description("The pH of the fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("pH")]
        public double? PH {
            get {
                return pHField;
            } 
            set {
                pHField = value;
                 this.PHSpecified = true;
                NotifyPropertyChanged("PH");
            }
        }

        private double? pHField; 

        /// <summary>
        /// pHSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PHSpecified {
            get {
                return pHSpecifiedField;
            } 
            set {
                pHSpecifiedField = value;
                NotifyPropertyChanged("PHSpecified");
            }
        }

        private bool pHSpecifiedField; 

        /// <summary>
        /// The purpose of the fluid.
        /// </summary>
		[StringLength(256)]
        [Description("The purpose of the fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("purpose")]
        public string Purpose {
            get {
                return purposeField;
            } 
            set {
                purposeField = value;
                NotifyPropertyChanged("Purpose");
            }
        }

        private string purposeField; 

        /// <summary>
        /// The description of the fluid.
        /// </summary>
		[StringLength(256)]
        [Description("The description of the fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// The supplier of the fluid.
        /// </summary>
		[StringLength(64)]
        [Description("The supplier of the fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("supplier")]
        public string Supplier {
            get {
                return supplierField;
            } 
            set {
                supplierField = value;
                NotifyPropertyChanged("Supplier");
            }
        }

        private string supplierField; 

        /// <summary>
        /// The fluid types.
        /// </summary>
		[Description("The fluid types.")]
        [EnergisticsDataTypeAttribute(DataType = "StimFluidType")]
		[XmlElement("fluidType")]
        public StimFluidType? FluidType {
            get {
                return fluidTypeField;
            } 
            set {
                fluidTypeField = value;
                 this.FluidTypeSpecified = true;
                NotifyPropertyChanged("FluidType");
            }
        }

        private StimFluidType? fluidTypeField; 

        /// <summary>
        /// fluidTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidTypeSpecified {
            get {
                return fluidTypeSpecifiedField;
            } 
            set {
                fluidTypeSpecifiedField = value;
                NotifyPropertyChanged("FluidTypeSpecified");
            }
        }

        private bool fluidTypeSpecifiedField; 

        /// <summary>
        /// The fluid subtypes.
        /// </summary>
		[Description("The fluid subtypes.")]
        [EnergisticsDataTypeAttribute(DataType = "StimFluidSubtype")]
		[XmlElement("fluidSubtype")]
        public StimFluidSubtype? FluidSubtype {
            get {
                return fluidSubtypeField;
            } 
            set {
                fluidSubtypeField = value;
                 this.FluidSubtypeSpecified = true;
                NotifyPropertyChanged("FluidSubtype");
            }
        }

        private StimFluidSubtype? fluidSubtypeField; 

        /// <summary>
        /// fluidSubtypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidSubtypeSpecified {
            get {
                return fluidSubtypeSpecifiedField;
            } 
            set {
                fluidSubtypeSpecifiedField = value;
                NotifyPropertyChanged("FluidSubtypeSpecified");
            }
        }

        private bool fluidSubtypeSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Job stage for a well stimulation treatment, where one or more stages are part of a flow path, one or more flow paths are part of a treatment, and one or more treatments are part of a job.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimJobStage", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Job stage for a well stimulation treatment, where one or more stages are part of a flow path, one or more flow paths are part of a treatment, and one or more treatments are part of a job.")]
    public partial class StimJobStage : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of stage for the stimulation job.
        /// </summary>
		[Required]
        [Description("The type of stage for the stimulation job.")]
        [EnergisticsDataTypeAttribute(DataType = "StimStageType")]
		[XmlElement("kind")]
        public StimStageType? Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private StimStageType? kindField; 

        /// <summary>
        /// A human readable name for the stage.
        /// </summary>
		[StringLength(64)]
        [Description("A human readable name for the stage.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A short description of the stage.
        /// </summary>
		[StringLength(256)]
        [Description("A short description of the stage.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Stage number.
        /// </summary>
		[Required]
        [Description("Stage number.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("number")]
        public short? Number {
            get {
                return numberField;
            } 
            set {
                numberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private short? numberField; 

        /// <summary>
        /// Date time of start of this stimulation stage.
        /// </summary>
		[Description("Date time of start of this stimulation stage.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// Date time of end of this stimulation stage.
        /// </summary>
		[Description("Date time of end of this stimulation stage.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// Total pumping time for this stage.
        /// </summary>
		[Description("Total pumping time for this stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("pumpTime")]
        public TimeMeasure PumpTime {
            get {
                return pumpTimeField;
            } 
            set {
                pumpTimeField = value;
                NotifyPropertyChanged("PumpTime");
            }
        }

        private TimeMeasure pumpTimeField; 

        /// <summary>
        /// Starting liquid pump rate in volume per time at the surface.
        /// </summary>
		[Description("Starting liquid pump rate in volume per time at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("startRateSurfaceLiquid")]
        public VolumeFlowRateMeasure StartRateSurfaceLiquid {
            get {
                return startRateSurfaceLiquidField;
            } 
            set {
                startRateSurfaceLiquidField = value;
                NotifyPropertyChanged("StartRateSurfaceLiquid");
            }
        }

        private VolumeFlowRateMeasure startRateSurfaceLiquidField; 

        /// <summary>
        /// Final liquid pump rate in volume per time at the surface..
        /// </summary>
		[Description("Final liquid pump rate in volume per time at the surface..")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("endRateSurfaceLiquid")]
        public VolumeFlowRateMeasure EndRateSurfaceLiquid {
            get {
                return endRateSurfaceLiquidField;
            } 
            set {
                endRateSurfaceLiquidField = value;
                NotifyPropertyChanged("EndRateSurfaceLiquid");
            }
        }

        private VolumeFlowRateMeasure endRateSurfaceLiquidField; 

        /// <summary>
        /// Average liquid pump rate in volume per time at the surface.
        /// </summary>
		[Description("Average liquid pump rate in volume per time at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgRateSurfaceLiquid")]
        public VolumeFlowRateMeasure AvgRateSurfaceLiquid {
            get {
                return avgRateSurfaceLiquidField;
            } 
            set {
                avgRateSurfaceLiquidField = value;
                NotifyPropertyChanged("AvgRateSurfaceLiquid");
            }
        }

        private VolumeFlowRateMeasure avgRateSurfaceLiquidField; 

        /// <summary>
        /// Starting carbon dioxide pump rate in volume per time at the surface.
        /// </summary>
		[Description("Starting carbon dioxide pump rate in volume per time at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("startRateSurfaceCO2")]
        public VolumeFlowRateMeasure StartRateSurfaceCO2 {
            get {
                return startRateSurfaceCO2Field;
            } 
            set {
                startRateSurfaceCO2Field = value;
                NotifyPropertyChanged("StartRateSurfaceCO2");
            }
        }

        private VolumeFlowRateMeasure startRateSurfaceCO2Field; 

        /// <summary>
        /// Final carbon dioxide pump rate in volume per time at the surface.
        /// </summary>
		[Description("Final carbon dioxide pump rate in volume per time at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("endRateSurfaceCO2")]
        public VolumeFlowRateMeasure EndRateSurfaceCO2 {
            get {
                return endRateSurfaceCO2Field;
            } 
            set {
                endRateSurfaceCO2Field = value;
                NotifyPropertyChanged("EndRateSurfaceCO2");
            }
        }

        private VolumeFlowRateMeasure endRateSurfaceCO2Field; 

        /// <summary>
        /// Average carbon dioxide pump rate in volume per time at the surface.
        /// </summary>
		[Description("Average carbon dioxide pump rate in volume per time at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgRateSurfaceCO2")]
        public VolumeFlowRateMeasure AvgRateSurfaceCO2 {
            get {
                return avgRateSurfaceCO2Field;
            } 
            set {
                avgRateSurfaceCO2Field = value;
                NotifyPropertyChanged("AvgRateSurfaceCO2");
            }
        }

        private VolumeFlowRateMeasure avgRateSurfaceCO2Field; 

        /// <summary>
        /// Starting nitrogen pump rate in volume per time at the surface.
        /// </summary>
		[Description("Starting nitrogen pump rate in volume per time at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerTimeMeasure")]
		[XmlElement("startStdRateSurfaceN2")]
        public StandardVolumePerTimeMeasure StartStdRateSurfaceN2 {
            get {
                return startStdRateSurfaceN2Field;
            } 
            set {
                startStdRateSurfaceN2Field = value;
                NotifyPropertyChanged("StartStdRateSurfaceN2");
            }
        }

        private StandardVolumePerTimeMeasure startStdRateSurfaceN2Field; 

        /// <summary>
        /// Final nitrogen pump rate in volume per time at the surface.
        /// </summary>
		[Description("Final nitrogen pump rate in volume per time at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerTimeMeasure")]
		[XmlElement("endStdRateSurfaceN2")]
        public StandardVolumePerTimeMeasure EndStdRateSurfaceN2 {
            get {
                return endStdRateSurfaceN2Field;
            } 
            set {
                endStdRateSurfaceN2Field = value;
                NotifyPropertyChanged("EndStdRateSurfaceN2");
            }
        }

        private StandardVolumePerTimeMeasure endStdRateSurfaceN2Field; 

        /// <summary>
        /// Average nitrogen pump rate in volume per time at the surface.
        /// </summary>
		[Description("Average nitrogen pump rate in volume per time at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerTimeMeasure")]
		[XmlElement("avgStdRateSurfaceN2")]
        public StandardVolumePerTimeMeasure AvgStdRateSurfaceN2 {
            get {
                return avgStdRateSurfaceN2Field;
            } 
            set {
                avgStdRateSurfaceN2Field = value;
                NotifyPropertyChanged("AvgStdRateSurfaceN2");
            }
        }

        private StandardVolumePerTimeMeasure avgStdRateSurfaceN2Field; 

        /// <summary>
        /// Starting surface pressure.
        /// </summary>
		[Description("Starting surface pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("startPresSurface")]
        public PressureMeasure StartPresSurface {
            get {
                return startPresSurfaceField;
            } 
            set {
                startPresSurfaceField = value;
                NotifyPropertyChanged("StartPresSurface");
            }
        }

        private PressureMeasure startPresSurfaceField; 

        /// <summary>
        /// Final surface pressure.
        /// </summary>
		[Description("Final surface pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("endPresSurface")]
        public PressureMeasure EndPresSurface {
            get {
                return endPresSurfaceField;
            } 
            set {
                endPresSurfaceField = value;
                NotifyPropertyChanged("EndPresSurface");
            }
        }

        private PressureMeasure endPresSurfaceField; 

        /// <summary>
        /// Average surface pressure.
        /// </summary>
		[Description("Average surface pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("averagePresSurface")]
        public PressureMeasure AveragePresSurface {
            get {
                return averagePresSurfaceField;
            } 
            set {
                averagePresSurfaceField = value;
                NotifyPropertyChanged("AveragePresSurface");
            }
        }

        private PressureMeasure averagePresSurfaceField; 

        /// <summary>
        /// Starting pump rate in volume per time at bottomhole.
        /// </summary>
		[Description("Starting pump rate in volume per time at bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("startPumpRateBottomhole")]
        public VolumeFlowRateMeasure StartPumpRateBottomhole {
            get {
                return startPumpRateBottomholeField;
            } 
            set {
                startPumpRateBottomholeField = value;
                NotifyPropertyChanged("StartPumpRateBottomhole");
            }
        }

        private VolumeFlowRateMeasure startPumpRateBottomholeField; 

        /// <summary>
        /// Final pump rate in volume per time at bottomhole.
        /// </summary>
		[Description("Final pump rate in volume per time at bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("endPumpRateBottomhole")]
        public VolumeFlowRateMeasure EndPumpRateBottomhole {
            get {
                return endPumpRateBottomholeField;
            } 
            set {
                endPumpRateBottomholeField = value;
                NotifyPropertyChanged("EndPumpRateBottomhole");
            }
        }

        private VolumeFlowRateMeasure endPumpRateBottomholeField; 

        /// <summary>
        /// Average pump rate in volume per time at bottomhole.
        /// </summary>
		[Description("Average pump rate in volume per time at bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgPumpRateBottomhole")]
        public VolumeFlowRateMeasure AvgPumpRateBottomhole {
            get {
                return avgPumpRateBottomholeField;
            } 
            set {
                avgPumpRateBottomholeField = value;
                NotifyPropertyChanged("AvgPumpRateBottomhole");
            }
        }

        private VolumeFlowRateMeasure avgPumpRateBottomholeField; 

        /// <summary>
        /// Starting bottomhole pressure.
        /// </summary>
		[Description("Starting bottomhole pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("startPresBottomhole")]
        public PressureMeasure StartPresBottomhole {
            get {
                return startPresBottomholeField;
            } 
            set {
                startPresBottomholeField = value;
                NotifyPropertyChanged("StartPresBottomhole");
            }
        }

        private PressureMeasure startPresBottomholeField; 

        /// <summary>
        /// Final bottomhole pressure.
        /// </summary>
		[Description("Final bottomhole pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("endPresBottomhole")]
        public PressureMeasure EndPresBottomhole {
            get {
                return endPresBottomholeField;
            } 
            set {
                endPresBottomholeField = value;
                NotifyPropertyChanged("EndPresBottomhole");
            }
        }

        private PressureMeasure endPresBottomholeField; 

        /// <summary>
        /// Average bottomhole pressure.
        /// </summary>
		[Description("Average bottomhole pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("averagePresBottomhole")]
        public PressureMeasure AveragePresBottomhole {
            get {
                return averagePresBottomholeField;
            } 
            set {
                averagePresBottomholeField = value;
                NotifyPropertyChanged("AveragePresBottomhole");
            }
        }

        private PressureMeasure averagePresBottomholeField; 

        /// <summary>
        /// The beginning proppant concentration at the surface.
        /// </summary>
		[Description("The beginning proppant concentration at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("startProppantConcSurface")]
        public DensityMeasure StartProppantConcSurface {
            get {
                return startProppantConcSurfaceField;
            } 
            set {
                startProppantConcSurfaceField = value;
                NotifyPropertyChanged("StartProppantConcSurface");
            }
        }

        private DensityMeasure startProppantConcSurfaceField; 

        /// <summary>
        /// The final proppant concentration at the surface.
        /// </summary>
		[Description("The final proppant concentration at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("endProppantConcSurface")]
        public DensityMeasure EndProppantConcSurface {
            get {
                return endProppantConcSurfaceField;
            } 
            set {
                endProppantConcSurfaceField = value;
                NotifyPropertyChanged("EndProppantConcSurface");
            }
        }

        private DensityMeasure endProppantConcSurfaceField; 

        /// <summary>
        /// The average proppant concentration at the surface.
        /// </summary>
		[Description("The average proppant concentration at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("avgProppantConcSurface")]
        public DensityMeasure AvgProppantConcSurface {
            get {
                return avgProppantConcSurfaceField;
            } 
            set {
                avgProppantConcSurfaceField = value;
                NotifyPropertyChanged("AvgProppantConcSurface");
            }
        }

        private DensityMeasure avgProppantConcSurfaceField; 

        /// <summary>
        /// The beginning proppant concentration bottomhole.
        /// </summary>
		[Description("The beginning proppant concentration bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("startProppantConcBottomhole")]
        public DensityMeasure StartProppantConcBottomhole {
            get {
                return startProppantConcBottomholeField;
            } 
            set {
                startProppantConcBottomholeField = value;
                NotifyPropertyChanged("StartProppantConcBottomhole");
            }
        }

        private DensityMeasure startProppantConcBottomholeField; 

        /// <summary>
        /// The final proppant concentration bottomhole.
        /// </summary>
		[Description("The final proppant concentration bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("endProppantConcBottomhole")]
        public DensityMeasure EndProppantConcBottomhole {
            get {
                return endProppantConcBottomholeField;
            } 
            set {
                endProppantConcBottomholeField = value;
                NotifyPropertyChanged("EndProppantConcBottomhole");
            }
        }

        private DensityMeasure endProppantConcBottomholeField; 

        /// <summary>
        /// The average proppant concentration bottomhole.
        /// </summary>
		[Description("The average proppant concentration bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("avgProppantConcBottomhole")]
        public DensityMeasure AvgProppantConcBottomhole {
            get {
                return avgProppantConcBottomholeField;
            } 
            set {
                avgProppantConcBottomholeField = value;
                NotifyPropertyChanged("AvgProppantConcBottomhole");
            }
        }

        private DensityMeasure avgProppantConcBottomholeField; 

        /// <summary>
        /// Starting nitrogen foam rate.
        /// </summary>
		[Description("Starting nitrogen foam rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("startFoamRateN2")]
        public VolumeFlowRateMeasure StartFoamRateN2 {
            get {
                return startFoamRateN2Field;
            } 
            set {
                startFoamRateN2Field = value;
                NotifyPropertyChanged("StartFoamRateN2");
            }
        }

        private VolumeFlowRateMeasure startFoamRateN2Field; 

        /// <summary>
        /// Final nitrogen foam rate.
        /// </summary>
		[Description("Final nitrogen foam rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("endFoamRateN2")]
        public VolumeFlowRateMeasure EndFoamRateN2 {
            get {
                return endFoamRateN2Field;
            } 
            set {
                endFoamRateN2Field = value;
                NotifyPropertyChanged("EndFoamRateN2");
            }
        }

        private VolumeFlowRateMeasure endFoamRateN2Field; 

        /// <summary>
        /// Starting carbon dioxide foam rate.
        /// </summary>
		[Description("Starting carbon dioxide foam rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("startFoamRateCO2")]
        public VolumeFlowRateMeasure StartFoamRateCO2 {
            get {
                return startFoamRateCO2Field;
            } 
            set {
                startFoamRateCO2Field = value;
                NotifyPropertyChanged("StartFoamRateCO2");
            }
        }

        private VolumeFlowRateMeasure startFoamRateCO2Field; 

        /// <summary>
        /// Final carbon dioxide foam rate.
        /// </summary>
		[Description("Final carbon dioxide foam rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("endFoamRateCO2")]
        public VolumeFlowRateMeasure EndFoamRateCO2 {
            get {
                return endFoamRateCO2Field;
            } 
            set {
                endFoamRateCO2Field = value;
                NotifyPropertyChanged("EndFoamRateCO2");
            }
        }

        private VolumeFlowRateMeasure endFoamRateCO2Field; 

        /// <summary>
        /// The stage volume of the base stage.
        /// </summary>
		[Description("The stage volume of the base stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("fluidVolBase")]
        public VolumeMeasure FluidVolBase {
            get {
                return fluidVolBaseField;
            } 
            set {
                fluidVolBaseField = value;
                NotifyPropertyChanged("FluidVolBase");
            }
        }

        private VolumeMeasure fluidVolBaseField; 

        /// <summary>
        /// The volume of the slurry (dirty) stage.
        /// </summary>
		[Description("The volume of the slurry (dirty) stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("fluidVolSlurry")]
        public VolumeMeasure FluidVolSlurry {
            get {
                return fluidVolSlurryField;
            } 
            set {
                fluidVolSlurryField = value;
                NotifyPropertyChanged("FluidVolSlurry");
            }
        }

        private VolumeMeasure fluidVolSlurryField; 

        /// <summary>
        /// The starting slurry rate.
        /// </summary>
		[Description("The starting slurry rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("slurryRateBegin")]
        public VolumeFlowRateMeasure SlurryRateBegin {
            get {
                return slurryRateBeginField;
            } 
            set {
                slurryRateBeginField = value;
                NotifyPropertyChanged("SlurryRateBegin");
            }
        }

        private VolumeFlowRateMeasure slurryRateBeginField; 

        /// <summary>
        /// The endinging slurry rate.
        /// </summary>
		[Description("The endinging slurry rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("slurryRateEnd")]
        public VolumeFlowRateMeasure SlurryRateEnd {
            get {
                return slurryRateEndField;
            } 
            set {
                slurryRateEndField = value;
                NotifyPropertyChanged("SlurryRateEnd");
            }
        }

        private VolumeFlowRateMeasure slurryRateEndField; 

        /// <summary>
        /// The mass of the proppant at the wellhead.
        /// </summary>
		[Description("The mass of the proppant at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("proppantMassWellHead")]
        public MassMeasure ProppantMassWellHead {
            get {
                return proppantMassWellHeadField;
            } 
            set {
                proppantMassWellHeadField = value;
                NotifyPropertyChanged("ProppantMassWellHead");
            }
        }

        private MassMeasure proppantMassWellHeadField; 

        /// <summary>
        /// The mass of the proppant.
        /// </summary>
		[Description("The mass of the proppant.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("proppantMass")]
        public MassMeasure ProppantMass {
            get {
                return proppantMassField;
            } 
            set {
                proppantMassField = value;
                NotifyPropertyChanged("ProppantMass");
            }
        }

        private MassMeasure proppantMassField; 

        /// <summary>
        /// Maximum pumping pressure.
        /// </summary>
		[Description("Maximum pumping pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxPres")]
        public PressureMeasure MaxPres {
            get {
                return maxPresField;
            } 
            set {
                maxPresField = value;
                NotifyPropertyChanged("MaxPres");
            }
        }

        private PressureMeasure maxPresField; 

        /// <summary>
        /// Maximum slurry rate.
        /// </summary>
		[Description("Maximum slurry rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxSlurryRate")]
        public VolumeFlowRateMeasure MaxSlurryRate {
            get {
                return maxSlurryRateField;
            } 
            set {
                maxSlurryRateField = value;
                NotifyPropertyChanged("MaxSlurryRate");
            }
        }

        private VolumeFlowRateMeasure maxSlurryRateField; 

        /// <summary>
        /// Maximum rate at the wellhead.
        /// </summary>
		[Description("Maximum rate at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxWellheadRate")]
        public VolumeFlowRateMeasure MaxWellheadRate {
            get {
                return maxWellheadRateField;
            } 
            set {
                maxWellheadRateField = value;
                NotifyPropertyChanged("MaxWellheadRate");
            }
        }

        private VolumeFlowRateMeasure maxWellheadRateField; 

        /// <summary>
        /// Maximum nitrogen rate recorded at for the annulus injection for the zone of interest during the stimulation services.
        /// </summary>
		[Description("Maximum nitrogen rate recorded at for the annulus injection for the  zone of interest during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerTimeMeasure")]
		[XmlElement("maxN2StdRate")]
        public StandardVolumePerTimeMeasure MaxN2StdRate {
            get {
                return maxN2StdRateField;
            } 
            set {
                maxN2StdRateField = value;
                NotifyPropertyChanged("MaxN2StdRate");
            }
        }

        private StandardVolumePerTimeMeasure maxN2StdRateField; 

        /// <summary>
        /// Maximum carbon dioxide flow rate recorded for the annulus injection for the zone of interest during the stimulation services.
        /// </summary>
		[Description("Maximum carbon dioxide flow rate recorded for the annulus injection for the zone of  interest during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxCO2LiquidRate")]
        public VolumeFlowRateMeasure MaxCO2LiquidRate {
            get {
                return maxCO2LiquidRateField;
            } 
            set {
                maxCO2LiquidRateField = value;
                NotifyPropertyChanged("MaxCO2LiquidRate");
            }
        }

        private VolumeFlowRateMeasure maxCO2LiquidRateField; 

        /// <summary>
        /// Stage maximum proppant concentration at the wellhead for the stage during the stimulation services.
        /// </summary>
		[Description("Stage maximum proppant concentration at the wellhead for the stage  during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("maxPropConc")]
        public DensityMeasure MaxPropConc {
            get {
                return maxPropConcField;
            } 
            set {
                maxPropConcField = value;
                NotifyPropertyChanged("MaxPropConc");
            }
        }

        private DensityMeasure maxPropConcField; 

        /// <summary>
        /// Maximum proppant concentration exiting equipment for the stage during the stimulation services.
        /// </summary>
		[Description("Maximum proppant concentration exiting equipment for the stage  during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("maxSlurryPropConc")]
        public DensityMeasure MaxSlurryPropConc {
            get {
                return maxSlurryPropConcField;
            } 
            set {
                maxSlurryPropConcField = value;
                NotifyPropertyChanged("MaxSlurryPropConc");
            }
        }

        private DensityMeasure maxSlurryPropConcField; 

        /// <summary>
        /// Average proppant concentration at the wellhead for the stage during the stimulation services.
        /// </summary>
		[Description("Average proppant concentration at the wellhead for the  stage during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("avgPropConc")]
        public DensityMeasure AvgPropConc {
            get {
                return avgPropConcField;
            } 
            set {
                avgPropConcField = value;
                NotifyPropertyChanged("AvgPropConc");
            }
        }

        private DensityMeasure avgPropConcField; 

        /// <summary>
        /// Average proppant concentration exiting equipment for the stage during the stimulation services.
        /// </summary>
		[Description("Average proppant concentration exiting equipment for the stage  during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("avgSlurryPropConc")]
        public DensityMeasure AvgSlurryPropConc {
            get {
                return avgSlurryPropConcField;
            } 
            set {
                avgSlurryPropConcField = value;
                NotifyPropertyChanged("AvgSlurryPropConc");
            }
        }

        private DensityMeasure avgSlurryPropConcField; 

        /// <summary>
        /// Average fluid temperature during the stage.
        /// </summary>
		[Description("Average fluid temperature during the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("avgTemperature")]
        public ThermodynamicTemperatureMeasure AvgTemperature {
            get {
                return avgTemperatureField;
            } 
            set {
                avgTemperatureField = value;
                NotifyPropertyChanged("AvgTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure avgTemperatureField; 

        /// <summary>
        /// Internal Gas Phase percentage of foam for the stage during the stimulation services.
        /// </summary>
		[Description("Internal Gas Phase percentage of foam for the stage during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("avgInternalPhaseFraction")]
        public VolumePerVolumeMeasurePercent AvgInternalPhaseFraction {
            get {
                return avgInternalPhaseFractionField;
            } 
            set {
                avgInternalPhaseFractionField = value;
                NotifyPropertyChanged("AvgInternalPhaseFraction");
            }
        }

        private VolumePerVolumeMeasurePercent avgInternalPhaseFractionField; 

        /// <summary>
        /// Base quality percentage of foam for the stage during the stimulation services.
        /// </summary>
		[Description("Base quality percentage of foam for the stage during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("avgBaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AvgBaseFluidQuality {
            get {
                return avgBaseFluidQualityField;
            } 
            set {
                avgBaseFluidQualityField = value;
                NotifyPropertyChanged("AvgBaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasurePercent avgBaseFluidQualityField; 

        /// <summary>
        /// Base quality nitrogen percentage of foam for the stage during the stimulation services.
        /// </summary>
		[Description("Base quality nitrogen percentage of foam for the stage during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("avgN2BaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AvgN2BaseFluidQuality {
            get {
                return avgN2BaseFluidQualityField;
            } 
            set {
                avgN2BaseFluidQualityField = value;
                NotifyPropertyChanged("AvgN2BaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasurePercent avgN2BaseFluidQualityField; 

        /// <summary>
        /// Base quality carbon dioxide percent of foam for the stage during the stimulation services.
        /// </summary>
		[Description("Base quality carbon dioxide percent of foam for the stage during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("avgCO2BaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AvgCO2BaseFluidQuality {
            get {
                return avgCO2BaseFluidQualityField;
            } 
            set {
                avgCO2BaseFluidQualityField = value;
                NotifyPropertyChanged("AvgCO2BaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasurePercent avgCO2BaseFluidQualityField; 

        /// <summary>
        /// Hydraulic horse power used for stage.
        /// </summary>
		[Description("Hydraulic horse power used for stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("avgHydraulicPower")]
        public PowerMeasure AvgHydraulicPower {
            get {
                return avgHydraulicPowerField;
            } 
            set {
                avgHydraulicPowerField = value;
                NotifyPropertyChanged("AvgHydraulicPower");
            }
        }

        private PowerMeasure avgHydraulicPowerField; 

        /// <summary>
        /// Average base fluid rate.
        /// </summary>
		[Description("Average base fluid rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgBaseFluidRate")]
        public VolumeFlowRateMeasure AvgBaseFluidRate {
            get {
                return avgBaseFluidRateField;
            } 
            set {
                avgBaseFluidRateField = value;
                NotifyPropertyChanged("AvgBaseFluidRate");
            }
        }

        private VolumeFlowRateMeasure avgBaseFluidRateField; 

        /// <summary>
        /// Average slurry rate.
        /// </summary>
		[Description("Average slurry rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgSlurryRate")]
        public VolumeFlowRateMeasure AvgSlurryRate {
            get {
                return avgSlurryRateField;
            } 
            set {
                avgSlurryRateField = value;
                NotifyPropertyChanged("AvgSlurryRate");
            }
        }

        private VolumeFlowRateMeasure avgSlurryRateField; 

        /// <summary>
        /// Average wellhead rate.
        /// </summary>
		[Description("Average wellhead rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgWellheadRate")]
        public VolumeFlowRateMeasure AvgWellheadRate {
            get {
                return avgWellheadRateField;
            } 
            set {
                avgWellheadRateField = value;
                NotifyPropertyChanged("AvgWellheadRate");
            }
        }

        private VolumeFlowRateMeasure avgWellheadRateField; 

        /// <summary>
        /// Average nitrogen rate.
        /// </summary>
		[Description("Average nitrogen rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerTimeMeasure")]
		[XmlElement("avgN2StdRate")]
        public StandardVolumePerTimeMeasure AvgN2StdRate {
            get {
                return avgN2StdRateField;
            } 
            set {
                avgN2StdRateField = value;
                NotifyPropertyChanged("AvgN2StdRate");
            }
        }

        private StandardVolumePerTimeMeasure avgN2StdRateField; 

        /// <summary>
        /// Average carbon dioxide rate.
        /// </summary>
		[Description("Average carbon dioxide rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgCO2Rate")]
        public VolumeFlowRateMeasure AvgCO2Rate {
            get {
                return avgCO2RateField;
            } 
            set {
                avgCO2RateField = value;
                NotifyPropertyChanged("AvgCO2Rate");
            }
        }

        private VolumeFlowRateMeasure avgCO2RateField; 

        /// <summary>
        /// Base fluid volume entering equipment.
        /// </summary>
		[Description("Base fluid volume entering equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("baseFluidVol")]
        public VolumeMeasure BaseFluidVol {
            get {
                return baseFluidVolField;
            } 
            set {
                baseFluidVolField = value;
                NotifyPropertyChanged("BaseFluidVol");
            }
        }

        private VolumeMeasure baseFluidVolField; 

        /// <summary>
        /// Slurry volume exiting equipment (assumption that this will enter well).
        /// </summary>
		[Description("Slurry volume exiting equipment (assumption that this will enter well).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("slurryVol")]
        public VolumeMeasure SlurryVol {
            get {
                return slurryVolField;
            } 
            set {
                slurryVolField = value;
                NotifyPropertyChanged("SlurryVol");
            }
        }

        private VolumeMeasure slurryVolField; 

        /// <summary>
        /// Slurry volume entering the well.
        /// </summary>
		[Description("Slurry volume entering the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("wellheadVol")]
        public VolumeMeasure WellheadVol {
            get {
                return wellheadVolField;
            } 
            set {
                wellheadVolField = value;
                NotifyPropertyChanged("WellheadVol");
            }
        }

        private VolumeMeasure wellheadVolField; 

        /// <summary>
        /// PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the average of all the pmax pressures calculated for this stage.
        /// </summary>
		[Description("PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the average of all the pmax pressures calculated for this stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxPmaxPacPres")]
        public PressureMeasure MaxPmaxPacPres {
            get {
                return maxPmaxPacPresField;
            } 
            set {
                maxPmaxPacPresField = value;
                NotifyPropertyChanged("MaxPmaxPacPres");
            }
        }

        private PressureMeasure maxPmaxPacPresField; 

        /// <summary>
        /// Maximum allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.
        /// </summary>
		[Description("Maximum allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxPmaxWeaklinkPres")]
        public PressureMeasure MaxPmaxWeaklinkPres {
            get {
                return maxPmaxWeaklinkPresField;
            } 
            set {
                maxPmaxWeaklinkPresField = value;
                NotifyPropertyChanged("MaxPmaxWeaklinkPres");
            }
        }

        private PressureMeasure maxPmaxWeaklinkPresField; 

        /// <summary>
        /// Maximum gel mixing rate entering the flow stream for the stage.
        /// </summary>
		[Description("Maximum gel mixing rate entering the flow stream for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxGelRate")]
        public VolumeFlowRateMeasure MaxGelRate {
            get {
                return maxGelRateField;
            } 
            set {
                maxGelRateField = value;
                NotifyPropertyChanged("MaxGelRate");
            }
        }

        private VolumeFlowRateMeasure maxGelRateField; 

        /// <summary>
        /// Maximum oil mixing rate entering the flow stream for the stage.
        /// </summary>
		[Description("Maximum oil mixing rate entering the flow stream for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxOilRate")]
        public VolumeFlowRateMeasure MaxOilRate {
            get {
                return maxOilRateField;
            } 
            set {
                maxOilRateField = value;
                NotifyPropertyChanged("MaxOilRate");
            }
        }

        private VolumeFlowRateMeasure maxOilRateField; 

        /// <summary>
        /// Maximum acid mixing rate entering the flow stream for the stage.
        /// </summary>
		[Description("Maximum acid mixing rate entering the flow stream for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxAcidRate")]
        public VolumeFlowRateMeasure MaxAcidRate {
            get {
                return maxAcidRateField;
            } 
            set {
                maxAcidRateField = value;
                NotifyPropertyChanged("MaxAcidRate");
            }
        }

        private VolumeFlowRateMeasure maxAcidRateField; 

        /// <summary>
        /// Average gel mixing rate entering the flow stream for the stage.
        /// </summary>
		[Description("Average gel mixing rate entering the flow stream for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgGelRate")]
        public VolumeFlowRateMeasure AvgGelRate {
            get {
                return avgGelRateField;
            } 
            set {
                avgGelRateField = value;
                NotifyPropertyChanged("AvgGelRate");
            }
        }

        private VolumeFlowRateMeasure avgGelRateField; 

        /// <summary>
        /// Average oil mixing rate entering the flow stream for the stage.
        /// </summary>
		[Description("Average oil mixing rate entering the flow stream for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgOilRate")]
        public VolumeFlowRateMeasure AvgOilRate {
            get {
                return avgOilRateField;
            } 
            set {
                avgOilRateField = value;
                NotifyPropertyChanged("AvgOilRate");
            }
        }

        private VolumeFlowRateMeasure avgOilRateField; 

        /// <summary>
        /// Average acid mixing rate entering the flow stream for the stage.
        /// </summary>
		[Description("Average acid mixing rate entering the flow stream for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgAcidRate")]
        public VolumeFlowRateMeasure AvgAcidRate {
            get {
                return avgAcidRateField;
            } 
            set {
                avgAcidRateField = value;
                NotifyPropertyChanged("AvgAcidRate");
            }
        }

        private VolumeFlowRateMeasure avgAcidRateField; 

        /// <summary>
        /// Gel fluid volume for the stage during the stimulation services.
        /// </summary>
		[Description("Gel fluid volume for the stage during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("gelVolume")]
        public VolumeMeasure GelVolume {
            get {
                return gelVolumeField;
            } 
            set {
                gelVolumeField = value;
                NotifyPropertyChanged("GelVolume");
            }
        }

        private VolumeMeasure gelVolumeField; 

        /// <summary>
        /// Oil fluid volume for the stage during the stimulation services.
        /// </summary>
		[Description("Oil fluid volume for the stage during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("oilVolume")]
        public VolumeMeasure OilVolume {
            get {
                return oilVolumeField;
            } 
            set {
                oilVolumeField = value;
                NotifyPropertyChanged("OilVolume");
            }
        }

        private VolumeMeasure oilVolumeField; 

        /// <summary>
        /// Acid fluid volume for the stage during the stimulation services.
        /// </summary>
		[Description("Acid fluid volume for the stage during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("acidVolume")]
        public VolumeMeasure AcidVolume {
            get {
                return acidVolumeField;
            } 
            set {
                acidVolumeField = value;
                NotifyPropertyChanged("AcidVolume");
            }
        }

        private VolumeMeasure acidVolumeField; 

        /// <summary>
        /// Base fluid volume recorded after equipment set to bypass.
        /// </summary>
		[Description("Base fluid volume recorded after equipment set to bypass.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("baseFluidBypassVol")]
        public VolumeMeasure BaseFluidBypassVol {
            get {
                return baseFluidBypassVolField;
            } 
            set {
                baseFluidBypassVolField = value;
                NotifyPropertyChanged("BaseFluidBypassVol");
            }
        }

        private VolumeMeasure baseFluidBypassVolField; 

        /// <summary>
        /// Numeric value used to scale a calculated rheological friction.
        /// </summary>
		[Description("Numeric value used to scale a calculated rheological friction.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("frictionFactor")]
        public double? FrictionFactor {
            get {
                return frictionFactorField;
            } 
            set {
                frictionFactorField = value;
                 this.FrictionFactorSpecified = true;
                NotifyPropertyChanged("FrictionFactor");
            }
        }

        private double? frictionFactorField; 

        /// <summary>
        /// frictionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FrictionFactorSpecified {
            get {
                return frictionFactorSpecifiedField;
            } 
            set {
                frictionFactorSpecifiedField = value;
                NotifyPropertyChanged("FrictionFactorSpecified");
            }
        }

        private bool frictionFactorSpecifiedField; 

        /// <summary>
        /// The fluid used for this stage of the stimulation job.
        /// </summary>
		[Description("The fluid used for this stage of the stimulation job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimFluid")]
		[XmlElement("stageFluid")]
        public StimFluid StageFluid {
            get {
                return stageFluidField;
            } 
            set {
                stageFluidField = value;
                NotifyPropertyChanged("StageFluid");
            }
        }

        private StimFluid stageFluidField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// In a production enhancement job, this item constitutes the data for a tubular in the hole.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimTubular", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("In a production enhancement job, this item constitutes the data for a tubular in the hole.")]
    public partial class StimTubular : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of tubular (e.g., casing, tubing, liner, packer, open hole, other).
        /// </summary>
		[StringLength(32)]
        [Description("The type of tubular (e.g., casing, tubing, liner, packer, open hole, other).")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// The inside diameter of the tubular used.
        /// </summary>
		[Description("The inside diameter of the tubular used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("id")]
        public LengthMeasure Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private LengthMeasure idField; 

        /// <summary>
        /// The outside diameter of the tubular used.
        /// </summary>
		[Description("The outside diameter of the tubular used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("od")]
        public LengthMeasure OuterDiameter {
            get {
                return odField;
            } 
            set {
                odField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure odField; 

        /// <summary>
        /// The weight per length of the tubular.
        /// </summary>
		[Description("The weight per length of the tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massPerLengthMeasure")]
		[XmlElement("weight")]
        public MassPerLengthMeasure Weight {
            get {
                return weightField;
            } 
            set {
                weightField = value;
                NotifyPropertyChanged("Weight");
            }
        }

        private MassPerLengthMeasure weightField; 

        /// <summary>
        /// The measured depth of the top of the tubular.
        /// </summary>
		[Description("The measured depth of the top of the tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// The measured depth of the bottom of the tubular.
        /// </summary>
		[Description("The measured depth of the bottom of the tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// The true vertical depth of the top of the tubular.
        /// </summary>
		[Description("The true vertical depth of the top of the tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// The true vertical depth of the bottom of the tubular.
        /// </summary>
		[Description("The true vertical depth of the bottom of the tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// The volume per length of the tubular.
        /// </summary>
		[Description("The volume per length of the tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerLengthMeasure")]
		[XmlElement("volumeFactor")]
        public VolumePerLengthMeasure VolumeFactor {
            get {
                return volumeFactorField;
            } 
            set {
                volumeFactorField = value;
                NotifyPropertyChanged("VolumeFactor");
            }
        }

        private VolumePerLengthMeasure volumeFactorField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - the flow path for a well stimulation job.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimFlowPath", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - the flow path for a well stimulation job.")]
    public partial class StimFlowPath : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of flow path.
        /// </summary>
		[Required]
        [Description("The type of flow path.")]
        [EnergisticsDataTypeAttribute(DataType = "StimStageFlowPathType")]
		[XmlElement("kind")]
        public StimStageFlowPathType? Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private StimStageFlowPathType? kindField; 

        /// <summary>
        /// A human readable name for the flow path.
        /// </summary>
		[StringLength(64)]
        [Description("A human readable name for the flow path.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A short description of the flow path.
        /// </summary>
		[StringLength(256)]
        [Description("A short description of the flow path.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Maximum pressure.
        /// </summary>
		[Description("Maximum pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxTreatmentPres")]
        public PressureMeasure MaxTreatmentPres {
            get {
                return maxTreatmentPresField;
            } 
            set {
                maxTreatmentPresField = value;
                NotifyPropertyChanged("MaxTreatmentPres");
            }
        }

        private PressureMeasure maxTreatmentPresField; 

        /// <summary>
        /// Maximum dirty rate.
        /// </summary>
		[Description("Maximum dirty rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxSlurryRate")]
        public VolumeFlowRateMeasure MaxSlurryRate {
            get {
                return maxSlurryRateField;
            } 
            set {
                maxSlurryRateField = value;
                NotifyPropertyChanged("MaxSlurryRate");
            }
        }

        private VolumeFlowRateMeasure maxSlurryRateField; 

        /// <summary>
        /// Maximum rate at the wellhead.
        /// </summary>
		[Description("Maximum rate at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxWellheadRate")]
        public VolumeFlowRateMeasure MaxWellheadRate {
            get {
                return maxWellheadRateField;
            } 
            set {
                maxWellheadRateField = value;
                NotifyPropertyChanged("MaxWellheadRate");
            }
        }

        private VolumeFlowRateMeasure maxWellheadRateField; 

        /// <summary>
        /// Maximum nitrogen rate recorded at for the annulus injection for the Zone of interest during the stimulation services.
        /// </summary>
		[Description("Maximum nitrogen rate recorded at for the annulus injection for  the Zone of interest during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerTimeMeasure")]
		[XmlElement("maxN2StdRate")]
        public StandardVolumePerTimeMeasure MaxN2StdRate {
            get {
                return maxN2StdRateField;
            } 
            set {
                maxN2StdRateField = value;
                NotifyPropertyChanged("MaxN2StdRate");
            }
        }

        private StandardVolumePerTimeMeasure maxN2StdRateField; 

        /// <summary>
        /// Maximum carbon dioxide flow rate recorded for the annulus injection for the zone of interest during the stimulation services.
        /// </summary>
		[Description("Maximum carbon dioxide flow rate recorded for the annulus injection for the  zone of interest during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxCO2LiquidRate")]
        public VolumeFlowRateMeasure MaxCO2LiquidRate {
            get {
                return maxCO2LiquidRateField;
            } 
            set {
                maxCO2LiquidRateField = value;
                NotifyPropertyChanged("MaxCO2LiquidRate");
            }
        }

        private VolumeFlowRateMeasure maxCO2LiquidRateField; 

        /// <summary>
        /// Maximum gel flow rate during the stimulation services.
        /// </summary>
		[Description("Maximum gel flow rate during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxGelRate")]
        public VolumeFlowRateMeasure MaxGelRate {
            get {
                return maxGelRateField;
            } 
            set {
                maxGelRateField = value;
                NotifyPropertyChanged("MaxGelRate");
            }
        }

        private VolumeFlowRateMeasure maxGelRateField; 

        /// <summary>
        /// Maximum oil flow rate during the stimulation services.
        /// </summary>
		[Description("Maximum oil flow rate during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxOilRate")]
        public VolumeFlowRateMeasure MaxOilRate {
            get {
                return maxOilRateField;
            } 
            set {
                maxOilRateField = value;
                NotifyPropertyChanged("MaxOilRate");
            }
        }

        private VolumeFlowRateMeasure maxOilRateField; 

        /// <summary>
        /// Maximum acid flow rate during the stimulation services.
        /// </summary>
		[Description("Maximum acid flow rate during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxAcidRate")]
        public VolumeFlowRateMeasure MaxAcidRate {
            get {
                return maxAcidRateField;
            } 
            set {
                maxAcidRateField = value;
                NotifyPropertyChanged("MaxAcidRate");
            }
        }

        private VolumeFlowRateMeasure maxAcidRateField; 

        /// <summary>
        /// Maximum proppant concentration at the wellhead.
        /// </summary>
		[Description("Maximum proppant concentration at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("maxPropConc")]
        public DensityMeasure MaxPropConc {
            get {
                return maxPropConcField;
            } 
            set {
                maxPropConcField = value;
                NotifyPropertyChanged("MaxPropConc");
            }
        }

        private DensityMeasure maxPropConcField; 

        /// <summary>
        /// Maximum proppant concentration exiting equipment.
        /// </summary>
		[Description("Maximum proppant concentration exiting equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("maxSlurryPropConc")]
        public DensityMeasure MaxSlurryPropConc {
            get {
                return maxSlurryPropConcField;
            } 
            set {
                maxSlurryPropConcField = value;
                NotifyPropertyChanged("MaxSlurryPropConc");
            }
        }

        private DensityMeasure maxSlurryPropConcField; 

        /// <summary>
        /// Average pressure.
        /// </summary>
		[Description("Average pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("avgTreatPres")]
        public PressureMeasure AvgTreatPres {
            get {
                return avgTreatPresField;
            } 
            set {
                avgTreatPresField = value;
                NotifyPropertyChanged("AvgTreatPres");
            }
        }

        private PressureMeasure avgTreatPresField; 

        /// <summary>
        /// Average base fluid flow rate.
        /// </summary>
		[Description("Average base fluid flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgBaseFluidRate")]
        public VolumeFlowRateMeasure AvgBaseFluidRate {
            get {
                return avgBaseFluidRateField;
            } 
            set {
                avgBaseFluidRateField = value;
                NotifyPropertyChanged("AvgBaseFluidRate");
            }
        }

        private VolumeFlowRateMeasure avgBaseFluidRateField; 

        /// <summary>
        /// Average slurry flow rate.
        /// </summary>
		[Description("Average slurry flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgSlurryRate")]
        public VolumeFlowRateMeasure AvgSlurryRate {
            get {
                return avgSlurryRateField;
            } 
            set {
                avgSlurryRateField = value;
                NotifyPropertyChanged("AvgSlurryRate");
            }
        }

        private VolumeFlowRateMeasure avgSlurryRateField; 

        /// <summary>
        /// Average wellhead rate.
        /// </summary>
		[Description("Average wellhead rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgWellheadRate")]
        public VolumeFlowRateMeasure AvgWellheadRate {
            get {
                return avgWellheadRateField;
            } 
            set {
                avgWellheadRateField = value;
                NotifyPropertyChanged("AvgWellheadRate");
            }
        }

        private VolumeFlowRateMeasure avgWellheadRateField; 

        /// <summary>
        /// Average nitrigen rate.
        /// </summary>
		[Description("Average nitrigen rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerTimeMeasure")]
		[XmlElement("avgN2StdRate")]
        public StandardVolumePerTimeMeasure AvgN2StdRate {
            get {
                return avgN2StdRateField;
            } 
            set {
                avgN2StdRateField = value;
                NotifyPropertyChanged("AvgN2StdRate");
            }
        }

        private StandardVolumePerTimeMeasure avgN2StdRateField; 

        /// <summary>
        /// Average carbon dioxide rate.
        /// </summary>
		[Description("Average carbon dioxide rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgCO2LiquidRate")]
        public VolumeFlowRateMeasure AvgCO2LiquidRate {
            get {
                return avgCO2LiquidRateField;
            } 
            set {
                avgCO2LiquidRateField = value;
                NotifyPropertyChanged("AvgCO2LiquidRate");
            }
        }

        private VolumeFlowRateMeasure avgCO2LiquidRateField; 

        /// <summary>
        /// Average gel mixing rate entering the flow stream for the flow path.
        /// </summary>
		[Description("Average gel mixing rate entering the flow stream for the flow path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgGelRate")]
        public VolumeFlowRateMeasure AvgGelRate {
            get {
                return avgGelRateField;
            } 
            set {
                avgGelRateField = value;
                NotifyPropertyChanged("AvgGelRate");
            }
        }

        private VolumeFlowRateMeasure avgGelRateField; 

        /// <summary>
        /// Average oil mixing rate entering the flow stream for the flow path.
        /// </summary>
		[Description("Average oil mixing rate entering the flow stream for the flow path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgOilRate")]
        public VolumeFlowRateMeasure AvgOilRate {
            get {
                return avgOilRateField;
            } 
            set {
                avgOilRateField = value;
                NotifyPropertyChanged("AvgOilRate");
            }
        }

        private VolumeFlowRateMeasure avgOilRateField; 

        /// <summary>
        /// Average acid mixing rate entering the flow stream for the flow path.
        /// </summary>
		[Description("Average acid mixing rate entering the flow stream for the flow path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgAcidRate")]
        public VolumeFlowRateMeasure AvgAcidRate {
            get {
                return avgAcidRateField;
            } 
            set {
                avgAcidRateField = value;
                NotifyPropertyChanged("AvgAcidRate");
            }
        }

        private VolumeFlowRateMeasure avgAcidRateField; 

        /// <summary>
        /// Average proppant concentration at the wellhead.
        /// </summary>
		[Description("Average proppant concentration at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("avgPropConc")]
        public DensityMeasure AvgPropConc {
            get {
                return avgPropConcField;
            } 
            set {
                avgPropConcField = value;
                NotifyPropertyChanged("AvgPropConc");
            }
        }

        private DensityMeasure avgPropConcField; 

        /// <summary>
        /// Average proppant concentration exiting equipment.
        /// </summary>
		[Description("Average proppant concentration exiting equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("avgSlurryPropConc")]
        public DensityMeasure AvgSlurryPropConc {
            get {
                return avgSlurryPropConcField;
            } 
            set {
                avgSlurryPropConcField = value;
                NotifyPropertyChanged("AvgSlurryPropConc");
            }
        }

        private DensityMeasure avgSlurryPropConcField; 

        /// <summary>
        /// Average fluid temperature during the stimulation services for this flow path.
        /// </summary>
		[Description("Average fluid temperature during the stimulation services for this flow path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("avgTemperature")]
        public ThermodynamicTemperatureMeasure AvgTemperature {
            get {
                return avgTemperatureField;
            } 
            set {
                avgTemperatureField = value;
                NotifyPropertyChanged("AvgTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure avgTemperatureField; 

        /// <summary>
        /// Internal gas phase percentage of foam for the flowpath during the stimulation services.
        /// </summary>
		[Description("Internal gas phase percentage of foam for the flowpath during the stimulation services.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("avgIntervalPhaseFraction")]
        public short? AvgIntervalPhaseFraction {
            get {
                return avgIntervalPhaseFractionField;
            } 
            set {
                avgIntervalPhaseFractionField = value;
                 this.AvgIntervalPhaseFractionSpecified = true;
                NotifyPropertyChanged("AvgIntervalPhaseFraction");
            }
        }

        private short? avgIntervalPhaseFractionField; 

        /// <summary>
        /// avgIntervalPhaseFractionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AvgIntervalPhaseFractionSpecified {
            get {
                return avgIntervalPhaseFractionSpecifiedField;
            } 
            set {
                avgIntervalPhaseFractionSpecifiedField = value;
                NotifyPropertyChanged("AvgIntervalPhaseFractionSpecified");
            }
        }

        private bool avgIntervalPhaseFractionSpecifiedField; 

        /// <summary>
        /// Base fluid quality percentage of foam for the flowpath during the stimulation services.
        /// </summary>
		[Description("Base fluid quality percentage of foam for the flowpath during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("avgBaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AvgBaseFluidQuality {
            get {
                return avgBaseFluidQualityField;
            } 
            set {
                avgBaseFluidQualityField = value;
                NotifyPropertyChanged("AvgBaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasurePercent avgBaseFluidQualityField; 

        /// <summary>
        /// Base fluid quality nitrogen percentage of foam for the flowpath during the stimulation services.
        /// </summary>
		[Description("Base fluid quality nitrogen percentage of foam for the flowpath during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("avgN2BaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AvgN2BaseFluidQuality {
            get {
                return avgN2BaseFluidQualityField;
            } 
            set {
                avgN2BaseFluidQualityField = value;
                NotifyPropertyChanged("AvgN2BaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasurePercent avgN2BaseFluidQualityField; 

        /// <summary>
        /// Base fluid quality carbon dioxide percentage of foam for the flowpath during the stimulation services.
        /// </summary>
		[Description("Base fluid quality carbon dioxide percentage of foam for the flowpath during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("avgCO2BaseFluidQuality")]
        public VolumePerVolumeMeasurePercent AvgCO2BaseFluidQuality {
            get {
                return avgCO2BaseFluidQualityField;
            } 
            set {
                avgCO2BaseFluidQualityField = value;
                NotifyPropertyChanged("AvgCO2BaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasurePercent avgCO2BaseFluidQualityField; 

        /// <summary>
        /// Hydraulic horse power used for flowpath.
        /// </summary>
		[Description("Hydraulic horse power used for flowpath.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("avgHydraulicPower")]
        public PowerMeasure AvgHydraulicPower {
            get {
                return avgHydraulicPowerField;
            } 
            set {
                avgHydraulicPowerField = value;
                NotifyPropertyChanged("AvgHydraulicPower");
            }
        }

        private PowerMeasure avgHydraulicPowerField; 

        /// <summary>
        /// Base fluid volume entering equipment.
        /// </summary>
		[Description("Base fluid volume entering equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("baseFluidVol")]
        public VolumeMeasure BaseFluidVol {
            get {
                return baseFluidVolField;
            } 
            set {
                baseFluidVolField = value;
                NotifyPropertyChanged("BaseFluidVol");
            }
        }

        private VolumeMeasure baseFluidVolField; 

        /// <summary>
        /// Dirty volume exiting equipment (assumption that this will enter well).
        /// </summary>
		[Description("Dirty volume exiting equipment (assumption that this will enter well).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("slurryVol")]
        public VolumeMeasure SlurryVol {
            get {
                return slurryVolField;
            } 
            set {
                slurryVolField = value;
                NotifyPropertyChanged("SlurryVol");
            }
        }

        private VolumeMeasure slurryVolField; 

        /// <summary>
        /// Fluid volume entering the well.
        /// </summary>
		[Description("Fluid volume entering the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("wellheadVol")]
        public VolumeMeasure WellheadVol {
            get {
                return wellheadVolField;
            } 
            set {
                wellheadVolField = value;
                NotifyPropertyChanged("WellheadVol");
            }
        }

        private VolumeMeasure wellheadVolField; 

        /// <summary>
        /// Nitrogen volume.
        /// </summary>
		[Description("Nitrogen volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumeMeasure")]
		[XmlElement("stdVolN2")]
        public StandardVolumeMeasure StdVolN2 {
            get {
                return stdVolN2Field;
            } 
            set {
                stdVolN2Field = value;
                NotifyPropertyChanged("StdVolN2");
            }
        }

        private StandardVolumeMeasure stdVolN2Field; 

        /// <summary>
        /// The mass of carbon dioxide used.
        /// </summary>
		[Description("The mass of carbon dioxide used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("massCO2")]
        public MassMeasure MassCO2 {
            get {
                return massCO2Field;
            } 
            set {
                massCO2Field = value;
                NotifyPropertyChanged("MassCO2");
            }
        }

        private MassMeasure massCO2Field; 

        /// <summary>
        /// Gel fluid volume for the flowpath during the stimulation services.
        /// </summary>
		[Description("Gel fluid volume for the flowpath during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("gelVol")]
        public VolumeMeasure GelVol {
            get {
                return gelVolField;
            } 
            set {
                gelVolField = value;
                NotifyPropertyChanged("GelVol");
            }
        }

        private VolumeMeasure gelVolField; 

        /// <summary>
        /// Oil fluid volume for the flowpath during the stimulation services.
        /// </summary>
		[Description("Oil fluid volume for the flowpath during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("oilVol")]
        public VolumeMeasure OilVol {
            get {
                return oilVolField;
            } 
            set {
                oilVolField = value;
                NotifyPropertyChanged("OilVol");
            }
        }

        private VolumeMeasure oilVolField; 

        /// <summary>
        /// Acid fluid volume for the flowpath during the stimulation services.
        /// </summary>
		[Description("Acid fluid volume for the flowpath during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("acidVol")]
        public VolumeMeasure AcidVol {
            get {
                return acidVolField;
            } 
            set {
                acidVolField = value;
                NotifyPropertyChanged("AcidVol");
            }
        }

        private VolumeMeasure acidVolField; 

        /// <summary>
        /// Base volume recorded after equipment set to bypass.
        /// </summary>
		[Description("Base volume recorded after equipment set to bypass.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("baseFluidBypassVol")]
        public VolumeMeasure BaseFluidBypassVol {
            get {
                return baseFluidBypassVolField;
            } 
            set {
                baseFluidBypassVolField = value;
                NotifyPropertyChanged("BaseFluidBypassVol");
            }
        }

        private VolumeMeasure baseFluidBypassVolField; 

        /// <summary>
        /// The mass of proppant used.
        /// </summary>
		[Description("The mass of proppant used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("propMass")]
        public MassMeasure PropMass {
            get {
                return propMassField;
            } 
            set {
                propMassField = value;
                NotifyPropertyChanged("PropMass");
            }
        }

        private MassMeasure propMassField; 

        /// <summary>
        /// PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the maximum of all the pmax pressures calculated for this flow path. 
        /// </summary>
		[Description("PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the maximum of all the pmax pressures calculated for this flow path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxPmaxPacPres")]
        public PressureMeasure MaxPmaxPacPres {
            get {
                return maxPmaxPacPresField;
            } 
            set {
                maxPmaxPacPresField = value;
                NotifyPropertyChanged("MaxPmaxPacPres");
            }
        }

        private PressureMeasure maxPmaxPacPresField; 

        /// <summary>
        /// Maximum allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.
        /// </summary>
		[Description("Maximum allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxPmaxWeaklinkPres")]
        public PressureMeasure MaxPmaxWeaklinkPres {
            get {
                return maxPmaxWeaklinkPresField;
            } 
            set {
                maxPmaxWeaklinkPresField = value;
                NotifyPropertyChanged("MaxPmaxWeaklinkPres");
            }
        }

        private PressureMeasure maxPmaxWeaklinkPresField; 

        /// <summary>
        /// PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the average of all the pmax pressures calculated for this flow path.
        /// </summary>
		[Description("PMax prediction allows the tool assembly to be designed with expected pressures.  It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the average of all the pmax pressures calculated for this flow path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("avgPmaxPacPres")]
        public PressureMeasure AvgPmaxPacPres {
            get {
                return avgPmaxPacPresField;
            } 
            set {
                avgPmaxPacPresField = value;
                NotifyPropertyChanged("AvgPmaxPacPres");
            }
        }

        private PressureMeasure avgPmaxPacPresField; 

        /// <summary>
        /// Average allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.
        /// </summary>
		[Description("Average allowable pressure for the zone of interest with respect  to the bottomhole assembly during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("avgPmaxWeaklinkPres")]
        public PressureMeasure AvgPmaxWeaklinkPres {
            get {
                return avgPmaxWeaklinkPresField;
            } 
            set {
                avgPmaxWeaklinkPresField = value;
                NotifyPropertyChanged("AvgPmaxWeaklinkPres");
            }
        }

        private PressureMeasure avgPmaxWeaklinkPresField; 

        /// <summary>
        /// The pressure 5 minutes after shutin.
        /// </summary>
		[Description("The pressure 5 minutes after shutin.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("shutinPres5Min")]
        public PressureMeasure ShutinPres5Min {
            get {
                return shutinPres5MinField;
            } 
            set {
                shutinPres5MinField = value;
                NotifyPropertyChanged("ShutinPres5Min");
            }
        }

        private PressureMeasure shutinPres5MinField; 

        /// <summary>
        /// The pressure 10 minutes after shutin.
        /// </summary>
		[Description("The pressure 10 minutes after shutin.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("shutinPres10Min")]
        public PressureMeasure ShutinPres10Min {
            get {
                return shutinPres10MinField;
            } 
            set {
                shutinPres10MinField = value;
                NotifyPropertyChanged("ShutinPres10Min");
            }
        }

        private PressureMeasure shutinPres10MinField; 

        /// <summary>
        /// The pressure 15 minutes after shutin.
        /// </summary>
		[Description("The pressure 15 minutes after shutin.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("shutinPres15Min")]
        public PressureMeasure ShutinPres15Min {
            get {
                return shutinPres15MinField;
            } 
            set {
                shutinPres15MinField = value;
                NotifyPropertyChanged("ShutinPres15Min");
            }
        }

        private PressureMeasure shutinPres15MinField; 

        /// <summary>
        /// The pressure at which the formation broke.
        /// </summary>
		[Description("The pressure at which the formation broke.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("breakDownPres")]
        public PressureMeasure BreakDownPres {
            get {
                return breakDownPresField;
            } 
            set {
                breakDownPresField = value;
                NotifyPropertyChanged("BreakDownPres");
            }
        }

        private PressureMeasure breakDownPresField; 

        /// <summary>
        /// The volume of the pad divided by the (volume of the pad + the volume of the proppant laden fluid).
        /// </summary>
		[Description("The volume of the pad divided by the (volume of the pad + the volume   of the proppant laden fluid).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("percentPad")]
        public VolumePerVolumeMeasurePercent PercentPad {
            get {
                return percentPadField;
            } 
            set {
                percentPadField = value;
                NotifyPropertyChanged("PercentPad");
            }
        }

        private VolumePerVolumeMeasurePercent percentPadField; 

        /// <summary>
        /// The formation fracture gradient for this treatment interval.
        /// </summary>
		[Description("The formation fracture gradient for this treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forcePerVolumeMeasure")]
		[XmlElement("fractureGradient")]
        public ForcePerVolumeMeasure FractureGradient {
            get {
                return fractureGradientField;
            } 
            set {
                fractureGradientField = value;
                NotifyPropertyChanged("FractureGradient");
            }
        }

        private ForcePerVolumeMeasure fractureGradientField; 

        /// <summary>
        /// The friction factor for the pipe or tubing.
        /// </summary>
		[Description("The friction factor for the pipe or tubing.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("pipeFrictionFactor")]
        public double? PipeFrictionFactor {
            get {
                return pipeFrictionFactorField;
            } 
            set {
                pipeFrictionFactorField = value;
                 this.PipeFrictionFactorSpecified = true;
                NotifyPropertyChanged("PipeFrictionFactor");
            }
        }

        private double? pipeFrictionFactorField; 

        /// <summary>
        /// pipeFrictionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PipeFrictionFactorSpecified {
            get {
                return pipeFrictionFactorSpecifiedField;
            } 
            set {
                pipeFrictionFactorSpecifiedField = value;
                NotifyPropertyChanged("PipeFrictionFactorSpecified");
            }
        }

        private bool pipeFrictionFactorSpecifiedField; 

        /// <summary>
        /// The number of stages for this flowpath.
        /// </summary>
		[Description("The number of stages for this flowpath.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("stageCount")]
        public short? StageCount {
            get {
                return stageCountField;
            } 
            set {
                stageCountField = value;
                 this.StageCountSpecified = true;
                NotifyPropertyChanged("StageCount");
            }
        }

        private short? stageCountField; 

        /// <summary>
        /// stageCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StageCountSpecified {
            get {
                return stageCountSpecifiedField;
            } 
            set {
                stageCountSpecifiedField = value;
                NotifyPropertyChanged("StageCountSpecified");
            }
        }

        private bool stageCountSpecifiedField; 

        /// <summary>
        /// The tubulars used for this flowpath.
        /// </summary>
		[Description("The tubulars used for this flowpath.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimTubular")]
		[XmlElement("tubular")]
        public List<StimTubular> Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

         /// <summary>
         /// bool to indicate if Tubular has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TubularSpecified
         {
             get {
             if(tubularField!=null)
                 return tubularField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimTubular> tubularField; 

        /// <summary>
        /// The set of stages for this flowpath.
        /// </summary>
		[Description("The set of stages for this flowpath.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimJobStage")]
		[XmlElement("jobStage")]
        public List<StimJobStage> JobStage {
            get {
                return jobStageField;
            } 
            set {
                jobStageField = value;
                NotifyPropertyChanged("JobStage");
            }
        }

         /// <summary>
         /// bool to indicate if JobStage has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool JobStageSpecified
         {
             get {
             if(jobStageField!=null)
                 return jobStageField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimJobStage> jobStageField; 

        /// <summary>
        /// Events which happened during treatment of this flowpath.
        /// </summary>
		[Description("Events which happened during treatment of this flowpath.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimEvent")]
		[XmlElement("jobEvent")]
        public List<StimEvent> JobEvent {
            get {
                return jobEventField;
            } 
            set {
                jobEventField = value;
                NotifyPropertyChanged("JobEvent");
            }
        }

         /// <summary>
         /// bool to indicate if JobEvent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool JobEventSpecified
         {
             get {
             if(jobEventField!=null)
                 return jobEventField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimEvent> jobEventField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A pressure measurement taken a certain time after the well has been shutin. This object is intended to be used with the performance enhancement schemas.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimShutInPressure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A pressure measurement taken a certain time after the well has been shutin. This object is intended to be used with the performance enhancement schemas.")]
    public partial class StimShutInPressure : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The shutin pressure.
        /// </summary>
		[Required]
        [Description("The shutin pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pres")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                presField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 

        /// <summary>
        /// The time span after shutin at which the pressure was measured.
        /// </summary>
		[Required]
        [Description("The time span after shutin at which the pressure was measured.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("timeAfterShutin")]
        public TimeMeasure TimeAfterShutin {
            get {
                return timeAfterShutinField;
            } 
            set {
                timeAfterShutinField = value;
                NotifyPropertyChanged("TimeAfterShutin");
            }
        }

        private TimeMeasure timeAfterShutinField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The name and amount of a proppant used during some time period in a    performance enhancement job.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimProppantUsage", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("The name and amount of a proppant used during some time period in a    performance enhancement job.")]
    public partial class StimProppantUsage : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the proppant.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the proppant.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The mass of the proppant used.
        /// </summary>
		[Required]
        [Description("The mass of the proppant used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("mass")]
        public MassMeasure Mass {
            get {
                return massField;
            } 
            set {
                massField = value;
                NotifyPropertyChanged("Mass");
            }
        }

        private MassMeasure massField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information for a well stimulation job treatment interval
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stimJobInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information for a well stimulation job treatment interval")]
    public partial class StimJobInterval : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Identifier for the stimulation treatment interval unique to the stimulation job.
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Identifier for the stimulation treatment interval unique to the stimulation job.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
		[XmlElement("uidTreatmentInterval")]
        public string UidTreatmentInterval {
            get {
                return uidTreatmentIntervalField;
            } 
            set {
                uidTreatmentIntervalField = value;
                NotifyPropertyChanged("UidTreatmentInterval");
            }
        }

        private string uidTreatmentIntervalField; 

        /// <summary>
        /// Human recognizable context for the well stimulation treatment name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well stimulation treatment name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The treatment number associated with this interval.
        /// </summary>
		[Required]
        [Description("The treatment number associated with this interval.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("number")]
        public short? Number {
            get {
                return numberField;
            } 
            set {
                numberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private short? numberField; 

        /// <summary>
        /// Starting date and time for the stimulation treatment interval.
        /// </summary>
		[Description("Starting date and time for the stimulation treatment interval.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// Ending date and time for the stimulation treatment interval.
        /// </summary>
		[Description("Ending date and time for the stimulation treatment interval.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// The name of the formation being stimulated.
        /// </summary>
		[StringLength(4000)]
        [Description("The name of the formation being stimulated.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("formationName")]
        public string FormationName {
            get {
                return formationNameField;
            } 
            set {
                formationNameField = value;
                NotifyPropertyChanged("FormationName");
            }
        }

        private string formationNameField; 

        /// <summary>
        /// Measured depth of the top of the formation.
        /// </summary>
		[Description("Measured depth of the top of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdFormationTop")]
        public MeasuredDepthCoord MDFormationTop {
            get {
                return mdFormationTopField;
            } 
            set {
                mdFormationTopField = value;
                NotifyPropertyChanged("MDFormationTop");
            }
        }

        private MeasuredDepthCoord mdFormationTopField; 

        /// <summary>
        /// Measured depth of the bottom of the formation.
        /// </summary>
		[Description("Measured depth of the bottom of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdFormationBottom")]
        public MeasuredDepthCoord MDFormationBottom {
            get {
                return mdFormationBottomField;
            } 
            set {
                mdFormationBottomField = value;
                NotifyPropertyChanged("MDFormationBottom");
            }
        }

        private MeasuredDepthCoord mdFormationBottomField; 

        /// <summary>
        /// True vertical depth of the top of the formation.
        /// </summary>
		[Description("True vertical depth of the top of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdFormationTop")]
        public WellVerticalDepthCoord TvdFormationTop {
            get {
                return tvdFormationTopField;
            } 
            set {
                tvdFormationTopField = value;
                NotifyPropertyChanged("TvdFormationTop");
            }
        }

        private WellVerticalDepthCoord tvdFormationTopField; 

        /// <summary>
        /// True vertical depth of the bottom of the formation.
        /// </summary>
		[Description("True vertical depth of the bottom of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdFormationBottom")]
        public WellVerticalDepthCoord TvdFormationBottom {
            get {
                return tvdFormationBottomField;
            } 
            set {
                tvdFormationBottomField = value;
                NotifyPropertyChanged("TvdFormationBottom");
            }
        }

        private WellVerticalDepthCoord tvdFormationBottomField; 

        /// <summary>
        /// A name for the open hole. To be used for open hole completions.
        /// </summary>
		[StringLength(64)]
        [Description("A name for the open hole. To be used for open hole completions.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("openHoleName")]
        public string OpenHoleName {
            get {
                return openHoleNameField;
            } 
            set {
                openHoleNameField = value;
                NotifyPropertyChanged("OpenHoleName");
            }
        }

        private string openHoleNameField; 

        /// <summary>
        /// The diameter of the open hole.
        /// </summary>
		[Description("The diameter of the open hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("openHoleDiameter")]
        public LengthMeasure OpenHoleDiameter {
            get {
                return openHoleDiameterField;
            } 
            set {
                openHoleDiameterField = value;
                NotifyPropertyChanged("OpenHoleDiameter");
            }
        }

        private LengthMeasure openHoleDiameterField; 

        /// <summary>
        /// Measured depth of the top open hole.
        /// </summary>
		[Description("Measured depth of the top open hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdOpenHoleTop")]
        public MeasuredDepthCoord MDOpenHoleTop {
            get {
                return mdOpenHoleTopField;
            } 
            set {
                mdOpenHoleTopField = value;
                NotifyPropertyChanged("MDOpenHoleTop");
            }
        }

        private MeasuredDepthCoord mdOpenHoleTopField; 

        /// <summary>
        /// Measured depth of the bottom open hole.
        /// </summary>
		[Description("Measured depth of the bottom open hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdOpenHoleBottom")]
        public MeasuredDepthCoord MDOpenHoleBottom {
            get {
                return mdOpenHoleBottomField;
            } 
            set {
                mdOpenHoleBottomField = value;
                NotifyPropertyChanged("MDOpenHoleBottom");
            }
        }

        private MeasuredDepthCoord mdOpenHoleBottomField; 

        /// <summary>
        /// True vertical depth of the top open hole.
        /// </summary>
		[Description("True vertical depth of the top open hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdOpenHoleTop")]
        public WellVerticalDepthCoord TvdOpenHoleTop {
            get {
                return tvdOpenHoleTopField;
            } 
            set {
                tvdOpenHoleTopField = value;
                NotifyPropertyChanged("TvdOpenHoleTop");
            }
        }

        private WellVerticalDepthCoord tvdOpenHoleTopField; 

        /// <summary>
        /// True vertical depth of the bottom open hole.
        /// </summary>
		[Description("True vertical depth of the bottom open hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdOpenHoleBottom")]
        public WellVerticalDepthCoord TvdOpenHoleBottom {
            get {
                return tvdOpenHoleBottomField;
            } 
            set {
                tvdOpenHoleBottomField = value;
                NotifyPropertyChanged("TvdOpenHoleBottom");
            }
        }

        private WellVerticalDepthCoord tvdOpenHoleBottomField; 

        /// <summary>
        /// The total friction pressure loss.
        /// </summary>
		[Description("The total friction pressure loss.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("totalFrictionPresLoss")]
        public PressureMeasure TotalFrictionPresLoss {
            get {
                return totalFrictionPresLossField;
            } 
            set {
                totalFrictionPresLossField = value;
                NotifyPropertyChanged("TotalFrictionPresLoss");
            }
        }

        private PressureMeasure totalFrictionPresLossField; 

        /// <summary>
        /// The total pumping time for the treatment treatment interval.
        /// </summary>
		[Description("The total pumping time for the treatment treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("totalPumpTime")]
        public TimeMeasure TotalPumpTime {
            get {
                return totalPumpTimeField;
            } 
            set {
                totalPumpTimeField = value;
                NotifyPropertyChanged("TotalPumpTime");
            }
        }

        private TimeMeasure totalPumpTimeField; 

        /// <summary>
        /// The highest tubing pressure of any stage for the treatment interval.
        /// </summary>
		[Description("The highest tubing pressure of any stage for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxPresTubing")]
        public PressureMeasure MaxPresTubing {
            get {
                return maxPresTubingField;
            } 
            set {
                maxPresTubingField = value;
                NotifyPropertyChanged("MaxPresTubing");
            }
        }

        private PressureMeasure maxPresTubingField; 

        /// <summary>
        /// The highest casing pressure of any stage for the treatment interval.
        /// </summary>
		[Description("The highest casing pressure of any stage for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxPresCasing")]
        public PressureMeasure MaxPresCasing {
            get {
                return maxPresCasingField;
            } 
            set {
                maxPresCasingField = value;
                NotifyPropertyChanged("MaxPresCasing");
            }
        }

        private PressureMeasure maxPresCasingField; 

        /// <summary>
        /// The highest annulus pressure of any stage for the treatment interval.
        /// </summary>
		[Description("The highest annulus pressure of any stage for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxPresAnnulus")]
        public PressureMeasure MaxPresAnnulus {
            get {
                return maxPresAnnulusField;
            } 
            set {
                maxPresAnnulusField = value;
                NotifyPropertyChanged("MaxPresAnnulus");
            }
        }

        private PressureMeasure maxPresAnnulusField; 

        /// <summary>
        /// Maximum tubing fluid pumping rate of any stage for the treatment interval.
        /// </summary>
		[Description("Maximum tubing fluid pumping rate of any stage for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxFluidRateTubing")]
        public VolumeFlowRateMeasure MaxFluidRateTubing {
            get {
                return maxFluidRateTubingField;
            } 
            set {
                maxFluidRateTubingField = value;
                NotifyPropertyChanged("MaxFluidRateTubing");
            }
        }

        private VolumeFlowRateMeasure maxFluidRateTubingField; 

        /// <summary>
        /// Maximum casing fluid pumping rate of any stage for the treatment interval.
        /// </summary>
		[Description("Maximum casing fluid pumping rate of any stage for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxFluidRateCasing")]
        public VolumeFlowRateMeasure MaxFluidRateCasing {
            get {
                return maxFluidRateCasingField;
            } 
            set {
                maxFluidRateCasingField = value;
                NotifyPropertyChanged("MaxFluidRateCasing");
            }
        }

        private VolumeFlowRateMeasure maxFluidRateCasingField; 

        /// <summary>
        /// Maximum annulus fluid pumping rate of any stage for the treatment interval.
        /// </summary>
		[Description("Maximum annulus fluid pumping rate of any stage for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxFluidRateAnnulus")]
        public VolumeFlowRateMeasure MaxFluidRateAnnulus {
            get {
                return maxFluidRateAnnulusField;
            } 
            set {
                maxFluidRateAnnulusField = value;
                NotifyPropertyChanged("MaxFluidRateAnnulus");
            }
        }

        private VolumeFlowRateMeasure maxFluidRateAnnulusField; 

        /// <summary>
        /// The average tubing pressure of any stage for the treatment interval.
        /// </summary>
		[Description("The average tubing pressure of any stage for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("avgPresTubing")]
        public PressureMeasure AvgPresTubing {
            get {
                return avgPresTubingField;
            } 
            set {
                avgPresTubingField = value;
                NotifyPropertyChanged("AvgPresTubing");
            }
        }

        private PressureMeasure avgPresTubingField; 

        /// <summary>
        /// The average casing pressure of any stage for the treatment interval.
        /// </summary>
		[Description("The average casing pressure of any stage for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("avgPresCasing")]
        public PressureMeasure AvgPresCasing {
            get {
                return avgPresCasingField;
            } 
            set {
                avgPresCasingField = value;
                NotifyPropertyChanged("AvgPresCasing");
            }
        }

        private PressureMeasure avgPresCasingField; 

        /// <summary>
        /// The average annulus pressure for any stage for the treatment interval.
        /// </summary>
		[Description("The average annulus pressure for any stage for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("avgPresAnnulus")]
        public PressureMeasure AvgPresAnnulus {
            get {
                return avgPresAnnulusField;
            } 
            set {
                avgPresAnnulusField = value;
                NotifyPropertyChanged("AvgPresAnnulus");
            }
        }

        private PressureMeasure avgPresAnnulusField; 

        /// <summary>
        /// The pressure at which the formation fractures and accepts injected fluid.
        /// </summary>
		[Description("The pressure at which the formation fractures and accepts injected fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("breakDownPres")]
        public PressureMeasure BreakDownPres {
            get {
                return breakDownPresField;
            } 
            set {
                breakDownPresField = value;
                NotifyPropertyChanged("BreakDownPres");
            }
        }

        private PressureMeasure breakDownPresField; 

        /// <summary>
        /// The average pressure for the treatment interval across stages for all flowpaths for the treatment.
        /// </summary>
		[Description("The average pressure for the treatment interval across stages for all flowpaths for the treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("averagePres")]
        public PressureMeasure AveragePres {
            get {
                return averagePresField;
            } 
            set {
                averagePresField = value;
                NotifyPropertyChanged("AveragePres");
            }
        }

        private PressureMeasure averagePresField; 

        /// <summary>
        /// Average base fluid pumping rate of all stages for the treatment interval.
        /// </summary>
		[Description("Average base fluid pumping rate of all stages for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgBaseFluidReturnRate")]
        public VolumeFlowRateMeasure AvgBaseFluidReturnRate {
            get {
                return avgBaseFluidReturnRateField;
            } 
            set {
                avgBaseFluidReturnRateField = value;
                NotifyPropertyChanged("AvgBaseFluidReturnRate");
            }
        }

        private VolumeFlowRateMeasure avgBaseFluidReturnRateField; 

        /// <summary>
        /// Average slurry pumping rate of all stages for the treatment interval.
        /// </summary>
		[Description("Average slurry pumping rate of all stages for the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgSlurryReturnRate")]
        public VolumeFlowRateMeasure AvgSlurryReturnRate {
            get {
                return avgSlurryReturnRateField;
            } 
            set {
                avgSlurryReturnRateField = value;
                NotifyPropertyChanged("AvgSlurryReturnRate");
            }
        }

        private VolumeFlowRateMeasure avgSlurryReturnRateField; 

        /// <summary>
        /// Average bottomhole treatment flow rate.
        /// </summary>
		[Description("Average bottomhole treatment flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("avgBottomholeRate")]
        public VolumeFlowRateMeasure AvgBottomholeRate {
            get {
                return avgBottomholeRateField;
            } 
            set {
                avgBottomholeRateField = value;
                NotifyPropertyChanged("AvgBottomholeRate");
            }
        }

        private VolumeFlowRateMeasure avgBottomholeRateField; 

        /// <summary>
        /// Total volume pumped for the interval.
        /// </summary>
		[Description("Total volume pumped for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("totalVolume")]
        public VolumeMeasure TotalVolume {
            get {
                return totalVolumeField;
            } 
            set {
                totalVolumeField = value;
                NotifyPropertyChanged("TotalVolume");
            }
        }

        private VolumeMeasure totalVolumeField; 

        /// <summary>
        /// The maximum proppant concentration on the surface.
        /// </summary>
		[Description("The maximum proppant concentration on the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("maxProppantConcSurface")]
        public DensityMeasure MaxProppantConcSurface {
            get {
                return maxProppantConcSurfaceField;
            } 
            set {
                maxProppantConcSurfaceField = value;
                NotifyPropertyChanged("MaxProppantConcSurface");
            }
        }

        private DensityMeasure maxProppantConcSurfaceField; 

        /// <summary>
        /// The maximum proppant concentration at the bottom of the wellbore.
        /// </summary>
		[Description("The maximum proppant concentration at the bottom of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("maxProppantConcBottomhole")]
        public DensityMeasure MaxProppantConcBottomhole {
            get {
                return maxProppantConcBottomholeField;
            } 
            set {
                maxProppantConcBottomholeField = value;
                NotifyPropertyChanged("MaxProppantConcBottomhole");
            }
        }

        private DensityMeasure maxProppantConcBottomholeField; 

        /// <summary>
        /// The average proppant concentration on the surface.
        /// </summary>
		[Description("The average proppant concentration on the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("avgProppantConcSurface")]
        public DensityMeasure AvgProppantConcSurface {
            get {
                return avgProppantConcSurfaceField;
            } 
            set {
                avgProppantConcSurfaceField = value;
                NotifyPropertyChanged("AvgProppantConcSurface");
            }
        }

        private DensityMeasure avgProppantConcSurfaceField; 

        /// <summary>
        /// The average proppant concentration at the bottom of the hole.
        /// </summary>
		[Description("The average proppant concentration at the bottom of the hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("avgProppantConcBottomhole")]
        public DensityMeasure AvgProppantConcBottomhole {
            get {
                return avgProppantConcBottomholeField;
            } 
            set {
                avgProppantConcBottomholeField = value;
                NotifyPropertyChanged("AvgProppantConcBottomhole");
            }
        }

        private DensityMeasure avgProppantConcBottomholeField; 

        /// <summary>
        /// The proppant concentration at the perforations.
        /// </summary>
		[Description("The proppant concentration at the perforations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("perfproppantConc")]
        public DensityMeasure PerfproppantConc {
            get {
                return perfproppantConcField;
            } 
            set {
                perfproppantConcField = value;
                NotifyPropertyChanged("PerfproppantConc");
            }
        }

        private DensityMeasure perfproppantConcField; 

        /// <summary>
        /// The total mass of proppant used in the interval.
        /// </summary>
		[Description("The total mass of proppant used in the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("totalProppantMass")]
        public MassMeasure TotalProppantMass {
            get {
                return totalProppantMassField;
            } 
            set {
                totalProppantMassField = value;
                NotifyPropertyChanged("TotalProppantMass");
            }
        }

        private MassMeasure totalProppantMassField; 

        /// <summary>
        /// The total mass of a particular proppant used in an interval.
        /// </summary>
		[Description("The total mass of a particular proppant used in an interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimProppantUsage")]
		[XmlElement("totalProppantUsage")]
        public List<StimProppantUsage> TotalProppantUsage {
            get {
                return totalProppantUsageField;
            } 
            set {
                totalProppantUsageField = value;
                NotifyPropertyChanged("TotalProppantUsage");
            }
        }

         /// <summary>
         /// bool to indicate if TotalProppantUsage has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TotalProppantUsageSpecified
         {
             get {
             if(totalProppantUsageField!=null)
                 return totalProppantUsageField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimProppantUsage> totalProppantUsageField; 

        /// <summary>
        /// Total proppant mass used as a percent of the design mass.
        /// </summary>
		[Description("Total proppant mass used as a percent of the design mass.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("percentProppantPumped")]
        public VolumePerVolumeMeasurePercent PercentProppantPumped {
            get {
                return percentProppantPumpedField;
            } 
            set {
                percentProppantPumpedField = value;
                NotifyPropertyChanged("PercentProppantPumped");
            }
        }

        private VolumePerVolumeMeasurePercent percentProppantPumpedField; 

        /// <summary>
        /// The weight of proppant left in the wellbore after pumping has stopped.
        /// </summary>
		[Description("The weight of proppant left in the wellbore after pumping has stopped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("wellboreProppantMass")]
        public MassMeasure WellboreProppantMass {
            get {
                return wellboreProppantMassField;
            } 
            set {
                wellboreProppantMassField = value;
                NotifyPropertyChanged("WellboreProppantMass");
            }
        }

        private MassMeasure wellboreProppantMassField; 

        /// <summary>
        /// Name of the proppant used for the treatment interval.
        /// </summary>
		[Description("Name of the proppant used for the treatment interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("proppantName")]
        public List<string> ProppantName {
            get {
                return proppantNameField;
            } 
            set {
                proppantNameField = value;
                NotifyPropertyChanged("ProppantName");
            }
        }

         /// <summary>
         /// bool to indicate if ProppantName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProppantNameSpecified
         {
             get {
             if(proppantNameField!=null)
                 return proppantNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> proppantNameField; 

        /// <summary>
        /// The weight of proppant placed in the formation.
        /// </summary>
		[Description("The weight of proppant placed in the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("formationProppantMass")]
        public MassMeasure FormationProppantMass {
            get {
                return formationProppantMassField;
            } 
            set {
                formationProppantMassField = value;
                NotifyPropertyChanged("FormationProppantMass");
            }
        }

        private MassMeasure formationProppantMassField; 

        /// <summary>
        /// Total number of perforation balls used in the stimulation job.
        /// </summary>
		[Description("Total number of perforation balls used in the stimulation job.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("perfBallCount")]
        public short? PerfBallCount {
            get {
                return perfBallCountField;
            } 
            set {
                perfBallCountField = value;
                 this.PerfBallCountSpecified = true;
                NotifyPropertyChanged("PerfBallCount");
            }
        }

        private short? perfBallCountField; 

        /// <summary>
        /// perfBallCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerfBallCountSpecified {
            get {
                return perfBallCountSpecifiedField;
            } 
            set {
                perfBallCountSpecifiedField = value;
                NotifyPropertyChanged("PerfBallCountSpecified");
            }
        }

        private bool perfBallCountSpecifiedField; 

        /// <summary>
        /// Volume of nitrogen used in the treatment interval.
        /// </summary>
		[Description("Volume of nitrogen used in the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumeMeasure")]
		[XmlElement("totalN2StdVolume")]
        public StandardVolumeMeasure TotalN2StdVolume {
            get {
                return totalN2StdVolumeField;
            } 
            set {
                totalN2StdVolumeField = value;
                NotifyPropertyChanged("TotalN2StdVolume");
            }
        }

        private StandardVolumeMeasure totalN2StdVolumeField; 

        /// <summary>
        /// Mass of carbon dioxide used in the treatment interval.
        /// </summary>
		[Description("Mass of carbon dioxide used in the treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("totalCO2Mass")]
        public MassMeasure TotalCO2Mass {
            get {
                return totalCO2MassField;
            } 
            set {
                totalCO2MassField = value;
                NotifyPropertyChanged("TotalCO2Mass");
            }
        }

        private MassMeasure totalCO2MassField; 

        /// <summary>
        /// The names of the each fluid used in this interval.
        /// </summary>
		[Description("The names of the each fluid used in this interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("fluidName")]
        public List<string> FluidName {
            get {
                return fluidNameField;
            } 
            set {
                fluidNameField = value;
                NotifyPropertyChanged("FluidName");
            }
        }

         /// <summary>
         /// bool to indicate if FluidName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidNameSpecified
         {
             get {
             if(fluidNameField!=null)
                 return fluidNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> fluidNameField; 

        /// <summary>
        /// The formation fracture gradient for this treatment interval.
        /// </summary>
		[Description("The formation fracture gradient for this treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forcePerVolumeMeasure")]
		[XmlElement("fractureGradient")]
        public ForcePerVolumeMeasure FractureGradient {
            get {
                return fractureGradientField;
            } 
            set {
                fractureGradientField = value;
                NotifyPropertyChanged("FractureGradient");
            }
        }

        private ForcePerVolumeMeasure fractureGradientField; 

        /// <summary>
        /// The formation fracture gradient for this treatment interval after treatment.
        /// </summary>
		[Description("The formation fracture gradient for this treatment interval after treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forcePerVolumeMeasure")]
		[XmlElement("finalFractureGradient")]
        public ForcePerVolumeMeasure FinalFractureGradient {
            get {
                return finalFractureGradientField;
            } 
            set {
                finalFractureGradientField = value;
                NotifyPropertyChanged("FinalFractureGradient");
            }
        }

        private ForcePerVolumeMeasure finalFractureGradientField; 

        /// <summary>
        /// The initial shutin pressure.
        /// </summary>
		[Description("The initial shutin pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("initialShutinPres")]
        public PressureMeasure InitialShutinPres {
            get {
                return initialShutinPresField;
            } 
            set {
                initialShutinPresField = value;
                NotifyPropertyChanged("InitialShutinPres");
            }
        }

        private PressureMeasure initialShutinPresField; 

        /// <summary>
        /// The final shutin pressure at a timespan after shutin.
        /// </summary>
		[Description("The final shutin pressure at a timespan after shutin.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimShutInPressure")]
		[XmlElement("shutinPres")]
        public List<StimShutInPressure> ShutinPres {
            get {
                return shutinPresField;
            } 
            set {
                shutinPresField = value;
                NotifyPropertyChanged("ShutinPres");
            }
        }

         /// <summary>
         /// bool to indicate if ShutinPres has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ShutinPresSpecified
         {
             get {
             if(shutinPresField!=null)
                 return shutinPresField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimShutInPressure> shutinPresField; 

        /// <summary>
        /// The screen out pressure.
        /// </summary>
		[Description("The screen out pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("screenOutPres")]
        public PressureMeasure ScreenOutPres {
            get {
                return screenOutPresField;
            } 
            set {
                screenOutPresField = value;
                NotifyPropertyChanged("ScreenOutPres");
            }
        }

        private PressureMeasure screenOutPresField; 

        /// <summary>
        /// Carbon dioxide hydraulic horsepower ordered for the interval.
        /// </summary>
		[Description("Carbon dioxide hydraulic horsepower ordered for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("hhpOrderedCO2")]
        public PowerMeasure HhpOrderedCO2 {
            get {
                return hhpOrderedCO2Field;
            } 
            set {
                hhpOrderedCO2Field = value;
                NotifyPropertyChanged("HhpOrderedCO2");
            }
        }

        private PowerMeasure hhpOrderedCO2Field; 

        /// <summary>
        /// Fluid hydraulic horsepower ordered for the interval.
        /// </summary>
		[Description("Fluid hydraulic horsepower ordered for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("hhpOrderedFluid")]
        public PowerMeasure HhpOrderedFluid {
            get {
                return hhpOrderedFluidField;
            } 
            set {
                hhpOrderedFluidField = value;
                NotifyPropertyChanged("HhpOrderedFluid");
            }
        }

        private PowerMeasure hhpOrderedFluidField; 

        /// <summary>
        /// Carbon dioxide hydraulic horsepower actually used for the interval.
        /// </summary>
		[Description("Carbon dioxide hydraulic horsepower actually used for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("hhpUsedCO2")]
        public PowerMeasure HhpUsedCO2 {
            get {
                return hhpUsedCO2Field;
            } 
            set {
                hhpUsedCO2Field = value;
                NotifyPropertyChanged("HhpUsedCO2");
            }
        }

        private PowerMeasure hhpUsedCO2Field; 

        /// <summary>
        /// Fluid hydraulic horsepower actually used for the interval.
        /// </summary>
		[Description("Fluid hydraulic horsepower actually used for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("hhpUsedFluid")]
        public PowerMeasure HhpUsedFluid {
            get {
                return hhpUsedFluidField;
            } 
            set {
                hhpUsedFluidField = value;
                NotifyPropertyChanged("HhpUsedFluid");
            }
        }

        private PowerMeasure hhpUsedFluidField; 

        /// <summary>
        /// The size of the perforation balls used.
        /// </summary>
		[Description("The size of the perforation balls used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("perfBallSize")]
        public LengthMeasure PerfBallSize {
            get {
                return perfBallSizeField;
            } 
            set {
                perfBallSizeField = value;
                NotifyPropertyChanged("PerfBallSize");
            }
        }

        private LengthMeasure perfBallSizeField; 

        /// <summary>
        /// Boolean as to whether or not screen out occurred. True ("true" or "1") indicates that screen out occurred. False ("false" or "0") or not given indicates otherwise.
        /// </summary>
		[Description("Boolean as to whether or not screen out occurred.  True (\"true\" or \"1\") indicates that screen out occurred.  False (\"false\" or \"0\") or not given indicates otherwise.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("screenedOut")]
        public bool? ScreenedOut {
            get {
                return screenedOutField;
            } 
            set {
                screenedOutField = value;
                 this.ScreenedOutSpecified = true;
                NotifyPropertyChanged("ScreenedOut");
            }
        }

        private bool? screenedOutField; 

        /// <summary>
        /// screenedOutSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ScreenedOutSpecified {
            get {
                return screenedOutSpecifiedField;
            } 
            set {
                screenedOutSpecifiedField = value;
                NotifyPropertyChanged("ScreenedOutSpecified");
            }
        }

        private bool screenedOutSpecifiedField; 

        /// <summary>
        /// Average fracture width created during the treatment during the stimulation services.
        /// </summary>
		[Description("Average fracture width created during the treatment during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("avgFractureWidth")]
        public LengthMeasure AvgFractureWidth {
            get {
                return avgFractureWidthField;
            } 
            set {
                avgFractureWidthField = value;
                NotifyPropertyChanged("AvgFractureWidth");
            }
        }

        private LengthMeasure avgFractureWidthField; 

        /// <summary>
        /// Average conductivity of fracture created during the treatment supported by proppant during the stimulation services Hydraulic conductivity, symbolically represented as K, is a property of vascular plants, soil or rock, that describes the ease with which water can move through pore spaces or fractures. It depends on the intrinsic permeability of the material and on the degree of saturation. Saturated hydraulic conductivity, Ksat, describes water movement through saturated media.
        /// </summary>
		[Description("Average conductivity of fracture created during the treatment supported by proppant  during the stimulation services Hydraulic conductivity, symbolically represented as K, is a property of vascular plants, soil or rock, that describes the ease with which water can move through pore spaces or fractures. It depends on the intrinsic permeability of the material and on the degree of saturation. Saturated hydraulic conductivity, Ksat, describes water movement through saturated media.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("avgConductivity")]
        public VelocityMeasure AvgConductivity {
            get {
                return avgConductivityField;
            } 
            set {
                avgConductivityField = value;
                NotifyPropertyChanged("AvgConductivity");
            }
        }

        private VelocityMeasure avgConductivityField; 

        /// <summary>
        /// The difference between the pressure which holds a fracture closed (minimal principal stress) and that pressure which is necessary to open the fracture.
        /// </summary>
		[Description("The difference between the pressure which holds a fracture closed (minimal principal stress) and that pressure which is necessary to open the fracture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("netPres")]
        public PressureMeasure NetPres {
            get {
                return netPresField;
            } 
            set {
                netPresField = value;
                NotifyPropertyChanged("NetPres");
            }
        }

        private PressureMeasure netPresField; 

        /// <summary>
        /// An analysis parameter used in hydraulic fracture design to indicate the pressure at which the fracture effectively closes without proppant in place.
        /// </summary>
		[Description("An analysis parameter used in hydraulic fracture design to indicate the pressure at which the fracture effectively closes without proppant in place.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("closurePres")]
        public PressureMeasure ClosurePres {
            get {
                return closurePresField;
            } 
            set {
                closurePresField = value;
                NotifyPropertyChanged("ClosurePres");
            }
        }

        private PressureMeasure closurePresField; 

        /// <summary>
        /// Delta time recorded for the closure of the fracture to occur during the stimulation services.
        /// </summary>
		[Description("Delta time recorded for the closure of the fracture to occur during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("closureDuration")]
        public TimeMeasure ClosureDuration {
            get {
                return closureDurationField;
            } 
            set {
                closureDurationField = value;
                NotifyPropertyChanged("ClosureDuration");
            }
        }

        private TimeMeasure closureDurationField; 

        /// <summary>
        /// The flow paths of this stimulation job treatment interval.
        /// </summary>
		[Description("The flow paths of this stimulation job treatment interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimFlowPath")]
		[XmlElement("flowPath")]
        public List<StimFlowPath> FlowPath {
            get {
                return flowPathField;
            } 
            set {
                flowPathField = value;
                NotifyPropertyChanged("FlowPath");
            }
        }

         /// <summary>
         /// bool to indicate if FlowPath has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FlowPathSpecified
         {
             get {
             if(flowPathField!=null)
                 return flowPathField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimFlowPath> flowPathField; 

        /// <summary>
        /// A pumping diagnostics session.
        /// </summary>
		[Description("A pumping diagnostics session.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimPdatSession")]
		[XmlElement("pdatSession")]
        public List<StimPdatSession> PdatSession {
            get {
                return pdatSessionField;
            } 
            set {
                pdatSessionField = value;
                NotifyPropertyChanged("PdatSession");
            }
        }

         /// <summary>
         /// bool to indicate if PdatSession has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PdatSessionSpecified
         {
             get {
             if(pdatSessionField!=null)
                 return pdatSessionField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimPdatSession> pdatSessionField; 

        /// <summary>
        /// Reservoir Interval Component Schema.
        /// </summary>
		[Description("Reservoir Interval Component Schema.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimReservoirInterval")]
		[XmlElement("reservoirInterval")]
        public List<StimReservoirInterval> ReservoirInterval {
            get {
                return reservoirIntervalField;
            } 
            set {
                reservoirIntervalField = value;
                NotifyPropertyChanged("ReservoirInterval");
            }
        }

         /// <summary>
         /// bool to indicate if ReservoirInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ReservoirIntervalSpecified
         {
             get {
             if(reservoirIntervalField!=null)
                 return reservoirIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimReservoirInterval> reservoirIntervalField; 

        /// <summary>
        /// A set of perforations being stimulated.
        /// </summary>
		[Description("A set of perforations being stimulated.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimPerforationSet")]
		[XmlElement("perforationInterval")]
        public List<StimPerforationSet> PerforationInterval {
            get {
                return perforationIntervalField;
            } 
            set {
                perforationIntervalField = value;
                NotifyPropertyChanged("PerforationInterval");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationIntervalSpecified
         {
             get {
             if(perforationIntervalField!=null)
                 return perforationIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimPerforationSet> perforationIntervalField; 

        /// <summary>
        /// The average static temperature of the wellbore injection point(s) or formation at equilibrium (steady state) with no fluid or tool movement, allowing for equilibrium conditions at the wellbore injection point; (BHST: bottom hole static temperature). 
        /// </summary>
		[Description("The average static temperature of the  wellbore injection point(s) or formation at equilibrium (steady state)  with no fluid or tool movement, allowing for equilibrium conditions at  the wellbore injection point; (BHST: bottom hole static temperature).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("avgBHStaticTemperature")]
        public ThermodynamicTemperatureMeasure AvgBHStaticTemperature {
            get {
                return avgBHStaticTemperatureField;
            } 
            set {
                avgBHStaticTemperatureField = value;
                NotifyPropertyChanged("AvgBHStaticTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure avgBHStaticTemperatureField; 

        /// <summary>
        /// The average measured or calculated temperature of the wellbore during the treating with well fluid injection or circulation of the wellbore at the point of interest. Point of interest is generally the injection point or region of interest for the test or treatment.
        /// </summary>
		[Description("The average measured or calculated temperature  of the wellbore during the treating with well fluid injection or  circulation of the wellbore at the point of interest. Point of interest  is generally the injection point or region of interest for the test  or treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("avgBHTreatingTemperature")]
        public ThermodynamicTemperatureMeasure AvgBHTreatingTemperature {
            get {
                return avgBHTreatingTemperatureField;
            } 
            set {
                avgBHTreatingTemperatureField = value;
                NotifyPropertyChanged("AvgBHTreatingTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure avgBHTreatingTemperatureField; 

        /// <summary>
        /// Additives used in the fluid.
        /// </summary>
		[Description("Additives used in the fluid.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimAdditive")]
		[XmlElement("additive")]
        public List<StimAdditive> Additive {
            get {
                return additiveField;
            } 
            set {
                additiveField = value;
                NotifyPropertyChanged("Additive");
            }
        }

         /// <summary>
         /// bool to indicate if Additive has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AdditiveSpecified
         {
             get {
             if(additiveField!=null)
                 return additiveField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimAdditive> additiveField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML well stimulation Job.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_stimJob", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML well stimulation Job.")]
    public partial class StimJob : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the well stimulation job.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well stimulation job.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Type of well stimulation job.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Type of well stimulation job.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("kind")]
        public string Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string kindField; 

        /// <summary>
        /// UNSPSC(Segment 71) Commodity Code from Oil and gas extraction and production enhancement services family.
        /// </summary>
		[Description("UNSPSC(Segment 71) Commodity Code from Oil and gas extraction and  production enhancement services family.")]
        [EnergisticsDataTypeAttribute(DataType = "PIDXCommodityCode")]
		[XmlElement("commodityCode")]
        public PIDXCommodityCode? CommodityCode {
            get {
                return commodityCodeField;
            } 
            set {
                commodityCodeField = value;
                 this.CommodityCodeSpecified = true;
                NotifyPropertyChanged("CommodityCode");
            }
        }

        private PIDXCommodityCode? commodityCodeField; 

        /// <summary>
        /// commodityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CommodityCodeSpecified {
            get {
                return commodityCodeSpecifiedField;
            } 
            set {
                commodityCodeSpecifiedField = value;
                NotifyPropertyChanged("CommodityCodeSpecified");
            }
        }

        private bool commodityCodeSpecifiedField; 

        /// <summary>
        /// Name of the well stimulation contractor.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name of the well stimulation contractor.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("serviceCompany")]
        public string ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string serviceCompanyField; 

        /// <summary>
        /// Name of service company supervisor.
        /// </summary>
		[StringLength(32)]
        [Description("Name of service company supervisor.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("supervisor")]
        public string Supervisor {
            get {
                return supervisorField;
            } 
            set {
                supervisorField = value;
                NotifyPropertyChanged("Supervisor");
            }
        }

        private string supervisorField; 

        /// <summary>
        /// The API or equivalent identifier number for the well.
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("The API or equivalent identifier number for the well.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("apiNumber")]
        public string ApiNumber {
            get {
                return apiNumberField;
            } 
            set {
                apiNumberField = value;
                NotifyPropertyChanged("ApiNumber");
            }
        }

        private string apiNumberField; 

        /// <summary>
        /// Customer or company name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Customer or company name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("customerName")]
        public string CustomerName {
            get {
                return customerNameField;
            } 
            set {
                customerNameField = value;
                NotifyPropertyChanged("CustomerName");
            }
        }

        private string customerNameField; 

        /// <summary>
        /// Date and time at which the stimulation contractor arrives on location.
        /// </summary>
		[Description("Date and time at which the stimulation contractor arrives on location.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimArrival")]
        public Timestamp? DateTimeArrival {
            get {
                return dTimArrivalField;
            } 
            set {
                dTimArrivalField = value;
                 this.DateTimeArrivalSpecified = true;
                NotifyPropertyChanged("DateTimeArrival");
            }
        }

        private Timestamp? dTimArrivalField; 

        /// <summary>
        /// dTimArrivalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeArrivalSpecified {
            get {
                return dTimArrivalSpecifiedField;
            } 
            set {
                dTimArrivalSpecifiedField = value;
                NotifyPropertyChanged("DateTimeArrivalSpecified");
            }
        }

        private bool dTimArrivalSpecifiedField; 

        /// <summary>
        /// Start date and time of well stimulation Job.
        /// </summary>
		[Description("Start date and time of well stimulation Job.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// Ending date and time of well stimulation job.
        /// </summary>
		[Description("Ending date and time of well stimulation job.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// The total pumping time.
        /// </summary>
		[Description("The total pumping time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("totalPumpTime")]
        public TimeMeasure TotalPumpTime {
            get {
                return totalPumpTimeField;
            } 
            set {
                totalPumpTimeField = value;
                NotifyPropertyChanged("TotalPumpTime");
            }
        }

        private TimeMeasure totalPumpTimeField; 

        /// <summary>
        /// Maximum pressure encountered during the job.
        /// </summary>
		[Description("Maximum pressure encountered during the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxJobPres")]
        public PressureMeasure MaxJobPres {
            get {
                return maxJobPresField;
            } 
            set {
                maxJobPresField = value;
                NotifyPropertyChanged("MaxJobPres");
            }
        }

        private PressureMeasure maxJobPresField; 

        /// <summary>
        /// Maximum job fluid pumping rate of any treatment interval of any stage.
        /// </summary>
		[Description("Maximum job fluid pumping rate of any treatment interval of any stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("maxFluidRate")]
        public VolumeFlowRateMeasure MaxFluidRate {
            get {
                return maxFluidRateField;
            } 
            set {
                maxFluidRateField = value;
                NotifyPropertyChanged("MaxFluidRate");
            }
        }

        private VolumeFlowRateMeasure maxFluidRateField; 

        /// <summary>
        /// Average pressure encountered of all treatment interval of any stage.
        /// </summary>
		[Description("Average pressure encountered of all treatment interval of any stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("avgJobPres")]
        public PressureMeasure AvgJobPres {
            get {
                return avgJobPresField;
            } 
            set {
                avgJobPresField = value;
                NotifyPropertyChanged("AvgJobPres");
            }
        }

        private PressureMeasure avgJobPresField; 

        /// <summary>
        /// Total volume pumped for all treatments.
        /// </summary>
		[Description("Total volume pumped for all treatments.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("totalJobVolume")]
        public VolumeMeasure TotalJobVolume {
            get {
                return totalJobVolumeField;
            } 
            set {
                totalJobVolumeField = value;
                NotifyPropertyChanged("TotalJobVolume");
            }
        }

        private VolumeMeasure totalJobVolumeField; 

        /// <summary>
        /// Total weight of proppant used for the stimulation job.
        /// </summary>
		[Description("Total weight of proppant used for the stimulation job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("totalProppantWt")]
        public MassMeasure TotalProppantWeight {
            get {
                return totalProppantWtField;
            } 
            set {
                totalProppantWtField = value;
                NotifyPropertyChanged("TotalProppantWeight");
            }
        }

        private MassMeasure totalProppantWtField; 

        /// <summary>
        /// Name of a proppant used for the stimulation job.
        /// </summary>
		[Description("Name of a proppant used for the stimulation job.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("proppantName")]
        public List<string> ProppantName {
            get {
                return proppantNameField;
            } 
            set {
                proppantNameField = value;
                NotifyPropertyChanged("ProppantName");
            }
        }

         /// <summary>
         /// bool to indicate if ProppantName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProppantNameSpecified
         {
             get {
             if(proppantNameField!=null)
                 return proppantNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> proppantNameField; 

        /// <summary>
        /// Total number of perforation balls used in the stimulation job.
        /// </summary>
		[Description("Total number of perforation balls used in the stimulation job.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("perfBallCount")]
        public short? PerfBallCount {
            get {
                return perfBallCountField;
            } 
            set {
                perfBallCountField = value;
                 this.PerfBallCountSpecified = true;
                NotifyPropertyChanged("PerfBallCount");
            }
        }

        private short? perfBallCountField; 

        /// <summary>
        /// perfBallCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerfBallCountSpecified {
            get {
                return perfBallCountSpecifiedField;
            } 
            set {
                perfBallCountSpecifiedField = value;
                NotifyPropertyChanged("PerfBallCountSpecified");
            }
        }

        private bool perfBallCountSpecifiedField; 

        /// <summary>
        /// Total volume of nitrogen used in the stimulation job.
        /// </summary>
		[Description("Total volume of nitrogen used in the stimulation job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumeMeasure")]
		[XmlElement("totalN2StdVolume")]
        public StandardVolumeMeasure TotalN2StdVolume {
            get {
                return totalN2StdVolumeField;
            } 
            set {
                totalN2StdVolumeField = value;
                NotifyPropertyChanged("TotalN2StdVolume");
            }
        }

        private StandardVolumeMeasure totalN2StdVolumeField; 

        /// <summary>
        /// Total mass of carbon dioxide used in the stimulation job.
        /// </summary>
		[Description("Total mass of carbon dioxide used in the stimulation job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("totalCO2Mass")]
        public MassMeasure TotalCO2Mass {
            get {
                return totalCO2MassField;
            } 
            set {
                totalCO2MassField = value;
                NotifyPropertyChanged("TotalCO2Mass");
            }
        }

        private MassMeasure totalCO2MassField; 

        /// <summary>
        /// Hydraulic horsepower ordered for the stimulation job.
        /// </summary>
		[Description("Hydraulic horsepower ordered for the stimulation job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("hhpOrdered")]
        public PowerMeasure HhpOrdered {
            get {
                return hhpOrderedField;
            } 
            set {
                hhpOrderedField = value;
                NotifyPropertyChanged("HhpOrdered");
            }
        }

        private PowerMeasure hhpOrderedField; 

        /// <summary>
        /// Hydraulic horsepower actually used for the stimulation job.
        /// </summary>
		[Description("Hydraulic horsepower actually used for the stimulation job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("hhpUsed")]
        public PowerMeasure HhpUsed {
            get {
                return hhpUsedField;
            } 
            set {
                hhpUsedField = value;
                NotifyPropertyChanged("HhpUsed");
            }
        }

        private PowerMeasure hhpUsedField; 

        /// <summary>
        /// Number of Treatments treated during the stimulation service.
        /// </summary>
		[Description("Number of Treatments treated during the stimulation service.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("treatmentCount")]
        public short? TreatmentCount {
            get {
                return treatmentCountField;
            } 
            set {
                treatmentCountField = value;
                 this.TreatmentCountSpecified = true;
                NotifyPropertyChanged("TreatmentCount");
            }
        }

        private short? treatmentCountField; 

        /// <summary>
        /// treatmentCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TreatmentCountSpecified {
            get {
                return treatmentCountSpecifiedField;
            } 
            set {
                treatmentCountSpecifiedField = value;
                NotifyPropertyChanged("TreatmentCountSpecified");
            }
        }

        private bool treatmentCountSpecifiedField; 

        /// <summary>
        /// Percentage of fluid volume in the fracture at the end of pumping.
        /// </summary>
		[Description("Percentage of fluid volume in the fracture at the end of pumping.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("fluidEfficiency")]
        public VolumePerVolumeMeasurePercent FluidEfficiency {
            get {
                return fluidEfficiencyField;
            } 
            set {
                fluidEfficiencyField = value;
                NotifyPropertyChanged("FluidEfficiency");
            }
        }

        private VolumePerVolumeMeasurePercent fluidEfficiencyField; 

        /// <summary>
        /// Pressure recorded on fluid returning to surface.
        /// </summary>
		[Description("Pressure recorded on fluid returning to surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("flowBackPres")]
        public PressureMeasure FlowBackPres {
            get {
                return flowBackPresField;
            } 
            set {
                flowBackPresField = value;
                NotifyPropertyChanged("FlowBackPres");
            }
        }

        private PressureMeasure flowBackPresField; 

        /// <summary>
        /// Rate recorded on fluid returning to surface.
        /// </summary>
		[Description("Rate recorded on fluid returning to surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowBackRate")]
        public VolumeFlowRateMeasure FlowBackRate {
            get {
                return flowBackRateField;
            } 
            set {
                flowBackRateField = value;
                NotifyPropertyChanged("FlowBackRate");
            }
        }

        private VolumeFlowRateMeasure flowBackRateField; 

        /// <summary>
        /// Volume recorded on fluid returning to surface.
        /// </summary>
		[Description("Volume recorded on fluid returning to surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("flowBackVolume")]
        public VolumeMeasure FlowBackVolume {
            get {
                return flowBackVolumeField;
            } 
            set {
                flowBackVolumeField = value;
                NotifyPropertyChanged("FlowBackVolume");
            }
        }

        private VolumeMeasure flowBackVolumeField; 

        /// <summary>
        /// Number of treatment interval (zones), treated during the stimulation service.
        /// </summary>
		[Description("Number of treatment interval (zones), treated during the stimulation service.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("treatmentIntervalCount")]
        public short? TreatmentIntervalCount {
            get {
                return treatmentIntervalCountField;
            } 
            set {
                treatmentIntervalCountField = value;
                 this.TreatmentIntervalCountSpecified = true;
                NotifyPropertyChanged("TreatmentIntervalCount");
            }
        }

        private short? treatmentIntervalCountField; 

        /// <summary>
        /// treatmentIntervalCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TreatmentIntervalCountSpecified {
            get {
                return treatmentIntervalCountSpecifiedField;
            } 
            set {
                treatmentIntervalCountSpecifiedField = value;
                NotifyPropertyChanged("TreatmentIntervalCountSpecified");
            }
        }

        private bool treatmentIntervalCountSpecifiedField; 

        /// <summary>
        /// Bottomhole static temperature for the job.
        /// </summary>
		[Description("Bottomhole static temperature for the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("bottomholeStaticTemperature")]
        public ThermodynamicTemperatureMeasure BottomholeStaticTemperature {
            get {
                return bottomholeStaticTemperatureField;
            } 
            set {
                bottomholeStaticTemperatureField = value;
                NotifyPropertyChanged("BottomholeStaticTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure bottomholeStaticTemperatureField; 

        /// <summary>
        /// Expected or calculated bottomhole treating temperature for the job.
        /// </summary>
		[Description("Expected or calculated bottomhole treating temperature for the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("treatingBottomholeTemperature")]
        public ThermodynamicTemperatureMeasure TreatingBottomholeTemperature {
            get {
                return treatingBottomholeTemperatureField;
            } 
            set {
                treatingBottomholeTemperatureField = value;
                NotifyPropertyChanged("TreatingBottomholeTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure treatingBottomholeTemperatureField; 

        /// <summary>
        /// An interval for the stimulation job.
        /// </summary>
		[Description("An interval for the stimulation job.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stimJobInterval")]
		[XmlElement("jobInterval")]
        public List<StimJobInterval> JobInterval {
            get {
                return jobIntervalField;
            } 
            set {
                jobIntervalField = value;
                NotifyPropertyChanged("JobInterval");
            }
        }

         /// <summary>
         /// bool to indicate if JobInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool JobIntervalSpecified
         {
             get {
             if(jobIntervalField!=null)
                 return jobIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimJobInterval> jobIntervalField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects.
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Sidewall Core Sample Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_swcSample", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Sidewall Core Sample Component Schema")]
    public partial class SwcSample : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[Required]
        [Description("Along hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Set of Lithology records for the Interval 
        /// </summary>
		[Description("Set of Lithology records for the Interval")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_lithology")]
		[XmlElement("lithology")]
        public Lithology Lithology {
            get {
                return lithologyField;
            } 
            set {
                lithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

        private Lithology lithologyField; 

        /// <summary>
        /// Show description for the plug. 
        /// </summary>
		[Description("Show description for the plug.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_show")]
		[XmlElement("show")]
        public Show Show {
            get {
                return showField;
            } 
            set {
                showField = value;
                NotifyPropertyChanged("Show");
            }
        }

        private Show showField; 

        /// <summary>
        /// Name of formation penetrated. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of formation penetrated.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameFormation")]
        public string NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private string nameFormationField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Lithology Component Schema. The standard for this version is principally intended for the implementation of the graphical columns for lithology and anticipates the use of a free text entry for the description. It is possible in the future the standard may be used to generate a structured text description from discrete entries and so some of terminology has been better defined to enable that useage. Either the free text description should be used, or structured description, but not both.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_lithology", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Lithology Component Schema. The standard for this version is principally intended for the implementation of the graphical columns for lithology and anticipates the use of a free text entry for the description. It is possible in the future the standard may be used to generate a structured text description from discrete entries and so some of terminology has been better defined to enable that useage. Either the free text description should be used, or structured description, but not both.")]
    public partial class Lithology : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The geological name for the type of lithology from the enum table listing a subset of the OneGeology / CGI defined formation types.
        /// </summary>
		[Required]
        [Description("The geological name for the type of lithology from the enum table listing a  subset of the OneGeology / CGI defined formation types.")]
        [EnergisticsDataTypeAttribute(DataType = "LithologyType")]
		[XmlElement("type")]
        public LithologyType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private LithologyType typeField; 

        /// <summary>
        /// A custom Lithology encoding sceme if desired. (It is recommended that if used, this follows the NPD required useage with the numeric values noted in the enum tables, which was the original intent for this item). The NPD Coding System assigned a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by Lithology = (Main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: ( 33 * 10 ) + 1 + (21 / 100) gives a numeric code of 331.21. However the NPD is also working through Energistics/Ceasar to potentially change this useage.) This should not be used for mnemonics, as those vary by operator, and if an abbreviation is required a local look up table should be used by the rendering client, based on Lithology Type.
        /// </summary>
		[StringLength(16)]
        [Description("A custom Lithology encoding sceme if desired. (It is recommended that if used, this follows the NPD required useage with the numeric values noted in the enum tables, which was the original intent for this item).  The NPD Coding System assigned a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by Lithology = (Main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: ( 33 * 10 ) + 1 + (21 / 100) gives a numeric code of 331.21. However the NPD is also working through Energistics/Ceasar to potentially change this useage.) This should not be used for mnemonics, as those vary by operator, and if an abbreviation is  required a local look up table should be used by the rendering client, based on Lithology Type.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("codeLith")]
        public string CodeLith {
            get {
                return codeLithField;
            } 
            set {
                codeLithField = value;
                NotifyPropertyChanged("CodeLith");
            }
        }

        private string codeLithField; 

        /// <summary>
        /// The lithology represents the portion of the sampled interval this lithology type relates to. The total of the lithologies within an interval should add up to 100 percent. If LithologySource in cs-geology is "interpreted" only 100% is allowed. If "core" or "cuttings" then recommended useage is the creating application uses blocks of 10%. i.e. 10, 20, 30, 40, 50, 60, 70, 80, 90, 100. Ideally the input application should enforce a total of 100% for every defined depth interval. If the total for a depth interval does not add up to 100%, the "undifferentiated" code should be used to fill out to 100%. 
        /// </summary>
		[Description("The lithology represents the portion of the sampled interval this lithology type relates to. The total of the lithologies within an interval should add up to 100 percent. If LithologySource in cs-geology is \"interpreted\" only 100% is allowed. If \"core\" or \"cuttings\" then recommended useage is the creating application uses blocks of 10%. i.e. 10, 20, 30, 40, 50, 60, 70, 80, 90, 100. Ideally the input application should enforce a total of 100% for every defined depth interval. If the total for a depth interval does not add up to 100%, the \"undifferentiated\" code should be used to fill out to 100%.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("lithPc")]
        public VolumePerVolumeMeasurePercent LithPercent {
            get {
                return lithPcField;
            } 
            set {
                lithPcField = value;
                NotifyPropertyChanged("LithPercent");
            }
        }

        private VolumePerVolumeMeasurePercent lithPcField; 

        /// <summary>
        /// Free text sample description of item and details, using a structured approach as per AAPG and Shell style, or specific operator descriptive hierarchy typically in the order of Rock Type, Qualifier,colour, Texture, Cement matrix type, compaction, Fracture, accessories, fossils, structure porosity, Shows. This should be blank if a structured approach to creating the description is used. Example clastic descriptions: SST, qtz, wh lt gy grn, m - c g, well sort, subrnd-subang, sub sph - sph, grst tex, wk calc cmt, fria, glauc rr mica, gd vis por, patchy dk brn oil stn, wk yel dir fluor, bri yel cut fluor, instant blooming yel-wh crush cut fluor, dk brn cut col. Example carbonate description: LST; wh buff lt brn, m-c g, bioclastic grst, xln cmt, hd, ang brk, tr pyr, poor vis por. 
        /// </summary>
		[StringLength(4000)]
        [Description("Free text sample description of item and details, using a structured approach as per AAPG and Shell style, or specific operator descriptive hierarchy typically in the order of Rock Type, Qualifier,colour, Texture, Cement matrix type, compaction, Fracture, accessories, fossils, structure porosity, Shows. This should be blank if a structured approach to creating the description is used. Example clastic descriptions: SST, qtz, wh lt gy grn, m - c g, well sort, subrnd-subang, sub sph - sph, grst tex, wk calc cmt, fria, glauc rr mica, gd vis por, patchy dk brn oil stn, wk yel dir fluor, bri yel cut fluor, instant blooming yel-wh crush cut fluor, dk brn cut col. Example carbonate description: LST; wh buff lt brn, m-c g, bioclastic grst, xln cmt, hd, ang brk, tr pyr, poor vis por.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// DEPRECATED. Lithology classification description. (In the past this was intended to distinguish between alternative classification schemes such as Dunham or Folk. This is no longer necessary with the classifications included in Lithology Type)
        /// </summary>
		[StringLength(32)]
        [Description("DEPRECATED. Lithology classification description. (In the past this was intended to distinguish between alternative classification schemes such as Dunham or Folk. This is no longer necessary with the classifications included in Lithology Type)")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("lithClass")]
        public string LithClass {
            get {
                return lithClassField;
            } 
            set {
                lithClassField = value;
                NotifyPropertyChanged("LithClass");
            }
        }

        private string lithClassField; 

        /// <summary>
        /// DEPRECATED. Use sizeGrain below. Granulometry.
        /// </summary>
		[StringLength(32)]
        [Description("DEPRECATED. Use sizeGrain below. Granulometry.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("grainType")]
        public string GrainType {
            get {
                return grainTypeField;
            } 
            set {
                grainTypeField = value;
                NotifyPropertyChanged("GrainType");
            }
        }

        private string grainTypeField; 

        /// <summary>
        /// DEPRECATED. Dunham / Embry and Klovan limestone classification. No longer used, as the terms are available as alternates for carbonates within the Lithology type. i.e. A Dunham defined lithology will be plotted graphically as a limestone, but the Dunham terminology will be available to use in a structured description. 
        /// </summary>
		[StringLength(32)]
        [Description("DEPRECATED. Dunham / Embry and Klovan limestone classification. No longer used, as the terms are available as alternates for carbonates within the Lithology type. i.e. A Dunham defined lithology will be plotted graphically as a limestone, but the Dunham terminology will be available to use in a structured description.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("dunhamClass")]
        public string DunhamClass {
            get {
                return dunhamClassField;
            } 
            set {
                dunhamClassField = value;
                NotifyPropertyChanged("DunhamClass");
            }
        }

        private string dunhamClassField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 Colours with the addition of Frosted. eg black blue brown buff green grey olive orange pink purple red translucent frosted white yellow, modified by dark, light, moderate, medium, mottled, variegated, slight, weak, strong, vivid. 
        /// </summary>
		[StringLength(16)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 Colours with the addition of Frosted. eg black blue brown buff green grey olive orange pink purple red translucent frosted white yellow, modified by dark, light, moderate, medium, mottled, variegated, slight, weak, strong, vivid.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("color")]
        public string Color {
            get {
                return colorField;
            } 
            set {
                colorField = value;
                NotifyPropertyChanged("Color");
            }
        }

        private string colorField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6. crystalline, (often "feather-edge" appearance on breaking), friable, dull, earthy, chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular, sucrosic, (often exhibits capillary imbibition). e.g.: compact interlocking, particulate, (Gradational textures are quite common,) chalky matrix with sucrosic patches, (Composite textures also occur) 
        /// </summary>
		[StringLength(32)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6. crystalline, (often \"feather-edge\" appearance on breaking),  friable, dull, earthy,  chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular,   sucrosic, (often exhibits capillary imbibition). e.g.: compact interlocking, particulate, (Gradational textures are quite common,) chalky matrix with sucrosic patches, (Composite textures also occur)")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("texture")]
        public string Texture {
            get {
                return textureField;
            } 
            set {
                textureField = value;
                NotifyPropertyChanged("Texture");
            }
        }

        private string textureField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Mineral hardness. (Typically this will rarely be used as mineral hardness is not typically recorded. What is recorded is typically compaction. It is retained though for use defined as per Mohs scale of mineral hardness.) 
        /// </summary>
		[StringLength(32)]
        [Description("STRUCTURED DESCRIPTION USAGE. Mineral hardness. (Typically this will rarely be used as mineral hardness is not typically recorded. What is recorded is typically compaction. It is retained though for use defined as per Mohs scale of mineral hardness.)")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("hardness")]
        public string Hardness {
            get {
                return hardnessField;
            } 
            set {
                hardnessField = value;
                NotifyPropertyChanged("Hardness");
            }
        }

        private string hardnessField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5. not compacted, slightly compacted, compacted, strongly compacted, friable, indurated, hard. 
        /// </summary>
		[StringLength(32)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5. not compacted, slightly compacted, compacted, strongly compacted, friable, indurated, hard.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("compaction")]
        public string Compaction {
            get {
                return compactionField;
            } 
            set {
                compactionField = value;
                NotifyPropertyChanged("Compaction");
            }
        }

        private string compactionField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1.(Wentworth) modified to remove the ambiguous term Pelite. Size ranges in millimeter (or micrometer) and Inches. LT 256 mm LT 10.1 in "boulder"; 64-256 mm 2.5-10.1 in "cobble"; 32-64 mm 1.26-2.5 in "very coarse gravel"; 16-32 mm 0.63-1.26 in "coarse gravel"; 8-16 mm 0.31-0.63 in "medium gravel"; 4-8 mm 0.157-0.31 in "fine gravel"; 2-4 mm 0.079-0.157 in "very fine gravel"; 1-2 mm 0.039-0.079 in "very coarse sand"; 0.5-1 mm 0.020-0.039 in "coarse sand"; 0.25-0.5 mm 0.010-0.020 in "medium sand"; 125-250 um 0.0049-0.010 in "fine sand"; 62.5-125 um 0.0025-0.0049 in "very fine sand"; 3.90625-62.5 um 0.00015-0.0025 in "silt"; LT 3.90625 um LT 0.00015 in "clay"; LT 1 um LT 0.000039 in "colloid" 
        /// </summary>
		[StringLength(32)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1.(Wentworth) modified to remove the ambiguous term Pelite.  Size ranges in millimeter (or micrometer) and Inches. LT 256 mmLT 10.1 in \"boulder\"; 64-256 mm2.5-10.1 in\"cobble\"; 32-64 mm1.26-2.5 in\"very coarse gravel\"; 16-32 mm0.63-1.26 in\"coarse gravel\"; 8-16 mm0.31-0.63 in\"medium gravel\"; 4-8 mm0.157-0.31 in\"fine gravel\"; 2-4 mm0.079-0.157 in\"very fine gravel\"; 1-2 mm0.039-0.079 in\"very coarse sand\"; 0.5-1 mm0.020-0.039 in\"coarse sand\"; 0.25-0.5 mm0.010-0.020 in\"medium sand\"; 125-250 um0.0049-0.010 in\"fine sand\"; 62.5-125 um0.0025-0.0049 in\"very fine sand\"; 3.90625-62.5 um0.00015-0.0025 in\"silt\"; LT 3.90625 umLT 0.00015 in\"clay\"; LT 1 umLT 0.000039 in \"colloid\"")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("sizeGrain")]
        public string SizeGrain {
            get {
                return sizeGrainField;
            } 
            set {
                sizeGrainField = value;
                NotifyPropertyChanged("SizeGrain");
            }
        }

        private string sizeGrainField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3 Roundness (roundness refers to modal size class). very angular, angular, subangular, subrounded, rounded, well rounded. 
        /// </summary>
		[StringLength(32)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3 Roundness (roundness refers to modal size class). very angular, angular, subangular, subrounded, rounded, well rounded.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("roundness")]
        public string Roundness {
            get {
                return roundnessField;
            } 
            set {
                roundnessField = value;
                NotifyPropertyChanged("Roundness");
            }
        }

        private string roundnessField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity. very elongated, elongated, slightly elongated, slightly spherical, spherical, very spherical 
        /// </summary>
		[StringLength(32)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity. very elongated, elongated, slightly elongated, slightly spherical, spherical, very spherical")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("sphericity")]
        public string Sphericity {
            get {
                return sphericityField;
            } 
            set {
                sphericityField = value;
                NotifyPropertyChanged("Sphericity");
            }
        }

        private string sphericityField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology sorting descriptione from Shell 4.3.1.2 Sorting. very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted. 
        /// </summary>
		[StringLength(32)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology sorting descriptione from Shell 4.3.1.2 Sorting. very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("sorting")]
        public string Sorting {
            get {
                return sortingField;
            } 
            set {
                sortingField = value;
                NotifyPropertyChanged("Sorting");
            }
        }

        private string sortingField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. eg. "calcite" (Common) "dolomite", "ankerite" (eg. North Sea HPHT reservoirs such as Elgin and Franklin have almost pure Ankerite cementation, "siderite" (Sherwood sandstones, southern UK typical Siderite cements), "quartz" (grain to grain contact cementation or secondary quartz deposition), "kaolinite", "illite" (eg. Village Fields North Sea), "smectite","chlorite" (Teg, Algeria.) 
        /// </summary>
		[Description("STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. eg. \"calcite\" (Common) \"dolomite\", \"ankerite\" (eg. North Sea HPHT reservoirs such as Elgin and Franklin have almost pure Ankerite cementation, \"siderite\" (Sherwood sandstones, southern UK typical Siderite cements), \"quartz\" (grain to grain contact cementation or secondary quartz deposition), \"kaolinite\", \"illite\" (eg. Village Fields North Sea), \"smectite\",\"chlorite\" (Teg, Algeria.)")]
        [EnergisticsDataTypeAttribute(DataType = "MatrixCementType")]
		[XmlElement("matrixCement")]
        public MatrixCementType MatrixCement {
            get {
                return matrixCementField;
            } 
            set {
                matrixCementField = value;
                 this.MatrixCementSpecified = true;
                NotifyPropertyChanged("MatrixCement");
            }
        }

        private MatrixCementType matrixCementField; 

        /// <summary>
        /// matrixCementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MatrixCementSpecified {
            get {
                return matrixCementSpecifiedField;
            } 
            set {
                matrixCementSpecifiedField = value;
                NotifyPropertyChanged("MatrixCementSpecified");
            }
        }

        private bool matrixCementSpecifiedField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined after BakerHughes definitions, as opposed to Shell, which has no linkage to actual numeric estimates. The theoretical maximum porosity for a clastic rock is about 26%. This is normally much reduced by other factors. When estimating porosities use: MT 15% "good" 10 to 15% "fair" 5 to 10% "poor" LT 5% "trace" 0 "none" 
        /// </summary>
		[StringLength(32)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined after BakerHughes definitions, as opposed to Shell, which has no linkage to actual numeric estimates. The theoretical maximum porosity for a clastic rock is about 26%. This is normally much reduced by other factors. When estimating porosities use: MT 15% \"good\" 10 to 15% \"fair\" 5 to 10% \"poor\" LT 5% \"trace\" 0 \"none\"")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("porosityVisible")]
        public string PorosityVisible {
            get {
                return porosityVisibleField;
            } 
            set {
                porosityVisibleField = value;
                NotifyPropertyChanged("PorosityVisible");
            }
        }

        private string porosityVisibleField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2. intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous. 
        /// </summary>
		[StringLength(32)]
        [Description("STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2. intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("porosityFabric")]
        public string PorosityFabric {
            get {
                return porosityFabricField;
            } 
            set {
                porosityFabricField = value;
                NotifyPropertyChanged("PorosityFabric");
            }
        }

        private string porosityFabricField; 

        /// <summary>
        /// STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2.5. In future these would benefit from quantification. tight, slightly, fairly, highly.
        /// </summary>
		[StringLength(32)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2.5. In future these would benefit from quantification. tight, slightly, fairly, highly.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("permeability")]
        public string Permeability {
            get {
                return permeabilityField;
            } 
            set {
                permeabilityField = value;
                NotifyPropertyChanged("Permeability");
            }
        }

        private string permeabilityField; 

        /// <summary>
        /// DEPRECATED. This entry for shale density should not be used. Shale densities should be entered in the Shale Density in cs_geologyInterval.
        /// </summary>
		[Description("DEPRECATED. This entry for shale density should not be used.  Shale densities should be entered in the Shale Density in cs_geologyInterval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densShale")]
        public DensityMeasure DensShale {
            get {
                return densShaleField;
            } 
            set {
                densShaleField = value;
                NotifyPropertyChanged("DensShale");
            }
        }

        private DensityMeasure densShaleField; 

        /// <summary>
        /// A single qualifier from the Qualifier enum table for graphical representation in the Lithology columns. In mudlogging terms, a qualifier is a graphical symbol in the Interpreted Lithology column of the Formation Evaluation Log (aka "the mudlog"). In addition to the major lithologies (e.g., sand, shale, etc) existing in the sample, other minerals (present as accessories or inclusions e.g. chert, pyrite, glauconite) and fossils (forams, oyster shells, bryozoans, etc.) may exist and their abundance is generally categorized using ranges such as Trace. These additional minerals and fossils can be of disproportionately great diagnostic and descriptive value. For example,qualifiers can be used to indicate facies changes, marker beds or something that impacted drilling conditions. These qualifiers (representing accessories, inclusions and/or fossils) are used to rapidly and graphically indicate to the recipient of the mudlog that a significant lithological event was encountered while drilling the well. The qualifier can also be used in creating the structured descriptions. 
        /// </summary>
		[Description("A single qualifier from the Qualifier enum table for graphical representation in the Lithology columns. In mudlogging terms, a qualifier is a graphical symbol in the Interpreted Lithology column of the Formation Evaluation Log (aka \"the mudlog\"). In addition to the major lithologies (e.g., sand, shale, etc) existing in the sample, other minerals (present as accessories or inclusions e.g. chert, pyrite, glauconite) and fossils (forams, oyster shells, bryozoans, etc.) may exist and their abundance is generally categorized using ranges such as Trace. These additional minerals and fossils can be of disproportionately great diagnostic and descriptive value. For example,qualifiers can be used to indicate facies changes, marker beds or something that impacted drilling conditions. These qualifiers (representing accessories, inclusions and/or fossils) are used to rapidly and graphically indicate to the recipient of the mudlog that a significant lithological event was encountered while drilling the well. The qualifier can also be used in creating the structured descriptions.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_qualifier")]
		[XmlElement("qualifier")]
        public List<Qualifier> Qualifier {
            get {
                return qualifierField;
            } 
            set {
                qualifierField = value;
                NotifyPropertyChanged("Qualifier");
            }
        }

         /// <summary>
         /// bool to indicate if Qualifier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool QualifierSpecified
         {
             get {
             if(qualifierField!=null)
                 return qualifierField.Count>0?true:false;
             else return false;
             }
         }
        private List<Qualifier> qualifierField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - lithology qualifier Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_qualifier", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - lithology qualifier Component Schema")]
    public partial class Qualifier : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of qualifier.
        /// </summary>
		[Required]
        [Description("The type of qualifier.")]
        [EnergisticsDataTypeAttribute(DataType = "QualifierType")]
		[XmlElement("type")]
        public QualifierType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private QualifierType typeField; 

        /// <summary>
        /// The measured depth at the top of the interval represented by the qualifier. This must be within the range of the parent geologic interval. If mdTop and mdBottom are not given then the qualifier is deemed to exist over the depth range of the parent geologyInterval.
        /// </summary>
		[Description("The measured depth at the top of the interval represented  by the qualifier. This must be within the range of the parent geologic interval. If mdTop and mdBottom are not given then the qualifier is deemed to exist over the  depth range of the parent geologyInterval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// The measured depth at the bottom of the interval represented by the qualifier. A point can be indicated by specifying bottom=top. This must be within the range of the parent geologic interval.
        /// </summary>
		[Description("The measured depth at the bottom of the interval represented by the qualifier.  A point can be indicated by specifying bottom=top. This must be within the range of the parent geologic interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// The relative abundance of the qualifier estimated based on a "visual area" basis by inspecting the cuttings spread out on the shaker table prior to washing, or in the sample tray after washing. This represents the upper bound of the observed range, and is in the following increments at the upper bound. 1 = less than or equal to 1%, 2 = greater than or equal to 1 and less than 2%, 5 = greater than or equal to 2 and less than 5% and then in 5% increments, 10 (=5-10%), 15 (=10-15%) up to 100(=95-100%). The end user can then elect to either display the %, or map then to an operator specific term or coding, i.e. 1 less then or equal to 1%=Rare Trace, or occasional, or very sparse etc., depending on the the end users' terminology.) 
        /// </summary>
		[Description("The relative abundance of the qualifier estimated based on a \"visual area\" basis by inspecting the cuttings  spread out on the shaker table prior to washing, or in the sample tray after washing. This represents the upper bound of the observed range, and is in the following increments at the upper bound. 1 = less than or equal to 1%, 2 = greater than or equal to 1 and less than 2%, 5 = greater than or equal to 2 and less than 5% and then in 5% increments, 10 (=5-10%), 15 (=10-15%) up to 100(=95-100%). The end user can then elect  to either display  the %, or map then to an operator specific term or coding, i.e. 1 less then or equal to 1%=Rare Trace, or occasional, or very sparse etc., depending on the the end users' terminology.)")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("abundance")]
        public VolumePerVolumeMeasurePercent Abundance {
            get {
                return abundanceField;
            } 
            set {
                abundanceField = value;
                NotifyPropertyChanged("Abundance");
            }
        }

        private VolumePerVolumeMeasurePercent abundanceField; 

        /// <summary>
        /// DEPRECATED. This prior useage for a specific terminology is suggested to no longer be used, as the intent should be to avoid encoding proprietary terms. But, for the sake of interoperability, proprietary descriptive use of a specific term for a percentage, should be derived from the abundance % by the end users' visualization application, using the end users' terminology. (i.e. if 1 less than or equal to 1% = Rare Trace or equivalent terminology for the specific operator; this can be mapped in the end user application, but is redundant to be encoded in the standard.)
        /// </summary>
		[StringLength(50)]
        [Description("DEPRECATED. This prior useage for a specific terminology is suggested to no longer be used, as the intent should be to avoid encoding proprietary terms. But, for the sake of interoperability, proprietary descriptive use of a specific term for a percentage, should be derived from the abundance % by the end users' visualization application, using the end users' terminology. (i.e. if 1 less than or equal to  1% = Rare Trace or equivalent terminology for the specific operator; this can be mapped in the end user application, but is redundant to be encoded in the standard.)")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("abundanceCode")]
        public string AbundanceCode {
            get {
                return abundanceCodeField;
            } 
            set {
                abundanceCodeField = value;
                NotifyPropertyChanged("AbundanceCode");
            }
        }

        private string abundanceCodeField; 

        /// <summary>
        /// A textual description of the qualifier.
        /// </summary>
		[StringLength(256)]
        [Description("A textual description of the qualifier.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Geology Show Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_show", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Geology Show Component Schema")]
    public partial class Show : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Show Rating. 
        /// </summary>
		[Description("Show Rating.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowRating")]
		[XmlElement("showRat")]
        public ShowRating? ShowRat {
            get {
                return showRatField;
            } 
            set {
                showRatField = value;
                 this.ShowRatSpecified = true;
                NotifyPropertyChanged("ShowRat");
            }
        }

        private ShowRating? showRatField; 

        /// <summary>
        /// showRatSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShowRatSpecified {
            get {
                return showRatSpecifiedField;
            } 
            set {
                showRatSpecifiedField = value;
                NotifyPropertyChanged("ShowRatSpecified");
            }
        }

        private bool showRatSpecifiedField; 

        /// <summary>
        /// Visible Stain Color. 
        /// </summary>
		[StringLength(16)]
        [Description("Visible Stain Color.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("stainColor")]
        public string StainColor {
            get {
                return stainColorField;
            } 
            set {
                stainColorField = value;
                NotifyPropertyChanged("StainColor");
            }
        }

        private string stainColorField; 

        /// <summary>
        /// Visible Stain Distribution. 
        /// </summary>
		[StringLength(16)]
        [Description("Visible Stain Distribution.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("stainDistr")]
        public string StainDistr {
            get {
                return stainDistrField;
            } 
            set {
                stainDistrField = value;
                NotifyPropertyChanged("StainDistr");
            }
        }

        private string stainDistrField; 

        /// <summary>
        /// Visible Stain (commonly in percent). 
        /// </summary>
		[Description("Visible Stain (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaPerAreaMeasure")]
		[XmlElement("stainPc")]
        public AreaPerAreaMeasure StainPercent {
            get {
                return stainPcField;
            } 
            set {
                stainPcField = value;
                NotifyPropertyChanged("StainPercent");
            }
        }

        private AreaPerAreaMeasure stainPcField; 

        /// <summary>
        /// Natural Fluorescence Color. 
        /// </summary>
		[StringLength(16)]
        [Description("Natural Fluorescence Color.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("natFlorColor")]
        public string NatFlorColor {
            get {
                return natFlorColorField;
            } 
            set {
                natFlorColorField = value;
                NotifyPropertyChanged("NatFlorColor");
            }
        }

        private string natFlorColorField; 

        /// <summary>
        /// Natural fluorescence (commonly in percent). 
        /// </summary>
		[Description("Natural fluorescence (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaPerAreaMeasure")]
		[XmlElement("natFlorPc")]
        public AreaPerAreaMeasure NatFlorPercent {
            get {
                return natFlorPcField;
            } 
            set {
                natFlorPcField = value;
                NotifyPropertyChanged("NatFlorPercent");
            }
        }

        private AreaPerAreaMeasure natFlorPcField; 

        /// <summary>
        /// Natural fluorescence level. 
        /// </summary>
		[Description("Natural fluorescence level.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowFluorescence")]
		[XmlElement("natFlorLevel")]
        public ShowFluorescence? NatFlorLevel {
            get {
                return natFlorLevelField;
            } 
            set {
                natFlorLevelField = value;
                 this.NatFlorLevelSpecified = true;
                NotifyPropertyChanged("NatFlorLevel");
            }
        }

        private ShowFluorescence? natFlorLevelField; 

        /// <summary>
        /// natFlorLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NatFlorLevelSpecified {
            get {
                return natFlorLevelSpecifiedField;
            } 
            set {
                natFlorLevelSpecifiedField = value;
                NotifyPropertyChanged("NatFlorLevelSpecified");
            }
        }

        private bool natFlorLevelSpecifiedField; 

        /// <summary>
        /// Natural fluorescence description. 
        /// </summary>
		[StringLength(64)]
        [Description("Natural fluorescence description.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("natFlorDesc")]
        public string NatFlorDesc {
            get {
                return natFlorDescField;
            } 
            set {
                natFlorDescField = value;
                NotifyPropertyChanged("NatFlorDesc");
            }
        }

        private string natFlorDescField; 

        /// <summary>
        /// Cut color. 
        /// </summary>
		[StringLength(16)]
        [Description("Cut color.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("cutColor")]
        public string CutColor {
            get {
                return cutColorField;
            } 
            set {
                cutColorField = value;
                NotifyPropertyChanged("CutColor");
            }
        }

        private string cutColorField; 

        /// <summary>
        /// Cut speed. 
        /// </summary>
		[Description("Cut speed.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowSpeed")]
		[XmlElement("cutSpeed")]
        public ShowSpeed? CutSpeed {
            get {
                return cutSpeedField;
            } 
            set {
                cutSpeedField = value;
                 this.CutSpeedSpecified = true;
                NotifyPropertyChanged("CutSpeed");
            }
        }

        private ShowSpeed? cutSpeedField; 

        /// <summary>
        /// cutSpeedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CutSpeedSpecified {
            get {
                return cutSpeedSpecifiedField;
            } 
            set {
                cutSpeedSpecifiedField = value;
                NotifyPropertyChanged("CutSpeedSpecified");
            }
        }

        private bool cutSpeedSpecifiedField; 

        /// <summary>
        /// Cut strength. 
        /// </summary>
		[StringLength(16)]
        [Description("Cut strength.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("cutStrength")]
        public string CutStrength {
            get {
                return cutStrengthField;
            } 
            set {
                cutStrengthField = value;
                NotifyPropertyChanged("CutStrength");
            }
        }

        private string cutStrengthField; 

        /// <summary>
        /// Cut formulation. 
        /// </summary>
		[Description("Cut formulation.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowLevel")]
		[XmlElement("cutForm")]
        public ShowLevel? CutForm {
            get {
                return cutFormField;
            } 
            set {
                cutFormField = value;
                 this.CutFormSpecified = true;
                NotifyPropertyChanged("CutForm");
            }
        }

        private ShowLevel? cutFormField; 

        /// <summary>
        /// cutFormSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CutFormSpecified {
            get {
                return cutFormSpecifiedField;
            } 
            set {
                cutFormSpecifiedField = value;
                NotifyPropertyChanged("CutFormSpecified");
            }
        }

        private bool cutFormSpecifiedField; 

        /// <summary>
        /// Cut level (Faint, Bright, etc.). 
        /// </summary>
		[StringLength(16)]
        [Description("Cut level (Faint, Bright, etc.).")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("cutLevel")]
        public string CutLevel {
            get {
                return cutLevelField;
            } 
            set {
                cutLevelField = value;
                NotifyPropertyChanged("CutLevel");
            }
        }

        private string cutLevelField; 

        /// <summary>
        /// Cut fluorescence color. 
        /// </summary>
		[StringLength(16)]
        [Description("Cut fluorescence color.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("cutFlorColor")]
        public string CutFlorColor {
            get {
                return cutFlorColorField;
            } 
            set {
                cutFlorColorField = value;
                NotifyPropertyChanged("CutFlorColor");
            }
        }

        private string cutFlorColorField; 

        /// <summary>
        /// Cut fluorescence speed. 
        /// </summary>
		[Description("Cut fluorescence speed.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowSpeed")]
		[XmlElement("cutFlorSpeed")]
        public ShowSpeed? CutFlorSpeed {
            get {
                return cutFlorSpeedField;
            } 
            set {
                cutFlorSpeedField = value;
                 this.CutFlorSpeedSpecified = true;
                NotifyPropertyChanged("CutFlorSpeed");
            }
        }

        private ShowSpeed? cutFlorSpeedField; 

        /// <summary>
        /// cutFlorSpeedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CutFlorSpeedSpecified {
            get {
                return cutFlorSpeedSpecifiedField;
            } 
            set {
                cutFlorSpeedSpecifiedField = value;
                NotifyPropertyChanged("CutFlorSpeedSpecified");
            }
        }

        private bool cutFlorSpeedSpecifiedField; 

        /// <summary>
        /// Cut fluorescence strength. 
        /// </summary>
		[StringLength(16)]
        [Description("Cut fluorescence strength.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("cutFlorStrength")]
        public string CutFlorStrength {
            get {
                return cutFlorStrengthField;
            } 
            set {
                cutFlorStrengthField = value;
                NotifyPropertyChanged("CutFlorStrength");
            }
        }

        private string cutFlorStrengthField; 

        /// <summary>
        /// Cut fluorescence form. 
        /// </summary>
		[Description("Cut fluorescence form.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowLevel")]
		[XmlElement("cutFlorForm")]
        public ShowLevel? CutFlorForm {
            get {
                return cutFlorFormField;
            } 
            set {
                cutFlorFormField = value;
                 this.CutFlorFormSpecified = true;
                NotifyPropertyChanged("CutFlorForm");
            }
        }

        private ShowLevel? cutFlorFormField; 

        /// <summary>
        /// cutFlorFormSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CutFlorFormSpecified {
            get {
                return cutFlorFormSpecifiedField;
            } 
            set {
                cutFlorFormSpecifiedField = value;
                NotifyPropertyChanged("CutFlorFormSpecified");
            }
        }

        private bool cutFlorFormSpecifiedField; 

        /// <summary>
        /// Cut fluorescence level. 
        /// </summary>
		[Description("Cut fluorescence level.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowFluorescence")]
		[XmlElement("cutFlorLevel")]
        public ShowFluorescence? CutFlorLevel {
            get {
                return cutFlorLevelField;
            } 
            set {
                cutFlorLevelField = value;
                 this.CutFlorLevelSpecified = true;
                NotifyPropertyChanged("CutFlorLevel");
            }
        }

        private ShowFluorescence? cutFlorLevelField; 

        /// <summary>
        /// cutFlorLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CutFlorLevelSpecified {
            get {
                return cutFlorLevelSpecifiedField;
            } 
            set {
                cutFlorLevelSpecifiedField = value;
                NotifyPropertyChanged("CutFlorLevelSpecified");
            }
        }

        private bool cutFlorLevelSpecifiedField; 

        /// <summary>
        /// Residue color. 
        /// </summary>
		[StringLength(16)]
        [Description("Residue color.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("residueColor")]
        public string ResidueColor {
            get {
                return residueColorField;
            } 
            set {
                residueColorField = value;
                NotifyPropertyChanged("ResidueColor");
            }
        }

        private string residueColorField; 

        /// <summary>
        /// Free format show description. 
        /// </summary>
		[StringLength(4000)]
        [Description("Free format show description.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("showDesc")]
        public string ShowDesc {
            get {
                return showDescField;
            } 
            set {
                showDescField = value;
                NotifyPropertyChanged("ShowDesc");
            }
        }

        private string showDescField; 

        /// <summary>
        /// Impregnated lithology. 
        /// </summary>
		[StringLength(32)]
        [Description("Impregnated lithology.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("impregnatedLitho")]
        public string ImpregnatedLitho {
            get {
                return impregnatedLithoField;
            } 
            set {
                impregnatedLithoField = value;
                NotifyPropertyChanged("ImpregnatedLitho");
            }
        }

        private string impregnatedLithoField; 

        /// <summary>
        /// Description of any hydrocarbon type odors smelled. 
        /// </summary>
		[StringLength(32)]
        [Description("Description of any hydrocarbon type odors smelled.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("odor")]
        public string Odor {
            get {
                return odorField;
            } 
            set {
                odorField = value;
                NotifyPropertyChanged("Odor");
            }
        }

        private string odorField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Sidewall Core object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_sidewallCore", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Sidewall Core object.")]
    public partial class SidewallCore : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the sidewall core. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the sidewall core.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the sidewall core. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the sidewall core.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Date and time logging suite run in the hole. 
        /// </summary>
		[Description("Date and time logging suite run in the hole.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimToolRun")]
        public Timestamp? DateTimeToolRun {
            get {
                return dTimToolRunField;
            } 
            set {
                dTimToolRunField = value;
                 this.DateTimeToolRunSpecified = true;
                NotifyPropertyChanged("DateTimeToolRun");
            }
        }

        private Timestamp? dTimToolRunField; 

        /// <summary>
        /// dTimToolRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeToolRunSpecified {
            get {
                return dTimToolRunSpecifiedField;
            } 
            set {
                dTimToolRunSpecifiedField = value;
                NotifyPropertyChanged("DateTimeToolRunSpecified");
            }
        }

        private bool dTimToolRunSpecifiedField; 

        /// <summary>
        /// Date and time logging suite pulled out of the hole. 
        /// </summary>
		[Description("Date and time logging suite pulled out of the hole.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimToolPull")]
        public Timestamp? DateTimeToolPull {
            get {
                return dTimToolPullField;
            } 
            set {
                dTimToolPullField = value;
                 this.DateTimeToolPullSpecified = true;
                NotifyPropertyChanged("DateTimeToolPull");
            }
        }

        private Timestamp? dTimToolPullField; 

        /// <summary>
        /// dTimToolPullSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeToolPullSpecified {
            get {
                return dTimToolPullSpecifiedField;
            } 
            set {
                dTimToolPullSpecifiedField = value;
                NotifyPropertyChanged("DateTimeToolPullSpecified");
            }
        }

        private bool dTimToolPullSpecifiedField; 

        /// <summary>
        /// Tool reference measured depth. 
        /// </summary>
		[Description("Tool reference measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdToolReference")]
        public MeasuredDepthCoord MDToolReference {
            get {
                return mdToolReferenceField;
            } 
            set {
                mdToolReferenceField = value;
                NotifyPropertyChanged("MDToolReference");
            }
        }

        private MeasuredDepthCoord mdToolReferenceField; 

        /// <summary>
        /// Reference log information. 
        /// </summary>
		[StringLength(32)]
        [Description("Reference log information.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("coreReferenceLog")]
        public string CoreReferenceLog {
            get {
                return coreReferenceLogField;
            } 
            set {
                coreReferenceLogField = value;
                NotifyPropertyChanged("CoreReferenceLog");
            }
        }

        private string coreReferenceLogField; 

        /// <summary>
        /// Measured depth of core. 
        /// </summary>
		[Required]
        [Description("Measured depth of core.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdCore")]
        public MeasuredDepthCoord MDCore {
            get {
                return mdCoreField;
            } 
            set {
                mdCoreField = value;
                NotifyPropertyChanged("MDCore");
            }
        }

        private MeasuredDepthCoord mdCoreField; 

        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of contractor who provided the service.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("serviceCompany")]
        public string ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string serviceCompanyField; 

        /// <summary>
        /// Analysis company 
        /// </summary>
		[StringLength(64)]
        [Description("Analysis company")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("analysisContractor")]
        public string AnalysisContractor {
            get {
                return analysisContractorField;
            } 
            set {
                analysisContractorField = value;
                NotifyPropertyChanged("AnalysisContractor");
            }
        }

        private string analysisContractorField; 

        /// <summary>
        /// Name of engineer analyzing sidewall core samples. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of engineer analyzing sidewall core samples.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("analysisBy")]
        public string AnalysisBy {
            get {
                return analysisByField;
            } 
            set {
                analysisByField = value;
                NotifyPropertyChanged("AnalysisBy");
            }
        }

        private string analysisByField; 

        /// <summary>
        /// Sidewall coring tool description. 
        /// </summary>
		[StringLength(32)]
        [Description("Sidewall coring tool description.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("sidewallCoringTool")]
        public string SidewallCoringTool {
            get {
                return sidewallCoringToolField;
            } 
            set {
                sidewallCoringToolField = value;
                NotifyPropertyChanged("SidewallCoringTool");
            }
        }

        private string sidewallCoringToolField; 

        /// <summary>
        /// Hole diameter. 
        /// </summary>
		[Description("Hole diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaHole")]
        public LengthMeasure DiaHole {
            get {
                return diaHoleField;
            } 
            set {
                diaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure diaHoleField; 

        /// <summary>
        /// Diameter of plugs. 
        /// </summary>
		[Description("Diameter of plugs.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaPlug")]
        public LengthMeasure DiaPlug {
            get {
                return diaPlugField;
            } 
            set {
                diaPlugField = value;
                NotifyPropertyChanged("DiaPlug");
            }
        }

        private LengthMeasure diaPlugField; 

        /// <summary>
        /// Number of shots fired. 
        /// </summary>
		[Description("Number of shots fired.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numPlugsShot")]
        public short? NumPlugsShot {
            get {
                return numPlugsShotField;
            } 
            set {
                numPlugsShotField = value;
                 this.NumPlugsShotSpecified = true;
                NotifyPropertyChanged("NumPlugsShot");
            }
        }

        private short? numPlugsShotField; 

        /// <summary>
        /// numPlugsShotSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumPlugsShotSpecified {
            get {
                return numPlugsShotSpecifiedField;
            } 
            set {
                numPlugsShotSpecifiedField = value;
                NotifyPropertyChanged("NumPlugsShotSpecified");
            }
        }

        private bool numPlugsShotSpecifiedField; 

        /// <summary>
        /// Number of recovered plugs. 
        /// </summary>
		[Description("Number of recovered plugs.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numRecPlugs")]
        public short? NumRecPlugs {
            get {
                return numRecPlugsField;
            } 
            set {
                numRecPlugsField = value;
                 this.NumRecPlugsSpecified = true;
                NotifyPropertyChanged("NumRecPlugs");
            }
        }

        private short? numRecPlugsField; 

        /// <summary>
        /// numRecPlugsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumRecPlugsSpecified {
            get {
                return numRecPlugsSpecifiedField;
            } 
            set {
                numRecPlugsSpecifiedField = value;
                NotifyPropertyChanged("NumRecPlugsSpecified");
            }
        }

        private bool numRecPlugsSpecifiedField; 

        /// <summary>
        /// Number of plugs that misfired. 
        /// </summary>
		[Description("Number of plugs that misfired.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numMisfiredPlugs")]
        public short? NumMisfiredPlugs {
            get {
                return numMisfiredPlugsField;
            } 
            set {
                numMisfiredPlugsField = value;
                 this.NumMisfiredPlugsSpecified = true;
                NotifyPropertyChanged("NumMisfiredPlugs");
            }
        }

        private short? numMisfiredPlugsField; 

        /// <summary>
        /// numMisfiredPlugsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumMisfiredPlugsSpecified {
            get {
                return numMisfiredPlugsSpecifiedField;
            } 
            set {
                numMisfiredPlugsSpecifiedField = value;
                NotifyPropertyChanged("NumMisfiredPlugsSpecified");
            }
        }

        private bool numMisfiredPlugsSpecifiedField; 

        /// <summary>
        /// Number of plugs that fired OK but were empty. 
        /// </summary>
		[Description("Number of plugs that fired OK but were empty.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numEmptyPlugs")]
        public short? NumEmptyPlugs {
            get {
                return numEmptyPlugsField;
            } 
            set {
                numEmptyPlugsField = value;
                 this.NumEmptyPlugsSpecified = true;
                NotifyPropertyChanged("NumEmptyPlugs");
            }
        }

        private short? numEmptyPlugsField; 

        /// <summary>
        /// numEmptyPlugsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumEmptyPlugsSpecified {
            get {
                return numEmptyPlugsSpecifiedField;
            } 
            set {
                numEmptyPlugsSpecifiedField = value;
                NotifyPropertyChanged("NumEmptyPlugsSpecified");
            }
        }

        private bool numEmptyPlugsSpecifiedField; 

        /// <summary>
        /// Number of lost plugs. 
        /// </summary>
		[Description("Number of lost plugs.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numLostPlugs")]
        public short? NumLostPlugs {
            get {
                return numLostPlugsField;
            } 
            set {
                numLostPlugsField = value;
                 this.NumLostPlugsSpecified = true;
                NotifyPropertyChanged("NumLostPlugs");
            }
        }

        private short? numLostPlugsField; 

        /// <summary>
        /// numLostPlugsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumLostPlugsSpecified {
            get {
                return numLostPlugsSpecifiedField;
            } 
            set {
                numLostPlugsSpecifiedField = value;
                NotifyPropertyChanged("NumLostPlugsSpecified");
            }
        }

        private bool numLostPlugsSpecifiedField; 

        /// <summary>
        /// Number of plugs paid for by client. 
        /// </summary>
		[Description("Number of plugs paid for by client.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numPaidPlugs")]
        public short? NumPaidPlugs {
            get {
                return numPaidPlugsField;
            } 
            set {
                numPaidPlugsField = value;
                 this.NumPaidPlugsSpecified = true;
                NotifyPropertyChanged("NumPaidPlugs");
            }
        }

        private short? numPaidPlugsField; 

        /// <summary>
        /// numPaidPlugsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumPaidPlugsSpecified {
            get {
                return numPaidPlugsSpecifiedField;
            } 
            set {
                numPaidPlugsSpecifiedField = value;
                NotifyPropertyChanged("NumPaidPlugsSpecified");
            }
        }

        private bool numPaidPlugsSpecifiedField; 

        /// <summary>
        /// Set of plug sample descriptions. 
        /// </summary>
		[Description("Set of plug sample descriptions.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_swcSample")]
		[XmlElement("swcSample")]
        public List<SwcSample> SwcSample {
            get {
                return swcSampleField;
            } 
            set {
                swcSampleField = value;
                NotifyPropertyChanged("SwcSample");
            }
        }

         /// <summary>
         /// bool to indicate if SwcSample has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SwcSampleSpecified
         {
             get {
             if(swcSampleField!=null)
                 return swcSampleField.Count>0?true:false;
             else return false;
             }
         }
        private List<SwcSample> swcSampleField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The non-contextual content of a WITSML Risk object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_risk", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Risk object.")]
    public partial class Risk : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the risk. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the risk.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the risk. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the risk.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A reference to an object that is defined within the context of a wellbore.
        /// </summary>
		[Description("A reference to an object that is defined within the context of a wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refObjectString")]
		[XmlElement("objectReference")]
        public RefObjectString ObjectReference {
            get {
                return objectReferenceField;
            } 
            set {
                objectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private RefObjectString objectReferenceField; 

        /// <summary>
        /// The type of risk.
        /// </summary>
		[Required]
        [Description("The type of risk.")]
        [EnergisticsDataTypeAttribute(DataType = "RiskType")]
		[XmlElement("type")]
        public RiskType? Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        
        private bool TypeSpecifiedField = false;
        
        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }
        
        private RiskType? typeField; 

        /// <summary>
        /// The category of risk.
        /// </summary>
		[Required]
        [Description("The category of risk.")]
        [EnergisticsDataTypeAttribute(DataType = "RiskCategory")]
		[XmlElement("category")]
        public RiskCategory? Category {
            get {
                return categoryField;
            } 
            set {
                categoryField = value;
                 this.CategorySpecified = true;
                NotifyPropertyChanged("Category");
            }
        }

        
        private bool CategorySpecifiedField = false;
        
        /// <summary>
        /// CategorySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CategorySpecified {
            get {
                return CategorySpecifiedField;
            } 
            set {
                CategorySpecifiedField = value;
                NotifyPropertyChanged("CategorySpecified");
            }
        }
        
        private RiskCategory? categoryField; 

        /// <summary>
        /// The sub category of risk.
        /// </summary>
		[Description("The sub category of risk.")]
        [EnergisticsDataTypeAttribute(DataType = "RiskSubCategory")]
		[XmlElement("subCategory")]
        public RiskSubCategory? SubCategory {
            get {
                return subCategoryField;
            } 
            set {
                subCategoryField = value;
                 this.SubCategorySpecified = true;
                NotifyPropertyChanged("SubCategory");
            }
        }

        private RiskSubCategory? subCategoryField; 

        /// <summary>
        /// subCategorySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SubCategorySpecified {
            get {
                return subCategorySpecifiedField;
            } 
            set {
                subCategorySpecifiedField = value;
                NotifyPropertyChanged("SubCategorySpecified");
            }
        }

        private bool subCategorySpecifiedField; 

        /// <summary>
        /// Custom string to further categorize the risk.
        /// </summary>
		[StringLength(50)]
        [Description("Custom string to further categorize the risk.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("extendCategory")]
        public string ExtendCategory {
            get {
                return extendCategoryField;
            } 
            set {
                extendCategoryField = value;
                NotifyPropertyChanged("ExtendCategory");
            }
        }

        private string extendCategoryField; 

        /// <summary>
        /// The personnel afected by the risk.
        /// </summary>
		[Description("The personnel afected by the risk.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "RiskAffectedPersonnel")]
		[XmlElement("affectedPersonnel")]
        public List<RiskAffectedPersonnel> AffectedPersonnel {
            get {
                return affectedPersonnelField;
            } 
            set {
                affectedPersonnelField = value;
                NotifyPropertyChanged("AffectedPersonnel");
            }
        }

         /// <summary>
         /// bool to indicate if AffectedPersonnel has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AffectedPersonnelSpecified
         {
             get {
             if(affectedPersonnelField!=null)
                 return affectedPersonnelField.Count>0?true:false;
             else return false;
             }
         }
        private List<RiskAffectedPersonnel> affectedPersonnelField; 

        /// <summary>
        /// Date and time that activities started.
        /// </summary>
		[Description("Date and time that activities started.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// Date and time that activities were completed.
        /// </summary>
		[Description("Date and time that activities were completed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// Measured Depth at start of activity.
        /// </summary>
		[Description("Measured Depth at start of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdHoleStart")]
        public MeasuredDepthCoord MDHoleStart {
            get {
                return mdHoleStartField;
            } 
            set {
                mdHoleStartField = value;
                NotifyPropertyChanged("MDHoleStart");
            }
        }

        private MeasuredDepthCoord mdHoleStartField; 

        /// <summary>
        /// Measured Depth at end of activity.
        /// </summary>
		[Description("Measured Depth at end of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdHoleEnd")]
        public MeasuredDepthCoord MDHoleEnd {
            get {
                return mdHoleEndField;
            } 
            set {
                mdHoleEndField = value;
                NotifyPropertyChanged("MDHoleEnd");
            }
        }

        private MeasuredDepthCoord mdHoleEndField; 

        /// <summary>
        /// True Vertical Depth at start of activity.
        /// </summary>
		[Description("True Vertical Depth at start of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdHoleStart")]
        public WellVerticalDepthCoord TvdHoleStart {
            get {
                return tvdHoleStartField;
            } 
            set {
                tvdHoleStartField = value;
                NotifyPropertyChanged("TvdHoleStart");
            }
        }

        private WellVerticalDepthCoord tvdHoleStartField; 

        /// <summary>
        /// True Vertical Depth at end of activity.
        /// </summary>
		[Description("True Vertical Depth at end of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdHoleEnd")]
        public WellVerticalDepthCoord TvdHoleEnd {
            get {
                return tvdHoleEndField;
            } 
            set {
                tvdHoleEndField = value;
                NotifyPropertyChanged("TvdHoleEnd");
            }
        }

        private WellVerticalDepthCoord tvdHoleEndField; 

        /// <summary>
        /// Measured depth of bit at start of activity.
        /// </summary>
		[Description("Measured depth of bit at start of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBitStart")]
        public MeasuredDepthCoord MDBitStart {
            get {
                return mdBitStartField;
            } 
            set {
                mdBitStartField = value;
                NotifyPropertyChanged("MDBitStart");
            }
        }

        private MeasuredDepthCoord mdBitStartField; 

        /// <summary>
        /// Measured depth of bit at end of activity.
        /// </summary>
		[Description("Measured depth of bit at end of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBitEnd")]
        public MeasuredDepthCoord MDBitEnd {
            get {
                return mdBitEndField;
            } 
            set {
                mdBitEndField = value;
                NotifyPropertyChanged("MDBitEnd");
            }
        }

        private MeasuredDepthCoord mdBitEndField; 

        /// <summary>
        /// Hole diameter. 
        /// </summary>
		[Description("Hole diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaHole")]
        public LengthMeasure DiaHole {
            get {
                return diaHoleField;
            } 
            set {
                diaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure diaHoleField; 

        /// <summary>
        /// Severity Level of the Risk. Values of 1 through 5 with 1 being the lowest.
        /// </summary>
		[Range(0, 8)]
        [Description("Severity Level of the Risk.  Values of 1 through 5 with 1 being the lowest.")]
        [EnergisticsDataTypeAttribute(DataType = "levelIntegerCode")]
		[XmlElement("severityLevel")]
        public short? SeverityLevel {
            get {
                return severityLevelField;
            } 
            set {
                severityLevelField = value;
                 this.SeverityLevelSpecified = true;
                NotifyPropertyChanged("SeverityLevel");
            }
        }

        private short? severityLevelField; 

        /// <summary>
        /// severityLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SeverityLevelSpecified {
            get {
                return severityLevelSpecifiedField;
            } 
            set {
                severityLevelSpecifiedField = value;
                NotifyPropertyChanged("SeverityLevelSpecified");
            }
        }

        private bool severityLevelSpecifiedField; 

        /// <summary>
        /// Probability Level of the Risk. Values of 1 through 5 with 1 being the lowest.
        /// </summary>
		[Range(0, 8)]
        [Description("Probability Level of the Risk. Values of 1 through 5 with 1 being the lowest.")]
        [EnergisticsDataTypeAttribute(DataType = "levelIntegerCode")]
		[XmlElement("probabilityLevel")]
        public short? ProbabilityLevel {
            get {
                return probabilityLevelField;
            } 
            set {
                probabilityLevelField = value;
                 this.ProbabilityLevelSpecified = true;
                NotifyPropertyChanged("ProbabilityLevel");
            }
        }

        private short? probabilityLevelField; 

        /// <summary>
        /// probabilityLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProbabilityLevelSpecified {
            get {
                return probabilityLevelSpecifiedField;
            } 
            set {
                probabilityLevelSpecifiedField = value;
                NotifyPropertyChanged("ProbabilityLevelSpecified");
            }
        }

        private bool probabilityLevelSpecifiedField; 

        /// <summary>
        /// summary description of risk.
        /// </summary>
		[StringLength(256)]
        [Description("summary description of risk.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("summary")]
        public string Summary {
            get {
                return summaryField;
            } 
            set {
                summaryField = value;
                NotifyPropertyChanged("Summary");
            }
        }

        private string summaryField; 

        /// <summary>
        /// Complete description of Risk.
        /// </summary>
		[StringLength(256)]
        [Description("Complete description of Risk.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("details")]
        public string Details {
            get {
                return detailsField;
            } 
            set {
                detailsField = value;
                NotifyPropertyChanged("Details");
            }
        }

        private string detailsField; 

        /// <summary>
        /// Details for identifing the Risk.
        /// </summary>
		[StringLength(256)]
        [Description("Details for identifing the Risk.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("identification")]
        public string Identification {
            get {
                return identificationField;
            } 
            set {
                identificationField = value;
                NotifyPropertyChanged("Identification");
            }
        }

        private string identificationField; 

        /// <summary>
        /// Plan of action if the Risk materializes.
        /// </summary>
		[StringLength(256)]
        [Description("Plan of action if the Risk materializes.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("contingency")]
        public string Contingency {
            get {
                return contingencyField;
            } 
            set {
                contingencyField = value;
                NotifyPropertyChanged("Contingency");
            }
        }

        private string contingencyField; 

        /// <summary>
        /// Plan of action to ensure the risk does not materialize.
        /// </summary>
		[Description("Plan of action to ensure the risk does not materialize.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("mitigation")]
        public List<string> Mitigation {
            get {
                return mitigationField;
            } 
            set {
                mitigationField = value;
                NotifyPropertyChanged("Mitigation");
            }
        }

         /// <summary>
         /// bool to indicate if Mitigation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MitigationSpecified
         {
             get {
             if(mitigationField!=null)
                 return mitigationField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> mitigationField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refObjectString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refObjectString", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the refObjectString xsd type.")]
    public partial class RefObjectString : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefObjectString class.
        /// </summary>
        public RefObjectString() {}

        /// <summary>
        /// Initializes a new instance of the RefObjectString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public RefObjectString(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The type of data-object being referenced (e.g., "well", "wellbore").
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The type of data-object being referenced (e.g., \"well\", \"wellbore\").")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("object")]
		
        public string Object {
            get {
                return objectField;
            } 
            set {
                objectField = value;
                NotifyPropertyChanged("Object");
            }
        }

        private string objectField; 

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the object referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A reference to the unique identifier (uid attribute) in the object referenced by the name value.  This attribute is required within the context of a WITSML server.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("uidRef")]
		
        public string UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private string uidRefField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Surface Equipment Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_surfaceEquipment", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Rig Surface Equipment Component Schema ")]
    public partial class SurfaceEquipment : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[StringLength(4000)]
        [Description("Description of item and details.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Pressure rating of the item. 
        /// </summary>
		[Description("Pressure rating of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presRating")]
        public PressureMeasure PresRating {
            get {
                return presRatingField;
            } 
            set {
                presRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure presRatingField; 

        /// <summary>
        /// Surface equipment type (IADC1-4,Custom, Coiled Tubing). 
        /// </summary>
		[Required]
        [Description("Surface equipment type (IADC1-4,Custom, Coiled Tubing).")]
        [EnergisticsDataTypeAttribute(DataType = "SurfEquipType")]
		[XmlElement("typeSurfEquip")]
        public SurfEquipType? TypeSurfEquip {
            get {
                return typeSurfEquipField;
            } 
            set {
                typeSurfEquipField = value;
                 this.TypeSurfEquipSpecified = true;
                NotifyPropertyChanged("TypeSurfEquip");
            }
        }

        
        private bool TypeSurfEquipSpecifiedField = false;
        
        /// <summary>
        /// TypeSurfEquipSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSurfEquipSpecified {
            get {
                return TypeSurfEquipSpecifiedField;
            } 
            set {
                TypeSurfEquipSpecifiedField = value;
                NotifyPropertyChanged("TypeSurfEquipSpecified");
            }
        }
        
        private SurfEquipType? typeSurfEquipField; 

        /// <summary>
        /// Use pump discharge Line. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use pump discharge Line. Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("usePumpDischarge")]
        public bool? UsePumpDischarge {
            get {
                return usePumpDischargeField;
            } 
            set {
                usePumpDischargeField = value;
                 this.UsePumpDischargeSpecified = true;
                NotifyPropertyChanged("UsePumpDischarge");
            }
        }

        private bool? usePumpDischargeField; 

        /// <summary>
        /// usePumpDischargeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UsePumpDischargeSpecified {
            get {
                return usePumpDischargeSpecifiedField;
            } 
            set {
                usePumpDischargeSpecifiedField = value;
                NotifyPropertyChanged("UsePumpDischargeSpecified");
            }
        }

        private bool usePumpDischargeSpecifiedField; 

        /// <summary>
        /// Use standpipe geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use standpipe geometry.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("useStandpipe")]
        public bool? UseStandpipe {
            get {
                return useStandpipeField;
            } 
            set {
                useStandpipeField = value;
                 this.UseStandpipeSpecified = true;
                NotifyPropertyChanged("UseStandpipe");
            }
        }

        private bool? useStandpipeField; 

        /// <summary>
        /// useStandpipeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseStandpipeSpecified {
            get {
                return useStandpipeSpecifiedField;
            } 
            set {
                useStandpipeSpecifiedField = value;
                NotifyPropertyChanged("UseStandpipeSpecified");
            }
        }

        private bool useStandpipeSpecifiedField; 

        /// <summary>
        /// Use kelly hose geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use kelly hose geometry.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("useHose")]
        public bool? UseHose {
            get {
                return useHoseField;
            } 
            set {
                useHoseField = value;
                 this.UseHoseSpecified = true;
                NotifyPropertyChanged("UseHose");
            }
        }

        private bool? useHoseField; 

        /// <summary>
        /// useHoseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseHoseSpecified {
            get {
                return useHoseSpecifiedField;
            } 
            set {
                useHoseSpecifiedField = value;
                NotifyPropertyChanged("UseHoseSpecified");
            }
        }

        private bool useHoseSpecifiedField; 

        /// <summary>
        /// Use swivel geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use swivel geometry.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("useSwivel")]
        public bool? UseSwivel {
            get {
                return useSwivelField;
            } 
            set {
                useSwivelField = value;
                 this.UseSwivelSpecified = true;
                NotifyPropertyChanged("UseSwivel");
            }
        }

        private bool? useSwivelField; 

        /// <summary>
        /// useSwivelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseSwivelSpecified {
            get {
                return useSwivelSpecifiedField;
            } 
            set {
                useSwivelSpecifiedField = value;
                NotifyPropertyChanged("UseSwivelSpecified");
            }
        }

        private bool useSwivelSpecifiedField; 

        /// <summary>
        /// Use kelly geometry. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use kelly geometry.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("useKelly")]
        public bool? UseKelly {
            get {
                return useKellyField;
            } 
            set {
                useKellyField = value;
                 this.UseKellySpecified = true;
                NotifyPropertyChanged("UseKelly");
            }
        }

        private bool? useKellyField; 

        /// <summary>
        /// useKellySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseKellySpecified {
            get {
                return useKellySpecifiedField;
            } 
            set {
                useKellySpecifiedField = value;
                NotifyPropertyChanged("UseKellySpecified");
            }
        }

        private bool useKellySpecifiedField; 

        /// <summary>
        /// Use top stack height. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use top stack height.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("useTopStack")]
        public bool? UseTopStack {
            get {
                return useTopStackField;
            } 
            set {
                useTopStackField = value;
                 this.UseTopStackSpecified = true;
                NotifyPropertyChanged("UseTopStack");
            }
        }

        private bool? useTopStackField; 

        /// <summary>
        /// useTopStackSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseTopStackSpecified {
            get {
                return useTopStackSpecifiedField;
            } 
            set {
                useTopStackSpecifiedField = value;
                NotifyPropertyChanged("UseTopStackSpecified");
            }
        }

        private bool useTopStackSpecifiedField; 

        /// <summary>
        /// Use injector stack height. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use injector stack height.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("useInjStack")]
        public bool? UseInjStack {
            get {
                return useInjStackField;
            } 
            set {
                useInjStackField = value;
                 this.UseInjStackSpecified = true;
                NotifyPropertyChanged("UseInjStack");
            }
        }

        private bool? useInjStackField; 

        /// <summary>
        /// useInjStackSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseInjStackSpecified {
            get {
                return useInjStackSpecifiedField;
            } 
            set {
                useInjStackSpecifiedField = value;
                NotifyPropertyChanged("UseInjStackSpecified");
            }
        }

        private bool useInjStackSpecifiedField; 

        /// <summary>
        /// Use surface iron description. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use surface iron description.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("useSurfaceIron")]
        public bool? UseSurfaceIron {
            get {
                return useSurfaceIronField;
            } 
            set {
                useSurfaceIronField = value;
                 this.UseSurfaceIronSpecified = true;
                NotifyPropertyChanged("UseSurfaceIron");
            }
        }

        private bool? useSurfaceIronField; 

        /// <summary>
        /// useSurfaceIronSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseSurfaceIronSpecified {
            get {
                return useSurfaceIronSpecifiedField;
            } 
            set {
                useSurfaceIronSpecifiedField = value;
                NotifyPropertyChanged("UseSurfaceIronSpecified");
            }
        }

        private bool useSurfaceIronSpecifiedField; 

        /// <summary>
        /// Inner diameter of standpipe. 
        /// </summary>
		[Description("Inner diameter of standpipe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idStandpipe")]
        public LengthMeasure InnerDiameterStandpipe {
            get {
                return idStandpipeField;
            } 
            set {
                idStandpipeField = value;
                NotifyPropertyChanged("InnerDiameterStandpipe");
            }
        }

        private LengthMeasure idStandpipeField; 

        /// <summary>
        /// Length of standpipe. 
        /// </summary>
		[Description("Length of standpipe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenStandpipe")]
        public LengthMeasure LenStandpipe {
            get {
                return lenStandpipeField;
            } 
            set {
                lenStandpipeField = value;
                NotifyPropertyChanged("LenStandpipe");
            }
        }

        private LengthMeasure lenStandpipeField; 

        /// <summary>
        /// Inner diameter of kelly hose. 
        /// </summary>
		[Description("Inner diameter of kelly hose.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idHose")]
        public LengthMeasure InnerDiameterHose {
            get {
                return idHoseField;
            } 
            set {
                idHoseField = value;
                NotifyPropertyChanged("InnerDiameterHose");
            }
        }

        private LengthMeasure idHoseField; 

        /// <summary>
        /// Length of kelly hose. 
        /// </summary>
		[Description("Length of kelly hose.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenHose")]
        public LengthMeasure LenHose {
            get {
                return lenHoseField;
            } 
            set {
                lenHoseField = value;
                NotifyPropertyChanged("LenHose");
            }
        }

        private LengthMeasure lenHoseField; 

        /// <summary>
        /// Inner diameter of swivel. 
        /// </summary>
		[Description("Inner diameter of swivel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idSwivel")]
        public LengthMeasure InnerDiameterSwivel {
            get {
                return idSwivelField;
            } 
            set {
                idSwivelField = value;
                NotifyPropertyChanged("InnerDiameterSwivel");
            }
        }

        private LengthMeasure idSwivelField; 

        /// <summary>
        /// Length of swivel. 
        /// </summary>
		[Description("Length of swivel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenSwivel")]
        public LengthMeasure LenSwivel {
            get {
                return lenSwivelField;
            } 
            set {
                lenSwivelField = value;
                NotifyPropertyChanged("LenSwivel");
            }
        }

        private LengthMeasure lenSwivelField; 

        /// <summary>
        /// Inner diameter of kelly hose. 
        /// </summary>
		[Description("Inner diameter of kelly hose.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idKelly")]
        public LengthMeasure InnerDiameterKelly {
            get {
                return idKellyField;
            } 
            set {
                idKellyField = value;
                NotifyPropertyChanged("InnerDiameterKelly");
            }
        }

        private LengthMeasure idKellyField; 

        /// <summary>
        /// Length of kelly. 
        /// </summary>
		[Description("Length of kelly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenKelly")]
        public LengthMeasure LenKelly {
            get {
                return lenKellyField;
            } 
            set {
                lenKellyField = value;
                NotifyPropertyChanged("LenKelly");
            }
        }

        private LengthMeasure lenKellyField; 

        /// <summary>
        /// Inner diameter of surface iron. 
        /// </summary>
		[Description("Inner diameter of surface iron.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idSurfaceIron")]
        public LengthMeasure InnerDiameterSurfaceIron {
            get {
                return idSurfaceIronField;
            } 
            set {
                idSurfaceIronField = value;
                NotifyPropertyChanged("InnerDiameterSurfaceIron");
            }
        }

        private LengthMeasure idSurfaceIronField; 

        /// <summary>
        /// Length of surface iron. 
        /// </summary>
		[Description("Length of surface iron.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenSurfaceIron")]
        public LengthMeasure LenSurfaceIron {
            get {
                return lenSurfaceIronField;
            } 
            set {
                lenSurfaceIronField = value;
                NotifyPropertyChanged("LenSurfaceIron");
            }
        }

        private LengthMeasure lenSurfaceIronField; 

        /// <summary>
        /// Height of surface iron. 
        /// </summary>
		[Description("Height of surface iron.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("htSurfaceIron")]
        public LengthMeasure HeightSurfaceIron {
            get {
                return htSurfaceIronField;
            } 
            set {
                htSurfaceIronField = value;
                NotifyPropertyChanged("HeightSurfaceIron");
            }
        }

        private LengthMeasure htSurfaceIronField; 

        /// <summary>
        /// Coiled tubing - Inner diameter of pump discharge line. 
        /// </summary>
		[Description("Coiled tubing - Inner diameter of pump discharge line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idDischargeLine")]
        public LengthMeasure InnerDiameterDischargeLine {
            get {
                return idDischargeLineField;
            } 
            set {
                idDischargeLineField = value;
                NotifyPropertyChanged("InnerDiameterDischargeLine");
            }
        }

        private LengthMeasure idDischargeLineField; 

        /// <summary>
        /// Coiled tubing - Length of pump discharge line. 
        /// </summary>
		[Description("Coiled tubing - Length of pump discharge line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenDischargeLine")]
        public LengthMeasure LenDischargeLine {
            get {
                return lenDischargeLineField;
            } 
            set {
                lenDischargeLineField = value;
                NotifyPropertyChanged("LenDischargeLine");
            }
        }

        private LengthMeasure lenDischargeLineField; 

        /// <summary>
        /// Coiled tubing - Coiled tubing wrap type. 
        /// </summary>
		[StringLength(16)]
        [Description("Coiled tubing - Coiled tubing wrap type.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("ctWrapType")]
        public string CTWrapType {
            get {
                return ctWrapTypeField;
            } 
            set {
                ctWrapTypeField = value;
                NotifyPropertyChanged("CTWrapType");
            }
        }

        private string ctWrapTypeField; 

        /// <summary>
        /// Coiled tubing - Specifies the OD of the coiled tubing reel. 
        /// </summary>
		[Description("Coiled tubing - Specifies the OD of the coiled tubing reel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odReel")]
        public LengthMeasure OuterDiameterReel {
            get {
                return odReelField;
            } 
            set {
                odReelField = value;
                NotifyPropertyChanged("OuterDiameterReel");
            }
        }

        private LengthMeasure odReelField; 

        /// <summary>
        /// Coiled tubing - Outer diameter of the reel core that the coiled tubing is wrapped around. 
        /// </summary>
		[Description("Coiled tubing - Outer diameter of the reel core that the coiled tubing is wrapped around.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odCore")]
        public LengthMeasure OuterDiameterCore {
            get {
                return odCoreField;
            } 
            set {
                odCoreField = value;
                NotifyPropertyChanged("OuterDiameterCore");
            }
        }

        private LengthMeasure odCoreField; 

        /// <summary>
        /// Coiled tubing - Width of the reel core. This is the inside dimension. 
        /// </summary>
		[Description("Coiled tubing - Width of the reel core. This is the inside dimension.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("widReelWrap")]
        public LengthMeasure WidReelWrap {
            get {
                return widReelWrapField;
            } 
            set {
                widReelWrapField = value;
                NotifyPropertyChanged("WidReelWrap");
            }
        }

        private LengthMeasure widReelWrapField; 

        /// <summary>
        /// Coiled tubing - Length of the coiled tubing remaining on the reel. 
        /// </summary>
		[Description("Coiled tubing - Length of the coiled tubing remaining on the reel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenReel")]
        public LengthMeasure LenReel {
            get {
                return lenReelField;
            } 
            set {
                lenReelField = value;
                NotifyPropertyChanged("LenReel");
            }
        }

        private LengthMeasure lenReelField; 

        /// <summary>
        /// Coiled tubing - Injector Stack Up. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Coiled tubing - Injector Stack Up.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("injStkUp")]
        public bool? InjStkUp {
            get {
                return injStkUpField;
            } 
            set {
                injStkUpField = value;
                 this.InjStkUpSpecified = true;
                NotifyPropertyChanged("InjStkUp");
            }
        }

        private bool? injStkUpField; 

        /// <summary>
        /// injStkUpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InjStkUpSpecified {
            get {
                return injStkUpSpecifiedField;
            } 
            set {
                injStkUpSpecifiedField = value;
                NotifyPropertyChanged("InjStkUpSpecified");
            }
        }

        private bool injStkUpSpecifiedField; 

        /// <summary>
        /// Coiled tubing -The length of tubing from the end of the coil reel to the rotary kelly bushing. Basically we define what is in the hole and on the reel. This measurement takes into account the 20 or so feet of tubing that is being straightened and shoved through the injector head. 
        /// </summary>
		[Description("Coiled tubing -The length of tubing from the end of the coil reel to the rotary kelly bushing.  Basically we define what is in the hole and on the reel.  This measurement takes into account  the 20 or so feet of tubing that is being straightened and shoved through the injector head.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("htInjStk")]
        public LengthMeasure HeightInjStk {
            get {
                return htInjStkField;
            } 
            set {
                htInjStkField = value;
                NotifyPropertyChanged("HeightInjStk");
            }
        }

        private LengthMeasure htInjStkField; 

        /// <summary>
        /// Coiled tubing - Umbilical inside, true/false check box so that you can account for the wireline inside the coiled tubing. With this pressure loss calculation, you can calculate for the strings used for logging, wire line coring, etc. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Coiled tubing - Umbilical inside, true/false check box so that you can account for the  wireline inside the coiled tubing.  With this pressure loss calculation, you can calculate  for the strings used for logging, wire line coring, etc.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("umbInside")]
        public bool? UmbInside {
            get {
                return umbInsideField;
            } 
            set {
                umbInsideField = value;
                 this.UmbInsideSpecified = true;
                NotifyPropertyChanged("UmbInside");
            }
        }

        private bool? umbInsideField; 

        /// <summary>
        /// umbInsideSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UmbInsideSpecified {
            get {
                return umbInsideSpecifiedField;
            } 
            set {
                umbInsideSpecifiedField = value;
                NotifyPropertyChanged("UmbInsideSpecified");
            }
        }

        private bool umbInsideSpecifiedField; 

        /// <summary>
        /// Coiled tubing - Outer diameter of the umbilical. 
        /// </summary>
		[Description("Coiled tubing - Outer diameter of the umbilical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odUmbilical")]
        public LengthMeasure OuterDiameterUmbilical {
            get {
                return odUmbilicalField;
            } 
            set {
                odUmbilicalField = value;
                NotifyPropertyChanged("OuterDiameterUmbilical");
            }
        }

        private LengthMeasure odUmbilicalField; 

        /// <summary>
        /// Coiled tubing - Length of the umbilical. 
        /// </summary>
		[Description("Coiled tubing - Length of the umbilical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenUmbilical")]
        public LengthMeasure LenUmbilical {
            get {
                return lenUmbilicalField;
            } 
            set {
                lenUmbilicalField = value;
                NotifyPropertyChanged("LenUmbilical");
            }
        }

        private LengthMeasure lenUmbilicalField; 

        /// <summary>
        /// Top drive - Inner diameter of top stack. 
        /// </summary>
		[Description("Top drive - Inner diameter of top stack.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idTopStk")]
        public LengthMeasure InnerDiameterTopStk {
            get {
                return idTopStkField;
            } 
            set {
                idTopStkField = value;
                NotifyPropertyChanged("InnerDiameterTopStk");
            }
        }

        private LengthMeasure idTopStkField; 

        /// <summary>
        /// Top drive - The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. We are measuring the distance that the mud will flow through the top drive. 
        /// </summary>
		[Description("Top drive - The distance that the mud travels from the end of the standpipe  hose to the drill pipe connection at the bottom of the top drive. We are measuring the  distance that the mud will flow through the top drive.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("htTopStk")]
        public LengthMeasure HeightTopStk {
            get {
                return htTopStkField;
            } 
            set {
                htTopStkField = value;
                NotifyPropertyChanged("HeightTopStk");
            }
        }

        private LengthMeasure htTopStkField; 

        /// <summary>
        /// Height of flange. If you select Top Drive Stackup Height, Swivel and Kelly are disabled so that you can specify the top-drive rotary system. 
        /// </summary>
		[Description("Height of flange. If you select Top Drive Stackup Height, Swivel and Kelly are disabled so that you can specify the top-drive rotary system.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("htFlange")]
        public LengthMeasure HeightFlange {
            get {
                return htFlangeField;
            } 
            set {
                htFlangeField = value;
                NotifyPropertyChanged("HeightFlange");
            }
        }

        private LengthMeasure htFlangeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Degasser Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_degasser", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Rig Degasser Component Schema ")]
    public partial class Degasser : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[StringLength(32)]
        [Description("Manufacturers designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("model")]
        public string Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string modelField; 

        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[Description("Date and time of installation.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private Timestamp? dTimInstallField; 

        /// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private bool dTimInstallSpecifiedField; 

        /// <summary>
        /// Removal date and time. 
        /// </summary>
		[Description("Removal date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private Timestamp? dTimRemoveField; 

        /// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private bool dTimRemoveSpecifiedField; 

        /// <summary>
        /// Description for the type of object. 
        /// </summary>
		[StringLength(32)]
        [Description("Description for the type of object.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[StringLength(32)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("owner")]
        public string Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string ownerField; 

        /// <summary>
        /// Height of separator. 
        /// </summary>
		[Description("Height of separator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("height")]
        public LengthMeasure Height {
            get {
                return heightField;
            } 
            set {
                heightField = value;
                NotifyPropertyChanged("Height");
            }
        }

        private LengthMeasure heightField; 

        /// <summary>
        /// Length of separator. 
        /// </summary>
		[Description("Length of separator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("len")]
        public LengthMeasure Len {
            get {
                return lenField;
            } 
            set {
                lenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure lenField; 

        /// <summary>
        /// Internal diameter of object. 
        /// </summary>
		[Description("Internal diameter of object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("id")]
        public LengthMeasure InnerDiameter {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure idField; 

        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
		[Description("Maximum pump rate at which the unit will efficiently operate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("capFlow")]
        public VolumeFlowRateMeasure CapFlow {
            get {
                return capFlowField;
            } 
            set {
                capFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumeFlowRateMeasure capFlowField; 

        /// <summary>
        /// Flow area of separator. 
        /// </summary>
		[Description("Flow area of separator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaMeasure")]
		[XmlElement("areaSeparatorFlow")]
        public AreaMeasure AreaSeparatorFlow {
            get {
                return areaSeparatorFlowField;
            } 
            set {
                areaSeparatorFlowField = value;
                NotifyPropertyChanged("AreaSeparatorFlow");
            }
        }

        private AreaMeasure areaSeparatorFlowField; 

        /// <summary>
        /// Depth of trip-tank fluid level to provide back pressure against separator flow. 
        /// </summary>
		[Description("Depth of trip-tank fluid level to provide back pressure against separator flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("htMudSeal")]
        public LengthMeasure HeightMudSeal {
            get {
                return htMudSealField;
            } 
            set {
                htMudSealField = value;
                NotifyPropertyChanged("HeightMudSeal");
            }
        }

        private LengthMeasure htMudSealField; 

        /// <summary>
        /// Internal diameter of inlet line. 
        /// </summary>
		[Description("Internal diameter of inlet line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idInlet")]
        public LengthMeasure InnerDiameterInlet {
            get {
                return idInletField;
            } 
            set {
                idInletField = value;
                NotifyPropertyChanged("InnerDiameterInlet");
            }
        }

        private LengthMeasure idInletField; 

        /// <summary>
        /// Internal diameter of vent line. 
        /// </summary>
		[Description("Internal diameter of vent line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idVentLine")]
        public LengthMeasure InnerDiameterVentLine {
            get {
                return idVentLineField;
            } 
            set {
                idVentLineField = value;
                NotifyPropertyChanged("InnerDiameterVentLine");
            }
        }

        private LengthMeasure idVentLineField; 

        /// <summary>
        /// Length of vent line. 
        /// </summary>
		[Description("Length of vent line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenVentLine")]
        public LengthMeasure LenVentLine {
            get {
                return lenVentLineField;
            } 
            set {
                lenVentLineField = value;
                NotifyPropertyChanged("LenVentLine");
            }
        }

        private LengthMeasure lenVentLineField; 

        /// <summary>
        /// Safe gas separating capacity. 
        /// </summary>
		[Description("Safe gas separating capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("capGasSep")]
        public VolumeFlowRateMeasure CapGasSep {
            get {
                return capGasSepField;
            } 
            set {
                capGasSepField = value;
                NotifyPropertyChanged("CapGasSep");
            }
        }

        private VolumeFlowRateMeasure capGasSepField; 

        /// <summary>
        /// Gas vent rate at which the vent line pressure drop exceeds the hydrostatic head due to the mud seal. 
        /// </summary>
		[Description("Gas vent rate at which the vent line pressure drop exceeds the hydrostatic  head due to the mud seal.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("capBlowdown")]
        public VolumeFlowRateMeasure CapBlowdown {
            get {
                return capBlowdownField;
            } 
            set {
                capBlowdownField = value;
                NotifyPropertyChanged("CapBlowdown");
            }
        }

        private VolumeFlowRateMeasure capBlowdownField; 

        /// <summary>
        /// Pressure rating of the item. 
        /// </summary>
		[Description("Pressure rating of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presRating")]
        public PressureMeasure PresRating {
            get {
                return presRatingField;
            } 
            set {
                presRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure presRatingField; 

        /// <summary>
        /// Temperature rating of separator. 
        /// </summary>
		[Description("Temperature rating of separator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempRating")]
        public ThermodynamicTemperatureMeasure TempRating {
            get {
                return tempRatingField;
            } 
            set {
                tempRatingField = value;
                NotifyPropertyChanged("TempRating");
            }
        }

        private ThermodynamicTemperatureMeasure tempRatingField; 

        /// <summary>
        /// An identification tag for the degasser. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the degasser. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_nameTag")]
		[XmlElement("nameTag")]
        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(nameTagField!=null)
                 return nameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> nameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig HydroCyclones Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_hydrocyclone", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Rig HydroCyclones Component Schema ")]
    public partial class Hydrocyclone : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[StringLength(32)]
        [Description("Manufacturers designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("model")]
        public string Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string modelField; 

        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[Description("Date and time of installation.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private Timestamp? dTimInstallField; 

        /// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private bool dTimInstallSpecifiedField; 

        /// <summary>
        /// Removal date and time. 
        /// </summary>
		[Description("Removal date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private Timestamp? dTimRemoveField; 

        /// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private bool dTimRemoveSpecifiedField; 

        /// <summary>
        /// Description for the type of object. 
        /// </summary>
		[StringLength(32)]
        [Description("Description for the type of object.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// Cones description. 
        /// </summary>
		[StringLength(32)]
        [Description("Cones description.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("descCone")]
        public string DescCone {
            get {
                return descConeField;
            } 
            set {
                descConeField = value;
                NotifyPropertyChanged("DescCone");
            }
        }

        private string descConeField; 

        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[StringLength(32)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("owner")]
        public string Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string ownerField; 

        /// <summary>
        /// An identification tag for the hydrocyclone. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the hydrocyclone. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_nameTag")]
		[XmlElement("nameTag")]
        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(nameTagField!=null)
                 return nameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> nameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Centrifuge Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_centrifuge", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Rig Centrifuge Component Schema ")]
    public partial class Centrifuge : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[StringLength(32)]
        [Description("Manufacturers designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("model")]
        public string Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string modelField; 

        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[Description("Date and time of installation.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private Timestamp? dTimInstallField; 

        /// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private bool dTimInstallSpecifiedField; 

        /// <summary>
        /// Removal date and time. 
        /// </summary>
		[Description("Removal date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private Timestamp? dTimRemoveField; 

        /// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private bool dTimRemoveSpecifiedField; 

        /// <summary>
        /// Description for the type of object. 
        /// </summary>
		[StringLength(32)]
        [Description("Description for the type of object.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
		[Description("Maximum pump rate at which the unit will efficiently operate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("capFlow")]
        public VolumeFlowRateMeasure CapFlow {
            get {
                return capFlowField;
            } 
            set {
                capFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumeFlowRateMeasure capFlowField; 

        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[StringLength(32)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("owner")]
        public string Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string ownerField; 

        /// <summary>
        /// An identification tag for the centrifuge. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the centrifuge. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_nameTag")]
		[XmlElement("nameTag")]
        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(nameTagField!=null)
                 return nameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> nameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Shaker Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shaker", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Rig Shaker Component Schema ")]
    public partial class Shaker : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the shaker.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the shaker.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[StringLength(32)]
        [Description("Manufacturers designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("model")]
        public string Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string modelField; 

        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[Description("Date and time of installation.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private Timestamp? dTimInstallField; 

        /// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private bool dTimInstallSpecifiedField; 

        /// <summary>
        /// Removal date and time. 
        /// </summary>
		[Description("Removal date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private Timestamp? dTimRemoveField; 

        /// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private bool dTimRemoveSpecifiedField; 

        /// <summary>
        /// Description for the type of object. 
        /// </summary>
		[StringLength(32)]
        [Description("Description for the type of object.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// Shaker location on rig. 
        /// </summary>
		[StringLength(32)]
        [Description("Shaker location on rig.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("locationShaker")]
        public string LocationShaker {
            get {
                return locationShakerField;
            } 
            set {
                locationShakerField = value;
                NotifyPropertyChanged("LocationShaker");
            }
        }

        private string locationShakerField; 

        /// <summary>
        /// Number of decks. 
        /// </summary>
		[Description("Number of decks.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numDecks")]
        public short? NumDecks {
            get {
                return numDecksField;
            } 
            set {
                numDecksField = value;
                 this.NumDecksSpecified = true;
                NotifyPropertyChanged("NumDecks");
            }
        }

        private short? numDecksField; 

        /// <summary>
        /// numDecksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumDecksSpecified {
            get {
                return numDecksSpecifiedField;
            } 
            set {
                numDecksSpecifiedField = value;
                NotifyPropertyChanged("NumDecksSpecified");
            }
        }

        private bool numDecksSpecifiedField; 

        /// <summary>
        /// Number of cascade levels. 
        /// </summary>
		[Description("Number of cascade levels.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numCascLevel")]
        public short? NumCascLevel {
            get {
                return numCascLevelField;
            } 
            set {
                numCascLevelField = value;
                 this.NumCascLevelSpecified = true;
                NotifyPropertyChanged("NumCascLevel");
            }
        }

        private short? numCascLevelField; 

        /// <summary>
        /// numCascLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumCascLevelSpecified {
            get {
                return numCascLevelSpecifiedField;
            } 
            set {
                numCascLevelSpecifiedField = value;
                NotifyPropertyChanged("NumCascLevelSpecified");
            }
        }

        private bool numCascLevelSpecifiedField; 

        /// <summary>
        /// Is part of mud cleaning assembly as opposed to discrete Shale Shaker. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is part of mud cleaning assembly as opposed to discrete Shale Shaker.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("mudCleaner")]
        public bool? MudCleaner {
            get {
                return mudCleanerField;
            } 
            set {
                mudCleanerField = value;
                 this.MudCleanerSpecified = true;
                NotifyPropertyChanged("MudCleaner");
            }
        }

        private bool? mudCleanerField; 

        /// <summary>
        /// mudCleanerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MudCleanerSpecified {
            get {
                return mudCleanerSpecifiedField;
            } 
            set {
                mudCleanerSpecifiedField = value;
                NotifyPropertyChanged("MudCleanerSpecified");
            }
        }

        private bool mudCleanerSpecifiedField; 

        /// <summary>
        /// Maximum pump rate at which the unit will efficiently operate. 
        /// </summary>
		[Description("Maximum pump rate at which the unit will efficiently operate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("capFlow")]
        public VolumeFlowRateMeasure CapFlow {
            get {
                return capFlowField;
            } 
            set {
                capFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumeFlowRateMeasure capFlowField; 

        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[StringLength(32)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("owner")]
        public string Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string ownerField; 

        /// <summary>
        /// Minimum mesh size. 
        /// </summary>
		[Description("Minimum mesh size.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("sizeMeshMn")]
        public LengthMeasure SizeMeshMin {
            get {
                return sizeMeshMnField;
            } 
            set {
                sizeMeshMnField = value;
                NotifyPropertyChanged("SizeMeshMin");
            }
        }

        private LengthMeasure sizeMeshMnField; 

        /// <summary>
        /// An identification tag for the shaker. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the shaker. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_nameTag")]
		[XmlElement("nameTag")]
        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(nameTagField!=null)
                 return nameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> nameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Pump Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pump", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Rig Pump Component Schema ")]
    public partial class Pump : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Relative pump number. One-based. 
        /// </summary>
		[Required]
        [Description("Relative pump number. One-based.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("index")]
        public short? Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private short? indexField; 

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[StringLength(32)]
        [Description("Manufacturers designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("model")]
        public string Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string modelField; 

        /// <summary>
        /// Date and time of pump installation. 
        /// </summary>
		[Description("Date and time of pump installation.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private Timestamp? dTimInstallField; 

        /// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private bool dTimInstallSpecifiedField; 

        /// <summary>
        /// Date and time the pump was removed.
        /// </summary>
		[Description("Date and time the pump was removed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private Timestamp? dTimRemoveField; 

        /// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private bool dTimRemoveSpecifiedField; 

        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[StringLength(32)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("owner")]
        public string Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string ownerField; 

        /// <summary>
        /// Pump type reference list. 
        /// </summary>
		[Description("Pump type reference list.")]
        [EnergisticsDataTypeAttribute(DataType = "PumpType")]
		[XmlElement("typePump")]
        public PumpType? TypePump {
            get {
                return typePumpField;
            } 
            set {
                typePumpField = value;
                 this.TypePumpSpecified = true;
                NotifyPropertyChanged("TypePump");
            }
        }

        private PumpType? typePumpField; 

        /// <summary>
        /// typePumpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypePumpSpecified {
            get {
                return typePumpSpecifiedField;
            } 
            set {
                typePumpSpecifiedField = value;
                NotifyPropertyChanged("TypePumpSpecified");
            }
        }

        private bool typePumpSpecifiedField; 

        /// <summary>
        /// Number of cylinders (3=single acting, 2 = double acting) 
        /// </summary>
		[Description("Number of cylinders (3=single acting, 2 = double acting)")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("numCyl")]
        public short? NumCyl {
            get {
                return numCylField;
            } 
            set {
                numCylField = value;
                 this.NumCylSpecified = true;
                NotifyPropertyChanged("NumCyl");
            }
        }

        private short? numCylField; 

        /// <summary>
        /// numCylSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumCylSpecified {
            get {
                return numCylSpecifiedField;
            } 
            set {
                numCylSpecifiedField = value;
                NotifyPropertyChanged("NumCylSpecified");
            }
        }

        private bool numCylSpecifiedField; 

        /// <summary>
        /// Rod outer diameter. 
        /// </summary>
		[Description("Rod outer diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odRod")]
        public LengthMeasure OuterDiameterRod {
            get {
                return odRodField;
            } 
            set {
                odRodField = value;
                NotifyPropertyChanged("OuterDiameterRod");
            }
        }

        private LengthMeasure odRodField; 

        /// <summary>
        /// Inner diameter of the pump liner. 
        /// </summary>
		[Required]
        [Description("Inner diameter of the pump liner.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idLiner")]
        public LengthMeasure LinerSize {
            get {
                return idLinerField;
            } 
            set {
                idLinerField = value;
                NotifyPropertyChanged("LinerSize");
            }
        }

        private LengthMeasure idLinerField; 

        /// <summary>
        /// Pump action. 1 = Single acting, 2 = double acting. 
        /// </summary>
		[Range(1, 2)]
        [Description("Pump action. 1 = Single acting, 2 = double acting.")]
        [EnergisticsDataTypeAttribute(DataType = "pumpActionIntegerCode")]
		[XmlElement("pumpAction")]
        public short? PumpAction {
            get {
                return pumpActionField;
            } 
            set {
                pumpActionField = value;
                 this.PumpActionSpecified = true;
                NotifyPropertyChanged("PumpAction");
            }
        }

        private short? pumpActionField; 

        /// <summary>
        /// pumpActionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PumpActionSpecified {
            get {
                return pumpActionSpecifiedField;
            } 
            set {
                pumpActionSpecifiedField = value;
                NotifyPropertyChanged("PumpActionSpecified");
            }
        }

        private bool pumpActionSpecifiedField; 

        /// <summary>
        /// Efficiency of the pump. 
        /// </summary>
		[Description("Efficiency of the pump.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "relativePowerMeasure")]
		[XmlElement("eff")]
        public RelativePowerMeasure Eff {
            get {
                return effField;
            } 
            set {
                effField = value;
                NotifyPropertyChanged("Eff");
            }
        }

        private RelativePowerMeasure effField; 

        /// <summary>
        /// Stroke length. 
        /// </summary>
		[Description("Stroke length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenStroke")]
        public LengthMeasure LenStroke {
            get {
                return lenStrokeField;
            } 
            set {
                lenStrokeField = value;
                NotifyPropertyChanged("LenStroke");
            }
        }

        private LengthMeasure lenStrokeField; 

        /// <summary>
        /// Maximum pump pressure. 
        /// </summary>
		[Description("Maximum pump pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presMx")]
        public PressureMeasure PresMax {
            get {
                return presMxField;
            } 
            set {
                presMxField = value;
                NotifyPropertyChanged("PresMax");
            }
        }

        private PressureMeasure presMxField; 

        /// <summary>
        /// Maximum hydraulics horsepower. 
        /// </summary>
		[Description("Maximum hydraulics horsepower.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("powHydMx")]
        public PowerMeasure PowHydMax {
            get {
                return powHydMxField;
            } 
            set {
                powHydMxField = value;
                NotifyPropertyChanged("PowHydMax");
            }
        }

        private PowerMeasure powHydMxField; 

        /// <summary>
        /// Maximum Speed. 
        /// </summary>
		[Description("Maximum Speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("spmMx")]
        public AnglePerTimeMeasure SpmMax {
            get {
                return spmMxField;
            } 
            set {
                spmMxField = value;
                NotifyPropertyChanged("SpmMax");
            }
        }

        private AnglePerTimeMeasure spmMxField; 

        /// <summary>
        ///  Pump displacement.
        /// </summary>
		[Required]
        [Description("Pump displacement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("displacement")]
        public VolumeMeasure Displacement {
            get {
                return displacementField;
            } 
            set {
                displacementField = value;
                NotifyPropertyChanged("Displacement");
            }
        }

        private VolumeMeasure displacementField; 

        /// <summary>
        /// Pulsation dampener pressure. 
        /// </summary>
		[Description("Pulsation dampener pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presDamp")]
        public PressureMeasure PresDamp {
            get {
                return presDampField;
            } 
            set {
                presDampField = value;
                NotifyPropertyChanged("PresDamp");
            }
        }

        private PressureMeasure presDampField; 

        /// <summary>
        /// Pulsation dampener volume. 
        /// </summary>
		[Description("Pulsation dampener volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volDamp")]
        public VolumeMeasure VolDamp {
            get {
                return volDampField;
            } 
            set {
                volDampField = value;
                NotifyPropertyChanged("VolDamp");
            }
        }

        private VolumeMeasure volDampField; 

        /// <summary>
        /// Maximum mechanical power. 
        /// </summary>
		[Description("Maximum mechanical power.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("powMechMx")]
        public PowerMeasure PowMechMax {
            get {
                return powMechMxField;
            } 
            set {
                powMechMxField = value;
                NotifyPropertyChanged("PowMechMax");
            }
        }

        private PowerMeasure powMechMxField; 

        /// <summary>
        /// An identification tag for the pump. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the pump. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_nameTag")]
		[XmlElement("nameTag")]
        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(nameTagField!=null)
                 return nameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> nameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rig Pit Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pit", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Rig Pit Component Schema ")]
    public partial class Pit : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Relative pit number of all pits on the rig. One-based. 
        /// </summary>
		[Required]
        [Description("Relative pit number of all pits on the rig. One-based.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("index")]
        public short? Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private short? indexField; 

        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[Description("Date and time of installation.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private Timestamp? dTimInstallField; 

        /// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private bool dTimInstallSpecifiedField; 

        /// <summary>
        /// Removal date and time. 
        /// </summary>
		[Description("Removal date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private Timestamp? dTimRemoveField; 

        /// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private bool dTimRemoveSpecifiedField; 

        /// <summary>
        /// Maximum pit capacity. 
        /// </summary>
		[Required]
        [Description("Maximum pit capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("capMx")]
        public VolumeMeasure CapMax {
            get {
                return capMxField;
            } 
            set {
                capMxField = value;
                NotifyPropertyChanged("CapMax");
            }
        }

        private VolumeMeasure capMxField; 

        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[StringLength(32)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("owner")]
        public string Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string ownerField; 

        /// <summary>
        /// The type of pit. 
        /// </summary>
		[Description("The type of pit.")]
        [EnergisticsDataTypeAttribute(DataType = "PitType")]
		[XmlElement("typePit")]
        public PitType? TypePit {
            get {
                return typePitField;
            } 
            set {
                typePitField = value;
                 this.TypePitSpecified = true;
                NotifyPropertyChanged("TypePit");
            }
        }

        private PitType? typePitField; 

        /// <summary>
        /// typePitSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypePitSpecified {
            get {
                return typePitSpecifiedField;
            } 
            set {
                typePitSpecifiedField = value;
                NotifyPropertyChanged("TypePitSpecified");
            }
        }

        private bool typePitSpecifiedField; 

        /// <summary>
        /// Flag to indicate if Pit is part of the active system. Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[Description("Flag to indicate if Pit is part of the active system.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isActive")]
        public bool? IsActive {
            get {
                return isActiveField;
            } 
            set {
                isActiveField = value;
                 this.IsActiveSpecified = true;
                NotifyPropertyChanged("IsActive");
            }
        }

        private bool? isActiveField; 

        /// <summary>
        /// isActiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsActiveSpecified {
            get {
                return isActiveSpecifiedField;
            } 
            set {
                isActiveSpecifiedField = value;
                NotifyPropertyChanged("IsActiveSpecified");
            }
        }

        private bool isActiveSpecifiedField; 

        /// <summary>
        /// An identification tag for the pit. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the pit. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_nameTag")]
		[XmlElement("nameTag")]
        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(nameTagField!=null)
                 return nameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> nameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Blow Out Preventer Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bopComponent", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Blow Out Preventer Component Schema.")]
    public partial class BopComponent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Type of ram/preventer. 
        /// </summary>
		[Description("Type of ram/preventer.")]
        [EnergisticsDataTypeAttribute(DataType = "BopType")]
		[XmlElement("typeBopComp")]
        public BopType? TypeBopComp {
            get {
                return typeBopCompField;
            } 
            set {
                typeBopCompField = value;
                 this.TypeBopCompSpecified = true;
                NotifyPropertyChanged("TypeBopComp");
            }
        }

        private BopType? typeBopCompField; 

        /// <summary>
        /// typeBopCompSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeBopCompSpecified {
            get {
                return typeBopCompSpecifiedField;
            } 
            set {
                typeBopCompSpecifiedField = value;
                NotifyPropertyChanged("TypeBopCompSpecified");
            }
        }

        private bool typeBopCompSpecifiedField; 

        /// <summary>
        /// Description of component. 
        /// </summary>
		[StringLength(64)]
        [Description("Description of component.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("descComp")]
        public string DescComp {
            get {
                return descCompField;
            } 
            set {
                descCompField = value;
                NotifyPropertyChanged("DescComp");
            }
        }

        private string descCompField; 

        /// <summary>
        /// Inner diameter that tubulars can pass thru. 
        /// </summary>
		[Description("Inner diameter that tubulars can pass thru.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idPassThru")]
        public LengthMeasure InnerDiameterPassThru {
            get {
                return idPassThruField;
            } 
            set {
                idPassThruField = value;
                NotifyPropertyChanged("InnerDiameterPassThru");
            }
        }

        private LengthMeasure idPassThruField; 

        /// <summary>
        /// Working rating pressure of the component. 
        /// </summary>
		[Description("Working rating pressure of the component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presWork")]
        public PressureMeasure PresWork {
            get {
                return presWorkField;
            } 
            set {
                presWorkField = value;
                NotifyPropertyChanged("PresWork");
            }
        }

        private PressureMeasure presWorkField; 

        /// <summary>
        /// Minimum diameter of component it will seal. 
        /// </summary>
		[Description("Minimum diameter of component it will seal.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaCloseMn")]
        public LengthMeasure DiaCloseMin {
            get {
                return diaCloseMnField;
            } 
            set {
                diaCloseMnField = value;
                NotifyPropertyChanged("DiaCloseMin");
            }
        }

        private LengthMeasure diaCloseMnField; 

        /// <summary>
        /// Maximum diameter of component it will seal. 
        /// </summary>
		[Description("Maximum diameter of component it will seal.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaCloseMx")]
        public LengthMeasure DiaCloseMax {
            get {
                return diaCloseMxField;
            } 
            set {
                diaCloseMxField = value;
                NotifyPropertyChanged("DiaCloseMax");
            }
        }

        private LengthMeasure diaCloseMxField; 

        /// <summary>
        /// Arrangement nomenclature for the Blow Out Preventer stack (e.g. S, R, A).
        /// </summary>
		[StringLength(2)]
        [Description("Arrangement nomenclature for the Blow Out Preventer stack (e.g. S, R, A).")]
        [EnergisticsDataTypeAttribute(DataType = "str2")]
		[XmlElement("nomenclature")]
        public string Nomenclature {
            get {
                return nomenclatureField;
            } 
            set {
                nomenclatureField = value;
                NotifyPropertyChanged("Nomenclature");
            }
        }

        private string nomenclatureField; 

        /// <summary>
        /// Is Ram bore variable or single size? Defaults to false. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is Ram bore variable or single size? Defaults to false.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isVariable")]
        public bool? IsVariable {
            get {
                return isVariableField;
            } 
            set {
                isVariableField = value;
                 this.IsVariableSpecified = true;
                NotifyPropertyChanged("IsVariable");
            }
        }

        private bool? isVariableField; 

        /// <summary>
        /// isVariableSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsVariableSpecified {
            get {
                return isVariableSpecifiedField;
            } 
            set {
                isVariableSpecifiedField = value;
                NotifyPropertyChanged("IsVariableSpecified");
            }
        }

        private bool isVariableSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Rig BOP Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_bop", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Rig BOP Component Schema.")]
    public partial class Bop : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[StringLength(32)]
        [Description("Manufacturers designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("model")]
        public string Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string modelField; 

        /// <summary>
        /// Date and time of installation. 
        /// </summary>
		[Description("Date and time of installation.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return dTimInstallField;
            } 
            set {
                dTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        private Timestamp? dTimInstallField; 

        /// <summary>
        /// dTimInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return dTimInstallSpecifiedField;
            } 
            set {
                dTimInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }

        private bool dTimInstallSpecifiedField; 

        /// <summary>
        /// Removal Date. 
        /// </summary>
		[Description("Removal Date.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return dTimRemoveField;
            } 
            set {
                dTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        private Timestamp? dTimRemoveField; 

        /// <summary>
        /// dTimRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return dTimRemoveSpecifiedField;
            } 
            set {
                dTimRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }

        private bool dTimRemoveSpecifiedField; 

        /// <summary>
        /// An identification tag for the blow out preventer. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the blow out preventer. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_nameTag")]
		[XmlElement("nameTag")]
        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(nameTagField!=null)
                 return nameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> nameTagField; 

        /// <summary>
        /// Type of connection to Blow Out Preventer. 
        /// </summary>
		[StringLength(32)]
        [Description("Type of connection to Blow Out Preventer.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typeConnectionBop")]
        public string TypeConnectionBop {
            get {
                return typeConnectionBopField;
            } 
            set {
                typeConnectionBopField = value;
                NotifyPropertyChanged("TypeConnectionBop");
            }
        }

        private string typeConnectionBopField; 

        /// <summary>
        /// Size of connection to Blow Out Preventer. 
        /// </summary>
		[Description("Size of connection to Blow Out Preventer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("sizeConnectionBop")]
        public LengthMeasure SizeConnectionBop {
            get {
                return sizeConnectionBopField;
            } 
            set {
                sizeConnectionBopField = value;
                NotifyPropertyChanged("SizeConnectionBop");
            }
        }

        private LengthMeasure sizeConnectionBopField; 

        /// <summary>
        /// Maximum Pressure rating of Blow Out Preventer. 
        /// </summary>
		[Required]
        [Description("Maximum Pressure rating of Blow Out Preventer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presBopRating")]
        public PressureMeasure PresBopRating {
            get {
                return presBopRatingField;
            } 
            set {
                presBopRatingField = value;
                NotifyPropertyChanged("PresBopRating");
            }
        }

        private PressureMeasure presBopRatingField; 

        /// <summary>
        /// Maximum tubulars passable through Blow Out Preventer. 
        /// </summary>
		[Required]
        [Description("Maximum tubulars passable through Blow Out Preventer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("sizeBopSys")]
        public LengthMeasure SizeBopSys {
            get {
                return sizeBopSysField;
            } 
            set {
                sizeBopSysField = value;
                NotifyPropertyChanged("SizeBopSys");
            }
        }

        private LengthMeasure sizeBopSysField; 

        /// <summary>
        /// Is this a Rotating Blow Out Preventer? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[Description("Is this a Rotating Blow Out Preventer? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("rotBop")]
        public bool? RotBop {
            get {
                return rotBopField;
            } 
            set {
                rotBopField = value;
                 this.RotBopSpecified = true;
                NotifyPropertyChanged("RotBop");
            }
        }

        private bool? rotBopField; 

        /// <summary>
        /// rotBopSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RotBopSpecified {
            get {
                return rotBopSpecifiedField;
            } 
            set {
                rotBopSpecifiedField = value;
                NotifyPropertyChanged("RotBopSpecified");
            }
        }

        private bool rotBopSpecifiedField; 

        /// <summary>
        /// Inner diameter of Booster Line. 
        /// </summary>
		[Description("Inner diameter of Booster Line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idBoosterLine")]
        public LengthMeasure InnerDiameterBoosterLine {
            get {
                return idBoosterLineField;
            } 
            set {
                idBoosterLineField = value;
                NotifyPropertyChanged("InnerDiameterBoosterLine");
            }
        }

        private LengthMeasure idBoosterLineField; 

        /// <summary>
        /// Outer diameter of Booster Line. 
        /// </summary>
		[Description("Outer diameter of Booster Line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odBoosterLine")]
        public LengthMeasure OuterDiameterBoosterLine {
            get {
                return odBoosterLineField;
            } 
            set {
                odBoosterLineField = value;
                NotifyPropertyChanged("OuterDiameterBoosterLine");
            }
        }

        private LengthMeasure odBoosterLineField; 

        /// <summary>
        /// Length of Booster Line along riser. 
        /// </summary>
		[Description("Length of Booster Line along riser.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenBoosterLine")]
        public LengthMeasure LenBoosterLine {
            get {
                return lenBoosterLineField;
            } 
            set {
                lenBoosterLineField = value;
                NotifyPropertyChanged("LenBoosterLine");
            }
        }

        private LengthMeasure lenBoosterLineField; 

        /// <summary>
        /// Inner diameter of Surface Line. 
        /// </summary>
		[Description("Inner diameter of Surface Line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idSurfLine")]
        public LengthMeasure InnerDiameterSurfLine {
            get {
                return idSurfLineField;
            } 
            set {
                idSurfLineField = value;
                NotifyPropertyChanged("InnerDiameterSurfLine");
            }
        }

        private LengthMeasure idSurfLineField; 

        /// <summary>
        /// Outer diameter of Surface Line. 
        /// </summary>
		[Description("Outer diameter of Surface Line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odSurfLine")]
        public LengthMeasure OuterDiameterSurfLine {
            get {
                return odSurfLineField;
            } 
            set {
                odSurfLineField = value;
                NotifyPropertyChanged("OuterDiameterSurfLine");
            }
        }

        private LengthMeasure odSurfLineField; 

        /// <summary>
        /// Length of Choke Line along riser. 
        /// </summary>
		[Description("Length of Choke Line along riser.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenSurfLine")]
        public LengthMeasure LenSurfLine {
            get {
                return lenSurfLineField;
            } 
            set {
                lenSurfLineField = value;
                NotifyPropertyChanged("LenSurfLine");
            }
        }

        private LengthMeasure lenSurfLineField; 

        /// <summary>
        /// Inner diameter of Choke Line. 
        /// </summary>
		[Description("Inner diameter of Choke Line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idChkLine")]
        public LengthMeasure InnerDiameterChkLine {
            get {
                return idChkLineField;
            } 
            set {
                idChkLineField = value;
                NotifyPropertyChanged("InnerDiameterChkLine");
            }
        }

        private LengthMeasure idChkLineField; 

        /// <summary>
        /// Outer diameter of Choke Line. 
        /// </summary>
		[Description("Outer diameter of Choke Line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odChkLine")]
        public LengthMeasure OuterDiameterChkLine {
            get {
                return odChkLineField;
            } 
            set {
                odChkLineField = value;
                NotifyPropertyChanged("OuterDiameterChkLine");
            }
        }

        private LengthMeasure odChkLineField; 

        /// <summary>
        /// Length of Choke Line along riser. 
        /// </summary>
		[Description("Length of Choke Line along riser.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenChkLine")]
        public LengthMeasure LenChkLine {
            get {
                return lenChkLineField;
            } 
            set {
                lenChkLineField = value;
                NotifyPropertyChanged("LenChkLine");
            }
        }

        private LengthMeasure lenChkLineField; 

        /// <summary>
        /// Inner diameter of Kill Line. 
        /// </summary>
		[Description("Inner diameter of Kill Line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idKillLine")]
        public LengthMeasure InnerDiameterKillLine {
            get {
                return idKillLineField;
            } 
            set {
                idKillLineField = value;
                NotifyPropertyChanged("InnerDiameterKillLine");
            }
        }

        private LengthMeasure idKillLineField; 

        /// <summary>
        /// Outer diameter of Kill Line. 
        /// </summary>
		[Description("Outer diameter of Kill Line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("odKillLine")]
        public LengthMeasure OuterDiameterKillLine {
            get {
                return odKillLineField;
            } 
            set {
                odKillLineField = value;
                NotifyPropertyChanged("OuterDiameterKillLine");
            }
        }

        private LengthMeasure odKillLineField; 

        /// <summary>
        /// Length of Kill Line. 
        /// </summary>
		[Description("Length of Kill Line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenKillLine")]
        public LengthMeasure LenKillLine {
            get {
                return lenKillLineField;
            } 
            set {
                lenKillLineField = value;
                NotifyPropertyChanged("LenKillLine");
            }
        }

        private LengthMeasure lenKillLineField; 

        /// <summary>
        /// Container element for Blow Out Preventer component schema elements. 
        /// </summary>
		[Description("Container element for Blow Out Preventer component schema elements.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_bopComponent")]
		[XmlElement("bopComponent")]
        public List<BopComponent> BopComponent {
            get {
                return bopComponentField;
            } 
            set {
                bopComponentField = value;
                NotifyPropertyChanged("BopComponent");
            }
        }

         /// <summary>
         /// bool to indicate if BopComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BopComponentSpecified
         {
             get {
             if(bopComponentField!=null)
                 return bopComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<BopComponent> bopComponentField; 

        /// <summary>
        /// Diverter description. 
        /// </summary>
		[StringLength(64)]
        [Description("Diverter description.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("typeDiverter")]
        public string TypeDiverter {
            get {
                return typeDiverterField;
            } 
            set {
                typeDiverterField = value;
                NotifyPropertyChanged("TypeDiverter");
            }
        }

        private string typeDiverterField; 

        /// <summary>
        /// Diameter of diverter. 
        /// </summary>
		[Description("Diameter of diverter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaDiverter")]
        public LengthMeasure DiaDiverter {
            get {
                return diaDiverterField;
            } 
            set {
                diaDiverterField = value;
                NotifyPropertyChanged("DiaDiverter");
            }
        }

        private LengthMeasure diaDiverterField; 

        /// <summary>
        /// Working rating pressure of the component. 
        /// </summary>
		[Description("Working rating pressure of the component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presWorkDiverter")]
        public PressureMeasure PresWorkDiverter {
            get {
                return presWorkDiverterField;
            } 
            set {
                presWorkDiverterField = value;
                NotifyPropertyChanged("PresWorkDiverter");
            }
        }

        private PressureMeasure presWorkDiverterField; 

        /// <summary>
        /// Type of accumulator/description. 
        /// </summary>
		[StringLength(64)]
        [Description("Type of accumulator/description.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("accumulator")]
        public string Accumulator {
            get {
                return accumulatorField;
            } 
            set {
                accumulatorField = value;
                NotifyPropertyChanged("Accumulator");
            }
        }

        private string accumulatorField; 

        /// <summary>
        /// Accumulator fluid capacity. 
        /// </summary>
		[Description("Accumulator fluid capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("capAccFluid")]
        public VolumeMeasure CapAccFluid {
            get {
                return capAccFluidField;
            } 
            set {
                capAccFluidField = value;
                NotifyPropertyChanged("CapAccFluid");
            }
        }

        private VolumeMeasure capAccFluidField; 

        /// <summary>
        /// Accumulator pre-charge pressure. 
        /// </summary>
		[Description("Accumulator pre-charge pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presAccPreCharge")]
        public PressureMeasure PresAccPreCharge {
            get {
                return presAccPreChargeField;
            } 
            set {
                presAccPreChargeField = value;
                NotifyPropertyChanged("PresAccPreCharge");
            }
        }

        private PressureMeasure presAccPreChargeField; 

        /// <summary>
        /// Accumulator pre-charge volume
        /// </summary>
		[Description("Accumulator pre-charge volume")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volAccPreCharge")]
        public VolumeMeasure VolAccPreCharge {
            get {
                return volAccPreChargeField;
            } 
            set {
                volAccPreChargeField = value;
                NotifyPropertyChanged("VolAccPreCharge");
            }
        }

        private VolumeMeasure volAccPreChargeField; 

        /// <summary>
        /// Accumulator operating pressure rating. 
        /// </summary>
		[Description("Accumulator operating pressure rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presAccOpRating")]
        public PressureMeasure PresAccOperatingRating {
            get {
                return presAccOpRatingField;
            } 
            set {
                presAccOpRatingField = value;
                NotifyPropertyChanged("PresAccOperatingRating");
            }
        }

        private PressureMeasure presAccOpRatingField; 

        /// <summary>
        /// Blow Out Preventer Control System. 
        /// </summary>
		[StringLength(64)]
        [Description("Blow Out Preventer Control System.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("typeControlManifold")]
        public string TypeControlManifold {
            get {
                return typeControlManifoldField;
            } 
            set {
                typeControlManifoldField = value;
                NotifyPropertyChanged("TypeControlManifold");
            }
        }

        private string typeControlManifoldField; 

        /// <summary>
        /// Description of control system. 
        /// </summary>
		[StringLength(256)]
        [Description("Description of control system.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("descControlManifold")]
        public string DescControlManifold {
            get {
                return descControlManifoldField;
            } 
            set {
                descControlManifoldField = value;
                NotifyPropertyChanged("DescControlManifold");
            }
        }

        private string descControlManifoldField; 

        /// <summary>
        /// Type of choke manifold. 
        /// </summary>
		[StringLength(64)]
        [Description("Type of choke manifold.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("typeChokeManifold")]
        public string TypeChokeManifold {
            get {
                return typeChokeManifoldField;
            } 
            set {
                typeChokeManifoldField = value;
                NotifyPropertyChanged("TypeChokeManifold");
            }
        }

        private string typeChokeManifoldField; 

        /// <summary>
        /// Choke manifold pressure. 
        /// </summary>
		[Description("Choke manifold pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presChokeManifold")]
        public PressureMeasure PresChokeManifold {
            get {
                return presChokeManifoldField;
            } 
            set {
                presChokeManifoldField = value;
                NotifyPropertyChanged("PresChokeManifold");
            }
        }

        private PressureMeasure presChokeManifoldField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Rig object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_rig", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Rig object.")]
    public partial class Rig : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the rig. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the rig. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Contractor/owner. 
        /// </summary>
		[StringLength(32)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("owner")]
        public string Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string ownerField; 

        /// <summary>
        /// Rig type. 
        /// </summary>
		[Description("Rig type.")]
        [EnergisticsDataTypeAttribute(DataType = "RigType")]
		[XmlElement("typeRig")]
        public RigType? TypeRig {
            get {
                return typeRigField;
            } 
            set {
                typeRigField = value;
                 this.TypeRigSpecified = true;
                NotifyPropertyChanged("TypeRig");
            }
        }

        private RigType? typeRigField; 

        /// <summary>
        /// typeRigSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeRigSpecified {
            get {
                return typeRigSpecifiedField;
            } 
            set {
                typeRigSpecifiedField = value;
                NotifyPropertyChanged("TypeRigSpecified");
            }
        }

        private bool typeRigSpecifiedField; 

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Year entered service (CCYY). 
        /// </summary>
		[Range(1000, 9999)]
        [Description("Year entered service (CCYY).")]
        [EnergisticsDataTypeAttribute(DataType = "calendarYear")]
		[XmlElement("yearEntService")]
        public int? YearEntService {
            get {
                return yearEntServiceField;
            } 
            set {
                yearEntServiceField = value;
                 this.YearEntServiceSpecified = true;
                NotifyPropertyChanged("YearEntService");
            }
        }

        private int? yearEntServiceField; 

        /// <summary>
        /// yearEntServiceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool YearEntServiceSpecified {
            get {
                return yearEntServiceSpecifiedField;
            } 
            set {
                yearEntServiceSpecifiedField = value;
                NotifyPropertyChanged("YearEntServiceSpecified");
            }
        }

        private bool yearEntServiceSpecifiedField; 

        /// <summary>
        /// Rig classification. 
        /// </summary>
		[StringLength(32)]
        [Description("Rig classification.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("classRig")]
        public string ClassRig {
            get {
                return classRigField;
            } 
            set {
                classRigField = value;
                NotifyPropertyChanged("ClassRig");
            }
        }

        private string classRigField; 

        /// <summary>
        /// Rig approvals/certification. 
        /// </summary>
		[StringLength(64)]
        [Description("Rig approvals/certification.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("approvals")]
        public string Approvals {
            get {
                return approvalsField;
            } 
            set {
                approvalsField = value;
                NotifyPropertyChanged("Approvals");
            }
        }

        private string approvalsField; 

        /// <summary>
        /// Rig registration location. 
        /// </summary>
		[StringLength(32)]
        [Description("Rig registration location.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("registration")]
        public string Registration {
            get {
                return registrationField;
            } 
            set {
                registrationField = value;
                NotifyPropertyChanged("Registration");
            }
        }

        private string registrationField; 

        /// <summary>
        /// Rig telephone number. 
        /// </summary>
		[StringLength(32)]
        [Description("Rig telephone number.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("telNumber")]
        public string TelNumber {
            get {
                return telNumberField;
            } 
            set {
                telNumberField = value;
                NotifyPropertyChanged("TelNumber");
            }
        }

        private string telNumberField; 

        /// <summary>
        /// Rig fax number. 
        /// </summary>
		[StringLength(32)]
        [Description("Rig fax number.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("faxNumber")]
        public string FaxNumber {
            get {
                return faxNumberField;
            } 
            set {
                faxNumberField = value;
                NotifyPropertyChanged("FaxNumber");
            }
        }

        private string faxNumberField; 

        /// <summary>
        /// Rig Email address. 
        /// </summary>
		[StringLength(64)]
        [Description("Rig Email address.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("emailAddress")]
        public string EmailAddress {
            get {
                return emailAddressField;
            } 
            set {
                emailAddressField = value;
                NotifyPropertyChanged("EmailAddress");
            }
        }

        private string emailAddressField; 

        /// <summary>
        /// Name of contact person. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of contact person.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameContact")]
        public string NameContact {
            get {
                return nameContactField;
            } 
            set {
                nameContactField = value;
                NotifyPropertyChanged("NameContact");
            }
        }

        private string nameContactField; 

        /// <summary>
        /// Maximum hole depth rating for the rig. 
        /// </summary>
		[Description("Maximum hole depth rating for the rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("ratingDrillDepth")]
        public LengthMeasure RatingDrillDepth {
            get {
                return ratingDrillDepthField;
            } 
            set {
                ratingDrillDepthField = value;
                NotifyPropertyChanged("RatingDrillDepth");
            }
        }

        private LengthMeasure ratingDrillDepthField; 

        /// <summary>
        /// Working water depth capability of rig. 
        /// </summary>
		[Description("Working water depth capability of rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("ratingWaterDepth")]
        public LengthMeasure RatingWaterDepth {
            get {
                return ratingWaterDepthField;
            } 
            set {
                ratingWaterDepthField = value;
                NotifyPropertyChanged("RatingWaterDepth");
            }
        }

        private LengthMeasure ratingWaterDepthField; 

        /// <summary>
        /// Flag to indicate that rig is an offshore rig (Drill Ship, Semi, Jack-up, Platform, TADU). Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Flag to indicate that rig is an offshore rig (Drill Ship, Semi, Jack-up, Platform, TADU).   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isOffshore")]
        public bool? IsOffshore {
            get {
                return isOffshoreField;
            } 
            set {
                isOffshoreField = value;
                 this.IsOffshoreSpecified = true;
                NotifyPropertyChanged("IsOffshore");
            }
        }

        private bool? isOffshoreField; 

        /// <summary>
        /// isOffshoreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsOffshoreSpecified {
            get {
                return isOffshoreSpecifiedField;
            } 
            set {
                isOffshoreSpecifiedField = value;
                NotifyPropertyChanged("IsOffshoreSpecified");
            }
        }

        private bool isOffshoreSpecifiedField; 

        /// <summary>
        /// Air gap from Rig Floor to ground or mean sea level depending on location. 
        /// </summary>
		[Description("Air gap from Rig Floor to ground or mean sea level depending on location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("airGap")]
        public LengthMeasure AirGap {
            get {
                return airGapField;
            } 
            set {
                airGapField = value;
                NotifyPropertyChanged("AirGap");
            }
        }

        private LengthMeasure airGapField; 

        /// <summary>
        /// Date and time rig operations started, or date and time object created. 
        /// </summary>
		[Description("Date and time rig operations started, or date and time object created.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStartOp")]
        public Timestamp? DateTimeStartOperating {
            get {
                return dTimStartOpField;
            } 
            set {
                dTimStartOpField = value;
                 this.DateTimeStartOperatingSpecified = true;
                NotifyPropertyChanged("DateTimeStartOperating");
            }
        }

        private Timestamp? dTimStartOpField; 

        /// <summary>
        /// dTimStartOpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartOperatingSpecified {
            get {
                return dTimStartOpSpecifiedField;
            } 
            set {
                dTimStartOpSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartOperatingSpecified");
            }
        }

        private bool dTimStartOpSpecifiedField; 

        /// <summary>
        /// Date and time rig operations ended (May be NULL for active rig). 
        /// </summary>
		[Description("Date and time rig operations ended (May be NULL for active rig).")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEndOp")]
        public Timestamp? DateTimeEndOperating {
            get {
                return dTimEndOpField;
            } 
            set {
                dTimEndOpField = value;
                 this.DateTimeEndOperatingSpecified = true;
                NotifyPropertyChanged("DateTimeEndOperating");
            }
        }

        private Timestamp? dTimEndOpField; 

        /// <summary>
        /// dTimEndOpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndOperatingSpecified {
            get {
                return dTimEndOpSpecifiedField;
            } 
            set {
                dTimEndOpSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndOperatingSpecified");
            }
        }

        private bool dTimEndOpSpecifiedField; 

        /// <summary>
        /// Blow out preventer description and components. 
        /// </summary>
		[Description("Blow out preventer description and components.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_bop")]
		[XmlElement("bop")]
        public Bop Bop {
            get {
                return bopField;
            } 
            set {
                bopField = value;
                NotifyPropertyChanged("Bop");
            }
        }

        private Bop bopField; 

        /// <summary>
        /// Pit equipment for the rig. 
        /// </summary>
		[Description("Pit equipment for the rig.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_pit")]
		[XmlElement("pit")]
        public List<Pit> Pit {
            get {
                return pitField;
            } 
            set {
                pitField = value;
                NotifyPropertyChanged("Pit");
            }
        }

         /// <summary>
         /// bool to indicate if Pit has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PitSpecified
         {
             get {
             if(pitField!=null)
                 return pitField.Count>0?true:false;
             else return false;
             }
         }
        private List<Pit> pitField; 

        /// <summary>
        /// Drilling fluid (mud/cement) pumping units for the rig. 
        /// </summary>
		[Description("Drilling fluid (mud/cement) pumping units for the rig.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_pump")]
		[XmlElement("pump")]
        public List<Pump> Pump {
            get {
                return pumpField;
            } 
            set {
                pumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

         /// <summary>
         /// bool to indicate if Pump has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PumpSpecified
         {
             get {
             if(pumpField!=null)
                 return pumpField.Count>0?true:false;
             else return false;
             }
         }
        private List<Pump> pumpField; 

        /// <summary>
        /// Mud cleaning shaker equipment for the rig. 
        /// </summary>
		[Description("Mud cleaning shaker equipment for the rig.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_shaker")]
		[XmlElement("shaker")]
        public List<Shaker> Shaker {
            get {
                return shakerField;
            } 
            set {
                shakerField = value;
                NotifyPropertyChanged("Shaker");
            }
        }

         /// <summary>
         /// bool to indicate if Shaker has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ShakerSpecified
         {
             get {
             if(shakerField!=null)
                 return shakerField.Count>0?true:false;
             else return false;
             }
         }
        private List<Shaker> shakerField; 

        /// <summary>
        /// Mud cleaning centrifuge equipment for the rig. 
        /// </summary>
		[Description("Mud cleaning centrifuge equipment for the rig.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_centrifuge")]
		[XmlElement("centrifuge")]
        public List<Centrifuge> Centrifuge {
            get {
                return centrifugeField;
            } 
            set {
                centrifugeField = value;
                NotifyPropertyChanged("Centrifuge");
            }
        }

         /// <summary>
         /// bool to indicate if Centrifuge has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CentrifugeSpecified
         {
             get {
             if(centrifugeField!=null)
                 return centrifugeField.Count>0?true:false;
             else return false;
             }
         }
        private List<Centrifuge> centrifugeField; 

        /// <summary>
        /// Mud cleaning hydrocyclone equipment for the rig. 
        /// </summary>
		[Description("Mud cleaning hydrocyclone equipment for the rig.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_hydrocyclone")]
		[XmlElement("hydrocyclone")]
        public List<Hydrocyclone> Hydrocyclone {
            get {
                return hydrocycloneField;
            } 
            set {
                hydrocycloneField = value;
                NotifyPropertyChanged("Hydrocyclone");
            }
        }

         /// <summary>
         /// bool to indicate if Hydrocyclone has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool HydrocycloneSpecified
         {
             get {
             if(hydrocycloneField!=null)
                 return hydrocycloneField.Count>0?true:false;
             else return false;
             }
         }
        private List<Hydrocyclone> hydrocycloneField; 

        /// <summary>
        /// Mud de-gasser equipment for the rig. 
        /// </summary>
		[Description("Mud de-gasser equipment for the rig.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_degasser")]
		[XmlElement("degasser")]
        public List<Degasser> Degasser {
            get {
                return degasserField;
            } 
            set {
                degasserField = value;
                NotifyPropertyChanged("Degasser");
            }
        }

         /// <summary>
         /// bool to indicate if Degasser has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DegasserSpecified
         {
             get {
             if(degasserField!=null)
                 return degasserField.Count>0?true:false;
             else return false;
             }
         }
        private List<Degasser> degasserField; 

        /// <summary>
        /// Coiled tubing specific equipment configuration. 
        /// </summary>
		[Description("Coiled tubing specific equipment configuration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_surfaceEquipment")]
		[XmlElement("surfaceEquipment")]
        public SurfaceEquipment SurfaceEquipment {
            get {
                return surfaceEquipmentField;
            } 
            set {
                surfaceEquipmentField = value;
                NotifyPropertyChanged("SurfaceEquipment");
            }
        }

        private SurfaceEquipment surfaceEquipmentField; 

        /// <summary>
        /// Number of derricks on the rig. 
        /// </summary>
		[Description("Number of derricks on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numDerricks")]
        public short? NumDerricks {
            get {
                return numDerricksField;
            } 
            set {
                numDerricksField = value;
                 this.NumDerricksSpecified = true;
                NotifyPropertyChanged("NumDerricks");
            }
        }

        private short? numDerricksField; 

        /// <summary>
        /// numDerricksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumDerricksSpecified {
            get {
                return numDerricksSpecifiedField;
            } 
            set {
                numDerricksSpecifiedField = value;
                NotifyPropertyChanged("NumDerricksSpecified");
            }
        }

        private bool numDerricksSpecifiedField; 

        /// <summary>
        /// Derrick type. 
        /// </summary>
		[Description("Derrick type.")]
        [EnergisticsDataTypeAttribute(DataType = "DerrickType")]
		[XmlElement("typeDerrick")]
        public DerrickType? TypeDerrick {
            get {
                return typeDerrickField;
            } 
            set {
                typeDerrickField = value;
                 this.TypeDerrickSpecified = true;
                NotifyPropertyChanged("TypeDerrick");
            }
        }

        private DerrickType? typeDerrickField; 

        /// <summary>
        /// typeDerrickSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeDerrickSpecified {
            get {
                return typeDerrickSpecifiedField;
            } 
            set {
                typeDerrickSpecifiedField = value;
                NotifyPropertyChanged("TypeDerrickSpecified");
            }
        }

        private bool typeDerrickSpecifiedField; 

        /// <summary>
        /// Maximum support load applied to derrick structure. 
        /// </summary>
		[Description("Maximum support load applied to derrick structure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("ratingDerrick")]
        public ForceMeasure RatingDerrick {
            get {
                return ratingDerrickField;
            } 
            set {
                ratingDerrickField = value;
                NotifyPropertyChanged("RatingDerrick");
            }
        }

        private ForceMeasure ratingDerrickField; 

        /// <summary>
        /// Height of derrick. 
        /// </summary>
		[Description("Height of derrick.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("htDerrick")]
        public LengthMeasure HeightDerrick {
            get {
                return htDerrickField;
            } 
            set {
                htDerrickField = value;
                NotifyPropertyChanged("HeightDerrick");
            }
        }

        private LengthMeasure htDerrickField; 

        /// <summary>
        /// Maximum hookload rating. 
        /// </summary>
		[Description("Maximum hookload rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("ratingHkld")]
        public ForceMeasure RatingHookload {
            get {
                return ratingHkldField;
            } 
            set {
                ratingHkldField = value;
                NotifyPropertyChanged("RatingHookload");
            }
        }

        private ForceMeasure ratingHkldField; 

        /// <summary>
        /// Derrick wind capacity. 
        /// </summary>
		[Description("Derrick wind capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("capWindDerrick")]
        public VelocityMeasure CapWindDerrick {
            get {
                return capWindDerrickField;
            } 
            set {
                capWindDerrickField = value;
                NotifyPropertyChanged("CapWindDerrick");
            }
        }

        private VelocityMeasure capWindDerrickField; 

        /// <summary>
        /// Block weight. 
        /// </summary>
		[Description("Block weight.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("wtBlock")]
        public ForceMeasure WeightBlock {
            get {
                return wtBlockField;
            } 
            set {
                wtBlockField = value;
                NotifyPropertyChanged("WeightBlock");
            }
        }

        private ForceMeasure wtBlockField; 

        /// <summary>
        /// Weight rating of the travelling block. 
        /// </summary>
		[Description("Weight rating of the travelling block.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("ratingBlock")]
        public ForceMeasure RatingBlock {
            get {
                return ratingBlockField;
            } 
            set {
                ratingBlockField = value;
                NotifyPropertyChanged("RatingBlock");
            }
        }

        private ForceMeasure ratingBlockField; 

        /// <summary>
        /// Number of block lines. 
        /// </summary>
		[Description("Number of block lines.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numBlockLines")]
        public short? NumBlockLines {
            get {
                return numBlockLinesField;
            } 
            set {
                numBlockLinesField = value;
                 this.NumBlockLinesSpecified = true;
                NotifyPropertyChanged("NumBlockLines");
            }
        }

        private short? numBlockLinesField; 

        /// <summary>
        /// numBlockLinesSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumBlockLinesSpecified {
            get {
                return numBlockLinesSpecifiedField;
            } 
            set {
                numBlockLinesSpecifiedField = value;
                NotifyPropertyChanged("NumBlockLinesSpecified");
            }
        }

        private bool numBlockLinesSpecifiedField; 

        /// <summary>
        /// Type of hook. 
        /// </summary>
		[StringLength(32)]
        [Description("Type of hook.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typeHook")]
        public string TypeHook {
            get {
                return typeHookField;
            } 
            set {
                typeHookField = value;
                NotifyPropertyChanged("TypeHook");
            }
        }

        private string typeHookField; 

        /// <summary>
        /// Weight rating of the hook. 
        /// </summary>
		[Description("Weight rating of the hook.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("ratingHook")]
        public ForceMeasure RatingHook {
            get {
                return ratingHookField;
            } 
            set {
                ratingHookField = value;
                NotifyPropertyChanged("RatingHook");
            }
        }

        private ForceMeasure ratingHookField; 

        /// <summary>
        /// Drill line diameter. 
        /// </summary>
		[Description("Drill line diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("sizeDrillLine")]
        public LengthMeasure SizeDrillLine {
            get {
                return sizeDrillLineField;
            } 
            set {
                sizeDrillLineField = value;
                NotifyPropertyChanged("SizeDrillLine");
            }
        }

        private LengthMeasure sizeDrillLineField; 

        /// <summary>
        /// Draw-works type. 
        /// </summary>
		[Description("Draw-works type.")]
        [EnergisticsDataTypeAttribute(DataType = "DrawWorksType")]
		[XmlElement("typeDrawWorks")]
        public DrawWorksType? TypeDrawWorks {
            get {
                return typeDrawWorksField;
            } 
            set {
                typeDrawWorksField = value;
                 this.TypeDrawWorksSpecified = true;
                NotifyPropertyChanged("TypeDrawWorks");
            }
        }

        private DrawWorksType? typeDrawWorksField; 

        /// <summary>
        /// typeDrawWorksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeDrawWorksSpecified {
            get {
                return typeDrawWorksSpecifiedField;
            } 
            set {
                typeDrawWorksSpecifiedField = value;
                NotifyPropertyChanged("TypeDrawWorksSpecified");
            }
        }

        private bool typeDrawWorksSpecifiedField; 

        /// <summary>
        /// Draw works horse power. 
        /// </summary>
		[Description("Draw works horse power.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("powerDrawWorks")]
        public PowerMeasure PowerDrawWorks {
            get {
                return powerDrawWorksField;
            } 
            set {
                powerDrawWorksField = value;
                NotifyPropertyChanged("PowerDrawWorks");
            }
        }

        private PowerMeasure powerDrawWorksField; 

        /// <summary>
        /// Weight rating of the drawworks. 
        /// </summary>
		[Description("Weight rating of the drawworks.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("ratingDrawWorks")]
        public ForceMeasure RatingDrawWorks {
            get {
                return ratingDrawWorksField;
            } 
            set {
                ratingDrawWorksField = value;
                NotifyPropertyChanged("RatingDrawWorks");
            }
        }

        private ForceMeasure ratingDrawWorksField; 

        /// <summary>
        /// Description of the drawworks motor. 
        /// </summary>
		[StringLength(32)]
        [Description("Description of the drawworks motor.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("motorDrawWorks")]
        public string MotorDrawWorks {
            get {
                return motorDrawWorksField;
            } 
            set {
                motorDrawWorksField = value;
                NotifyPropertyChanged("MotorDrawWorks");
            }
        }

        private string motorDrawWorksField; 

        /// <summary>
        /// Rig brake description. 
        /// </summary>
		[StringLength(32)]
        [Description("Rig brake description.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("descBrake")]
        public string DescBrake {
            get {
                return descBrakeField;
            } 
            set {
                descBrakeField = value;
                NotifyPropertyChanged("DescBrake");
            }
        }

        private string descBrakeField; 

        /// <summary>
        /// Type of Swivel. 
        /// </summary>
		[StringLength(32)]
        [Description("Type of Swivel.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typeSwivel")]
        public string TypeSwivel {
            get {
                return typeSwivelField;
            } 
            set {
                typeSwivelField = value;
                NotifyPropertyChanged("TypeSwivel");
            }
        }

        private string typeSwivelField; 

        /// <summary>
        /// Maximum swivel rating. 
        /// </summary>
		[Description("Maximum swivel rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("ratingSwivel")]
        public ForceMeasure RatingSwivel {
            get {
                return ratingSwivelField;
            } 
            set {
                ratingSwivelField = value;
                NotifyPropertyChanged("RatingSwivel");
            }
        }

        private ForceMeasure ratingSwivelField; 

        /// <summary>
        /// Work string drive type. 
        /// </summary>
		[Description("Work string drive type.")]
        [EnergisticsDataTypeAttribute(DataType = "DriveType")]
		[XmlElement("rotSystem")]
        public DriveType? RotSystem {
            get {
                return rotSystemField;
            } 
            set {
                rotSystemField = value;
                 this.RotSystemSpecified = true;
                NotifyPropertyChanged("RotSystem");
            }
        }

        private DriveType? rotSystemField; 

        /// <summary>
        /// rotSystemSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RotSystemSpecified {
            get {
                return rotSystemSpecifiedField;
            } 
            set {
                rotSystemSpecifiedField = value;
                NotifyPropertyChanged("RotSystemSpecified");
            }
        }

        private bool rotSystemSpecifiedField; 

        /// <summary>
        /// Description of rotating system. 
        /// </summary>
		[StringLength(32)]
        [Description("Description of rotating system.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("descRotSystem")]
        public string DescRotSystem {
            get {
                return descRotSystemField;
            } 
            set {
                descRotSystemField = value;
                NotifyPropertyChanged("DescRotSystem");
            }
        }

        private string descRotSystemField; 

        /// <summary>
        /// Work string rotational torque rating. 
        /// </summary>
		[Description("Work string rotational torque rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("ratingTqRotSys")]
        public MomentOfForceMeasure RatingTorqueRotSys {
            get {
                return ratingTqRotSysField;
            } 
            set {
                ratingTqRotSysField = value;
                NotifyPropertyChanged("RatingTorqueRotSys");
            }
        }

        private MomentOfForceMeasure ratingTqRotSysField; 

        /// <summary>
        /// Rotary size opening. 
        /// </summary>
		[Description("Rotary size opening.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("rotSizeOpening")]
        public LengthMeasure RotSizeOpening {
            get {
                return rotSizeOpeningField;
            } 
            set {
                rotSizeOpeningField = value;
                NotifyPropertyChanged("RotSizeOpening");
            }
        }

        private LengthMeasure rotSizeOpeningField; 

        /// <summary>
        /// Work string rotational torque rating. 
        /// </summary>
		[Description("Work string rotational torque rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("ratingRotSystem")]
        public ForceMeasure RatingRotSystem {
            get {
                return ratingRotSystemField;
            } 
            set {
                ratingRotSystemField = value;
                NotifyPropertyChanged("RatingRotSystem");
            }
        }

        private ForceMeasure ratingRotSystemField; 

        /// <summary>
        /// Description of slow circulation rates system. 
        /// </summary>
		[StringLength(32)]
        [Description("Description of slow circulation rates system.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("scrSystem")]
        public string ScrSystem {
            get {
                return scrSystemField;
            } 
            set {
                scrSystemField = value;
                NotifyPropertyChanged("ScrSystem");
            }
        }

        private string scrSystemField; 

        /// <summary>
        /// Name of pipe handling system. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of pipe handling system.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("pipeHandlingSystem")]
        public string PipeHandlingSystem {
            get {
                return pipeHandlingSystemField;
            } 
            set {
                pipeHandlingSystemField = value;
                NotifyPropertyChanged("PipeHandlingSystem");
            }
        }

        private string pipeHandlingSystemField; 

        /// <summary>
        /// Bulk/dry mud storage capacity. 
        /// </summary>
		[Description("Bulk/dry mud storage capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("capBulkMud")]
        public VolumeMeasure CapBulkMud {
            get {
                return capBulkMudField;
            } 
            set {
                capBulkMudField = value;
                NotifyPropertyChanged("CapBulkMud");
            }
        }

        private VolumeMeasure capBulkMudField; 

        /// <summary>
        /// Liquid mud storage capacity. 
        /// </summary>
		[Description("Liquid mud storage capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("capLiquidMud")]
        public VolumeMeasure CapLiquidMud {
            get {
                return capLiquidMudField;
            } 
            set {
                capLiquidMudField = value;
                NotifyPropertyChanged("CapLiquidMud");
            }
        }

        private VolumeMeasure capLiquidMudField; 

        /// <summary>
        /// Drill water capacity. 
        /// </summary>
		[Description("Drill water capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("capDrillWater")]
        public VolumeMeasure CapDrillWater {
            get {
                return capDrillWaterField;
            } 
            set {
                capDrillWaterField = value;
                NotifyPropertyChanged("CapDrillWater");
            }
        }

        private VolumeMeasure capDrillWaterField; 

        /// <summary>
        /// Potable water capacity. 
        /// </summary>
		[Description("Potable water capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("capPotableWater")]
        public VolumeMeasure CapPotableWater {
            get {
                return capPotableWaterField;
            } 
            set {
                capPotableWaterField = value;
                NotifyPropertyChanged("CapPotableWater");
            }
        }

        private VolumeMeasure capPotableWaterField; 

        /// <summary>
        /// Fuel capacity. 
        /// </summary>
		[Description("Fuel capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("capFuel")]
        public VolumeMeasure CapFuel {
            get {
                return capFuelField;
            } 
            set {
                capFuelField = value;
                NotifyPropertyChanged("CapFuel");
            }
        }

        private VolumeMeasure capFuelField; 

        /// <summary>
        /// Capacity of builk cement. 
        /// </summary>
		[Description("Capacity of builk cement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("capBulkCement")]
        public VolumeMeasure CapBulkCement {
            get {
                return capBulkCementField;
            } 
            set {
                capBulkCementField = value;
                NotifyPropertyChanged("CapBulkCement");
            }
        }

        private VolumeMeasure capBulkCementField; 

        /// <summary>
        /// Power system. 
        /// </summary>
		[StringLength(64)]
        [Description("Power system.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("mainEngine")]
        public string MainEngine {
            get {
                return mainEngineField;
            } 
            set {
                mainEngineField = value;
                NotifyPropertyChanged("MainEngine");
            }
        }

        private string mainEngineField; 

        /// <summary>
        /// Description of the electrical power generating system. 
        /// </summary>
		[StringLength(64)]
        [Description("Description of the electrical power generating system.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("generator")]
        public string Generator {
            get {
                return generatorField;
            } 
            set {
                generatorField = value;
                NotifyPropertyChanged("Generator");
            }
        }

        private string generatorField; 

        /// <summary>
        /// Name of cement unit on the rig. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of cement unit on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("cementUnit")]
        public string CementUnit {
            get {
                return cementUnitField;
            } 
            set {
                cementUnitField = value;
                NotifyPropertyChanged("CementUnit");
            }
        }

        private string cementUnitField; 

        /// <summary>
        /// Number of beds available on the rig. 
        /// </summary>
		[Description("Number of beds available on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numBunks")]
        public short? NumBunks {
            get {
                return numBunksField;
            } 
            set {
                numBunksField = value;
                 this.NumBunksSpecified = true;
                NotifyPropertyChanged("NumBunks");
            }
        }

        private short? numBunksField; 

        /// <summary>
        /// numBunksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumBunksSpecified {
            get {
                return numBunksSpecifiedField;
            } 
            set {
                numBunksSpecifiedField = value;
                NotifyPropertyChanged("NumBunksSpecified");
            }
        }

        private bool numBunksSpecifiedField; 

        /// <summary>
        /// Number of bunks per room. 
        /// </summary>
		[Description("Number of bunks per room.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("bunksPerRoom")]
        public short? BunksPerRoom {
            get {
                return bunksPerRoomField;
            } 
            set {
                bunksPerRoomField = value;
                 this.BunksPerRoomSpecified = true;
                NotifyPropertyChanged("BunksPerRoom");
            }
        }

        private short? bunksPerRoomField; 

        /// <summary>
        /// bunksPerRoomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BunksPerRoomSpecified {
            get {
                return bunksPerRoomSpecifiedField;
            } 
            set {
                bunksPerRoomSpecifiedField = value;
                NotifyPropertyChanged("BunksPerRoomSpecified");
            }
        }

        private bool bunksPerRoomSpecifiedField; 

        /// <summary>
        /// Number of cranes on the rig. 
        /// </summary>
		[Description("Number of cranes on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numCranes")]
        public short? NumCranes {
            get {
                return numCranesField;
            } 
            set {
                numCranesField = value;
                 this.NumCranesSpecified = true;
                NotifyPropertyChanged("NumCranes");
            }
        }

        private short? numCranesField; 

        /// <summary>
        /// numCranesSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumCranesSpecified {
            get {
                return numCranesSpecifiedField;
            } 
            set {
                numCranesSpecifiedField = value;
                NotifyPropertyChanged("NumCranesSpecified");
            }
        }

        private bool numCranesSpecifiedField; 

        /// <summary>
        /// Number of anchors. 
        /// </summary>
		[Description("Number of anchors.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numAnch")]
        public short? NumAnch {
            get {
                return numAnchField;
            } 
            set {
                numAnchField = value;
                 this.NumAnchSpecified = true;
                NotifyPropertyChanged("NumAnch");
            }
        }

        private short? numAnchField; 

        /// <summary>
        /// numAnchSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumAnchSpecified {
            get {
                return numAnchSpecifiedField;
            } 
            set {
                numAnchSpecifiedField = value;
                NotifyPropertyChanged("NumAnchSpecified");
            }
        }

        private bool numAnchSpecifiedField; 

        /// <summary>
        /// Mooring type. 
        /// </summary>
		[StringLength(32)]
        [Description("Mooring type.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("moorType")]
        public string MoorType {
            get {
                return moorTypeField;
            } 
            set {
                moorTypeField = value;
                NotifyPropertyChanged("MoorType");
            }
        }

        private string moorTypeField; 

        /// <summary>
        /// Number of guideline tensioners. 
        /// </summary>
		[Description("Number of guideline tensioners.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numGuideTens")]
        public short? NumGuideTens {
            get {
                return numGuideTensField;
            } 
            set {
                numGuideTensField = value;
                 this.NumGuideTensSpecified = true;
                NotifyPropertyChanged("NumGuideTens");
            }
        }

        private short? numGuideTensField; 

        /// <summary>
        /// numGuideTensSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumGuideTensSpecified {
            get {
                return numGuideTensSpecifiedField;
            } 
            set {
                numGuideTensSpecifiedField = value;
                NotifyPropertyChanged("NumGuideTensSpecified");
            }
        }

        private bool numGuideTensSpecifiedField; 

        /// <summary>
        /// Number of riser tensioners. 
        /// </summary>
		[Description("Number of riser tensioners.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numRiserTens")]
        public short? NumRiserTens {
            get {
                return numRiserTensField;
            } 
            set {
                numRiserTensField = value;
                 this.NumRiserTensSpecified = true;
                NotifyPropertyChanged("NumRiserTens");
            }
        }

        private short? numRiserTensField; 

        /// <summary>
        /// numRiserTensSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumRiserTensSpecified {
            get {
                return numRiserTensSpecifiedField;
            } 
            set {
                numRiserTensSpecifiedField = value;
                NotifyPropertyChanged("NumRiserTensSpecified");
            }
        }

        private bool numRiserTensSpecifiedField; 

        /// <summary>
        /// Variable deck load maximum (offshore rigs only). 
        /// </summary>
		[Description("Variable deck load maximum (offshore rigs only).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("varDeckLdMx")]
        public ForceMeasure VarDeckLoadMax {
            get {
                return varDeckLdMxField;
            } 
            set {
                varDeckLdMxField = value;
                NotifyPropertyChanged("VarDeckLoadMax");
            }
        }

        private ForceMeasure varDeckLdMxField; 

        /// <summary>
        /// Variable deck load storm rating (offshore rigs only). 
        /// </summary>
		[Description("Variable deck load storm rating (offshore rigs only).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("vdlStorm")]
        public ForceMeasure VdlStorm {
            get {
                return vdlStormField;
            } 
            set {
                vdlStormField = value;
                NotifyPropertyChanged("VdlStorm");
            }
        }

        private ForceMeasure vdlStormField; 

        /// <summary>
        /// Number of thrusters. 
        /// </summary>
		[Description("Number of thrusters.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numThrusters")]
        public short? NumThrusters {
            get {
                return numThrustersField;
            } 
            set {
                numThrustersField = value;
                 this.NumThrustersSpecified = true;
                NotifyPropertyChanged("NumThrusters");
            }
        }

        private short? numThrustersField; 

        /// <summary>
        /// numThrustersSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumThrustersSpecified {
            get {
                return numThrustersSpecifiedField;
            } 
            set {
                numThrustersSpecifiedField = value;
                NotifyPropertyChanged("NumThrustersSpecified");
            }
        }

        private bool numThrustersSpecifiedField; 

        /// <summary>
        /// Are the thrusters azimuth. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Are the thrusters azimuth.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("azimuthing")]
        public bool? Azimuthing {
            get {
                return azimuthingField;
            } 
            set {
                azimuthingField = value;
                 this.AzimuthingSpecified = true;
                NotifyPropertyChanged("Azimuthing");
            }
        }

        private bool? azimuthingField; 

        /// <summary>
        /// azimuthingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AzimuthingSpecified {
            get {
                return azimuthingSpecifiedField;
            } 
            set {
                azimuthingSpecifiedField = value;
                NotifyPropertyChanged("AzimuthingSpecified");
            }
        }

        private bool azimuthingSpecifiedField; 

        /// <summary>
        /// Minimum motion compensation. 
        /// </summary>
		[Description("Minimum motion compensation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("motionCompensationMn")]
        public ForceMeasure MotionCompensationMin {
            get {
                return motionCompensationMnField;
            } 
            set {
                motionCompensationMnField = value;
                NotifyPropertyChanged("MotionCompensationMin");
            }
        }

        private ForceMeasure motionCompensationMnField; 

        /// <summary>
        /// Maximum motion compensation. 
        /// </summary>
		[Description("Maximum motion compensation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("motionCompensationMx")]
        public ForceMeasure MotionCompensationMax {
            get {
                return motionCompensationMxField;
            } 
            set {
                motionCompensationMxField = value;
                NotifyPropertyChanged("MotionCompensationMax");
            }
        }

        private ForceMeasure motionCompensationMxField; 

        /// <summary>
        /// Length of motion compensation provided by equipment. 
        /// </summary>
		[Description("Length of motion compensation provided by equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("strokeMotionCompensation")]
        public LengthMeasure StrokeMotionCompensation {
            get {
                return strokeMotionCompensationField;
            } 
            set {
                strokeMotionCompensationField = value;
                NotifyPropertyChanged("StrokeMotionCompensation");
            }
        }

        private LengthMeasure strokeMotionCompensationField; 

        /// <summary>
        /// Riser angle limit. 
        /// </summary>
		[Description("Riser angle limit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("riserAngleLimit")]
        public PlaneAngleMeasure RiserAngleLimit {
            get {
                return riserAngleLimitField;
            } 
            set {
                riserAngleLimitField = value;
                NotifyPropertyChanged("RiserAngleLimit");
            }
        }

        private PlaneAngleMeasure riserAngleLimitField; 

        /// <summary>
        /// Maximum allowable heave. 
        /// </summary>
		[Description("Maximum allowable heave.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("heaveMx")]
        public LengthMeasure HeaveMax {
            get {
                return heaveMxField;
            } 
            set {
                heaveMxField = value;
                NotifyPropertyChanged("HeaveMax");
            }
        }

        private LengthMeasure heaveMxField; 

        /// <summary>
        /// Description of gantry. 
        /// </summary>
		[StringLength(64)]
        [Description("Description of gantry.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("gantry")]
        public string Gantry {
            get {
                return gantryField;
            } 
            set {
                gantryField = value;
                NotifyPropertyChanged("Gantry");
            }
        }

        private string gantryField; 

        /// <summary>
        /// Description of flare. 
        /// </summary>
		[StringLength(64)]
        [Description("Description of flare.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("flares")]
        public string Flares {
            get {
                return flaresField;
            } 
            set {
                flaresField = value;
                NotifyPropertyChanged("Flares");
            }
        }

        private string flaresField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Weather Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_weather", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Weather Component Schema")]
    public partial class Weather : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// Name of company that supplied the data. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of company that supplied the data.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("agency")]
        public string Agency {
            get {
                return agencyField;
            } 
            set {
                agencyField = value;
                NotifyPropertyChanged("Agency");
            }
        }

        private string agencyField; 

        /// <summary>
        /// Atmospheric pressure. 
        /// </summary>
		[Description("Atmospheric pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("barometricPressure")]
        public PressureMeasure BarometricPressure {
            get {
                return barometricPressureField;
            } 
            set {
                barometricPressureField = value;
                NotifyPropertyChanged("BarometricPressure");
            }
        }

        private PressureMeasure barometricPressureField; 

        /// <summary>
        /// The Beaufort wind scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th Century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions. 
        /// </summary>
		[Range(0, 12)]
        [Description("The Beaufort wind scale is a system used to estimate and report wind speeds  when no measuring apparatus is available. It was invented in the early 19th Century by Admiral  Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions.")]
        [EnergisticsDataTypeAttribute(DataType = "beaufortScaleIntegerCode")]
		[XmlElement("beaufortScaleNumber")]
        public short? BeaufortScaleNumber {
            get {
                return beaufortScaleNumberField;
            } 
            set {
                beaufortScaleNumberField = value;
                 this.BeaufortScaleNumberSpecified = true;
                NotifyPropertyChanged("BeaufortScaleNumber");
            }
        }

        private short? beaufortScaleNumberField; 

        /// <summary>
        /// beaufortScaleNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BeaufortScaleNumberSpecified {
            get {
                return beaufortScaleNumberSpecifiedField;
            } 
            set {
                beaufortScaleNumberSpecifiedField = value;
                NotifyPropertyChanged("BeaufortScaleNumberSpecified");
            }
        }

        private bool beaufortScaleNumberSpecifiedField; 

        /// <summary>
        /// Minimum temperature above ground. Temperature of the atmosphere. 
        /// </summary>
		[Description("Minimum temperature above ground. Temperature of the atmosphere.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempSurfaceMn")]
        public ThermodynamicTemperatureMeasure TempSurfaceMin {
            get {
                return tempSurfaceMnField;
            } 
            set {
                tempSurfaceMnField = value;
                NotifyPropertyChanged("TempSurfaceMin");
            }
        }

        private ThermodynamicTemperatureMeasure tempSurfaceMnField; 

        /// <summary>
        /// Maximum temperature above ground. 
        /// </summary>
		[Description("Maximum temperature above ground.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempSurfaceMx")]
        public ThermodynamicTemperatureMeasure TempSurfaceMax {
            get {
                return tempSurfaceMxField;
            } 
            set {
                tempSurfaceMxField = value;
                NotifyPropertyChanged("TempSurfaceMax");
            }
        }

        private ThermodynamicTemperatureMeasure tempSurfaceMxField; 

        /// <summary>
        /// A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to US weather service table, an air temperature of 30 degF with a 10 mi/h corresponds to a windchill of 22 degF. 
        /// </summary>
		[Description("A measure of the combined chilling effect of wind and low temperature on  living things, also named chill factor, e.g., according to US weather service table, an air  temperature of 30 degF with a 10 mi/h corresponds to a windchill of 22 degF.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempWindChill")]
        public ThermodynamicTemperatureMeasure TempWindChill {
            get {
                return tempWindChillField;
            } 
            set {
                tempWindChillField = value;
                NotifyPropertyChanged("TempWindChill");
            }
        }

        private ThermodynamicTemperatureMeasure tempWindChillField; 

        /// <summary>
        /// Sea temperature. 
        /// </summary>
		[Description("Sea temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempsea")]
        public ThermodynamicTemperatureMeasure Tempsea {
            get {
                return tempseaField;
            } 
            set {
                tempseaField = value;
                NotifyPropertyChanged("Tempsea");
            }
        }

        private ThermodynamicTemperatureMeasure tempseaField; 

        /// <summary>
        /// Horizontal visibility. 
        /// </summary>
		[Description("Horizontal visibility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("visibility")]
        public LengthMeasure Visibility {
            get {
                return visibilityField;
            } 
            set {
                visibilityField = value;
                NotifyPropertyChanged("Visibility");
            }
        }

        private LengthMeasure visibilityField; 

        /// <summary>
        /// The direction from which the waves are coming, measured from true north. 
        /// </summary>
		[Description("The direction from which the waves are coming, measured from true north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("aziWave")]
        public PlaneAngleMeasure AziWave {
            get {
                return aziWaveField;
            } 
            set {
                aziWaveField = value;
                NotifyPropertyChanged("AziWave");
            }
        }

        private PlaneAngleMeasure aziWaveField; 

        /// <summary>
        /// Average height of the waves. 
        /// </summary>
		[Description("Average height of the waves.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("htWave")]
        public LengthMeasure HeightWave {
            get {
                return htWaveField;
            } 
            set {
                htWaveField = value;
                NotifyPropertyChanged("HeightWave");
            }
        }

        private LengthMeasure htWaveField; 

        /// <summary>
        /// An average of the higher 1/3 of the wave heights passing during a sample period (typically 20 to 30 minutes). 
        /// </summary>
		[Description("An average of the higher 1/3 of the wave heights passing during a   sample period (typically 20 to 30 minutes).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("significantWave")]
        public LengthMeasure SignificantWave {
            get {
                return significantWaveField;
            } 
            set {
                significantWaveField = value;
                NotifyPropertyChanged("SignificantWave");
            }
        }

        private LengthMeasure significantWaveField; 

        /// <summary>
        /// The maximum wave height.
        /// </summary>
		[Description("The maximum wave height.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("maxWave")]
        public LengthMeasure MaxWave {
            get {
                return maxWaveField;
            } 
            set {
                maxWaveField = value;
                NotifyPropertyChanged("MaxWave");
            }
        }

        private LengthMeasure maxWaveField; 

        /// <summary>
        /// The elapsed time between the passing of two wave tops. 
        /// </summary>
		[Description("The elapsed time between the passing of two wave tops.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("periodWave")]
        public TimeMeasure PeriodWave {
            get {
                return periodWaveField;
            } 
            set {
                periodWaveField = value;
                NotifyPropertyChanged("PeriodWave");
            }
        }

        private TimeMeasure periodWaveField; 

        /// <summary>
        /// The direction from which the wind is blowing, measured from true north. 
        /// </summary>
		[Description("The direction from which the wind is blowing, measured from true north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("aziWind")]
        public PlaneAngleMeasure AziWind {
            get {
                return aziWindField;
            } 
            set {
                aziWindField = value;
                NotifyPropertyChanged("AziWind");
            }
        }

        private PlaneAngleMeasure aziWindField; 

        /// <summary>
        /// Wind speed. 
        /// </summary>
		[Description("Wind speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("velWind")]
        public VelocityMeasure VelWind {
            get {
                return velWindField;
            } 
            set {
                velWindField = value;
                NotifyPropertyChanged("VelWind");
            }
        }

        private VelocityMeasure velWindField; 

        /// <summary>
        /// Type of precipitation. 
        /// </summary>
		[StringLength(32)]
        [Description("Type of precipitation.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typePrecip")]
        public string TypePrecip {
            get {
                return typePrecipField;
            } 
            set {
                typePrecipField = value;
                NotifyPropertyChanged("TypePrecip");
            }
        }

        private string typePrecipField; 

        /// <summary>
        /// Amount of precipitation. 
        /// </summary>
		[Description("Amount of precipitation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("amtPrecip")]
        public LengthMeasure AmtPrecip {
            get {
                return amtPrecipField;
            } 
            set {
                amtPrecipField = value;
                NotifyPropertyChanged("AmtPrecip");
            }
        }

        private LengthMeasure amtPrecipField; 

        /// <summary>
        /// Description of cloud cover. 
        /// </summary>
		[StringLength(32)]
        [Description("Description of cloud cover.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("coverCloud")]
        public string CoverCloud {
            get {
                return coverCloudField;
            } 
            set {
                coverCloudField = value;
                NotifyPropertyChanged("CoverCloud");
            }
        }

        private string coverCloudField; 

        /// <summary>
        /// Height of cloud cover. 
        /// </summary>
		[Description("Height of cloud cover.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("ceilingCloud")]
        public LengthMeasure CeilingCloud {
            get {
                return ceilingCloudField;
            } 
            set {
                ceilingCloudField = value;
                NotifyPropertyChanged("CeilingCloud");
            }
        }

        private LengthMeasure ceilingCloudField; 

        /// <summary>
        /// Current speed. 
        /// </summary>
		[Description("Current speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("currentSea")]
        public VelocityMeasure CurrentSea {
            get {
                return currentSeaField;
            } 
            set {
                currentSeaField = value;
                NotifyPropertyChanged("CurrentSea");
            }
        }

        private VelocityMeasure currentSeaField; 

        /// <summary>
        /// Azimuth of current. 
        /// </summary>
		[Description("Azimuth of current.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("aziCurrentSea")]
        public PlaneAngleMeasure AziCurrentSea {
            get {
                return aziCurrentSeaField;
            } 
            set {
                aziCurrentSeaField = value;
                NotifyPropertyChanged("AziCurrentSea");
            }
        }

        private PlaneAngleMeasure aziCurrentSeaField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Support Craft Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_supportCraft", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Support Craft Component Schema")]
    public partial class SupportCraft : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for support craft. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for support craft.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Type of support craft. 
        /// </summary>
		[Description("Type of support craft.")]
        [EnergisticsDataTypeAttribute(DataType = "SupportCraft")]
		[XmlElement("typeSuppCraft")]
        public SupportCraftType? TypeSuppCraft {
            get {
                return typeSuppCraftField;
            } 
            set {
                typeSuppCraftField = value;
                 this.TypeSuppCraftSpecified = true;
                NotifyPropertyChanged("TypeSuppCraft");
            }
        }

        private SupportCraftType? typeSuppCraftField; 

        /// <summary>
        /// typeSuppCraftSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSuppCraftSpecified {
            get {
                return typeSuppCraftSpecifiedField;
            } 
            set {
                typeSuppCraftSpecifiedField = value;
                NotifyPropertyChanged("TypeSuppCraftSpecified");
            }
        }

        private bool typeSuppCraftSpecifiedField; 

        /// <summary>
        /// Date and time when vehicle arrived at rig site. 
        /// </summary>
		[Description("Date and time when vehicle arrived at rig site.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimArrived")]
        public Timestamp? DateTimeArrived {
            get {
                return dTimArrivedField;
            } 
            set {
                dTimArrivedField = value;
                 this.DateTimeArrivedSpecified = true;
                NotifyPropertyChanged("DateTimeArrived");
            }
        }

        private Timestamp? dTimArrivedField; 

        /// <summary>
        /// dTimArrivedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeArrivedSpecified {
            get {
                return dTimArrivedSpecifiedField;
            } 
            set {
                dTimArrivedSpecifiedField = value;
                NotifyPropertyChanged("DateTimeArrivedSpecified");
            }
        }

        private bool dTimArrivedSpecifiedField; 

        /// <summary>
        /// Date and time when vehicle departed rig site. 
        /// </summary>
		[Description("Date and time when vehicle departed rig site.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimDeparted")]
        public Timestamp? DateTimeDeparted {
            get {
                return dTimDepartedField;
            } 
            set {
                dTimDepartedField = value;
                 this.DateTimeDepartedSpecified = true;
                NotifyPropertyChanged("DateTimeDeparted");
            }
        }

        private Timestamp? dTimDepartedField; 

        /// <summary>
        /// dTimDepartedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeDepartedSpecified {
            get {
                return dTimDepartedSpecifiedField;
            } 
            set {
                dTimDepartedSpecifiedField = value;
                NotifyPropertyChanged("DateTimeDepartedSpecified");
            }
        }

        private bool dTimDepartedSpecifiedField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Personnel Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_personnel", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Personnel Component Schema")]
    public partial class Personnel : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name of company. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of company.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("company")]
        public string Company {
            get {
                return companyField;
            } 
            set {
                companyField = value;
                NotifyPropertyChanged("Company");
            }
        }

        private string companyField; 

        /// <summary>
        /// Service provided by the company. 
        /// </summary>
		[StringLength(16)]
        [Description("Service provided by the company.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("typeService")]
        public string TypeService {
            get {
                return typeServiceField;
            } 
            set {
                typeServiceField = value;
                NotifyPropertyChanged("TypeService");
            }
        }

        private string typeServiceField; 

        /// <summary>
        /// Number of people on board for that company. 
        /// </summary>
		[Description("Number of people on board for that company.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numPeople")]
        public short? NumPeople {
            get {
                return numPeopleField;
            } 
            set {
                numPeopleField = value;
                 this.NumPeopleSpecified = true;
                NotifyPropertyChanged("NumPeople");
            }
        }

        private short? numPeopleField; 

        /// <summary>
        /// numPeopleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumPeopleSpecified {
            get {
                return numPeopleSpecifiedField;
            } 
            set {
                numPeopleSpecifiedField = value;
                NotifyPropertyChanged("NumPeopleSpecified");
            }
        }

        private bool numPeopleSpecifiedField; 

        /// <summary>
        /// Total time worked by the company (commonly in hours). 
        /// </summary>
		[Description("Total time worked by the company (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("totalTime")]
        public TimeMeasure TotalTime {
            get {
                return totalTimeField;
            } 
            set {
                totalTimeField = value;
                NotifyPropertyChanged("TotalTime");
            }
        }

        private TimeMeasure totalTimeField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations HSE Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_incident", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations HSE Component Schema")]
    public partial class Incident : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// Name of person who prepared incident report. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of person who prepared incident report.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("reporter")]
        public string Reporter {
            get {
                return reporterField;
            } 
            set {
                reporterField = value;
                NotifyPropertyChanged("Reporter");
            }
        }

        private string reporterField; 

        /// <summary>
        /// Number of personnel with minor injuries. 
        /// </summary>
		[Description("Number of personnel with minor injuries.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numMinorInjury")]
        public short? NumMinorInjury {
            get {
                return numMinorInjuryField;
            } 
            set {
                numMinorInjuryField = value;
                 this.NumMinorInjurySpecified = true;
                NotifyPropertyChanged("NumMinorInjury");
            }
        }

        private short? numMinorInjuryField; 

        /// <summary>
        /// numMinorInjurySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumMinorInjurySpecified {
            get {
                return numMinorInjurySpecifiedField;
            } 
            set {
                numMinorInjurySpecifiedField = value;
                NotifyPropertyChanged("NumMinorInjurySpecified");
            }
        }

        private bool numMinorInjurySpecifiedField; 

        /// <summary>
        /// Number of personnel with major injuries. 
        /// </summary>
		[Description("Number of personnel with major injuries.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numMajorInjury")]
        public short? NumMajorInjury {
            get {
                return numMajorInjuryField;
            } 
            set {
                numMajorInjuryField = value;
                 this.NumMajorInjurySpecified = true;
                NotifyPropertyChanged("NumMajorInjury");
            }
        }

        private short? numMajorInjuryField; 

        /// <summary>
        /// numMajorInjurySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumMajorInjurySpecified {
            get {
                return numMajorInjurySpecifiedField;
            } 
            set {
                numMajorInjurySpecifiedField = value;
                NotifyPropertyChanged("NumMajorInjurySpecified");
            }
        }

        private bool numMajorInjurySpecifiedField; 

        /// <summary>
        /// Number of personnel killed in incident. 
        /// </summary>
		[Description("Number of personnel killed in incident.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numFatality")]
        public short? NumFatality {
            get {
                return numFatalityField;
            } 
            set {
                numFatalityField = value;
                 this.NumFatalitySpecified = true;
                NotifyPropertyChanged("NumFatality");
            }
        }

        private short? numFatalityField; 

        /// <summary>
        /// numFatalitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumFatalitySpecified {
            get {
                return numFatalitySpecifiedField;
            } 
            set {
                numFatalitySpecifiedField = value;
                NotifyPropertyChanged("NumFatalitySpecified");
            }
        }

        private bool numFatalitySpecifiedField; 

        /// <summary>
        /// Near miss incident occurrence? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Near miss incident occurrence?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isNearMiss")]
        public bool? IsNearMiss {
            get {
                return isNearMissField;
            } 
            set {
                isNearMissField = value;
                 this.IsNearMissSpecified = true;
                NotifyPropertyChanged("IsNearMiss");
            }
        }

        private bool? isNearMissField; 

        /// <summary>
        /// isNearMissSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsNearMissSpecified {
            get {
                return isNearMissSpecifiedField;
            } 
            set {
                isNearMissSpecifiedField = value;
                NotifyPropertyChanged("IsNearMissSpecified");
            }
        }

        private bool isNearMissSpecifiedField; 

        /// <summary>
        /// Location description. 
        /// </summary>
		[StringLength(64)]
        [Description("Location description.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("descLocation")]
        public string DescLocation {
            get {
                return descLocationField;
            } 
            set {
                descLocationField = value;
                NotifyPropertyChanged("DescLocation");
            }
        }

        private string descLocationField; 

        /// <summary>
        /// Accident description. 
        /// </summary>
		[StringLength(4000)]
        [Description("Accident description.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("descAccident")]
        public string DescAccident {
            get {
                return descAccidentField;
            } 
            set {
                descAccidentField = value;
                NotifyPropertyChanged("DescAccident");
            }
        }

        private string descAccidentField; 

        /// <summary>
        /// Remedial action description. 
        /// </summary>
		[StringLength(4000)]
        [Description("Remedial action description.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("remedialActionDesc")]
        public string RemedialActionDesc {
            get {
                return remedialActionDescField;
            } 
            set {
                remedialActionDescField = value;
                NotifyPropertyChanged("RemedialActionDesc");
            }
        }

        private string remedialActionDescField; 

        /// <summary>
        /// Cause description. 
        /// </summary>
		[StringLength(4000)]
        [Description("Cause description.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("causeDesc")]
        public string CauseDesc {
            get {
                return causeDescField;
            } 
            set {
                causeDescField = value;
                NotifyPropertyChanged("CauseDesc");
            }
        }

        private string causeDescField; 

        /// <summary>
        /// Number of hours lost due to incident. 
        /// </summary>
		[Description("Number of hours lost due to incident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimLostGross")]
        public TimeMeasure ETimeLostGross {
            get {
                return eTimLostGrossField;
            } 
            set {
                eTimLostGrossField = value;
                NotifyPropertyChanged("ETimeLostGross");
            }
        }

        private TimeMeasure eTimLostGrossField; 

        /// <summary>
        /// Gross estimate of cost incurred due to incident. 
        /// </summary>
		[Description("Gross estimate of cost incurred due to incident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cost")]
		[XmlElement("costLostGross")]
        public Cost CostLostGross {
            get {
                return costLostGrossField;
            } 
            set {
                costLostGrossField = value;
                NotifyPropertyChanged("CostLostGross");
            }
        }

        private Cost costLostGrossField; 

        /// <summary>
        /// Name of company that caused incident. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of company that caused incident.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("responsibleCompany")]
        public string ResponsibleCompany {
            get {
                return responsibleCompanyField;
            } 
            set {
                responsibleCompanyField = value;
                NotifyPropertyChanged("ResponsibleCompany");
            }
        }

        private string responsibleCompanyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Health, Safety and Environment Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_hse", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Health, Safety and Environment Component Schema")]
    public partial class Hse : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Incident free duration (commonly in days). 
        /// </summary>
		[Description("Incident free duration (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("daysIncFree")]
        public TimeMeasure DaysIncFree {
            get {
                return daysIncFreeField;
            } 
            set {
                daysIncFreeField = value;
                NotifyPropertyChanged("DaysIncFree");
            }
        }

        private TimeMeasure daysIncFreeField; 

        /// <summary>
        /// Incident report occurrences description. 
        /// </summary>
		[Description("Incident report occurrences description.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_incident")]
		[XmlElement("incident")]
        public List<Incident> Incident {
            get {
                return incidentField;
            } 
            set {
                incidentField = value;
                NotifyPropertyChanged("Incident");
            }
        }

         /// <summary>
         /// bool to indicate if Incident has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IncidentSpecified
         {
             get {
             if(incidentField!=null)
                 return incidentField.Count>0?true:false;
             else return false;
             }
         }
        private List<Incident> incidentField; 

        /// <summary>
        /// Last casing pressure test date and time. 
        /// </summary>
		[Description("Last casing pressure test date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastCsgPresTest")]
        public Timestamp? LastCsgPresTest {
            get {
                return lastCsgPresTestField;
            } 
            set {
                lastCsgPresTestField = value;
                 this.LastCsgPresTestSpecified = true;
                NotifyPropertyChanged("LastCsgPresTest");
            }
        }

        private Timestamp? lastCsgPresTestField; 

        /// <summary>
        /// lastCsgPresTestSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastCsgPresTestSpecified {
            get {
                return lastCsgPresTestSpecifiedField;
            } 
            set {
                lastCsgPresTestSpecifiedField = value;
                NotifyPropertyChanged("LastCsgPresTestSpecified");
            }
        }

        private bool lastCsgPresTestSpecifiedField; 

        /// <summary>
        /// Last casing pressure test pressure. 
        /// </summary>
		[Description("Last casing pressure test pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presLastCsg")]
        public PressureMeasure PresLastCsg {
            get {
                return presLastCsgField;
            } 
            set {
                presLastCsgField = value;
                NotifyPropertyChanged("PresLastCsg");
            }
        }

        private PressureMeasure presLastCsgField; 

        /// <summary>
        /// Last blow out preventer pressure test. 
        /// </summary>
		[Description("Last blow out preventer pressure test.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastBopPresTest")]
        public Timestamp? LastBopPresTest {
            get {
                return lastBopPresTestField;
            } 
            set {
                lastBopPresTestField = value;
                 this.LastBopPresTestSpecified = true;
                NotifyPropertyChanged("LastBopPresTest");
            }
        }

        private Timestamp? lastBopPresTestField; 

        /// <summary>
        /// lastBopPresTestSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastBopPresTestSpecified {
            get {
                return lastBopPresTestSpecifiedField;
            } 
            set {
                lastBopPresTestSpecifiedField = value;
                NotifyPropertyChanged("LastBopPresTestSpecified");
            }
        }

        private bool lastBopPresTestSpecifiedField; 

        /// <summary>
        /// Next blow out preventer pressure test. 
        /// </summary>
		[Description("Next blow out preventer pressure test.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("nextBopPresTest")]
        public Timestamp? NextBopPresTest {
            get {
                return nextBopPresTestField;
            } 
            set {
                nextBopPresTestField = value;
                 this.NextBopPresTestSpecified = true;
                NotifyPropertyChanged("NextBopPresTest");
            }
        }

        private Timestamp? nextBopPresTestField; 

        /// <summary>
        /// nextBopPresTestSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NextBopPresTestSpecified {
            get {
                return nextBopPresTestSpecifiedField;
            } 
            set {
                nextBopPresTestSpecifiedField = value;
                NotifyPropertyChanged("NextBopPresTestSpecified");
            }
        }

        private bool nextBopPresTestSpecifiedField; 

        /// <summary>
        /// Standpipe manifold pressure tested to. 
        /// </summary>
		[Description("Standpipe manifold pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presStdPipe")]
        public PressureMeasure PresStdPipe {
            get {
                return presStdPipeField;
            } 
            set {
                presStdPipeField = value;
                NotifyPropertyChanged("PresStdPipe");
            }
        }

        private PressureMeasure presStdPipeField; 

        /// <summary>
        /// Kelly hose pressure tested to. 
        /// </summary>
		[Description("Kelly hose pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presKellyHose")]
        public PressureMeasure PresKellyHose {
            get {
                return presKellyHoseField;
            } 
            set {
                presKellyHoseField = value;
                NotifyPropertyChanged("PresKellyHose");
            }
        }

        private PressureMeasure presKellyHoseField; 

        /// <summary>
        /// Blow out preventer diverter pressure tested to. 
        /// </summary>
		[Description("Blow out preventer diverter pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presDiverter")]
        public PressureMeasure PresDiverter {
            get {
                return presDiverterField;
            } 
            set {
                presDiverterField = value;
                NotifyPropertyChanged("PresDiverter");
            }
        }

        private PressureMeasure presDiverterField; 

        /// <summary>
        /// Blow out preventer annular preventer pressure tested to. 
        /// </summary>
		[Description("Blow out preventer annular preventer pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presAnnular")]
        public PressureMeasure PresAnnular {
            get {
                return presAnnularField;
            } 
            set {
                presAnnularField = value;
                NotifyPropertyChanged("PresAnnular");
            }
        }

        private PressureMeasure presAnnularField; 

        /// <summary>
        /// Blow out preventer ram pressure tested to. 
        /// </summary>
		[Description("Blow out preventer ram pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presRams")]
        public PressureMeasure PresRams {
            get {
                return presRamsField;
            } 
            set {
                presRamsField = value;
                NotifyPropertyChanged("PresRams");
            }
        }

        private PressureMeasure presRamsField; 

        /// <summary>
        /// Choke line pressure tested to. 
        /// </summary>
		[Description("Choke line pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presChokeLine")]
        public PressureMeasure PresChokeLine {
            get {
                return presChokeLineField;
            } 
            set {
                presChokeLineField = value;
                NotifyPropertyChanged("PresChokeLine");
            }
        }

        private PressureMeasure presChokeLineField; 

        /// <summary>
        /// Choke line manifold pressure tested to. 
        /// </summary>
		[Description("Choke line manifold pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presChokeMan")]
        public PressureMeasure PresChokeMan {
            get {
                return presChokeManField;
            } 
            set {
                presChokeManField = value;
                NotifyPropertyChanged("PresChokeMan");
            }
        }

        private PressureMeasure presChokeManField; 

        /// <summary>
        /// Last fire or boat drill. 
        /// </summary>
		[Description("Last fire or boat drill.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastFireBoatDrill")]
        public Timestamp? LastFireBoatDrill {
            get {
                return lastFireBoatDrillField;
            } 
            set {
                lastFireBoatDrillField = value;
                 this.LastFireBoatDrillSpecified = true;
                NotifyPropertyChanged("LastFireBoatDrill");
            }
        }

        private Timestamp? lastFireBoatDrillField; 

        /// <summary>
        /// lastFireBoatDrillSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastFireBoatDrillSpecified {
            get {
                return lastFireBoatDrillSpecifiedField;
            } 
            set {
                lastFireBoatDrillSpecifiedField = value;
                NotifyPropertyChanged("LastFireBoatDrillSpecified");
            }
        }

        private bool lastFireBoatDrillSpecifiedField; 

        /// <summary>
        /// Last abandonment drill. 
        /// </summary>
		[Description("Last abandonment drill.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastAbandonDrill")]
        public Timestamp? LastAbandonDrill {
            get {
                return lastAbandonDrillField;
            } 
            set {
                lastAbandonDrillField = value;
                 this.LastAbandonDrillSpecified = true;
                NotifyPropertyChanged("LastAbandonDrill");
            }
        }

        private Timestamp? lastAbandonDrillField; 

        /// <summary>
        /// lastAbandonDrillSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastAbandonDrillSpecified {
            get {
                return lastAbandonDrillSpecifiedField;
            } 
            set {
                lastAbandonDrillSpecifiedField = value;
                NotifyPropertyChanged("LastAbandonDrillSpecified");
            }
        }

        private bool lastAbandonDrillSpecifiedField; 

        /// <summary>
        /// Last rig inspection/check. 
        /// </summary>
		[Description("Last rig inspection/check.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastRigInspection")]
        public Timestamp? LastRigInspection {
            get {
                return lastRigInspectionField;
            } 
            set {
                lastRigInspectionField = value;
                 this.LastRigInspectionSpecified = true;
                NotifyPropertyChanged("LastRigInspection");
            }
        }

        private Timestamp? lastRigInspectionField; 

        /// <summary>
        /// lastRigInspectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastRigInspectionSpecified {
            get {
                return lastRigInspectionSpecifiedField;
            } 
            set {
                lastRigInspectionSpecifiedField = value;
                NotifyPropertyChanged("LastRigInspectionSpecified");
            }
        }

        private bool lastRigInspectionSpecifiedField; 

        /// <summary>
        /// Last safety meeting. 
        /// </summary>
		[Description("Last safety meeting.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastSafetyMeeting")]
        public Timestamp? LastSafetyMeeting {
            get {
                return lastSafetyMeetingField;
            } 
            set {
                lastSafetyMeetingField = value;
                 this.LastSafetyMeetingSpecified = true;
                NotifyPropertyChanged("LastSafetyMeeting");
            }
        }

        private Timestamp? lastSafetyMeetingField; 

        /// <summary>
        /// lastSafetyMeetingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastSafetyMeetingSpecified {
            get {
                return lastSafetyMeetingSpecifiedField;
            } 
            set {
                lastSafetyMeetingSpecifiedField = value;
                NotifyPropertyChanged("LastSafetyMeetingSpecified");
            }
        }

        private bool lastSafetyMeetingSpecifiedField; 

        /// <summary>
        /// Last safety inspection. 
        /// </summary>
		[Description("Last safety inspection.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastSafetyInspection")]
        public Timestamp? LastSafetyInspection {
            get {
                return lastSafetyInspectionField;
            } 
            set {
                lastSafetyInspectionField = value;
                 this.LastSafetyInspectionSpecified = true;
                NotifyPropertyChanged("LastSafetyInspection");
            }
        }

        private Timestamp? lastSafetyInspectionField; 

        /// <summary>
        /// lastSafetyInspectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastSafetyInspectionSpecified {
            get {
                return lastSafetyInspectionSpecifiedField;
            } 
            set {
                lastSafetyInspectionSpecifiedField = value;
                NotifyPropertyChanged("LastSafetyInspectionSpecified");
            }
        }

        private bool lastSafetyInspectionSpecifiedField; 

        /// <summary>
        /// Last trip drill. 
        /// </summary>
		[Description("Last trip drill.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastTripDrill")]
        public Timestamp? LastTripDrill {
            get {
                return lastTripDrillField;
            } 
            set {
                lastTripDrillField = value;
                 this.LastTripDrillSpecified = true;
                NotifyPropertyChanged("LastTripDrill");
            }
        }

        private Timestamp? lastTripDrillField; 

        /// <summary>
        /// lastTripDrillSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastTripDrillSpecified {
            get {
                return lastTripDrillSpecifiedField;
            } 
            set {
                lastTripDrillSpecifiedField = value;
                NotifyPropertyChanged("LastTripDrillSpecified");
            }
        }

        private bool lastTripDrillSpecifiedField; 

        /// <summary>
        /// Last diverter drill. 
        /// </summary>
		[Description("Last diverter drill.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastDiverterDrill")]
        public Timestamp? LastDiverterDrill {
            get {
                return lastDiverterDrillField;
            } 
            set {
                lastDiverterDrillField = value;
                 this.LastDiverterDrillSpecified = true;
                NotifyPropertyChanged("LastDiverterDrill");
            }
        }

        private Timestamp? lastDiverterDrillField; 

        /// <summary>
        /// lastDiverterDrillSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastDiverterDrillSpecified {
            get {
                return lastDiverterDrillSpecifiedField;
            } 
            set {
                lastDiverterDrillSpecifiedField = value;
                NotifyPropertyChanged("LastDiverterDrillSpecified");
            }
        }

        private bool lastDiverterDrillSpecifiedField; 

        /// <summary>
        /// Last blow out preventer drill. 
        /// </summary>
		[Description("Last blow out preventer drill.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastBopDrill")]
        public Timestamp? LastBopDrill {
            get {
                return lastBopDrillField;
            } 
            set {
                lastBopDrillField = value;
                 this.LastBopDrillSpecified = true;
                NotifyPropertyChanged("LastBopDrill");
            }
        }

        private Timestamp? lastBopDrillField; 

        /// <summary>
        /// lastBopDrillSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastBopDrillSpecified {
            get {
                return lastBopDrillSpecifiedField;
            } 
            set {
                lastBopDrillSpecifiedField = value;
                NotifyPropertyChanged("LastBopDrillSpecified");
            }
        }

        private bool lastBopDrillSpecifiedField; 

        /// <summary>
        /// Governmental regulatory inspection agency inspection? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Governmental regulatory inspection agency inspection?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("regAgencyInsp")]
        public bool? RegAgencyInsp {
            get {
                return regAgencyInspField;
            } 
            set {
                regAgencyInspField = value;
                 this.RegAgencyInspSpecified = true;
                NotifyPropertyChanged("RegAgencyInsp");
            }
        }

        private bool? regAgencyInspField; 

        /// <summary>
        /// regAgencyInspSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RegAgencyInspSpecified {
            get {
                return regAgencyInspSpecifiedField;
            } 
            set {
                regAgencyInspSpecifiedField = value;
                NotifyPropertyChanged("RegAgencyInspSpecified");
            }
        }

        private bool regAgencyInspSpecifiedField; 

        /// <summary>
        /// Inspection non-compliance notice served? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Inspection non-compliance notice served?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("nonComplianceIssued")]
        public bool? NonComplianceIssued {
            get {
                return nonComplianceIssuedField;
            } 
            set {
                nonComplianceIssuedField = value;
                 this.NonComplianceIssuedSpecified = true;
                NotifyPropertyChanged("NonComplianceIssued");
            }
        }

        private bool? nonComplianceIssuedField; 

        /// <summary>
        /// nonComplianceIssuedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NonComplianceIssuedSpecified {
            get {
                return nonComplianceIssuedSpecifiedField;
            } 
            set {
                nonComplianceIssuedSpecifiedField = value;
                NotifyPropertyChanged("NonComplianceIssuedSpecified");
            }
        }

        private bool nonComplianceIssuedSpecifiedField; 

        /// <summary>
        /// Number of Health, Safety and Environment incidents reported. 
        /// </summary>
		[Description("Number of Health, Safety and Environment incidents reported.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numStopCards")]
        public short? NumStopCards {
            get {
                return numStopCardsField;
            } 
            set {
                numStopCardsField = value;
                 this.NumStopCardsSpecified = true;
                NotifyPropertyChanged("NumStopCards");
            }
        }

        private short? numStopCardsField; 

        /// <summary>
        /// numStopCardsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumStopCardsSpecified {
            get {
                return numStopCardsSpecifiedField;
            } 
            set {
                numStopCardsSpecifiedField = value;
                NotifyPropertyChanged("NumStopCardsSpecified");
            }
        }

        private bool numStopCardsSpecifiedField; 

        /// <summary>
        /// Daily whole mud discarded. 
        /// </summary>
		[Description("Daily whole mud discarded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("fluidDischarged")]
        public VolumeMeasure FluidDischarged {
            get {
                return fluidDischargedField;
            } 
            set {
                fluidDischargedField = value;
                NotifyPropertyChanged("FluidDischarged");
            }
        }

        private VolumeMeasure fluidDischargedField; 

        /// <summary>
        /// Volume of cuttings discharged. 
        /// </summary>
		[Description("Volume of cuttings discharged.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volCtgDischarged")]
        public VolumeMeasure VolCtgDischarged {
            get {
                return volCtgDischargedField;
            } 
            set {
                volCtgDischargedField = value;
                NotifyPropertyChanged("VolCtgDischarged");
            }
        }

        private VolumeMeasure volCtgDischargedField; 

        /// <summary>
        /// Oil on cuttings daily discharge. 
        /// </summary>
		[Description("Oil on cuttings daily discharge.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volOilCtgDischarge")]
        public VolumeMeasure VolOilCtgDischarge {
            get {
                return volOilCtgDischargeField;
            } 
            set {
                volOilCtgDischargeField = value;
                NotifyPropertyChanged("VolOilCtgDischarge");
            }
        }

        private VolumeMeasure volOilCtgDischargeField; 

        /// <summary>
        /// Volume of sanitary waste discharged. 
        /// </summary>
		[Description("Volume of sanitary waste discharged.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("wasteDischarged")]
        public VolumeMeasure WasteDischarged {
            get {
                return wasteDischargedField;
            } 
            set {
                wasteDischargedField = value;
                NotifyPropertyChanged("WasteDischarged");
            }
        }

        private VolumeMeasure wasteDischargedField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Shaker Screen Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shakerScreen", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Shaker Screen Component Schema")]
    public partial class ShakerScreen : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
		[Description("Date and time that activities started.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// Date and time activities were completed. 
        /// </summary>
		[Description("Date and time activities were completed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// Deck number mesh installed on. 
        /// </summary>
		[Description("Deck number mesh installed on.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("numDeck")]
        public short? NumDeck {
            get {
                return numDeckField;
            } 
            set {
                numDeckField = value;
                 this.NumDeckSpecified = true;
                NotifyPropertyChanged("NumDeck");
            }
        }

        private short? numDeckField; 

        /// <summary>
        /// numDeckSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumDeckSpecified {
            get {
                return numDeckSpecifiedField;
            } 
            set {
                numDeckSpecifiedField = value;
                NotifyPropertyChanged("NumDeckSpecified");
            }
        }

        private bool numDeckSpecifiedField; 

        /// <summary>
        /// Mesh size in the X direction. 
        /// </summary>
		[Description("Mesh size in the X direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("meshX")]
        public LengthMeasure MeshX {
            get {
                return meshXField;
            } 
            set {
                meshXField = value;
                NotifyPropertyChanged("MeshX");
            }
        }

        private LengthMeasure meshXField; 

        /// <summary>
        /// Mesh size in the Y direction. 
        /// </summary>
		[Description("Mesh size in the Y direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("meshY")]
        public LengthMeasure MeshY {
            get {
                return meshYField;
            } 
            set {
                meshYField = value;
                NotifyPropertyChanged("MeshY");
            }
        }

        private LengthMeasure meshYField; 

        /// <summary>
        /// Manufacturer / supplier of the item. 
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer / supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Manufacturers designated model. 
        /// </summary>
		[StringLength(32)]
        [Description("Manufacturers designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("model")]
        public string Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string modelField; 

        /// <summary>
        /// Shaker screen cut point - the maximum size that will pass through the screen.
        /// </summary>
		[Description("Shaker screen cut point - the maximum size that  will pass through the screen.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("cutPoint")]
        public LengthMeasure CutPoint {
            get {
                return cutPointField;
            } 
            set {
                cutPointField = value;
                NotifyPropertyChanged("CutPoint");
            }
        }

        private LengthMeasure cutPointField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Shaker Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_shakerOp", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Shaker Component Schema")]
    public partial class ShakerOp : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the shaker that is characterized by this report. 
        /// </summary>
		[Required]
        [Description("A pointer to the shaker that is characterized by this report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("shaker")]
        public RefNameString Shaker {
            get {
                return shakerField;
            } 
            set {
                shakerField = value;
                NotifyPropertyChanged("Shaker");
            }
        }

        private RefNameString shakerField; 

        /// <summary>
        /// Hole measured depth at time of measurement. 
        /// </summary>
		[Description("Hole measured depth at time of measurement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdHole")]
        public MeasuredDepthCoord MDHole {
            get {
                return mdHoleField;
            } 
            set {
                mdHoleField = value;
                NotifyPropertyChanged("MDHole");
            }
        }

        private MeasuredDepthCoord mdHoleField; 

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Hours run for this operation. 
        /// </summary>
		[Description("Hours run for this operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("hoursRun")]
        public TimeMeasure HoursRun {
            get {
                return hoursRunField;
            } 
            set {
                hoursRunField = value;
                NotifyPropertyChanged("HoursRun");
            }
        }

        private TimeMeasure hoursRunField; 

        /// <summary>
        /// Percent of screen covered by cuttings. 
        /// </summary>
		[Description("Percent of screen covered by cuttings.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "areaPerAreaMeasure")]
		[XmlElement("pcScreenCovered")]
        public AreaPerAreaMeasure PercentScreenCovered {
            get {
                return pcScreenCoveredField;
            } 
            set {
                pcScreenCoveredField = value;
                NotifyPropertyChanged("PercentScreenCovered");
            }
        }

        private AreaPerAreaMeasure pcScreenCoveredField; 

        /// <summary>
        /// Set of shaker screen records for the operation. 
        /// </summary>
		[Description("Set of shaker screen records for the operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_shakerScreen")]
		[XmlElement("shakerScreen")]
        public ShakerScreen ShakerScreen {
            get {
                return shakerScreenField;
            } 
            set {
                shakerScreenField = value;
                NotifyPropertyChanged("ShakerScreen");
            }
        }

        private ShakerScreen shakerScreenField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Pump Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pumpOp", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Pump Component Schema")]
    public partial class PumpOp : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// This is a pointer to the corresponding pump on the rig. 
        /// </summary>
		[Required]
        [Description("This is a pointer to the corresponding pump on the rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refPositiveCount")]
		[XmlElement("pump")]
        public RefPositiveCount Pump {
            get {
                return pumpField;
            } 
            set {
                pumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

        private RefPositiveCount pumpField; 

        /// <summary>
        /// Type of pump operation. 
        /// </summary>
		[Description("Type of pump operation.")]
        [EnergisticsDataTypeAttribute(DataType = "PumpOpType")]
		[XmlElement("typeOperation")]
        public PumpOpType? TypeOperation {
            get {
                return typeOperationField;
            } 
            set {
                typeOperationField = value;
                 this.TypeOperationSpecified = true;
                NotifyPropertyChanged("TypeOperation");
            }
        }

        private PumpOpType? typeOperationField; 

        /// <summary>
        /// typeOperationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeOperationSpecified {
            get {
                return typeOperationSpecifiedField;
            } 
            set {
                typeOperationSpecifiedField = value;
                NotifyPropertyChanged("TypeOperationSpecified");
            }
        }

        private bool typeOperationSpecifiedField; 

        /// <summary>
        /// Liner size. 
        /// </summary>
		[Description("Liner size.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("idLiner")]
        public LengthMeasure LinerSize {
            get {
                return idLinerField;
            } 
            set {
                idLinerField = value;
                NotifyPropertyChanged("LinerSize");
            }
        }

        private LengthMeasure idLinerField; 

        /// <summary>
        /// Stroke Length. 
        /// </summary>
		[Description("Stroke Length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenStroke")]
        public LengthMeasure LenStroke {
            get {
                return lenStrokeField;
            } 
            set {
                lenStrokeField = value;
                NotifyPropertyChanged("LenStroke");
            }
        }

        private LengthMeasure lenStrokeField; 

        /// <summary>
        /// Pump rate (Strokes per minute). 
        /// </summary>
		[Required]
        [Description("Pump rate (Strokes per minute).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("rateStroke")]
        public AnglePerTimeMeasure RateStroke {
            get {
                return rateStrokeField;
            } 
            set {
                rateStrokeField = value;
                NotifyPropertyChanged("RateStroke");
            }
        }

        private AnglePerTimeMeasure rateStrokeField; 

        /// <summary>
        /// Pump pressure recorded. 
        /// </summary>
		[Required]
        [Description("Pump pressure recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pressure")]
        public PressureMeasure Pressure {
            get {
                return pressureField;
            } 
            set {
                pressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure pressureField; 

        /// <summary>
        /// Pump efficiency. 
        /// </summary>
		[Description("Pump efficiency.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "relativePowerMeasure")]
		[XmlElement("pcEfficiency")]
        public RelativePowerMeasure PercentEfficiency {
            get {
                return pcEfficiencyField;
            } 
            set {
                pcEfficiencyField = value;
                NotifyPropertyChanged("PercentEfficiency");
            }
        }

        private RelativePowerMeasure pcEfficiencyField; 

        /// <summary>
        /// Pump output (incl. for efficiency). 
        /// </summary>
		[Description("Pump output (incl. for efficiency).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("pumpOutput")]
        public VolumeFlowRateMeasure PumpOutput {
            get {
                return pumpOutputField;
            } 
            set {
                pumpOutputField = value;
                NotifyPropertyChanged("PumpOutput");
            }
        }

        private VolumeFlowRateMeasure pumpOutputField; 

        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[Description("Along hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return mdBitField;
            } 
            set {
                mdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord mdBitField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refPositiveCount xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refPositiveCount", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the refPositiveCount xsd type.")]
    public partial class RefPositiveCount : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefPositiveCount class.
        /// </summary>
        public RefPositiveCount() {}

        /// <summary>
        /// Initializes a new instance of the RefPositiveCount class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public RefPositiveCount(short value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the node referenced by the index value. This attribute is required within the context of a WITSML server.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A reference to the unique identifier (uid attribute) in the node referenced by the index value.  This attribute is required within the context of a WITSML server.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("uidRef")]
		
        public string UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private string uidRefField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public short Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private short ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Rig Response Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rigResponse", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Rig Response Component Schema")]
    public partial class RigResponse : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Vector of the tension on anchors #1 to #n. For this usage the name attribute is irrelevant because the semantics are carried in the element name. The index attribute represents which anchor is being described.
        /// </summary>
		[Description("Vector of the tension on anchors #1 to #n.   For this usage the name attribute is irrelevant because the semantics are carried in the element name. The index attribute represents which anchor is being described.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "indexedObject")]
		[XmlElement("anchorTension")]
        public List<IndexedObject> AnchorTension {
            get {
                return anchorTensionField;
            } 
            set {
                anchorTensionField = value;
                NotifyPropertyChanged("AnchorTension");
            }
        }

         /// <summary>
         /// bool to indicate if AnchorTension has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnchorTensionSpecified
         {
             get {
             if(anchorTensionField!=null)
                 return anchorTensionField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> anchorTensionField; 

        /// <summary>
        /// Vector of the angles of the anchors #1 to #n. 
        /// </summary>
		[Description("Vector of the angles of the anchors #1 to #n.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "indexedObject")]
		[XmlElement("anchorAngle")]
        public List<IndexedObject> AnchorAngle {
            get {
                return anchorAngleField;
            } 
            set {
                anchorAngleField = value;
                NotifyPropertyChanged("AnchorAngle");
            }
        }

         /// <summary>
         /// bool to indicate if AnchorAngle has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnchorAngleSpecified
         {
             get {
             if(anchorAngleField!=null)
                 return anchorAngleField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> anchorAngleField; 

        /// <summary>
        /// Direction, relative to true north, to which the rig is facing. 
        /// </summary>
		[Description("Direction, relative to true north, to which the rig is facing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("rigHeading")]
        public PlaneAngleMeasure RigHeading {
            get {
                return rigHeadingField;
            } 
            set {
                rigHeadingField = value;
                NotifyPropertyChanged("RigHeading");
            }
        }

        private PlaneAngleMeasure rigHeadingField; 

        /// <summary>
        /// Maximum amplitude of the vertical motion of the rig. 
        /// </summary>
		[Description("Maximum amplitude of the vertical motion of the rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("rigHeave")]
        public LengthMeasure RigHeave {
            get {
                return rigHeaveField;
            } 
            set {
                rigHeaveField = value;
                NotifyPropertyChanged("RigHeave");
            }
        }

        private LengthMeasure rigHeaveField; 

        /// <summary>
        /// Measure of the fore-aft rotational movement of the rig due the combined effects of wind and waves; measured as the angle from horizontal 
        /// </summary>
		[Description("Measure of the fore-aft rotational movement of the rig due the combined  effects of wind and waves; measured as the angle from horizontal")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("rigPitchAngle")]
        public PlaneAngleMeasure RigPitchAngle {
            get {
                return rigPitchAngleField;
            } 
            set {
                rigPitchAngleField = value;
                NotifyPropertyChanged("RigPitchAngle");
            }
        }

        private PlaneAngleMeasure rigPitchAngleField; 

        /// <summary>
        /// Measure of the side-to-side rotational movement of the rig due the combined effects of wind and waves; measured as the angle from vertical 
        /// </summary>
		[Description("Measure of the side-to-side rotational movement of the rig due the combined  effects of wind and waves; measured as the angle from vertical")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("rigRollAngle")]
        public PlaneAngleMeasure RigRollAngle {
            get {
                return rigRollAngleField;
            } 
            set {
                rigRollAngleField = value;
                NotifyPropertyChanged("RigRollAngle");
            }
        }

        private PlaneAngleMeasure rigRollAngleField; 

        /// <summary>
        /// Angle of the marine riser with the vertical. 
        /// </summary>
		[Description("Angle of the marine riser with the vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("riserAngle")]
        public PlaneAngleMeasure RiserAngle {
            get {
                return riserAngleField;
            } 
            set {
                riserAngleField = value;
                NotifyPropertyChanged("RiserAngle");
            }
        }

        private PlaneAngleMeasure riserAngleField; 

        /// <summary>
        /// Direction of the marine riser. 
        /// </summary>
		[Description("Direction of the marine riser.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("riserDirection")]
        public PlaneAngleMeasure RiserDirection {
            get {
                return riserDirectionField;
            } 
            set {
                riserDirectionField = value;
                NotifyPropertyChanged("RiserDirection");
            }
        }

        private PlaneAngleMeasure riserDirectionField; 

        /// <summary>
        /// Tension of the marine riser. 
        /// </summary>
		[Description("Tension of the marine riser.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("riserTension")]
        public ForceMeasure RiserTension {
            get {
                return riserTensionField;
            } 
            set {
                riserTensionField = value;
                NotifyPropertyChanged("RiserTension");
            }
        }

        private ForceMeasure riserTensionField; 

        /// <summary>
        /// Current temporary load on the rig deck. 
        /// </summary>
		[Description("Current temporary load on the rig deck.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("variableDeckLoad")]
        public ForceMeasure VariableDeckLoad {
            get {
                return variableDeckLoadField;
            } 
            set {
                variableDeckLoadField = value;
                NotifyPropertyChanged("VariableDeckLoad");
            }
        }

        private ForceMeasure variableDeckLoadField; 

        /// <summary>
        /// Total deck load. 
        /// </summary>
		[Description("Total deck load.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("totalDeckLoad")]
        public ForceMeasure TotalDeckLoad {
            get {
                return totalDeckLoadField;
            } 
            set {
                totalDeckLoadField = value;
                NotifyPropertyChanged("TotalDeckLoad");
            }
        }

        private ForceMeasure totalDeckLoadField; 

        /// <summary>
        /// Direction of the guide base. 
        /// </summary>
		[Description("Direction of the guide base.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("guideBaseAngle")]
        public PlaneAngleMeasure GuideBaseAngle {
            get {
                return guideBaseAngleField;
            } 
            set {
                guideBaseAngleField = value;
                NotifyPropertyChanged("GuideBaseAngle");
            }
        }

        private PlaneAngleMeasure guideBaseAngleField; 

        /// <summary>
        /// Angle between riser and blow out preventer at the flex joint. 
        /// </summary>
		[Description("Angle between riser and blow out preventer at the flex joint.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("ballJointAngle")]
        public PlaneAngleMeasure BallJointAngle {
            get {
                return ballJointAngleField;
            } 
            set {
                ballJointAngleField = value;
                NotifyPropertyChanged("BallJointAngle");
            }
        }

        private PlaneAngleMeasure ballJointAngleField; 

        /// <summary>
        /// Direction of the ball joint. 
        /// </summary>
		[Description("Direction of the ball joint.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("ballJointDirection")]
        public PlaneAngleMeasure BallJointDirection {
            get {
                return ballJointDirectionField;
            } 
            set {
                ballJointDirectionField = value;
                NotifyPropertyChanged("BallJointDirection");
            }
        }

        private PlaneAngleMeasure ballJointDirectionField; 

        /// <summary>
        /// Horizontal displacement of the rig relative to the wellhead. 
        /// </summary>
		[Description("Horizontal displacement of the rig relative to the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("offsetRig")]
        public LengthMeasure OffsetRig {
            get {
                return offsetRigField;
            } 
            set {
                offsetRigField = value;
                NotifyPropertyChanged("OffsetRig");
            }
        }

        private LengthMeasure offsetRigField; 

        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
		[Description("Load carried by leg of jackup.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("loadLeg1")]
        public ForceMeasure LoadLeg1 {
            get {
                return loadLeg1Field;
            } 
            set {
                loadLeg1Field = value;
                NotifyPropertyChanged("LoadLeg1");
            }
        }

        private ForceMeasure loadLeg1Field; 

        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
		[Description("Load carried by leg of jackup.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("loadLeg2")]
        public ForceMeasure LoadLeg2 {
            get {
                return loadLeg2Field;
            } 
            set {
                loadLeg2Field = value;
                NotifyPropertyChanged("LoadLeg2");
            }
        }

        private ForceMeasure loadLeg2Field; 

        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
		[Description("Load carried by leg of jackup.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("loadLeg3")]
        public ForceMeasure LoadLeg3 {
            get {
                return loadLeg3Field;
            } 
            set {
                loadLeg3Field = value;
                NotifyPropertyChanged("LoadLeg3");
            }
        }

        private ForceMeasure loadLeg3Field; 

        /// <summary>
        /// Load carried by leg of jackup. 
        /// </summary>
		[Description("Load carried by leg of jackup.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("loadLeg4")]
        public ForceMeasure LoadLeg4 {
            get {
                return loadLeg4Field;
            } 
            set {
                loadLeg4Field = value;
                NotifyPropertyChanged("LoadLeg4");
            }
        }

        private ForceMeasure loadLeg4Field; 

        /// <summary>
        /// Penetration of leg into seabed. 
        /// </summary>
		[Description("Penetration of leg into seabed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("penetrationLeg1")]
        public LengthMeasure PenetrationLeg1 {
            get {
                return penetrationLeg1Field;
            } 
            set {
                penetrationLeg1Field = value;
                NotifyPropertyChanged("PenetrationLeg1");
            }
        }

        private LengthMeasure penetrationLeg1Field; 

        /// <summary>
        /// Penetration of leg into seabed. 
        /// </summary>
		[Description("Penetration of leg into seabed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("penetrationLeg2")]
        public LengthMeasure PenetrationLeg2 {
            get {
                return penetrationLeg2Field;
            } 
            set {
                penetrationLeg2Field = value;
                NotifyPropertyChanged("PenetrationLeg2");
            }
        }

        private LengthMeasure penetrationLeg2Field; 

        /// <summary>
        /// Penetration of leg into seabed 
        /// </summary>
		[Description("Penetration of leg into seabed")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("penetrationLeg3")]
        public LengthMeasure PenetrationLeg3 {
            get {
                return penetrationLeg3Field;
            } 
            set {
                penetrationLeg3Field = value;
                NotifyPropertyChanged("PenetrationLeg3");
            }
        }

        private LengthMeasure penetrationLeg3Field; 

        /// <summary>
        /// Penetration of leg into seabed 
        /// </summary>
		[Description("Penetration of leg into seabed")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("penetrationLeg4")]
        public LengthMeasure PenetrationLeg4 {
            get {
                return penetrationLeg4Field;
            } 
            set {
                penetrationLeg4Field = value;
                NotifyPropertyChanged("PenetrationLeg4");
            }
        }

        private LengthMeasure penetrationLeg4Field; 

        /// <summary>
        /// Vessel displacement (in water). 
        /// </summary>
		[Description("Vessel displacement (in water).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("dispRig")]
        public LengthMeasure DispRig {
            get {
                return dispRigField;
            } 
            set {
                dispRigField = value;
                NotifyPropertyChanged("DispRig");
            }
        }

        private LengthMeasure dispRigField; 

        /// <summary>
        /// Mean draft at mid-section. 
        /// </summary>
		[Description("Mean draft at mid-section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("meanDraft")]
        public LengthMeasure MeanDraft {
            get {
                return meanDraftField;
            } 
            set {
                meanDraftField = value;
                NotifyPropertyChanged("MeanDraft");
            }
        }

        private LengthMeasure meanDraftField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Inventory Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_inventory", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Inventory Component Schema ")]
    public partial class Inventory : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Name or type of inventory item. 
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("Name or type of inventory item.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Weight per item unit. 
        /// </summary>
        [ComponentElement]
        [XmlElement("itemWtPerUnit")]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
        public MassMeasure ItemWeightPerUnit {
            get {
                return itemWtPerUnitField;
            } 
            set {
                if (value != null && ItemVolPerUnitSpecified) throw new Exception("Cannot set property ItemWeightPerUnit when property ItemVolPerUnit is already set");
                itemWtPerUnitField = value;
                ItemWeightPerUnitSpecified = (value!=null);
                NotifyPropertyChanged("ItemWeightPerUnit");
            }
        }

        private MassMeasure itemWtPerUnitField; 
        private bool itemWeightPerUnitSpecified = false; 

        /// <summary>
        /// bool to indicate if ItemWeightPerUnit has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ItemWeightPerUnitSpecified
        {
            get {
                return itemWeightPerUnitSpecified;
            }
            set {
                itemWeightPerUnitSpecified= value;
            }
        }

        /// <summary>
        /// Volume per item unit. 
        /// </summary>
        [ComponentElement]
        [XmlElement("itemVolPerUnit")]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
        public VolumeMeasure ItemVolPerUnit {
            get {
                return itemVolPerUnitField;
            } 
            set {
                if (value != null && ItemWeightPerUnitSpecified) throw new Exception("Cannot set property ItemVolPerUnit when property ItemWeightPerUnit is already set");
                itemVolPerUnitField = value;
                ItemVolPerUnitSpecified = (value!=null);
                NotifyPropertyChanged("ItemVolPerUnit");
            }
        }

        private VolumeMeasure itemVolPerUnitField; 
        private bool itemVolPerUnitSpecified = false; 

        /// <summary>
        /// bool to indicate if ItemVolPerUnit has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ItemVolPerUnitSpecified
        {
            get {
                return itemVolPerUnitSpecified;
            }
            set {
                itemVolPerUnitSpecified= value;
            }
        }


        /// <summary>
        /// Price per item unit, assume same currency for all items. 
        /// </summary>
		[Description("Price per item unit, assume same currency for all items.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cost")]
		[XmlElement("pricePerUnit")]
        public Cost PricePerUnit {
            get {
                return pricePerUnitField;
            } 
            set {
                pricePerUnitField = value;
                NotifyPropertyChanged("PricePerUnit");
            }
        }

        private Cost pricePerUnitField; 

        /// <summary>
        /// Start quantity for report interval. 
        /// </summary>
		[Description("Start quantity for report interval.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("qtyStart")]
        public short? QtyStart {
            get {
                return qtyStartField;
            } 
            set {
                qtyStartField = value;
                 this.QtyStartSpecified = true;
                NotifyPropertyChanged("QtyStart");
            }
        }

        private short? qtyStartField; 

        /// <summary>
        /// qtyStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyStartSpecified {
            get {
                return qtyStartSpecifiedField;
            } 
            set {
                qtyStartSpecifiedField = value;
                NotifyPropertyChanged("QtyStartSpecified");
            }
        }

        private bool qtyStartSpecifiedField; 

        /// <summary>
        /// Daily quantity adjustment/correction. 
        /// </summary>
		[Description("Daily quantity adjustment/correction.")]
        [EnergisticsDataTypeAttribute(DataType = "integerCount")]
		[XmlElement("qtyAdjustment")]
        public int? QtyAdjustment {
            get {
                return qtyAdjustmentField;
            } 
            set {
                qtyAdjustmentField = value;
                 this.QtyAdjustmentSpecified = true;
                NotifyPropertyChanged("QtyAdjustment");
            }
        }

        private int? qtyAdjustmentField; 

        /// <summary>
        /// qtyAdjustmentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyAdjustmentSpecified {
            get {
                return qtyAdjustmentSpecifiedField;
            } 
            set {
                qtyAdjustmentSpecifiedField = value;
                NotifyPropertyChanged("QtyAdjustmentSpecified");
            }
        }

        private bool qtyAdjustmentSpecifiedField; 

        /// <summary>
        /// Quantity received at site. 
        /// </summary>
		[Description("Quantity received at site.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("qtyReceived")]
        public short? QtyReceived {
            get {
                return qtyReceivedField;
            } 
            set {
                qtyReceivedField = value;
                 this.QtyReceivedSpecified = true;
                NotifyPropertyChanged("QtyReceived");
            }
        }

        private short? qtyReceivedField; 

        /// <summary>
        /// qtyReceivedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyReceivedSpecified {
            get {
                return qtyReceivedSpecifiedField;
            } 
            set {
                qtyReceivedSpecifiedField = value;
                NotifyPropertyChanged("QtyReceivedSpecified");
            }
        }

        private bool qtyReceivedSpecifiedField; 

        /// <summary>
        /// Quantity returned to base from site. 
        /// </summary>
		[Description("Quantity returned to base from site.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("qtyReturned")]
        public short? QtyReturned {
            get {
                return qtyReturnedField;
            } 
            set {
                qtyReturnedField = value;
                 this.QtyReturnedSpecified = true;
                NotifyPropertyChanged("QtyReturned");
            }
        }

        private short? qtyReturnedField; 

        /// <summary>
        /// qtyReturnedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyReturnedSpecified {
            get {
                return qtyReturnedSpecifiedField;
            } 
            set {
                qtyReturnedSpecifiedField = value;
                NotifyPropertyChanged("QtyReturnedSpecified");
            }
        }

        private bool qtyReturnedSpecifiedField; 

        /// <summary>
        /// Quantity used for the report period 
        /// </summary>
		[Description("Quantity used for the report period")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("qtyUsed")]
        public short? QtyUsed {
            get {
                return qtyUsedField;
            } 
            set {
                qtyUsedField = value;
                 this.QtyUsedSpecified = true;
                NotifyPropertyChanged("QtyUsed");
            }
        }

        private short? qtyUsedField; 

        /// <summary>
        /// qtyUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyUsedSpecified {
            get {
                return qtyUsedSpecifiedField;
            } 
            set {
                qtyUsedSpecifiedField = value;
                NotifyPropertyChanged("QtyUsedSpecified");
            }
        }

        private bool qtyUsedSpecifiedField; 

        /// <summary>
        /// Cost for the product for the interval. 
        /// </summary>
		[Description("Cost for the product for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cost")]
		[XmlElement("costItem")]
        public Cost CostItem {
            get {
                return costItemField;
            } 
            set {
                costItemField = value;
                NotifyPropertyChanged("CostItem");
            }
        }

        private Cost costItemField; 

        /// <summary>
        /// Amount of item remaining on location after all adjustments for the report interval. 
        /// </summary>
		[Description("Amount of item remaining on location after all adjustments for the report interval.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("qtyOnLocation")]
        public short? QtyOnLocation {
            get {
                return qtyOnLocationField;
            } 
            set {
                qtyOnLocationField = value;
                 this.QtyOnLocationSpecified = true;
                NotifyPropertyChanged("QtyOnLocation");
            }
        }

        private short? qtyOnLocationField; 

        /// <summary>
        /// qtyOnLocationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyOnLocationSpecified {
            get {
                return qtyOnLocationSpecifiedField;
            } 
            set {
                qtyOnLocationSpecifiedField = value;
                NotifyPropertyChanged("QtyOnLocationSpecified");
            }
        }

        private bool qtyOnLocationSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Mud Losses Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudLosses", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Mud Losses Component Schema")]
    public partial class MudLosses : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Volume of mud lost at shakers (at surface). 
        /// </summary>
		[Description("Volume of mud lost at shakers (at surface).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostShakerSurf")]
        public VolumeMeasure VolLostShakerSurf {
            get {
                return volLostShakerSurfField;
            } 
            set {
                volLostShakerSurfField = value;
                NotifyPropertyChanged("VolLostShakerSurf");
            }
        }

        private VolumeMeasure volLostShakerSurfField; 

        /// <summary>
        /// Volume of mud lost in mud cleaning equipment (at surface). 
        /// </summary>
		[Description("Volume of mud lost in mud cleaning equipment (at surface).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostMudCleanerSurf")]
        public VolumeMeasure VolLostMudCleanerSurf {
            get {
                return volLostMudCleanerSurfField;
            } 
            set {
                volLostMudCleanerSurfField = value;
                NotifyPropertyChanged("VolLostMudCleanerSurf");
            }
        }

        private VolumeMeasure volLostMudCleanerSurfField; 

        /// <summary>
        /// Volume of mud lost in pit room (at surface). 
        /// </summary>
		[Description("Volume of mud lost in pit room (at surface).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostPitsSurf")]
        public VolumeMeasure VolLostPitsSurf {
            get {
                return volLostPitsSurfField;
            } 
            set {
                volLostPitsSurfField = value;
                NotifyPropertyChanged("VolLostPitsSurf");
            }
        }

        private VolumeMeasure volLostPitsSurfField; 

        /// <summary>
        /// Volume of mud lost while tripping (at surface). 
        /// </summary>
		[Description("Volume of mud lost while tripping (at surface).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostTrippingSurf")]
        public VolumeMeasure VolLostTrippingSurf {
            get {
                return volLostTrippingSurfField;
            } 
            set {
                volLostTrippingSurfField = value;
                NotifyPropertyChanged("VolLostTrippingSurf");
            }
        }

        private VolumeMeasure volLostTrippingSurfField; 

        /// <summary>
        /// Surface volume lost other location. 
        /// </summary>
		[Description("Surface volume lost other location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostOtherSurf")]
        public VolumeMeasure VolLostOtherSurf {
            get {
                return volLostOtherSurfField;
            } 
            set {
                volLostOtherSurfField = value;
                NotifyPropertyChanged("VolLostOtherSurf");
            }
        }

        private VolumeMeasure volLostOtherSurfField; 

        /// <summary>
        /// Total volume of mud lost at surface. 
        /// </summary>
		[Description("Total volume of mud lost at surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volTotMudLostSurf")]
        public VolumeMeasure VolTotMudLostSurf {
            get {
                return volTotMudLostSurfField;
            } 
            set {
                volTotMudLostSurfField = value;
                NotifyPropertyChanged("VolTotMudLostSurf");
            }
        }

        private VolumeMeasure volTotMudLostSurfField; 

        /// <summary>
        /// Mud volume lost downhole while circulating. 
        /// </summary>
		[Description("Mud volume lost downhole while circulating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostCircHole")]
        public VolumeMeasure VolLostCircHole {
            get {
                return volLostCircHoleField;
            } 
            set {
                volLostCircHoleField = value;
                NotifyPropertyChanged("VolLostCircHole");
            }
        }

        private VolumeMeasure volLostCircHoleField; 

        /// <summary>
        /// Mud volume lost downhole while running casing. 
        /// </summary>
		[Description("Mud volume lost downhole while running casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostCsgHole")]
        public VolumeMeasure VolLostCsgHole {
            get {
                return volLostCsgHoleField;
            } 
            set {
                volLostCsgHoleField = value;
                NotifyPropertyChanged("VolLostCsgHole");
            }
        }

        private VolumeMeasure volLostCsgHoleField; 

        /// <summary>
        /// Mud volume lost downhole while cementing. 
        /// </summary>
		[Description("Mud volume lost downhole while cementing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostCmtHole")]
        public VolumeMeasure VolLostCmtHole {
            get {
                return volLostCmtHoleField;
            } 
            set {
                volLostCmtHoleField = value;
                NotifyPropertyChanged("VolLostCmtHole");
            }
        }

        private VolumeMeasure volLostCmtHoleField; 

        /// <summary>
        /// Mud volume lost downhole behind casing. 
        /// </summary>
		[Description("Mud volume lost downhole behind casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostBhdCsgHole")]
        public VolumeMeasure VolLostBhdCsgHole {
            get {
                return volLostBhdCsgHoleField;
            } 
            set {
                volLostBhdCsgHoleField = value;
                NotifyPropertyChanged("VolLostBhdCsgHole");
            }
        }

        private VolumeMeasure volLostBhdCsgHoleField; 

        /// <summary>
        /// Mud volume lost downhole during abandonment. 
        /// </summary>
		[Description("Mud volume lost downhole during abandonment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostAbandonHole")]
        public VolumeMeasure VolLostAbandonHole {
            get {
                return volLostAbandonHoleField;
            } 
            set {
                volLostAbandonHoleField = value;
                NotifyPropertyChanged("VolLostAbandonHole");
            }
        }

        private VolumeMeasure volLostAbandonHoleField; 

        /// <summary>
        /// Mud volume lost downhole from other location. 
        /// </summary>
		[Description("Mud volume lost downhole from other location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volLostOtherHole")]
        public VolumeMeasure VolLostOtherHole {
            get {
                return volLostOtherHoleField;
            } 
            set {
                volLostOtherHoleField = value;
                NotifyPropertyChanged("VolLostOtherHole");
            }
        }

        private VolumeMeasure volLostOtherHoleField; 

        /// <summary>
        /// Total volume of mud lost downhole. 
        /// </summary>
		[Description("Total volume of mud lost downhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volTotMudLostHole")]
        public VolumeMeasure VolTotMudLostHole {
            get {
                return volTotMudLostHoleField;
            } 
            set {
                volTotMudLostHoleField = value;
                NotifyPropertyChanged("VolTotMudLostHole");
            }
        }

        private VolumeMeasure volTotMudLostHoleField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Mud Volume Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudVolume", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Mud Volume Component Schema")]
    public partial class MudVolume : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Total volume of mud at start of report interval (including pits and hole). 
        /// </summary>
		[Description("Total volume of mud at start of report interval (including pits and hole).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volTotMudStart")]
        public VolumeMeasure VolTotMudStart {
            get {
                return volTotMudStartField;
            } 
            set {
                volTotMudStartField = value;
                NotifyPropertyChanged("VolTotMudStart");
            }
        }

        private VolumeMeasure volTotMudStartField; 

        /// <summary>
        /// Volume of mud dumped. 
        /// </summary>
		[Description("Volume of mud dumped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volMudDumped")]
        public VolumeMeasure VolMudDumped {
            get {
                return volMudDumpedField;
            } 
            set {
                volMudDumpedField = value;
                NotifyPropertyChanged("VolMudDumped");
            }
        }

        private VolumeMeasure volMudDumpedField; 

        /// <summary>
        /// Volume of mud received from mud warehouse. 
        /// </summary>
		[Description("Volume of mud received from mud warehouse.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volMudReceived")]
        public VolumeMeasure VolMudReceived {
            get {
                return volMudReceivedField;
            } 
            set {
                volMudReceivedField = value;
                NotifyPropertyChanged("VolMudReceived");
            }
        }

        private VolumeMeasure volMudReceivedField; 

        /// <summary>
        /// Volume of mud returned to mud warehouse. 
        /// </summary>
		[Description("Volume of mud returned to mud warehouse.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volMudReturned")]
        public VolumeMeasure VolMudReturned {
            get {
                return volMudReturnedField;
            } 
            set {
                volMudReturnedField = value;
                NotifyPropertyChanged("VolMudReturned");
            }
        }

        private VolumeMeasure volMudReturnedField; 

        /// <summary>
        /// Mud losses detailed breakdown between Surface and Down Hole. 
        /// </summary>
		[Description("Mud losses detailed breakdown between Surface and Down Hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_mudLosses")]
		[XmlElement("mudLosses")]
        public MudLosses MudLosses {
            get {
                return mudLossesField;
            } 
            set {
                mudLossesField = value;
                NotifyPropertyChanged("MudLosses");
            }
        }

        private MudLosses mudLossesField; 

        /// <summary>
        /// Volume of mud built. 
        /// </summary>
		[Description("Volume of mud built.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volMudBuilt")]
        public VolumeMeasure VolMudBuilt {
            get {
                return volMudBuiltField;
            } 
            set {
                volMudBuiltField = value;
                NotifyPropertyChanged("VolMudBuilt");
            }
        }

        private VolumeMeasure volMudBuiltField; 

        /// <summary>
        /// Volume of mud contained within active string. 
        /// </summary>
		[Description("Volume of mud contained within active string.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volMudString")]
        public VolumeMeasure VolMudString {
            get {
                return volMudStringField;
            } 
            set {
                volMudStringField = value;
                NotifyPropertyChanged("VolMudString");
            }
        }

        private VolumeMeasure volMudStringField; 

        /// <summary>
        /// Volume of mud contained in casing annulus. 
        /// </summary>
		[Description("Volume of mud contained in casing annulus.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volMudCasing")]
        public VolumeMeasure VolMudCasing {
            get {
                return volMudCasingField;
            } 
            set {
                volMudCasingField = value;
                NotifyPropertyChanged("VolMudCasing");
            }
        }

        private VolumeMeasure volMudCasingField; 

        /// <summary>
        /// Volume of mud contained in open hole annulus. 
        /// </summary>
		[Description("Volume of mud contained in open hole annulus.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volMudHole")]
        public VolumeMeasure VolMudHole {
            get {
                return volMudHoleField;
            } 
            set {
                volMudHoleField = value;
                NotifyPropertyChanged("VolMudHole");
            }
        }

        private VolumeMeasure volMudHoleField; 

        /// <summary>
        /// Volume of mud contained in riser section annulus. 
        /// </summary>
		[Description("Volume of mud contained in riser section annulus.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volMudRiser")]
        public VolumeMeasure VolMudRiser {
            get {
                return volMudRiserField;
            } 
            set {
                volMudRiserField = value;
                NotifyPropertyChanged("VolMudRiser");
            }
        }

        private VolumeMeasure volMudRiserField; 

        /// <summary>
        /// Total volume of mud at the end of the report interval (including pits and hole). 
        /// </summary>
		[Description("Total volume of mud at the end of the report interval (including pits and hole).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volTotMudEnd")]
        public VolumeMeasure VolTotMudEnd {
            get {
                return volTotMudEndField;
            } 
            set {
                volTotMudEndField = value;
                NotifyPropertyChanged("VolTotMudEnd");
            }
        }

        private VolumeMeasure volTotMudEndField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Pit Volume Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pitVolume", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Pit Volume Component Schema")]
    public partial class PitVolume : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// This is a pointer to the corresponding pit on the rig.
        /// </summary>
		[Required]
        [Description("This is a pointer to the corresponding pit on the rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refPositiveCount")]
		[XmlElement("pit")]
        public RefPositiveCount Pit {
            get {
                return pitField;
            } 
            set {
                pitField = value;
                NotifyPropertyChanged("Pit");
            }
        }

        private RefPositiveCount pitField; 

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Volume of fluid in pit. 
        /// </summary>
		[Required]
        [Description("Volume of fluid in pit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volPit")]
        public VolumeMeasure VolPit {
            get {
                return volPitField;
            } 
            set {
                volPitField = value;
                NotifyPropertyChanged("VolPit");
            }
        }

        private VolumeMeasure volPitField; 

        /// <summary>
        /// Density of fluid in pit. 
        /// </summary>
		[Description("Density of fluid in pit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densFluid")]
        public DensityMeasure DensFluid {
            get {
                return densFluidField;
            } 
            set {
                densFluidField = value;
                NotifyPropertyChanged("DensFluid");
            }
        }

        private DensityMeasure densFluidField; 

        /// <summary>
        /// Fluid description. 
        /// </summary>
		[StringLength(64)]
        [Description("Fluid description.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("descFluid")]
        public string DescFluid {
            get {
                return descFluidField;
            } 
            set {
                descFluidField = value;
                NotifyPropertyChanged("DescFluid");
            }
        }

        private string descFluidField; 

        /// <summary>
        /// Funnel viscosity in seconds. 
        /// </summary>
		[Description("Funnel viscosity in seconds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("visFunnel")]
        public TimeMeasure VisFunnel {
            get {
                return visFunnelField;
            } 
            set {
                visFunnelField = value;
                NotifyPropertyChanged("VisFunnel");
            }
        }

        private TimeMeasure visFunnelField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Slow Circulation Rates (SCR) Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_scr", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Slow Circulation Rates (SCR) Component Schema")]
    public partial class Scr : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// This is a pointer to the corresponding pump on the rig.
        /// </summary>
		[Required]
        [Description("This is a pointer to the corresponding pump on the rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refPositiveCount")]
		[XmlElement("pump")]
        public RefPositiveCount Pump {
            get {
                return pumpField;
            } 
            set {
                pumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

        private RefPositiveCount pumpField; 

        /// <summary>
        /// Type of slow circulation rate. 
        /// </summary>
		[Required]
        [Description("Type of slow circulation rate.")]
        [EnergisticsDataTypeAttribute(DataType = "ScrType")]
		[XmlElement("typeScr")]
        public ScrType? TypeScr {
            get {
                return typeScrField;
            } 
            set {
                typeScrField = value;
                 this.TypeScrSpecified = true;
                NotifyPropertyChanged("TypeScr");
            }
        }

        
        private bool TypeScrSpecifiedField = false;
        
        /// <summary>
        /// TypeScrSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeScrSpecified {
            get {
                return TypeScrSpecifiedField;
            } 
            set {
                TypeScrSpecifiedField = value;
                NotifyPropertyChanged("TypeScrSpecified");
            }
        }
        
        private ScrType? typeScrField; 

        /// <summary>
        /// Pump stroke rate. 
        /// </summary>
		[Required]
        [Description("Pump stroke rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("rateStroke")]
        public AnglePerTimeMeasure RateStroke {
            get {
                return rateStrokeField;
            } 
            set {
                rateStrokeField = value;
                NotifyPropertyChanged("RateStroke");
            }
        }

        private AnglePerTimeMeasure rateStrokeField; 

        /// <summary>
        /// Recorded pump pressure for the stroke rate. 
        /// </summary>
		[Required]
        [Description("Recorded pump pressure for the stroke rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presRecorded")]
        public PressureMeasure PresRecorded {
            get {
                return presRecordedField;
            } 
            set {
                presRecordedField = value;
                NotifyPropertyChanged("PresRecorded");
            }
        }

        private PressureMeasure presRecordedField; 

        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[Description("Along hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return mdBitField;
            } 
            set {
                mdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord mdBitField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Operations Report object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_opsReport", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Operations Report object.")]
    public partial class OpsReport : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the operations report. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the operations report.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the operations report. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the operations report.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A pointer to the rig utilized in this reporting period. 
        /// </summary>
		[Description("A pointer to the rig utilized in this reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("rig")]
        public RefNameString Rig {
            get {
                return rigField;
            } 
            set {
                rigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private RefNameString rigField; 

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// Time from start of Operations (commonly in days). 
        /// </summary>
		[Description("Time from start of Operations (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimStart")]
        public TimeMeasure ETimeStart {
            get {
                return eTimStartField;
            } 
            set {
                eTimStartField = value;
                NotifyPropertyChanged("ETimeStart");
            }
        }

        private TimeMeasure eTimStartField; 

        /// <summary>
        /// Time since bit broke ground (commonly in days). 
        /// </summary>
		[Description("Time since bit broke ground (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimSpud")]
        public TimeMeasure ETimeSpud {
            get {
                return eTimSpudField;
            } 
            set {
                eTimSpudField = value;
                NotifyPropertyChanged("ETimeSpud");
            }
        }

        private TimeMeasure eTimSpudField; 

        /// <summary>
        /// Time rig on location (commonly in days). 
        /// </summary>
		[Description("Time rig on location (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimLoc")]
        public TimeMeasure ETimeLoc {
            get {
                return eTimLocField;
            } 
            set {
                eTimLocField = value;
                NotifyPropertyChanged("ETimeLoc");
            }
        }

        private TimeMeasure eTimLocField; 

        /// <summary>
        /// Wellbore Measured Depth. 
        /// </summary>
		[Description("Wellbore Measured Depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdReport")]
        public MeasuredDepthCoord MDReport {
            get {
                return mdReportField;
            } 
            set {
                mdReportField = value;
                NotifyPropertyChanged("MDReport");
            }
        }

        private MeasuredDepthCoord mdReportField; 

        /// <summary>
        /// Wellbore True Vertical Depth. 
        /// </summary>
		[Description("Wellbore True Vertical Depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdReport")]
        public WellVerticalDepthCoord TvdReport {
            get {
                return tvdReportField;
            } 
            set {
                tvdReportField = value;
                NotifyPropertyChanged("TvdReport");
            }
        }

        private WellVerticalDepthCoord tvdReportField; 

        /// <summary>
        /// Distance drilled since last report. 
        /// </summary>
		[Description("Distance drilled since last report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distDrill")]
        public LengthMeasure DistDrill {
            get {
                return distDrillField;
            } 
            set {
                distDrillField = value;
                NotifyPropertyChanged("DistDrill");
            }
        }

        private LengthMeasure distDrillField; 

        /// <summary>
        /// Drilling time. 
        /// </summary>
		[Description("Drilling time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimDrill")]
        public TimeMeasure ETimeDrill {
            get {
                return eTimDrillField;
            } 
            set {
                eTimDrillField = value;
                NotifyPropertyChanged("ETimeDrill");
            }
        }

        private TimeMeasure eTimDrillField; 

        /// <summary>
        /// Measured depth of plan for this day number. 
        /// </summary>
		[Description("Measured depth of plan for this day number.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdPlanned")]
        public MeasuredDepthCoord MDPlanned {
            get {
                return mdPlannedField;
            } 
            set {
                mdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord mdPlannedField; 

        /// <summary>
        /// Average Rate of Penetration through Interval. 
        /// </summary>
		[Description("Average Rate of Penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("ropAv")]
        public VelocityMeasure RopAverage {
            get {
                return ropAvField;
            } 
            set {
                ropAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private VelocityMeasure ropAvField; 

        /// <summary>
        /// Rate of penetration at report time. 
        /// </summary>
		[Description("Rate of penetration at report time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("ropCurrent")]
        public VelocityMeasure RopCurrent {
            get {
                return ropCurrentField;
            } 
            set {
                ropCurrentField = value;
                NotifyPropertyChanged("RopCurrent");
            }
        }

        private VelocityMeasure ropCurrentField; 

        /// <summary>
        /// Name of operator rig supervisor. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of operator rig supervisor.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("supervisor")]
        public string Supervisor {
            get {
                return supervisorField;
            } 
            set {
                supervisorField = value;
                NotifyPropertyChanged("Supervisor");
            }
        }

        private string supervisorField; 

        /// <summary>
        /// Nae of Engineer. 
        /// </summary>
		[StringLength(64)]
        [Description("Nae of Engineer.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("engineer")]
        public string Engineer {
            get {
                return engineerField;
            } 
            set {
                engineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private string engineerField; 

        /// <summary>
        /// Name of operator wellsite geologist. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of operator wellsite geologist.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("geologist")]
        public string Geologist {
            get {
                return geologistField;
            } 
            set {
                geologistField = value;
                NotifyPropertyChanged("Geologist");
            }
        }

        private string geologistField; 

        /// <summary>
        /// Time spent rotary drilling for report interval. 
        /// </summary>
		[Description("Time spent rotary drilling for report interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimDrillRot")]
        public TimeMeasure ETimeDrillRot {
            get {
                return eTimDrillRotField;
            } 
            set {
                eTimDrillRotField = value;
                NotifyPropertyChanged("ETimeDrillRot");
            }
        }

        private TimeMeasure eTimDrillRotField; 

        /// <summary>
        /// Time spent slide drilling from start of bit run. 
        /// </summary>
		[Description("Time spent slide drilling from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimDrillSlid")]
        public TimeMeasure ETimeDrillSlid {
            get {
                return eTimDrillSlidField;
            } 
            set {
                eTimDrillSlidField = value;
                NotifyPropertyChanged("ETimeDrillSlid");
            }
        }

        private TimeMeasure eTimDrillSlidField; 

        /// <summary>
        /// Time spent circulating from start of bit run. 
        /// </summary>
		[Description("Time spent circulating from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimCirc")]
        public TimeMeasure ETimeCirc {
            get {
                return eTimCircField;
            } 
            set {
                eTimCircField = value;
                NotifyPropertyChanged("ETimeCirc");
            }
        }

        private TimeMeasure eTimCircField; 

        /// <summary>
        /// Time spent reaming from start of bit run. 
        /// </summary>
		[Description("Time spent reaming from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimReam")]
        public TimeMeasure ETimeReam {
            get {
                return eTimReamField;
            } 
            set {
                eTimReamField = value;
                NotifyPropertyChanged("ETimeReam");
            }
        }

        private TimeMeasure eTimReamField; 

        /// <summary>
        /// Time spent with no DD work (commonly in hours). 
        /// </summary>
		[Description("Time spent with no DD work (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimHold")]
        public TimeMeasure ETimeHold {
            get {
                return eTimHoldField;
            } 
            set {
                eTimHoldField = value;
                NotifyPropertyChanged("ETimeHold");
            }
        }

        private TimeMeasure eTimHoldField; 

        /// <summary>
        /// Time spent steering bottom hole assembly (commonly in hours). 
        /// </summary>
		[Description("Time spent steering bottom hole assembly (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimSteering")]
        public TimeMeasure ETimeSteering {
            get {
                return eTimSteeringField;
            } 
            set {
                eTimSteeringField = value;
                NotifyPropertyChanged("ETimeSteering");
            }
        }

        private TimeMeasure eTimSteeringField; 

        /// <summary>
        /// Distance drilled - rotating. 
        /// </summary>
		[Description("Distance drilled - rotating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distDrillRot")]
        public LengthMeasure DistDrillRot {
            get {
                return distDrillRotField;
            } 
            set {
                distDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure distDrillRotField; 

        /// <summary>
        /// Distance drilled - sliding. 
        /// </summary>
		[Description("Distance drilled - sliding.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distDrillSlid")]
        public LengthMeasure DistDrillSlid {
            get {
                return distDrillSlidField;
            } 
            set {
                distDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure distDrillSlidField; 

        /// <summary>
        /// Distance reamed. 
        /// </summary>
		[Description("Distance reamed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distReam")]
        public LengthMeasure DistReam {
            get {
                return distReamField;
            } 
            set {
                distReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure distReamField; 

        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly. 
        /// </summary>
		[Description("Distance covered while holding angle with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distHold")]
        public LengthMeasure DistHold {
            get {
                return distHoldField;
            } 
            set {
                distHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure distHoldField; 

        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly. 
        /// </summary>
		[Description("Distance covered while actively steering with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distSteering")]
        public LengthMeasure DistSteering {
            get {
                return distSteeringField;
            } 
            set {
                distSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure distSteeringField; 

        /// <summary>
        /// Total number of personnel on board. 
        /// </summary>
		[Description("Total number of personnel on board.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numPob")]
        public short? NumPob {
            get {
                return numPobField;
            } 
            set {
                numPobField = value;
                 this.NumPobSpecified = true;
                NotifyPropertyChanged("NumPob");
            }
        }

        private short? numPobField; 

        /// <summary>
        /// numPobSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumPobSpecified {
            get {
                return numPobSpecifiedField;
            } 
            set {
                numPobSpecifiedField = value;
                NotifyPropertyChanged("NumPobSpecified");
            }
        }

        private bool numPobSpecifiedField; 

        /// <summary>
        /// Number of contractor personnel on board. 
        /// </summary>
		[Description("Number of contractor personnel on board.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numContract")]
        public short? NumContract {
            get {
                return numContractField;
            } 
            set {
                numContractField = value;
                 this.NumContractSpecified = true;
                NotifyPropertyChanged("NumContract");
            }
        }

        private short? numContractField; 

        /// <summary>
        /// numContractSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumContractSpecified {
            get {
                return numContractSpecifiedField;
            } 
            set {
                numContractSpecifiedField = value;
                NotifyPropertyChanged("NumContractSpecified");
            }
        }

        private bool numContractSpecifiedField; 

        /// <summary>
        /// Number of Operator personnel on board. 
        /// </summary>
		[Description("Number of Operator personnel on board.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numOperator")]
        public short? NumOperator {
            get {
                return numOperatorField;
            } 
            set {
                numOperatorField = value;
                 this.NumOperatorSpecified = true;
                NotifyPropertyChanged("NumOperator");
            }
        }

        private short? numOperatorField; 

        /// <summary>
        /// numOperatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumOperatorSpecified {
            get {
                return numOperatorSpecifiedField;
            } 
            set {
                numOperatorSpecifiedField = value;
                NotifyPropertyChanged("NumOperatorSpecified");
            }
        }

        private bool numOperatorSpecifiedField; 

        /// <summary>
        /// Number of service company personnel on board. 
        /// </summary>
		[Description("Number of service company personnel on board.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numService")]
        public short? NumService {
            get {
                return numServiceField;
            } 
            set {
                numServiceField = value;
                 this.NumServiceSpecified = true;
                NotifyPropertyChanged("NumService");
            }
        }

        private short? numServiceField; 

        /// <summary>
        /// numServiceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumServiceSpecified {
            get {
                return numServiceSpecifiedField;
            } 
            set {
                numServiceSpecifiedField = value;
                NotifyPropertyChanged("NumServiceSpecified");
            }
        }

        private bool numServiceSpecifiedField; 

        /// <summary>
        /// Activity breakdown, multiple for many activities. 
        /// </summary>
		[Description("Activity breakdown, multiple for many activities.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_activity")]
		[XmlElement("activity")]
        public List<Activity> Activity {
            get {
                return activityField;
            } 
            set {
                activityField = value;
                NotifyPropertyChanged("Activity");
            }
        }

         /// <summary>
         /// bool to indicate if Activity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ActivitySpecified
         {
             get {
             if(activityField!=null)
                 return activityField.Count>0?true:false;
             else return false;
             }
         }
        private List<Activity> activityField; 

        /// <summary>
        /// Average bottom hole assembly parameters for report duration or actual instances of bottom hole assembly operations. 
        /// </summary>
		[Description("Average bottom hole assembly parameters for report duration or actual instances of bottom hole assembly operations.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillingParams")]
		[XmlElement("drillingParams")]
        public List<DrillingParams> DrillingParams {
            get {
                return drillingParamsField;
            } 
            set {
                drillingParamsField = value;
                NotifyPropertyChanged("DrillingParams");
            }
        }

         /// <summary>
         /// bool to indicate if DrillingParams has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DrillingParamsSpecified
         {
             get {
             if(drillingParamsField!=null)
                 return drillingParamsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillingParams> drillingParamsField; 

        /// <summary>
        /// Record of actual hole geometry at report time. 
        /// </summary>
		[Description("Record of actual hole geometry at report time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wbGeometry")]
		[XmlElement("wbGeometry")]
        public WellboreGeometry WellboreGeometry {
            get {
                return wbGeometryField;
            } 
            set {
                wbGeometryField = value;
                NotifyPropertyChanged("WellboreGeometry");
            }
        }

        private WellboreGeometry wbGeometryField; 

        /// <summary>
        /// Cost item for the report interval. 
        /// </summary>
		[Description("Cost item for the report interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_dayCost")]
		[XmlElement("dayCost")]
        public List<DayCost> DayCost {
            get {
                return dayCostField;
            } 
            set {
                dayCostField = value;
                NotifyPropertyChanged("DayCost");
            }
        }

         /// <summary>
         /// bool to indicate if DayCost has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DayCostSpecified
         {
             get {
             if(dayCostField!=null)
                 return dayCostField.Count>0?true:false;
             else return false;
             }
         }
        private List<DayCost> dayCostField; 

        /// <summary>
        /// Survey station recorded during the report interval. 
        /// </summary>
		[Description("Survey station recorded during the report interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_trajectoryStation")]
		[XmlElement("trajectoryStation")]
        public List<TrajectoryStation> TrajectoryStation {
            get {
                return trajectoryStationField;
            } 
            set {
                trajectoryStationField = value;
                NotifyPropertyChanged("TrajectoryStation");
            }
        }

         /// <summary>
         /// bool to indicate if TrajectoryStation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TrajectoryStationSpecified
         {
             get {
             if(trajectoryStationField!=null)
                 return trajectoryStationField.Count>0?true:false;
             else return false;
             }
         }
        private List<TrajectoryStation> trajectoryStationField; 

        /// <summary>
        /// One fluid record. 
        /// </summary>
		[Description("One fluid record.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluid")]
		[XmlElement("fluid")]
        public List<Fluid> Fluid {
            get {
                return fluidField;
            } 
            set {
                fluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

         /// <summary>
         /// bool to indicate if Fluid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSpecified
         {
             get {
             if(fluidField!=null)
                 return fluidField.Count>0?true:false;
             else return false;
             }
         }
        private List<Fluid> fluidField; 

        /// <summary>
        /// Slow circulation rate pressure test for well control operations. 
        /// </summary>
		[Description("Slow circulation rate pressure test for well control operations.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_scr")]
		[XmlElement("scr")]
        public List<Scr> Scr {
            get {
                return scrField;
            } 
            set {
                scrField = value;
                NotifyPropertyChanged("Scr");
            }
        }

         /// <summary>
         /// bool to indicate if Scr has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScrSpecified
         {
             get {
             if(scrField!=null)
                 return scrField.Count>0?true:false;
             else return false;
             }
         }
        private List<Scr> scrField; 

        /// <summary>
        /// Pit volume record for the report interval. 
        /// </summary>
		[Description("Pit volume record for the report interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_pitVolume")]
		[XmlElement("pitVolume")]
        public List<PitVolume> PitVolume {
            get {
                return pitVolumeField;
            } 
            set {
                pitVolumeField = value;
                NotifyPropertyChanged("PitVolume");
            }
        }

         /// <summary>
         /// bool to indicate if PitVolume has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PitVolumeSpecified
         {
             get {
             if(pitVolumeField!=null)
                 return pitVolumeField.Count>0?true:false;
             else return false;
             }
         }
        private List<PitVolume> pitVolumeField; 

        /// <summary>
        /// Description of mud built, received, etc. 
        /// </summary>
		[Description("Description of mud built, received, etc.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_mudVolume")]
		[XmlElement("mudVolume")]
        public MudVolume MudVolume {
            get {
                return mudVolumeField;
            } 
            set {
                mudVolumeField = value;
                NotifyPropertyChanged("MudVolume");
            }
        }

        private MudVolume mudVolumeField; 

        /// <summary>
        /// Mud inventory item and cost for the report interval. 
        /// </summary>
		[Description("Mud inventory item and cost for the report interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_inventory")]
		[XmlElement("mudInventory")]
        public List<Inventory> MudInventory {
            get {
                return mudInventoryField;
            } 
            set {
                mudInventoryField = value;
                NotifyPropertyChanged("MudInventory");
            }
        }

         /// <summary>
         /// bool to indicate if MudInventory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MudInventorySpecified
         {
             get {
             if(mudInventoryField!=null)
                 return mudInventoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<Inventory> mudInventoryField; 

        /// <summary>
        /// Bulk item usage and cost. 
        /// </summary>
		[Description("Bulk item usage and cost.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_inventory")]
		[XmlElement("bulk")]
        public List<Inventory> Bulk {
            get {
                return bulkField;
            } 
            set {
                bulkField = value;
                NotifyPropertyChanged("Bulk");
            }
        }

         /// <summary>
         /// bool to indicate if Bulk has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BulkSpecified
         {
             get {
             if(bulkField!=null)
                 return bulkField.Count>0?true:false;
             else return false;
             }
         }
        private List<Inventory> bulkField; 

        /// <summary>
        /// Average rig response readings for the day. 
        /// </summary>
		[Description("Average rig response readings for the day.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_rigResponse")]
		[XmlElement("rigResponse")]
        public RigResponse RigResponse {
            get {
                return rigResponseField;
            } 
            set {
                rigResponseField = value;
                NotifyPropertyChanged("RigResponse");
            }
        }

        private RigResponse rigResponseField; 

        /// <summary>
        /// Pump rate/pressure reading. 
        /// </summary>
		[Description("Pump rate/pressure reading.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_pumpOp")]
		[XmlElement("pumpOp")]
        public List<PumpOp> PumpOperating {
            get {
                return pumpOpField;
            } 
            set {
                pumpOpField = value;
                NotifyPropertyChanged("PumpOperating");
            }
        }

         /// <summary>
         /// bool to indicate if PumpOperating has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PumpOperatingSpecified
         {
             get {
             if(pumpOpField!=null)
                 return pumpOpField.Count>0?true:false;
             else return false;
             }
         }
        private List<PumpOp> pumpOpField; 

        /// <summary>
        /// Container element for shaker operation elements. 
        /// </summary>
		[Description("Container element for shaker operation elements.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_shakerOp")]
		[XmlElement("shakerOp")]
        public List<ShakerOp> ShakerOperating {
            get {
                return shakerOpField;
            } 
            set {
                shakerOpField = value;
                NotifyPropertyChanged("ShakerOperating");
            }
        }

         /// <summary>
         /// bool to indicate if ShakerOperating has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ShakerOperatingSpecified
         {
             get {
             if(shakerOpField!=null)
                 return shakerOpField.Count>0?true:false;
             else return false;
             }
         }
        private List<ShakerOp> shakerOpField; 

        /// <summary>
        /// Health, safety and environmental information. 
        /// </summary>
		[Description("Health, safety and environmental information.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_hse")]
		[XmlElement("hse")]
        public Hse Hse {
            get {
                return hseField;
            } 
            set {
                hseField = value;
                NotifyPropertyChanged("Hse");
            }
        }

        private Hse hseField; 

        /// <summary>
        /// Personnel records. 
        /// </summary>
		[Description("Personnel records.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_personnel")]
		[XmlElement("personnel")]
        public List<Personnel> Personnel {
            get {
                return personnelField;
            } 
            set {
                personnelField = value;
                NotifyPropertyChanged("Personnel");
            }
        }

         /// <summary>
         /// bool to indicate if Personnel has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PersonnelSpecified
         {
             get {
             if(personnelField!=null)
                 return personnelField.Count>0?true:false;
             else return false;
             }
         }
        private List<Personnel> personnelField; 

        /// <summary>
        /// Support craft object container element. 
        /// </summary>
		[Description("Support craft object container element.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_supportCraft")]
		[XmlElement("supportCraft")]
        public List<SupportCraft> SupportCraft {
            get {
                return supportCraftField;
            } 
            set {
                supportCraftField = value;
                NotifyPropertyChanged("SupportCraft");
            }
        }

         /// <summary>
         /// bool to indicate if SupportCraft has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SupportCraftSpecified
         {
             get {
             if(supportCraftField!=null)
                 return supportCraftField.Count>0?true:false;
             else return false;
             }
         }
        private List<SupportCraft> supportCraftField; 

        /// <summary>
        /// Metrological readings for the day. 
        /// </summary>
		[Description("Metrological readings for the day.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_weather")]
		[XmlElement("weather")]
        public List<Weather> Weather {
            get {
                return weatherField;
            } 
            set {
                weatherField = value;
                NotifyPropertyChanged("Weather");
            }
        }

         /// <summary>
         /// bool to indicate if Weather has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WeatherSpecified
         {
             get {
             if(weatherField!=null)
                 return weatherField.Count>0?true:false;
             else return false;
             }
         }
        private List<Weather> weatherField; 

        /// <summary>
        /// AFE (authorization for expenditure) number that this cost item applies to. 
        /// </summary>
		[StringLength(32)]
        [Description("AFE (authorization for expenditure) number that this cost item applies to.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("numAFE")]
        public string NumAFE {
            get {
                return numAFEField;
            } 
            set {
                numAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private string numAFEField; 

        /// <summary>
        /// Daily Cost. 
        /// </summary>
		[Description("Daily Cost.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cost")]
		[XmlElement("costDay")]
        public Cost CostDay {
            get {
                return costDayField;
            } 
            set {
                costDayField = value;
                NotifyPropertyChanged("CostDay");
            }
        }

        private Cost costDayField; 

        /// <summary>
        /// Daily Mud Cost. 
        /// </summary>
		[Description("Daily Mud Cost.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cost")]
		[XmlElement("costDayMud")]
        public Cost CostDayMud {
            get {
                return costDayMudField;
            } 
            set {
                costDayMudField = value;
                NotifyPropertyChanged("CostDayMud");
            }
        }

        private Cost costDayMudField; 

        /// <summary>
        /// Hole diameter. 
        /// </summary>
		[Description("Hole diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaHole")]
        public LengthMeasure DiaHole {
            get {
                return diaHoleField;
            } 
            set {
                diaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure diaHoleField; 

        /// <summary>
        /// Hole condition description. 
        /// </summary>
		[StringLength(32)]
        [Description("Hole condition description.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("conditionHole")]
        public string ConditionHole {
            get {
                return conditionHoleField;
            } 
            set {
                conditionHoleField = value;
                NotifyPropertyChanged("ConditionHole");
            }
        }

        private string conditionHoleField; 

        /// <summary>
        /// Lithology for the Interval. 
        /// </summary>
		[StringLength(32)]
        [Description("Lithology for the Interval.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("lithology")]
        public string Lithology {
            get {
                return lithologyField;
            } 
            set {
                lithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

        private string lithologyField; 

        /// <summary>
        /// Name of formation. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of formation.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameFormation")]
        public string NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private string nameFormationField; 

        /// <summary>
        /// Diameter of last casing. 
        /// </summary>
		[Description("Diameter of last casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaCsgLast")]
        public LengthMeasure DiaCsgLast {
            get {
                return diaCsgLastField;
            } 
            set {
                diaCsgLastField = value;
                NotifyPropertyChanged("DiaCsgLast");
            }
        }

        private LengthMeasure diaCsgLastField; 

        /// <summary>
        /// Measured depth of last casing. 
        /// </summary>
		[Description("Measured depth of last casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdCsgLast")]
        public MeasuredDepthCoord MDCsgLast {
            get {
                return mdCsgLastField;
            } 
            set {
                mdCsgLastField = value;
                NotifyPropertyChanged("MDCsgLast");
            }
        }

        private MeasuredDepthCoord mdCsgLastField; 

        /// <summary>
        /// True vertical depth of last casing. 
        /// </summary>
		[Description("True vertical depth of last casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdCsgLast")]
        public WellVerticalDepthCoord TvdCsgLast {
            get {
                return tvdCsgLastField;
            } 
            set {
                tvdCsgLastField = value;
                NotifyPropertyChanged("TvdCsgLast");
            }
        }

        private WellVerticalDepthCoord tvdCsgLastField; 

        /// <summary>
        /// True vertical depth of leak off test point. 
        /// </summary>
		[Description("True vertical depth of leak off test point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdLot")]
        public WellVerticalDepthCoord TvdLot {
            get {
                return tvdLotField;
            } 
            set {
                tvdLotField = value;
                NotifyPropertyChanged("TvdLot");
            }
        }

        private WellVerticalDepthCoord tvdLotField; 

        /// <summary>
        /// Leak off test equivalent mud weight. 
        /// </summary>
		[Description("Leak off test equivalent mud weight.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("presLotEmw")]
        public DensityMeasure PresLotEmw {
            get {
                return presLotEmwField;
            } 
            set {
                presLotEmwField = value;
                NotifyPropertyChanged("PresLotEmw");
            }
        }

        private DensityMeasure presLotEmwField; 

        /// <summary>
        /// Kick tolerance pressure. 
        /// </summary>
		[Description("Kick tolerance pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presKickTol")]
        public PressureMeasure PresKickTol {
            get {
                return presKickTolField;
            } 
            set {
                presKickTolField = value;
                NotifyPropertyChanged("PresKickTol");
            }
        }

        private PressureMeasure presKickTolField; 

        /// <summary>
        /// Kick tolerance volume. 
        /// </summary>
		[Description("Kick tolerance volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volKickTol")]
        public VolumeMeasure VolKickTol {
            get {
                return volKickTolField;
            } 
            set {
                volKickTolField = value;
                NotifyPropertyChanged("VolKickTol");
            }
        }

        private VolumeMeasure volKickTolField; 

        /// <summary>
        /// Maximum allowable shut-in casing pressure. 
        /// </summary>
		[Description("Maximum allowable shut-in casing pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maasp")]
        public PressureMeasure Maasp {
            get {
                return maaspField;
            } 
            set {
                maaspField = value;
                NotifyPropertyChanged("Maasp");
            }
        }

        private PressureMeasure maaspField; 

        /// <summary>
        /// A pointer to the tubular (assembly) used in this report period. This represents a foreign key to tubular. 
        /// </summary>
		[Description("A pointer to the tubular (assembly) used in this report period. This represents a foreign key to tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("tubular")]
        public RefNameString Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private RefNameString tubularField; 

        /// <summary>
        /// 24 hour summary description. 
        /// </summary>
		[StringLength(256)]
        [Description("24 hour summary description.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("sum24Hr")]
        public string Sum24Hr {
            get {
                return sum24HrField;
            } 
            set {
                sum24HrField = value;
                NotifyPropertyChanged("Sum24Hr");
            }
        }

        private string sum24HrField; 

        /// <summary>
        /// Forecast for next 24 hrs. 
        /// </summary>
		[StringLength(256)]
        [Description("Forecast for next 24 hrs.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("forecast24Hr")]
        public string Forecast24Hr {
            get {
                return forecast24HrField;
            } 
            set {
                forecast24HrField = value;
                NotifyPropertyChanged("Forecast24Hr");
            }
        }

        private string forecast24HrField; 

        /// <summary>
        /// Current status description. 
        /// </summary>
		[StringLength(256)]
        [Description("Current status description.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("statusCurrent")]
        public string StatusCurrent {
            get {
                return statusCurrentField;
            } 
            set {
                statusCurrentField = value;
                NotifyPropertyChanged("StatusCurrent");
            }
        }

        private string statusCurrentField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Activity Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_activity", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Operations Activity Component Schema ")]
    public partial class Activity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
		[Description("Date and time that activities started.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// Date and time that activities were completed. 
        /// </summary>
		[Description("Date and time that activities were completed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// The activity duration (commonly in hours). 
        /// </summary>
		[Description("The activity duration (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("duration")]
        public TimeMeasure Duration {
            get {
                return durationField;
            } 
            set {
                durationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure durationField; 

        /// <summary>
        /// The measured depth to the drilling operation.
        /// </summary>
		[Description("The measured depth to the drilling operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// True Vertical Depth to the drilling operation.
        /// </summary>
		[Description("True Vertical Depth to the drilling operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// Phase (large activity classification) e.g. Drill Surface Hole. 
        /// </summary>
		[StringLength(50)]
        [Description("Phase (large activity classification) e.g. Drill Surface Hole.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("phase")]
        public string Phase {
            get {
                return phaseField;
            } 
            set {
                phaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private string phaseField; 

        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
		[Description("A code used to define rig activity.")]
        [EnergisticsDataTypeAttribute(DataType = "ActivityCode")]
		[XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set {
                activityCodeField = value;
                 this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private ActivityCode activityCodeField; 

        /// <summary>
        /// activityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ActivityCodeSpecified {
            get {
                return activityCodeSpecifiedField;
            } 
            set {
                activityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private bool activityCodeSpecifiedField; 

        /// <summary>
        /// A proprietary code used to define rig activity. The name of the proprietary system should be defined in the namingSystem attribute.
        /// </summary>
		[Description("A proprietary code used to define rig activity. The name of the proprietary system should be defined in the namingSystem attribute.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("proprietaryCode")]
        public List<NameStruct> ProprietaryCode {
            get {
                return proprietaryCodeField;
            } 
            set {
                proprietaryCodeField = value;
                NotifyPropertyChanged("ProprietaryCode");
            }
        }

         /// <summary>
         /// bool to indicate if ProprietaryCode has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProprietaryCodeSpecified
         {
             get {
             if(proprietaryCodeField!=null)
                 return proprietaryCodeField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> proprietaryCodeField; 

        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
		[StringLength(50)]
        [Description("Custom string to further define an activity.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("detailActivity")]
        public string DetailActivity {
            get {
                return detailActivityField;
            } 
            set {
                detailActivityField = value;
                NotifyPropertyChanged("DetailActivity");
            }
        }

        private string detailActivityField; 

        /// <summary>
        /// Classifier (Planned, Unplanned, Downtime). 
        /// </summary>
		[Description("Classifier (Planned, Unplanned, Downtime).")]
        [EnergisticsDataTypeAttribute(DataType = "ActivityClassType")]
		[XmlElement("typeActivityClass")]
        public ActivityClassType? TypeActivityClass {
            get {
                return typeActivityClassField;
            } 
            set {
                typeActivityClassField = value;
                 this.TypeActivityClassSpecified = true;
                NotifyPropertyChanged("TypeActivityClass");
            }
        }

        private ActivityClassType? typeActivityClassField; 

        /// <summary>
        /// typeActivityClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeActivityClassSpecified {
            get {
                return typeActivityClassSpecifiedField;
            } 
            set {
                typeActivityClassSpecifiedField = value;
                NotifyPropertyChanged("TypeActivityClassSpecified");
            }
        }

        private bool typeActivityClassSpecifiedField; 

        /// <summary>
        /// Measured Depth at start of activity. 
        /// </summary>
		[Description("Measured Depth at start of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdHoleStart")]
        public MeasuredDepthCoord MDHoleStart {
            get {
                return mdHoleStartField;
            } 
            set {
                mdHoleStartField = value;
                NotifyPropertyChanged("MDHoleStart");
            }
        }

        private MeasuredDepthCoord mdHoleStartField; 

        /// <summary>
        /// True Vertical Depth at start of activity 
        /// </summary>
		[Description("True Vertical Depth at start of activity")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdHoleStart")]
        public WellVerticalDepthCoord TvdHoleStart {
            get {
                return tvdHoleStartField;
            } 
            set {
                tvdHoleStartField = value;
                NotifyPropertyChanged("TvdHoleStart");
            }
        }

        private WellVerticalDepthCoord tvdHoleStartField; 

        /// <summary>
        /// Measured Depth at end of activity. 
        /// </summary>
		[Description("Measured Depth at end of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdHoleEnd")]
        public MeasuredDepthCoord MDHoleEnd {
            get {
                return mdHoleEndField;
            } 
            set {
                mdHoleEndField = value;
                NotifyPropertyChanged("MDHoleEnd");
            }
        }

        private MeasuredDepthCoord mdHoleEndField; 

        /// <summary>
        /// True Vertical Depth at end of activity. 
        /// </summary>
		[Description("True Vertical Depth at end of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdHoleEnd")]
        public WellVerticalDepthCoord TvdHoleEnd {
            get {
                return tvdHoleEndField;
            } 
            set {
                tvdHoleEndField = value;
                NotifyPropertyChanged("TvdHoleEnd");
            }
        }

        private WellVerticalDepthCoord tvdHoleEndField; 

        /// <summary>
        /// Measured depth of bit at start of activity. 
        /// </summary>
		[Description("Measured depth of bit at start of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBitStart")]
        public MeasuredDepthCoord MDBitStart {
            get {
                return mdBitStartField;
            } 
            set {
                mdBitStartField = value;
                NotifyPropertyChanged("MDBitStart");
            }
        }

        private MeasuredDepthCoord mdBitStartField; 

        /// <summary>
        /// Measured depth of bit at end of activity. 
        /// </summary>
		[Description("Measured depth of bit at end of activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBitEnd")]
        public MeasuredDepthCoord MDBitEnd {
            get {
                return mdBitEndField;
            } 
            set {
                mdBitEndField = value;
                NotifyPropertyChanged("MDBitEnd");
            }
        }

        private MeasuredDepthCoord mdBitEndField; 

        /// <summary>
        /// Finish, interrupted, failed, etc. 
        /// </summary>
		[StringLength(32)]
        [Description("Finish, interrupted, failed, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("state")]
        public string State {
            get {
                return stateField;
            } 
            set {
                stateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private string stateField; 

        /// <summary>
        /// The outcome of the detailed activity.
        /// </summary>
		[Description("The outcome of the detailed activity.")]
        [EnergisticsDataTypeAttribute(DataType = "StateDetailActivity")]
		[XmlElement("stateDetailActivity")]
        public StateDetailActivity? StateDetailActivity {
            get {
                return stateDetailActivityField;
            } 
            set {
                stateDetailActivityField = value;
                 this.StateDetailActivitySpecified = true;
                NotifyPropertyChanged("StateDetailActivity");
            }
        }

        private StateDetailActivity? stateDetailActivityField; 

        /// <summary>
        /// stateDetailActivitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StateDetailActivitySpecified {
            get {
                return stateDetailActivitySpecifiedField;
            } 
            set {
                stateDetailActivitySpecifiedField = value;
                NotifyPropertyChanged("StateDetailActivitySpecified");
            }
        }

        private bool stateDetailActivitySpecifiedField; 

        /// <summary>
        /// Operator company name. 
        /// </summary>
		[StringLength(64)]
        [Description("Operator company name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("operator")]
        public string Operator {
            get {
                return operatorField;
            } 
            set {
                operatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private string operatorField; 

        /// <summary>
        /// A pointer to the tubular related to this activity.
        /// </summary>
		[Description("A pointer to the tubular related to this activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("tubular")]
        public RefNameString Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private RefNameString tubularField; 

        /// <summary>
        /// Is the activity optimum. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is the activity optimum.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("optimum")]
        public bool? Optimum {
            get {
                return optimumField;
            } 
            set {
                optimumField = value;
                 this.OptimumSpecified = true;
                NotifyPropertyChanged("Optimum");
            }
        }

        private bool? optimumField; 

        /// <summary>
        /// optimumSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OptimumSpecified {
            get {
                return optimumSpecifiedField;
            } 
            set {
                optimumSpecifiedField = value;
                NotifyPropertyChanged("OptimumSpecified");
            }
        }

        private bool optimumSpecifiedField; 

        /// <summary>
        /// Does activity bring closer to objective. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Does activity bring closer to objective.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("productive")]
        public bool? Productive {
            get {
                return productiveField;
            } 
            set {
                productiveField = value;
                 this.ProductiveSpecified = true;
                NotifyPropertyChanged("Productive");
            }
        }

        private bool? productiveField; 

        /// <summary>
        /// productiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProductiveSpecified {
            get {
                return productiveSpecifiedField;
            } 
            set {
                productiveSpecifiedField = value;
                NotifyPropertyChanged("ProductiveSpecified");
            }
        }

        private bool productiveSpecifiedField; 

        /// <summary>
        /// The item state for the data object. 
        /// </summary>
		[Description("The item state for the data object.")]
        [EnergisticsDataTypeAttribute(DataType = "ItemState")]
		[XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set {
                itemStateField = value;
                 this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ItemState? itemStateField; 

        /// <summary>
        /// itemStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemStateSpecified {
            get {
                return itemStateSpecifiedField;
            } 
            set {
                itemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private bool itemStateSpecifiedField; 

        /// <summary>
        /// Comments and Remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and Remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the nameStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="nameStruct", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the nameStruct xsd type.")]
    public partial class NameStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the NameStruct class.
        /// </summary>
        public NameStruct() {}

        /// <summary>
        /// Initializes a new instance of the NameStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public NameStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is (hopefully) unique.
        /// </summary>
		[StringLength(64)]
        [Description("The naming system within the name is (hopefully) unique.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("namingSystem")]
		
        public string NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private string namingSystemField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Bottom hole assembly drilling parameters component schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillingParams", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Bottom hole assembly drilling parameters component schema ")]
    public partial class DrillingParams : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Operating time spent by bit for run. 
        /// </summary>
		[Required]
        [Description("Operating time spent by bit for run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimOpBit")]
        public TimeMeasure ETimeOperatingBit {
            get {
                return eTimOpBitField;
            } 
            set {
                eTimOpBitField = value;
                NotifyPropertyChanged("ETimeOperatingBit");
            }
        }

        private TimeMeasure eTimOpBitField; 

        /// <summary>
        /// Measured depth at start. 
        /// </summary>
		[Description("Measured depth at start.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdHoleStart")]
        public MeasuredDepthCoord MDHoleStart {
            get {
                return mdHoleStartField;
            } 
            set {
                mdHoleStartField = value;
                NotifyPropertyChanged("MDHoleStart");
            }
        }

        private MeasuredDepthCoord mdHoleStartField; 

        /// <summary>
        /// Measured depth at stop. 
        /// </summary>
		[Required]
        [Description("Measured depth at stop.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdHoleStop")]
        public MeasuredDepthCoord MDHoleStop {
            get {
                return mdHoleStopField;
            } 
            set {
                mdHoleStopField = value;
                NotifyPropertyChanged("MDHoleStop");
            }
        }

        private MeasuredDepthCoord mdHoleStopField; 

        /// <summary>
        /// A pointer to the tubular assembly. 
        /// </summary>
		[Description("A pointer to the tubular assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("tubular")]
        public RefNameString Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private RefNameString tubularField; 

        /// <summary>
        /// Hookload - rotating. 
        /// </summary>
		[Description("Hookload - rotating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("hkldRot")]
        public ForceMeasure HookloadRot {
            get {
                return hkldRotField;
            } 
            set {
                hkldRotField = value;
                NotifyPropertyChanged("HookloadRot");
            }
        }

        private ForceMeasure hkldRotField; 

        /// <summary>
        /// hkldUp-hkldRot. 
        /// </summary>
		[Description("hkldUp-hkldRot.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("overPull")]
        public ForceMeasure OverPull {
            get {
                return overPullField;
            } 
            set {
                overPullField = value;
                NotifyPropertyChanged("OverPull");
            }
        }

        private ForceMeasure overPullField; 

        /// <summary>
        /// hkldRot-hkldDown. 
        /// </summary>
		[Description("hkldRot-hkldDown.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("slackOff")]
        public ForceMeasure SlackOff {
            get {
                return slackOffField;
            } 
            set {
                slackOffField = value;
                NotifyPropertyChanged("SlackOff");
            }
        }

        private ForceMeasure slackOffField; 

        /// <summary>
        /// Hookload - string moving up. 
        /// </summary>
		[Description("Hookload - string moving up.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("hkldUp")]
        public ForceMeasure HookloadUp {
            get {
                return hkldUpField;
            } 
            set {
                hkldUpField = value;
                NotifyPropertyChanged("HookloadUp");
            }
        }

        private ForceMeasure hkldUpField; 

        /// <summary>
        /// Hookload - string moving down. 
        /// </summary>
		[Description("Hookload - string moving down.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("hkldDn")]
        public ForceMeasure HookloadDown {
            get {
                return hkldDnField;
            } 
            set {
                hkldDnField = value;
                NotifyPropertyChanged("HookloadDown");
            }
        }

        private ForceMeasure hkldDnField; 

        /// <summary>
        /// Average Torque - on bottom. 
        /// </summary>
		[Description("Average Torque - on bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqOnBotAv")]
        public MomentOfForceMeasure TorqueOnBotAverage {
            get {
                return tqOnBotAvField;
            } 
            set {
                tqOnBotAvField = value;
                NotifyPropertyChanged("TorqueOnBotAverage");
            }
        }

        private MomentOfForceMeasure tqOnBotAvField; 

        /// <summary>
        /// Maximum torque - on bottom. 
        /// </summary>
		[Description("Maximum torque - on bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqOnBotMx")]
        public MomentOfForceMeasure TorqueOnBotMax {
            get {
                return tqOnBotMxField;
            } 
            set {
                tqOnBotMxField = value;
                NotifyPropertyChanged("TorqueOnBotMax");
            }
        }

        private MomentOfForceMeasure tqOnBotMxField; 

        /// <summary>
        /// Minimum torque - on bottom. 
        /// </summary>
		[Description("Minimum torque - on bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqOnBotMn")]
        public MomentOfForceMeasure TorqueOnBotMin {
            get {
                return tqOnBotMnField;
            } 
            set {
                tqOnBotMnField = value;
                NotifyPropertyChanged("TorqueOnBotMin");
            }
        }

        private MomentOfForceMeasure tqOnBotMnField; 

        /// <summary>
        /// Average torque - off bottom. 
        /// </summary>
		[Description("Average torque - off bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqOffBotAv")]
        public MomentOfForceMeasure TorqueOffBotAverage {
            get {
                return tqOffBotAvField;
            } 
            set {
                tqOffBotAvField = value;
                NotifyPropertyChanged("TorqueOffBotAverage");
            }
        }

        private MomentOfForceMeasure tqOffBotAvField; 

        /// <summary>
        /// Average torque - downhole. 
        /// </summary>
		[Description("Average torque - downhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqDhAv")]
        public MomentOfForceMeasure TorqueDownholeAverage {
            get {
                return tqDhAvField;
            } 
            set {
                tqDhAvField = value;
                NotifyPropertyChanged("TorqueDownholeAverage");
            }
        }

        private MomentOfForceMeasure tqDhAvField; 

        /// <summary>
        /// Weight above jars. 
        /// </summary>
		[Description("Weight above jars.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("wtAboveJar")]
        public ForceMeasure WeightAboveJar {
            get {
                return wtAboveJarField;
            } 
            set {
                wtAboveJarField = value;
                NotifyPropertyChanged("WeightAboveJar");
            }
        }

        private ForceMeasure wtAboveJarField; 

        /// <summary>
        /// Weight below jars. 
        /// </summary>
		[Description("Weight below jars.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("wtBelowJar")]
        public ForceMeasure WeightBelowJar {
            get {
                return wtBelowJarField;
            } 
            set {
                wtBelowJarField = value;
                NotifyPropertyChanged("WeightBelowJar");
            }
        }

        private ForceMeasure wtBelowJarField; 

        /// <summary>
        /// Mud density. 
        /// </summary>
		[Description("Mud density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("wtMud")]
        public DensityMeasure WeightMud {
            get {
                return wtMudField;
            } 
            set {
                wtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private DensityMeasure wtMudField; 

        /// <summary>
        /// Pump flow rate. 
        /// </summary>
		[Description("Pump flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowratePump")]
        public VolumeFlowRateMeasure FlowratePump {
            get {
                return flowratePumpField;
            } 
            set {
                flowratePumpField = value;
                NotifyPropertyChanged("FlowratePump");
            }
        }

        private VolumeFlowRateMeasure flowratePumpField; 

        /// <summary>
        /// Bit hydraulic. 
        /// </summary>
		[Description("Bit hydraulic.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "powerMeasure")]
		[XmlElement("powBit")]
        public PowerMeasure PowBit {
            get {
                return powBitField;
            } 
            set {
                powBitField = value;
                NotifyPropertyChanged("PowBit");
            }
        }

        private PowerMeasure powBitField; 

        /// <summary>
        /// Bit nozzle average velocity. 
        /// </summary>
		[Description("Bit nozzle average velocity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("velNozzleAv")]
        public VelocityMeasure VelNozzleAverage {
            get {
                return velNozzleAvField;
            } 
            set {
                velNozzleAvField = value;
                NotifyPropertyChanged("VelNozzleAverage");
            }
        }

        private VelocityMeasure velNozzleAvField; 

        /// <summary>
        /// Pressure drop in bit. 
        /// </summary>
		[Description("Pressure drop in bit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presDropBit")]
        public PressureMeasure PresDropBit {
            get {
                return presDropBitField;
            } 
            set {
                presDropBitField = value;
                NotifyPropertyChanged("PresDropBit");
            }
        }

        private PressureMeasure presDropBitField; 

        /// <summary>
        /// Time spent on hold from start of bit run. 
        /// </summary>
		[Description("Time spent on hold from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("cTimHold")]
        public TimeMeasure CTimHold {
            get {
                return cTimHoldField;
            } 
            set {
                cTimHoldField = value;
                NotifyPropertyChanged("CTimHold");
            }
        }

        private TimeMeasure cTimHoldField; 

        /// <summary>
        /// Time spent steering from start of bit run. 
        /// </summary>
		[Description("Time spent steering from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("cTimSteering")]
        public TimeMeasure CTimSteering {
            get {
                return cTimSteeringField;
            } 
            set {
                cTimSteeringField = value;
                NotifyPropertyChanged("CTimSteering");
            }
        }

        private TimeMeasure cTimSteeringField; 

        /// <summary>
        /// Time spent rotary drilling from start of bit run. 
        /// </summary>
		[Description("Time spent rotary drilling from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("cTimDrillRot")]
        public TimeMeasure CTimDrillRot {
            get {
                return cTimDrillRotField;
            } 
            set {
                cTimDrillRotField = value;
                NotifyPropertyChanged("CTimDrillRot");
            }
        }

        private TimeMeasure cTimDrillRotField; 

        /// <summary>
        /// Time spent slide drilling from start of bit run. 
        /// </summary>
		[Description("Time spent slide drilling from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("cTimDrillSlid")]
        public TimeMeasure CTimDrillSlid {
            get {
                return cTimDrillSlidField;
            } 
            set {
                cTimDrillSlidField = value;
                NotifyPropertyChanged("CTimDrillSlid");
            }
        }

        private TimeMeasure cTimDrillSlidField; 

        /// <summary>
        /// Time spent circulating from start of bit run. 
        /// </summary>
		[Description("Time spent circulating from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("cTimCirc")]
        public TimeMeasure CTimCirc {
            get {
                return cTimCircField;
            } 
            set {
                cTimCircField = value;
                NotifyPropertyChanged("CTimCirc");
            }
        }

        private TimeMeasure cTimCircField; 

        /// <summary>
        /// Time spent reaming from start of bit run. 
        /// </summary>
		[Description("Time spent reaming from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("cTimReam")]
        public TimeMeasure CTimReam {
            get {
                return cTimReamField;
            } 
            set {
                cTimReamField = value;
                NotifyPropertyChanged("CTimReam");
            }
        }

        private TimeMeasure cTimReamField; 

        /// <summary>
        /// Distance drilled - rotating. 
        /// </summary>
		[Description("Distance drilled - rotating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distDrillRot")]
        public LengthMeasure DistDrillRot {
            get {
                return distDrillRotField;
            } 
            set {
                distDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure distDrillRotField; 

        /// <summary>
        /// Distance drilled - sliding 
        /// </summary>
		[Description("Distance drilled - sliding")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distDrillSlid")]
        public LengthMeasure DistDrillSlid {
            get {
                return distDrillSlidField;
            } 
            set {
                distDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure distDrillSlidField; 

        /// <summary>
        /// Distance reamed. 
        /// </summary>
		[Description("Distance reamed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distReam")]
        public LengthMeasure DistReam {
            get {
                return distReamField;
            } 
            set {
                distReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure distReamField; 

        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly. 
        /// </summary>
		[Description("Distance covered while holding angle with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distHold")]
        public LengthMeasure DistHold {
            get {
                return distHoldField;
            } 
            set {
                distHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure distHoldField; 

        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly. 
        /// </summary>
		[Description("Distance covered while actively steering with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distSteering")]
        public LengthMeasure DistSteering {
            get {
                return distSteeringField;
            } 
            set {
                distSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure distSteeringField; 

        /// <summary>
        /// Average turn rate (commonly in rpm) through Interval. 
        /// </summary>
		[Description("Average turn rate (commonly in rpm) through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("rpmAv")]
        public AnglePerTimeMeasure RpmAverage {
            get {
                return rpmAvField;
            } 
            set {
                rpmAvField = value;
                NotifyPropertyChanged("RpmAverage");
            }
        }

        private AnglePerTimeMeasure rpmAvField; 

        /// <summary>
        /// Maximum turn rate (commonly in rpm). 
        /// </summary>
		[Description("Maximum turn rate (commonly in rpm).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("rpmMx")]
        public AnglePerTimeMeasure RpmMax {
            get {
                return rpmMxField;
            } 
            set {
                rpmMxField = value;
                NotifyPropertyChanged("RpmMax");
            }
        }

        private AnglePerTimeMeasure rpmMxField; 

        /// <summary>
        /// Minimum turn rate (commonly in rpm). 
        /// </summary>
		[Description("Minimum turn rate (commonly in rpm).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("rpmMn")]
        public AnglePerTimeMeasure RpmMin {
            get {
                return rpmMnField;
            } 
            set {
                rpmMnField = value;
                NotifyPropertyChanged("RpmMin");
            }
        }

        private AnglePerTimeMeasure rpmMnField; 

        /// <summary>
        /// Average turn rate (commonly in rpm) downhole. 
        /// </summary>
		[Description("Average turn rate (commonly in rpm) downhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("rpmAvDh")]
        public AnglePerTimeMeasure RpmAverageDownhole {
            get {
                return rpmAvDhField;
            } 
            set {
                rpmAvDhField = value;
                NotifyPropertyChanged("RpmAverageDownhole");
            }
        }

        private AnglePerTimeMeasure rpmAvDhField; 

        /// <summary>
        /// Average rate of penetration through Interval. 
        /// </summary>
		[Description("Average rate of penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("ropAv")]
        public VelocityMeasure RopAverage {
            get {
                return ropAvField;
            } 
            set {
                ropAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private VelocityMeasure ropAvField; 

        /// <summary>
        /// Maximum rate of penetration through Interval. 
        /// </summary>
		[Description("Maximum rate of penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("ropMx")]
        public VelocityMeasure RopMax {
            get {
                return ropMxField;
            } 
            set {
                ropMxField = value;
                NotifyPropertyChanged("RopMax");
            }
        }

        private VelocityMeasure ropMxField; 

        /// <summary>
        /// Minimum rate of penetration through Interval. 
        /// </summary>
		[Description("Minimum rate of penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("ropMn")]
        public VelocityMeasure RopMin {
            get {
                return ropMnField;
            } 
            set {
                ropMnField = value;
                NotifyPropertyChanged("RopMin");
            }
        }

        private VelocityMeasure ropMnField; 

        /// <summary>
        /// Surface weight on bit - average through interval. 
        /// </summary>
		[Description("Surface weight on bit - average through interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("wobAv")]
        public ForceMeasure WobAverage {
            get {
                return wobAvField;
            } 
            set {
                wobAvField = value;
                NotifyPropertyChanged("WobAverage");
            }
        }

        private ForceMeasure wobAvField; 

        /// <summary>
        /// Weight on bit - maximum. 
        /// </summary>
		[Description("Weight on bit - maximum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("wobMx")]
        public ForceMeasure WobMax {
            get {
                return wobMxField;
            } 
            set {
                wobMxField = value;
                NotifyPropertyChanged("WobMax");
            }
        }

        private ForceMeasure wobMxField; 

        /// <summary>
        /// Weight on bit - minimum. 
        /// </summary>
		[Description("Weight on bit - minimum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("wobMn")]
        public ForceMeasure WobMin {
            get {
                return wobMnField;
            } 
            set {
                wobMnField = value;
                NotifyPropertyChanged("WobMin");
            }
        }

        private ForceMeasure wobMnField; 

        /// <summary>
        /// Weight on bit - average downhole. 
        /// </summary>
		[Description("Weight on bit - average downhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("wobAvDh")]
        public ForceMeasure WobAverageDownhole {
            get {
                return wobAvDhField;
            } 
            set {
                wobAvDhField = value;
                NotifyPropertyChanged("WobAverageDownhole");
            }
        }

        private ForceMeasure wobAvDhField; 

        /// <summary>
        /// Reason for trip. 
        /// </summary>
		[StringLength(4000)]
        [Description("Reason for trip.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("reasonTrip")]
        public string ReasonTrip {
            get {
                return reasonTripField;
            } 
            set {
                reasonTripField = value;
                NotifyPropertyChanged("ReasonTrip");
            }
        }

        private string reasonTripField; 

        /// <summary>
        /// Objective of bottom hole assembly. 
        /// </summary>
		[StringLength(4000)]
        [Description("Objective of bottom hole assembly.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("objectiveBha")]
        public string ObjectiveBha {
            get {
                return objectiveBhaField;
            } 
            set {
                objectiveBhaField = value;
                NotifyPropertyChanged("ObjectiveBha");
            }
        }

        private string objectiveBhaField; 

        /// <summary>
        /// Azimuth at start measured depth. 
        /// </summary>
		[Description("Azimuth at start measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("aziTop")]
        public PlaneAngleMeasure AziTop {
            get {
                return aziTopField;
            } 
            set {
                aziTopField = value;
                NotifyPropertyChanged("AziTop");
            }
        }

        private PlaneAngleMeasure aziTopField; 

        /// <summary>
        /// Azimuth at stop measured depth. 
        /// </summary>
		[Description("Azimuth at stop measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("aziBottom")]
        public PlaneAngleMeasure AziBottom {
            get {
                return aziBottomField;
            } 
            set {
                aziBottomField = value;
                NotifyPropertyChanged("AziBottom");
            }
        }

        private PlaneAngleMeasure aziBottomField; 

        /// <summary>
        /// Inclination at start measured depth. 
        /// </summary>
		[Description("Inclination at start measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("inclStart")]
        public PlaneAngleMeasure InclStart {
            get {
                return inclStartField;
            } 
            set {
                inclStartField = value;
                NotifyPropertyChanged("InclStart");
            }
        }

        private PlaneAngleMeasure inclStartField; 

        /// <summary>
        /// Maximum inclination. 
        /// </summary>
		[Description("Maximum inclination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("inclMx")]
        public PlaneAngleMeasure InclMax {
            get {
                return inclMxField;
            } 
            set {
                inclMxField = value;
                NotifyPropertyChanged("InclMax");
            }
        }

        private PlaneAngleMeasure inclMxField; 

        /// <summary>
        /// Minimum inclination. 
        /// </summary>
		[Description("Minimum inclination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("inclMn")]
        public PlaneAngleMeasure InclMin {
            get {
                return inclMnField;
            } 
            set {
                inclMnField = value;
                NotifyPropertyChanged("InclMin");
            }
        }

        private PlaneAngleMeasure inclMnField; 

        /// <summary>
        /// Inclination at stop measured depth. 
        /// </summary>
		[Description("Inclination at stop measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("inclStop")]
        public PlaneAngleMeasure InclStop {
            get {
                return inclStopField;
            } 
            set {
                inclStopField = value;
                NotifyPropertyChanged("InclStop");
            }
        }

        private PlaneAngleMeasure inclStopField; 

        /// <summary>
        /// Maximum mud temperature downhole during run. 
        /// </summary>
		[Description("Maximum mud temperature downhole during run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempMudDhMx")]
        public ThermodynamicTemperatureMeasure TempMudDownholeMax {
            get {
                return tempMudDhMxField;
            } 
            set {
                tempMudDhMxField = value;
                NotifyPropertyChanged("TempMudDownholeMax");
            }
        }

        private ThermodynamicTemperatureMeasure tempMudDhMxField; 

        /// <summary>
        /// Average pump pressure. 
        /// </summary>
		[Description("Average pump pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presPumpAv")]
        public PressureMeasure PresPumpAverage {
            get {
                return presPumpAvField;
            } 
            set {
                presPumpAvField = value;
                NotifyPropertyChanged("PresPumpAverage");
            }
        }

        private PressureMeasure presPumpAvField; 

        /// <summary>
        /// Flow rate at bit. 
        /// </summary>
		[Description("Flow rate at bit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateBit")]
        public VolumeFlowRateMeasure FlowrateBit {
            get {
                return flowrateBitField;
            } 
            set {
                flowrateBitField = value;
                NotifyPropertyChanged("FlowrateBit");
            }
        }

        private VolumeFlowRateMeasure flowrateBitField; 

        /// <summary>
        /// The class of the drilling fluid.
        /// </summary>
		[Description("The class of the drilling fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "MudClass")]
		[XmlElement("mudClass")]
        public MudClass? MudClass {
            get {
                return mudClassField;
            } 
            set {
                mudClassField = value;
                 this.MudClassSpecified = true;
                NotifyPropertyChanged("MudClass");
            }
        }

        private MudClass? mudClassField; 

        /// <summary>
        /// mudClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MudClassSpecified {
            get {
                return mudClassSpecifiedField;
            } 
            set {
                mudClassSpecifiedField = value;
                NotifyPropertyChanged("MudClassSpecified");
            }
        }

        private bool mudClassSpecifiedField; 

        /// <summary>
        /// Mud Subtype at event occurrence.
        /// </summary>
		[Description("Mud Subtype at event occurrence.")]
        [EnergisticsDataTypeAttribute(DataType = "MudSubClass")]
		[XmlElement("mudSubClass")]
        public MudSubClass MudSubClass {
            get {
                return mudSubClassField;
            } 
            set {
                mudSubClassField = value;
                 this.MudSubClassSpecified = true;
                NotifyPropertyChanged("MudSubClass");
            }
        }

        private MudSubClass mudSubClassField; 

        /// <summary>
        /// mudSubClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MudSubClassSpecified {
            get {
                return mudSubClassSpecifiedField;
            } 
            set {
                mudSubClassSpecifiedField = value;
                NotifyPropertyChanged("MudSubClassSpecified");
            }
        }

        private bool mudSubClassSpecifiedField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Wellbore Geometry Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wbGeometry", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Wellbore Geometry Component Schema ")]
    public partial class WellboreGeometry : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Time report generated. 
        /// </summary>
		[Required]
        [Description("Time report generated.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimReport")]
        public Timestamp? DateTimeReport {
            get {
                return dTimReportField;
            } 
            set {
                dTimReportField = value;
                NotifyPropertyChanged("DateTimeReport");
            }
        }

        private Timestamp? dTimReportField; 

        /// <summary>
        /// Measured depth at bottom. 
        /// </summary>
		[Description("Measured depth at bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// Air gap. 
        /// </summary>
		[Description("Air gap.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("gapAir")]
        public LengthMeasure GapAir {
            get {
                return gapAirField;
            } 
            set {
                gapAirField = value;
                NotifyPropertyChanged("GapAir");
            }
        }

        private LengthMeasure gapAirField; 

        /// <summary>
        /// Water depth. 
        /// </summary>
		[Description("Water depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("depthWaterMean")]
        public LengthMeasure DepthWaterMean {
            get {
                return depthWaterMeanField;
            } 
            set {
                depthWaterMeanField = value;
                NotifyPropertyChanged("DepthWaterMean");
            }
        }

        private LengthMeasure depthWaterMeanField; 

        /// <summary>
        /// Wellbore geometry section object. 
        /// </summary>
		[Description("Wellbore geometry section object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wbGeometrySection")]
		[XmlElement("wbGeometrySection")]
        public List<WellboreGeometrySection> WellboreGeometrySection {
            get {
                return wbGeometrySectionField;
            } 
            set {
                wbGeometrySectionField = value;
                NotifyPropertyChanged("WellboreGeometrySection");
            }
        }

         /// <summary>
         /// bool to indicate if WellboreGeometrySection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellboreGeometrySectionSpecified
         {
             get {
             if(wbGeometrySectionField!=null)
                 return wbGeometrySectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellboreGeometrySection> wbGeometrySectionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Day Cost Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dayCost", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Day Cost Component Schema ")]
    public partial class DayCost : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// AFE number that this cost item applies to. 
        /// </summary>
		[StringLength(32)]
        [Description("AFE number that this cost item applies to.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("numAFE")]
        public string NumAFE {
            get {
                return numAFEField;
            } 
            set {
                numAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private string numAFEField; 

        /// <summary>
        /// Cost group code. 
        /// </summary>
		[StringLength(16)]
        [Description("Cost group code.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("costGroup")]
        public string CostGroup {
            get {
                return costGroupField;
            } 
            set {
                costGroupField = value;
                NotifyPropertyChanged("CostGroup");
            }
        }

        private string costGroupField; 

        /// <summary>
        /// Cost class code. 
        /// </summary>
		[Required]
        [StringLength(16)]
        [Description("Cost class code.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("costClass")]
        public string CostClass {
            get {
                return costClassField;
            } 
            set {
                costClassField = value;
                NotifyPropertyChanged("CostClass");
            }
        }

        private string costClassField; 

        /// <summary>
        /// Cost code. 
        /// </summary>
		[Required]
        [StringLength(16)]
        [Description("Cost code.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("costCode")]
        public string CostCode {
            get {
                return costCodeField;
            } 
            set {
                costCodeField = value;
                NotifyPropertyChanged("CostCode");
            }
        }

        private string costCodeField; 

        /// <summary>
        /// Cost subcode. 
        /// </summary>
		[StringLength(16)]
        [Description("Cost subcode.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("costSubCode")]
        public string CostSubCode {
            get {
                return costSubCodeField;
            } 
            set {
                costSubCodeField = value;
                NotifyPropertyChanged("CostSubCode");
            }
        }

        private string costSubCodeField; 

        /// <summary>
        /// Description of cost item. 
        /// </summary>
		[StringLength(64)]
        [Description("Description of cost item.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("costItemDescription")]
        public string CostItemDescription {
            get {
                return costItemDescriptionField;
            } 
            set {
                costItemDescriptionField = value;
                NotifyPropertyChanged("CostItemDescription");
            }
        }

        private string costItemDescriptionField; 

        /// <summary>
        /// Cost per cost item, assume same currency.
        /// </summary>
		[Description("Cost per cost item, assume same currency.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cost")]
		[XmlElement("costPerItem")]
        public Cost CostPerItem {
            get {
                return costPerItemField;
            } 
            set {
                costPerItemField = value;
                NotifyPropertyChanged("CostPerItem");
            }
        }

        private Cost costPerItemField; 

        /// <summary>
        /// The kind of cost item specified (e.g., rig dayrate, joints casing). 
        /// </summary>
		[StringLength(24)]
        [Description("The kind of cost item specified (e.g., rig dayrate, joints casing).")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
		[XmlElement("itemKind")]
        public string ItemKind {
            get {
                return itemKindField;
            } 
            set {
                itemKindField = value;
                NotifyPropertyChanged("ItemKind");
            }
        }

        private string itemKindField; 

        /// <summary>
        /// Size of one cost item. 
        /// </summary>
		[Description("Size of one cost item.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("itemSize")]
        public double? ItemSize {
            get {
                return itemSizeField;
            } 
            set {
                itemSizeField = value;
                 this.ItemSizeSpecified = true;
                NotifyPropertyChanged("ItemSize");
            }
        }

        private double? itemSizeField; 

        /// <summary>
        /// itemSizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemSizeSpecified {
            get {
                return itemSizeSpecifiedField;
            } 
            set {
                itemSizeSpecifiedField = value;
                NotifyPropertyChanged("ItemSizeSpecified");
            }
        }

        private bool itemSizeSpecifiedField; 

        /// <summary>
        /// Number of cost items used that day e.g. 1 rig dayrate, 30 joints casing. 
        /// </summary>
		[Description("Number of cost items used that day e.g. 1 rig dayrate, 30 joints casing.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("qtyItem")]
        public short? QtyItem {
            get {
                return qtyItemField;
            } 
            set {
                qtyItemField = value;
                 this.QtyItemSpecified = true;
                NotifyPropertyChanged("QtyItem");
            }
        }

        private short? qtyItemField; 

        /// <summary>
        /// qtyItemSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyItemSpecified {
            get {
                return qtyItemSpecifiedField;
            } 
            set {
                qtyItemSpecifiedField = value;
                NotifyPropertyChanged("QtyItemSpecified");
            }
        }

        private bool qtyItemSpecifiedField; 

        /// <summary>
        /// Cost for the item for this record. 
        /// </summary>
		[Required]
        [Description("Cost for the item for this record.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cost")]
		[XmlElement("costAmount")]
        public Cost CostAmount {
            get {
                return costAmountField;
            } 
            set {
                costAmountField = value;
                NotifyPropertyChanged("CostAmount");
            }
        }

        private Cost costAmountField; 

        /// <summary>
        /// Invoice number for cost item, bill sent to Operator. 
        /// </summary>
		[StringLength(32)]
        [Description("Invoice number for cost item, bill sent to Operator.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("numInvoice")]
        public string NumInvoice {
            get {
                return numInvoiceField;
            } 
            set {
                numInvoiceField = value;
                NotifyPropertyChanged("NumInvoice");
            }
        }

        private string numInvoiceField; 

        /// <summary>
        /// Purchase order number, provided by Operator. 
        /// </summary>
		[StringLength(32)]
        [Description("Purchase order number, provided by Operator.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("numPO")]
        public string NumPO {
            get {
                return numPOField;
            } 
            set {
                numPOField = value;
                NotifyPropertyChanged("NumPO");
            }
        }

        private string numPOField; 

        /// <summary>
        /// Field Ticket number, issued by service company on location. 
        /// </summary>
		[StringLength(32)]
        [Description("Field Ticket number, issued by service company on location.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("numTicket")]
        public string NumTicket {
            get {
                return numTicketField;
            } 
            set {
                numTicketField = value;
                NotifyPropertyChanged("NumTicket");
            }
        }

        private string numTicketField; 

        /// <summary>
        /// Is this item carried from day to day? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is this item carried from day to day? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isCarryOver")]
        public bool? IsCarryOver {
            get {
                return isCarryOverField;
            } 
            set {
                isCarryOverField = value;
                 this.IsCarryOverSpecified = true;
                NotifyPropertyChanged("IsCarryOver");
            }
        }

        private bool? isCarryOverField; 

        /// <summary>
        /// isCarryOverSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsCarryOverSpecified {
            get {
                return isCarryOverSpecifiedField;
            } 
            set {
                isCarryOverSpecifiedField = value;
                NotifyPropertyChanged("IsCarryOverSpecified");
            }
        }

        private bool isCarryOverSpecifiedField; 

        /// <summary>
        /// Is this item a rental? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is this item a rental? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isRental")]
        public bool? IsRental {
            get {
                return isRentalField;
            } 
            set {
                isRentalField = value;
                 this.IsRentalSpecified = true;
                NotifyPropertyChanged("IsRental");
            }
        }

        private bool? isRentalField; 

        /// <summary>
        /// isRentalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsRentalSpecified {
            get {
                return isRentalSpecifiedField;
            } 
            set {
                isRentalSpecifiedField = value;
                NotifyPropertyChanged("IsRentalSpecified");
            }
        }

        private bool isRentalSpecifiedField; 

        /// <summary>
        /// An identification tag for the item. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the item. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_nameTag")]
		[XmlElement("nameTag")]
        public List<NameTag> NameTag {
            get {
                return nameTagField;
            } 
            set {
                nameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(nameTagField!=null)
                 return nameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> nameTagField; 

        /// <summary>
        /// Serial number. 
        /// </summary>
		[StringLength(32)]
        [Description("Serial number.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("numSerial")]
        public string NumSerial {
            get {
                return numSerialField;
            } 
            set {
                numSerialField = value;
                NotifyPropertyChanged("NumSerial");
            }
        }

        private string numSerialField; 

        /// <summary>
        /// Name of vendor. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of vendor.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("nameVendor")]
        public string NameVendor {
            get {
                return nameVendorField;
            } 
            set {
                nameVendorField = value;
                NotifyPropertyChanged("NameVendor");
            }
        }

        private string nameVendorField; 

        /// <summary>
        /// Vendor number. 
        /// </summary>
		[StringLength(16)]
        [Description("Vendor number.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("numVendor")]
        public string NumVendor {
            get {
                return numVendorField;
            } 
            set {
                numVendorField = value;
                NotifyPropertyChanged("NumVendor");
            }
        }

        private string numVendorField; 

        /// <summary>
        /// Name of pool/reservoir that this cost item can be accounted to. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of pool/reservoir that this cost item can be accounted to.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("pool")]
        public string Pool {
            get {
                return poolField;
            } 
            set {
                poolField = value;
                NotifyPropertyChanged("Pool");
            }
        }

        private string poolField; 

        /// <summary>
        /// Is this an estimated cost? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is this an estimated cost? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("estimated")]
        public bool? Estimated {
            get {
                return estimatedField;
            } 
            set {
                estimatedField = value;
                 this.EstimatedSpecified = true;
                NotifyPropertyChanged("Estimated");
            }
        }

        private bool? estimatedField; 

        /// <summary>
        /// estimatedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EstimatedSpecified {
            get {
                return estimatedSpecifiedField;
            } 
            set {
                estimatedSpecifiedField = value;
                NotifyPropertyChanged("EstimatedSpecified");
            }
        }

        private bool estimatedSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - fluids component schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluid", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - fluids component schema ")]
    public partial class Fluid : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Description for the type of fluid. 
        /// </summary>
		[StringLength(32)]
        [Description("Description for the type of fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// Sample location. 
        /// </summary>
		[StringLength(32)]
        [Description("Sample location.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("locationSample")]
        public string LocationSample {
            get {
                return locationSampleField;
            } 
            set {
                locationSampleField = value;
                NotifyPropertyChanged("LocationSample");
            }
        }

        private string locationSampleField; 

        /// <summary>
        /// The time when fluid readings were recorded. 
        /// </summary>
		[Description("The time when fluid readings were recorded.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// The measured depth where the fluid readings were recorded.
        /// </summary>
		[Description("The measured depth where the fluid readings were recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// The true vertical depth where the fluid readings were recorded.
        /// </summary>
		[Description("The true vertical depth where the fluid readings were recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// Maximum pressure rating of the blow out preventer.
        /// </summary>
		[Description("Maximum pressure rating of the blow out preventer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presBopRating")]
        public PressureMeasure PresBopRating {
            get {
                return presBopRatingField;
            } 
            set {
                presBopRatingField = value;
                NotifyPropertyChanged("PresBopRating");
            }
        }

        private PressureMeasure presBopRatingField; 

        /// <summary>
        /// The class of the drilling fluid.
        /// </summary>
		[Description("The class of the drilling fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "MudClass")]
		[XmlElement("mudClass")]
        public MudClass? MudClass {
            get {
                return mudClassField;
            } 
            set {
                mudClassField = value;
                 this.MudClassSpecified = true;
                NotifyPropertyChanged("MudClass");
            }
        }

        private MudClass? mudClassField; 

        /// <summary>
        /// mudClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MudClassSpecified {
            get {
                return mudClassSpecifiedField;
            } 
            set {
                mudClassSpecifiedField = value;
                NotifyPropertyChanged("MudClassSpecified");
            }
        }

        private bool mudClassSpecifiedField; 

        /// <summary>
        /// Fluid density. 
        /// </summary>
		[Description("Fluid density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// Funnel viscosity in seconds. 
        /// </summary>
		[Description("Funnel viscosity in seconds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("visFunnel")]
        public TimeMeasure VisFunnel {
            get {
                return visFunnelField;
            } 
            set {
                visFunnelField = value;
                NotifyPropertyChanged("VisFunnel");
            }
        }

        private TimeMeasure visFunnelField; 

        /// <summary>
        /// Funnel viscosity temperature. 
        /// </summary>
		[Description("Funnel viscosity temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempVis")]
        public ThermodynamicTemperatureMeasure TempVis {
            get {
                return tempVisField;
            } 
            set {
                tempVisField = value;
                NotifyPropertyChanged("TempVis");
            }
        }

        private ThermodynamicTemperatureMeasure tempVisField; 

        /// <summary>
        /// Plastic viscosity. 
        /// </summary>
		[Description("Plastic viscosity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("pv")]
        public DynamicViscosityMeasure PV {
            get {
                return pvField;
            } 
            set {
                pvField = value;
                NotifyPropertyChanged("PV");
            }
        }

        private DynamicViscosityMeasure pvField; 

        /// <summary>
        /// Yield point (Bingham and Herschel Bulkley models). 
        /// </summary>
		[Description("Yield point (Bingham and Herschel Bulkley models).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("yp")]
        public PressureMeasure YP {
            get {
                return ypField;
            } 
            set {
                ypField = value;
                NotifyPropertyChanged("YP");
            }
        }

        private PressureMeasure ypField; 

        /// <summary>
        /// 10 second gels. 
        /// </summary>
		[Description("10 second gels.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("gel10Sec")]
        public PressureMeasure Gel10Sec {
            get {
                return gel10SecField;
            } 
            set {
                gel10SecField = value;
                NotifyPropertyChanged("Gel10Sec");
            }
        }

        private PressureMeasure gel10SecField; 

        /// <summary>
        /// 10 minute gels. 
        /// </summary>
		[Description("10 minute gels.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("gel10Min")]
        public PressureMeasure Gel10Min {
            get {
                return gel10MinField;
            } 
            set {
                gel10MinField = value;
                NotifyPropertyChanged("Gel10Min");
            }
        }

        private PressureMeasure gel10MinField; 

        /// <summary>
        /// 30 minute gels. 
        /// </summary>
		[Description("30 minute gels.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("gel30Min")]
        public PressureMeasure Gel30Min {
            get {
                return gel30MinField;
            } 
            set {
                gel30MinField = value;
                NotifyPropertyChanged("Gel30Min");
            }
        }

        private PressureMeasure gel30MinField; 

        /// <summary>
        /// Filter cake thickness at low (normal) temperature and pressure. 
        /// </summary>
		[Description("Filter cake thickness at low (normal) temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("filterCakeLtlp")]
        public LengthMeasure FilterCakeLtlp {
            get {
                return filterCakeLtlpField;
            } 
            set {
                filterCakeLtlpField = value;
                NotifyPropertyChanged("FilterCakeLtlp");
            }
        }

        private LengthMeasure filterCakeLtlpField; 

        /// <summary>
        /// API water loss (low temperature and pressure mud filtrate measurement) (volume per 30min). 
        /// </summary>
		[Description("API water loss (low temperature and pressure mud filtrate measurement) (volume per 30min).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("filtrateLtlp")]
        public VolumeMeasure FiltrateLtlp {
            get {
                return filtrateLtlpField;
            } 
            set {
                filtrateLtlpField = value;
                NotifyPropertyChanged("FiltrateLtlp");
            }
        }

        private VolumeMeasure filtrateLtlpField; 

        /// <summary>
        /// High temperature high pressure (HTHP) temperature. 
        /// </summary>
		[Description("High temperature high pressure (HTHP) temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempHthp")]
        public ThermodynamicTemperatureMeasure TempHthp {
            get {
                return tempHthpField;
            } 
            set {
                tempHthpField = value;
                NotifyPropertyChanged("TempHthp");
            }
        }

        private ThermodynamicTemperatureMeasure tempHthpField; 

        /// <summary>
        /// High temperature high pressure (HTHP) pressure. 
        /// </summary>
		[Description("High temperature high pressure (HTHP) pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presHthp")]
        public PressureMeasure PresHthp {
            get {
                return presHthpField;
            } 
            set {
                presHthpField = value;
                NotifyPropertyChanged("PresHthp");
            }
        }

        private PressureMeasure presHthpField; 

        /// <summary>
        /// High temperature high pressure (HTHP) filtrate (volume per 30min). 
        /// </summary>
		[Description("High temperature high pressure (HTHP) filtrate (volume per 30min).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("filtrateHthp")]
        public VolumeMeasure FiltrateHthp {
            get {
                return filtrateHthpField;
            } 
            set {
                filtrateHthpField = value;
                NotifyPropertyChanged("FiltrateHthp");
            }
        }

        private VolumeMeasure filtrateHthpField; 

        /// <summary>
        /// High temperature high pressure (HTHP) Filter cake thickness. 
        /// </summary>
		[Description("High temperature high pressure (HTHP) Filter cake thickness.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("filterCakeHthp")]
        public LengthMeasure FilterCakeHthp {
            get {
                return filterCakeHthpField;
            } 
            set {
                filterCakeHthpField = value;
                NotifyPropertyChanged("FilterCakeHthp");
            }
        }

        private LengthMeasure filterCakeHthpField; 

        /// <summary>
        /// Solids percentage from retort (commonly in percent). 
        /// </summary>
		[Description("Solids percentage from retort (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("solidsPc")]
        public VolumePerVolumeMeasure SolidsPercent {
            get {
                return solidsPcField;
            } 
            set {
                solidsPcField = value;
                NotifyPropertyChanged("SolidsPercent");
            }
        }

        private VolumePerVolumeMeasure solidsPcField; 

        /// <summary>
        /// Water content (commonly in percent). 
        /// </summary>
		[Description("Water content (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("waterPc")]
        public VolumePerVolumeMeasure WaterPercent {
            get {
                return waterPcField;
            } 
            set {
                waterPcField = value;
                NotifyPropertyChanged("WaterPercent");
            }
        }

        private VolumePerVolumeMeasure waterPcField; 

        /// <summary>
        /// Oil content from retort (commonly in percent). 
        /// </summary>
		[Description("Oil content from retort (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("oilPc")]
        public VolumePerVolumeMeasure OilPercent {
            get {
                return oilPcField;
            } 
            set {
                oilPcField = value;
                NotifyPropertyChanged("OilPercent");
            }
        }

        private VolumePerVolumeMeasure oilPcField; 

        /// <summary>
        /// Sand content (commonly in percent). 
        /// </summary>
		[Description("Sand content (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("sandPc")]
        public VolumePerVolumeMeasure SandPercent {
            get {
                return sandPcField;
            } 
            set {
                sandPcField = value;
                NotifyPropertyChanged("SandPercent");
            }
        }

        private VolumePerVolumeMeasure sandPcField; 

        /// <summary>
        /// Low gravity solids (%). 
        /// </summary>
		[Description("Low gravity solids (%).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("solidsLowGravPc")]
        public VolumePerVolumeMeasure SolidsLowGravPercent {
            get {
                return solidsLowGravPcField;
            } 
            set {
                solidsLowGravPcField = value;
                NotifyPropertyChanged("SolidsLowGravPercent");
            }
        }

        private VolumePerVolumeMeasure solidsLowGravPcField; 

        /// <summary>
        /// Solids content (calculated) (commonly in percent). 
        /// </summary>
		[Description("Solids content (calculated) (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("solidsCalcPc")]
        public VolumePerVolumeMeasure SolidsCalcPercent {
            get {
                return solidsCalcPcField;
            } 
            set {
                solidsCalcPcField = value;
                NotifyPropertyChanged("SolidsCalcPercent");
            }
        }

        private VolumePerVolumeMeasure solidsCalcPcField; 

        /// <summary>
        /// Barite content (commonly in percent). 
        /// </summary>
		[Description("Barite content (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("baritePc")]
        public VolumePerVolumeMeasure BaritePercent {
            get {
                return baritePcField;
            } 
            set {
                baritePcField = value;
                NotifyPropertyChanged("BaritePercent");
            }
        }

        private VolumePerVolumeMeasure baritePcField; 

        /// <summary>
        /// Lost circulation material. 
        /// </summary>
		[Description("Lost circulation material.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("lcm")]
        public DensityMeasure Lcm {
            get {
                return lcmField;
            } 
            set {
                lcmField = value;
                NotifyPropertyChanged("Lcm");
            }
        }

        private DensityMeasure lcmField; 

        /// <summary>
        /// Cation exchange capacity (CEC) of the mud sample as measured by methylene blue titration (MBT). 
        /// </summary>
		[Description("Cation exchange capacity (CEC) of the mud sample as measured by methylene blue titration (MBT).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "equivalentPerMassMeasure")]
		[XmlElement("mbt")]
        public EquivalentPerMassMeasure Mbt {
            get {
                return mbtField;
            } 
            set {
                mbtField = value;
                NotifyPropertyChanged("Mbt");
            }
        }

        private EquivalentPerMassMeasure mbtField; 

        /// <summary>
        /// Mud pH. 
        /// </summary>
		[Description("Mud pH.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("ph")]
        public double? PH {
            get {
                return phField;
            } 
            set {
                phField = value;
                 this.PHSpecified = true;
                NotifyPropertyChanged("PH");
            }
        }

        private double? phField; 

        /// <summary>
        /// phSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PHSpecified {
            get {
                return phSpecifiedField;
            } 
            set {
                phSpecifiedField = value;
                NotifyPropertyChanged("PHSpecified");
            }
        }

        private bool phSpecifiedField; 

        /// <summary>
        /// Mud pH measurement temperature. 
        /// </summary>
		[Description("Mud pH measurement temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempPh")]
        public ThermodynamicTemperatureMeasure TempPH {
            get {
                return tempPhField;
            } 
            set {
                tempPhField = value;
                NotifyPropertyChanged("TempPH");
            }
        }

        private ThermodynamicTemperatureMeasure tempPhField; 

        /// <summary>
        /// Phenolphthalein alkalinity of whole mud. 
        /// </summary>
		[Description("Phenolphthalein alkalinity of whole mud.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("pm")]
        public VolumeMeasure Pm {
            get {
                return pmField;
            } 
            set {
                pmField = value;
                NotifyPropertyChanged("Pm");
            }
        }

        private VolumeMeasure pmField; 

        /// <summary>
        /// Phenolphthalein alkalinity of mud filtrate. 
        /// </summary>
		[Description("Phenolphthalein alkalinity of mud filtrate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("pmFiltrate")]
        public VolumeMeasure PmFiltrate {
            get {
                return pmFiltrateField;
            } 
            set {
                pmFiltrateField = value;
                NotifyPropertyChanged("PmFiltrate");
            }
        }

        private VolumeMeasure pmFiltrateField; 

        /// <summary>
        /// Methyl orange alkalinity of filtrate. 
        /// </summary>
		[Description("Methyl orange alkalinity of filtrate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("mf")]
        public VolumeMeasure Mf {
            get {
                return mfField;
            } 
            set {
                mfField = value;
                NotifyPropertyChanged("Mf");
            }
        }

        private VolumeMeasure mfField; 

        /// <summary>
        /// Mud alkalinity P1 from alternate alkalinity method (volume in ml of 0.02N acid to reach the phenolphthalein endpoint). 
        /// </summary>
		[Description("Mud alkalinity P1 from alternate alkalinity method (volume in ml of 0.02N acid  to reach the phenolphthalein endpoint).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("alkalinityP1")]
        public VolumeMeasure AlkalinityP1 {
            get {
                return alkalinityP1Field;
            } 
            set {
                alkalinityP1Field = value;
                NotifyPropertyChanged("AlkalinityP1");
            }
        }

        private VolumeMeasure alkalinityP1Field; 

        /// <summary>
        /// Mud alkalinity P2 from alternate alkalinity method (volume in ml of 0.02N acid to titrate the reagent mixture to the phenolphthalein endpoint). 
        /// </summary>
		[Description("Mud alkalinity P2 from alternate alkalinity method (volume in ml of 0.02N acid to titrate the reagent mixture to the phenolphthalein endpoint).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("alkalinityP2")]
        public VolumeMeasure AlkalinityP2 {
            get {
                return alkalinityP2Field;
            } 
            set {
                alkalinityP2Field = value;
                NotifyPropertyChanged("AlkalinityP2");
            }
        }

        private VolumeMeasure alkalinityP2Field; 

        /// <summary>
        /// Chloride content. 
        /// </summary>
		[Description("Chloride content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("chloride")]
        public DensityMeasure Chloride {
            get {
                return chlorideField;
            } 
            set {
                chlorideField = value;
                NotifyPropertyChanged("Chloride");
            }
        }

        private DensityMeasure chlorideField; 

        /// <summary>
        /// Calcium content. 
        /// </summary>
		[Description("Calcium content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("calcium")]
        public DensityMeasure Calcium {
            get {
                return calciumField;
            } 
            set {
                calciumField = value;
                NotifyPropertyChanged("Calcium");
            }
        }

        private DensityMeasure calciumField; 

        /// <summary>
        /// Magnesium content. 
        /// </summary>
		[Description("Magnesium content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("magnesium")]
        public DensityMeasure Magnesium {
            get {
                return magnesiumField;
            } 
            set {
                magnesiumField = value;
                NotifyPropertyChanged("Magnesium");
            }
        }

        private DensityMeasure magnesiumField; 

        /// <summary>
        /// Potassium content. 
        /// </summary>
		[Description("Potassium content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("potassium")]
        public DensityMeasure Potassium {
            get {
                return potassiumField;
            } 
            set {
                potassiumField = value;
                NotifyPropertyChanged("Potassium");
            }
        }

        private DensityMeasure potassiumField; 

        /// <summary>
        /// One or more sets of rheometer readings at given temperature and pressure. 
        /// </summary>
		[Description("One or more sets of rheometer readings at given temperature and pressure.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_rheometer")]
		[XmlElement("rheometer")]
        public List<Rheometer> Rheometer {
            get {
                return rheometerField;
            } 
            set {
                rheometerField = value;
                NotifyPropertyChanged("Rheometer");
            }
        }

         /// <summary>
         /// bool to indicate if Rheometer has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RheometerSpecified
         {
             get {
             if(rheometerField!=null)
                 return rheometerField.Count>0?true:false;
             else return false;
             }
         }
        private List<Rheometer> rheometerField; 

        /// <summary>
        /// Brine content (commonly in percent). 
        /// </summary>
		[Description("Brine content (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("brinePc")]
        public VolumePerVolumeMeasure BrinePercent {
            get {
                return brinePcField;
            } 
            set {
                brinePcField = value;
                NotifyPropertyChanged("BrinePercent");
            }
        }

        private VolumePerVolumeMeasure brinePcField; 

        /// <summary>
        /// Lime content. 
        /// </summary>
		[Description("Lime content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("lime")]
        public DensityMeasure Lime {
            get {
                return limeField;
            } 
            set {
                limeField = value;
                NotifyPropertyChanged("Lime");
            }
        }

        private DensityMeasure limeField; 

        /// <summary>
        /// Measurement of the emulsion stability and oil-wetting capability in oil-based muds. 
        /// </summary>
		[Description("Measurement of the emulsion stability and oil-wetting capability in oil-based muds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "electricPotentialMeasure")]
		[XmlElement("electStab")]
        public ElectricPotentialMeasure ElectStab {
            get {
                return electStabField;
            } 
            set {
                electStabField = value;
                NotifyPropertyChanged("ElectStab");
            }
        }

        private ElectricPotentialMeasure electStabField; 

        /// <summary>
        /// Calcium chloride content. 
        /// </summary>
		[Description("Calcium chloride content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("calciumChloride")]
        public DensityMeasure CalciumChloride {
            get {
                return calciumChlorideField;
            } 
            set {
                calciumChlorideField = value;
                NotifyPropertyChanged("CalciumChloride");
            }
        }

        private DensityMeasure calciumChlorideField; 

        /// <summary>
        /// Name of company. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of company.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("company")]
        public string Company {
            get {
                return companyField;
            } 
            set {
                companyField = value;
                NotifyPropertyChanged("Company");
            }
        }

        private string companyField; 

        /// <summary>
        /// Engineer name 
        /// </summary>
		[StringLength(64)]
        [Description("Engineer name")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("engineer")]
        public string Engineer {
            get {
                return engineerField;
            } 
            set {
                engineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private string engineerField; 

        /// <summary>
        /// Average specific gravity of solids. 
        /// </summary>
		[Description("Average specific gravity of solids.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("asg")]
        public double? Asg {
            get {
                return asgField;
            } 
            set {
                asgField = value;
                 this.AsgSpecified = true;
                NotifyPropertyChanged("Asg");
            }
        }

        private double? asgField; 

        /// <summary>
        /// asgSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AsgSpecified {
            get {
                return asgSpecifiedField;
            } 
            set {
                asgSpecifiedField = value;
                NotifyPropertyChanged("AsgSpecified");
            }
        }

        private bool asgSpecifiedField; 

        /// <summary>
        /// Solids high gravity (commonly in percent). 
        /// </summary>
		[Description("Solids high gravity (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("solidsHiGravPc")]
        public VolumePerVolumeMeasure SolidsHiGravPercent {
            get {
                return solidsHiGravPcField;
            } 
            set {
                solidsHiGravPcField = value;
                NotifyPropertyChanged("SolidsHiGravPercent");
            }
        }

        private VolumePerVolumeMeasure solidsHiGravPcField; 

        /// <summary>
        /// Polymers present in mud system. 
        /// </summary>
		[Description("Polymers present in mud system.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("polymer")]
        public VolumePerVolumeMeasure Polymer {
            get {
                return polymerField;
            } 
            set {
                polymerField = value;
                NotifyPropertyChanged("Polymer");
            }
        }

        private VolumePerVolumeMeasure polymerField; 

        /// <summary>
        /// Type of polymers present in mud system. 
        /// </summary>
		[StringLength(32)]
        [Description("Type of polymers present in mud system.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("polyType")]
        public string PolyType {
            get {
                return polyTypeField;
            } 
            set {
                polyTypeField = value;
                NotifyPropertyChanged("PolyType");
            }
        }

        private string polyTypeField; 

        /// <summary>
        /// Solids corrected for Chloride content (commonly in percent). 
        /// </summary>
		[Description("Solids corrected for Chloride content (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("solCorPc")]
        public VolumePerVolumeMeasure SolCorPercent {
            get {
                return solCorPcField;
            } 
            set {
                solCorPcField = value;
                NotifyPropertyChanged("SolCorPercent");
            }
        }

        private VolumePerVolumeMeasure solCorPcField; 

        /// <summary>
        /// Oil on Cuttings. 
        /// </summary>
		[Description("Oil on Cuttings.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("oilCtg")]
        public MassConcentrationMeasure OilCtg {
            get {
                return oilCtgField;
            } 
            set {
                oilCtgField = value;
                NotifyPropertyChanged("OilCtg");
            }
        }

        private MassConcentrationMeasure oilCtgField; 

        /// <summary>
        /// Total calcium hardness. 
        /// </summary>
		[Description("Total calcium hardness.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("hardnessCa")]
        public MassConcentrationMeasure HardnessCA {
            get {
                return hardnessCaField;
            } 
            set {
                hardnessCaField = value;
                NotifyPropertyChanged("HardnessCA");
            }
        }

        private MassConcentrationMeasure hardnessCaField; 

        /// <summary>
        /// Sulfide content. 
        /// </summary>
		[Description("Sulfide content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("sulfide")]
        public DensityMeasure Sulfide {
            get {
                return sulfideField;
            } 
            set {
                sulfideField = value;
                NotifyPropertyChanged("Sulfide");
            }
        }

        private DensityMeasure sulfideField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Rheometer Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_rheometer", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Rheometer Component Schema ")]
    public partial class Rheometer : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Rheometer temperature. 
        /// </summary>
		[Description("Rheometer temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempRheom")]
        public ThermodynamicTemperatureMeasure TempRheom {
            get {
                return tempRheomField;
            } 
            set {
                tempRheomField = value;
                NotifyPropertyChanged("TempRheom");
            }
        }

        private ThermodynamicTemperatureMeasure tempRheomField; 

        /// <summary>
        /// Rheometer pressure. 
        /// </summary>
		[Description("Rheometer pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presRheom")]
        public PressureMeasure PresRheom {
            get {
                return presRheomField;
            } 
            set {
                presRheomField = value;
                NotifyPropertyChanged("PresRheom");
            }
        }

        private PressureMeasure presRheomField; 

        /// <summary>
        /// 3 RPM viscometer reading 
        /// </summary>
		[Description("3 RPM viscometer reading")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("vis3Rpm")]
        public double? Vis3Rpm {
            get {
                return vis3RpmField;
            } 
            set {
                vis3RpmField = value;
                 this.Vis3RpmSpecified = true;
                NotifyPropertyChanged("Vis3Rpm");
            }
        }

        private double? vis3RpmField; 

        /// <summary>
        /// vis3RpmSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool Vis3RpmSpecified {
            get {
                return vis3RpmSpecifiedField;
            } 
            set {
                vis3RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis3RpmSpecified");
            }
        }

        private bool vis3RpmSpecifiedField; 

        /// <summary>
        /// 6 RPM viscometer reading. 
        /// </summary>
		[Description("6 RPM viscometer reading.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("vis6Rpm")]
        public double? Vis6Rpm {
            get {
                return vis6RpmField;
            } 
            set {
                vis6RpmField = value;
                 this.Vis6RpmSpecified = true;
                NotifyPropertyChanged("Vis6Rpm");
            }
        }

        private double? vis6RpmField; 

        /// <summary>
        /// vis6RpmSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool Vis6RpmSpecified {
            get {
                return vis6RpmSpecifiedField;
            } 
            set {
                vis6RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis6RpmSpecified");
            }
        }

        private bool vis6RpmSpecifiedField; 

        /// <summary>
        /// 100 RPM viscometer reading. 
        /// </summary>
		[Description("100 RPM viscometer reading.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("vis100Rpm")]
        public double? Vis100Rpm {
            get {
                return vis100RpmField;
            } 
            set {
                vis100RpmField = value;
                 this.Vis100RpmSpecified = true;
                NotifyPropertyChanged("Vis100Rpm");
            }
        }

        private double? vis100RpmField; 

        /// <summary>
        /// vis100RpmSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool Vis100RpmSpecified {
            get {
                return vis100RpmSpecifiedField;
            } 
            set {
                vis100RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis100RpmSpecified");
            }
        }

        private bool vis100RpmSpecifiedField; 

        /// <summary>
        /// 200 RPM viscometer reading. 
        /// </summary>
		[Description("200 RPM viscometer reading.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("vis200Rpm")]
        public double? Vis200Rpm {
            get {
                return vis200RpmField;
            } 
            set {
                vis200RpmField = value;
                 this.Vis200RpmSpecified = true;
                NotifyPropertyChanged("Vis200Rpm");
            }
        }

        private double? vis200RpmField; 

        /// <summary>
        /// vis200RpmSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool Vis200RpmSpecified {
            get {
                return vis200RpmSpecifiedField;
            } 
            set {
                vis200RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis200RpmSpecified");
            }
        }

        private bool vis200RpmSpecifiedField; 

        /// <summary>
        /// 300 RPM viscometer reading. 
        /// </summary>
		[Description("300 RPM viscometer reading.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("vis300Rpm")]
        public double? Vis300Rpm {
            get {
                return vis300RpmField;
            } 
            set {
                vis300RpmField = value;
                 this.Vis300RpmSpecified = true;
                NotifyPropertyChanged("Vis300Rpm");
            }
        }

        private double? vis300RpmField; 

        /// <summary>
        /// vis300RpmSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool Vis300RpmSpecified {
            get {
                return vis300RpmSpecifiedField;
            } 
            set {
                vis300RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis300RpmSpecified");
            }
        }

        private bool vis300RpmSpecifiedField; 

        /// <summary>
        /// 600 RPM viscometer reading. 
        /// </summary>
		[Description("600 RPM viscometer reading.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("vis600Rpm")]
        public double? Vis600Rpm {
            get {
                return vis600RpmField;
            } 
            set {
                vis600RpmField = value;
                 this.Vis600RpmSpecified = true;
                NotifyPropertyChanged("Vis600Rpm");
            }
        }

        private double? vis600RpmField; 

        /// <summary>
        /// vis600RpmSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool Vis600RpmSpecified {
            get {
                return vis600RpmSpecifiedField;
            } 
            set {
                vis600RpmSpecifiedField = value;
                NotifyPropertyChanged("Vis600RpmSpecified");
            }
        }

        private bool vis600RpmSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML objectGroup object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_objectGroup", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML objectGroup object.")]
    public partial class ObjectGroup : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the (sub) object that is represented by the objectGroup. If no wellbore is specified then the objectGroup represents the well. If a wellbore is specified but no other object is specified then the objectGroup represents the wellbore.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the (sub) object that is represented by the objectGroup. If no wellbore is specified then the objectGroup represents the well. If a wellbore is specified but no other object is specified then the  objectGroup represents the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the objectGroup.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the objectGroup.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Defines the type of group.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Defines the type of group.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("groupType")]
        public string GroupType {
            get {
                return groupTypeField;
            } 
            set {
                groupTypeField = value;
                NotifyPropertyChanged("GroupType");
            }
        }

        private string groupTypeField; 

        /// <summary>
        /// This is a free-form text field to extend groupType for custom implementations.
        /// </summary>
		[StringLength(64)]
        [Description("This is a free-form text field to extend groupType for custom implementations.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("groupSubtype")]
        public string GroupSubtype {
            get {
                return groupSubtypeField;
            } 
            set {
                groupSubtypeField = value;
                NotifyPropertyChanged("GroupSubtype");
            }
        }

        private string groupSubtypeField; 

        /// <summary>
        /// The sequence number related to the group. The meaning of the sequence is defined by the groupType.
        /// </summary>
		[Description("The sequence number related to the group.  The meaning of the sequence is defined by the groupType.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("sequence")]
        public short? Sequence {
            get {
                return sequenceField;
            } 
            set {
                sequenceField = value;
                 this.SequenceSpecified = true;
                NotifyPropertyChanged("Sequence");
            }
        }

        private short? sequenceField; 

        /// <summary>
        /// sequenceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SequenceSpecified {
            get {
                return sequenceSpecifiedField;
            } 
            set {
                sequenceSpecifiedField = value;
                NotifyPropertyChanged("SequenceSpecified");
            }
        }

        private bool sequenceSpecifiedField; 

        /// <summary>
        /// A description of attachment
        /// </summary>
		[StringLength(4000)]
        [Description("A description of attachment")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Any extra parameter data. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
		[Description("Any extra parameter data.  For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "indexedObject")]
		[XmlElement("param")]
        public List<IndexedObject> Param {
            get {
                return paramField;
            } 
            set {
                paramField = value;
                NotifyPropertyChanged("Param");
            }
        }

         /// <summary>
         /// bool to indicate if Param has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParamSpecified
         {
             get {
             if(paramField!=null)
                 return paramField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> paramField; 

        /// <summary>
        /// References a specific data-object that is a member of this group.
        /// </summary>
		[Required]
        [Description("References a specific data-object that is a member of this group.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_memberObject")]
		[XmlElement("memberObject")]
        public List<MemberObject> MemberObject {
            get {
                return memberObjectField;
            } 
            set {
                memberObjectField = value;
                NotifyPropertyChanged("MemberObject");
            }
        }

         /// <summary>
         /// bool to indicate if MemberObject has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MemberObjectSpecified
         {
             get {
             if(memberObjectField!=null)
                 return memberObjectField.Count>0?true:false;
             else return false;
             }
         }
        private List<MemberObject> memberObjectField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects.
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines a member of an objectGroup.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_memberObject", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Defines a member of an objectGroup.")]
    public partial class MemberObject : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A reference to an object that is defined within the context of the specified wellbore.
        /// </summary>
		[Required]
        [Description("A reference to an object that is defined within the  context of the specified wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refObjectString")]
		[XmlElement("objectReference")]
        public RefObjectString ObjectReference {
            get {
                return objectReferenceField;
            } 
            set {
                objectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private RefObjectString objectReferenceField; 

        /// <summary>
        /// For a log object, this specifies the kind of the index curve for the log. This is only relevant for a systematically growing object.
        /// </summary>
		[Description("For a log object, this specifies the kind of the index curve for the log. This is only relevant for a systematically growing object.")]
        [EnergisticsDataTypeAttribute(DataType = "LogIndexType")]
		[XmlElement("indexType")]
        public LogIndexType? IndexType {
            get {
                return indexTypeField;
            } 
            set {
                indexTypeField = value;
                 this.IndexTypeSpecified = true;
                NotifyPropertyChanged("IndexType");
            }
        }

        private LogIndexType? indexTypeField; 

        /// <summary>
        /// indexTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexTypeSpecified {
            get {
                return indexTypeSpecifiedField;
            } 
            set {
                indexTypeSpecifiedField = value;
                NotifyPropertyChanged("IndexTypeSpecified");
            }
        }

        private bool indexTypeSpecifiedField; 

        /// <summary>
        /// Defines primary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType.
        /// </summary>
		[Description("Defines primary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "objectSequence")]
		[XmlElement("sequence1")]
        public ObjectSequence Sequence1 {
            get {
                return sequence1Field;
            } 
            set {
                sequence1Field = value;
                NotifyPropertyChanged("Sequence1");
            }
        }

        private ObjectSequence sequence1Field; 

        /// <summary>
        /// Defines secondary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType. A value for sequence2 can only be given if a value is given for sequence1.
        /// </summary>
		[ComponentElement]
		[XmlElement("sequence2")]
        public ObjectSequence Sequence2 {
            get {
                return sequence2Field;
            } 
            set {
                sequence2Field = value;
                NotifyPropertyChanged("Sequence2");
            }
        }

        private ObjectSequence sequence2Field; 

        /// <summary>
        /// Defines tertiary numeric ordering of this object within the group. The meaning of this order will be defined by the groupType. A value for sequence3 can only be given if a value is given for sequence2.
        /// </summary>
		[ComponentElement]
		[XmlElement("sequence3")]
        public ObjectSequence Sequence3 {
            get {
                return sequence3Field;
            } 
            set {
                sequence3Field = value;
                NotifyPropertyChanged("Sequence3");
            }
        }

        private ObjectSequence sequence3Field; 

        /// <summary>
        /// The minimum growing-object index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
		[Description("The minimum growing-object index value that applies to this group. The significance of this range is defined by the groupType.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("rangeMin")]
        public GenericMeasure RangeMin {
            get {
                return rangeMinField;
            } 
            set {
                rangeMinField = value;
                NotifyPropertyChanged("RangeMin");
            }
        }

        private GenericMeasure rangeMinField; 

        /// <summary>
        /// The maximum growing-object index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
		[Description("The maximum growing-object index value that applies to this group. The significance of this range is defined by the groupType.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("rangeMax")]
        public GenericMeasure RangeMax {
            get {
                return rangeMaxField;
            } 
            set {
                rangeMaxField = value;
                NotifyPropertyChanged("RangeMax");
            }
        }

        private GenericMeasure rangeMaxField; 

        /// <summary>
        /// The minimum log date-time index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
		[Description("The minimum log date-time index value that applies to this group. The significance of this range is defined by the groupType.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("rangeDateTimeMin")]
        public Timestamp? RangeDateTimeMin {
            get {
                return rangeDateTimeMinField;
            } 
            set {
                rangeDateTimeMinField = value;
                 this.RangeDateTimeMinSpecified = true;
                NotifyPropertyChanged("RangeDateTimeMin");
            }
        }

        private Timestamp? rangeDateTimeMinField; 

        /// <summary>
        /// rangeDateTimeMinSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RangeDateTimeMinSpecified {
            get {
                return rangeDateTimeMinSpecifiedField;
            } 
            set {
                rangeDateTimeMinSpecifiedField = value;
                NotifyPropertyChanged("RangeDateTimeMinSpecified");
            }
        }

        private bool rangeDateTimeMinSpecifiedField; 

        /// <summary>
        /// The maximum log date-time index value that applies to this group. The significance of this range is defined by the groupType.
        /// </summary>
		[Description("The maximum log date-time index value that applies to this group. The significance of this range is defined by the groupType.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("rangeDateTimeMax")]
        public Timestamp? RangeDateTimeMax {
            get {
                return rangeDateTimeMaxField;
            } 
            set {
                rangeDateTimeMaxField = value;
                 this.RangeDateTimeMaxSpecified = true;
                NotifyPropertyChanged("RangeDateTimeMax");
            }
        }

        private Timestamp? rangeDateTimeMaxField; 

        /// <summary>
        /// rangeDateTimeMaxSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RangeDateTimeMaxSpecified {
            get {
                return rangeDateTimeMaxSpecifiedField;
            } 
            set {
                rangeDateTimeMaxSpecifiedField = value;
                NotifyPropertyChanged("RangeDateTimeMaxSpecified");
            }
        }

        private bool rangeDateTimeMaxSpecifiedField; 

        /// <summary>
        /// A comma delimited list of log curve mnemonics. Each mnemonic should only occur once in the list. If not specified then the group applies to all curves in the log.
        /// </summary>
		[Description("A comma delimited list of log curve mnemonics. Each mnemonic should only occur once in the list. If not specified then the group applies to all curves in the log.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("mnemonicList")]
        public string MnemonicList {
            get {
                return mnemonicListField;
            } 
            set {
                mnemonicListField = value;
                NotifyPropertyChanged("MnemonicList");
            }
        }

        private string mnemonicListField; 

        /// <summary>
        /// A measured depth related to this group. This does not necessarily represent an actual depth within a growing-object. The significance of this depth is defined by the groupType.
        /// </summary>
		[Description("A measured depth related to this group.  This does not necessarily represent an actual depth within a growing-object. The significance of this depth is defined by the groupType.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("referenceDepth")]
        public MeasuredDepthCoord ReferenceDepth {
            get {
                return referenceDepthField;
            } 
            set {
                referenceDepthField = value;
                NotifyPropertyChanged("ReferenceDepth");
            }
        }

        private MeasuredDepthCoord referenceDepthField; 

        /// <summary>
        /// A date and time related to this group. This does not necessarily represent an actual index within a growing-object. The significance of this time is defined by the groupType.
        /// </summary>
		[Description("A date and time related to this group.  This does not necessarily represent an actual index within a growing-object. The significance of this time is defined by the groupType.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("referenceDateTime")]
        public Timestamp? ReferenceDateTime {
            get {
                return referenceDateTimeField;
            } 
            set {
                referenceDateTimeField = value;
                 this.ReferenceDateTimeSpecified = true;
                NotifyPropertyChanged("ReferenceDateTime");
            }
        }

        private Timestamp? referenceDateTimeField; 

        /// <summary>
        /// referenceDateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReferenceDateTimeSpecified {
            get {
                return referenceDateTimeSpecifiedField;
            } 
            set {
                referenceDateTimeSpecifiedField = value;
                NotifyPropertyChanged("ReferenceDateTimeSpecified");
            }
        }

        private bool referenceDateTimeSpecifiedField; 

        /// <summary>
        /// Any extra parameter data related to the group. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
		[Description("Any extra parameter data related to the group.  For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "indexedObject")]
		[XmlElement("param")]
        public List<IndexedObject> Param {
            get {
                return paramField;
            } 
            set {
                paramField = value;
                NotifyPropertyChanged("Param");
            }
        }

         /// <summary>
         /// bool to indicate if Param has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParamSpecified
         {
             get {
             if(paramField!=null)
                 return paramField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> paramField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the objectSequence xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="objectSequence", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the objectSequence xsd type.")]
    public partial class ObjectSequence : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ObjectSequence class.
        /// </summary>
        public ObjectSequence() {}

        /// <summary>
        /// Initializes a new instance of the ObjectSequence class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public ObjectSequence(short value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A description related to the sequence number.
        /// </summary>
		[StringLength(256)]
        [Description("A description related to the sequence number.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
        [XmlAttribute("description")]
		
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public short Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private short ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Mud Log Parameter Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudLogParameter", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Mud Log Parameter Component Schema")]
    public partial class MudLogParameter : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of the mud log parameter.
        /// </summary>
		[Required]
        [Description("The type of the mud log parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "MudLogParameterType")]
		[XmlElement("type")]
        public MudLogParameterType? Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        
        private bool TypeSpecifiedField = false;
        
        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }
        
        private MudLogParameterType? typeField; 

        /// <summary>
        /// The data and time related to the parameter. The time refers to the top of the interval. 
        /// </summary>
		[Description("The data and time related to the parameter. The time refers to the top of the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTime")]
        public Timestamp? DTime {
            get {
                return dTimeField;
            } 
            set {
                dTimeField = value;
                 this.DTimeSpecified = true;
                NotifyPropertyChanged("DTime");
            }
        }

        private Timestamp? dTimeField; 

        /// <summary>
        /// dTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DTimeSpecified {
            get {
                return dTimeSpecifiedField;
            } 
            set {
                dTimeSpecifiedField = value;
                NotifyPropertyChanged("DTimeSpecified");
            }
        }

        private bool dTimeSpecifiedField; 

        /// <summary>
        /// The measured depth at a point or at the top of an interval. 
        /// </summary>
		[Required]
        [Description("The measured depth at a point or at the top of an interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// The bottom of an interval along the borehole. A point interval should be indicated by setting mdTop=mdBottom.
        /// </summary>
		[Required]
        [Description("The bottom of an interval along the borehole. A point interval should be indicated by setting mdTop=mdBottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// A force value (e.g., hookload) that represents the parameter.
        /// </summary>
        [ComponentElement]
        [XmlElement("force")]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
        public ForceMeasure Force {
            get {
                return forceField;
            } 
            set {
                if (value != null && ConcentrationSpecified) throw new Exception("Cannot set property Force when property Concentration is already set");
                if (value != null && EquivalentMudWeightSpecified) throw new Exception("Cannot set property Force when property EquivalentMudWeight is already set");
                if (value != null && PressureGradientSpecified) throw new Exception("Cannot set property Force when property PressureGradient is already set");
                forceField = value;
                ForceSpecified = (value!=null);
                NotifyPropertyChanged("Force");
            }
        }

        private ForceMeasure forceField; 
        private bool forceSpecified = false; 

        /// <summary>
        /// bool to indicate if Force has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ForceSpecified
        {
            get {
                return forceSpecified;
            }
            set {
                forceSpecified= value;
            }
        }

        /// <summary>
        /// A concentration value that represents the parameter.
        /// </summary>
        [ComponentElement]
        [XmlElement("concentration")]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Concentration {
            get {
                return concentrationField;
            } 
            set {
                if (value != null && EquivalentMudWeightSpecified) throw new Exception("Cannot set property Concentration when property EquivalentMudWeight is already set");
                if (value != null && ForceSpecified) throw new Exception("Cannot set property Concentration when property Force is already set");
                if (value != null && PressureGradientSpecified) throw new Exception("Cannot set property Concentration when property PressureGradient is already set");
                concentrationField = value;
                ConcentrationSpecified = (value!=null);
                NotifyPropertyChanged("Concentration");
            }
        }

        private VolumePerVolumeMeasure concentrationField; 
        private bool concentrationSpecified = false; 

        /// <summary>
        /// bool to indicate if Concentration has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ConcentrationSpecified
        {
            get {
                return concentrationSpecified;
            }
            set {
                concentrationSpecified= value;
            }
        }

        /// <summary>
        /// A equivalent mud weight value that represents the parameter. This commonly used for pressure gradient parameters and pressure parameters.
        /// </summary>
        [ComponentElement]
        [XmlElement("equivalentMudWeight")]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
        public DensityMeasure EquivalentMudWeight {
            get {
                return equivalentMudWeightField;
            } 
            set {
                if (value != null && ConcentrationSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property Concentration is already set");
                if (value != null && ForceSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property Force is already set");
                if (value != null && PressureGradientSpecified) throw new Exception("Cannot set property EquivalentMudWeight when property PressureGradient is already set");
                equivalentMudWeightField = value;
                EquivalentMudWeightSpecified = (value!=null);
                NotifyPropertyChanged("EquivalentMudWeight");
            }
        }

        private DensityMeasure equivalentMudWeightField; 
        private bool equivalentMudWeightSpecified = false; 

        /// <summary>
        /// bool to indicate if EquivalentMudWeight has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool EquivalentMudWeightSpecified
        {
            get {
                return equivalentMudWeightSpecified;
            }
            set {
                equivalentMudWeightSpecified= value;
            }
        }

        /// <summary>
        /// A pressure gradient value that represents the parameter. This is sometimes specified instead of an equivalent mud weight.
        /// </summary>
        [ComponentElement]
        [XmlElement("pressureGradient")]
        [EnergisticsDataTypeAttribute(DataType = "forcePerVolumeMeasure")]
        public ForcePerVolumeMeasure PressureGradient {
            get {
                return pressureGradientField;
            } 
            set {
                if (value != null && ConcentrationSpecified) throw new Exception("Cannot set property PressureGradient when property Concentration is already set");
                if (value != null && EquivalentMudWeightSpecified) throw new Exception("Cannot set property PressureGradient when property EquivalentMudWeight is already set");
                if (value != null && ForceSpecified) throw new Exception("Cannot set property PressureGradient when property Force is already set");
                pressureGradientField = value;
                PressureGradientSpecified = (value!=null);
                NotifyPropertyChanged("PressureGradient");
            }
        }

        private ForcePerVolumeMeasure pressureGradientField; 
        private bool pressureGradientSpecified = false; 

        /// <summary>
        /// bool to indicate if PressureGradient has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool PressureGradientSpecified
        {
            get {
                return pressureGradientSpecified;
            }
            set {
                pressureGradientSpecified= value;
            }
        }


        /// <summary>
        /// A textual parameter value. This value is typically annotation on the log. All spaces, tabs, line feeds and carriage returns are retained in the string. Characters representing line breaks should be replaced by a line feed or carriage return.
        /// </summary>
		[StringLength(256)]
        [Description("A textual parameter value. This value is typically annotation on the log. All spaces, tabs, line feeds and carriage returns are retained in the string.  Characters representing line breaks should be replaced by a line feed or carriage return.")]
        [EnergisticsDataTypeAttribute(DataType = "uncollapsedString")]
		[XmlElement("text")]
        public string Text {
            get {
                return textField;
            } 
            set {
                textField = value;
                NotifyPropertyChanged("Text");
            }
        }

        private string textField; 

        /// <summary>
        /// A container element for creation and last-change DateTime information.
        /// </summary>
		[Description("A container element for creation and last-change DateTime information.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonTime")]
		[XmlElement("commonTime")]
        public CommonTime CommonTime {
            get {
                return commonTimeField;
            } 
            set {
                commonTimeField = value;
                NotifyPropertyChanged("CommonTime");
            }
        }

        private CommonTime commonTimeField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Common Time Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_commonTime", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Common Time Component Schema ")]
    public partial class CommonTime : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// When the data was created at the persistent data store. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("When the data was created at the persistent data store.  This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the  behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimCreation")]
        public Timestamp? DateTimeCreation {
            get {
                return dTimCreationField;
            } 
            set {
                dTimCreationField = value;
                 this.DateTimeCreationSpecified = true;
                NotifyPropertyChanged("DateTimeCreation");
            }
        }

        private Timestamp? dTimCreationField; 

        /// <summary>
        /// dTimCreationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCreationSpecified {
            get {
                return dTimCreationSpecifiedField;
            } 
            set {
                dTimCreationSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCreationSpecified");
            }
        }

        private bool dTimCreationSpecifiedField; 

        /// <summary>
        /// Last change of any element of the data at the persistent data store. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("Last change of any element of the data at the persistent data store. This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the  behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimLastChange")]
        public Timestamp? DateTimeLastChange {
            get {
                return dTimLastChangeField;
            } 
            set {
                dTimLastChangeField = value;
                 this.DateTimeLastChangeSpecified = true;
                NotifyPropertyChanged("DateTimeLastChange");
            }
        }

        private Timestamp? dTimLastChangeField; 

        /// <summary>
        /// dTimLastChangeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeLastChangeSpecified {
            get {
                return dTimLastChangeSpecifiedField;
            } 
            set {
                dTimLastChangeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeLastChangeSpecified");
            }
        }

        private bool dTimLastChangeSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Mud Log object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_mudLog", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Mud Log object.")]
    public partial class MudLog : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the mud log. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the mud log.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the mud log. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the mud log.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the  behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("objectGrowing")]
        public bool? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set {
                objectGrowingField = value;
                 this.ObjectGrowingSpecified = true;
                NotifyPropertyChanged("ObjectGrowing");
            }
        }

        private bool? objectGrowingField; 

        /// <summary>
        /// objectGrowingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ObjectGrowingSpecified {
            get {
                return objectGrowingSpecifiedField;
            } 
            set {
                objectGrowingSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingSpecified");
            }
        }

        private bool objectGrowingSpecifiedField; 

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Name of the company recording the information. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of the company recording the information.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("mudLogCompany")]
        public string MudLogCompany {
            get {
                return mudLogCompanyField;
            } 
            set {
                mudLogCompanyField = value;
                NotifyPropertyChanged("MudLogCompany");
            }
        }

        private string mudLogCompanyField; 

        /// <summary>
        /// Concatenated names of mud loggers constructing the log. 
        /// </summary>
		[StringLength(256)]
        [Description("Concatenated names of mud loggers constructing the log.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("mudLogEngineers")]
        public string MudLogEngineers {
            get {
                return mudLogEngineersField;
            } 
            set {
                mudLogEngineersField = value;
                NotifyPropertyChanged("MudLogEngineers");
            }
        }

        private string mudLogEngineersField; 

        /// <summary>
        /// The minimum mdTop value for this object. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("The minimum mdTop value for this object. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("startMd")]
        public MeasuredDepthCoord StartMD {
            get {
                return startMdField;
            } 
            set {
                startMdField = value;
                NotifyPropertyChanged("StartMD");
            }
        }

        private MeasuredDepthCoord startMdField; 

        /// <summary>
        /// The maximum mdTop value for this object. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("The maximum mdTop value for this object. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("endMd")]
        public MeasuredDepthCoord EndMD {
            get {
                return endMdField;
            } 
            set {
                endMdField = value;
                NotifyPropertyChanged("EndMD");
            }
        }

        private MeasuredDepthCoord endMdField; 

        /// <summary>
        /// A foreign key to a related Log. This is a pointer to a log that is related to the mud log. The log may or may not have been created as a result of the mudlogging process. The log must represent the same well and wellbore as the mud log.
        /// </summary>
		[Description("A foreign key to a related Log. This is a pointer to a log that is related to the mud log. The log may or may not have been created as a result of  the mudlogging process. The log must represent the same  well and wellbore as the mud log.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("relatedLog")]
        public List<RefNameString> RelatedLog {
            get {
                return relatedLogField;
            } 
            set {
                relatedLogField = value;
                NotifyPropertyChanged("RelatedLog");
            }
        }

         /// <summary>
         /// bool to indicate if RelatedLog has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RelatedLogSpecified
         {
             get {
             if(relatedLogField!=null)
                 return relatedLogField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefNameString> relatedLogField; 

        /// <summary>
        /// A single mud log parameter.
        /// </summary>
		[Description("A single mud log parameter.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_mudLogParameter")]
		[XmlElement("parameter")]
        public List<MudLogParameter> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(parameterField!=null)
                 return parameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<MudLogParameter> parameterField; 

        /// <summary>
        /// Set of geology and drilling information records for the wellbore. This is an API "data-node" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("Set of geology and drilling information records for the wellbore. This is an API \"data-node\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_geologyInterval")]
		[XmlElement("geologyInterval")]
        public List<GeologyInterval> GeologyInterval {
            get {
                return geologyIntervalField;
            } 
            set {
                geologyIntervalField = value;
                NotifyPropertyChanged("GeologyInterval");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyIntervalSpecified
         {
             get {
             if(geologyIntervalField!=null)
                 return geologyIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<GeologyInterval> geologyIntervalField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Geology Interval Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geologyInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Geology Interval Component Schema")]
    public partial class GeologyInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of lithology declaration. An interpreted type will specify one lithology for the whole interval (i.e., the percentage is 100%). A cuttings or core type may specify one or more lithologies for the interval based on a visual inspection of the cuttings or core and a relative percentage will be assigned to each lithology.
        /// </summary>
		[Required]
        [Description("The type of lithology declaration.  An interpreted type will specify one lithology for the whole interval (i.e., the percentage is 100%). A cuttings or core type may specify one or more lithologies for the interval based on a visual inspection of the cuttings or core and a relative percentage will be assigned to each lithology.")]
        [EnergisticsDataTypeAttribute(DataType = "LithologySource")]
		[XmlElement("typeLithology")]
        public LithologySource? TypeLithology {
            get {
                return typeLithologyField;
            } 
            set {
                typeLithologyField = value;
                 this.TypeLithologySpecified = true;
                NotifyPropertyChanged("TypeLithology");
            }
        }

        
        private bool TypeLithologySpecifiedField = false;
        
        /// <summary>
        /// TypeLithologySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeLithologySpecified {
            get {
                return TypeLithologySpecifiedField;
            } 
            set {
                TypeLithologySpecifiedField = value;
                NotifyPropertyChanged("TypeLithologySpecified");
            }
        }
        
        private LithologySource? typeLithologyField; 

        /// <summary>
        /// Measured depth at top of interval. This is an API "node-index" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Required]
        [Description("Measured depth at top of interval. This is an API \"node-index\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at base of interval. A point interval should be indicated by setting mdTop=mdBottom. This is an API "node-index" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Required]
        [Description("Measured depth at base of interval. A point interval should be indicated by setting mdTop=mdBottom. This is an API \"node-index\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// Date and time the information is related to. The time refers to the top of the interval. 
        /// </summary>
		[Description("Date and time the information is related to.  The time refers to the top of the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// True vertical depth at top of the section. 
        /// </summary>
		[Description("True vertical depth at top of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at base of interval. 
        /// </summary>
		[Description("True vertical depth at base of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBase")]
        public WellVerticalDepthCoord TvdBase {
            get {
                return tvdBaseField;
            } 
            set {
                tvdBaseField = value;
                NotifyPropertyChanged("TvdBase");
            }
        }

        private WellVerticalDepthCoord tvdBaseField; 

        /// <summary>
        /// Average rate of penetration through Interval. 
        /// </summary>
		[Description("Average rate of penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("ropAv")]
        public VelocityMeasure RopAverage {
            get {
                return ropAvField;
            } 
            set {
                ropAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private VelocityMeasure ropAvField; 

        /// <summary>
        /// Minimum rate of penetration through Interval. 
        /// </summary>
		[Description("Minimum rate of penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("ropMn")]
        public VelocityMeasure RopMin {
            get {
                return ropMnField;
            } 
            set {
                ropMnField = value;
                NotifyPropertyChanged("RopMin");
            }
        }

        private VelocityMeasure ropMnField; 

        /// <summary>
        /// Maximum rate of penetration through Interval. 
        /// </summary>
		[Description("Maximum rate of penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("ropMx")]
        public VelocityMeasure RopMax {
            get {
                return ropMxField;
            } 
            set {
                ropMxField = value;
                NotifyPropertyChanged("RopMax");
            }
        }

        private VelocityMeasure ropMxField; 

        /// <summary>
        /// Surface weight on bit - average through interval. 
        /// </summary>
		[Description("Surface weight on bit - average through interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("wobAv")]
        public ForceMeasure WobAverage {
            get {
                return wobAvField;
            } 
            set {
                wobAvField = value;
                NotifyPropertyChanged("WobAverage");
            }
        }

        private ForceMeasure wobAvField; 

        /// <summary>
        /// Average torque through interval. 
        /// </summary>
		[Description("Average torque through interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqAv")]
        public MomentOfForceMeasure TorqueAverage {
            get {
                return tqAvField;
            } 
            set {
                tqAvField = value;
                NotifyPropertyChanged("TorqueAverage");
            }
        }

        private MomentOfForceMeasure tqAvField; 

        /// <summary>
        /// Average current through interval. This is the raw measurement from which the average torque could be calculated.
        /// </summary>
		[Description("Average current through interval.  This is the raw measurement from which the average torque could be calculated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "electricCurrentMeasure")]
		[XmlElement("currentAv")]
        public ElectricCurrentMeasure CurrentAverage {
            get {
                return currentAvField;
            } 
            set {
                currentAvField = value;
                NotifyPropertyChanged("CurrentAverage");
            }
        }

        private ElectricCurrentMeasure currentAvField; 

        /// <summary>
        /// Average turn rate through interval (commonly in rpm). 
        /// </summary>
		[Description("Average turn rate through interval (commonly in rpm).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("rpmAv")]
        public AnglePerTimeMeasure RpmAverage {
            get {
                return rpmAvField;
            } 
            set {
                rpmAvField = value;
                NotifyPropertyChanged("RpmAverage");
            }
        }

        private AnglePerTimeMeasure rpmAvField; 

        /// <summary>
        /// Average mud density in through interval. 
        /// </summary>
		[Description("Average mud density in through interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("wtMudAv")]
        public DensityMeasure WeightMudAverage {
            get {
                return wtMudAvField;
            } 
            set {
                wtMudAvField = value;
                NotifyPropertyChanged("WeightMudAverage");
            }
        }

        private DensityMeasure wtMudAvField; 

        /// <summary>
        /// Average effective circulating density at TD through Interval. 
        /// </summary>
		[Description("Average effective circulating density at TD through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("ecdTdAv")]
        public DensityMeasure EcdTdAverage {
            get {
                return ecdTdAvField;
            } 
            set {
                ecdTdAvField = value;
                NotifyPropertyChanged("EcdTdAverage");
            }
        }

        private DensityMeasure ecdTdAvField; 

        /// <summary>
        /// Average drilling exponent through Interval. 
        /// </summary>
		[Description("Average drilling exponent through Interval.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("dxcAv")]
        public double? DxcAverage {
            get {
                return dxcAvField;
            } 
            set {
                dxcAvField = value;
                 this.DxcAverageSpecified = true;
                NotifyPropertyChanged("DxcAverage");
            }
        }

        private double? dxcAvField; 

        /// <summary>
        /// dxcAvSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DxcAverageSpecified {
            get {
                return dxcAvSpecifiedField;
            } 
            set {
                dxcAvSpecifiedField = value;
                NotifyPropertyChanged("DxcAverageSpecified");
            }
        }

        private bool dxcAvSpecifiedField; 

        /// <summary>
        /// Set of lithology records for the Interval. 
        /// </summary>
		[Description("Set of lithology records for the Interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_lithology")]
		[XmlElement("lithology")]
        public List<Lithology> Lithology {
            get {
                return lithologyField;
            } 
            set {
                lithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

         /// <summary>
         /// bool to indicate if Lithology has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LithologySpecified
         {
             get {
             if(lithologyField!=null)
                 return lithologyField.Count>0?true:false;
             else return false;
             }
         }
        private List<Lithology> lithologyField; 

        /// <summary>
        /// Show record through the Interval. 
        /// </summary>
		[Description("Show record through the Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_show")]
		[XmlElement("show")]
        public Show Show {
            get {
                return showField;
            } 
            set {
                showField = value;
                NotifyPropertyChanged("Show");
            }
        }

        private Show showField; 

        /// <summary>
        /// Chromatographic break down for the interval. 
        /// </summary>
		[Description("Chromatographic break down for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_chromatograph")]
		[XmlElement("chromatograph")]
        public Chromatograph Chromatograph {
            get {
                return chromatographField;
            } 
            set {
                chromatographField = value;
                NotifyPropertyChanged("Chromatograph");
            }
        }

        private Chromatograph chromatographField; 

        /// <summary>
        /// Total gas readings associated with this interval. 
        /// </summary>
		[Description("Total gas readings associated with this interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_mudGas")]
		[XmlElement("mudGas")]
        public MudGas MudGas {
            get {
                return mudGasField;
            } 
            set {
                mudGasField = value;
                NotifyPropertyChanged("MudGas");
            }
        }

        private MudGas mudGasField; 

        /// <summary>
        /// Sample bulk density for the interval. 
        /// </summary>
		[Description("Sample bulk density for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densBulk")]
        public DensityMeasure DensBulk {
            get {
                return densBulkField;
            } 
            set {
                densBulkField = value;
                NotifyPropertyChanged("DensBulk");
            }
        }

        private DensityMeasure densBulkField; 

        /// <summary>
        /// Shale density for the interval. 
        /// </summary>
		[Description("Shale density for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densShale")]
        public DensityMeasure DensShale {
            get {
                return densShaleField;
            } 
            set {
                densShaleField = value;
                NotifyPropertyChanged("DensShale");
            }
        }

        private DensityMeasure densShaleField; 

        /// <summary>
        /// Calcimetry calcite percentage. 
        /// </summary>
		[Description("Calcimetry calcite percentage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("calcite")]
        public VolumePerVolumeMeasure Calcite {
            get {
                return calciteField;
            } 
            set {
                calciteField = value;
                NotifyPropertyChanged("Calcite");
            }
        }

        private VolumePerVolumeMeasure calciteField; 

        /// <summary>
        /// Calcimetry dolomite percentage. 
        /// </summary>
		[Description("Calcimetry dolomite percentage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("dolomite")]
        public VolumePerVolumeMeasure Dolomite {
            get {
                return dolomiteField;
            } 
            set {
                dolomiteField = value;
                NotifyPropertyChanged("Dolomite");
            }
        }

        private VolumePerVolumeMeasure dolomiteField; 

        /// <summary>
        /// Cuttings cationic exchange capacity. 
        /// </summary>
		[Description("Cuttings cationic exchange capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "equivalentPerMassMeasure")]
		[XmlElement("cec")]
        public EquivalentPerMassMeasure Cec {
            get {
                return cecField;
            } 
            set {
                cecField = value;
                NotifyPropertyChanged("Cec");
            }
        }

        private EquivalentPerMassMeasure cecField; 

        /// <summary>
        /// Fluorescence as measured using a device licensed for the Quantitative Fluorescence Technique.
        /// </summary>
		[Description("Fluorescence as measured using a device licensed for the  Quantitative Fluorescence Technique.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "illuminanceMeasure")]
		[XmlElement("qft")]
        public IlluminanceMeasure Qft {
            get {
                return qftField;
            } 
            set {
                qftField = value;
                NotifyPropertyChanged("Qft");
            }
        }

        private IlluminanceMeasure qftField; 

        /// <summary>
        /// Calcimetry stabilized percentage. 
        /// </summary>
		[Description("Calcimetry stabilized percentage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("calcStab")]
        public VolumePerVolumeMeasure CalcStab {
            get {
                return calcStabField;
            } 
            set {
                calcStabField = value;
                NotifyPropertyChanged("CalcStab");
            }
        }

        private VolumePerVolumeMeasure calcStabField; 

        /// <summary>
        /// DEPRECATED. Formerly defined as name of formation penetrated, now deprecated to be replaced by lithostratigraphic with kind=formation. 
        /// </summary>
		[Description("DEPRECATED. Formerly defined as name of formation penetrated, now deprecated to be replaced by lithostratigraphic with kind=formation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameFormation")]
        public List<string> NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

         /// <summary>
         /// bool to indicate if NameFormation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameFormationSpecified
         {
             get {
             if(nameFormationField!=null)
                 return nameFormationField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> nameFormationField; 

        /// <summary>
        /// Name of lithostratigraphy, regionally dependent.
        /// </summary>
		[Description("Name of lithostratigraphy, regionally dependent.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "lithostratigraphyStruct")]
		[XmlElement("lithostratigraphic")]
        public List<LithostratigraphyStruct> Lithostratigraphic {
            get {
                return lithostratigraphicField;
            } 
            set {
                lithostratigraphicField = value;
                NotifyPropertyChanged("Lithostratigraphic");
            }
        }

         /// <summary>
         /// bool to indicate if Lithostratigraphic has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LithostratigraphicSpecified
         {
             get {
             if(lithostratigraphicField!=null)
                 return lithostratigraphicField.Count>0?true:false;
             else return false;
             }
         }
        private List<LithostratigraphyStruct> lithostratigraphicField; 

        /// <summary>
        /// Chronostratigraphic classification. 
        /// </summary>
		[Description("Chronostratigraphic classification.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "chronostratigraphyStruct")]
		[XmlElement("chronostratigraphic")]
        public List<ChronostratigraphyStruct> Chronostratigraphic {
            get {
                return chronostratigraphicField;
            } 
            set {
                chronostratigraphicField = value;
                NotifyPropertyChanged("Chronostratigraphic");
            }
        }

         /// <summary>
         /// bool to indicate if Chronostratigraphic has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChronostratigraphicSpecified
         {
             get {
             if(chronostratigraphicField!=null)
                 return chronostratigraphicField.Count>0?true:false;
             else return false;
             }
         }
        private List<ChronostratigraphyStruct> chronostratigraphicField; 

        /// <summary>
        /// Minimum size. 
        /// </summary>
		[Description("Minimum size.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("sizeMn")]
        public LengthMeasure SizeMin {
            get {
                return sizeMnField;
            } 
            set {
                sizeMnField = value;
                NotifyPropertyChanged("SizeMin");
            }
        }

        private LengthMeasure sizeMnField; 

        /// <summary>
        /// Maximum size. 
        /// </summary>
		[Description("Maximum size.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("sizeMx")]
        public LengthMeasure SizeMax {
            get {
                return sizeMxField;
            } 
            set {
                sizeMxField = value;
                NotifyPropertyChanged("SizeMax");
            }
        }

        private LengthMeasure sizeMxField; 

        /// <summary>
        /// Plug length. 
        /// </summary>
		[Description("Plug length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenPlug")]
        public LengthMeasure LenPlug {
            get {
                return lenPlugField;
            } 
            set {
                lenPlugField = value;
                NotifyPropertyChanged("LenPlug");
            }
        }

        private LengthMeasure lenPlugField; 

        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[StringLength(4000)]
        [Description("Description of item and details.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Sample treatment : cutting fluid. 
        /// </summary>
		[StringLength(32)]
        [Description("Sample treatment : cutting fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("cuttingFluid")]
        public string CuttingFluid {
            get {
                return cuttingFluidField;
            } 
            set {
                cuttingFluidField = value;
                NotifyPropertyChanged("CuttingFluid");
            }
        }

        private string cuttingFluidField; 

        /// <summary>
        /// Sample treatment : cleaning method. 
        /// </summary>
		[StringLength(32)]
        [Description("Sample treatment : cleaning method.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("cleaningMethod")]
        public string CleaningMethod {
            get {
                return cleaningMethodField;
            } 
            set {
                cleaningMethodField = value;
                NotifyPropertyChanged("CleaningMethod");
            }
        }

        private string cleaningMethodField; 

        /// <summary>
        /// Sample treatment : drying method. 
        /// </summary>
		[StringLength(32)]
        [Description("Sample treatment : drying method.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("dryingMethod")]
        public string DryingMethod {
            get {
                return dryingMethodField;
            } 
            set {
                dryingMethodField = value;
                NotifyPropertyChanged("DryingMethod");
            }
        }

        private string dryingMethodField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// A container element for creation and last-change DateTime information.
        /// </summary>
		[Description("A container element for creation and last-change DateTime information.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonTime")]
		[XmlElement("commonTime")]
        public CommonTime CommonTime {
            get {
                return commonTimeField;
            } 
            set {
                commonTimeField = value;
                NotifyPropertyChanged("CommonTime");
            }
        }

        private CommonTime commonTimeField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Chromatographic Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_chromatograph", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Chromatographic Component Schema ")]
    public partial class Chromatograph : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The date and time at which the gas sample was processed. 
        /// </summary>
		[Description("The date and time at which the gas sample was processed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Measured depth at top of Interval. 
        /// </summary>
		[Description("Measured depth at top of Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at base of interval. 
        /// </summary>
		[Description("Measured depth at base of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// Mud density in (active pits). 
        /// </summary>
		[Description("Mud density in (active pits).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("wtMudIn")]
        public DensityMeasure WeightMudIn {
            get {
                return wtMudInField;
            } 
            set {
                wtMudInField = value;
                NotifyPropertyChanged("WeightMudIn");
            }
        }

        private DensityMeasure wtMudInField; 

        /// <summary>
        /// Mud density out (flowline). 
        /// </summary>
		[Description("Mud density out (flowline).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("wtMudOut")]
        public DensityMeasure WeightMudOut {
            get {
                return wtMudOutField;
            } 
            set {
                wtMudOutField = value;
                NotifyPropertyChanged("WeightMudOut");
            }
        }

        private DensityMeasure wtMudOutField; 

        /// <summary>
        /// Chromatograph type. 
        /// </summary>
		[StringLength(16)]
        [Description("Chromatograph type.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("chromType")]
        public string ChromType {
            get {
                return chromTypeField;
            } 
            set {
                chromTypeField = value;
                NotifyPropertyChanged("ChromType");
            }
        }

        private string chromTypeField; 

        /// <summary>
        /// Chromatograph cycle time. Commonly in seconds. 
        /// </summary>
		[Description("Chromatograph cycle time. Commonly in seconds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimChromCycle")]
        public TimeMeasure ETimeChromCycle {
            get {
                return eTimChromCycleField;
            } 
            set {
                eTimChromCycleField = value;
                NotifyPropertyChanged("ETimeChromCycle");
            }
        }

        private TimeMeasure eTimChromCycleField; 

        /// <summary>
        /// Chromatograph integrator report time, format may be variable due to recording equipment 
        /// </summary>
		[Description("Chromatograph integrator report time, format may be variable due to recording equipment")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("chromIntRpt")]
        public Timestamp? ChromIntRpt {
            get {
                return chromIntRptField;
            } 
            set {
                chromIntRptField = value;
                 this.ChromIntRptSpecified = true;
                NotifyPropertyChanged("ChromIntRpt");
            }
        }

        private Timestamp? chromIntRptField; 

        /// <summary>
        /// chromIntRptSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ChromIntRptSpecified {
            get {
                return chromIntRptSpecifiedField;
            } 
            set {
                chromIntRptSpecifiedField = value;
                NotifyPropertyChanged("ChromIntRptSpecified");
            }
        }

        private bool chromIntRptSpecifiedField; 

        /// <summary>
        /// Methane (C1) ppm (average). 
        /// </summary>
		[Description("Methane (C1) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("methAv")]
        public VolumePerVolumeMeasure MethAverage {
            get {
                return methAvField;
            } 
            set {
                methAvField = value;
                NotifyPropertyChanged("MethAverage");
            }
        }

        private VolumePerVolumeMeasure methAvField; 

        /// <summary>
        /// Methane (C1) ppm (minimum). 
        /// </summary>
		[Description("Methane (C1) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("methMn")]
        public VolumePerVolumeMeasure MethMin {
            get {
                return methMnField;
            } 
            set {
                methMnField = value;
                NotifyPropertyChanged("MethMin");
            }
        }

        private VolumePerVolumeMeasure methMnField; 

        /// <summary>
        /// Methane (C1) ppm (maximum). 
        /// </summary>
		[Description("Methane (C1) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("methMx")]
        public VolumePerVolumeMeasure MethMax {
            get {
                return methMxField;
            } 
            set {
                methMxField = value;
                NotifyPropertyChanged("MethMax");
            }
        }

        private VolumePerVolumeMeasure methMxField; 

        /// <summary>
        /// Ethane (C2) ppm (average). 
        /// </summary>
		[Description("Ethane (C2) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ethAv")]
        public VolumePerVolumeMeasure EthAverage {
            get {
                return ethAvField;
            } 
            set {
                ethAvField = value;
                NotifyPropertyChanged("EthAverage");
            }
        }

        private VolumePerVolumeMeasure ethAvField; 

        /// <summary>
        /// Ethane (C2) ppm (minimum). 
        /// </summary>
		[Description("Ethane (C2) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ethMn")]
        public VolumePerVolumeMeasure EthMin {
            get {
                return ethMnField;
            } 
            set {
                ethMnField = value;
                NotifyPropertyChanged("EthMin");
            }
        }

        private VolumePerVolumeMeasure ethMnField; 

        /// <summary>
        /// Ethane (C2) ppm (maximum). 
        /// </summary>
		[Description("Ethane (C2) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ethMx")]
        public VolumePerVolumeMeasure EthMax {
            get {
                return ethMxField;
            } 
            set {
                ethMxField = value;
                NotifyPropertyChanged("EthMax");
            }
        }

        private VolumePerVolumeMeasure ethMxField; 

        /// <summary>
        /// Propane (C3) ppm (average). 
        /// </summary>
		[Description("Propane (C3) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("propAv")]
        public VolumePerVolumeMeasure PropAverage {
            get {
                return propAvField;
            } 
            set {
                propAvField = value;
                NotifyPropertyChanged("PropAverage");
            }
        }

        private VolumePerVolumeMeasure propAvField; 

        /// <summary>
        /// Propane (C3) ppm (minimum). 
        /// </summary>
		[Description("Propane (C3) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("propMn")]
        public VolumePerVolumeMeasure PropMin {
            get {
                return propMnField;
            } 
            set {
                propMnField = value;
                NotifyPropertyChanged("PropMin");
            }
        }

        private VolumePerVolumeMeasure propMnField; 

        /// <summary>
        /// Propane (C3) ppm (maximum). 
        /// </summary>
		[Description("Propane (C3) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("propMx")]
        public VolumePerVolumeMeasure PropMax {
            get {
                return propMxField;
            } 
            set {
                propMxField = value;
                NotifyPropertyChanged("PropMax");
            }
        }

        private VolumePerVolumeMeasure propMxField; 

        /// <summary>
        /// iso-Butane (iC4) ppm (average). 
        /// </summary>
		[Description("iso-Butane (iC4) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ibutAv")]
        public VolumePerVolumeMeasure IbutAverage {
            get {
                return ibutAvField;
            } 
            set {
                ibutAvField = value;
                NotifyPropertyChanged("IbutAverage");
            }
        }

        private VolumePerVolumeMeasure ibutAvField; 

        /// <summary>
        /// iso-Butane (iC4) ppm (minimum). 
        /// </summary>
		[Description("iso-Butane (iC4) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ibutMn")]
        public VolumePerVolumeMeasure IbutMin {
            get {
                return ibutMnField;
            } 
            set {
                ibutMnField = value;
                NotifyPropertyChanged("IbutMin");
            }
        }

        private VolumePerVolumeMeasure ibutMnField; 

        /// <summary>
        /// iso-Butane (iC4) ppm (maximum). 
        /// </summary>
		[Description("iso-Butane (iC4) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ibutMx")]
        public VolumePerVolumeMeasure IbutMax {
            get {
                return ibutMxField;
            } 
            set {
                ibutMxField = value;
                NotifyPropertyChanged("IbutMax");
            }
        }

        private VolumePerVolumeMeasure ibutMxField; 

        /// <summary>
        /// nor-Butane (nC4) ppm (average). 
        /// </summary>
		[Description("nor-Butane (nC4) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("nbutAv")]
        public VolumePerVolumeMeasure NbutAverage {
            get {
                return nbutAvField;
            } 
            set {
                nbutAvField = value;
                NotifyPropertyChanged("NbutAverage");
            }
        }

        private VolumePerVolumeMeasure nbutAvField; 

        /// <summary>
        /// nor-Butane (nC4) ppm (minimum). 
        /// </summary>
		[Description("nor-Butane (nC4) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("nbutMn")]
        public VolumePerVolumeMeasure NbutMin {
            get {
                return nbutMnField;
            } 
            set {
                nbutMnField = value;
                NotifyPropertyChanged("NbutMin");
            }
        }

        private VolumePerVolumeMeasure nbutMnField; 

        /// <summary>
        /// nor-Butane (nC4) ppm (maximum). 
        /// </summary>
		[Description("nor-Butane (nC4) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("nbutMx")]
        public VolumePerVolumeMeasure NbutMax {
            get {
                return nbutMxField;
            } 
            set {
                nbutMxField = value;
                NotifyPropertyChanged("NbutMax");
            }
        }

        private VolumePerVolumeMeasure nbutMxField; 

        /// <summary>
        /// iso-Pentane (iC5) ppm (average). 
        /// </summary>
		[Description("iso-Pentane (iC5) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ipentAv")]
        public VolumePerVolumeMeasure IpentAverage {
            get {
                return ipentAvField;
            } 
            set {
                ipentAvField = value;
                NotifyPropertyChanged("IpentAverage");
            }
        }

        private VolumePerVolumeMeasure ipentAvField; 

        /// <summary>
        /// iso-Pentane (iC5) ppm (minimum). 
        /// </summary>
		[Description("iso-Pentane (iC5) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ipentMn")]
        public VolumePerVolumeMeasure IpentMin {
            get {
                return ipentMnField;
            } 
            set {
                ipentMnField = value;
                NotifyPropertyChanged("IpentMin");
            }
        }

        private VolumePerVolumeMeasure ipentMnField; 

        /// <summary>
        /// iso-Pentane (iC5) ppm (maximum). 
        /// </summary>
		[Description("iso-Pentane (iC5) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ipentMx")]
        public VolumePerVolumeMeasure IpentMax {
            get {
                return ipentMxField;
            } 
            set {
                ipentMxField = value;
                NotifyPropertyChanged("IpentMax");
            }
        }

        private VolumePerVolumeMeasure ipentMxField; 

        /// <summary>
        /// nor-Pentane (nC5) ppm (average). 
        /// </summary>
		[Description("nor-Pentane (nC5) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("npentAv")]
        public VolumePerVolumeMeasure NpentAverage {
            get {
                return npentAvField;
            } 
            set {
                npentAvField = value;
                NotifyPropertyChanged("NpentAverage");
            }
        }

        private VolumePerVolumeMeasure npentAvField; 

        /// <summary>
        /// nor-Pentane (nC5) ppm (minimum). 
        /// </summary>
		[Description("nor-Pentane (nC5) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("npentMn")]
        public VolumePerVolumeMeasure NpentMin {
            get {
                return npentMnField;
            } 
            set {
                npentMnField = value;
                NotifyPropertyChanged("NpentMin");
            }
        }

        private VolumePerVolumeMeasure npentMnField; 

        /// <summary>
        /// nor-Pentane (nC5) ppm (maximum). 
        /// </summary>
		[Description("nor-Pentane (nC5) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("npentMx")]
        public VolumePerVolumeMeasure NpentMax {
            get {
                return npentMxField;
            } 
            set {
                npentMxField = value;
                NotifyPropertyChanged("NpentMax");
            }
        }

        private VolumePerVolumeMeasure npentMxField; 

        /// <summary>
        /// neo-Pentane (eC5) ppm (average). 
        /// </summary>
		[Description("neo-Pentane (eC5) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("epentAv")]
        public VolumePerVolumeMeasure EpentAverage {
            get {
                return epentAvField;
            } 
            set {
                epentAvField = value;
                NotifyPropertyChanged("EpentAverage");
            }
        }

        private VolumePerVolumeMeasure epentAvField; 

        /// <summary>
        /// neo-Pentane (eC5) ppm (minimum). 
        /// </summary>
		[Description("neo-Pentane (eC5) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("epentMn")]
        public VolumePerVolumeMeasure EpentMin {
            get {
                return epentMnField;
            } 
            set {
                epentMnField = value;
                NotifyPropertyChanged("EpentMin");
            }
        }

        private VolumePerVolumeMeasure epentMnField; 

        /// <summary>
        /// neo-Pentane (eC5) ppm (maximum). 
        /// </summary>
		[Description("neo-Pentane (eC5) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("epentMx")]
        public VolumePerVolumeMeasure EpentMax {
            get {
                return epentMxField;
            } 
            set {
                epentMxField = value;
                NotifyPropertyChanged("EpentMax");
            }
        }

        private VolumePerVolumeMeasure epentMxField; 

        /// <summary>
        /// iso-Hexane (iC6) ppm (average). 
        /// </summary>
		[Description("iso-Hexane (iC6) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ihexAv")]
        public VolumePerVolumeMeasure IhexAverage {
            get {
                return ihexAvField;
            } 
            set {
                ihexAvField = value;
                NotifyPropertyChanged("IhexAverage");
            }
        }

        private VolumePerVolumeMeasure ihexAvField; 

        /// <summary>
        /// iso-Hexane (iC6) ppm (minimum). 
        /// </summary>
		[Description("iso-Hexane (iC6) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ihexMn")]
        public VolumePerVolumeMeasure IhexMin {
            get {
                return ihexMnField;
            } 
            set {
                ihexMnField = value;
                NotifyPropertyChanged("IhexMin");
            }
        }

        private VolumePerVolumeMeasure ihexMnField; 

        /// <summary>
        /// iso-Hexane (iC6) ppm (maximum). 
        /// </summary>
		[Description("iso-Hexane (iC6) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ihexMx")]
        public VolumePerVolumeMeasure IhexMax {
            get {
                return ihexMxField;
            } 
            set {
                ihexMxField = value;
                NotifyPropertyChanged("IhexMax");
            }
        }

        private VolumePerVolumeMeasure ihexMxField; 

        /// <summary>
        /// nor-Hexane (nC6) ppm (average). 
        /// </summary>
		[Description("nor-Hexane (nC6) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("nhexAv")]
        public VolumePerVolumeMeasure NhexAverage {
            get {
                return nhexAvField;
            } 
            set {
                nhexAvField = value;
                NotifyPropertyChanged("NhexAverage");
            }
        }

        private VolumePerVolumeMeasure nhexAvField; 

        /// <summary>
        /// nor-Hexane (nC6) ppm (minimum). 
        /// </summary>
		[Description("nor-Hexane (nC6) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("nhexMn")]
        public VolumePerVolumeMeasure NhexMin {
            get {
                return nhexMnField;
            } 
            set {
                nhexMnField = value;
                NotifyPropertyChanged("NhexMin");
            }
        }

        private VolumePerVolumeMeasure nhexMnField; 

        /// <summary>
        /// nor-Hexane (nC6) ppm (maximum). 
        /// </summary>
		[Description("nor-Hexane (nC6) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("nhexMx")]
        public VolumePerVolumeMeasure NhexMax {
            get {
                return nhexMxField;
            } 
            set {
                nhexMxField = value;
                NotifyPropertyChanged("NhexMax");
            }
        }

        private VolumePerVolumeMeasure nhexMxField; 

        /// <summary>
        /// Carbon Dioxide ppm (average). 
        /// </summary>
		[Description("Carbon Dioxide ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("co2Av")]
        public VolumePerVolumeMeasure Co2Average {
            get {
                return co2AvField;
            } 
            set {
                co2AvField = value;
                NotifyPropertyChanged("Co2Average");
            }
        }

        private VolumePerVolumeMeasure co2AvField; 

        /// <summary>
        /// Carbon Dioxide ppm (minimum). 
        /// </summary>
		[Description("Carbon Dioxide ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("co2Mn")]
        public VolumePerVolumeMeasure Co2Min {
            get {
                return co2MnField;
            } 
            set {
                co2MnField = value;
                NotifyPropertyChanged("Co2Min");
            }
        }

        private VolumePerVolumeMeasure co2MnField; 

        /// <summary>
        /// Carbon Dioxide ppm (maximum). 
        /// </summary>
		[Description("Carbon Dioxide ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("co2Mx")]
        public VolumePerVolumeMeasure Co2Max {
            get {
                return co2MxField;
            } 
            set {
                co2MxField = value;
                NotifyPropertyChanged("Co2Max");
            }
        }

        private VolumePerVolumeMeasure co2MxField; 

        /// <summary>
        /// Hydrogen Sulfide (average) ppm. 
        /// </summary>
		[Description("Hydrogen Sulfide (average) ppm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("h2sAv")]
        public VolumePerVolumeMeasure H2sAverage {
            get {
                return h2sAvField;
            } 
            set {
                h2sAvField = value;
                NotifyPropertyChanged("H2sAverage");
            }
        }

        private VolumePerVolumeMeasure h2sAvField; 

        /// <summary>
        /// Hydrogen Sulfide (minimum) ppm. 
        /// </summary>
		[Description("Hydrogen Sulfide (minimum) ppm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("h2sMn")]
        public VolumePerVolumeMeasure H2sMin {
            get {
                return h2sMnField;
            } 
            set {
                h2sMnField = value;
                NotifyPropertyChanged("H2sMin");
            }
        }

        private VolumePerVolumeMeasure h2sMnField; 

        /// <summary>
        /// Hydrogen Sulfide (maximum) ppm. 
        /// </summary>
		[Description("Hydrogen Sulfide (maximum) ppm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("h2sMx")]
        public VolumePerVolumeMeasure H2sMax {
            get {
                return h2sMxField;
            } 
            set {
                h2sMxField = value;
                NotifyPropertyChanged("H2sMax");
            }
        }

        private VolumePerVolumeMeasure h2sMxField; 

        /// <summary>
        /// Acetylene. 
        /// </summary>
		[Description("Acetylene.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("acetylene")]
        public VolumePerVolumeMeasure Acetylene {
            get {
                return acetyleneField;
            } 
            set {
                acetyleneField = value;
                NotifyPropertyChanged("Acetylene");
            }
        }

        private VolumePerVolumeMeasure acetyleneField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Mud Gas Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_mudGas", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Mud Gas Component Schema")]
    public partial class MudGas : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average total gas. 
        /// </summary>
		[Description("Average total gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasAv")]
        public VolumePerVolumeMeasure GasAverage {
            get {
                return gasAvField;
            } 
            set {
                gasAvField = value;
                NotifyPropertyChanged("GasAverage");
            }
        }

        private VolumePerVolumeMeasure gasAvField; 

        /// <summary>
        /// Peak gas reading. 
        /// </summary>
		[Description("Peak gas reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasPeak")]
        public VolumePerVolumeMeasure GasPeak {
            get {
                return gasPeakField;
            } 
            set {
                gasPeakField = value;
                NotifyPropertyChanged("GasPeak");
            }
        }

        private VolumePerVolumeMeasure gasPeakField; 

        /// <summary>
        /// Type of gas peak. 
        /// </summary>
		[Description("Type of gas peak.")]
        [EnergisticsDataTypeAttribute(DataType = "GasPeakType")]
		[XmlElement("gasPeakType")]
        public GasPeakType? GasPeakType {
            get {
                return gasPeakTypeField;
            } 
            set {
                gasPeakTypeField = value;
                 this.GasPeakTypeSpecified = true;
                NotifyPropertyChanged("GasPeakType");
            }
        }

        private GasPeakType? gasPeakTypeField; 

        /// <summary>
        /// gasPeakTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasPeakTypeSpecified {
            get {
                return gasPeakTypeSpecifiedField;
            } 
            set {
                gasPeakTypeSpecifiedField = value;
                NotifyPropertyChanged("GasPeakTypeSpecified");
            }
        }

        private bool gasPeakTypeSpecifiedField; 

        /// <summary>
        /// Background gas reading. 
        /// </summary>
		[Description("Background gas reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasBackgnd")]
        public VolumePerVolumeMeasure GasBackgnd {
            get {
                return gasBackgndField;
            } 
            set {
                gasBackgndField = value;
                NotifyPropertyChanged("GasBackgnd");
            }
        }

        private VolumePerVolumeMeasure gasBackgndField; 

        /// <summary>
        /// Connection gas (average). 
        /// </summary>
		[Description("Connection gas (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasConAv")]
        public VolumePerVolumeMeasure GasConAverage {
            get {
                return gasConAvField;
            } 
            set {
                gasConAvField = value;
                NotifyPropertyChanged("GasConAverage");
            }
        }

        private VolumePerVolumeMeasure gasConAvField; 

        /// <summary>
        /// Connection gas (maximum). 
        /// </summary>
		[Description("Connection gas (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasConMx")]
        public VolumePerVolumeMeasure GasConMax {
            get {
                return gasConMxField;
            } 
            set {
                gasConMxField = value;
                NotifyPropertyChanged("GasConMax");
            }
        }

        private VolumePerVolumeMeasure gasConMxField; 

        /// <summary>
        /// Trip gas last reading. 
        /// </summary>
		[Description("Trip gas last reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasTrip")]
        public VolumePerVolumeMeasure GasTrip {
            get {
                return gasTripField;
            } 
            set {
                gasTripField = value;
                NotifyPropertyChanged("GasTrip");
            }
        }

        private VolumePerVolumeMeasure gasTripField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lithostratigraphyStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lithostratigraphyStruct", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the lithostratigraphyStruct xsd type.")]
    public partial class LithostratigraphyStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LithostratigraphyStruct class.
        /// </summary>
        public LithostratigraphyStruct() {}

        /// <summary>
        /// Initializes a new instance of the LithostratigraphyStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public LithostratigraphyStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The unit of lithostratigraphy.
        /// </summary>
		[Description("The unit of lithostratigraphy.")]
        [EnergisticsDataTypeAttribute(DataType = "LithostratigraphyUnit")]
        [XmlAttribute("kind")]
		
        public LithostratigraphyUnit Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private LithostratigraphyUnit kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the chronostratigraphyStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="chronostratigraphyStruct", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the chronostratigraphyStruct xsd type.")]
    public partial class ChronostratigraphyStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ChronostratigraphyStruct class.
        /// </summary>
        public ChronostratigraphyStruct() {}

        /// <summary>
        /// Initializes a new instance of the ChronostratigraphyStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public ChronostratigraphyStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The unit of chronostratigraphy.
        /// </summary>
		[Description("The unit of chronostratigraphy.")]
        [EnergisticsDataTypeAttribute(DataType = "ChronostratigraphyUnit")]
        [XmlAttribute("kind")]
		
        public ChronostratigraphyUnit Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private ChronostratigraphyUnit kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Message object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_message", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Message object.")]
    public partial class Message : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the message. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the message.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the risk. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the risk.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A reference to an object that is defined within the context of a wellbore.
        /// </summary>
		[Description("A reference to an object that is defined within the  context of a wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refObjectString")]
		[XmlElement("objectReference")]
        public RefObjectString ObjectReference {
            get {
                return objectReferenceField;
            } 
            set {
                objectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private RefObjectString objectReferenceField; 

        /// <summary>
        /// A reference to an sub-object that is defined within the context of the object referenced by objectReference. This should only refer to recurring components of a growing object.
        /// </summary>
		[Description("A reference to an sub-object that is defined within the  context of the object referenced by objectReference. This should only refer to recurring components of a growing object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refObjectString")]
		[XmlElement("subObjectReference")]
        public RefObjectString SubObjectReference {
            get {
                return subObjectReferenceField;
            } 
            set {
                subObjectReferenceField = value;
                NotifyPropertyChanged("SubObjectReference");
            }
        }

        private RefObjectString subObjectReferenceField; 

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
		[Description("A code used to define rig activity.")]
        [EnergisticsDataTypeAttribute(DataType = "ActivityCode")]
		[XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set {
                activityCodeField = value;
                 this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private ActivityCode activityCodeField; 

        /// <summary>
        /// activityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ActivityCodeSpecified {
            get {
                return activityCodeSpecifiedField;
            } 
            set {
                activityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private bool activityCodeSpecifiedField; 

        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
		[StringLength(32)]
        [Description("Custom string to further define an activity.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("detailActivity")]
        public string DetailActivity {
            get {
                return detailActivityField;
            } 
            set {
                detailActivityField = value;
                NotifyPropertyChanged("DetailActivity");
            }
        }

        private string detailActivityField; 

        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[Description("Along hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[Description("Along hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return mdBitField;
            } 
            set {
                mdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord mdBitField; 

        /// <summary>
        /// Message type. 
        /// </summary>
		[Required]
        [Description("Message type.")]
        [EnergisticsDataTypeAttribute(DataType = "MessageType")]
		[XmlElement("typeMessage")]
        public MessageType? TypeMessage {
            get {
                return typeMessageField;
            } 
            set {
                typeMessageField = value;
                 this.TypeMessageSpecified = true;
                NotifyPropertyChanged("TypeMessage");
            }
        }

        
        private bool TypeMessageSpecifiedField = false;
        
        /// <summary>
        /// TypeMessageSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeMessageSpecified {
            get {
                return TypeMessageSpecifiedField;
            } 
            set {
                TypeMessageSpecifiedField = value;
                NotifyPropertyChanged("TypeMessageSpecified");
            }
        }
        
        private MessageType? typeMessageField; 

        /// <summary>
        /// Message text. 
        /// </summary>
		[StringLength(4000)]
        [Description("Message text.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("messageText")]
        public string MessageText {
            get {
                return messageTextField;
            } 
            set {
                messageTextField = value;
                NotifyPropertyChanged("MessageText");
            }
        }

        private string messageTextField; 

        /// <summary>
        /// Any extra numeric data. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
		[Description("Any extra numeric data. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "indexedObject")]
		[XmlElement("param")]
        public List<IndexedObject> Param {
            get {
                return paramField;
            } 
            set {
                paramField = value;
                NotifyPropertyChanged("Param");
            }
        }

         /// <summary>
         /// bool to indicate if Param has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParamSpecified
         {
             get {
             if(paramField!=null)
                 return paramField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> paramField; 

        /// <summary>
        /// Severity of incident. 
        /// </summary>
		[Description("Severity of incident.")]
        [EnergisticsDataTypeAttribute(DataType = "MessageSeverity")]
		[XmlElement("severity")]
        public MessageSeverity? Severity {
            get {
                return severityField;
            } 
            set {
                severityField = value;
                 this.SeveritySpecified = true;
                NotifyPropertyChanged("Severity");
            }
        }

        private MessageSeverity? severityField; 

        /// <summary>
        /// severitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SeveritySpecified {
            get {
                return severitySpecifiedField;
            } 
            set {
                severitySpecifiedField = value;
                NotifyPropertyChanged("SeveritySpecified");
            }
        }

        private bool severitySpecifiedField; 

        /// <summary>
        /// A warning probability (applies to warning).
        /// </summary>
		[Description("A warning probability (applies to warning).")]
        [EnergisticsDataTypeAttribute(DataType = "MessageProbability")]
		[XmlElement("warnProbability")]
        public MessageProbability? WarnProbability {
            get {
                return warnProbabilityField;
            } 
            set {
                warnProbabilityField = value;
                 this.WarnProbabilitySpecified = true;
                NotifyPropertyChanged("WarnProbability");
            }
        }

        private MessageProbability? warnProbabilityField; 

        /// <summary>
        /// warnProbabilitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WarnProbabilitySpecified {
            get {
                return warnProbabilitySpecifiedField;
            } 
            set {
                warnProbabilitySpecifiedField = value;
                NotifyPropertyChanged("WarnProbabilitySpecified");
            }
        }

        private bool warnProbabilitySpecifiedField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Log - Curve Information The order of the data should correspond to the 'direction'.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_logData", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Log - Curve Information The order of the data should correspond to the 'direction'.")]
    public partial class LogData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A comma delimited list of curve mnemonics. Each mnemonic should only occur once in the list. The order of the mnemonics defines the order of the delimited values in elements "unitList" and "data". If the index curve is specified then it must be first in the list. This is an API "column-identifier" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Required]
        [Description("A comma delimited list of curve mnemonics. Each mnemonic should only occur once in the list. The order of the mnemonics defines the order of the  delimited values in elements \"unitList\" and \"data\".  If the index curve is specified then it must be first in the list. This is an API \"column-identifier\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("mnemonicList")]
        public string MnemonicList {
            get {
                return mnemonicListField;
            } 
            set {
                mnemonicListField = value;
                NotifyPropertyChanged("MnemonicList");
            }
        }

        private string mnemonicListField; 

        /// <summary>
        /// A comma delimited list of unit of measure acronyms that represent the values in "data". The units are in the same order as the mnemonics in element mnemonicList. Each unit value must match the value in the logCurveInfo structure for that curve. A null value (i.e., unitless as opposed to dimensionless) will be defined by adjacent commas.
        /// </summary>
		[Required]
        [Description("A comma delimited list of unit of measure acronyms that represent the values in \"data\". The units are in the same order as the mnemonics in element mnemonicList. Each unit value must match the value in the logCurveInfo structure for that curve. A null value (i.e., unitless as opposed to dimensionless) will be defined by adjacent commas.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("unitList")]
        public string UnitList {
            get {
                return unitListField;
            } 
            set {
                unitListField = value;
                NotifyPropertyChanged("UnitList");
            }
        }

        private string unitListField; 

        /// <summary>
        /// The actual data corresponding to the curves defined in the "mnemonicList" element. Normally a comma delimited list of data values (see dataDelimiter) with one value for each curve on the log (e.g., "xxx,yyy, zzz"). For array curves, the value of the array curve will be a space delimited list of values that are contained within the commas that delimit the value for that curve (e.g., "xxx,aa bb cc,zzz"). This essentially represents one row of a table where the curve mnemonics represent the column headings. This is an API "data-node" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("The actual data corresponding to the curves defined in  the \"mnemonicList\" element. Normally a comma delimited list of data values (see dataDelimiter) with one  value for each curve on the log (e.g., \"xxx,yyy, zzz\"). For array curves, the value of the array curve will be a space delimited list of values that are contained within the commas that delimit the value for that curve (e.g., \"xxx,aa bb cc,zzz\"). This essentially represents one row of a table where the curve  mnemonics represent the column headings. This is an API \"data-node\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("data")]
        public List<string> Data {
            get {
                return dataField;
            } 
            set {
                dataField = value;
                NotifyPropertyChanged("Data");
            }
        }

         /// <summary>
         /// bool to indicate if Data has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DataSpecified
         {
             get {
             if(dataField!=null)
                 return dataField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> dataField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Metadata by which the array structure of a compound value is defined. This defines one axis of an array. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_axisDefinition", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Metadata by which the array structure of a compound value is defined. This defines one axis of an array. ")]
    public partial class AxisDefinition : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The order of this axis. The order should begin with one and increment by one for each additional axis. The order indicates how fast the index of the axis varies in the serialized list of values. The index of an axis with an order of one varies the slowest. The index of an axis with an order of two varies the next slowest. And so on. This is the same ordering that is used in the C programming language. For example, the following array: [ x axis ] | z11 z12 z13 y axis: z21 z22 z23 | z31 z32 z33 | z41 z42 z43 may be encoded as follows: axisDefinition[order=1].name='x' axisDefinition[order=1].count='3' axisDefinition[order=2].name='y' axisDefinition[order=2].count='4' { z11 z21 z31 z41 z12 z22 z32 z42 z13 z23 z33 z43 } or alternatively: axisDefinition[order=1].name='y' axisDefinition[order=1].count='4' axisDefinition[order=2].name='x' axisDefinition[order=2].count='3' { z11 z12 z13 z21 z22 z23 z31 z32 z33 z41 z42 z43 } STORE UNIQUE KEY: When accessed via the Store Interface, the "order" must be unique. 
        /// </summary>
		[Required]
        [Description("The order of this axis. The order should   begin with one and increment by one for each additional axis.  The order indicates how fast the index of the axis varies  in the serialized list of values.  The index of an axis with an order of one varies the slowest. The index of an axis with an order of two varies the next slowest.  And so on. This is the same ordering that is used in the C programming language. For example, the following array:          [   x axis  ]    |     z11  z12  z13 y axis:  z21  z22  z23    |     z31  z32  z33    |     z41  z42  z43 may be encoded as follows: axisDefinition[order=1].name='x' axisDefinition[order=1].count='3' axisDefinition[order=2].name='y' axisDefinition[order=2].count='4' { z11 z21 z31 z41 z12 z22 z32 z42 z13 z23 z33 z43 } or alternatively: axisDefinition[order=1].name='y' axisDefinition[order=1].count='4' axisDefinition[order=2].name='x' axisDefinition[order=2].count='3' { z11 z12 z13 z21 z22 z23 z31 z32 z33 z41 z42 z43 } STORE UNIQUE KEY: When accessed via the Store Interface, the \"order\" must be unique.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("order")]
        public short? Order {
            get {
                return orderField;
            } 
            set {
                orderField = value;
                NotifyPropertyChanged("Order");
            }
        }

        private short? orderField; 

        /// <summary>
        /// The count of elements along this axis of the array.
        /// </summary>
		[Required]
        [Description("The count of elements along this axis of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("count")]
        public short? Count {
            get {
                return countField;
            } 
            set {
                countField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private short? countField; 

        /// <summary>
        /// The name of the array axis.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the array axis.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The property type by which the array axis is classified.
        /// </summary>
		[StringLength(64)]
        [Description("The property type by which the array axis is classified.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("propertyType")]
        public string PropertyType {
            get {
                return propertyTypeField;
            } 
            set {
                propertyTypeField = value;
                NotifyPropertyChanged("PropertyType");
            }
        }

        private string propertyTypeField; 

        /// <summary>
        /// A string representing the units of measure of the axis values.
        /// </summary>
		[StringLength(24)]
        [Description("A string representing the units of measure of the axis values.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
		[XmlElement("uom")]
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// The serialziation of the axis positions of an array as a whitespace-delimited list values of type xsd:double. If the length of this list is less than 'count' then the difference in the last two values represents the increment to be used to fill out the list. For example, the list '2 4' with count=4 represents the list '2 4 6 8'. Note: This has an underlying string type because .NET will not properly handle a "list of double".
        /// </summary>
        [XmlElement("doubleValues")]
        [EnergisticsDataTypeAttribute(DataType = "listOfString")]
        public string DoubleValues {
            get {
                return doubleValuesField;
            } 
            set {
                if (value != null && StringValuesSpecified) throw new Exception("Cannot set property DoubleValues when property StringValues is already set");
                doubleValuesField = value;
                DoubleValuesSpecified = (value!=null);
                NotifyPropertyChanged("DoubleValues");
            }
        }

        private string doubleValuesField; 
        private bool doubleValuesSpecified = false; 

        /// <summary>
        /// bool to indicate if DoubleValues has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DoubleValuesSpecified
        {
            get {
                return doubleValuesSpecified;
            }
            set {
                doubleValuesSpecified= value;
            }
        }

        /// <summary>
        /// The serialziation of the axis positions of an array as a whitespace-delimited list values of type xsd:String. Note: the serialization of string elements with embedded whitespace cannot be properly decoded.
        /// </summary>
        [XmlElement("stringValues")]
        [EnergisticsDataTypeAttribute(DataType = "listOfString")]
        public string StringValues {
            get {
                return stringValuesField;
            } 
            set {
                if (value != null && DoubleValuesSpecified) throw new Exception("Cannot set property StringValues when property DoubleValues is already set");
                stringValuesField = value;
                StringValuesSpecified = (value!=null);
                NotifyPropertyChanged("StringValues");
            }
        }

        private string stringValuesField; 
        private bool stringValuesSpecified = false; 

        /// <summary>
        /// bool to indicate if StringValues has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StringValuesSpecified
        {
            get {
                return stringValuesSpecified;
            }
            set {
                stringValuesSpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType1? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType1? ItemElementNameField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Log - Curve Information
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_logCurveInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML Log - Curve Information")]
    public partial class LogCurveInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The curve name. This must be unique for all curves in a log. The naming authority for the mnemonic can be catptured in the namingSystem attribute. Since both the mnemonic and uid have similar requirements within the context of a WITSML server, the uid can be derived from the mnemonic (e.g., by converting blank to underscore).
        /// </summary>
		[Required]
        [Description("The curve name.   This must be unique for all curves in a log. The naming authority for the mnemonic can be catptured in the namingSystem attribute. Since both the mnemonic and uid have similar requirements within the context  of a WITSML server, the uid can be derived from the mnemonic (e.g., by converting blank to underscore).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "shortNameStruct")]
		[XmlElement("mnemonic")]
        public ShortNameStruct Mnemonic {
            get {
                return mnemonicField;
            } 
            set {
                mnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private ShortNameStruct mnemonicField; 

        /// <summary>
        /// The curve classification obtained from a lookup in the vendors mnemonic catalog.
        /// </summary>
		[StringLength(256)]
        [Description("The curve classification obtained from a lookup in the vendors  mnemonic catalog.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("classWitsml")]
        public string ClassWitsml {
            get {
                return classWitsmlField;
            } 
            set {
                classWitsmlField = value;
                NotifyPropertyChanged("ClassWitsml");
            }
        }

        private string classWitsmlField; 

        /// <summary>
        /// The count relative to (possibly) repeating values of classWitsml. This is used to indicate something like the first pump, second pump, etc.
        /// </summary>
		[Description("The count relative to (possibly) repeating values of classWitsml. This is used to indicate something like the first pump, second pump, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("classIndex")]
        public short? ClassIndex {
            get {
                return classIndexField;
            } 
            set {
                classIndexField = value;
                 this.ClassIndexSpecified = true;
                NotifyPropertyChanged("ClassIndex");
            }
        }

        private short? classIndexField; 

        /// <summary>
        /// classIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ClassIndexSpecified {
            get {
                return classIndexSpecifiedField;
            } 
            set {
                classIndexSpecifiedField = value;
                NotifyPropertyChanged("ClassIndexSpecified");
            }
        }

        private bool classIndexSpecifiedField; 

        /// <summary>
        /// Unit of measurement of the data values. 
        /// </summary>
		[StringLength(24)]
        [Description("Unit of measurement of the data values.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
		[XmlElement("unit")]
        public string Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string unitField; 

        /// <summary>
        /// Name alias for this trace. The naming authority for the mnemonic can be catptured in the namingSystem attribute.
        /// </summary>
		[Description("Name alias for this trace. The naming authority for the mnemonic can be catptured in the namingSystem attribute.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "shortNameStruct")]
		[XmlElement("mnemAlias")]
        public ShortNameStruct MnemAlias {
            get {
                return mnemAliasField;
            } 
            set {
                mnemAliasField = value;
                NotifyPropertyChanged("MnemAlias");
            }
        }

        private ShortNameStruct mnemAliasField; 

        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e., when the null value representation is not explicitly defined). If a null value is defined in the logCurveInfo, it overrides any null value specified at the logHeader level. An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
		[StringLength(32)]
        [Description("An empty string is the default representation of a null value for a  curve (i.e., when the null value representation is not explicitly defined).  If a null value is defined in the logCurveInfo, it overrides any null value specified at the  logHeader level. An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited array. Specifying a null value also makes it easier to transform data back to a  legacy format without having to scan the data to insure that the null pattern  does not exist in the data.")]
        [EnergisticsDataTypeAttribute(DataType = "encodedValueString")]
		[XmlElement("nullValue")]
        public string NullValue {
            get {
                return nullValueField;
            } 
            set {
                nullValueField = value;
                NotifyPropertyChanged("NullValue");
            }
        }

        private string nullValueField; 

        /// <summary>
        /// True (true or 1) if this curve is a candidate to be a primary index. False (false or 0) or not given, indicates otherwise. An index curve should monotonically change when sorted on its own values (i.e., no duplicates). 
        /// </summary>
		[Description("True (true or 1) if this curve is a candidate to be a primary index. False (false or 0) or not given, indicates otherwise. An index curve should monotonically change when sorted on its own values (i.e., no duplicates).")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("alternateIndex")]
        public bool? AlternateIndex {
            get {
                return alternateIndexField;
            } 
            set {
                alternateIndexField = value;
                 this.AlternateIndexSpecified = true;
                NotifyPropertyChanged("AlternateIndex");
            }
        }

        private bool? alternateIndexField; 

        /// <summary>
        /// alternateIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AlternateIndexSpecified {
            get {
                return alternateIndexSpecifiedField;
            } 
            set {
                alternateIndexSpecifiedField = value;
                NotifyPropertyChanged("AlternateIndexSpecified");
            }
        }

        private bool alternateIndexSpecifiedField; 

        /// <summary>
        /// A pointer to the wellDatum that represents the values of this trace. This is only relevant for measured depths, vertical depths or elevations.
        /// </summary>
		[Description("A pointer to the wellDatum that represents the values of this trace. This is only relevant for measured depths, vertical depths or elevations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellDatum")]
        public RefNameString WellDatum {
            get {
                return wellDatumField;
            } 
            set {
                wellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

        private RefNameString wellDatumField; 

        /// <summary>
        /// The minimum index value of any valid data point in the curve. Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API "column-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("The minimum index value of any valid data point in the curve.  Null values are excluded from this determination. The value is the same regardless of the direction of the curve.  This is an API \"column-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("minIndex")]
        public GenericMeasure MinIndex {
            get {
                return minIndexField;
            } 
            set {
                minIndexField = value;
                NotifyPropertyChanged("MinIndex");
            }
        }

        private GenericMeasure minIndexField; 

        /// <summary>
        /// The maximum index value of any valid data point in the curve. Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API "column-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("The maximum index value of any valid data point in the curve.  Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API \"column-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("maxIndex")]
        public GenericMeasure MaxIndex {
            get {
                return maxIndexField;
            } 
            set {
                maxIndexField = value;
                NotifyPropertyChanged("MaxIndex");
            }
        }

        private GenericMeasure maxIndexField; 

        /// <summary>
        /// The minimum index value of any valid data point in the curve. Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API "column-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("The minimum index value of any valid data point in the curve.  Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API \"column-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("minDateTimeIndex")]
        public Timestamp? MinDateTimeIndex {
            get {
                return minDateTimeIndexField;
            } 
            set {
                minDateTimeIndexField = value;
                 this.MinDateTimeIndexSpecified = true;
                NotifyPropertyChanged("MinDateTimeIndex");
            }
        }

        private Timestamp? minDateTimeIndexField; 

        /// <summary>
        /// minDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MinDateTimeIndexSpecified {
            get {
                return minDateTimeIndexSpecifiedField;
            } 
            set {
                minDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("MinDateTimeIndexSpecified");
            }
        }

        private bool minDateTimeIndexSpecifiedField; 

        /// <summary>
        /// The maximum index value of any valid data point in the curve. Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API "column-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("The maximum index value of any valid data point in the curve.  Null values are excluded from this determination. The value is the same regardless of the direction of the curve. This is an API \"column-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("maxDateTimeIndex")]
        public Timestamp? MaxDateTimeIndex {
            get {
                return maxDateTimeIndexField;
            } 
            set {
                maxDateTimeIndexField = value;
                 this.MaxDateTimeIndexSpecified = true;
                NotifyPropertyChanged("MaxDateTimeIndex");
            }
        }

        private Timestamp? maxDateTimeIndexField; 

        /// <summary>
        /// maxDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaxDateTimeIndexSpecified {
            get {
                return maxDateTimeIndexSpecifiedField;
            } 
            set {
                maxDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("MaxDateTimeIndexSpecified");
            }
        }

        private bool maxDateTimeIndexSpecifiedField; 

        /// <summary>
        /// Description of the curve. 
        /// </summary>
		[StringLength(256)]
        [Description("Description of the curve.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("curveDescription")]
        public string CurveDescription {
            get {
                return curveDescriptionField;
            } 
            set {
                curveDescriptionField = value;
                NotifyPropertyChanged("CurveDescription");
            }
        }

        private string curveDescriptionField; 

        /// <summary>
        /// Offset of sensor from a downhole equipment vertical reference (the drill bit, for MWD logs; the tool zero reference for wireline logs). This element is only informative (log values are presented at actual depth, not requiring subtraction of an offset).
        /// </summary>
		[Description("Offset of sensor from a downhole equipment vertical reference (the drill bit, for MWD logs;  the tool zero reference for wireline logs).  This element is only informative (log values are presented at actual depth, not requiring subtraction of an offset).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("sensorOffset")]
        public LengthMeasure SensorOffset {
            get {
                return sensorOffsetField;
            } 
            set {
                sensorOffsetField = value;
                NotifyPropertyChanged("SensorOffset");
            }
        }

        private LengthMeasure sensorOffsetField; 

        /// <summary>
        /// Data source, could be tool name/id. 
        /// </summary>
		[StringLength(32)]
        [Description("Data source, could be tool name/id.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("dataSource")]
        public string DataSource {
            get {
                return dataSourceField;
            } 
            set {
                dataSourceField = value;
                NotifyPropertyChanged("DataSource");
            }
        }

        private string dataSourceField; 

        /// <summary>
        /// Data density of sample in samples per length unit. 
        /// </summary>
		[Description("Data density of sample in samples per length unit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "perLengthMeasure")]
		[XmlElement("densData")]
        public PerLengthMeasure DensData {
            get {
                return densDataField;
            } 
            set {
                densDataField = value;
                NotifyPropertyChanged("DensData");
            }
        }

        private PerLengthMeasure densDataField; 

        /// <summary>
        /// State of trace data. 
        /// </summary>
		[Description("State of trace data.")]
        [EnergisticsDataTypeAttribute(DataType = "LogTraceState")]
		[XmlElement("traceState")]
        public LogTraceState? TraceState {
            get {
                return traceStateField;
            } 
            set {
                traceStateField = value;
                 this.TraceStateSpecified = true;
                NotifyPropertyChanged("TraceState");
            }
        }

        private LogTraceState? traceStateField; 

        /// <summary>
        /// traceStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TraceStateSpecified {
            get {
                return traceStateSpecifiedField;
            } 
            set {
                traceStateSpecifiedField = value;
                NotifyPropertyChanged("TraceStateSpecified");
            }
        }

        private bool traceStateSpecifiedField; 

        /// <summary>
        /// Origin of trace data. 
        /// </summary>
		[Description("Origin of trace data.")]
        [EnergisticsDataTypeAttribute(DataType = "LogTraceOrigin")]
		[XmlElement("traceOrigin")]
        public LogTraceOrigin? TraceOrigin {
            get {
                return traceOriginField;
            } 
            set {
                traceOriginField = value;
                 this.TraceOriginSpecified = true;
                NotifyPropertyChanged("TraceOrigin");
            }
        }

        private LogTraceOrigin? traceOriginField; 

        /// <summary>
        /// traceOriginSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TraceOriginSpecified {
            get {
                return traceOriginSpecifiedField;
            } 
            set {
                traceOriginSpecifiedField = value;
                NotifyPropertyChanged("TraceOriginSpecified");
            }
        }

        private bool traceOriginSpecifiedField; 

        /// <summary>
        /// Log data type.
        /// </summary>
		[Required]
        [Description("Log data type.")]
        [EnergisticsDataTypeAttribute(DataType = "LogDataType")]
		[XmlElement("typeLogData")]
        public LogDataType? TypeLogData {
            get {
                return typeLogDataField;
            } 
            set {
                typeLogDataField = value;
                 this.TypeLogDataSpecified = true;
                NotifyPropertyChanged("TypeLogData");
            }
        }

        
        private bool TypeLogDataSpecifiedField = false;
        
        /// <summary>
        /// TypeLogDataSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeLogDataSpecified {
            get {
                return TypeLogDataSpecifiedField;
            } 
            set {
                TypeLogDataSpecifiedField = value;
                NotifyPropertyChanged("TypeLogDataSpecified");
            }
        }
        
        private LogDataType? typeLogDataField; 

        /// <summary>
        /// Indicates that the curve is an array curve (i.e., multi-valued samples), and provides meta data by which an axis of the array can be understood. A separate definition is required for each axis of an N-dimensional array.
        /// </summary>
		[Description("Indicates that the curve is an array curve (i.e., multi-valued samples),  and provides meta data by which an axis of the array can be understood. A separate definition is required for each axis of an N-dimensional array.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_axisDefinition")]
		[XmlElement("axisDefinition")]
        public List<AxisDefinition> AxisDefinition {
            get {
                return axisDefinitionField;
            } 
            set {
                axisDefinitionField = value;
                NotifyPropertyChanged("AxisDefinition");
            }
        }

         /// <summary>
         /// bool to indicate if AxisDefinition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AxisDefinitionSpecified
         {
             get {
             if(axisDefinitionField!=null)
                 return axisDefinitionField.Count>0?true:false;
             else return false;
             }
         }
        private List<AxisDefinition> axisDefinitionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the shortNameStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="shortNameStruct", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the shortNameStruct xsd type.")]
    public partial class ShortNameStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ShortNameStruct class.
        /// </summary>
        public ShortNameStruct() {}

        /// <summary>
        /// Initializes a new instance of the ShortNameStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public ShortNameStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is (hopefully) unique.
        /// </summary>
		[StringLength(64)]
        [Description("The naming system within the name is (hopefully) unique.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("namingSystem")]
		
        public string NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private string namingSystemField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Log.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_log", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Log.")]
    public partial class Log : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the log. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the log.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the log. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the log.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the  behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("objectGrowing")]
        public bool? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set {
                objectGrowingField = value;
                 this.ObjectGrowingSpecified = true;
                NotifyPropertyChanged("ObjectGrowing");
            }
        }

        private bool? objectGrowingField; 

        /// <summary>
        /// objectGrowingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ObjectGrowingSpecified {
            get {
                return objectGrowingSpecifiedField;
            } 
            set {
                objectGrowingSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingSpecified");
            }
        }

        private bool objectGrowingSpecifiedField; 

        /// <summary>
        /// The data append rate (in seconds) of this growing object. This is an API server parameter releted to the "Special Handling Systematically Growing Objects" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("The data append rate (in seconds) of this growing object. This is an API server parameter releted to the \"Special Handling Systematically Growing Objects\" within a server.  See the relevant API specification for the  behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveBigCount")]
		[XmlElement("dataUpateRate")]
        public int? DataUpateRate {
            get {
                return dataUpateRateField;
            } 
            set {
                dataUpateRateField = value;
                 this.DataUpateRateSpecified = true;
                NotifyPropertyChanged("DataUpateRate");
            }
        }

        private int? dataUpateRateField; 

        /// <summary>
        /// dataUpateRateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DataUpateRateSpecified {
            get {
                return dataUpateRateSpecifiedField;
            } 
            set {
                dataUpateRateSpecifiedField = value;
                NotifyPropertyChanged("DataUpateRateSpecified");
            }
        }

        private bool dataUpateRateSpecifiedField; 

        /// <summary>
        /// This value is only relevant within the context of a server. True ("true" or "1") indicates that all curves have the same sensor offset from the downhole equipment vertical reference. False ("false" or 0") or not given indicates otherwise. For a growing log, a value of true will allow a query to use the the endIndex from the previous query as the startIndex of the next query.
        /// </summary>
		[Description("This value is only relevant within the context of a server. True (\"true\" or \"1\") indicates that all curves have the same sensor offset from the downhole equipment vertical reference.  False (\"false\" or 0\") or not given indicates otherwise. For a growing log, a value of true will allow a query  to use the the endIndex from the previous query as the startIndex of the next query.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("curveSensorsAligned")]
        public bool? CurveSensorsAligned {
            get {
                return curveSensorsAlignedField;
            } 
            set {
                curveSensorsAlignedField = value;
                 this.CurveSensorsAlignedSpecified = true;
                NotifyPropertyChanged("CurveSensorsAligned");
            }
        }

        private bool? curveSensorsAlignedField; 

        /// <summary>
        /// curveSensorsAlignedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurveSensorsAlignedSpecified {
            get {
                return curveSensorsAlignedSpecifiedField;
            } 
            set {
                curveSensorsAlignedSpecifiedField = value;
                NotifyPropertyChanged("CurveSensorsAlignedSpecified");
            }
        }

        private bool curveSensorsAlignedSpecifiedField; 

        /// <summary>
        /// The name of the grouping represented by curves in this log. A group represents a named combination of curves and the curves in a particular log should be represented in that list.
        /// </summary>
		[StringLength(50)]
        [Description("The name of the grouping represented by curves in this log. A group represents a named combination of curves and the curves in a particular log should be represented in that list.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("dataGroup")]
        public string DataGroup {
            get {
                return dataGroupField;
            } 
            set {
                dataGroupField = value;
                NotifyPropertyChanged("DataGroup");
            }
        }

        private string dataGroupField; 

        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of contractor who provided the service.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("serviceCompany")]
        public string ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string serviceCompanyField; 

        /// <summary>
        /// Log run number. This should normally be a number; however some legacy systems encode other information in this value.
        /// </summary>
		[StringLength(16)]
        [Description("Log run number. This should normally be a number; however  some legacy systems encode other information in this value.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("runNumber")]
        public string RunNumber {
            get {
                return runNumberField;
            } 
            set {
                runNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private string runNumberField; 

        /// <summary>
        /// The bottom hole assembly run number associated with this log. This should match the run number on the BHA run object.
        /// </summary>
		[Description("The bottom hole assembly run number associated with this log. This should match the run number on the BHA run object.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("bhaRunNumber")]
        public short? BhaRunNumber {
            get {
                return bhaRunNumberField;
            } 
            set {
                bhaRunNumberField = value;
                 this.BhaRunNumberSpecified = true;
                NotifyPropertyChanged("BhaRunNumber");
            }
        }

        private short? bhaRunNumberField; 

        /// <summary>
        /// bhaRunNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BhaRunNumberSpecified {
            get {
                return bhaRunNumberSpecifiedField;
            } 
            set {
                bhaRunNumberSpecifiedField = value;
                NotifyPropertyChanged("BhaRunNumberSpecified");
            }
        }

        private bool bhaRunNumberSpecifiedField; 

        /// <summary>
        /// Identifies the pass within the run.
        /// </summary>
		[StringLength(16)]
        [Description("Identifies the pass within the run.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("pass")]
        public string Pass {
            get {
                return passField;
            } 
            set {
                passField = value;
                NotifyPropertyChanged("Pass");
            }
        }

        private string passField; 

        /// <summary>
        /// Date and time that the log was created. 
        /// </summary>
		[Description("Date and time that the log was created.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("creationDate")]
        public Timestamp? CreationDate {
            get {
                return creationDateField;
            } 
            set {
                creationDateField = value;
                 this.CreationDateSpecified = true;
                NotifyPropertyChanged("CreationDate");
            }
        }

        private Timestamp? creationDateField; 

        /// <summary>
        /// creationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CreationDateSpecified {
            get {
                return creationDateSpecifiedField;
            } 
            set {
                creationDateSpecifiedField = value;
                NotifyPropertyChanged("CreationDateSpecified");
            }
        }

        private bool creationDateSpecifiedField; 

        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[StringLength(4000)]
        [Description("Description of item and details.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// The value delimiter in the data string. Defaults to a comma. Note that this does not affect any space delimited array data.
        /// </summary>
		[StringLength(2)]
        [Description("The value delimiter in the data string. Defaults to a comma. Note that this does not affect any space delimited array data.")]
        [EnergisticsDataTypeAttribute(DataType = "str2")]
		[XmlElement("dataDelimiter")]
        public string DataDelimiter {
            get {
                return dataDelimiterField;
            } 
            set {
                dataDelimiterField = value;
                NotifyPropertyChanged("DataDelimiter");
            }
        }

        private string dataDelimiterField; 

        /// <summary>
        /// Primary index type. 
        /// </summary>
		[Required]
        [Description("Primary index type.")]
        [EnergisticsDataTypeAttribute(DataType = "LogIndexType")]
		[XmlElement("indexType")]
        public LogIndexType? IndexType {
            get {
                return indexTypeField;
            } 
            set {
                indexTypeField = value;
                 this.IndexTypeSpecified = true;
                NotifyPropertyChanged("IndexType");
            }
        }

        
        private bool IndexTypeSpecifiedField = false;
        
        /// <summary>
        /// IndexTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexTypeSpecified {
            get {
                return IndexTypeSpecifiedField;
            } 
            set {
                IndexTypeSpecifiedField = value;
                NotifyPropertyChanged("IndexTypeSpecified");
            }
        }
        
        private LogIndexType? indexTypeField; 

        /// <summary>
        /// When the log header defines the direction as "Increasing", the startIndex is the starting (minimum) index value at which the first non-null data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first non-null data point is located. Either a quantity index set (start and end) or a date time index set must be given. If both sets are given then "indexType" and "indexCurve" must represent an elapsed time from "startDateTimeIndex". This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\",  the startIndex is the starting (minimum) index value at which the first non-null data point is located.  When the log header defines the direction as \"Decreasing\", the startIndex  is the starting (maximum) index value at which the first non-null data point is located. Either a quantity index set (start and end) or a date time index set must be given. If both sets are given then \"indexType\" and  \"indexCurve\" must represent an elapsed time from \"startDateTimeIndex\". This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("startIndex")]
        public GenericMeasure StartIndex {
            get {
                return startIndexField;
            } 
            set {
                startIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private GenericMeasure startIndexField; 

        /// <summary>
        /// When the log header defines the direction as "Increasing", the endIndex is the ending (maximum) index value at which the last non-null data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last non-null data point is located. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\", the endIndex  is the ending (maximum) index value at which the last non-null data point is located.   When the log header defines the direction as Decreasing, the endIndex is the ending  (minimum) index value at which the last non-null data point is located. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("endIndex")]
        public GenericMeasure EndIndex {
            get {
                return endIndexField;
            } 
            set {
                endIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private GenericMeasure endIndexField; 

        /// <summary>
        /// The sampling increment. Set to zero for unequal sampling. A non-zero value indicates that the data is regularly sampled even if it has an explicit index curve. If it is zero or not given then assume that it is non-regular even though it may be regular. The problem is that writers generally cannot guarantee the regularity of the log until after they have finished processing it For curves that are originally sampled at a constant increment, this value should be retained because calculated values may have cumulative errors.
        /// </summary>
		[Description("The sampling increment. Set to zero for unequal sampling. A non-zero value indicates that the data is regularly sampled even if it has an explicit index curve. If it is zero or not given then assume that it is non-regular even though it may be regular. The problem is that writers generally cannot guarantee the regularity of the log until after they have finished processing it For curves that are originally sampled at a constant increment, this value should be retained because calculated values may have cumulative errors.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ratioGenericMeasure")]
		[XmlElement("stepIncrement")]
        public RatioGenericMeasure StepIncrement {
            get {
                return stepIncrementField;
            } 
            set {
                stepIncrementField = value;
                NotifyPropertyChanged("StepIncrement");
            }
        }

        private RatioGenericMeasure stepIncrementField; 

        /// <summary>
        /// When the log header defines the direction as "Increasing", the startIndex is the starting (minimum) index value at which the first non-null data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first non-null data point is located. Either a quantity index set (start and end) or a date time index set must be given. If both sets are given then "indexType" and "indexCurve" must represent an elapsed time from "startDateTimeIndex". This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\",  the startIndex is the starting (minimum) index value at which the first non-null data point is located.  When the log header defines the direction as \"Decreasing\", the startIndex  is the starting (maximum) index value at which the first non-null data point is located. Either a quantity index set (start and end) or a date time index set must be given. If both sets are given then \"indexType\" and  \"indexCurve\" must represent an elapsed time from \"startDateTimeIndex\". This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("startDateTimeIndex")]
        public Timestamp? StartDateTimeIndex {
            get {
                return startDateTimeIndexField;
            } 
            set {
                startDateTimeIndexField = value;
                 this.StartDateTimeIndexSpecified = true;
                NotifyPropertyChanged("StartDateTimeIndex");
            }
        }

        private Timestamp? startDateTimeIndexField; 

        /// <summary>
        /// startDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateTimeIndexSpecified {
            get {
                return startDateTimeIndexSpecifiedField;
            } 
            set {
                startDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("StartDateTimeIndexSpecified");
            }
        }

        private bool startDateTimeIndexSpecifiedField; 

        /// <summary>
        /// When the log header defines the direction as "Increasing", the endIndex is the ending (maximum) index value at which the last non-null data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last non-null data point is located. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\", the endIndex  is the ending (maximum) index value at which the last non-null data point is located.   When the log header defines the direction as Decreasing, the endIndex is the ending  (minimum) index value at which the last non-null data point is located.  This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("endDateTimeIndex")]
        public Timestamp? EndDateTimeIndex {
            get {
                return endDateTimeIndexField;
            } 
            set {
                endDateTimeIndexField = value;
                 this.EndDateTimeIndexSpecified = true;
                NotifyPropertyChanged("EndDateTimeIndex");
            }
        }

        private Timestamp? endDateTimeIndexField; 

        /// <summary>
        /// endDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateTimeIndexSpecified {
            get {
                return endDateTimeIndexSpecifiedField;
            } 
            set {
                endDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("EndDateTimeIndexSpecified");
            }
        }

        private bool endDateTimeIndexSpecifiedField; 

        /// <summary>
        /// The sort order of the data row index values in the XML instance. For an "Increasing" direction the index value of consecutive data nodes are ascending. For a "Decreasing" direction the index value of consecutive data nodes are descending. The default direction is "Increasing". The direction of a log cannot be changed once it has been created. That is, this value cannot be updated in a server.
        /// </summary>
		[Description("The sort order of the data row index values in the XML instance. For an \"Increasing\" direction the index value of consecutive data nodes are ascending. For a \"Decreasing\" direction the index value of consecutive data nodes are descending. The default direction is \"Increasing\".  The direction of a log cannot be changed  once it has been created. That is, this value cannot be updated in a server.")]
        [EnergisticsDataTypeAttribute(DataType = "LogIndexDirection")]
		[XmlElement("direction")]
        public LogIndexDirection? Direction {
            get {
                return directionField;
            } 
            set {
                directionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        private LogIndexDirection? directionField; 

        /// <summary>
        /// directionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return directionSpecifiedField;
            } 
            set {
                directionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }

        private bool directionSpecifiedField; 

        /// <summary>
        /// The mnemonic of the index curve. Duplicate index values can exist in a log but a change of direction is not allowed. If a change of direction is required then a new log must be created. Some servers may eliminate (i.e., overwrite) duplicate indexes. The data values associated with this curve represent an API "node-index" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("The mnemonic of the index curve. Duplicate index values can exist in a log but a change of direction is not allowed. If a change of direction is required then a new log must be created. Some servers may eliminate (i.e., overwrite) duplicate indexes. The data values associated with this curve represent an API \"node-index\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("indexCurve")]
        public string IndexCurve {
            get {
                return indexCurveField;
            } 
            set {
                indexCurveField = value;
                NotifyPropertyChanged("IndexCurve");
            }
        }

        private string indexCurveField; 

        /// <summary>
        /// An empty string is the default representation of a null value for a curve (i.e. when the null value representation is not explicitly defined). If a null value representation is defined for a log, this becomes the default for all curves in that log (but can be overridden at the curve level). An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited array. Specifying a null value also makes it easier to transform data back to a legacy format without having to scan the data to insure that the null pattern does not exist in the data. 
        /// </summary>
		[StringLength(32)]
        [Description("An empty string is the default representation of a null value for a  curve (i.e. when the null value representation is not explicitly defined).  If a null value representation is defined for a log, this becomes the default for all curves in that log (but can be overridden at the curve level).   An empty string is always a valid null value representation in the comma delimited list. An empty string is not a valid null value representation within a space delimited array. Specifying a null value also makes it easier to transform data back to a  legacy format without having to scan the data to insure that the null pattern  does not exist in the data.")]
        [EnergisticsDataTypeAttribute(DataType = "encodedValueString")]
		[XmlElement("nullValue")]
        public string NullValue {
            get {
                return nullValueField;
            } 
            set {
                nullValueField = value;
                NotifyPropertyChanged("NullValue");
            }
        }

        private string nullValueField; 

        /// <summary>
        /// Log parameters. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats. A parameter name of "multipass" represents a boolean values ("true" or "false"). A "multipass" parameter value of "true" asserts that the object contains values for bhaRunNumber (or runNumber), passNumber and direction.
        /// </summary>
		[Description("Log parameters.   For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats. A parameter name of \"multipass\" represents a boolean values (\"true\" or \"false\"). A \"multipass\" parameter value of \"true\" asserts that the object contains values for  bhaRunNumber (or runNumber), passNumber and direction.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "indexedObject")]
		[XmlElement("logParam")]
        public List<IndexedObject> LogParam {
            get {
                return logParamField;
            } 
            set {
                logParamField = value;
                NotifyPropertyChanged("LogParam");
            }
        }

         /// <summary>
         /// bool to indicate if LogParam has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogParamSpecified
         {
             get {
             if(logParamField!=null)
                 return logParamField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> logParamField; 

        /// <summary>
        /// Container element for the log curve information. This is an API "column-definition" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("Container element for the log curve information.  This is an API \"column-definition\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_logCurveInfo")]
		[XmlElement("logCurveInfo")]
        public List<LogCurveInfo> LogCurveInfo {
            get {
                return logCurveInfoField;
            } 
            set {
                logCurveInfoField = value;
                NotifyPropertyChanged("LogCurveInfo");
            }
        }

         /// <summary>
         /// bool to indicate if LogCurveInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogCurveInfoSpecified
         {
             get {
             if(logCurveInfoField!=null)
                 return logCurveInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<LogCurveInfo> logCurveInfoField; 

        /// <summary>
        /// Container for one or more "rows" of log data. The use of more than one logData node represents a sparse view of the actual data and is contrained for use in the WITSML API for adding and updating sparse data. Any other usage should utilize only one instance of logData.
        /// </summary>
		[Description("Container for one or more \"rows\" of log data. The use of more than one logData node represents a sparse view of the actual data and  is contrained for use in the WITSML API for adding and updating sparse data.  Any other usage should utilize only one instance of logData.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_logData")]
		[XmlElement("logData")]
        public List<LogData> LogData {
            get {
                return logDataField;
            } 
            set {
                logDataField = value;
                NotifyPropertyChanged("LogData");
            }
        }

         /// <summary>
         /// bool to indicate if LogData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogDataSpecified
         {
             get {
             if(logDataField!=null)
                 return logDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<LogData> logDataField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The non-contextual content of a WITSML Formation Marker.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_formationMarker", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Formation Marker.")]
    public partial class FormationMarker : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the formation marker. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the formation marker.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the formation marker. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the formation marker.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Prognosed measured depth. 
        /// </summary>
		[Description("Prognosed measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdPrognosed")]
        public MeasuredDepthCoord MDPrognosed {
            get {
                return mdPrognosedField;
            } 
            set {
                mdPrognosedField = value;
                NotifyPropertyChanged("MDPrognosed");
            }
        }

        private MeasuredDepthCoord mdPrognosedField; 

        /// <summary>
        /// Prognosed true vertical depth. 
        /// </summary>
		[Description("Prognosed true vertical depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdPrognosed")]
        public WellVerticalDepthCoord TvdPrognosed {
            get {
                return tvdPrognosedField;
            } 
            set {
                tvdPrognosedField = value;
                NotifyPropertyChanged("TvdPrognosed");
            }
        }

        private WellVerticalDepthCoord tvdPrognosedField; 

        /// <summary>
        /// Sampled measured depth at top of marker. 
        /// </summary>
		[Required]
        [Description("Sampled measured depth at top of marker.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTopSample")]
        public MeasuredDepthCoord MDTopSample {
            get {
                return mdTopSampleField;
            } 
            set {
                mdTopSampleField = value;
                NotifyPropertyChanged("MDTopSample");
            }
        }

        private MeasuredDepthCoord mdTopSampleField; 

        /// <summary>
        /// Sampled true vertical depth at top of marker. 
        /// </summary>
		[Description("Sampled true vertical depth at top of marker.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTopSample")]
        public WellVerticalDepthCoord TvdTopSample {
            get {
                return tvdTopSampleField;
            } 
            set {
                tvdTopSampleField = value;
                NotifyPropertyChanged("TvdTopSample");
            }
        }

        private WellVerticalDepthCoord tvdTopSampleField; 

        /// <summary>
        /// Vertical thickness.
        /// </summary>
		[Description("Vertical thickness.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("thicknessBed")]
        public LengthMeasure ThicknessBed {
            get {
                return thicknessBedField;
            } 
            set {
                thicknessBedField = value;
                NotifyPropertyChanged("ThicknessBed");
            }
        }

        private LengthMeasure thicknessBedField; 

        /// <summary>
        /// Formation exposed along the wellbore. 
        /// </summary>
		[Description("Formation exposed along the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("thicknessApparent")]
        public LengthMeasure ThicknessApparent {
            get {
                return thicknessApparentField;
            } 
            set {
                thicknessApparentField = value;
                NotifyPropertyChanged("ThicknessApparent");
            }
        }

        private LengthMeasure thicknessApparentField; 

        /// <summary>
        /// True Stratigraphic thickness.
        /// </summary>
		[Description("True Stratigraphic thickness.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("thicknessPerpen")]
        public LengthMeasure ThicknessPerpen {
            get {
                return thicknessPerpenField;
            } 
            set {
                thicknessPerpenField = value;
                NotifyPropertyChanged("ThicknessPerpen");
            }
        }

        private LengthMeasure thicknessPerpenField; 

        /// <summary>
        /// Logged measured depth at top of marker. 
        /// </summary>
		[Description("Logged measured depth at top of marker.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdLogSample")]
        public MeasuredDepthCoord MDLogSample {
            get {
                return mdLogSampleField;
            } 
            set {
                mdLogSampleField = value;
                NotifyPropertyChanged("MDLogSample");
            }
        }

        private MeasuredDepthCoord mdLogSampleField; 

        /// <summary>
        /// Logged true vertical depth at top of marker. 
        /// </summary>
		[Description("Logged true vertical depth at top of marker.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdLogSample")]
        public WellVerticalDepthCoord TvdLogSample {
            get {
                return tvdLogSampleField;
            } 
            set {
                tvdLogSampleField = value;
                NotifyPropertyChanged("TvdLogSample");
            }
        }

        private WellVerticalDepthCoord tvdLogSampleField; 

        /// <summary>
        /// Angle of dip with respect to horizontal. 
        /// </summary>
		[Description("Angle of dip with respect to horizontal.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("dip")]
        public PlaneAngleMeasure Dip {
            get {
                return dipField;
            } 
            set {
                dipField = value;
                NotifyPropertyChanged("Dip");
            }
        }

        private PlaneAngleMeasure dipField; 

        /// <summary>
        /// Interpreted downdip direction. 
        /// </summary>
		[Description("Interpreted downdip direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("dipDirection")]
        public PlaneAngleMeasure DipDirection {
            get {
                return dipDirectionField;
            } 
            set {
                dipDirectionField = value;
                NotifyPropertyChanged("DipDirection");
            }
        }

        private PlaneAngleMeasure dipDirectionField; 

        /// <summary>
        /// Lithostratigraphic classification. 
        /// </summary>
		[Description("Lithostratigraphic classification.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lithostratigraphyStruct")]
		[XmlElement("lithostratigraphic")]
        public LithostratigraphyStruct Lithostratigraphic {
            get {
                return lithostratigraphicField;
            } 
            set {
                lithostratigraphicField = value;
                NotifyPropertyChanged("Lithostratigraphic");
            }
        }

        private LithostratigraphyStruct lithostratigraphicField; 

        /// <summary>
        /// Chronostratigraphic classification. 
        /// </summary>
		[Description("Chronostratigraphic classification.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "chronostratigraphyStruct")]
		[XmlElement("chronostratigraphic")]
        public ChronostratigraphyStruct Chronostratigraphic {
            get {
                return chronostratigraphicField;
            } 
            set {
                chronostratigraphicField = value;
                NotifyPropertyChanged("Chronostratigraphic");
            }
        }

        private ChronostratigraphyStruct chronostratigraphicField; 

        /// <summary>
        /// DEPRECATED. Formerly defined as name of formation penetrated, now deprecated to be replaced by lithostratigraphic with kind=formation. 
        /// </summary>
		[StringLength(64)]
        [Description("DEPRECATED. Formerly defined as name of formation penetrated, now deprecated to be replaced by lithostratigraphic with kind=formation.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameFormation")]
        public string NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private string nameFormationField; 

        /// <summary>
        /// Description of item and details. 
        /// </summary>
		[StringLength(4000)]
        [Description("Description of item and details.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects.
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The non-contextual content of a WITSML Fluids Report.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_fluidsReport", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Fluids Report.")]
    public partial class FluidsReport : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the fluids report. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the fluids report.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the fluids report. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the fluids report.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// Along hole measured depth of measurement from the drill datum. 
        /// </summary>
		[Required]
        [Description("Along hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
		[Description("Vertical depth of the measurements.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// Fluids report number. 
        /// </summary>
		[Description("Fluids report number.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("numReport")]
        public short? NumReport {
            get {
                return numReportField;
            } 
            set {
                numReportField = value;
                 this.NumReportSpecified = true;
                NotifyPropertyChanged("NumReport");
            }
        }

        private short? numReportField; 

        /// <summary>
        /// numReportSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumReportSpecified {
            get {
                return numReportSpecifiedField;
            } 
            set {
                numReportSpecifiedField = value;
                NotifyPropertyChanged("NumReportSpecified");
            }
        }

        private bool numReportSpecifiedField; 

        /// <summary>
        /// A Fluid record. 
        /// </summary>
		[Description("A Fluid record.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluid")]
		[XmlElement("fluid")]
        public List<Fluid> Fluid {
            get {
                return fluidField;
            } 
            set {
                fluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

         /// <summary>
         /// bool to indicate if Fluid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSpecified
         {
             get {
             if(fluidField!=null)
                 return fluidField.Count>0?true:false;
             else return false;
             }
         }
        private List<Fluid> fluidField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportGasReadingInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportGasReadingInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportGasReadingInfo xsd type.")]
    public partial class DrillReportGasReadingInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time of the gas reading.
        /// </summary>
		[Description("Date and time of the gas reading.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Type of gas reading. 
        /// </summary>
		[Description("Type of gas reading.")]
        [EnergisticsDataTypeAttribute(DataType = "GasPeakType")]
		[XmlElement("readingType")]
        public GasPeakType? ReadingType {
            get {
                return readingTypeField;
            } 
            set {
                readingTypeField = value;
                 this.ReadingTypeSpecified = true;
                NotifyPropertyChanged("ReadingType");
            }
        }

        private GasPeakType? readingTypeField; 

        /// <summary>
        /// readingTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReadingTypeSpecified {
            get {
                return readingTypeSpecifiedField;
            } 
            set {
                readingTypeSpecifiedField = value;
                NotifyPropertyChanged("ReadingTypeSpecified");
            }
        }

        private bool readingTypeSpecifiedField; 

        /// <summary>
        /// Measured depth at the top of the interval. 
        /// </summary>
		[Description("Measured depth at the top of the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at the bottom of the test interval. 
        /// </summary>
		[Description("Measured depth at the bottom of the test interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth at the top of the interval. 
        /// </summary>
		[Description("True vertical depth at the top of the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at the bottom of the interval. 
        /// </summary>
		[Description("True vertical depth at the bottom of the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// The highest gas reading. 
        /// </summary>
		[Description("The highest gas reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasHigh")]
        public VolumePerVolumeMeasure GasHigh {
            get {
                return gasHighField;
            } 
            set {
                gasHighField = value;
                NotifyPropertyChanged("GasHigh");
            }
        }

        private VolumePerVolumeMeasure gasHighField; 

        /// <summary>
        /// The lowest gas reading. 
        /// </summary>
		[Description("The lowest gas reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasLow")]
        public VolumePerVolumeMeasure GasLow {
            get {
                return gasLowField;
            } 
            set {
                gasLowField = value;
                NotifyPropertyChanged("GasLow");
            }
        }

        private VolumePerVolumeMeasure gasLowField; 

        /// <summary>
        /// Methane (C1) concentration. 
        /// </summary>
		[Description("Methane (C1) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("meth")]
        public VolumePerVolumeMeasure Meth {
            get {
                return methField;
            } 
            set {
                methField = value;
                NotifyPropertyChanged("Meth");
            }
        }

        private VolumePerVolumeMeasure methField; 

        /// <summary>
        /// Ethane (C2) concentration. 
        /// </summary>
		[Description("Ethane (C2) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("eth")]
        public VolumePerVolumeMeasure Eth {
            get {
                return ethField;
            } 
            set {
                ethField = value;
                NotifyPropertyChanged("Eth");
            }
        }

        private VolumePerVolumeMeasure ethField; 

        /// <summary>
        /// Propane (C3) concentration. 
        /// </summary>
		[Description("Propane (C3) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("prop")]
        public VolumePerVolumeMeasure Prop {
            get {
                return propField;
            } 
            set {
                propField = value;
                NotifyPropertyChanged("Prop");
            }
        }

        private VolumePerVolumeMeasure propField; 

        /// <summary>
        /// iso-Butane (iC4) concentration. 
        /// </summary>
		[Description("iso-Butane (iC4) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ibut")]
        public VolumePerVolumeMeasure Ibut {
            get {
                return ibutField;
            } 
            set {
                ibutField = value;
                NotifyPropertyChanged("Ibut");
            }
        }

        private VolumePerVolumeMeasure ibutField; 

        /// <summary>
        /// nor-Butane (nC4) concentration. 
        /// </summary>
		[Description("nor-Butane (nC4) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("nbut")]
        public VolumePerVolumeMeasure Nbut {
            get {
                return nbutField;
            } 
            set {
                nbutField = value;
                NotifyPropertyChanged("Nbut");
            }
        }

        private VolumePerVolumeMeasure nbutField; 

        /// <summary>
        /// iso-Pentane (iC5) concentration. 
        /// </summary>
		[Description("iso-Pentane (iC5) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ipent")]
        public VolumePerVolumeMeasure Ipent {
            get {
                return ipentField;
            } 
            set {
                ipentField = value;
                NotifyPropertyChanged("Ipent");
            }
        }

        private VolumePerVolumeMeasure ipentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportPerfInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportPerfInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportPerfInfo xsd type.")]
    public partial class DrillReportPerfInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date and time at which the well perforation interval is opened.
        /// </summary>
		[Description("The date and time at which the well perforation interval is opened.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimOpen")]
        public Timestamp? DateTimeOpen {
            get {
                return dTimOpenField;
            } 
            set {
                dTimOpenField = value;
                 this.DateTimeOpenSpecified = true;
                NotifyPropertyChanged("DateTimeOpen");
            }
        }

        private Timestamp? dTimOpenField; 

        /// <summary>
        /// dTimOpenSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeOpenSpecified {
            get {
                return dTimOpenSpecifiedField;
            } 
            set {
                dTimOpenSpecifiedField = value;
                NotifyPropertyChanged("DateTimeOpenSpecified");
            }
        }

        private bool dTimOpenSpecifiedField; 

        /// <summary>
        /// The date and time at which the well perforation interval is closed.
        /// </summary>
		[Description("The date and time at which the well perforation interval is closed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimClose")]
        public Timestamp? DateTimeClose {
            get {
                return dTimCloseField;
            } 
            set {
                dTimCloseField = value;
                 this.DateTimeCloseSpecified = true;
                NotifyPropertyChanged("DateTimeClose");
            }
        }

        private Timestamp? dTimCloseField; 

        /// <summary>
        /// dTimCloseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCloseSpecified {
            get {
                return dTimCloseSpecifiedField;
            } 
            set {
                dTimCloseSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCloseSpecified");
            }
        }

        private bool dTimCloseSpecifiedField; 

        /// <summary>
        /// Measured depth at the top of the perforation interval. 
        /// </summary>
		[Description("Measured depth at the top of the perforation interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at the bottom of the perforation interval. 
        /// </summary>
		[Description("Measured depth at the bottom of the perforation interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth at the top of the perforation interval. 
        /// </summary>
		[Description("True vertical depth at the top of the perforation interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at the bottom of the perforation interval. 
        /// </summary>
		[Description("True vertical depth at the bottom of the perforation interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportStratInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportStratInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportStratInfo xsd type.")]
    public partial class DrillReportStratInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time at which a preliminary zonation is established.
        /// </summary>
		[Description("Date and time at which a preliminary zonation is established.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Measured depth at the top of the formation. 
        /// </summary>
		[Description("Measured depth at the top of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// True vertical depth at the top of the formation. 
        /// </summary>
		[Description("True vertical depth at the top of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// A lithological description of the geological formation at the given depth.
        /// </summary>
		[StringLength(256)]
        [Description("A lithological description of the geological formation at the given depth.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportControlIncidentInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportControlIncidentInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportControlIncidentInfo xsd type.")]
    public partial class DrillReportControlIncidentInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time of the well control incident. 
        /// </summary>
		[Description("Date and time of the well control incident.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// The measured depth to the well inflow entry point. 
        /// </summary>
		[Description("The measured depth to the well inflow entry point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdInflow")]
        public MeasuredDepthCoord MDInflow {
            get {
                return mdInflowField;
            } 
            set {
                mdInflowField = value;
                NotifyPropertyChanged("MDInflow");
            }
        }

        private MeasuredDepthCoord mdInflowField; 

        /// <summary>
        /// The true vertical depth to the well inflow entery point. 
        /// </summary>
		[Description("The true vertical depth to the well inflow entery point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdInflow")]
        public WellVerticalDepthCoord TvdInflow {
            get {
                return tvdInflowField;
            } 
            set {
                tvdInflowField = value;
                NotifyPropertyChanged("TvdInflow");
            }
        }

        private WellVerticalDepthCoord tvdInflowField; 

        /// <summary>
        /// Phase (large activity classification) e.g. Drill Surface Hole. 
        /// </summary>
		[StringLength(16)]
        [Description("Phase (large activity classification) e.g. Drill Surface Hole.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("phase")]
        public string Phase {
            get {
                return phaseField;
            } 
            set {
                phaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private string phaseField; 

        /// <summary>
        /// A code used to define rig activity.
        /// </summary>
		[Description("A code used to define rig activity.")]
        [EnergisticsDataTypeAttribute(DataType = "ActivityCode")]
		[XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set {
                activityCodeField = value;
                 this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private ActivityCode activityCodeField; 

        /// <summary>
        /// activityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ActivityCodeSpecified {
            get {
                return activityCodeSpecifiedField;
            } 
            set {
                activityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private bool activityCodeSpecifiedField; 

        /// <summary>
        /// A proprietary code used to define rig activity. The name of the proprietary system should be defined in the namingSystem attribute.
        /// </summary>
		[Description("A proprietary code used to define rig activity. The name of the proprietary system should be defined in the namingSystem attribute.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("proprietaryCode")]
        public List<NameStruct> ProprietaryCode {
            get {
                return proprietaryCodeField;
            } 
            set {
                proprietaryCodeField = value;
                NotifyPropertyChanged("ProprietaryCode");
            }
        }

         /// <summary>
         /// bool to indicate if ProprietaryCode has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProprietaryCodeSpecified
         {
             get {
             if(proprietaryCodeField!=null)
                 return proprietaryCodeField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> proprietaryCodeField; 

        /// <summary>
        /// Custom string to further define an activity. 
        /// </summary>
		[StringLength(32)]
        [Description("Custom string to further define an activity.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("detailActivity")]
        public string DetailActivity {
            get {
                return detailActivityField;
            } 
            set {
                detailActivityField = value;
                NotifyPropertyChanged("DetailActivity");
            }
        }

        private string detailActivityField; 

        /// <summary>
        /// The amount of time lost because of the well control incident. Commonly specified in hours.
        /// </summary>
		[Description("The amount of time lost because of the well control incident. Commonly specified in hours.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimLost")]
        public TimeMeasure ETimeLost {
            get {
                return eTimLostField;
            } 
            set {
                eTimLostField = value;
                NotifyPropertyChanged("ETimeLost");
            }
        }

        private TimeMeasure eTimLostField; 

        /// <summary>
        /// The date and time at which control of the well is regained.
        /// </summary>
		[Description("The date and time at which control of the well is regained.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRegained")]
        public Timestamp? DateTimeRegained {
            get {
                return dTimRegainedField;
            } 
            set {
                dTimRegainedField = value;
                 this.DateTimeRegainedSpecified = true;
                NotifyPropertyChanged("DateTimeRegained");
            }
        }

        private Timestamp? dTimRegainedField; 

        /// <summary>
        /// dTimRegainedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRegainedSpecified {
            get {
                return dTimRegainedSpecifiedField;
            } 
            set {
                dTimRegainedSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRegainedSpecified");
            }
        }

        private bool dTimRegainedSpecifiedField; 

        /// <summary>
        /// The drill bit nominal outside diameter at time of well control incident.
        /// </summary>
		[Description("The drill bit nominal outside diameter at time of well control incident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaBit")]
        public LengthMeasure DiaBit {
            get {
                return diaBitField;
            } 
            set {
                diaBitField = value;
                NotifyPropertyChanged("DiaBit");
            }
        }

        private LengthMeasure diaBitField; 

        /// <summary>
        /// The measured depth of bit at the time of the well control incident.
        /// </summary>
		[Description("The measured depth of bit at the time of the well control incident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return mdBitField;
            } 
            set {
                mdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord mdBitField; 

        /// <summary>
        /// The density of the drilling fluid.
        /// </summary>
		[Description("The density of the drilling fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("wtMud")]
        public DensityMeasure WeightMud {
            get {
                return wtMudField;
            } 
            set {
                wtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private DensityMeasure wtMudField; 

        /// <summary>
        /// The equivalent mud weight value of the pore pressure reading.
        /// </summary>
		[Required]
        [Description("The equivalent mud weight value of the pore pressure reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("porePressure")]
        public DensityMeasure PorePressure {
            get {
                return porePressureField;
            } 
            set {
                porePressureField = value;
                NotifyPropertyChanged("PorePressure");
            }
        }

        private DensityMeasure porePressureField; 

        /// <summary>
        /// Diameter of the last installed casing. 
        /// </summary>
		[Description("Diameter of the last installed casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaCsgLast")]
        public LengthMeasure DiaCsgLast {
            get {
                return diaCsgLastField;
            } 
            set {
                diaCsgLastField = value;
                NotifyPropertyChanged("DiaCsgLast");
            }
        }

        private LengthMeasure diaCsgLastField; 

        /// <summary>
        /// Measured depth of last casing. 
        /// </summary>
		[Description("Measured depth of last casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdCsgLast")]
        public MeasuredDepthCoord MDCsgLast {
            get {
                return mdCsgLastField;
            } 
            set {
                mdCsgLastField = value;
                NotifyPropertyChanged("MDCsgLast");
            }
        }

        private MeasuredDepthCoord mdCsgLastField; 

        /// <summary>
        /// The gained volume of drilling fluid due to well kick.
        /// </summary>
		[Description("The gained volume of drilling fluid due to well kick.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volMudGained")]
        public VolumeMeasure VolMudGained {
            get {
                return volMudGainedField;
            } 
            set {
                volMudGainedField = value;
                NotifyPropertyChanged("VolMudGained");
            }
        }

        private VolumeMeasure volMudGainedField; 

        /// <summary>
        /// The shut in casing pressure. 
        /// </summary>
		[Description("The shut in casing pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presShutInCasing")]
        public PressureMeasure PresShutInCasing {
            get {
                return presShutInCasingField;
            } 
            set {
                presShutInCasingField = value;
                NotifyPropertyChanged("PresShutInCasing");
            }
        }

        private PressureMeasure presShutInCasingField; 

        /// <summary>
        /// The actual pressure in the drill pipe when the rams are closed around it.
        /// </summary>
		[Description("The actual pressure in the drill pipe when the rams are closed around it.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presShutInDrill")]
        public PressureMeasure PresShutInDrill {
            get {
                return presShutInDrillField;
            } 
            set {
                presShutInDrillField = value;
                NotifyPropertyChanged("PresShutInDrill");
            }
        }

        private PressureMeasure presShutInDrillField; 

        /// <summary>
        /// The type of well control incident. 
        /// </summary>
		[Description("The type of well control incident.")]
        [EnergisticsDataTypeAttribute(DataType = "WellControlIncidentType")]
		[XmlElement("incidentType")]
        public WellControlIncidentType? IncidentType {
            get {
                return incidentTypeField;
            } 
            set {
                incidentTypeField = value;
                 this.IncidentTypeSpecified = true;
                NotifyPropertyChanged("IncidentType");
            }
        }

        private WellControlIncidentType? incidentTypeField; 

        /// <summary>
        /// incidentTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IncidentTypeSpecified {
            get {
                return incidentTypeSpecifiedField;
            } 
            set {
                incidentTypeSpecifiedField = value;
                NotifyPropertyChanged("IncidentTypeSpecified");
            }
        }

        private bool incidentTypeSpecifiedField; 

        /// <summary>
        /// The type of well control incident. 
        /// </summary>
		[Description("The type of well control incident.")]
        [EnergisticsDataTypeAttribute(DataType = "WellKillingProcedureType")]
		[XmlElement("killingType")]
        public WellKillingProcedureType? KillingType {
            get {
                return killingTypeField;
            } 
            set {
                killingTypeField = value;
                 this.KillingTypeSpecified = true;
                NotifyPropertyChanged("KillingType");
            }
        }

        private WellKillingProcedureType? killingTypeField; 

        /// <summary>
        /// killingTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KillingTypeSpecified {
            get {
                return killingTypeSpecifiedField;
            } 
            set {
                killingTypeSpecifiedField = value;
                NotifyPropertyChanged("KillingTypeSpecified");
            }
        }

        private bool killingTypeSpecifiedField; 

        /// <summary>
        /// The lithological description of a geological formation at the incident depth.
        /// </summary>
		[StringLength(256)]
        [Description("The lithological description of a geological formation at the incident depth.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("formation")]
        public string Formation {
            get {
                return formationField;
            } 
            set {
                formationField = value;
                NotifyPropertyChanged("Formation");
            }
        }

        private string formationField; 

        /// <summary>
        /// the temperature at the bottom of the wellbore. 
        /// </summary>
		[Description("the temperature at the bottom of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempBottom")]
        public ThermodynamicTemperatureMeasure TempBottom {
            get {
                return tempBottomField;
            } 
            set {
                tempBottomField = value;
                NotifyPropertyChanged("TempBottom");
            }
        }

        private ThermodynamicTemperatureMeasure tempBottomField; 

        /// <summary>
        /// The maximum pressure that the choke valve can be exposed to.
        /// </summary>
		[Description("The maximum pressure that the choke valve can be exposed to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presMaxChoke")]
        public PressureMeasure PresMaxChoke {
            get {
                return presMaxChokeField;
            } 
            set {
                presMaxChokeField = value;
                NotifyPropertyChanged("PresMaxChoke");
            }
        }

        private PressureMeasure presMaxChokeField; 

        /// <summary>
        /// A description of the well control incident.
        /// </summary>
		[StringLength(256)]
        [Description("A description of the well control incident.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportEquipFailureInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportEquipFailureInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportEquipFailureInfo xsd type.")]
    public partial class DrillReportEquipFailureInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that the equipment failed.
        /// </summary>
		[Description("Date and time that the equipment failed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// The measured depth to the operation end point due to failure.
        /// </summary>
		[Description("The measured depth to the operation end point due to failure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// The true vertical depth to the operation end point due to failure.
        /// </summary>
		[Description("The true vertical depth to the operation end point due to failure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// The classification of the equipment that failed.
        /// </summary>
		[StringLength(64)]
        [Description("The classification of the equipment that failed.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("equipClass")]
        public string EquipClass {
            get {
                return equipClassField;
            } 
            set {
                equipClassField = value;
                NotifyPropertyChanged("EquipClass");
            }
        }

        private string equipClassField; 

        /// <summary>
        /// The missed production time due to equipment failure. 
        /// </summary>
		[Description("The missed production time due to equipment failure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimMissProduction")]
        public TimeMeasure ETimeMissProduction {
            get {
                return eTimMissProductionField;
            } 
            set {
                eTimMissProductionField = value;
                NotifyPropertyChanged("ETimeMissProduction");
            }
        }

        private TimeMeasure eTimMissProductionField; 

        /// <summary>
        /// The date and time at which the production equipment was repaired and ready for production.
        /// </summary>
		[Description("The date and time at which the production equipment was  repaired and ready for production.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRepair")]
        public Timestamp? DateTimeRepair {
            get {
                return dTimRepairField;
            } 
            set {
                dTimRepairField = value;
                 this.DateTimeRepairSpecified = true;
                NotifyPropertyChanged("DateTimeRepair");
            }
        }

        private Timestamp? dTimRepairField; 

        /// <summary>
        /// dTimRepairSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRepairSpecified {
            get {
                return dTimRepairSpecifiedField;
            } 
            set {
                dTimRepairSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRepairSpecified");
            }
        }

        private bool dTimRepairSpecifiedField; 

        /// <summary>
        /// A description that gives a information about the equipment failure. 
        /// </summary>
		[StringLength(256)]
        [Description("A description that gives a information about the equipment failure.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportLithShowInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportLithShowInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportLithShowInfo xsd type.")]
    public partial class DrillReportLithShowInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that the well test was completed. 
        /// </summary>
		[Description("Date and time that the well test was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Measured depth at the top of the lithology interval. 
        /// </summary>
		[Description("Measured depth at the top of the lithology interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at the bottom of the lithology interval. 
        /// </summary>
		[Description("Measured depth at the bottom of the lithology interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth at the top of the lithology interval. 
        /// </summary>
		[Description("True vertical depth at the top of the lithology interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at the bottom of the lithology interval. 
        /// </summary>
		[Description("True vertical depth at the bottom of the lithology interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// A textual description of any shows in the interval. 
        /// </summary>
		[StringLength(256)]
        [Description("A textual description of any shows in the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("show")]
        public string Show {
            get {
                return showField;
            } 
            set {
                showField = value;
                NotifyPropertyChanged("Show");
            }
        }

        private string showField; 

        /// <summary>
        /// A description that gives a geological/lithological description/evaluation of the interval. 
        /// </summary>
		[StringLength(256)]
        [Description("A description that gives a geological/lithological  description/evaluation of the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("lithology")]
        public string Lithology {
            get {
                return lithologyField;
            } 
            set {
                lithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

        private string lithologyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportFormTestInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportFormTestInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportFormTestInfo xsd type.")]
    public partial class DrillReportFormTestInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that the wireline formation test was completed. 
        /// </summary>
		[Description("Date and time that the wireline formation test was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Measured depth of the wireline formation test. 
        /// </summary>
		[Description("Measured depth of the wireline formation test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// True vertical depth of the wireline formation test. 
        /// </summary>
		[Description("True vertical depth of the wireline formation test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// The formation pore pressure. The pressure of fluids within the pores of a reservoir, usually hydrostatic pressure, or the pressure exerted by a column of water from the formation's depth to sea level.
        /// </summary>
		[Description("The formation pore pressure. The pressure of fluids within the pores of a reservoir, usually hydrostatic pressure,  or the pressure exerted by a column of water from the formation's depth to sea level.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presPore")]
        public PressureMeasure PresPore {
            get {
                return presPoreField;
            } 
            set {
                presPoreField = value;
                NotifyPropertyChanged("PresPore");
            }
        }

        private PressureMeasure presPoreField; 

        /// <summary>
        /// True ("true" or "1") indicates that there was a good seal for the wireline formation test. False ("false" or "0") or not given indicates otherwise. 
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that there was a good seal for the wireline formation test. False (\"false\" or \"0\") or not given indicates otherwise.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("goodSeal")]
        public bool? GoodSeal {
            get {
                return goodSealField;
            } 
            set {
                goodSealField = value;
                 this.GoodSealSpecified = true;
                NotifyPropertyChanged("GoodSeal");
            }
        }

        private bool? goodSealField; 

        /// <summary>
        /// goodSealSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GoodSealSpecified {
            get {
                return goodSealSpecifiedField;
            } 
            set {
                goodSealSpecifiedField = value;
                NotifyPropertyChanged("GoodSealSpecified");
            }
        }

        private bool goodSealSpecifiedField; 

        /// <summary>
        /// Measured depth where the fluid sample was taken. 
        /// </summary>
		[Description("Measured depth where the fluid sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdSample")]
        public MeasuredDepthCoord MDSample {
            get {
                return mdSampleField;
            } 
            set {
                mdSampleField = value;
                NotifyPropertyChanged("MDSample");
            }
        }

        private MeasuredDepthCoord mdSampleField; 

        /// <summary>
        /// The dominate component in the fluid sample. 
        /// </summary>
		[StringLength(50)]
        [Description("The dominate component in the fluid sample.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("dominateComponent")]
        public string DominateComponent {
            get {
                return dominateComponentField;
            } 
            set {
                dominateComponentField = value;
                NotifyPropertyChanged("DominateComponent");
            }
        }

        private string dominateComponentField; 

        /// <summary>
        /// The density of hydrocarbon component of the fluid sample. 
        /// </summary>
		[Description("The density of hydrocarbon component of the fluid sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityHC")]
        public DensityMeasure DensityHC {
            get {
                return densityHCField;
            } 
            set {
                densityHCField = value;
                NotifyPropertyChanged("DensityHC");
            }
        }

        private DensityMeasure densityHCField; 

        /// <summary>
        /// The volume of the fluid sample. 
        /// </summary>
		[Description("The volume of the fluid sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volumeSample")]
        public VolumeMeasure VolumeSample {
            get {
                return volumeSampleField;
            } 
            set {
                volumeSampleField = value;
                NotifyPropertyChanged("VolumeSample");
            }
        }

        private VolumeMeasure volumeSampleField; 

        /// <summary>
        /// A description that describes the wireline formation test in more detail. 
        /// </summary>
		[StringLength(256)]
        [Description("A description that describes the wireline formation test in more detail.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportWellTestInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportWellTestInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportWellTestInfo xsd type.")]
    public partial class DrillReportWellTestInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that the well test was completed. 
        /// </summary>
		[Description("Date and time that the well test was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// The type of well test. 
        /// </summary>
		[Description("The type of well test.")]
        [EnergisticsDataTypeAttribute(DataType = "WellTestType")]
		[XmlElement("testType")]
        public WellTestType? TestType {
            get {
                return testTypeField;
            } 
            set {
                testTypeField = value;
                 this.TestTypeSpecified = true;
                NotifyPropertyChanged("TestType");
            }
        }

        private WellTestType? testTypeField; 

        /// <summary>
        /// testTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestTypeSpecified {
            get {
                return testTypeSpecifiedField;
            } 
            set {
                testTypeSpecifiedField = value;
                NotifyPropertyChanged("TestTypeSpecified");
            }
        }

        private bool testTypeSpecifiedField; 

        /// <summary>
        /// The number of the well test. 
        /// </summary>
		[Description("The number of the well test.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("testNumber")]
        public short? TestNumber {
            get {
                return testNumberField;
            } 
            set {
                testNumberField = value;
                 this.TestNumberSpecified = true;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private short? testNumberField; 

        /// <summary>
        /// testNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestNumberSpecified {
            get {
                return testNumberSpecifiedField;
            } 
            set {
                testNumberSpecifiedField = value;
                NotifyPropertyChanged("TestNumberSpecified");
            }
        }

        private bool testNumberSpecifiedField; 

        /// <summary>
        /// Measured depth at the top of the test interval. 
        /// </summary>
		[Description("Measured depth at the top of the test interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at the bottom of the test interval. 
        /// </summary>
		[Description("Measured depth at the bottom of the test interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth at the top of the test interval. 
        /// </summary>
		[Description("True vertical depth at the top of the test interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at the bottom of the test interval. 
        /// </summary>
		[Description("True vertical depth at the bottom of the test interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// The diameter of the choke opening. 
        /// </summary>
		[Description("The diameter of the choke opening.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("chokeOrificeSize")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return chokeOrificeSizeField;
            } 
            set {
                chokeOrificeSizeField = value;
                NotifyPropertyChanged("ChokeOrificeSize");
            }
        }

        private LengthMeasure chokeOrificeSizeField; 

        /// <summary>
        /// The density of the produced oil. 
        /// </summary>
		[Description("The density of the produced oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityOil")]
        public DensityMeasure DensityOil {
            get {
                return densityOilField;
            } 
            set {
                densityOilField = value;
                NotifyPropertyChanged("DensityOil");
            }
        }

        private DensityMeasure densityOilField; 

        /// <summary>
        /// The density of the produced water. 
        /// </summary>
		[Description("The density of the produced water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityWater")]
        public DensityMeasure DensityWater {
            get {
                return densityWaterField;
            } 
            set {
                densityWaterField = value;
                NotifyPropertyChanged("DensityWater");
            }
        }

        private DensityMeasure densityWaterField; 

        /// <summary>
        /// The density of the produced gas. 
        /// </summary>
		[Description("The density of the produced gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityGas")]
        public DensityMeasure DensityGas {
            get {
                return densityGasField;
            } 
            set {
                densityGasField = value;
                NotifyPropertyChanged("DensityGas");
            }
        }

        private DensityMeasure densityGasField; 

        /// <summary>
        /// The maximum rate at which oil was produced. 
        /// </summary>
		[Description("The maximum rate at which oil was produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowRateOil")]
        public VolumeFlowRateMeasure FlowRateOil {
            get {
                return flowRateOilField;
            } 
            set {
                flowRateOilField = value;
                NotifyPropertyChanged("FlowRateOil");
            }
        }

        private VolumeFlowRateMeasure flowRateOilField; 

        /// <summary>
        /// The maximum rate at which water was produced. 
        /// </summary>
		[Description("The maximum rate at which water was produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowRateWater")]
        public VolumeFlowRateMeasure FlowRateWater {
            get {
                return flowRateWaterField;
            } 
            set {
                flowRateWaterField = value;
                NotifyPropertyChanged("FlowRateWater");
            }
        }

        private VolumeFlowRateMeasure flowRateWaterField; 

        /// <summary>
        /// The maximum rate at which gas was produced. 
        /// </summary>
		[Description("The maximum rate at which gas was produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowRateGas")]
        public VolumeFlowRateMeasure FlowRateGas {
            get {
                return flowRateGasField;
            } 
            set {
                flowRateGasField = value;
                NotifyPropertyChanged("FlowRateGas");
            }
        }

        private VolumeFlowRateMeasure flowRateGasField; 

        /// <summary>
        /// The final shut in pressure. 
        /// </summary>
		[Description("The final shut in pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presShutIn")]
        public PressureMeasure PresShutIn {
            get {
                return presShutInField;
            } 
            set {
                presShutInField = value;
                NotifyPropertyChanged("PresShutIn");
            }
        }

        private PressureMeasure presShutInField; 

        /// <summary>
        /// The final flowing pressure. 
        /// </summary>
		[Description("The final flowing pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presFlowing")]
        public PressureMeasure PresFlowing {
            get {
                return presFlowingField;
            } 
            set {
                presFlowingField = value;
                NotifyPropertyChanged("PresFlowing");
            }
        }

        private PressureMeasure presFlowingField; 

        /// <summary>
        /// The final bottom hole pressure. 
        /// </summary>
		[Description("The final bottom hole pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presBottom")]
        public PressureMeasure PresBottom {
            get {
                return presBottomField;
            } 
            set {
                presBottomField = value;
                NotifyPropertyChanged("PresBottom");
            }
        }

        private PressureMeasure presBottomField; 

        /// <summary>
        /// The ratio of the volume of gas to the volume of oil. 
        /// </summary>
		[Description("The ratio of the volume of gas to the volume of oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasOilRatio")]
        public VolumePerVolumeMeasure GasOilRatio {
            get {
                return gasOilRatioField;
            } 
            set {
                gasOilRatioField = value;
                NotifyPropertyChanged("GasOilRatio");
            }
        }

        private VolumePerVolumeMeasure gasOilRatioField; 

        /// <summary>
        /// The relative amount of water per amount of oil. 
        /// </summary>
		[Description("The relative amount of water per amount of oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("waterOilRatio")]
        public VolumePerVolumeMeasure WaterOilRatio {
            get {
                return waterOilRatioField;
            } 
            set {
                waterOilRatioField = value;
                NotifyPropertyChanged("WaterOilRatio");
            }
        }

        private VolumePerVolumeMeasure waterOilRatioField; 

        /// <summary>
        /// The relative amount of chloride in the produced water. 
        /// </summary>
		[Description("The relative amount of chloride in the produced water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("chloride")]
        public MassConcentrationMeasure Chloride {
            get {
                return chlorideField;
            } 
            set {
                chlorideField = value;
                NotifyPropertyChanged("Chloride");
            }
        }

        private MassConcentrationMeasure chlorideField; 

        /// <summary>
        /// The relative amount of CO2 gas. 
        /// </summary>
		[Description("The relative amount of CO2 gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("carbonDioxide")]
        public MassConcentrationMeasure CarbonDioxide {
            get {
                return carbonDioxideField;
            } 
            set {
                carbonDioxideField = value;
                NotifyPropertyChanged("CarbonDioxide");
            }
        }

        private MassConcentrationMeasure carbonDioxideField; 

        /// <summary>
        /// The relative amount of H2S gas. 
        /// </summary>
		[Description("The relative amount of H2S gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("hydrogenSulfide")]
        public MassConcentrationMeasure HydrogenSulfide {
            get {
                return hydrogenSulfideField;
            } 
            set {
                hydrogenSulfideField = value;
                NotifyPropertyChanged("HydrogenSulfide");
            }
        }

        private MassConcentrationMeasure hydrogenSulfideField; 

        /// <summary>
        /// The total amount of oil produced. This includes oil that was disposed of (e.g., burned).
        /// </summary>
		[Description("The total amount of oil produced. This includes oil that was disposed of (e.g., burned).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volOilTotal")]
        public VolumeMeasure VolOilTotal {
            get {
                return volOilTotalField;
            } 
            set {
                volOilTotalField = value;
                NotifyPropertyChanged("VolOilTotal");
            }
        }

        private VolumeMeasure volOilTotalField; 

        /// <summary>
        /// The total amount of gas produced. This includes gas that was disposed of (e.g., burned).
        /// </summary>
		[Description("The total amount of gas produced. This includes gas that was disposed of (e.g., burned).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volGasTotal")]
        public VolumeMeasure VolGasTotal {
            get {
                return volGasTotalField;
            } 
            set {
                volGasTotalField = value;
                NotifyPropertyChanged("VolGasTotal");
            }
        }

        private VolumeMeasure volGasTotalField; 

        /// <summary>
        /// The total amount of water produced. This includes water that was disposed of.
        /// </summary>
		[Description("The total amount of water produced. This includes water that was disposed of.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volWaterTotal")]
        public VolumeMeasure VolWaterTotal {
            get {
                return volWaterTotalField;
            } 
            set {
                volWaterTotalField = value;
                NotifyPropertyChanged("VolWaterTotal");
            }
        }

        private VolumeMeasure volWaterTotalField; 

        /// <summary>
        /// The total amount of produced oil that was stored.
        /// </summary>
		[Description("The total amount of produced oil that was stored.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volOilStored")]
        public VolumeMeasure VolOilStored {
            get {
                return volOilStoredField;
            } 
            set {
                volOilStoredField = value;
                NotifyPropertyChanged("VolOilStored");
            }
        }

        private VolumeMeasure volOilStoredField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportCoreInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportCoreInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportCoreInfo xsd type.")]
    public partial class DrillReportCoreInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that the core was completed. 
        /// </summary>
		[Description("Date and time that the core was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Core identification number. 
        /// </summary>
		[StringLength(64)]
        [Description("Core identification number.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("coreNumber")]
        public string CoreNumber {
            get {
                return coreNumberField;
            } 
            set {
                coreNumberField = value;
                NotifyPropertyChanged("CoreNumber");
            }
        }

        private string coreNumberField; 

        /// <summary>
        /// Measured depth at the top of the cored interval. 
        /// </summary>
		[Description("Measured depth at the top of the cored interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at the bottom of the cored interval. 
        /// </summary>
		[Description("Measured depth at the bottom of the cored interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth at the top of the cored interval. 
        /// </summary>
		[Description("True vertical depth at the top of the cored interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at the bottom of the cored interval. 
        /// </summary>
		[Description("True vertical depth at the bottom of the cored interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// Length of core recovered. 
        /// </summary>
		[Description("Length of core recovered.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenRecovered")]
        public LengthMeasure LenRecovered {
            get {
                return lenRecoveredField;
            } 
            set {
                lenRecoveredField = value;
                NotifyPropertyChanged("LenRecovered");
            }
        }

        private LengthMeasure lenRecoveredField; 

        /// <summary>
        /// The relative amount of core recovered. 
        /// </summary>
		[Description("The relative amount of core recovered.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("recoverPc")]
        public VolumePerVolumeMeasurePercent RecoverPercent {
            get {
                return recoverPcField;
            } 
            set {
                recoverPcField = value;
                NotifyPropertyChanged("RecoverPercent");
            }
        }

        private VolumePerVolumeMeasurePercent recoverPcField; 

        /// <summary>
        /// Length of core barrel. 
        /// </summary>
		[Description("Length of core barrel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenBarrel")]
        public LengthMeasure LenBarrel {
            get {
                return lenBarrelField;
            } 
            set {
                lenBarrelField = value;
                NotifyPropertyChanged("LenBarrel");
            }
        }

        private LengthMeasure lenBarrelField; 

        /// <summary>
        /// Core inner barrel type. 
        /// </summary>
		[Description("Core inner barrel type.")]
        [EnergisticsDataTypeAttribute(DataType = "InnerBarrelType")]
		[XmlElement("innerBarrelType")]
        public InnerBarrelType? InnerBarrelType {
            get {
                return innerBarrelTypeField;
            } 
            set {
                innerBarrelTypeField = value;
                 this.InnerBarrelTypeSpecified = true;
                NotifyPropertyChanged("InnerBarrelType");
            }
        }

        private InnerBarrelType? innerBarrelTypeField; 

        /// <summary>
        /// innerBarrelTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InnerBarrelTypeSpecified {
            get {
                return innerBarrelTypeSpecifiedField;
            } 
            set {
                innerBarrelTypeSpecifiedField = value;
                NotifyPropertyChanged("InnerBarrelTypeSpecified");
            }
        }

        private bool innerBarrelTypeSpecifiedField; 

        /// <summary>
        /// General core description. 
        /// </summary>
		[StringLength(4000)]
        [Description("General core description.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("coreDescription")]
        public string CoreDescription {
            get {
                return coreDescriptionField;
            } 
            set {
                coreDescriptionField = value;
                NotifyPropertyChanged("CoreDescription");
            }
        }

        private string coreDescriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportLogInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportLogInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportLogInfo xsd type.")]
    public partial class DrillReportLogInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date and time that the log was completed. 
        /// </summary>
		[Description("The date and time that the log was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Log run number. For measurement while drilling, this should be the bottom hole assembly number.
        /// </summary>
		[StringLength(16)]
        [Description("Log run number.  For measurement while drilling, this should be the  bottom hole assembly number.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("runNumber")]
        public string RunNumber {
            get {
                return runNumberField;
            } 
            set {
                runNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private string runNumberField; 

        /// <summary>
        /// Name of contractor who provided the service. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of contractor who provided the service.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("serviceCompany")]
        public string ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string serviceCompanyField; 

        /// <summary>
        /// Measured depth at the top of the logged interval. 
        /// </summary>
		[Description("Measured depth at the top of the logged interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth at the bottom of the logged interval. 
        /// </summary>
		[Description("Measured depth at the bottom of the logged interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// True vertical depth at the top of the logged interval. 
        /// </summary>
		[Description("True vertical depth at the top of the logged interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// True vertical depth at the bottom of the logged interval. 
        /// </summary>
		[Description("True vertical depth at the bottom of the logged interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// A description of the logging tool. 
        /// </summary>
		[StringLength(50)]
        [Description("A description of the logging tool.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("tool")]
        public string Tool {
            get {
                return toolField;
            } 
            set {
                toolField = value;
                NotifyPropertyChanged("Tool");
            }
        }

        private string toolField; 

        /// <summary>
        /// Bottom hole circulating temperature. 
        /// </summary>
        [ComponentElement]
        [XmlElement("tempBHCT")]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempBHCT {
            get {
                return tempBHCTField;
            } 
            set {
                if (value != null && ETimeStaticSpecified) throw new Exception("Cannot set property TempBHCT when property ETimeStatic is already set");
                if (value != null && TempBHSTSpecified) throw new Exception("Cannot set property TempBHCT when property TempBHST is already set");
                tempBHCTField = value;
                TempBHCTSpecified = (value!=null);
                NotifyPropertyChanged("TempBHCT");
            }
        }

        private ThermodynamicTemperatureMeasure tempBHCTField; 
        private bool tempBHCTSpecified = false; 

        /// <summary>
        /// bool to indicate if TempBHCT has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TempBHCTSpecified
        {
            get {
                return tempBHCTSpecified;
            }
            set {
                tempBHCTSpecified= value;
            }
        }

        /// <summary>
        /// Bottom hole temperature static. . If you set this property, you must also set ETimeStatic.
        /// </summary>
        [ComponentElement]
        [XmlElement("tempBHST")]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempBHST {
            get {
                return tempBHSTField;
            } 
            set {
                if (value != null && TempBHCTSpecified) throw new Exception("Cannot set property TempBHST when property TempBHCT is already set");
                tempBHSTField = value;
                TempBHSTSpecified = (value!=null);
                NotifyPropertyChanged("TempBHST");
            }
        }

        private ThermodynamicTemperatureMeasure tempBHSTField; 
        private bool tempBHSTSpecified = false; 

        /// <summary>
        /// bool to indicate if TempBHST has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TempBHSTSpecified
        {
            get {
                return tempBHSTSpecified;
            }
            set {
                tempBHSTSpecified= value;
            }
        }

        /// <summary>
        /// Ellapsed time since circulation stopped. . If you set this property, you must also set TempBHST.
        /// </summary>
        [ComponentElement]
        [XmlElement("eTimStatic")]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
        public TimeMeasure ETimeStatic {
            get {
                return eTimStaticField;
            } 
            set {
                if (value != null && TempBHCTSpecified) throw new Exception("Cannot set property ETimeStatic when property TempBHCT is already set");
                eTimStaticField = value;
                ETimeStaticSpecified = (value!=null);
                NotifyPropertyChanged("ETimeStatic");
            }
        }

        private TimeMeasure eTimStaticField; 
        private bool eTimeStaticSpecified = false; 

        /// <summary>
        /// bool to indicate if ETimeStatic has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ETimeStaticSpecified
        {
            get {
                return eTimeStaticSpecified;
            }
            set {
                eTimeStaticSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType1> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType1> ItemsElementNameField; 

        /// <summary>
        /// Measured depth to the temperature measurement tool. 
        /// </summary>
		[Description("Measured depth to the temperature measurement tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTempTool")]
        public MeasuredDepthCoord MDTempTool {
            get {
                return mdTempToolField;
            } 
            set {
                mdTempToolField = value;
                NotifyPropertyChanged("MDTempTool");
            }
        }

        private MeasuredDepthCoord mdTempToolField; 

        /// <summary>
        /// True vertical depth to the temperature measurement tool. 
        /// </summary>
		[Description("True vertical depth to the temperature measurement tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTempTool")]
        public WellVerticalDepthCoord TvdTempTool {
            get {
                return tvdTempToolField;
            } 
            set {
                tvdTempToolField = value;
                NotifyPropertyChanged("TvdTempTool");
            }
        }

        private WellVerticalDepthCoord tvdTempToolField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Trajectory Station Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportSurveyStation", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Trajectory Station Component Schema")]
    public partial class DrillReportSurveyStation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date at which the directional survey took place.
        /// </summary>
		[Required]
        [Description("The date at which the directional survey took place.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// Measured depth of measurement from the drill datum. 
        /// </summary>
		[Required]
        [Description("Measured depth of measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Vertical depth of the measurements. 
        /// </summary>
		[Description("Vertical depth of the measurements.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// Hole inclination, measured from vertical. 
        /// </summary>
		[Description("Hole inclination, measured from vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("incl")]
        public PlaneAngleMeasure Incl {
            get {
                return inclField;
            } 
            set {
                inclField = value;
                NotifyPropertyChanged("Incl");
            }
        }

        private PlaneAngleMeasure inclField; 

        /// <summary>
        /// Hole azimuth. Corrected to wells azimuth reference. 
        /// </summary>
		[Description("Hole azimuth. Corrected to wells azimuth reference.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("azi")]
        public PlaneAngleMeasure Azi {
            get {
                return aziField;
            } 
            set {
                aziField = value;
                NotifyPropertyChanged("Azi");
            }
        }

        private PlaneAngleMeasure aziField; 

        /// <summary>
        /// Distance along vertical section azimuth plane. 
        /// </summary>
		[Description("Distance along vertical section azimuth plane.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("vertSect")]
        public LengthMeasure VertSect {
            get {
                return vertSectField;
            } 
            set {
                vertSectField = value;
                NotifyPropertyChanged("VertSect");
            }
        }

        private LengthMeasure vertSectField; 

        /// <summary>
        /// Dogleg severity. 
        /// </summary>
		[Description("Dogleg severity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerLengthMeasure")]
		[XmlElement("dls")]
        public AnglePerLengthMeasure DoglegSeverity {
            get {
                return dlsField;
            } 
            set {
                dlsField = value;
                NotifyPropertyChanged("DoglegSeverity");
            }
        }

        private AnglePerLengthMeasure dlsField; 

        /// <summary>
        /// The 2D coordinates of the item. Note that within the context of trajectory, the "original" coordinates are inherently local coordinates as defined above.
        /// </summary>
		[Description("The 2D coordinates of the item.  Note that within the context of trajectory, the \"original\" coordinates are inherently local coordinates as defined above.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_location")]
		[XmlElement("location")]
        public List<Location> Location {
            get {
                return locationField;
            } 
            set {
                locationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         /// <summary>
         /// bool to indicate if Location has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LocationSpecified
         {
             get {
             if(locationField!=null)
                 return locationField.Count>0?true:false;
             else return false;
             }
         }
        private List<Location> locationField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timestampedCommentString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timestampedCommentString", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the timestampedCommentString xsd type.")]
    public partial class TimestampedCommentString : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimestampedCommentString class.
        /// </summary>
        public TimestampedCommentString() {}

        /// <summary>
        /// Initializes a new instance of the TimestampedCommentString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TimestampedCommentString(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// dTim property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        [XmlAttribute("dTim")]
		
        public DateTime DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime dTimField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportPorePressure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportPorePressure", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportPorePressure xsd type.")]
    public partial class DrillReportPorePressure : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Was the reading measured or estimated
        /// </summary>
		[Required]
        [Description("Was the reading measured or estimated")]
        [EnergisticsDataTypeAttribute(DataType = "ReadingKind")]
		[XmlElement("readingKind")]
        public ReadingKind? ReadingKind {
            get {
                return readingKindField;
            } 
            set {
                readingKindField = value;
                 this.ReadingKindSpecified = true;
                NotifyPropertyChanged("ReadingKind");
            }
        }

        
        private bool ReadingKindSpecifiedField = false;
        
        /// <summary>
        /// ReadingKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReadingKindSpecified {
            get {
                return ReadingKindSpecifiedField;
            } 
            set {
                ReadingKindSpecifiedField = value;
                NotifyPropertyChanged("ReadingKindSpecified");
            }
        }
        
        private ReadingKind? readingKindField; 

        /// <summary>
        /// The equivalent mud weight value of the pore pressure reading.
        /// </summary>
		[Required]
        [Description("The equivalent mud weight value of the pore pressure reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("equivalentMudWeight")]
        public DensityMeasure EquivalentMudWeight {
            get {
                return equivalentMudWeightField;
            } 
            set {
                equivalentMudWeightField = value;
                NotifyPropertyChanged("EquivalentMudWeight");
            }
        }

        private DensityMeasure equivalentMudWeightField; 

        /// <summary>
        /// Date and time at the reading was made. 
        /// </summary>
		[Description("Date and time at the reading was made.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// The measured depth where the readings were recorded.
        /// </summary>
		[Description("The measured depth where the readings were recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// The true vertical depth where the readings were recorded.
        /// </summary>
		[Description("The true vertical depth where the readings were recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_drillReportStatusInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportStatusInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_drillReportStatusInfo xsd type.")]
    public partial class DrillReportStatusInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// the date and time that for which the well status is reported.
        /// </summary>
		[Description("the date and time that for which the well status is reported.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Wellbore measured depth at the end of the report period.
        /// </summary>
		[Description("Wellbore measured depth at the end of the report period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Wellbore true vertical depth at the end of the report.
        /// </summary>
		[Description("Wellbore true vertical depth at the end of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return tvdField;
            } 
            set {
                tvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord tvdField; 

        /// <summary>
        /// The measured plug back depth.
        /// </summary>
		[Description("The measured plug back depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdPlugTop")]
        public MeasuredDepthCoord MDPlugTop {
            get {
                return mdPlugTopField;
            } 
            set {
                mdPlugTopField = value;
                NotifyPropertyChanged("MDPlugTop");
            }
        }

        private MeasuredDepthCoord mdPlugTopField; 

        /// <summary>
        /// Hole nominal inside diameter. 
        /// </summary>
		[Description("Hole nominal inside diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaHole")]
        public LengthMeasure DiaHole {
            get {
                return diaHoleField;
            } 
            set {
                diaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure diaHoleField; 

        /// <summary>
        /// The measured depth to the start of the current hole diameter.
        /// </summary>
		[Description("The measured depth to the start of the current hole diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdDiaHoleStart")]
        public MeasuredDepthCoord MDDiaHoleStart {
            get {
                return mdDiaHoleStartField;
            } 
            set {
                mdDiaHoleStartField = value;
                NotifyPropertyChanged("MDDiaHoleStart");
            }
        }

        private MeasuredDepthCoord mdDiaHoleStartField; 

        /// <summary>
        /// Pilot hole nominal inside diameter at reporting time. 
        /// </summary>
		[Description("Pilot hole nominal inside diameter at reporting time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaPilot")]
        public LengthMeasure DiaPilot {
            get {
                return diaPilotField;
            } 
            set {
                diaPilotField = value;
                NotifyPropertyChanged("DiaPilot");
            }
        }

        private LengthMeasure diaPilotField; 

        /// <summary>
        /// The planned measured depth of the pilot hole.
        /// </summary>
		[Description("The planned measured depth of the pilot hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdDiaPilotPlan")]
        public MeasuredDepthCoord MDDiaPilotPlan {
            get {
                return mdDiaPilotPlanField;
            } 
            set {
                mdDiaPilotPlanField = value;
                NotifyPropertyChanged("MDDiaPilotPlan");
            }
        }

        private MeasuredDepthCoord mdDiaPilotPlanField; 

        /// <summary>
        /// The planned true vertical depth of the pilot hole.
        /// </summary>
		[Description("The planned true vertical depth of the pilot hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdDiaPilotPlan")]
        public WellVerticalDepthCoord TvdDiaPilotPlan {
            get {
                return tvdDiaPilotPlanField;
            } 
            set {
                tvdDiaPilotPlanField = value;
                NotifyPropertyChanged("TvdDiaPilotPlan");
            }
        }

        private WellVerticalDepthCoord tvdDiaPilotPlanField; 

        /// <summary>
        /// Type of wellbore. 
        /// </summary>
		[Description("Type of wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "WellboreType")]
		[XmlElement("typeWellbore")]
        public WellboreType? TypeWellbore {
            get {
                return typeWellboreField;
            } 
            set {
                typeWellboreField = value;
                 this.TypeWellboreSpecified = true;
                NotifyPropertyChanged("TypeWellbore");
            }
        }

        private WellboreType? typeWellboreField; 

        /// <summary>
        /// typeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeWellboreSpecified {
            get {
                return typeWellboreSpecifiedField;
            } 
            set {
                typeWellboreSpecifiedField = value;
                NotifyPropertyChanged("TypeWellboreSpecified");
            }
        }

        private bool typeWellboreSpecifiedField; 

        /// <summary>
        /// Measured depth to the kickoff point of the wellbore.
        /// </summary>
		[Description("Measured depth to the kickoff point of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdKickoff")]
        public MeasuredDepthCoord MDKickoff {
            get {
                return mdKickoffField;
            } 
            set {
                mdKickoffField = value;
                NotifyPropertyChanged("MDKickoff");
            }
        }

        private MeasuredDepthCoord mdKickoffField; 

        /// <summary>
        /// True vertical depth to the kickoff point of the wellbore.
        /// </summary>
		[Description("True vertical depth to the kickoff point of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("tvdKickoff")]
        public MeasuredDepthCoord TvdKickoff {
            get {
                return tvdKickoffField;
            } 
            set {
                tvdKickoffField = value;
                NotifyPropertyChanged("TvdKickoff");
            }
        }

        private MeasuredDepthCoord tvdKickoffField; 

        /// <summary>
        /// The name of the parent wellbore. This is the wellbore from which the current wellbore kickedoff.
        /// </summary>
		[Description("The name of the parent wellbore. This is the wellbore from which the current wellbore kickedoff.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellAlias")]
		[XmlElement("parentWellbore")]
        public List<WellAlias> ParentWellbore {
            get {
                return parentWellboreField;
            } 
            set {
                parentWellboreField = value;
                NotifyPropertyChanged("ParentWellbore");
            }
        }

         /// <summary>
         /// bool to indicate if ParentWellbore has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParentWellboreSpecified
         {
             get {
             if(parentWellboreField!=null)
                 return parentWellboreField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellAlias> parentWellboreField; 

        /// <summary>
        /// The measured formation strength. This should be the final measurement before the end of the report period.
        /// </summary>
		[Description("The measured formation strength.  This should be the final measurement before the end of the report period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("strengthForm")]
        public DensityMeasure StrengthForm {
            get {
                return strengthFormField;
            } 
            set {
                strengthFormField = value;
                NotifyPropertyChanged("StrengthForm");
            }
        }

        private DensityMeasure strengthFormField; 

        /// <summary>
        /// The measured depth of the formation strength measuement.
        /// </summary>
		[Description("The measured depth of the formation strength measuement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdStrengthForm")]
        public MeasuredDepthCoord MDStrengthForm {
            get {
                return mdStrengthFormField;
            } 
            set {
                mdStrengthFormField = value;
                NotifyPropertyChanged("MDStrengthForm");
            }
        }

        private MeasuredDepthCoord mdStrengthFormField; 

        /// <summary>
        /// The true vertical depth of the formation strength measuement.
        /// </summary>
		[Description("The true vertical depth of the formation strength measuement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdStrengthForm")]
        public WellVerticalDepthCoord TvdStrengthForm {
            get {
                return tvdStrengthFormField;
            } 
            set {
                tvdStrengthFormField = value;
                NotifyPropertyChanged("TvdStrengthForm");
            }
        }

        private WellVerticalDepthCoord tvdStrengthFormField; 

        /// <summary>
        /// Diameter of last casing. 
        /// </summary>
		[Description("Diameter of last casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaCsgLast")]
        public LengthMeasure DiaCsgLast {
            get {
                return diaCsgLastField;
            } 
            set {
                diaCsgLastField = value;
                NotifyPropertyChanged("DiaCsgLast");
            }
        }

        private LengthMeasure diaCsgLastField; 

        /// <summary>
        /// Measured depth of last casing. 
        /// </summary>
		[Description("Measured depth of last casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdCsgLast")]
        public MeasuredDepthCoord MDCsgLast {
            get {
                return mdCsgLastField;
            } 
            set {
                mdCsgLastField = value;
                NotifyPropertyChanged("MDCsgLast");
            }
        }

        private MeasuredDepthCoord mdCsgLastField; 

        /// <summary>
        /// True vertical depth of last casing. 
        /// </summary>
		[Description("True vertical depth of last casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdCsgLast")]
        public WellVerticalDepthCoord TvdCsgLast {
            get {
                return tvdCsgLastField;
            } 
            set {
                tvdCsgLastField = value;
                NotifyPropertyChanged("TvdCsgLast");
            }
        }

        private WellVerticalDepthCoord tvdCsgLastField; 

        /// <summary>
        /// The type of pressure test that was run during this reporting period.
        /// </summary>
		[Description("The type of pressure test that was run during this reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "PresTestType")]
		[XmlElement("presTestType")]
        public PresTestType? PresTestType {
            get {
                return presTestTypeField;
            } 
            set {
                presTestTypeField = value;
                 this.PresTestTypeSpecified = true;
                NotifyPropertyChanged("PresTestType");
            }
        }

        private PresTestType? presTestTypeField; 

        /// <summary>
        /// presTestTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PresTestTypeSpecified {
            get {
                return presTestTypeSpecifiedField;
            } 
            set {
                presTestTypeSpecifiedField = value;
                NotifyPropertyChanged("PresTestTypeSpecified");
            }
        }

        private bool presTestTypeSpecifiedField; 

        /// <summary>
        /// Measured depth of plan for this day number (report period). 
        /// </summary>
		[Description("Measured depth of plan for this day number (report period).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdPlanned")]
        public MeasuredDepthCoord MDPlanned {
            get {
                return mdPlannedField;
            } 
            set {
                mdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord mdPlannedField; 

        /// <summary>
        /// Distance drilled during this reporting period. This should be measured along the centerline of the wellbore.
        /// </summary>
		[Description("Distance drilled during this reporting period.   This should be measured along the centerline of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distDrill")]
        public LengthMeasure DistDrill {
            get {
                return distDrillField;
            } 
            set {
                distDrillField = value;
                NotifyPropertyChanged("DistDrill");
            }
        }

        private LengthMeasure distDrillField; 

        /// <summary>
        /// Elevation of the rotary kelly bushing. 
        /// </summary>
		[Description("Elevation of the rotary kelly bushing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellElevationCoord")]
		[XmlElement("elevKelly")]
        public WellElevationCoord ElevKelly {
            get {
                return elevKellyField;
            } 
            set {
                elevKellyField = value;
                NotifyPropertyChanged("ElevKelly");
            }
        }

        private WellElevationCoord elevKellyField; 

        /// <summary>
        /// A summary that sumarizes the activities performed and the status of the ongoing activities from the reporting period.
        /// </summary>
		[StringLength(4000)]
        [Description("A summary that sumarizes the activities performed  and the status of the ongoing activities from the reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("sum24Hr")]
        public string Sum24Hr {
            get {
                return sum24HrField;
            } 
            set {
                sum24HrField = value;
                NotifyPropertyChanged("Sum24Hr");
            }
        }

        private string sum24HrField; 

        /// <summary>
        /// A summary that sumarizes the planned activities the next reporting period. 
        /// </summary>
		[StringLength(4000)]
        [Description("A summary that sumarizes the planned activities the next reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("forecast24Hr")]
        public string Forecast24Hr {
            get {
                return forecast24HrField;
            } 
            set {
                forecast24HrField = value;
                NotifyPropertyChanged("Forecast24Hr");
            }
        }

        private string forecast24HrField; 

        /// <summary>
        /// Rate of penetration at the end of the reporting period. 
        /// </summary>
		[Description("Rate of penetration at the end of the reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("ropCurrent")]
        public VelocityMeasure RopCurrent {
            get {
                return ropCurrentField;
            } 
            set {
                ropCurrentField = value;
                NotifyPropertyChanged("RopCurrent");
            }
        }

        private VelocityMeasure ropCurrentField; 

        /// <summary>
        /// A pointer to the rig utilized in this reporting period. 
        /// </summary>
		[Description("A pointer to the rig utilized in this reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("rig")]
        public RefNameString Rig {
            get {
                return rigField;
            } 
            set {
                rigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private RefNameString rigField; 

        /// <summary>
        /// Time from start of Operations (commonly in days). 
        /// </summary>
		[Description("Time from start of Operations (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimStart")]
        public TimeMeasure ETimeStart {
            get {
                return eTimStartField;
            } 
            set {
                eTimStartField = value;
                NotifyPropertyChanged("ETimeStart");
            }
        }

        private TimeMeasure eTimStartField; 

        /// <summary>
        /// Time since bit broke ground (commonly in days). 
        /// </summary>
		[Description("Time since bit broke ground (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimSpud")]
        public TimeMeasure ETimeSpud {
            get {
                return eTimSpudField;
            } 
            set {
                eTimSpudField = value;
                NotifyPropertyChanged("ETimeSpud");
            }
        }

        private TimeMeasure eTimSpudField; 

        /// <summary>
        /// Time rig on location (commonly in days). 
        /// </summary>
		[Description("Time rig on location (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimLoc")]
        public TimeMeasure ETimeLoc {
            get {
                return eTimLocField;
            } 
            set {
                eTimLocField = value;
                NotifyPropertyChanged("ETimeLoc");
            }
        }

        private TimeMeasure eTimLocField; 

        /// <summary>
        /// Drilling time. 
        /// </summary>
		[Description("Drilling time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimDrill")]
        public TimeMeasure ETimeDrill {
            get {
                return eTimDrillField;
            } 
            set {
                eTimDrillField = value;
                NotifyPropertyChanged("ETimeDrill");
            }
        }

        private TimeMeasure eTimDrillField; 

        /// <summary>
        /// Average Rate of Penetration through Interval. 
        /// </summary>
		[Description("Average Rate of Penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("ropAv")]
        public VelocityMeasure RopAverage {
            get {
                return ropAvField;
            } 
            set {
                ropAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private VelocityMeasure ropAvField; 

        /// <summary>
        /// Name of operator rig supervisor. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of operator rig supervisor.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("supervisor")]
        public string Supervisor {
            get {
                return supervisorField;
            } 
            set {
                supervisorField = value;
                NotifyPropertyChanged("Supervisor");
            }
        }

        private string supervisorField; 

        /// <summary>
        /// Nae of Engineer. 
        /// </summary>
		[StringLength(64)]
        [Description("Nae of Engineer.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("engineer")]
        public string Engineer {
            get {
                return engineerField;
            } 
            set {
                engineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private string engineerField; 

        /// <summary>
        /// Name of operator wellsite geologist. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of operator wellsite geologist.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("geologist")]
        public string Geologist {
            get {
                return geologistField;
            } 
            set {
                geologistField = value;
                NotifyPropertyChanged("Geologist");
            }
        }

        private string geologistField; 

        /// <summary>
        /// Time spent rotary drilling for report interval. 
        /// </summary>
		[Description("Time spent rotary drilling for report interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimDrillRot")]
        public TimeMeasure ETimeDrillRot {
            get {
                return eTimDrillRotField;
            } 
            set {
                eTimDrillRotField = value;
                NotifyPropertyChanged("ETimeDrillRot");
            }
        }

        private TimeMeasure eTimDrillRotField; 

        /// <summary>
        /// Time spent slide drilling from start of bit run. 
        /// </summary>
		[Description("Time spent slide drilling from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimDrillSlid")]
        public TimeMeasure ETimeDrillSlid {
            get {
                return eTimDrillSlidField;
            } 
            set {
                eTimDrillSlidField = value;
                NotifyPropertyChanged("ETimeDrillSlid");
            }
        }

        private TimeMeasure eTimDrillSlidField; 

        /// <summary>
        /// Time spent circulating from start of bit run. 
        /// </summary>
		[Description("Time spent circulating from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimCirc")]
        public TimeMeasure ETimeCirc {
            get {
                return eTimCircField;
            } 
            set {
                eTimCircField = value;
                NotifyPropertyChanged("ETimeCirc");
            }
        }

        private TimeMeasure eTimCircField; 

        /// <summary>
        /// Time spent reaming from start of bit run. 
        /// </summary>
		[Description("Time spent reaming from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimReam")]
        public TimeMeasure ETimeReam {
            get {
                return eTimReamField;
            } 
            set {
                eTimReamField = value;
                NotifyPropertyChanged("ETimeReam");
            }
        }

        private TimeMeasure eTimReamField; 

        /// <summary>
        /// Time spent with no DD work (commonly in hours). 
        /// </summary>
		[Description("Time spent with no DD work (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimHold")]
        public TimeMeasure ETimeHold {
            get {
                return eTimHoldField;
            } 
            set {
                eTimHoldField = value;
                NotifyPropertyChanged("ETimeHold");
            }
        }

        private TimeMeasure eTimHoldField; 

        /// <summary>
        /// Time spent steering bottom hole assembly (commonly in hours). 
        /// </summary>
		[Description("Time spent steering bottom hole assembly (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimSteering")]
        public TimeMeasure ETimeSteering {
            get {
                return eTimSteeringField;
            } 
            set {
                eTimSteeringField = value;
                NotifyPropertyChanged("ETimeSteering");
            }
        }

        private TimeMeasure eTimSteeringField; 

        /// <summary>
        /// Distance drilled - rotating. 
        /// </summary>
		[Description("Distance drilled - rotating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distDrillRot")]
        public LengthMeasure DistDrillRot {
            get {
                return distDrillRotField;
            } 
            set {
                distDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure distDrillRotField; 

        /// <summary>
        /// Distance drilled - sliding. 
        /// </summary>
		[Description("Distance drilled - sliding.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distDrillSlid")]
        public LengthMeasure DistDrillSlid {
            get {
                return distDrillSlidField;
            } 
            set {
                distDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure distDrillSlidField; 

        /// <summary>
        /// Distance reamed. 
        /// </summary>
		[Description("Distance reamed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distReam")]
        public LengthMeasure DistReam {
            get {
                return distReamField;
            } 
            set {
                distReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure distReamField; 

        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly. 
        /// </summary>
		[Description("Distance covered while holding angle with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distHold")]
        public LengthMeasure DistHold {
            get {
                return distHoldField;
            } 
            set {
                distHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure distHoldField; 

        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly. 
        /// </summary>
		[Description("Distance covered while actively steering with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("distSteering")]
        public LengthMeasure DistSteering {
            get {
                return distSteeringField;
            } 
            set {
                distSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure distSteeringField; 

        /// <summary>
        /// Total number of personnel on board. 
        /// </summary>
		[Description("Total number of personnel on board.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numPob")]
        public short? NumPob {
            get {
                return numPobField;
            } 
            set {
                numPobField = value;
                 this.NumPobSpecified = true;
                NotifyPropertyChanged("NumPob");
            }
        }

        private short? numPobField; 

        /// <summary>
        /// numPobSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumPobSpecified {
            get {
                return numPobSpecifiedField;
            } 
            set {
                numPobSpecifiedField = value;
                NotifyPropertyChanged("NumPobSpecified");
            }
        }

        private bool numPobSpecifiedField; 

        /// <summary>
        /// Number of contractor personnel on board. 
        /// </summary>
		[Description("Number of contractor personnel on board.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numContract")]
        public short? NumContract {
            get {
                return numContractField;
            } 
            set {
                numContractField = value;
                 this.NumContractSpecified = true;
                NotifyPropertyChanged("NumContract");
            }
        }

        private short? numContractField; 

        /// <summary>
        /// numContractSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumContractSpecified {
            get {
                return numContractSpecifiedField;
            } 
            set {
                numContractSpecifiedField = value;
                NotifyPropertyChanged("NumContractSpecified");
            }
        }

        private bool numContractSpecifiedField; 

        /// <summary>
        /// Number of Operator personnel on board. 
        /// </summary>
		[Description("Number of Operator personnel on board.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numOperator")]
        public short? NumOperator {
            get {
                return numOperatorField;
            } 
            set {
                numOperatorField = value;
                 this.NumOperatorSpecified = true;
                NotifyPropertyChanged("NumOperator");
            }
        }

        private short? numOperatorField; 

        /// <summary>
        /// numOperatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumOperatorSpecified {
            get {
                return numOperatorSpecifiedField;
            } 
            set {
                numOperatorSpecifiedField = value;
                NotifyPropertyChanged("NumOperatorSpecified");
            }
        }

        private bool numOperatorSpecifiedField; 

        /// <summary>
        /// Number of service company personnel on board. 
        /// </summary>
		[Description("Number of service company personnel on board.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numService")]
        public short? NumService {
            get {
                return numServiceField;
            } 
            set {
                numServiceField = value;
                 this.NumServiceSpecified = true;
                NotifyPropertyChanged("NumService");
            }
        }

        private short? numServiceField; 

        /// <summary>
        /// numServiceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumServiceSpecified {
            get {
                return numServiceSpecifiedField;
            } 
            set {
                numServiceSpecifiedField = value;
                NotifyPropertyChanged("NumServiceSpecified");
            }
        }

        private bool numServiceSpecifiedField; 

        /// <summary>
        /// AFE (authorization for expenditure) number that this cost item applies to. 
        /// </summary>
		[StringLength(32)]
        [Description("AFE (authorization for expenditure) number that this cost item applies to.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("numAFE")]
        public string NumAFE {
            get {
                return numAFEField;
            } 
            set {
                numAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private string numAFEField; 

        /// <summary>
        /// Daily Cost. 
        /// </summary>
		[Description("Daily Cost.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cost")]
		[XmlElement("costDay")]
        public Cost CostDay {
            get {
                return costDayField;
            } 
            set {
                costDayField = value;
                NotifyPropertyChanged("CostDay");
            }
        }

        private Cost costDayField; 

        /// <summary>
        /// Daily Mud Cost. 
        /// </summary>
		[Description("Daily Mud Cost.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cost")]
		[XmlElement("costDayMud")]
        public Cost CostDayMud {
            get {
                return costDayMudField;
            } 
            set {
                costDayMudField = value;
                NotifyPropertyChanged("CostDayMud");
            }
        }

        private Cost costDayMudField; 

        /// <summary>
        /// Hole condition description. 
        /// </summary>
		[StringLength(32)]
        [Description("Hole condition description.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("conditionHole")]
        public string ConditionHole {
            get {
                return conditionHoleField;
            } 
            set {
                conditionHoleField = value;
                NotifyPropertyChanged("ConditionHole");
            }
        }

        private string conditionHoleField; 

        /// <summary>
        /// True vertical depth of leak off test point. 
        /// </summary>
		[Description("True vertical depth of leak off test point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdLot")]
        public WellVerticalDepthCoord TvdLot {
            get {
                return tvdLotField;
            } 
            set {
                tvdLotField = value;
                NotifyPropertyChanged("TvdLot");
            }
        }

        private WellVerticalDepthCoord tvdLotField; 

        /// <summary>
        /// Leak off test equivalent mud weight. 
        /// </summary>
		[Description("Leak off test equivalent mud weight.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("presLotEmw")]
        public DensityMeasure PresLotEmw {
            get {
                return presLotEmwField;
            } 
            set {
                presLotEmwField = value;
                NotifyPropertyChanged("PresLotEmw");
            }
        }

        private DensityMeasure presLotEmwField; 

        /// <summary>
        /// Kick tolerance pressure. 
        /// </summary>
		[Description("Kick tolerance pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presKickTol")]
        public PressureMeasure PresKickTol {
            get {
                return presKickTolField;
            } 
            set {
                presKickTolField = value;
                NotifyPropertyChanged("PresKickTol");
            }
        }

        private PressureMeasure presKickTolField; 

        /// <summary>
        /// Kick tolerance volume. 
        /// </summary>
		[Description("Kick tolerance volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volKickTol")]
        public VolumeMeasure VolKickTol {
            get {
                return volKickTolField;
            } 
            set {
                volKickTolField = value;
                NotifyPropertyChanged("VolKickTol");
            }
        }

        private VolumeMeasure volKickTolField; 

        /// <summary>
        /// Maximum allowable shut-in casing pressure. 
        /// </summary>
		[Description("Maximum allowable shut-in casing pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maasp")]
        public PressureMeasure Maasp {
            get {
                return maaspField;
            } 
            set {
                maaspField = value;
                NotifyPropertyChanged("Maasp");
            }
        }

        private PressureMeasure maaspField; 

        /// <summary>
        /// A pointer to the tubular (assembly) used in this report period. This represents a foreign key to tubular. 
        /// </summary>
		[Description("A pointer to the tubular (assembly) used in this report period. This represents a foreign key to tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("tubular")]
        public RefNameString Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private RefNameString tubularField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A common way for handling names of objects. An identifier type must include a Name. It may also include a NamingSystem, which gives meaning to the name. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellAlias", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A common way for handling names of objects. An identifier type must include a Name. It may also include a NamingSystem, which gives meaning to the name. ")]
    public partial class WellAlias : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// A human contextual name of a well. This should (hopefully) be unique within the context of the naming system.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A human contextual name of a well.  This should (hopefully) be unique within the context of the naming system.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The naming system under which the well is defined. Knowledge of the naming system may allow the hame to be parsed for embeded information.
        /// </summary>
		[Required]
        [Description("The naming system under which the  well is defined. Knowledge of the naming system may allow the hame to be parsed for embeded information.")]
        [EnergisticsDataTypeAttribute(DataType = "WellNamingSystem")]
		[XmlElement("namingSystem")]
        public WellNamingSystem? NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                 this.NamingSystemSpecified = true;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        
        private bool NamingSystemSpecifiedField = false;
        
        /// <summary>
        /// NamingSystemSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NamingSystemSpecified {
            get {
                return NamingSystemSpecifiedField;
            } 
            set {
                NamingSystemSpecifiedField = value;
                NotifyPropertyChanged("NamingSystemSpecified");
            }
        }
        
        private WellNamingSystem? namingSystemField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A common way for handling names of objects. An identifier type must include a Name. It may also include a NamingSystem, which gives meaning to the name. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_alias", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A common way for handling names of objects. An identifier type must include a Name. It may also include a NamingSystem, which gives meaning to the name. ")]
    public partial class Alias : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// A human contextual name of an item. This should (hopefully) be unique within the context of the naming system.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A human contextual name of an item.  This should (hopefully) be unique within the context of the naming system.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The naming system under which the item is defined. Knowledge of the naming system may allow the hame to be parsed for embeded information.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The naming system under which the  item is defined. Knowledge of the naming system may allow the hame to be parsed for embeded information.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("namingSystem")]
        public string NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private string namingSystemField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  General information about a wellbore for a drill operations report. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_drillReportWellboreInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" General information about a wellbore for a drill operations report. ")]
    public partial class DrillReportWellboreInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time at which the well was spudded. This is when the well drilling equipment begin to bore into the earth's surface for the purpose of drilling a well. 
        /// </summary>
		[Description("Date and time at which the well was spudded.  This is when the well drilling equipment begin to bore into  the earth's surface for the purpose of drilling a well.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimSpud")]
        public Timestamp? DateTimeSpud {
            get {
                return dTimSpudField;
            } 
            set {
                dTimSpudField = value;
                 this.DateTimeSpudSpecified = true;
                NotifyPropertyChanged("DateTimeSpud");
            }
        }

        private Timestamp? dTimSpudField; 

        /// <summary>
        /// dTimSpudSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpudSpecified {
            get {
                return dTimSpudSpecifiedField;
            } 
            set {
                dTimSpudSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpudSpecified");
            }
        }

        private bool dTimSpudSpecifiedField; 

        /// <summary>
        /// Date and time at which the well was predrilled. This is when the well drilling equipment begin to bore into the earth's surface for the purpose of drilling a well. 
        /// </summary>
		[Description("Date and time at which the well was predrilled.  This is when the well drilling equipment begin to bore into  the earth's surface for the purpose of drilling a well.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimPreSpud")]
        public Timestamp? DateTimePreSpud {
            get {
                return dTimPreSpudField;
            } 
            set {
                dTimPreSpudField = value;
                 this.DateTimePreSpudSpecified = true;
                NotifyPropertyChanged("DateTimePreSpud");
            }
        }

        private Timestamp? dTimPreSpudField; 

        /// <summary>
        /// dTimPreSpudSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePreSpudSpecified {
            get {
                return dTimPreSpudSpecifiedField;
            } 
            set {
                dTimPreSpudSpecifiedField = value;
                NotifyPropertyChanged("DateTimePreSpudSpecified");
            }
        }

        private bool dTimPreSpudSpecifiedField; 

        /// <summary>
        /// The date when the drilling activity is completed.
        /// </summary>
		[Description("The date when the drilling activity is completed.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("dateDrillComplete", DataType="date")]
        public DateTime? DateDrillComplete {
            get {
                return dateDrillCompleteField;
            } 
            set {
                dateDrillCompleteField = value;
                 this.DateDrillCompleteSpecified = true;
                NotifyPropertyChanged("DateDrillComplete");
            }
        }

        private DateTime? dateDrillCompleteField; 

        /// <summary>
        /// dateDrillCompleteSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateDrillCompleteSpecified {
            get {
                return dateDrillCompleteSpecifiedField;
            } 
            set {
                dateDrillCompleteSpecifiedField = value;
                NotifyPropertyChanged("DateDrillCompleteSpecified");
            }
        }

        private bool dateDrillCompleteSpecifiedField; 

        /// <summary>
        /// The name of the drilling Operator company. 
        /// </summary>
		[StringLength(64)]
        [Description("The name of the drilling Operator company.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("operator")]
        public string Operator {
            get {
                return operatorField;
            } 
            set {
                operatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private string operatorField; 

        /// <summary>
        /// The name of the drilling Contractor company. 
        /// </summary>
		[StringLength(64)]
        [Description("The name of the drilling Contractor company.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("drillContractor")]
        public string DrillContractor {
            get {
                return drillContractorField;
            } 
            set {
                drillContractorField = value;
                NotifyPropertyChanged("DrillContractor");
            }
        }

        private string drillContractorField; 

        /// <summary>
        /// A name of the fixed or movable facility being used to drill the wellbore.
        /// </summary>
		[Description("A name of the fixed or movable facility being used to drill the wellbore.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_alias")]
		[XmlElement("rigAlias")]
        public List<Alias> RigAlias {
            get {
                return rigAliasField;
            } 
            set {
                rigAliasField = value;
                NotifyPropertyChanged("RigAlias");
            }
        }

         /// <summary>
         /// bool to indicate if RigAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RigAliasSpecified
         {
             get {
             if(rigAliasField!=null)
                 return rigAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<Alias> rigAliasField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Drilling Report object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_drillReport", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Drilling Report object.")]
    public partial class DrillReport : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the drilling report. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the drilling report.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the drilling report. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the drilling report.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Date and time of the start of the reporting period. 
        /// </summary>
		[Required]
        [Description("Date and time of the start of the reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// Date and time end of the reporting period. Report periods are commonly 24 hour periods. 
        /// </summary>
		[Required]
        [Description("Date and time end of the reporting period. Report periods are commonly 24 hour periods.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// The kind of report version. For example, a preliminary version.
        /// </summary>
		[Description("The kind of report version. For example, a  preliminary version.")]
        [EnergisticsDataTypeAttribute(DataType = "OpsReportVersion")]
		[XmlElement("versionKind")]
        public OpsReportVersion? VersionKind {
            get {
                return versionKindField;
            } 
            set {
                versionKindField = value;
                 this.VersionKindSpecified = true;
                NotifyPropertyChanged("VersionKind");
            }
        }

        private OpsReportVersion? versionKindField; 

        /// <summary>
        /// versionKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool VersionKindSpecified {
            get {
                return versionKindSpecifiedField;
            } 
            set {
                versionKindSpecifiedField = value;
                NotifyPropertyChanged("VersionKindSpecified");
            }
        }

        private bool versionKindSpecifiedField; 

        /// <summary>
        /// The date and time of the report creation. A later timestamp indicates a newer version. In order to update values in a report a full updated copy of the original report should be submitted.
        /// </summary>
		[Description("The date and time of the report creation. A later timestamp indicates a newer version. In order to update values in a report a full  updated copy of the original report should be submitted.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("createDate")]
        public Timestamp? CreateDate {
            get {
                return createDateField;
            } 
            set {
                createDateField = value;
                 this.CreateDateSpecified = true;
                NotifyPropertyChanged("CreateDate");
            }
        }

        private Timestamp? createDateField; 

        /// <summary>
        /// createDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CreateDateSpecified {
            get {
                return createDateSpecifiedField;
            } 
            set {
                createDateSpecifiedField = value;
                NotifyPropertyChanged("CreateDateSpecified");
            }
        }

        private bool createDateSpecifiedField; 

        /// <summary>
        /// An alternative name of the well (in a naming system). The above well name should be included in the list of aliases so that its origin can be known.
        /// </summary>
		[Description("An alternative name of the well (in a naming system). The above well name should be included in the list of aliases so that its origin can be known.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellAlias")]
		[XmlElement("wellAlias")]
        public WellAlias WellAlias {
            get {
                return wellAliasField;
            } 
            set {
                wellAliasField = value;
                NotifyPropertyChanged("WellAlias");
            }
        }

        private WellAlias wellAliasField; 

        /// <summary>
        /// An alternative name of the wellbore (in a naming system). The above well name should be included in the list of aliases so that its origin can be known.
        /// </summary>
		[Description("An alternative name of the wellbore (in a naming system). The above well name should be included in the list of aliases so that its origin can be known.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellAlias")]
		[XmlElement("wellboreAlias")]
        public List<WellAlias> WellboreAlias {
            get {
                return wellboreAliasField;
            } 
            set {
                wellboreAliasField = value;
                NotifyPropertyChanged("WellboreAlias");
            }
        }

         /// <summary>
         /// bool to indicate if WellboreAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellboreAliasSpecified
         {
             get {
             if(wellboreAliasField!=null)
                 return wellboreAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellAlias> wellboreAliasField; 

        /// <summary>
        /// Defines a vertical datum used for measured depths, vertical depths or elevations. This must be specified if one of the aforementioned coordinate values are included in the report. This only applies to this report and is generally a copy of the same information from the well object.
        /// </summary>
		[Description("Defines a vertical datum used for  measured depths, vertical depths or elevations. This must be specified if one of the aforementioned coordinate values are included in the report. This only applies to this report and is generally a copy of the same information from the well object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellDatum")]
		[XmlElement("wellDatum")]
        public List<WellDatum> WellDatum {
            get {
                return wellDatumField;
            } 
            set {
                wellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

         /// <summary>
         /// bool to indicate if WellDatum has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellDatumSpecified
         {
             get {
             if(wellDatumField!=null)
                 return wellDatumField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellDatum> wellDatumField; 

        /// <summary>
        /// Defines a coordinate reference system used by coordinates within this report. This must be specified if coordinate values are included in the report (i.e., in a survey station location). This only applies to this report and is generally a copy of the same information from the well object.
        /// </summary>
		[Description("Defines a coordinate reference system used by  coordinates within this report. This must be specified if coordinate values are included in the report  (i.e., in a survey station location). This only applies to this report and is generally a copy of the same information from the well object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellCRS")]
		[XmlElement("wellCRS")]
        public List<WellCRS> WellCRS {
            get {
                return wellCRSField;
            } 
            set {
                wellCRSField = value;
                NotifyPropertyChanged("WellCRS");
            }
        }

         /// <summary>
         /// bool to indicate if WellCRS has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellCRSSpecified
         {
             get {
             if(wellCRSField!=null)
                 return wellCRSField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellCRS> wellCRSField; 

        /// <summary>
        /// General information about a wellbore. The well is represented by the original wellbore.
        /// </summary>
		[Description("General information about a wellbore. The well is  represented by the original wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportWellboreInfo")]
		[XmlElement("wellboreInfo")]
        public DrillReportWellboreInfo WellboreInfo {
            get {
                return wellboreInfoField;
            } 
            set {
                wellboreInfoField = value;
                NotifyPropertyChanged("WellboreInfo");
            }
        }

        private DrillReportWellboreInfo wellboreInfoField; 

        /// <summary>
        /// General status information.
        /// </summary>
		[Description("General status information.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportStatusInfo")]
		[XmlElement("statusInfo")]
        public List<DrillReportStatusInfo> StatusInfo {
            get {
                return statusInfoField;
            } 
            set {
                statusInfoField = value;
                NotifyPropertyChanged("StatusInfo");
            }
        }

         /// <summary>
         /// bool to indicate if StatusInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusInfoSpecified
         {
             get {
             if(statusInfoField!=null)
                 return statusInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportStatusInfo> statusInfoField; 

        /// <summary>
        /// Information about a bit.
        /// </summary>
		[Description("Information about a bit.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_bitRecord")]
		[XmlElement("bitRecord")]
        public List<BitRecord> BitRecord {
            get {
                return bitRecordField;
            } 
            set {
                bitRecordField = value;
                NotifyPropertyChanged("BitRecord");
            }
        }

         /// <summary>
         /// bool to indicate if BitRecord has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BitRecordSpecified
         {
             get {
             if(bitRecordField!=null)
                 return bitRecordField.Count>0?true:false;
             else return false;
             }
         }
        private List<BitRecord> bitRecordField; 

        /// <summary>
        /// One fluid record. 
        /// </summary>
		[Description("One fluid record.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluid")]
		[XmlElement("fluid")]
        public List<Fluid> Fluid {
            get {
                return fluidField;
            } 
            set {
                fluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

         /// <summary>
         /// bool to indicate if Fluid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSpecified
         {
             get {
             if(fluidField!=null)
                 return fluidField.Count>0?true:false;
             else return false;
             }
         }
        private List<Fluid> fluidField; 

        /// <summary>
        /// Information about the pore pressure.
        /// </summary>
		[Description("Information about the pore pressure.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportPorePressure")]
		[XmlElement("porePressure")]
        public List<DrillReportPorePressure> PorePressure {
            get {
                return porePressureField;
            } 
            set {
                porePressureField = value;
                NotifyPropertyChanged("PorePressure");
            }
        }

         /// <summary>
         /// bool to indicate if PorePressure has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PorePressureSpecified
         {
             get {
             if(porePressureField!=null)
                 return porePressureField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportPorePressure> porePressureField; 

        /// <summary>
        /// A description of what happened from the end of report to an alternative time before the end of the next report. This is intended to allow a preliminary description of what happened from the end of the report (commonly midnight) until the time of submission of a preliminary report (commonly 6:00 in the morning).
        /// </summary>
		[Description("A description of what happened from the end of report  to an alternative time before the end of the next report.  This is intended to allow a preliminary description  of what happened from the end of the report (commonly midnight) until the time of submission of a preliminary report (commonly 6:00 in the morning).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timestampedCommentString")]
		[XmlElement("extendedReport")]
        public TimestampedCommentString ExtendedReport {
            get {
                return extendedReportField;
            } 
            set {
                extendedReportField = value;
                NotifyPropertyChanged("ExtendedReport");
            }
        }

        private TimestampedCommentString extendedReportField; 

        /// <summary>
        /// A survey station recorded during the report interval. 
        /// </summary>
		[Description("A survey station recorded during the report interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportSurveyStation")]
		[XmlElement("surveyStation")]
        public List<DrillReportSurveyStation> SurveyStation {
            get {
                return surveyStationField;
            } 
            set {
                surveyStationField = value;
                NotifyPropertyChanged("SurveyStation");
            }
        }

         /// <summary>
         /// bool to indicate if SurveyStation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SurveyStationSpecified
         {
             get {
             if(surveyStationField!=null)
                 return surveyStationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportSurveyStation> surveyStationField; 

        /// <summary>
        /// Activity breakdown, multiple for many activities. 
        /// </summary>
		[Description("Activity breakdown, multiple for many activities.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_activity")]
		[XmlElement("activity")]
        public List<Activity> Activity {
            get {
                return activityField;
            } 
            set {
                activityField = value;
                NotifyPropertyChanged("Activity");
            }
        }

         /// <summary>
         /// bool to indicate if Activity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ActivitySpecified
         {
             get {
             if(activityField!=null)
                 return activityField.Count>0?true:false;
             else return false;
             }
         }
        private List<Activity> activityField; 

        /// <summary>
        /// General information about a log.
        /// </summary>
		[Description("General information about a log.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportLogInfo")]
		[XmlElement("logInfo")]
        public List<DrillReportLogInfo> LogInfo {
            get {
                return logInfoField;
            } 
            set {
                logInfoField = value;
                NotifyPropertyChanged("LogInfo");
            }
        }

         /// <summary>
         /// bool to indicate if LogInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogInfoSpecified
         {
             get {
             if(logInfoField!=null)
                 return logInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportLogInfo> logInfoField; 

        /// <summary>
        /// General information about a core.
        /// </summary>
		[Description("General information about a core.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportCoreInfo")]
		[XmlElement("coreInfo")]
        public List<DrillReportCoreInfo> CoreInfo {
            get {
                return coreInfoField;
            } 
            set {
                coreInfoField = value;
                NotifyPropertyChanged("CoreInfo");
            }
        }

         /// <summary>
         /// bool to indicate if CoreInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CoreInfoSpecified
         {
             get {
             if(coreInfoField!=null)
                 return coreInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportCoreInfo> coreInfoField; 

        /// <summary>
        /// General information about a production well test.
        /// </summary>
		[Description("General information about a production well test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportWellTestInfo")]
		[XmlElement("wellTestInfo")]
        public List<DrillReportWellTestInfo> WellTestInfo {
            get {
                return wellTestInfoField;
            } 
            set {
                wellTestInfoField = value;
                NotifyPropertyChanged("WellTestInfo");
            }
        }

         /// <summary>
         /// bool to indicate if WellTestInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellTestInfoSpecified
         {
             get {
             if(wellTestInfoField!=null)
                 return wellTestInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportWellTestInfo> wellTestInfoField; 

        /// <summary>
        /// General information about a wireline formation test.
        /// </summary>
		[Description("General information about a wireline formation test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportFormTestInfo")]
		[XmlElement("formTestInfo")]
        public List<DrillReportFormTestInfo> FormTestInfo {
            get {
                return formTestInfoField;
            } 
            set {
                formTestInfoField = value;
                NotifyPropertyChanged("FormTestInfo");
            }
        }

         /// <summary>
         /// bool to indicate if FormTestInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FormTestInfoSpecified
         {
             get {
             if(formTestInfoField!=null)
                 return formTestInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportFormTestInfo> formTestInfoField; 

        /// <summary>
        /// General information about the lithology and shows in an interval.
        /// </summary>
		[Description("General information about the lithology and shows in an interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportLithShowInfo")]
		[XmlElement("lithShowInfo")]
        public List<DrillReportLithShowInfo> LithShowInfo {
            get {
                return lithShowInfoField;
            } 
            set {
                lithShowInfoField = value;
                NotifyPropertyChanged("LithShowInfo");
            }
        }

         /// <summary>
         /// bool to indicate if LithShowInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LithShowInfoSpecified
         {
             get {
             if(lithShowInfoField!=null)
                 return lithShowInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportLithShowInfo> lithShowInfoField; 

        /// <summary>
        /// General information about equipment failure.
        /// </summary>
		[Description("General information about equipment failure.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportEquipFailureInfo")]
		[XmlElement("equipFailureInfo")]
        public List<DrillReportEquipFailureInfo> EquipFailureInfo {
            get {
                return equipFailureInfoField;
            } 
            set {
                equipFailureInfoField = value;
                NotifyPropertyChanged("EquipFailureInfo");
            }
        }

         /// <summary>
         /// bool to indicate if EquipFailureInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EquipFailureInfoSpecified
         {
             get {
             if(equipFailureInfoField!=null)
                 return equipFailureInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportEquipFailureInfo> equipFailureInfoField; 

        /// <summary>
        /// General information about a well control incident.
        /// </summary>
		[Description("General information about a well control incident.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportControlIncidentInfo")]
		[XmlElement("controlIncidentInfo")]
        public List<DrillReportControlIncidentInfo> ControlIncidentInfo {
            get {
                return controlIncidentInfoField;
            } 
            set {
                controlIncidentInfoField = value;
                NotifyPropertyChanged("ControlIncidentInfo");
            }
        }

         /// <summary>
         /// bool to indicate if ControlIncidentInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ControlIncidentInfoSpecified
         {
             get {
             if(controlIncidentInfoField!=null)
                 return controlIncidentInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportControlIncidentInfo> controlIncidentInfoField; 

        /// <summary>
        /// General information about a well control incident.
        /// </summary>
		[Description("General information about a well control incident.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportStratInfo")]
		[XmlElement("stratInfo")]
        public List<DrillReportStratInfo> StratInfo {
            get {
                return stratInfoField;
            } 
            set {
                stratInfoField = value;
                NotifyPropertyChanged("StratInfo");
            }
        }

         /// <summary>
         /// bool to indicate if StratInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StratInfoSpecified
         {
             get {
             if(stratInfoField!=null)
                 return stratInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportStratInfo> stratInfoField; 

        /// <summary>
        /// General information about a well control incident.
        /// </summary>
		[Description("General information about a well control incident.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportPerfInfo")]
		[XmlElement("perfInfo")]
        public List<DrillReportPerfInfo> PerfInfo {
            get {
                return perfInfoField;
            } 
            set {
                perfInfoField = value;
                NotifyPropertyChanged("PerfInfo");
            }
        }

         /// <summary>
         /// bool to indicate if PerfInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerfInfoSpecified
         {
             get {
             if(perfInfoField!=null)
                 return perfInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportPerfInfo> perfInfoField; 

        /// <summary>
        /// General information about a gas reading.
        /// </summary>
		[Description("General information about a gas reading.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillReportGasReadingInfo")]
		[XmlElement("gasReadingInfo")]
        public List<DrillReportGasReadingInfo> GasReadingInfo {
            get {
                return gasReadingInfoField;
            } 
            set {
                gasReadingInfoField = value;
                NotifyPropertyChanged("GasReadingInfo");
            }
        }

         /// <summary>
         /// bool to indicate if GasReadingInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GasReadingInfoSpecified
         {
             get {
             if(gasReadingInfoField!=null)
                 return gasReadingInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportGasReadingInfo> gasReadingInfoField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The sender may choose to send a nameCRS, with a well known name structure, or the sequence of information that fully defines the CRS. It is recommended that, for the standard CRSs in the EPSG database, the nameCRS be sent.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_standardVerticalCRS", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("The sender may choose to send a nameCRS, with a well known name structure, or the sequence of information that fully defines the CRS. It is recommended that, for the standard CRSs in the EPSG database, the nameCRS be sent.")]
    public partial class StandardVerticalCRS : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'RH70' with a code of '5718' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
        [ComponentElement]
        [XmlElement("nameCRS")]
        [EnergisticsDataTypeAttribute(DataType = "wellKnownNameStruct")]
        public WellKnownNameStruct NameCRS {
            get {
                return nameCRSField;
            } 
            set {
                if (value != null && VerticalCRSSpecified) throw new Exception("Cannot set property NameCRS when property VerticalCRS is already set");
                nameCRSField = value;
                NameCRSSpecified = (value!=null);
                NotifyPropertyChanged("NameCRS");
            }
        }

        private WellKnownNameStruct nameCRSField; 
        private bool nameCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if NameCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool NameCRSSpecified
        {
            get {
                return nameCRSSpecified;
            }
            set {
                nameCRSSpecified= value;
            }
        }

        /// <summary>
        /// VerticalCRS property
        /// </summary>
        [ComponentElement]
        [XmlElement("VerticalCRS", Namespace="http://www.opengis.net/gml/3.2")]
        public VerticalCRSType VerticalCRS {
            get {
                return VerticalCRSField;
            } 
            set {
                VerticalCRSField = value;
                VerticalCRSSpecified = (value!=null);
                NotifyPropertyChanged("VerticalCRS");
            }
        }

        private VerticalCRSType VerticalCRSField; 
        private bool verticalCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if VerticalCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool VerticalCRSSpecified
        {
            get {
                return verticalCRSSpecified;
            }
            set {
                verticalCRSSpecified= value;
            }
        }


        /// <summary>
        /// In the case that the vertical datum is the ellipsoid, and that the vertical coordinate values are heights above the ellipsoid, this element should be instantiated to indicate this. This element should point to the geodetic CRS that defines this ellipsoid system. The ellipsoidal height is only valid if the horizontal CRS using the same ellipsoid is defined.
        /// </summary>
		[Description("In the case that the vertical datum is the ellipsoid, and that the vertical coordinate values are heights above the ellipsoid, this element should be instantiated to indicate this. This element should point to the geodetic CRS that defines this ellipsoid system. The ellipsoidal height is only valid if the horizontal CRS using the same ellipsoid is defined.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("ellipsoidalDatum")]
        public RefNameString EllipsoidalDatum {
            get {
                return ellipsoidalDatumField;
            } 
            set {
                ellipsoidalDatumField = value;
                NotifyPropertyChanged("EllipsoidalDatum");
            }
        }

        private RefNameString ellipsoidalDatumField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the VerticalCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCRSType xsd type.")]
    public partial class VerticalCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// verticalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("verticalCS")]
        public VerticalCSPropertyType VerticalCS {
            get {
                return verticalCSField;
            } 
            set {
                verticalCSField = value;
                NotifyPropertyChanged("VerticalCS");
            }
        }

        private VerticalCSPropertyType verticalCSField; 

        /// <summary>
        /// verticalDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("verticalDatum")]
        public VerticalDatumPropertyType VerticalDatum {
            get {
                return verticalDatumField;
            } 
            set {
                verticalDatumField = value;
                NotifyPropertyChanged("VerticalDatum");
            }
        }

        private VerticalDatumPropertyType verticalDatumField; 


    } //here

    /// <summary>
    /// This class represents the VerticalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCSPropertyType xsd type.")]
    public partial class VerticalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VerticalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("VerticalCS")]
        public VerticalCSType VerticalCS {
            get {
                return VerticalCSField;
            } 
            set {
                VerticalCSField = value;
                NotifyPropertyChanged("VerticalCS");
            }
        }

        private VerticalCSType VerticalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the VerticalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCSType xsd type.")]
    public partial class VerticalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractCoordinateSystemType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCoordinateSystem", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCoordinateSystemType xsd type.")]
    public abstract partial class AbstractCoordinateSystemType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// axis property
        /// </summary>
		[RecurringElement]
		[XmlElement("axis")]
        public List<CoordinateSystemAxisPropertyType> Axis {
            get {
                return axisField;
            } 
            set {
                axisField = value;
                NotifyPropertyChanged("Axis");
            }
        }

         /// <summary>
         /// bool to indicate if Axis has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AxisSpecified
         {
             get {
             if(axisField!=null)
                 return axisField.Count>0?true:false;
             else return false;
             }
         }
        private List<CoordinateSystemAxisPropertyType> axisField; 

		/// <summary>
        /// aggregationType property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AggregationType")]
        [XmlAttribute("aggregationType")]
		
        public AggregationType AggregationType {
            get {
                return aggregationTypeField;
            } 
            set {
                aggregationTypeField = value;
                 this.AggregationTypeSpecified = true;
                NotifyPropertyChanged("AggregationType");
            }
        }

        private AggregationType aggregationTypeField; 

        /// <summary>
        /// aggregationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AggregationTypeSpecified {
            get {
                return aggregationTypeSpecifiedField;
            } 
            set {
                aggregationTypeSpecifiedField = value;
                NotifyPropertyChanged("AggregationTypeSpecified");
            }
        }

        private bool aggregationTypeSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the CoordinateSystemAxisPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("axis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CoordinateSystemAxisPropertyType xsd type.")]
    public partial class CoordinateSystemAxisPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CoordinateSystemAxis property
        /// </summary>
		[ComponentElement]
		[XmlElement("CoordinateSystemAxis")]
        public CoordinateSystemAxisType CoordinateSystemAxis {
            get {
                return CoordinateSystemAxisField;
            } 
            set {
                CoordinateSystemAxisField = value;
                NotifyPropertyChanged("CoordinateSystemAxis");
            }
        }

        private CoordinateSystemAxisType CoordinateSystemAxisField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CoordinateSystemAxisType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CoordinateSystemAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CoordinateSystemAxisType xsd type.")]
    public partial class CoordinateSystemAxisType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// axisAbbrev property
        /// </summary>
		[ComponentElement]
		[XmlElement("axisAbbrev")]
        public CodeType AxisAbbrev {
            get {
                return axisAbbrevField;
            } 
            set {
                axisAbbrevField = value;
                NotifyPropertyChanged("AxisAbbrev");
            }
        }

        private CodeType axisAbbrevField; 

        /// <summary>
        /// axisDirection property
        /// </summary>
		[ComponentElement]
		[XmlElement("axisDirection")]
        public CodeWithAuthorityType AxisDirection {
            get {
                return axisDirectionField;
            } 
            set {
                axisDirectionField = value;
                NotifyPropertyChanged("AxisDirection");
            }
        }

        private CodeWithAuthorityType axisDirectionField; 

        /// <summary>
        /// minimumValue property
        /// </summary>
		
		[XmlElement("minimumValue")]
        public double? MinimumValue {
            get {
                return minimumValueField;
            } 
            set {
                minimumValueField = value;
                 this.MinimumValueSpecified = true;
                NotifyPropertyChanged("MinimumValue");
            }
        }

        private double? minimumValueField; 

        /// <summary>
        /// minimumValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MinimumValueSpecified {
            get {
                return minimumValueSpecifiedField;
            } 
            set {
                minimumValueSpecifiedField = value;
                NotifyPropertyChanged("MinimumValueSpecified");
            }
        }

        private bool minimumValueSpecifiedField; 

        /// <summary>
        /// maximumValue property
        /// </summary>
		
		[XmlElement("maximumValue")]
        public double? MaximumValue {
            get {
                return maximumValueField;
            } 
            set {
                maximumValueField = value;
                 this.MaximumValueSpecified = true;
                NotifyPropertyChanged("MaximumValue");
            }
        }

        private double? maximumValueField; 

        /// <summary>
        /// maximumValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaximumValueSpecified {
            get {
                return maximumValueSpecifiedField;
            } 
            set {
                maximumValueSpecifiedField = value;
                NotifyPropertyChanged("MaximumValueSpecified");
            }
        }

        private bool maximumValueSpecifiedField; 

        /// <summary>
        /// rangeMeaning property
        /// </summary>
		[ComponentElement]
		[XmlElement("rangeMeaning")]
        public CodeWithAuthorityType RangeMeaning {
            get {
                return rangeMeaningField;
            } 
            set {
                rangeMeaningField = value;
                NotifyPropertyChanged("RangeMeaning");
            }
        }

        private CodeWithAuthorityType rangeMeaningField; 


    } //here

    /// <summary>
    /// This class represents the CodeType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CodeWithAuthorityType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("name", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CodeType xsd type.")]
    public partial class CodeType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeType class.
        /// </summary>
        public CodeType() {}

        /// <summary>
        /// Initializes a new instance of the CodeType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// codeSpace property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeSpace")]
		
        public string CodeSpace {
            get {
                return codeSpaceField;
            } 
            set {
                codeSpaceField = value;
                NotifyPropertyChanged("CodeSpace");
            }
        }

        private string codeSpaceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CodeWithAuthorityType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("identifier", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CodeWithAuthorityType xsd type.")]
    public partial class CodeWithAuthorityType : CodeType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeWithAuthorityType class.
        /// </summary>
        public CodeWithAuthorityType() {}

        /// <summary>
        /// Initializes a new instance of the CodeWithAuthorityType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeWithAuthorityType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IdentifiedObjectType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IdentifiedObjectType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the IdentifiedObjectType xsd type.")]
    public abstract partial class IdentifiedObjectType : DefinitionType, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the DefinitionType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Definition", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the DefinitionType xsd type.")]
    public partial class DefinitionType : DefinitionBaseType, INotifyPropertyChanged
    {

        /// <summary>
        /// remarks property
        /// </summary>
		
		[XmlElement("remarks")]
        public string Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private string remarksField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DefinitionBaseType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DefinitionBaseType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the DefinitionBaseType xsd type.")]
    public partial class DefinitionBaseType : AbstractGMLType, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the AbstractGMLType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimeObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionBaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGML", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGMLType xsd type.")]
    public abstract partial class AbstractGMLType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
		[XmlElement("description")]
        public StringOrRefType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private StringOrRefType descriptionField; 

        /// <summary>
        /// descriptionReference property
        /// </summary>
		[ComponentElement]
		[XmlElement("descriptionReference")]
        public ReferenceType DescriptionReference {
            get {
                return descriptionReferenceField;
            } 
            set {
                descriptionReferenceField = value;
                NotifyPropertyChanged("DescriptionReference");
            }
        }

        private ReferenceType descriptionReferenceField; 

        /// <summary>
        /// identifier property
        /// </summary>
		[ComponentElement]
		[XmlElement("identifier")]
        public CodeWithAuthorityType Identifier {
            get {
                return identifierField;
            } 
            set {
                identifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

        private CodeWithAuthorityType identifierField; 

        /// <summary>
        /// name property
        /// </summary>
		[RecurringElement]
		[XmlElement("name")]
        public List<CodeType> Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

         /// <summary>
         /// bool to indicate if Name has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameSpecified
         {
             get {
             if(nameField!=null)
                 return nameField.Count>0?true:false;
             else return false;
             }
         }
        private List<CodeType> nameField; 

		/// <summary>
        /// id property
        /// </summary>
		
        [XmlAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private string idField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the StringOrRefType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("description", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the StringOrRefType xsd type.")]
    public partial class StringOrRefType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringOrRefType class.
        /// </summary>
        public StringOrRefType() {}

        /// <summary>
        /// Initializes a new instance of the StringOrRefType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public StringOrRefType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the ReferenceType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("descriptionReference", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the ReferenceType xsd type.")]
    public partial class ReferenceType : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// owns property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "boolean")]
        [XmlAttribute("owns")]
		
        public bool Owns {
            get {
                return ownsField;
            } 
            set {
                ownsField = value;
                NotifyPropertyChanged("Owns");
            }
        }

        private bool ownsField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractTimeObjectType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimeObject", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractTimeObjectType xsd type.")]
    public abstract partial class AbstractTimeObjectType : AbstractGMLType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractTimePrimitiveType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractTimePrimitiveType xsd type.")]
    public abstract partial class AbstractTimePrimitiveType : AbstractTimeObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// relatedTime property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "RelatedTimeType")]
		[XmlElement("relatedTime")]
        public List<RelatedTimeType> RelatedTime {
            get {
                return relatedTimeField;
            } 
            set {
                relatedTimeField = value;
                NotifyPropertyChanged("RelatedTime");
            }
        }

         /// <summary>
         /// bool to indicate if RelatedTime has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RelatedTimeSpecified
         {
             get {
             if(relatedTimeField!=null)
                 return relatedTimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<RelatedTimeType> relatedTimeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RelatedTimeType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RelatedTimeType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the RelatedTimeType xsd type.")]
    public partial class RelatedTimeType : TimePrimitivePropertyType, INotifyPropertyChanged
    {

		/// <summary>
        /// relativePosition property
        /// </summary>
		
        [XmlAttribute("relativePosition")]
		
        public RelatedTimeTypeRelativePosition RelativePosition {
            get {
                return relativePositionField;
            } 
            set {
                relativePositionField = value;
                 this.RelativePositionSpecified = true;
                NotifyPropertyChanged("RelativePosition");
            }
        }

        private RelatedTimeTypeRelativePosition relativePositionField; 

        /// <summary>
        /// relativePositionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RelativePositionSpecified {
            get {
                return relativePositionSpecifiedField;
            } 
            set {
                relativePositionSpecifiedField = value;
                NotifyPropertyChanged("RelativePositionSpecified");
            }
        }

        private bool relativePositionSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimePrimitivePropertyType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelatedTimeType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimePrimitivePropertyType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the TimePrimitivePropertyType xsd type.")]
    public partial class TimePrimitivePropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractTimePrimitive property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractTimePrimitive")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return AbstractTimePrimitiveField;
            } 
            set {
                AbstractTimePrimitiveField = value;
                NotifyPropertyChanged("AbstractTimePrimitive");
            }
        }

        private AbstractTimePrimitiveType AbstractTimePrimitiveField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 

		/// <summary>
        /// owns property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "boolean")]
        [XmlAttribute("owns")]
		
        public bool Owns {
            get {
                return ownsField;
            } 
            set {
                ownsField = value;
                NotifyPropertyChanged("Owns");
            }
        }

        private bool ownsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractCoordinateOperationType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractOperation", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCoordinateOperationType xsd type.")]
    public abstract partial class AbstractCoordinateOperationType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[ComponentElement]
		[XmlElement("domainOfValidity")]
        public DomainOfValidity DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

        private DomainOfValidity domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 

        /// <summary>
        /// operationVersion property
        /// </summary>
		
		[XmlElement("operationVersion")]
        public string OperationVersion {
            get {
                return operationVersionField;
            } 
            set {
                operationVersionField = value;
                NotifyPropertyChanged("OperationVersion");
            }
        }

        private string operationVersionField; 

        /// <summary>
        /// coordinateOperationAccuracy property
        /// </summary>
		[RecurringElement]
		[XmlElement("coordinateOperationAccuracy")]
        public List<CoordinateOperationAccuracy> CoordinateOperationAccuracy {
            get {
                return coordinateOperationAccuracyField;
            } 
            set {
                coordinateOperationAccuracyField = value;
                NotifyPropertyChanged("CoordinateOperationAccuracy");
            }
        }

         /// <summary>
         /// bool to indicate if CoordinateOperationAccuracy has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CoordinateOperationAccuracySpecified
         {
             get {
             if(coordinateOperationAccuracyField!=null)
                 return coordinateOperationAccuracyField.Count>0?true:false;
             else return false;
             }
         }
        private List<CoordinateOperationAccuracy> coordinateOperationAccuracyField; 

        /// <summary>
        /// sourceCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("sourceCRS")]
        public CRSPropertyType SourceCRS {
            get {
                return sourceCRSField;
            } 
            set {
                sourceCRSField = value;
                NotifyPropertyChanged("SourceCRS");
            }
        }

        private CRSPropertyType sourceCRSField; 

        /// <summary>
        /// targetCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("targetCRS")]
        public CRSPropertyType TargetCRS {
            get {
                return targetCRSField;
            } 
            set {
                targetCRSField = value;
                NotifyPropertyChanged("TargetCRS");
            }
        }

        private CRSPropertyType targetCRSField; 


    } //here

    /// <summary>
    /// This class represents the domainOfValidity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the domainOfValidity xsd type.")]
    public partial class DomainOfValidity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_Extent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd")]
        public EX_Extent_Type EX_Extent {
            get {
                return EX_ExtentField;
            } 
            set {
                EX_ExtentField = value;
                NotifyPropertyChanged("EX_Extent");
            }
        }

        private EX_Extent_Type EX_ExtentField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EX_Extent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_Extent_Type xsd type.")]
    public partial class EX_Extent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("description")]
        public CharacterString_PropertyType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private CharacterString_PropertyType descriptionField; 

        /// <summary>
        /// geographicElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_GeographicExtent_PropertyType")]
		[XmlElement("geographicElement")]
        public List<EX_GeographicExtent_PropertyType> GeographicElement {
            get {
                return geographicElementField;
            } 
            set {
                geographicElementField = value;
                NotifyPropertyChanged("GeographicElement");
            }
        }

         /// <summary>
         /// bool to indicate if GeographicElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeographicElementSpecified
         {
             get {
             if(geographicElementField!=null)
                 return geographicElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_GeographicExtent_PropertyType> geographicElementField; 

        /// <summary>
        /// temporalElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_TemporalExtent_PropertyType")]
		[XmlElement("temporalElement")]
        public List<EX_TemporalExtent_PropertyType> TemporalElement {
            get {
                return temporalElementField;
            } 
            set {
                temporalElementField = value;
                NotifyPropertyChanged("TemporalElement");
            }
        }

         /// <summary>
         /// bool to indicate if TemporalElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TemporalElementSpecified
         {
             get {
             if(temporalElementField!=null)
                 return temporalElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_TemporalExtent_PropertyType> temporalElementField; 

        /// <summary>
        /// verticalElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_VerticalExtent_PropertyType")]
		[XmlElement("verticalElement")]
        public List<EX_VerticalExtent_PropertyType> VerticalElement {
            get {
                return verticalElementField;
            } 
            set {
                verticalElementField = value;
                NotifyPropertyChanged("VerticalElement");
            }
        }

         /// <summary>
         /// bool to indicate if VerticalElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VerticalElementSpecified
         {
             get {
             if(verticalElementField!=null)
                 return verticalElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_VerticalExtent_PropertyType> verticalElementField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CharacterString_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CharacterString_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the CharacterString_PropertyType xsd type.")]
    public partial class CharacterString_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CharacterString property
        /// </summary>
		
		[XmlElement("CharacterString")]
        public string CharacterString {
            get {
                return CharacterStringField;
            } 
            set {
                CharacterStringField = value;
                NotifyPropertyChanged("CharacterString");
            }
        }

        private string CharacterStringField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_GeographicExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_GeographicExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_GeographicExtent_PropertyType xsd type.")]
    public partial class EX_GeographicExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractEX_GeographicExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractEX_GeographicExtent")]
        public AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtent {
            get {
                return AbstractEX_GeographicExtentField;
            } 
            set {
                AbstractEX_GeographicExtentField = value;
                NotifyPropertyChanged("AbstractEX_GeographicExtent");
            }
        }

        private AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractEX_GeographicExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractEX_GeographicExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractEX_GeographicExtent_Type xsd type.")]
    public abstract partial class AbstractEX_GeographicExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// extentTypeCode property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Boolean_PropertyType")]
		[XmlElement("extentTypeCode")]
        public Boolean_PropertyType ExtentTypeCode {
            get {
                return extentTypeCodeField;
            } 
            set {
                extentTypeCodeField = value;
                NotifyPropertyChanged("ExtentTypeCode");
            }
        }

        private Boolean_PropertyType extentTypeCodeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Boolean_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Boolean_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Boolean_PropertyType xsd type.")]
    public partial class Boolean_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Boolean property
        /// </summary>
		
		[XmlElement("Boolean")]
        public bool? Boolean {
            get {
                return BooleanField;
            } 
            set {
                BooleanField = value;
                NotifyPropertyChanged("Boolean");
            }
        }

        private bool? BooleanField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractObject_Type xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Result_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Series_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_OnlineResource_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Address_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Telephone_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Contact_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_ResponsibleParty_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Date_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Citation_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MD_Identifier_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Element_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_VerticalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_TemporalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractEX_GeographicExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_Extent_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractObject_Type", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the AbstractObject_Type xsd type.")]
    public abstract partial class AbstractObject_Type : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// id property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "ID")]
        [XmlAttribute("id")]
		
        public string Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private string idField; 

		/// <summary>
        /// uuid property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuid")]
		
        public string Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string uuidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_Result_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Result", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_Result_Type xsd type.")]
    public abstract partial class AbstractDQ_Result_Type : AbstractObject_Type, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the CI_Series_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Series", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Series_Type xsd type.")]
    public partial class CI_Series_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("name")]
        public CharacterString_PropertyType Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private CharacterString_PropertyType nameField; 

        /// <summary>
        /// issueIdentification property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("issueIdentification")]
        public CharacterString_PropertyType IssueIdentification {
            get {
                return issueIdentificationField;
            } 
            set {
                issueIdentificationField = value;
                NotifyPropertyChanged("IssueIdentification");
            }
        }

        private CharacterString_PropertyType issueIdentificationField; 

        /// <summary>
        /// page property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("page")]
        public CharacterString_PropertyType Page {
            get {
                return pageField;
            } 
            set {
                pageField = value;
                NotifyPropertyChanged("Page");
            }
        }

        private CharacterString_PropertyType pageField; 


    } //here

    /// <summary>
    /// This class represents the CI_OnlineResource_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_OnlineResource", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_OnlineResource_Type xsd type.")]
    public partial class CI_OnlineResource_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// linkage property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "URL_PropertyType")]
		[XmlElement("linkage")]
        public URL_PropertyType Linkage {
            get {
                return linkageField;
            } 
            set {
                linkageField = value;
                NotifyPropertyChanged("Linkage");
            }
        }

        private URL_PropertyType linkageField; 

        /// <summary>
        /// protocol property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("protocol")]
        public CharacterString_PropertyType Protocol {
            get {
                return protocolField;
            } 
            set {
                protocolField = value;
                NotifyPropertyChanged("Protocol");
            }
        }

        private CharacterString_PropertyType protocolField; 

        /// <summary>
        /// applicationProfile property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("applicationProfile")]
        public CharacterString_PropertyType ApplicationProfile {
            get {
                return applicationProfileField;
            } 
            set {
                applicationProfileField = value;
                NotifyPropertyChanged("ApplicationProfile");
            }
        }

        private CharacterString_PropertyType applicationProfileField; 

        /// <summary>
        /// name property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("name")]
        public CharacterString_PropertyType Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private CharacterString_PropertyType nameField; 

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("description")]
        public CharacterString_PropertyType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private CharacterString_PropertyType descriptionField; 

        /// <summary>
        /// function property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_OnLineFunctionCode_PropertyType")]
		[XmlElement("function")]
        public CI_OnLineFunctionCode_PropertyType Function {
            get {
                return functionField;
            } 
            set {
                functionField = value;
                NotifyPropertyChanged("Function");
            }
        }

        private CI_OnLineFunctionCode_PropertyType functionField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the URL_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="URL_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the URL_PropertyType xsd type.")]
    public partial class URL_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// URL property
        /// </summary>
		
		[XmlElement("URL", DataType="anyURI")]
        public string URL {
            get {
                return URLField;
            } 
            set {
                URLField = value;
                NotifyPropertyChanged("URL");
            }
        }

        private string URLField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_OnLineFunctionCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_OnLineFunctionCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_OnLineFunctionCode_PropertyType xsd type.")]
    public partial class CI_OnLineFunctionCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_OnLineFunctionCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_OnLineFunctionCode")]
        public CodeListValue_Type CI_OnLineFunctionCode {
            get {
                return CI_OnLineFunctionCodeField;
            } 
            set {
                CI_OnLineFunctionCodeField = value;
                NotifyPropertyChanged("CI_OnLineFunctionCode");
            }
        }

        private CodeListValue_Type CI_OnLineFunctionCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CodeListValue_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    [System.Xml.Serialization.XmlRootAttribute("CI_DateTypeCode", Namespace="http://www.isotc211.org/2005/gco", IsNullable=false)]
	[Description("This class represents the CodeListValue_Type xsd type.")]
    public partial class CodeListValue_Type : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeListValue_Type class.
        /// </summary>
        public CodeListValue_Type() {}

        /// <summary>
        /// Initializes a new instance of the CodeListValue_Type class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeListValue_Type(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// codeList property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeList")]
		
        public string CodeList {
            get {
                return codeListField;
            } 
            set {
                codeListField = value;
                NotifyPropertyChanged("CodeList");
            }
        }

        private string codeListField; 

		/// <summary>
        /// codeListValue property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeListValue")]
		
        public string CodeListValue {
            get {
                return codeListValueField;
            } 
            set {
                codeListValueField = value;
                NotifyPropertyChanged("CodeListValue");
            }
        }

        private string codeListValueField; 

		/// <summary>
        /// codeSpace property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeSpace")]
		
        public string CodeSpace {
            get {
                return codeSpaceField;
            } 
            set {
                codeSpaceField = value;
                NotifyPropertyChanged("CodeSpace");
            }
        }

        private string codeSpaceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CI_Address_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Address", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Address_Type xsd type.")]
    public partial class CI_Address_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// deliveryPoint property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("deliveryPoint")]
        public List<CharacterString_PropertyType> DeliveryPoint {
            get {
                return deliveryPointField;
            } 
            set {
                deliveryPointField = value;
                NotifyPropertyChanged("DeliveryPoint");
            }
        }

         /// <summary>
         /// bool to indicate if DeliveryPoint has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DeliveryPointSpecified
         {
             get {
             if(deliveryPointField!=null)
                 return deliveryPointField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> deliveryPointField; 

        /// <summary>
        /// city property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("city")]
        public CharacterString_PropertyType City {
            get {
                return cityField;
            } 
            set {
                cityField = value;
                NotifyPropertyChanged("City");
            }
        }

        private CharacterString_PropertyType cityField; 

        /// <summary>
        /// administrativeArea property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("administrativeArea")]
        public CharacterString_PropertyType AdministrativeArea {
            get {
                return administrativeAreaField;
            } 
            set {
                administrativeAreaField = value;
                NotifyPropertyChanged("AdministrativeArea");
            }
        }

        private CharacterString_PropertyType administrativeAreaField; 

        /// <summary>
        /// postalCode property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("postalCode")]
        public CharacterString_PropertyType PostalCode {
            get {
                return postalCodeField;
            } 
            set {
                postalCodeField = value;
                NotifyPropertyChanged("PostalCode");
            }
        }

        private CharacterString_PropertyType postalCodeField; 

        /// <summary>
        /// country property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("country")]
        public CharacterString_PropertyType Country {
            get {
                return countryField;
            } 
            set {
                countryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private CharacterString_PropertyType countryField; 

        /// <summary>
        /// electronicMailAddress property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("electronicMailAddress")]
        public List<CharacterString_PropertyType> ElectronicMailAddress {
            get {
                return electronicMailAddressField;
            } 
            set {
                electronicMailAddressField = value;
                NotifyPropertyChanged("ElectronicMailAddress");
            }
        }

         /// <summary>
         /// bool to indicate if ElectronicMailAddress has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ElectronicMailAddressSpecified
         {
             get {
             if(electronicMailAddressField!=null)
                 return electronicMailAddressField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> electronicMailAddressField; 


    } //here

    /// <summary>
    /// This class represents the CI_Telephone_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Telephone", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Telephone_Type xsd type.")]
    public partial class CI_Telephone_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// voice property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("voice")]
        public List<CharacterString_PropertyType> Voice {
            get {
                return voiceField;
            } 
            set {
                voiceField = value;
                NotifyPropertyChanged("Voice");
            }
        }

         /// <summary>
         /// bool to indicate if Voice has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VoiceSpecified
         {
             get {
             if(voiceField!=null)
                 return voiceField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> voiceField; 

        /// <summary>
        /// facsimile property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("facsimile")]
        public List<CharacterString_PropertyType> Facsimile {
            get {
                return facsimileField;
            } 
            set {
                facsimileField = value;
                NotifyPropertyChanged("Facsimile");
            }
        }

         /// <summary>
         /// bool to indicate if Facsimile has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacsimileSpecified
         {
             get {
             if(facsimileField!=null)
                 return facsimileField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> facsimileField; 


    } //here

    /// <summary>
    /// This class represents the CI_Contact_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Contact", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Contact_Type xsd type.")]
    public partial class CI_Contact_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// phone property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Telephone_PropertyType")]
		[XmlElement("phone")]
        public CI_Telephone_PropertyType Phone {
            get {
                return phoneField;
            } 
            set {
                phoneField = value;
                NotifyPropertyChanged("Phone");
            }
        }

        private CI_Telephone_PropertyType phoneField; 

        /// <summary>
        /// address property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Address_PropertyType")]
		[XmlElement("address")]
        public CI_Address_PropertyType Address {
            get {
                return addressField;
            } 
            set {
                addressField = value;
                NotifyPropertyChanged("Address");
            }
        }

        private CI_Address_PropertyType addressField; 

        /// <summary>
        /// onlineResource property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_OnlineResource_PropertyType")]
		[XmlElement("onlineResource")]
        public CI_OnlineResource_PropertyType OnlineResource {
            get {
                return onlineResourceField;
            } 
            set {
                onlineResourceField = value;
                NotifyPropertyChanged("OnlineResource");
            }
        }

        private CI_OnlineResource_PropertyType onlineResourceField; 

        /// <summary>
        /// hoursOfService property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("hoursOfService")]
        public CharacterString_PropertyType HoursOfService {
            get {
                return hoursOfServiceField;
            } 
            set {
                hoursOfServiceField = value;
                NotifyPropertyChanged("HoursOfService");
            }
        }

        private CharacterString_PropertyType hoursOfServiceField; 

        /// <summary>
        /// contactInstructions property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("contactInstructions")]
        public CharacterString_PropertyType ContactInstructions {
            get {
                return contactInstructionsField;
            } 
            set {
                contactInstructionsField = value;
                NotifyPropertyChanged("ContactInstructions");
            }
        }

        private CharacterString_PropertyType contactInstructionsField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Telephone_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Telephone_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Telephone_PropertyType xsd type.")]
    public partial class CI_Telephone_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Telephone property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Telephone")]
        public CI_Telephone_Type CI_Telephone {
            get {
                return CI_TelephoneField;
            } 
            set {
                CI_TelephoneField = value;
                NotifyPropertyChanged("CI_Telephone");
            }
        }

        private CI_Telephone_Type CI_TelephoneField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Address_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Address_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Address_PropertyType xsd type.")]
    public partial class CI_Address_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Address property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Address")]
        public CI_Address_Type CI_Address {
            get {
                return CI_AddressField;
            } 
            set {
                CI_AddressField = value;
                NotifyPropertyChanged("CI_Address");
            }
        }

        private CI_Address_Type CI_AddressField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_OnlineResource_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_OnlineResource_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_OnlineResource_PropertyType xsd type.")]
    public partial class CI_OnlineResource_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_OnlineResource property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_OnlineResource")]
        public CI_OnlineResource_Type CI_OnlineResource {
            get {
                return CI_OnlineResourceField;
            } 
            set {
                CI_OnlineResourceField = value;
                NotifyPropertyChanged("CI_OnlineResource");
            }
        }

        private CI_OnlineResource_Type CI_OnlineResourceField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_ResponsibleParty_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_ResponsibleParty", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_ResponsibleParty_Type xsd type.")]
    public partial class CI_ResponsibleParty_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// individualName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("individualName")]
        public CharacterString_PropertyType IndividualName {
            get {
                return individualNameField;
            } 
            set {
                individualNameField = value;
                NotifyPropertyChanged("IndividualName");
            }
        }

        private CharacterString_PropertyType individualNameField; 

        /// <summary>
        /// organisationName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("organisationName")]
        public CharacterString_PropertyType OrganisationName {
            get {
                return organisationNameField;
            } 
            set {
                organisationNameField = value;
                NotifyPropertyChanged("OrganisationName");
            }
        }

        private CharacterString_PropertyType organisationNameField; 

        /// <summary>
        /// positionName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("positionName")]
        public CharacterString_PropertyType PositionName {
            get {
                return positionNameField;
            } 
            set {
                positionNameField = value;
                NotifyPropertyChanged("PositionName");
            }
        }

        private CharacterString_PropertyType positionNameField; 

        /// <summary>
        /// contactInfo property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Contact_PropertyType")]
		[XmlElement("contactInfo")]
        public CI_Contact_PropertyType ContactInfo {
            get {
                return contactInfoField;
            } 
            set {
                contactInfoField = value;
                NotifyPropertyChanged("ContactInfo");
            }
        }

        private CI_Contact_PropertyType contactInfoField; 

        /// <summary>
        /// role property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_RoleCode_PropertyType")]
		[XmlElement("role")]
        public CI_RoleCode_PropertyType Role {
            get {
                return roleField;
            } 
            set {
                roleField = value;
                NotifyPropertyChanged("Role");
            }
        }

        private CI_RoleCode_PropertyType roleField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Contact_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Contact_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Contact_PropertyType xsd type.")]
    public partial class CI_Contact_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Contact property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Contact")]
        public CI_Contact_Type CI_Contact {
            get {
                return CI_ContactField;
            } 
            set {
                CI_ContactField = value;
                NotifyPropertyChanged("CI_Contact");
            }
        }

        private CI_Contact_Type CI_ContactField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_RoleCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_RoleCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_RoleCode_PropertyType xsd type.")]
    public partial class CI_RoleCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_RoleCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_RoleCode")]
        public CodeListValue_Type CI_RoleCode {
            get {
                return CI_RoleCodeField;
            } 
            set {
                CI_RoleCodeField = value;
                NotifyPropertyChanged("CI_RoleCode");
            }
        }

        private CodeListValue_Type CI_RoleCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_Date_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Date", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Date_Type xsd type.")]
    public partial class CI_Date_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// date property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Date_PropertyType")]
		[XmlElement("date")]
        public Date_PropertyType Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

        private Date_PropertyType dateField; 

        /// <summary>
        /// dateType property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_DateTypeCode_PropertyType")]
		[XmlElement("dateType")]
        public CI_DateTypeCode_PropertyType DateType {
            get {
                return dateTypeField;
            } 
            set {
                dateTypeField = value;
                NotifyPropertyChanged("DateType");
            }
        }

        private CI_DateTypeCode_PropertyType dateTypeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Date_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Date_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Date_PropertyType xsd type.")]
    public partial class Date_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Date property
        /// </summary>
        [XmlElement("Date")]
        public string Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                DateSpecified = (value!=null);
                NotifyPropertyChanged("Date");
            }
        }

        private string DateField; 
        private bool dateSpecified = false; 

        /// <summary>
        /// bool to indicate if Date has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateSpecified
        {
            get {
                return dateSpecified;
            }
            set {
                dateSpecified= value;
            }
        }

        /// <summary>
        /// DateTime property
        /// </summary>
        [XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                DateTimeSpecified = (value!=null);
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 
        private bool dateTimeSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTime has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeSpecified
        {
            get {
                return dateTimeSpecified;
            }
            set {
                dateTimeSpecified= value;
            }
        }


		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_DateTypeCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_DateTypeCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_DateTypeCode_PropertyType xsd type.")]
    public partial class CI_DateTypeCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_DateTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_DateTypeCode")]
        public CodeListValue_Type CI_DateTypeCode {
            get {
                return CI_DateTypeCodeField;
            } 
            set {
                CI_DateTypeCodeField = value;
                NotifyPropertyChanged("CI_DateTypeCode");
            }
        }

        private CodeListValue_Type CI_DateTypeCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_Citation_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Citation", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Citation_Type xsd type.")]
    public partial class CI_Citation_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// title property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("title")]
        public CharacterString_PropertyType Title {
            get {
                return titleField;
            } 
            set {
                titleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private CharacterString_PropertyType titleField; 

        /// <summary>
        /// alternateTitle property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("alternateTitle")]
        public List<CharacterString_PropertyType> AlternateTitle {
            get {
                return alternateTitleField;
            } 
            set {
                alternateTitleField = value;
                NotifyPropertyChanged("AlternateTitle");
            }
        }

         /// <summary>
         /// bool to indicate if AlternateTitle has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AlternateTitleSpecified
         {
             get {
             if(alternateTitleField!=null)
                 return alternateTitleField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> alternateTitleField; 

        /// <summary>
        /// date property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Date_PropertyType")]
		[XmlElement("date")]
        public List<CI_Date_PropertyType> Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

         /// <summary>
         /// bool to indicate if Date has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DateSpecified
         {
             get {
             if(dateField!=null)
                 return dateField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_Date_PropertyType> dateField; 

        /// <summary>
        /// edition property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("edition")]
        public CharacterString_PropertyType Edition {
            get {
                return editionField;
            } 
            set {
                editionField = value;
                NotifyPropertyChanged("Edition");
            }
        }

        private CharacterString_PropertyType editionField; 

        /// <summary>
        /// editionDate property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Date_PropertyType")]
		[XmlElement("editionDate")]
        public Date_PropertyType EditionDate {
            get {
                return editionDateField;
            } 
            set {
                editionDateField = value;
                NotifyPropertyChanged("EditionDate");
            }
        }

        private Date_PropertyType editionDateField; 

        /// <summary>
        /// identifier property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "MD_Identifier_PropertyType")]
		[XmlElement("identifier")]
        public List<MD_Identifier_PropertyType> Identifier {
            get {
                return identifierField;
            } 
            set {
                identifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

         /// <summary>
         /// bool to indicate if Identifier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IdentifierSpecified
         {
             get {
             if(identifierField!=null)
                 return identifierField.Count>0?true:false;
             else return false;
             }
         }
        private List<MD_Identifier_PropertyType> identifierField; 

        /// <summary>
        /// citedResponsibleParty property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_ResponsibleParty_PropertyType")]
		[XmlElement("citedResponsibleParty")]
        public List<CI_ResponsibleParty_PropertyType> CitedResponsibleParty {
            get {
                return citedResponsiblePartyField;
            } 
            set {
                citedResponsiblePartyField = value;
                NotifyPropertyChanged("CitedResponsibleParty");
            }
        }

         /// <summary>
         /// bool to indicate if CitedResponsibleParty has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CitedResponsiblePartySpecified
         {
             get {
             if(citedResponsiblePartyField!=null)
                 return citedResponsiblePartyField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_ResponsibleParty_PropertyType> citedResponsiblePartyField; 

        /// <summary>
        /// presentationForm property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_PresentationFormCode_PropertyType")]
		[XmlElement("presentationForm")]
        public List<CI_PresentationFormCode_PropertyType> PresentationForm {
            get {
                return presentationFormField;
            } 
            set {
                presentationFormField = value;
                NotifyPropertyChanged("PresentationForm");
            }
        }

         /// <summary>
         /// bool to indicate if PresentationForm has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PresentationFormSpecified
         {
             get {
             if(presentationFormField!=null)
                 return presentationFormField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_PresentationFormCode_PropertyType> presentationFormField; 

        /// <summary>
        /// series property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Series_PropertyType")]
		[XmlElement("series")]
        public CI_Series_PropertyType Series {
            get {
                return seriesField;
            } 
            set {
                seriesField = value;
                NotifyPropertyChanged("Series");
            }
        }

        private CI_Series_PropertyType seriesField; 

        /// <summary>
        /// otherCitationDetails property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("otherCitationDetails")]
        public CharacterString_PropertyType OtherCitationDetails {
            get {
                return otherCitationDetailsField;
            } 
            set {
                otherCitationDetailsField = value;
                NotifyPropertyChanged("OtherCitationDetails");
            }
        }

        private CharacterString_PropertyType otherCitationDetailsField; 

        /// <summary>
        /// collectiveTitle property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("collectiveTitle")]
        public CharacterString_PropertyType CollectiveTitle {
            get {
                return collectiveTitleField;
            } 
            set {
                collectiveTitleField = value;
                NotifyPropertyChanged("CollectiveTitle");
            }
        }

        private CharacterString_PropertyType collectiveTitleField; 

        /// <summary>
        /// ISBN property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("ISBN")]
        public CharacterString_PropertyType ISBN {
            get {
                return ISBNField;
            } 
            set {
                ISBNField = value;
                NotifyPropertyChanged("ISBN");
            }
        }

        private CharacterString_PropertyType ISBNField; 

        /// <summary>
        /// ISSN property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("ISSN")]
        public CharacterString_PropertyType ISSN {
            get {
                return ISSNField;
            } 
            set {
                ISSNField = value;
                NotifyPropertyChanged("ISSN");
            }
        }

        private CharacterString_PropertyType ISSNField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Date_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Date_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Date_PropertyType xsd type.")]
    public partial class CI_Date_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Date property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Date")]
        public CI_Date_Type CI_Date {
            get {
                return CI_DateField;
            } 
            set {
                CI_DateField = value;
                NotifyPropertyChanged("CI_Date");
            }
        }

        private CI_Date_Type CI_DateField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MD_Identifier_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MD_Identifier_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the MD_Identifier_PropertyType xsd type.")]
    public partial class MD_Identifier_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// MD_Identifier property
        /// </summary>
		[ComponentElement]
		[XmlElement("MD_Identifier")]
        public MD_Identifier_Type MD_Identifier {
            get {
                return MD_IdentifierField;
            } 
            set {
                MD_IdentifierField = value;
                NotifyPropertyChanged("MD_Identifier");
            }
        }

        private MD_Identifier_Type MD_IdentifierField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the MD_Identifier_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("MD_Identifier", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the MD_Identifier_Type xsd type.")]
    public partial class MD_Identifier_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// authority property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Citation_PropertyType")]
		[XmlElement("authority")]
        public CI_Citation_PropertyType Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private CI_Citation_PropertyType authorityField; 

        /// <summary>
        /// code property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("code")]
        public CharacterString_PropertyType Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private CharacterString_PropertyType codeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Citation_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Citation_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Citation_PropertyType xsd type.")]
    public partial class CI_Citation_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Citation property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Citation")]
        public CI_Citation_Type CI_Citation {
            get {
                return CI_CitationField;
            } 
            set {
                CI_CitationField = value;
                NotifyPropertyChanged("CI_Citation");
            }
        }

        private CI_Citation_Type CI_CitationField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_ResponsibleParty_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_ResponsibleParty_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_ResponsibleParty_PropertyType xsd type.")]
    public partial class CI_ResponsibleParty_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_ResponsibleParty property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_ResponsibleParty")]
        public CI_ResponsibleParty_Type CI_ResponsibleParty {
            get {
                return CI_ResponsiblePartyField;
            } 
            set {
                CI_ResponsiblePartyField = value;
                NotifyPropertyChanged("CI_ResponsibleParty");
            }
        }

        private CI_ResponsibleParty_Type CI_ResponsiblePartyField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_PresentationFormCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_PresentationFormCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_PresentationFormCode_PropertyType xsd type.")]
    public partial class CI_PresentationFormCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_PresentationFormCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_PresentationFormCode")]
        public CodeListValue_Type CI_PresentationFormCode {
            get {
                return CI_PresentationFormCodeField;
            } 
            set {
                CI_PresentationFormCodeField = value;
                NotifyPropertyChanged("CI_PresentationFormCode");
            }
        }

        private CodeListValue_Type CI_PresentationFormCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Series_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Series_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Series_PropertyType xsd type.")]
    public partial class CI_Series_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Series property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Series")]
        public CI_Series_Type CI_Series {
            get {
                return CI_SeriesField;
            } 
            set {
                CI_SeriesField = value;
                NotifyPropertyChanged("CI_Series");
            }
        }

        private CI_Series_Type CI_SeriesField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_Element_Type xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Element", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_Element_Type xsd type.")]
    public abstract partial class AbstractDQ_Element_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// nameOfMeasure property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("nameOfMeasure")]
        public List<CharacterString_PropertyType> NameOfMeasure {
            get {
                return nameOfMeasureField;
            } 
            set {
                nameOfMeasureField = value;
                NotifyPropertyChanged("NameOfMeasure");
            }
        }

         /// <summary>
         /// bool to indicate if NameOfMeasure has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameOfMeasureSpecified
         {
             get {
             if(nameOfMeasureField!=null)
                 return nameOfMeasureField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> nameOfMeasureField; 

        /// <summary>
        /// measureIdentification property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MD_Identifier_PropertyType")]
		[XmlElement("measureIdentification")]
        public MD_Identifier_PropertyType MeasureIdentification {
            get {
                return measureIdentificationField;
            } 
            set {
                measureIdentificationField = value;
                NotifyPropertyChanged("MeasureIdentification");
            }
        }

        private MD_Identifier_PropertyType measureIdentificationField; 

        /// <summary>
        /// measureDescription property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("measureDescription")]
        public CharacterString_PropertyType MeasureDescription {
            get {
                return measureDescriptionField;
            } 
            set {
                measureDescriptionField = value;
                NotifyPropertyChanged("MeasureDescription");
            }
        }

        private CharacterString_PropertyType measureDescriptionField; 

        /// <summary>
        /// evaluationMethodType property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DQ_EvaluationMethodTypeCode_PropertyType")]
		[XmlElement("evaluationMethodType")]
        public DQ_EvaluationMethodTypeCode_PropertyType EvaluationMethodType {
            get {
                return evaluationMethodTypeField;
            } 
            set {
                evaluationMethodTypeField = value;
                NotifyPropertyChanged("EvaluationMethodType");
            }
        }

        private DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodTypeField; 

        /// <summary>
        /// evaluationMethodDescription property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("evaluationMethodDescription")]
        public CharacterString_PropertyType EvaluationMethodDescription {
            get {
                return evaluationMethodDescriptionField;
            } 
            set {
                evaluationMethodDescriptionField = value;
                NotifyPropertyChanged("EvaluationMethodDescription");
            }
        }

        private CharacterString_PropertyType evaluationMethodDescriptionField; 

        /// <summary>
        /// evaluationProcedure property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Citation_PropertyType")]
		[XmlElement("evaluationProcedure")]
        public CI_Citation_PropertyType EvaluationProcedure {
            get {
                return evaluationProcedureField;
            } 
            set {
                evaluationProcedureField = value;
                NotifyPropertyChanged("EvaluationProcedure");
            }
        }

        private CI_Citation_PropertyType evaluationProcedureField; 

        /// <summary>
        /// dateTime property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DateTime_PropertyType")]
		[XmlElement("dateTime")]
        public List<DateTime_PropertyType> DateTime {
            get {
                return dateTimeField;
            } 
            set {
                dateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

         /// <summary>
         /// bool to indicate if DateTime has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DateTimeSpecified
         {
             get {
             if(dateTimeField!=null)
                 return dateTimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<DateTime_PropertyType> dateTimeField; 

        /// <summary>
        /// result property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DQ_Result_PropertyType")]
		[XmlElement("result")]
        public List<DQ_Result_PropertyType> Result {
            get {
                return resultField;
            } 
            set {
                resultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(resultField!=null)
                 return resultField.Count>0?true:false;
             else return false;
             }
         }
        private List<DQ_Result_PropertyType> resultField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DQ_EvaluationMethodTypeCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DQ_EvaluationMethodTypeCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the DQ_EvaluationMethodTypeCode_PropertyType xsd type.")]
    public partial class DQ_EvaluationMethodTypeCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DQ_EvaluationMethodTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("DQ_EvaluationMethodTypeCode")]
        public CodeListValue_Type DQ_EvaluationMethodTypeCode {
            get {
                return DQ_EvaluationMethodTypeCodeField;
            } 
            set {
                DQ_EvaluationMethodTypeCodeField = value;
                NotifyPropertyChanged("DQ_EvaluationMethodTypeCode");
            }
        }

        private CodeListValue_Type DQ_EvaluationMethodTypeCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DateTime_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DateTime_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the DateTime_PropertyType xsd type.")]
    public partial class DateTime_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DateTime property
        /// </summary>
		
		[XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DQ_Result_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DQ_Result_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the DQ_Result_PropertyType xsd type.")]
    public partial class DQ_Result_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractDQ_Result property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractDQ_Result")]
        public AbstractDQ_Result_Type AbstractDQ_Result {
            get {
                return AbstractDQ_ResultField;
            } 
            set {
                AbstractDQ_ResultField = value;
                NotifyPropertyChanged("AbstractDQ_Result");
            }
        }

        private AbstractDQ_Result_Type AbstractDQ_ResultField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_PositionalAccuracy_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_PositionalAccuracy_Type xsd type.")]
    public abstract partial class AbstractDQ_PositionalAccuracy_Type : AbstractDQ_Element_Type, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EX_VerticalExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_VerticalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_VerticalExtent_Type xsd type.")]
    public partial class EX_VerticalExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// minimumValue property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Real_PropertyType")]
		[XmlElement("minimumValue")]
        public Real_PropertyType MinimumValue {
            get {
                return minimumValueField;
            } 
            set {
                minimumValueField = value;
                NotifyPropertyChanged("MinimumValue");
            }
        }

        private Real_PropertyType minimumValueField; 

        /// <summary>
        /// maximumValue property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Real_PropertyType")]
		[XmlElement("maximumValue")]
        public Real_PropertyType MaximumValue {
            get {
                return maximumValueField;
            } 
            set {
                maximumValueField = value;
                NotifyPropertyChanged("MaximumValue");
            }
        }

        private Real_PropertyType maximumValueField; 

        /// <summary>
        /// verticalCRS property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SC_CRS_PropertyType")]
		[XmlElement("verticalCRS")]
        public SC_CRS_PropertyType VerticalCRS {
            get {
                return verticalCRSField;
            } 
            set {
                verticalCRSField = value;
                NotifyPropertyChanged("VerticalCRS");
            }
        }

        private SC_CRS_PropertyType verticalCRSField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Real_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Real_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Real_PropertyType xsd type.")]
    public partial class Real_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Real property
        /// </summary>
		
		[XmlElement("Real")]
        public double? Real {
            get {
                return RealField;
            } 
            set {
                RealField = value;
                NotifyPropertyChanged("Real");
            }
        }

        private double? RealField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SC_CRS_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SC_CRS_PropertyType", Namespace="http://www.isotc211.org/2005/gsr")]
	[Description("This class represents the SC_CRS_PropertyType xsd type.")]
    public partial class SC_CRS_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractCRSType AbstractCRS {
            get {
                return AbstractCRSField;
            } 
            set {
                AbstractCRSField = value;
                NotifyPropertyChanged("AbstractCRS");
            }
        }

        private AbstractCRSType AbstractCRSField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractCRSType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCRSType xsd type.")]
    public abstract partial class AbstractCRSType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[RecurringElement]
		[XmlElement("domainOfValidity")]
        public List<DomainOfValidity> DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

         /// <summary>
         /// bool to indicate if DomainOfValidity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DomainOfValiditySpecified
         {
             get {
             if(domainOfValidityField!=null)
                 return domainOfValidityField.Count>0?true:false;
             else return false;
             }
         }
        private List<DomainOfValidity> domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 


    } //here

    /// <summary>
    /// This class represents the AbstractGeneralDerivedCRSType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralDerivedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGeneralDerivedCRSType xsd type.")]
    public abstract partial class AbstractGeneralDerivedCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// conversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("conversion")]
        public GeneralConversionPropertyType Conversion {
            get {
                return conversionField;
            } 
            set {
                conversionField = value;
                NotifyPropertyChanged("Conversion");
            }
        }

        private GeneralConversionPropertyType conversionField; 


    } //here

    /// <summary>
    /// This class represents the GeneralConversionPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("conversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeneralConversionPropertyType xsd type.")]
    public partial class GeneralConversionPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractGeneralConversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractGeneralConversion")]
        public AbstractGeneralConversionType AbstractGeneralConversion {
            get {
                return AbstractGeneralConversionField;
            } 
            set {
                AbstractGeneralConversionField = value;
                NotifyPropertyChanged("AbstractGeneralConversion");
            }
        }

        private AbstractGeneralConversionType AbstractGeneralConversionField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractGeneralConversionType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralConversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGeneralConversionType xsd type.")]
    public abstract partial class AbstractGeneralConversionType : AbstractCoordinateOperationType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the ProjectedCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the ProjectedCRSType xsd type.")]
    public partial class ProjectedCRSType : AbstractGeneralDerivedCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// Item property
        /// </summary>
		[ComponentElement]
		[XmlElement("baseGeodeticCRS")]
        public GeodeticCRSPropertyType Item {
            get {
                return ItemField;
            } 
            set {
                ItemField = value;
                NotifyPropertyChanged("Item");
            }
        }

        private GeodeticCRSPropertyType ItemField; 

        /// <summary>
        /// cartesianCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("cartesianCS")]
        public CartesianCSPropertyType CartesianCS {
            get {
                return cartesianCSField;
            } 
            set {
                cartesianCSField = value;
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSPropertyType cartesianCSField; 


    } //here

    /// <summary>
    /// This class represents the GeodeticCRSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("baseGeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticCRSPropertyType xsd type.")]
    public partial class GeodeticCRSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GeodeticCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("GeodeticCRS")]
        public GeodeticCRSType GeodeticCRS {
            get {
                return GeodeticCRSField;
            } 
            set {
                GeodeticCRSField = value;
                NotifyPropertyChanged("GeodeticCRS");
            }
        }

        private GeodeticCRSType GeodeticCRSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the GeodeticCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticCRSType xsd type.")]
    public partial class GeodeticCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// cartesianCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("cartesianCS")]
        public CartesianCSPropertyType CartesianCS {
            get {
                return cartesianCSField;
            } 
            set {
                cartesianCSField = value;
                CartesianCSSpecified = (value!=null);
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSPropertyType cartesianCSField; 
        private bool cartesianCSSpecified = false; 

        /// <summary>
        /// bool to indicate if CartesianCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CartesianCSSpecified
        {
            get {
                return cartesianCSSpecified;
            }
            set {
                cartesianCSSpecified= value;
            }
        }

        /// <summary>
        /// ellipsoidalCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("ellipsoidalCS")]
        public EllipsoidalCSPropertyType EllipsoidalCS {
            get {
                return ellipsoidalCSField;
            } 
            set {
                ellipsoidalCSField = value;
                EllipsoidalCSSpecified = (value!=null);
                NotifyPropertyChanged("EllipsoidalCS");
            }
        }

        private EllipsoidalCSPropertyType ellipsoidalCSField; 
        private bool ellipsoidalCSSpecified = false; 

        /// <summary>
        /// bool to indicate if EllipsoidalCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool EllipsoidalCSSpecified
        {
            get {
                return ellipsoidalCSSpecified;
            }
            set {
                ellipsoidalCSSpecified= value;
            }
        }

        /// <summary>
        /// sphericalCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("sphericalCS")]
        public SphericalCSPropertyType SphericalCS {
            get {
                return sphericalCSField;
            } 
            set {
                sphericalCSField = value;
                SphericalCSSpecified = (value!=null);
                NotifyPropertyChanged("SphericalCS");
            }
        }

        private SphericalCSPropertyType sphericalCSField; 
        private bool sphericalCSSpecified = false; 

        /// <summary>
        /// bool to indicate if SphericalCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SphericalCSSpecified
        {
            get {
                return sphericalCSSpecified;
            }
            set {
                sphericalCSSpecified= value;
            }
        }


        /// <summary>
        /// geodeticDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("geodeticDatum")]
        public GeodeticDatumPropertyType GeodeticDatum {
            get {
                return geodeticDatumField;
            } 
            set {
                geodeticDatumField = value;
                NotifyPropertyChanged("GeodeticDatum");
            }
        }

        private GeodeticDatumPropertyType geodeticDatumField; 


    } //here

    /// <summary>
    /// This class represents the CartesianCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("cartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CartesianCSPropertyType xsd type.")]
    public partial class CartesianCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CartesianCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("CartesianCS")]
        public CartesianCSType CartesianCS {
            get {
                return CartesianCSField;
            } 
            set {
                CartesianCSField = value;
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSType CartesianCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CartesianCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CartesianCSType xsd type.")]
    public partial class CartesianCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EllipsoidalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidalCSPropertyType xsd type.")]
    public partial class EllipsoidalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EllipsoidalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("EllipsoidalCS")]
        public EllipsoidalCSType EllipsoidalCS {
            get {
                return EllipsoidalCSField;
            } 
            set {
                EllipsoidalCSField = value;
                NotifyPropertyChanged("EllipsoidalCS");
            }
        }

        private EllipsoidalCSType EllipsoidalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EllipsoidalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("EllipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidalCSType xsd type.")]
    public partial class EllipsoidalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the SphericalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SphericalCSPropertyType xsd type.")]
    public partial class SphericalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SphericalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("SphericalCS")]
        public SphericalCSType SphericalCS {
            get {
                return SphericalCSField;
            } 
            set {
                SphericalCSField = value;
                NotifyPropertyChanged("SphericalCS");
            }
        }

        private SphericalCSType SphericalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SphericalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("SphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SphericalCSType xsd type.")]
    public partial class SphericalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the GeodeticDatumPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("geodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticDatumPropertyType xsd type.")]
    public partial class GeodeticDatumPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GeodeticDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("GeodeticDatum")]
        public GeodeticDatumType GeodeticDatum {
            get {
                return GeodeticDatumField;
            } 
            set {
                GeodeticDatumField = value;
                NotifyPropertyChanged("GeodeticDatum");
            }
        }

        private GeodeticDatumType GeodeticDatumField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the GeodeticDatumType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticDatumType xsd type.")]
    public partial class GeodeticDatumType : AbstractDatumType, INotifyPropertyChanged
    {

        /// <summary>
        /// primeMeridian property
        /// </summary>
		[ComponentElement]
		[XmlElement("primeMeridian")]
        public PrimeMeridianPropertyType PrimeMeridian {
            get {
                return primeMeridianField;
            } 
            set {
                primeMeridianField = value;
                NotifyPropertyChanged("PrimeMeridian");
            }
        }

        private PrimeMeridianPropertyType primeMeridianField; 

        /// <summary>
        /// ellipsoid property
        /// </summary>
		[ComponentElement]
		[XmlElement("ellipsoid")]
        public EllipsoidPropertyType Ellipsoid {
            get {
                return ellipsoidField;
            } 
            set {
                ellipsoidField = value;
                NotifyPropertyChanged("Ellipsoid");
            }
        }

        private EllipsoidPropertyType ellipsoidField; 


    } //here

    /// <summary>
    /// This class represents the PrimeMeridianPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("primeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the PrimeMeridianPropertyType xsd type.")]
    public partial class PrimeMeridianPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PrimeMeridian property
        /// </summary>
		[ComponentElement]
		[XmlElement("PrimeMeridian")]
        public PrimeMeridianType PrimeMeridian {
            get {
                return PrimeMeridianField;
            } 
            set {
                PrimeMeridianField = value;
                NotifyPropertyChanged("PrimeMeridian");
            }
        }

        private PrimeMeridianType PrimeMeridianField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the PrimeMeridianType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("PrimeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the PrimeMeridianType xsd type.")]
    public partial class PrimeMeridianType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// greenwichLongitude property
        /// </summary>
		
		[XmlElement("greenwichLongitude")]
        public AngleType GreenwichLongitude {
            get {
                return greenwichLongitudeField;
            } 
            set {
                greenwichLongitudeField = value;
                NotifyPropertyChanged("GreenwichLongitude");
            }
        }

        private AngleType greenwichLongitudeField; 


    } //here

    /// <summary>
    /// This class represents the AngleType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("greenwichLongitude", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AngleType xsd type.")]
    public partial class AngleType : MeasureType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AngleType class.
        /// </summary>
        public AngleType() {}

        /// <summary>
        /// Initializes a new instance of the AngleType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public AngleType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here

    /// <summary>
    /// This class represents the MeasureType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AngleType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("semiMajorAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the MeasureType xsd type.")]
    public partial class MeasureType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureType class.
        /// </summary>
        public MeasureType() {}

        /// <summary>
        /// Initializes a new instance of the MeasureType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MeasureType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the LengthType xsd type.")]
    public partial class LengthType : MeasureType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthType class.
        /// </summary>
        public LengthType() {}

        /// <summary>
        /// Initializes a new instance of the LengthType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public LengthType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here
    }

    /// <summary>
    /// This class represents the EllipsoidPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidPropertyType xsd type.")]
    public partial class EllipsoidPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Ellipsoid property
        /// </summary>
		[ComponentElement]
		[XmlElement("Ellipsoid")]
        public EllipsoidType Ellipsoid {
            get {
                return EllipsoidField;
            } 
            set {
                EllipsoidField = value;
                NotifyPropertyChanged("Ellipsoid");
            }
        }

        private EllipsoidType EllipsoidField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EllipsoidType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidType xsd type.")]
    public partial class EllipsoidType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// semiMajorAxis property
        /// </summary>
		
		[XmlElement("semiMajorAxis")]
        public MeasureType SemiMajorAxis {
            get {
                return semiMajorAxisField;
            } 
            set {
                semiMajorAxisField = value;
                NotifyPropertyChanged("SemiMajorAxis");
            }
        }

        private MeasureType semiMajorAxisField; 

        /// <summary>
        /// secondDefiningParameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("secondDefiningParameter")]
        public StandAloneSecondDefParameter SecondDefPara {
            get {
                return secondDefiningParameterField;
            } 
            set {
                secondDefiningParameterField = value;
                NotifyPropertyChanged("SecondDefPara");
            }
        }

        private StandAloneSecondDefParameter secondDefiningParameterField; 


    } //here

    /// <summary>
    /// This class represents the secondDefiningParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the secondDefiningParameter xsd type.")]
    public partial class StandAloneSecondDefParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SecondDefiningParameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("SecondDefiningParameter")]
        public SecondDefiningParameter SecondDefPara {
            get {
                return SecondDefiningParameterField;
            } 
            set {
                SecondDefiningParameterField = value;
                NotifyPropertyChanged("SecondDefPara");
            }
        }

        private SecondDefiningParameter SecondDefiningParameterField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SecondDefiningParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SecondDefiningParameter xsd type.")]
    public partial class SecondDefiningParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// inverseFlattening property
        /// </summary>
        [XmlElement("inverseFlattening")]
        public MeasureType InverseFlattening {
            get {
                return inverseFlatteningField;
            } 
            set {
                inverseFlatteningField = value;
                InverseFlatteningSpecified = (value!=null);
                NotifyPropertyChanged("InverseFlattening");
            }
        }

        private MeasureType inverseFlatteningField; 
        private bool inverseFlatteningSpecified = false; 

        /// <summary>
        /// bool to indicate if InverseFlattening has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool InverseFlatteningSpecified
        {
            get {
                return inverseFlatteningSpecified;
            }
            set {
                inverseFlatteningSpecified= value;
            }
        }

        /// <summary>
        /// isSphere property
        /// </summary>
        [XmlElement("isSphere")]
        public bool? IsSphere {
            get {
                return isSphereField;
            } 
            set {
                isSphereField = value;
                IsSphereSpecified = (value!=null);
                NotifyPropertyChanged("IsSphere");
            }
        }

        private bool? isSphereField; 
        private bool isSphereSpecified = false; 

        /// <summary>
        /// bool to indicate if IsSphere has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool IsSphereSpecified
        {
            get {
                return isSphereSpecified;
            }
            set {
                isSphereSpecified= value;
            }
        }

        /// <summary>
        /// semiMinorAxis property
        /// </summary>
        [XmlElement("semiMinorAxis")]
        public LengthType SemiMinorAxis {
            get {
                return semiMinorAxisField;
            } 
            set {
                semiMinorAxisField = value;
                SemiMinorAxisSpecified = (value!=null);
                NotifyPropertyChanged("SemiMinorAxis");
            }
        }

        private LengthType semiMinorAxisField; 
        private bool semiMinorAxisSpecified = false; 

        /// <summary>
        /// bool to indicate if SemiMinorAxis has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SemiMinorAxisSpecified
        {
            get {
                return semiMinorAxisSpecified;
            }
            set {
                semiMinorAxisSpecified= value;
            }
        }



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractDatumType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractDatumType xsd type.")]
    public abstract partial class AbstractDatumType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[ComponentElement]
		[XmlElement("domainOfValidity")]
        public DomainOfValidity DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

        private DomainOfValidity domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 

        /// <summary>
        /// anchorDefinition property
        /// </summary>
		[ComponentElement]
		[XmlElement("anchorDefinition")]
        public CodeType AnchorDefinition {
            get {
                return anchorDefinitionField;
            } 
            set {
                anchorDefinitionField = value;
                NotifyPropertyChanged("AnchorDefinition");
            }
        }

        private CodeType anchorDefinitionField; 

        /// <summary>
        /// realizationEpoch property
        /// </summary>
		
		[XmlElement("realizationEpoch", DataType="date")]
        public DateTime? RealizationEpoch {
            get {
                return realizationEpochField;
            } 
            set {
                realizationEpochField = value;
                 this.RealizationEpochSpecified = true;
                NotifyPropertyChanged("RealizationEpoch");
            }
        }

        private DateTime? realizationEpochField; 

        /// <summary>
        /// realizationEpochSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RealizationEpochSpecified {
            get {
                return realizationEpochSpecifiedField;
            } 
            set {
                realizationEpochSpecifiedField = value;
                NotifyPropertyChanged("RealizationEpochSpecified");
            }
        }

        private bool realizationEpochSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the VerticalDatumType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalDatumType xsd type.")]
    public partial class VerticalDatumType : AbstractDatumType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EX_TemporalExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_TemporalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_TemporalExtent_Type xsd type.")]
    public partial class EX_TemporalExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// extent property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TM_Primitive_PropertyType")]
		[XmlElement("extent")]
        public TM_Primitive_PropertyType Extent {
            get {
                return extentField;
            } 
            set {
                extentField = value;
                NotifyPropertyChanged("Extent");
            }
        }

        private TM_Primitive_PropertyType extentField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TM_Primitive_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TM_Primitive_PropertyType", Namespace="http://www.isotc211.org/2005/gts")]
	[Description("This class represents the TM_Primitive_PropertyType xsd type.")]
    public partial class TM_Primitive_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractTimePrimitive property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return AbstractTimePrimitiveField;
            } 
            set {
                AbstractTimePrimitiveField = value;
                NotifyPropertyChanged("AbstractTimePrimitive");
            }
        }

        private AbstractTimePrimitiveType AbstractTimePrimitiveField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_TemporalExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_TemporalExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_TemporalExtent_PropertyType xsd type.")]
    public partial class EX_TemporalExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_TemporalExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_TemporalExtent")]
        public EX_TemporalExtent_Type EX_TemporalExtent {
            get {
                return EX_TemporalExtentField;
            } 
            set {
                EX_TemporalExtentField = value;
                NotifyPropertyChanged("EX_TemporalExtent");
            }
        }

        private EX_TemporalExtent_Type EX_TemporalExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_VerticalExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_VerticalExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_VerticalExtent_PropertyType xsd type.")]
    public partial class EX_VerticalExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_VerticalExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_VerticalExtent")]
        public EX_VerticalExtent_Type EX_VerticalExtent {
            get {
                return EX_VerticalExtentField;
            } 
            set {
                EX_VerticalExtentField = value;
                NotifyPropertyChanged("EX_VerticalExtent");
            }
        }

        private EX_VerticalExtent_Type EX_VerticalExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the coordinateOperationAccuracy xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the coordinateOperationAccuracy xsd type.")]
    public partial class CoordinateOperationAccuracy : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractDQ_PositionalAccuracy property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracy {
            get {
                return AbstractDQ_PositionalAccuracyField;
            } 
            set {
                AbstractDQ_PositionalAccuracyField = value;
                NotifyPropertyChanged("AbstractDQ_PositionalAccuracy");
            }
        }

        private AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracyField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CRSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sourceCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CRSPropertyType xsd type.")]
    public partial class CRSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractCRS")]
        public AbstractCRSType AbstractCRS {
            get {
                return AbstractCRSField;
            } 
            set {
                AbstractCRSField = value;
                NotifyPropertyChanged("AbstractCRS");
            }
        }

        private AbstractCRSType AbstractCRSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the VerticalDatumPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalDatumPropertyType xsd type.")]
    public partial class VerticalDatumPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VerticalDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("VerticalDatum")]
        public VerticalDatumType VerticalDatum {
            get {
                return VerticalDatumField;
            } 
            set {
                VerticalDatumField = value;
                NotifyPropertyChanged("VerticalDatum");
            }
        }

        private VerticalDatumType VerticalDatumField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The sender may choose to send a nameCRS, with a well known name structure, or the sequence of information that fully defines the CRS. It is recommended that, for the standard CRSs in the EPSG database, the nameCRS be sent.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_standardProjectedCRS", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("The sender may choose to send a nameCRS, with a well known name structure, or the sequence of information that fully defines the CRS. It is recommended that, for the standard CRSs in the EPSG database, the nameCRS be sent.")]
    public partial class StandardProjectedCRS : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'Accra / Ghana National Grid' with a code of '2136' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
        [ComponentElement]
        [XmlElement("nameCRS")]
        [EnergisticsDataTypeAttribute(DataType = "wellKnownNameStruct")]
        public WellKnownNameStruct NameCRS {
            get {
                return nameCRSField;
            } 
            set {
                if (value != null && ProjectedCRSSpecified) throw new Exception("Cannot set property NameCRS when property ProjectedCRS is already set");
                nameCRSField = value;
                NameCRSSpecified = (value!=null);
                NotifyPropertyChanged("NameCRS");
            }
        }

        private WellKnownNameStruct nameCRSField; 
        private bool nameCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if NameCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool NameCRSSpecified
        {
            get {
                return nameCRSSpecified;
            }
            set {
                nameCRSSpecified= value;
            }
        }

        /// <summary>
        /// ProjectedCRS property
        /// </summary>
        [ComponentElement]
        [XmlElement("ProjectedCRS", Namespace="http://www.opengis.net/gml/3.2")]
        public ProjectedCRSType ProjectedCRS {
            get {
                return ProjectedCRSField;
            } 
            set {
                ProjectedCRSField = value;
                ProjectedCRSSpecified = (value!=null);
                NotifyPropertyChanged("ProjectedCRS");
            }
        }

        private ProjectedCRSType ProjectedCRSField; 
        private bool projectedCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if ProjectedCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ProjectedCRSSpecified
        {
            get {
                return projectedCRSSpecified;
            }
            set {
                projectedCRSSpecified= value;
            }
        }



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The sender may choose to send a nameCRS, with a well known name structure, or the sequence of information that fully defines the CRS. It is recommended that, for the standard CRSs in the EPSG database, the nameCRS be sent.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_standardGeodeticCRS", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("The sender may choose to send a nameCRS, with a well known name structure, or the sequence of information that fully defines the CRS. It is recommended that, for the standard CRSs in the EPSG database, the nameCRS be sent.")]
    public partial class StandardGeodeticCRS : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the coordinate reference system in a particular naming system. An optional short name (code) can also be specified. Specifying a well known system is highly desired. An example would be to specify a name of 'ED50' with a code of '4230' in the 'EPSG' naming system. Note that specifying a name in the EPSG naming system is asserting that the parameters in the EPSG database are appropriate for this CRS. This is also true for any other naming system. If in doubt, contact your local geodesist.
        /// </summary>
        [ComponentElement]
        [XmlElement("nameCRS")]
        [EnergisticsDataTypeAttribute(DataType = "wellKnownNameStruct")]
        public WellKnownNameStruct NameCRS {
            get {
                return nameCRSField;
            } 
            set {
                if (value != null && GeodeticCRSSpecified) throw new Exception("Cannot set property NameCRS when property GeodeticCRS is already set");
                nameCRSField = value;
                NameCRSSpecified = (value!=null);
                NotifyPropertyChanged("NameCRS");
            }
        }

        private WellKnownNameStruct nameCRSField; 
        private bool nameCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if NameCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool NameCRSSpecified
        {
            get {
                return nameCRSSpecified;
            }
            set {
                nameCRSSpecified= value;
            }
        }

        /// <summary>
        /// GeodeticCRS property
        /// </summary>
        [ComponentElement]
        [XmlElement("GeodeticCRS", Namespace="http://www.opengis.net/gml/3.2")]
        public GeodeticCRSType GeodeticCRS {
            get {
                return GeodeticCRSField;
            } 
            set {
                GeodeticCRSField = value;
                GeodeticCRSSpecified = (value!=null);
                NotifyPropertyChanged("GeodeticCRS");
            }
        }

        private GeodeticCRSType GeodeticCRSField; 
        private bool geodeticCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if GeodeticCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool GeodeticCRSSpecified
        {
            get {
                return geodeticCRSSpecified;
            }
            set {
                geodeticCRSSpecified= value;
            }
        }



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This is a type for storing standard CRSs. It will handle geodetic, projected, and vertical CRSs. These are standard, and are specialized for EPSG database, in that there is a direct reference method for referencing an EPSG CRS. Alternatively, a description of the CRS can be given. It is advised that EPSG CRSs be referenced, since full information is available from a library service. Non-EPSG CRSs can be fully described.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_coordinateReferenceSystem", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("This is a type for storing standard CRSs. It will handle geodetic, projected, and vertical CRSs. These are standard, and are specialized for EPSG database, in that there is a direct reference method for referencing an EPSG CRS. Alternatively, a description of the CRS can be given. It is advised that EPSG CRSs be referenced, since full information is available from a library service. Non-EPSG CRSs can be fully described.")]
    public partial class CoordinateReferenceSystem : Object, IWitsmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// A standard, human recognizable name by which this CRS is known.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A standard, human recognizable name by which this CRS is known.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Use this for a geodetic CRS.
        /// </summary>
        [ComponentElement]
        [XmlElement("geodeticCRS")]
        [EnergisticsDataTypeAttribute(DataType = "cs_standardGeodeticCRS")]
        public StandardGeodeticCRS GeodeticCRS {
            get {
                return geodeticCRSField;
            } 
            set {
                if (value != null && ProjectedCRSSpecified) throw new Exception("Cannot set property GeodeticCRS when property ProjectedCRS is already set");
                if (value != null && VerticalCRSSpecified) throw new Exception("Cannot set property GeodeticCRS when property VerticalCRS is already set");
                geodeticCRSField = value;
                GeodeticCRSSpecified = (value!=null);
                NotifyPropertyChanged("GeodeticCRS");
            }
        }

        private StandardGeodeticCRS geodeticCRSField; 
        private bool geodeticCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if GeodeticCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool GeodeticCRSSpecified
        {
            get {
                return geodeticCRSSpecified;
            }
            set {
                geodeticCRSSpecified= value;
            }
        }

        /// <summary>
        /// Use this for a projected CRS.
        /// </summary>
        [ComponentElement]
        [XmlElement("projectedCRS")]
        [EnergisticsDataTypeAttribute(DataType = "cs_standardProjectedCRS")]
        public StandardProjectedCRS ProjectedCRS {
            get {
                return projectedCRSField;
            } 
            set {
                if (value != null && GeodeticCRSSpecified) throw new Exception("Cannot set property ProjectedCRS when property GeodeticCRS is already set");
                if (value != null && VerticalCRSSpecified) throw new Exception("Cannot set property ProjectedCRS when property VerticalCRS is already set");
                projectedCRSField = value;
                ProjectedCRSSpecified = (value!=null);
                NotifyPropertyChanged("ProjectedCRS");
            }
        }

        private StandardProjectedCRS projectedCRSField; 
        private bool projectedCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if ProjectedCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ProjectedCRSSpecified
        {
            get {
                return projectedCRSSpecified;
            }
            set {
                projectedCRSSpecified= value;
            }
        }

        /// <summary>
        /// Use this for a vertical CRS.
        /// </summary>
        [ComponentElement]
        [XmlElement("verticalCRS")]
        [EnergisticsDataTypeAttribute(DataType = "cs_standardVerticalCRS")]
        public StandardVerticalCRS VerticalCRS {
            get {
                return verticalCRSField;
            } 
            set {
                if (value != null && GeodeticCRSSpecified) throw new Exception("Cannot set property VerticalCRS when property GeodeticCRS is already set");
                if (value != null && ProjectedCRSSpecified) throw new Exception("Cannot set property VerticalCRS when property ProjectedCRS is already set");
                verticalCRSField = value;
                VerticalCRSSpecified = (value!=null);
                NotifyPropertyChanged("VerticalCRS");
            }
        }

        private StandardVerticalCRS verticalCRSField; 
        private bool verticalCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if VerticalCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool VerticalCRSSpecified
        {
            get {
                return verticalCRSSpecified;
            }
            set {
                verticalCRSSpecified= value;
            }
        }


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The non-contextual content of a WITSML Conventional Core.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_convCore", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Conventional Core.")]
    public partial class ConvCore : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the conventional core. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the conventional core.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the conventional core. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the conventional core.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Top depth of core interval. 
        /// </summary>
		[Description("Top depth of core interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdCoreTop")]
        public MeasuredDepthCoord MDCoreTop {
            get {
                return mdCoreTopField;
            } 
            set {
                mdCoreTopField = value;
                NotifyPropertyChanged("MDCoreTop");
            }
        }

        private MeasuredDepthCoord mdCoreTopField; 

        /// <summary>
        /// Bottom depth of core interval. 
        /// </summary>
		[Description("Bottom depth of core interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdCoreBottom")]
        public MeasuredDepthCoord MDCoreBottom {
            get {
                return mdCoreBottomField;
            } 
            set {
                mdCoreBottomField = value;
                NotifyPropertyChanged("MDCoreBottom");
            }
        }

        private MeasuredDepthCoord mdCoreBottomField; 

        /// <summary>
        /// Date and time when coring commenced (cutting new core). 
        /// </summary>
		[Description("Date and time when coring commenced (cutting new core).")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimCoreStart")]
        public Timestamp? DateTimeCoreStart {
            get {
                return dTimCoreStartField;
            } 
            set {
                dTimCoreStartField = value;
                 this.DateTimeCoreStartSpecified = true;
                NotifyPropertyChanged("DateTimeCoreStart");
            }
        }

        private Timestamp? dTimCoreStartField; 

        /// <summary>
        /// dTimCoreStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCoreStartSpecified {
            get {
                return dTimCoreStartSpecifiedField;
            } 
            set {
                dTimCoreStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCoreStartSpecified");
            }
        }

        private bool dTimCoreStartSpecifiedField; 

        /// <summary>
        /// Date and time when coring complete (end of cutting new core). 
        /// </summary>
		[Description("Date and time when coring complete (end of cutting new core).")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimCoreEnd")]
        public Timestamp? DateTimeCoreEnd {
            get {
                return dTimCoreEndField;
            } 
            set {
                dTimCoreEndField = value;
                 this.DateTimeCoreEndSpecified = true;
                NotifyPropertyChanged("DateTimeCoreEnd");
            }
        }

        private Timestamp? dTimCoreEndField; 

        /// <summary>
        /// dTimCoreEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCoreEndSpecified {
            get {
                return dTimCoreEndSpecifiedField;
            } 
            set {
                dTimCoreEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCoreEndSpecified");
            }
        }

        private bool dTimCoreEndSpecifiedField; 

        /// <summary>
        /// Manufacturer core reference. 
        /// </summary>
		[StringLength(32)]
        [Description("Manufacturer core reference.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("coreReference")]
        public string CoreReference {
            get {
                return coreReferenceField;
            } 
            set {
                coreReferenceField = value;
                NotifyPropertyChanged("CoreReference");
            }
        }

        private string coreReferenceField; 

        /// <summary>
        /// Name of coring contractor. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of coring contractor.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("coringContractor")]
        public string CoringContractor {
            get {
                return coringContractorField;
            } 
            set {
                coringContractorField = value;
                NotifyPropertyChanged("CoringContractor");
            }
        }

        private string coringContractorField; 

        /// <summary>
        /// Name of analysis company. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of analysis company.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("analysisContractor")]
        public string AnalysisContractor {
            get {
                return analysisContractorField;
            } 
            set {
                analysisContractorField = value;
                NotifyPropertyChanged("AnalysisContractor");
            }
        }

        private string analysisContractorField; 

        /// <summary>
        /// Core barrel type. 
        /// </summary>
		[StringLength(32)]
        [Description("Core barrel type.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("coreBarrel")]
        public string CoreBarrel {
            get {
                return coreBarrelField;
            } 
            set {
                coreBarrelField = value;
                NotifyPropertyChanged("CoreBarrel");
            }
        }

        private string coreBarrelField; 

        /// <summary>
        /// Inner barrel used? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[Description("Inner barrel used? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("innerBarrelUsed")]
        public bool? InnerBarrelUsed {
            get {
                return innerBarrelUsedField;
            } 
            set {
                innerBarrelUsedField = value;
                 this.InnerBarrelUsedSpecified = true;
                NotifyPropertyChanged("InnerBarrelUsed");
            }
        }

        private bool? innerBarrelUsedField; 

        /// <summary>
        /// innerBarrelUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InnerBarrelUsedSpecified {
            get {
                return innerBarrelUsedSpecifiedField;
            } 
            set {
                innerBarrelUsedSpecifiedField = value;
                NotifyPropertyChanged("InnerBarrelUsedSpecified");
            }
        }

        private bool innerBarrelUsedSpecifiedField; 

        /// <summary>
        /// Core inner barrel type. 
        /// </summary>
		[StringLength(32)]
        [Description("Core inner barrel type.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("innerBarrelType")]
        public string InnerBarrelType {
            get {
                return innerBarrelTypeField;
            } 
            set {
                innerBarrelTypeField = value;
                NotifyPropertyChanged("InnerBarrelType");
            }
        }

        private string innerBarrelTypeField; 

        /// <summary>
        /// Length of core barrel. 
        /// </summary>
		[Description("Length of core barrel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenBarrel")]
        public LengthMeasure LenBarrel {
            get {
                return lenBarrelField;
            } 
            set {
                lenBarrelField = value;
                NotifyPropertyChanged("LenBarrel");
            }
        }

        private LengthMeasure lenBarrelField; 

        /// <summary>
        /// Core bit type. 
        /// </summary>
		[StringLength(32)]
        [Description("Core bit type.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("coreBitType")]
        public string CoreBitType {
            get {
                return coreBitTypeField;
            } 
            set {
                coreBitTypeField = value;
                NotifyPropertyChanged("CoreBitType");
            }
        }

        private string coreBitTypeField; 

        /// <summary>
        /// Core bit outer diameter. 
        /// </summary>
		[Description("Core bit outer diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaBit")]
        public LengthMeasure DiaBit {
            get {
                return diaBitField;
            } 
            set {
                diaBitField = value;
                NotifyPropertyChanged("DiaBit");
            }
        }

        private LengthMeasure diaBitField; 

        /// <summary>
        /// Core cut diameter. 
        /// </summary>
		[Description("Core cut diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaCore")]
        public LengthMeasure DiaCore {
            get {
                return diaCoreField;
            } 
            set {
                diaCoreField = value;
                NotifyPropertyChanged("DiaCore");
            }
        }

        private LengthMeasure diaCoreField; 

        /// <summary>
        /// Cored interval length. 
        /// </summary>
		[Description("Cored interval length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenCored")]
        public LengthMeasure LenCored {
            get {
                return lenCoredField;
            } 
            set {
                lenCoredField = value;
                NotifyPropertyChanged("LenCored");
            }
        }

        private LengthMeasure lenCoredField; 

        /// <summary>
        /// Length of core recovered. 
        /// </summary>
		[Description("Length of core recovered.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenRecovered")]
        public LengthMeasure LenRecovered {
            get {
                return lenRecoveredField;
            } 
            set {
                lenRecoveredField = value;
                NotifyPropertyChanged("LenRecovered");
            }
        }

        private LengthMeasure lenRecoveredField; 

        /// <summary>
        /// Calculate recovery (commonly in percent). 
        /// </summary>
		[Description("Calculate recovery (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("recoverPc")]
        public VolumePerVolumeMeasure RecoverPercent {
            get {
                return recoverPcField;
            } 
            set {
                recoverPcField = value;
                NotifyPropertyChanged("RecoverPercent");
            }
        }

        private VolumePerVolumeMeasure recoverPcField; 

        /// <summary>
        /// Wellbore inclination over cored interval. 
        /// </summary>
		[Description("Wellbore inclination over cored interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("inclHole")]
        public PlaneAngleMeasure InclHole {
            get {
                return inclHoleField;
            } 
            set {
                inclHoleField = value;
                NotifyPropertyChanged("InclHole");
            }
        }

        private PlaneAngleMeasure inclHoleField; 

        /// <summary>
        /// True if the core can be re-oriented in space after extraction when a tool-face has been used. Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[Description("True if the core can be re-oriented in space after  extraction when a tool-face has been used. Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("coreOrientation")]
        public bool? CoreOrientation {
            get {
                return coreOrientationField;
            } 
            set {
                coreOrientationField = value;
                 this.CoreOrientationSpecified = true;
                NotifyPropertyChanged("CoreOrientation");
            }
        }

        private bool? coreOrientationField; 

        /// <summary>
        /// coreOrientationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CoreOrientationSpecified {
            get {
                return coreOrientationSpecifiedField;
            } 
            set {
                coreOrientationSpecifiedField = value;
                NotifyPropertyChanged("CoreOrientationSpecified");
            }
        }

        private bool coreOrientationSpecifiedField; 

        /// <summary>
        /// Method to catch core - fiberglass barrel, conventional, etc. 
        /// </summary>
		[StringLength(32)]
        [Description("Method to catch core - fiberglass barrel, conventional, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("coreMethod")]
        public string CoreMethod {
            get {
                return coreMethodField;
            } 
            set {
                coreMethodField = value;
                NotifyPropertyChanged("CoreMethod");
            }
        }

        private string coreMethodField; 

        /// <summary>
        /// Preservation method description. 
        /// </summary>
		[StringLength(32)]
        [Description("Preservation method description.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("coreTreatmentMethod")]
        public string CoreTreatmentMethod {
            get {
                return coreTreatmentMethodField;
            } 
            set {
                coreTreatmentMethodField = value;
                NotifyPropertyChanged("CoreTreatmentMethod");
            }
        }

        private string coreTreatmentMethodField; 

        /// <summary>
        /// Mud type in use when cutting core. 
        /// </summary>
		[StringLength(32)]
        [Description("Mud type in use when cutting core.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("coreFluidUsed")]
        public string CoreFluidUsed {
            get {
                return coreFluidUsedField;
            } 
            set {
                coreFluidUsedField = value;
                NotifyPropertyChanged("CoreFluidUsed");
            }
        }

        private string coreFluidUsedField; 

        /// <summary>
        /// Name of formation penetrated. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of formation penetrated.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameFormation")]
        public string NameFormation {
            get {
                return nameFormationField;
            } 
            set {
                nameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private string nameFormationField; 

        /// <summary>
        /// Set of Geological intervals, descriptions, gas readings for the cored interval. 
        /// </summary>
		[Description("Set of Geological intervals, descriptions, gas readings for the cored  interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_geologyInterval")]
		[XmlElement("geologyInterval")]
        public GeologyInterval GeologyInterval {
            get {
                return geologyIntervalField;
            } 
            set {
                geologyIntervalField = value;
                NotifyPropertyChanged("GeologyInterval");
            }
        }

        private GeologyInterval geologyIntervalField; 

        /// <summary>
        /// General core description. 
        /// </summary>
		[StringLength(4000)]
        [Description("General core description.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("coreDescription")]
        public string CoreDescription {
            get {
                return coreDescriptionField;
            } 
            set {
                coreDescriptionField = value;
                NotifyPropertyChanged("CoreDescription");
            }
        }

        private string coreDescriptionField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines detail changes of an object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_changeHistory", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Defines detail changes of an object.")]
    public partial class ChangeHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Required]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimChange")]
        public Timestamp? DateTimeChange {
            get {
                return dTimChangeField;
            } 
            set {
                dTimChangeField = value;
                NotifyPropertyChanged("DateTimeChange");
            }
        }

        private Timestamp? dTimChangeField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Required]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "ChangeInfoType")]
		[XmlElement("changeType")]
        public ChangeInfoType? ChangeType {
            get {
                return changeTypeField;
            } 
            set {
                changeTypeField = value;
                 this.ChangeTypeSpecified = true;
                NotifyPropertyChanged("ChangeType");
            }
        }

        
        private bool ChangeTypeSpecifiedField = false;
        
        /// <summary>
        /// ChangeTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ChangeTypeSpecified {
            get {
                return ChangeTypeSpecifiedField;
            } 
            set {
                ChangeTypeSpecifiedField = value;
                NotifyPropertyChanged("ChangeTypeSpecified");
            }
        }
        
        private ChangeInfoType? changeTypeField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("objectGrowingState")]
        public bool? ObjectGrowingState {
            get {
                return objectGrowingStateField;
            } 
            set {
                objectGrowingStateField = value;
                 this.ObjectGrowingStateSpecified = true;
                NotifyPropertyChanged("ObjectGrowingState");
            }
        }

        private bool? objectGrowingStateField; 

        /// <summary>
        /// objectGrowingStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ObjectGrowingStateSpecified {
            get {
                return objectGrowingStateSpecifiedField;
            } 
            set {
                objectGrowingStateSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingStateSpecified");
            }
        }

        private bool objectGrowingStateSpecifiedField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("updatedHeader")]
        public bool? UpdatedHeader {
            get {
                return updatedHeaderField;
            } 
            set {
                updatedHeaderField = value;
                 this.UpdatedHeaderSpecified = true;
                NotifyPropertyChanged("UpdatedHeader");
            }
        }

        private bool? updatedHeaderField; 

        /// <summary>
        /// updatedHeaderSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UpdatedHeaderSpecified {
            get {
                return updatedHeaderSpecifiedField;
            } 
            set {
                updatedHeaderSpecifiedField = value;
                NotifyPropertyChanged("UpdatedHeaderSpecified");
            }
        }

        private bool updatedHeaderSpecifiedField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[StringLength(4000)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("changeInfo")]
        public string ChangeInfo {
            get {
                return changeInfoField;
            } 
            set {
                changeInfoField = value;
                NotifyPropertyChanged("ChangeInfo");
            }
        }

        private string changeInfoField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("startIndex")]
        public GenericMeasure StartIndex {
            get {
                return startIndexField;
            } 
            set {
                startIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private GenericMeasure startIndexField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("endIndex")]
        public GenericMeasure EndIndex {
            get {
                return endIndexField;
            } 
            set {
                endIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private GenericMeasure endIndexField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("startDateTimeIndex")]
        public Timestamp? StartDateTimeIndex {
            get {
                return startDateTimeIndexField;
            } 
            set {
                startDateTimeIndexField = value;
                 this.StartDateTimeIndexSpecified = true;
                NotifyPropertyChanged("StartDateTimeIndex");
            }
        }

        private Timestamp? startDateTimeIndexField; 

        /// <summary>
        /// startDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateTimeIndexSpecified {
            get {
                return startDateTimeIndexSpecifiedField;
            } 
            set {
                startDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("StartDateTimeIndexSpecified");
            }
        }

        private bool startDateTimeIndexSpecifiedField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("endDateTimeIndex")]
        public Timestamp? EndDateTimeIndex {
            get {
                return endDateTimeIndexField;
            } 
            set {
                endDateTimeIndexField = value;
                 this.EndDateTimeIndexSpecified = true;
                NotifyPropertyChanged("EndDateTimeIndex");
            }
        }

        private Timestamp? endDateTimeIndexField; 

        /// <summary>
        /// endDateTimeIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateTimeIndexSpecified {
            get {
                return endDateTimeIndexSpecifiedField;
            } 
            set {
                endDateTimeIndexSpecifiedField = value;
                NotifyPropertyChanged("EndDateTimeIndexSpecified");
            }
        }

        private bool endDateTimeIndexSpecifiedField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[StringLength(4000)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("mnemonics")]
        public string Mnemonics {
            get {
                return mnemonicsField;
            } 
            set {
                mnemonicsField = value;
                NotifyPropertyChanged("Mnemonics");
            }
        }

        private string mnemonicsField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML attachment object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_changeLog", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML attachment object.")]
    public partial class ChangeLog : Object, IWitsmlDataObject, ICommonDataObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable contextual name for a Well. This should match the value of element nameWell in the changed object. If the changed object is well then this value will not be defined. This is required for objects which are a direct or indirect child of a well.
        /// </summary>
		[StringLength(64)]
        [Description("Human recognizable contextual name for a Well. This should match the value of element nameWell in the changed object. If the changed object is well then this value will not be defined. This is required for objects which are a direct or indirect child of a well.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable contextual name for the Wellbore. This should match the value of element nameWellbore in the changed object. If the changed object is well or wellbore then this value will not be defined. This is required for objects which are a direct or indirect child of a wellbore.
        /// </summary>
		[StringLength(64)]
        [Description("Human recognizable contextual name for the Wellbore. This should match the value of element nameWellbore in the changed object. If the changed object is well or wellbore then this value will not be defined. This is required for objects which are a direct or indirect child of a wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable contextual name for the object. This should match the value of the name element in the changed object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable contextual name for the object. This should match the value of the name element in the changed object.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameObject")]
        public string NameObject {
            get {
                return nameObjectField;
            } 
            set {
                nameObjectField = value;
                NotifyPropertyChanged("NameObject");
            }
        }

        private string nameObjectField; 

        /// <summary>
        /// The schema name of the (singular) object that changed. For example, "trajectory".
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The schema name of the (singular) object that changed. For example, \"trajectory\".")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("objectType")]
        public string ObjectType {
            get {
                return objectTypeField;
            } 
            set {
                objectTypeField = value;
                NotifyPropertyChanged("ObjectType");
            }
        }

        private string objectTypeField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("sourceName")]
        public string SourceName {
            get {
                return sourceNameField;
            } 
            set {
                sourceNameField = value;
                NotifyPropertyChanged("SourceName");
            }
        }

        private string sourceNameField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Required]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "ChangeInfoType")]
		[XmlElement("lastChangeType")]
        public ChangeInfoType? LastChangeType {
            get {
                return lastChangeTypeField;
            } 
            set {
                lastChangeTypeField = value;
                 this.LastChangeTypeSpecified = true;
                NotifyPropertyChanged("LastChangeType");
            }
        }

        
        private bool LastChangeTypeSpecifiedField = false;
        
        /// <summary>
        /// LastChangeTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastChangeTypeSpecified {
            get {
                return LastChangeTypeSpecifiedField;
            } 
            set {
                LastChangeTypeSpecifiedField = value;
                NotifyPropertyChanged("LastChangeTypeSpecified");
            }
        }
        
        private ChangeInfoType? lastChangeTypeField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[StringLength(4000)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("lastChangeInfo")]
        public string LastChangeInfo {
            get {
                return lastChangeInfoField;
            } 
            set {
                lastChangeInfoField = value;
                NotifyPropertyChanged("LastChangeInfo");
            }
        }

        private string lastChangeInfoField; 

        /// <summary>
        /// See the API specification for a description of the use of this data.
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_changeHistory")]
		[XmlElement("changeHistory")]
        public List<ChangeHistory> ChangeHistory {
            get {
                return changeHistoryField;
            } 
            set {
                changeHistoryField = value;
                NotifyPropertyChanged("ChangeHistory");
            }
        }

         /// <summary>
         /// bool to indicate if ChangeHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChangeHistorySpecified
         {
             get {
             if(changeHistoryField!=null)
                 return changeHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<ChangeHistory> changeHistoryField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This should match the value of the uidWell attribute in the changed object. If the changed object is well then this value will not be defined. This is required for objects which are a direct or indirect child of a well.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This should match the value of the uidWell attribute in the changed object. If the changed object is well then this value will not be defined. This is required for objects which are a direct or indirect child of a well.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This should match the value of the uidWellbore attribute in the changed object. If the changed object is well or wellbore then this value will not be defined. This is required for objects which are a direct or indirect child of a well or wellbore.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This should match the value of the uidWellbore attribute in the changed object. If the changed object is well or wellbore then this value will not be defined. This is required for objects which are a direct or indirect child of a well or wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// Unique identifier for the changed object. This should match the value of the uid attribute in the changed object.
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the changed object. This should match the value of the uid attribute in the changed object.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uidObject")]
		
        public string UidObject {
            get {
                return uidObjectField;
            } 
            set {
                uidObjectField = value;
                NotifyPropertyChanged("UidObject");
            }
        }

        private string uidObjectField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Cement Test Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementTest", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("WITSML - Cement Test Component Schema ")]
    public partial class CementTest : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Test pressure. 
        /// </summary>
		[Description("Test pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presTest")]
        public PressureMeasure PresTest {
            get {
                return presTestField;
            } 
            set {
                presTestField = value;
                NotifyPropertyChanged("PresTest");
            }
        }

        private PressureMeasure presTestField; 

        /// <summary>
        /// Elapsed tome to perform the test. 
        /// </summary>
		[Description("Elapsed tome to perform the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimTest")]
        public TimeMeasure ETimeTest {
            get {
                return eTimTestField;
            } 
            set {
                eTimTestField = value;
                NotifyPropertyChanged("ETimeTest");
            }
        }

        private TimeMeasure eTimTestField; 

        /// <summary>
        /// Cement found between shoe and collar? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Cement found between shoe and collar?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("cementShoeCollar")]
        public bool? CementShoeCollar {
            get {
                return cementShoeCollarField;
            } 
            set {
                cementShoeCollarField = value;
                 this.CementShoeCollarSpecified = true;
                NotifyPropertyChanged("CementShoeCollar");
            }
        }

        private bool? cementShoeCollarField; 

        /// <summary>
        /// cementShoeCollarSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CementShoeCollarSpecified {
            get {
                return cementShoeCollarSpecifiedField;
            } 
            set {
                cementShoeCollarSpecifiedField = value;
                NotifyPropertyChanged("CementShoeCollarSpecified");
            }
        }

        private bool cementShoeCollarSpecifiedField; 

        /// <summary>
        /// Cement evaluation tool run. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Cement evaluation tool run.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("cetRun")]
        public bool? CetRun {
            get {
                return cetRunField;
            } 
            set {
                cetRunField = value;
                 this.CetRunSpecified = true;
                NotifyPropertyChanged("CetRun");
            }
        }

        private bool? cetRunField; 

        /// <summary>
        /// cetRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CetRunSpecified {
            get {
                return cetRunSpecifiedField;
            } 
            set {
                cetRunSpecifiedField = value;
                NotifyPropertyChanged("CetRunSpecified");
            }
        }

        private bool cetRunSpecifiedField; 

        /// <summary>
        /// Cement evaluation tool bond quality. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Cement evaluation tool bond quality.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("cetBondQual")]
        public bool? CetBondQual {
            get {
                return cetBondQualField;
            } 
            set {
                cetBondQualField = value;
                 this.CetBondQualSpecified = true;
                NotifyPropertyChanged("CetBondQual");
            }
        }

        private bool? cetBondQualField; 

        /// <summary>
        /// cetBondQualSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CetBondQualSpecified {
            get {
                return cetBondQualSpecifiedField;
            } 
            set {
                cetBondQualSpecifiedField = value;
                NotifyPropertyChanged("CetBondQualSpecified");
            }
        }

        private bool cetBondQualSpecifiedField; 

        /// <summary>
        /// Cement bond log run? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Cement bond log run?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("cblRun")]
        public bool? CblRun {
            get {
                return cblRunField;
            } 
            set {
                cblRunField = value;
                 this.CblRunSpecified = true;
                NotifyPropertyChanged("CblRun");
            }
        }

        private bool? cblRunField; 

        /// <summary>
        /// cblRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CblRunSpecified {
            get {
                return cblRunSpecifiedField;
            } 
            set {
                cblRunSpecifiedField = value;
                NotifyPropertyChanged("CblRunSpecified");
            }
        }

        private bool cblRunSpecifiedField; 

        /// <summary>
        /// Cement bond log quality indication. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Cement bond log quality indication.   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("cblBondQual")]
        public bool? CblBondQual {
            get {
                return cblBondQualField;
            } 
            set {
                cblBondQualField = value;
                 this.CblBondQualSpecified = true;
                NotifyPropertyChanged("CblBondQual");
            }
        }

        private bool? cblBondQualField; 

        /// <summary>
        /// cblBondQualSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CblBondQualSpecified {
            get {
                return cblBondQualSpecifiedField;
            } 
            set {
                cblBondQualSpecifiedField = value;
                NotifyPropertyChanged("CblBondQualSpecified");
            }
        }

        private bool cblBondQualSpecifiedField; 

        /// <summary>
        /// Cement bond Log under pressure. 
        /// </summary>
		[Description("Cement bond Log under pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("cblPres")]
        public PressureMeasure CblPres {
            get {
                return cblPresField;
            } 
            set {
                cblPresField = value;
                NotifyPropertyChanged("CblPres");
            }
        }

        private PressureMeasure cblPresField; 

        /// <summary>
        /// Temperature survey run. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Temperature survey run.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("tempSurvey")]
        public bool? TempSurvey {
            get {
                return tempSurveyField;
            } 
            set {
                tempSurveyField = value;
                 this.TempSurveySpecified = true;
                NotifyPropertyChanged("TempSurvey");
            }
        }

        private bool? tempSurveyField; 

        /// <summary>
        /// tempSurveySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TempSurveySpecified {
            get {
                return tempSurveySpecifiedField;
            } 
            set {
                tempSurveySpecifiedField = value;
                NotifyPropertyChanged("TempSurveySpecified");
            }
        }

        private bool tempSurveySpecifiedField; 

        /// <summary>
        /// Hours before logging run after cement run. 
        /// </summary>
		[Description("Hours before logging run after cement run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimCementLog")]
        public TimeMeasure ETimeCementLog {
            get {
                return eTimCementLogField;
            } 
            set {
                eTimCementLogField = value;
                NotifyPropertyChanged("ETimeCementLog");
            }
        }

        private TimeMeasure eTimCementLogField; 

        /// <summary>
        /// PIT/LOT formation breakdown gradient or absolute pressure. 
        /// </summary>
		[Description("PIT/LOT formation breakdown gradient or absolute pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forcePerVolumeMeasure")]
		[XmlElement("formPit")]
        public ForcePerVolumeMeasure FormPit {
            get {
                return formPitField;
            } 
            set {
                formPitField = value;
                NotifyPropertyChanged("FormPit");
            }
        }

        private ForcePerVolumeMeasure formPitField; 

        /// <summary>
        /// Tool name for PIT. 
        /// </summary>
		[StringLength(64)]
        [Description("Tool name for PIT.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("toolCompanyPit")]
        public string ToolCompanyPit {
            get {
                return toolCompanyPitField;
            } 
            set {
                toolCompanyPitField = value;
                NotifyPropertyChanged("ToolCompanyPit");
            }
        }

        private string toolCompanyPitField; 

        /// <summary>
        /// Hours between end of cement job-start of PIT. 
        /// </summary>
		[Description("Hours between end of cement job-start of PIT.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimPitStart")]
        public TimeMeasure ETimePitStart {
            get {
                return eTimPitStartField;
            } 
            set {
                eTimPitStartField = value;
                NotifyPropertyChanged("ETimePitStart");
            }
        }

        private TimeMeasure eTimPitStartField; 

        /// <summary>
        /// Measured depth at top of cement. 
        /// </summary>
		[Description("Measured depth at top of cement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdCementTop")]
        public MeasuredDepthCoord MDCementTop {
            get {
                return mdCementTopField;
            } 
            set {
                mdCementTopField = value;
                NotifyPropertyChanged("MDCementTop");
            }
        }

        private MeasuredDepthCoord mdCementTopField; 

        /// <summary>
        /// Method to determine cement top. 
        /// </summary>
		[StringLength(32)]
        [Description("Method to determine cement top.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("topCementMethod")]
        public string TopCementMethod {
            get {
                return topCementMethodField;
            } 
            set {
                topCementMethodField = value;
                NotifyPropertyChanged("TopCementMethod");
            }
        }

        private string topCementMethodField; 

        /// <summary>
        /// Is the top of cement sufficient? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is the top of cement sufficient?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("tocOK")]
        public bool? TocOK {
            get {
                return tocOKField;
            } 
            set {
                tocOKField = value;
                 this.TocOKSpecified = true;
                NotifyPropertyChanged("TocOK");
            }
        }

        private bool? tocOKField; 

        /// <summary>
        /// tocOKSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TocOKSpecified {
            get {
                return tocOKSpecifiedField;
            } 
            set {
                tocOKSpecifiedField = value;
                NotifyPropertyChanged("TocOKSpecified");
            }
        }

        private bool tocOKSpecifiedField; 

        /// <summary>
        /// Job rating. 
        /// </summary>
		[StringLength(16)]
        [Description("Job rating.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("jobRating")]
        public string JobRating {
            get {
                return jobRatingField;
            } 
            set {
                jobRatingField = value;
                NotifyPropertyChanged("JobRating");
            }
        }

        private string jobRatingField; 

        /// <summary>
        /// Remedial cement required. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Remedial cement required.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("remedialCement")]
        public bool? RemedialCement {
            get {
                return remedialCementField;
            } 
            set {
                remedialCementField = value;
                 this.RemedialCementSpecified = true;
                NotifyPropertyChanged("RemedialCement");
            }
        }

        private bool? remedialCementField; 

        /// <summary>
        /// remedialCementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RemedialCementSpecified {
            get {
                return remedialCementSpecifiedField;
            } 
            set {
                remedialCementSpecifiedField = value;
                NotifyPropertyChanged("RemedialCementSpecified");
            }
        }

        private bool remedialCementSpecifiedField; 

        /// <summary>
        /// Number of remedials. 
        /// </summary>
		[Description("Number of remedials.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("numRemedial")]
        public short? NumRemedial {
            get {
                return numRemedialField;
            } 
            set {
                numRemedialField = value;
                 this.NumRemedialSpecified = true;
                NotifyPropertyChanged("NumRemedial");
            }
        }

        private short? numRemedialField; 

        /// <summary>
        /// numRemedialSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumRemedialSpecified {
            get {
                return numRemedialSpecifiedField;
            } 
            set {
                numRemedialSpecifiedField = value;
                NotifyPropertyChanged("NumRemedialSpecified");
            }
        }

        private bool numRemedialSpecifiedField; 

        /// <summary>
        /// Method used to determine if cement job unsuccessful. 
        /// </summary>
		[StringLength(32)]
        [Description("Method used to determine if cement job unsuccessful.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("failureMethod")]
        public string FailureMethod {
            get {
                return failureMethodField;
            } 
            set {
                failureMethodField = value;
                NotifyPropertyChanged("FailureMethod");
            }
        }

        private string failureMethodField; 

        /// <summary>
        /// The distance to the top of the liner. 
        /// </summary>
		[Description("The distance to the top of the liner.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("linerTop")]
        public LengthMeasure LinerTop {
            get {
                return linerTopField;
            } 
            set {
                linerTopField = value;
                NotifyPropertyChanged("LinerTop");
            }
        }

        private LengthMeasure linerTopField; 

        /// <summary>
        /// Liner overlap length. 
        /// </summary>
		[Description("Liner overlap length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("linerLap")]
        public LengthMeasure LinerLap {
            get {
                return linerLapField;
            } 
            set {
                linerLapField = value;
                NotifyPropertyChanged("LinerLap");
            }
        }

        private LengthMeasure linerLapField; 

        /// <summary>
        /// Hours before liner top test. 
        /// </summary>
		[Description("Hours before liner top test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimBeforeTest")]
        public TimeMeasure ETimeBeforeTest {
            get {
                return eTimBeforeTestField;
            } 
            set {
                eTimBeforeTestField = value;
                NotifyPropertyChanged("ETimeBeforeTest");
            }
        }

        private TimeMeasure eTimBeforeTestField; 

        /// <summary>
        /// Test negative tool for Liner top seal. 
        /// </summary>
		[StringLength(32)]
        [Description("Test negative tool for Liner top seal.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("testNegativeTool")]
        public string TestNegativeTool {
            get {
                return testNegativeToolField;
            } 
            set {
                testNegativeToolField = value;
                NotifyPropertyChanged("TestNegativeTool");
            }
        }

        private string testNegativeToolField; 

        /// <summary>
        /// Equivalent mud weight. Negative Test? 
        /// </summary>
		[Description("Equivalent mud weight. Negative Test?")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("testNegativeEmw")]
        public DensityMeasure TestNegativeEmw {
            get {
                return testNegativeEmwField;
            } 
            set {
                testNegativeEmwField = value;
                NotifyPropertyChanged("TestNegativeEmw");
            }
        }

        private DensityMeasure testNegativeEmwField; 

        /// <summary>
        /// Test Positive Tool for liner top seal. 
        /// </summary>
		[StringLength(32)]
        [Description("Test Positive Tool for liner top seal.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("testPositiveTool")]
        public string TestPositiveTool {
            get {
                return testPositiveToolField;
            } 
            set {
                testPositiveToolField = value;
                NotifyPropertyChanged("TestPositiveTool");
            }
        }

        private string testPositiveToolField; 

        /// <summary>
        /// Equivalent mud weight. Positive Test or absolute pressure . 
        /// </summary>
		[Description("Equivalent mud weight. Positive Test or absolute pressure .")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("testPositiveEmw")]
        public DensityMeasure TestPositiveEmw {
            get {
                return testPositiveEmwField;
            } 
            set {
                testPositiveEmwField = value;
                NotifyPropertyChanged("TestPositiveEmw");
            }
        }

        private DensityMeasure testPositiveEmwField; 

        /// <summary>
        /// Cement found on tool? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Cement found on tool?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("cementFoundOnTool")]
        public bool? CementFoundOnTool {
            get {
                return cementFoundOnToolField;
            } 
            set {
                cementFoundOnToolField = value;
                 this.CementFoundOnToolSpecified = true;
                NotifyPropertyChanged("CementFoundOnTool");
            }
        }

        private bool? cementFoundOnToolField; 

        /// <summary>
        /// cementFoundOnToolSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CementFoundOnToolSpecified {
            get {
                return cementFoundOnToolSpecifiedField;
            } 
            set {
                cementFoundOnToolSpecifiedField = value;
                NotifyPropertyChanged("CementFoundOnToolSpecified");
            }
        }

        private bool cementFoundOnToolSpecifiedField; 

        /// <summary>
        /// Measured depth to diverter tool. 
        /// </summary>
		[Description("Measured depth to diverter tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdDVTool")]
        public MeasuredDepthCoord MDDVTool {
            get {
                return mdDVToolField;
            } 
            set {
                mdDVToolField = value;
                NotifyPropertyChanged("MDDVTool");
            }
        }

        private MeasuredDepthCoord mdDVToolField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cement Additive Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementAdditive", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Cement Additive Component Schema ")]
    public partial class CementAdditive : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Additive name. 
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("Additive name.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("nameAdd")]
        public string NameAdd {
            get {
                return nameAddField;
            } 
            set {
                nameAddField = value;
                NotifyPropertyChanged("NameAdd");
            }
        }

        private string nameAddField; 

        /// <summary>
        /// Additive type or Function (Retarder, Visosifier, Weighting agent). 
        /// </summary>
		[StringLength(32)]
        [Description("Additive type or Function (Retarder, Visosifier, Weighting agent).")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typeAdd")]
        public string TypeAdd {
            get {
                return typeAddField;
            } 
            set {
                typeAddField = value;
                NotifyPropertyChanged("TypeAdd");
            }
        }

        private string typeAddField; 

        /// <summary>
        /// Wet or Dry. 
        /// </summary>
		[StringLength(16)]
        [Description("Wet or Dry.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("formAdd")]
        public string FormAdd {
            get {
                return formAddField;
            } 
            set {
                formAddField = value;
                NotifyPropertyChanged("FormAdd");
            }
        }

        private string formAddField; 

        /// <summary>
        /// Additive density. 
        /// </summary>
		[Description("Additive density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densAdd")]
        public DensityMeasure DensAdd {
            get {
                return densAddField;
            } 
            set {
                densAddField = value;
                NotifyPropertyChanged("DensAdd");
            }
        }

        private DensityMeasure densAddField; 

        /// <summary>
        /// ConcentrationType: %BWOC (%By weight of Cement), %BWOB (%By weight of blend), %BWOW (%By weight of water), %BWOBF (%By weight of base fluid) . If you set this property, you must also set Concentration.
        /// </summary>
        [XmlElement("typeConc")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
        public string TypeConc {
            get {
                return typeConcField;
            } 
            set {
                if (value != null && VolSackSpecified) throw new Exception("Cannot set property TypeConc when property VolSack is already set");
                if (value != null && WeightSackSpecified) throw new Exception("Cannot set property TypeConc when property WeightSack is already set");
                typeConcField = value;
                TypeConcSpecified = (value!=null);
                NotifyPropertyChanged("TypeConc");
            }
        }

        private string typeConcField; 
        private bool typeConcSpecified = false; 

        /// <summary>
        /// bool to indicate if TypeConc has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TypeConcSpecified
        {
            get {
                return typeConcSpecified;
            }
            set {
                typeConcSpecified= value;
            }
        }

        /// <summary>
        /// Concentration Amount: unit type depends of typeConc. . If you set this property, you must also set TypeConc.
        /// </summary>
        [ComponentElement]
        [XmlElement("concentration")]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
        public MassConcentrationMeasure Concentration {
            get {
                return concentrationField;
            } 
            set {
                if (value != null && VolSackSpecified) throw new Exception("Cannot set property Concentration when property VolSack is already set");
                if (value != null && WeightSackSpecified) throw new Exception("Cannot set property Concentration when property WeightSack is already set");
                concentrationField = value;
                ConcentrationSpecified = (value!=null);
                NotifyPropertyChanged("Concentration");
            }
        }

        private MassConcentrationMeasure concentrationField; 
        private bool concentrationSpecified = false; 

        /// <summary>
        /// bool to indicate if Concentration has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ConcentrationSpecified
        {
            get {
                return concentrationSpecified;
            }
            set {
                concentrationSpecified= value;
            }
        }

        /// <summary>
        /// Concentration in terms of weight per sack.
        /// </summary>
        [ComponentElement]
        [XmlElement("wtSack")]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
        public MassMeasure WeightSack {
            get {
                return wtSackField;
            } 
            set {
                if (value != null && ConcentrationSpecified) throw new Exception("Cannot set property WeightSack when property Concentration is already set");
                if (value != null && TypeConcSpecified) throw new Exception("Cannot set property WeightSack when property TypeConc is already set");
                if (value != null && VolSackSpecified) throw new Exception("Cannot set property WeightSack when property VolSack is already set");
                wtSackField = value;
                WeightSackSpecified = (value!=null);
                NotifyPropertyChanged("WeightSack");
            }
        }

        private MassMeasure wtSackField; 
        private bool weightSackSpecified = false; 

        /// <summary>
        /// bool to indicate if WeightSack has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool WeightSackSpecified
        {
            get {
                return weightSackSpecified;
            }
            set {
                weightSackSpecified= value;
            }
        }

        /// <summary>
        /// Concentration in terms of volume per sack.
        /// </summary>
        [ComponentElement]
        [XmlElement("volSack")]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
        public VolumeMeasure VolSack {
            get {
                return volSackField;
            } 
            set {
                if (value != null && ConcentrationSpecified) throw new Exception("Cannot set property VolSack when property Concentration is already set");
                if (value != null && TypeConcSpecified) throw new Exception("Cannot set property VolSack when property TypeConc is already set");
                if (value != null && WeightSackSpecified) throw new Exception("Cannot set property VolSack when property WeightSack is already set");
                volSackField = value;
                VolSackSpecified = (value!=null);
                NotifyPropertyChanged("VolSack");
            }
        }

        private VolumeMeasure volSackField; 
        private bool volSackSpecified = false; 

        /// <summary>
        /// bool to indicate if VolSack has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool VolSackSpecified
        {
            get {
                return volSackSpecified;
            }
            set {
                volSackSpecified= value;
            }
        }


        /// <summary>
        /// Additive Amount. 
        /// </summary>
		[Required]
        [Description("Additive Amount.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("additive")]
        public MassMeasure Additive {
            get {
                return additiveField;
            } 
            set {
                additiveField = value;
                NotifyPropertyChanged("Additive");
            }
        }

        private MassMeasure additiveField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cement Pump Schedule Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementPumpSchedule", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Cement Pump Schedule Component Schema ")]
    public partial class CementPumpSchedule : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// (Elapsed time period during the fluid is pumped. 
        /// </summary>
		[Description("(Elapsed time period during the fluid is pumped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimPump")]
        public TimeMeasure ETimePump {
            get {
                return eTimPumpField;
            } 
            set {
                eTimPumpField = value;
                NotifyPropertyChanged("ETimePump");
            }
        }

        private TimeMeasure eTimPumpField; 

        /// <summary>
        /// Rate fluid is pumped. 0 means it is a pause. 
        /// </summary>
		[Description("Rate fluid is pumped. 0 means it is a pause.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("ratePump")]
        public VolumeFlowRateMeasure RatePump {
            get {
                return ratePumpField;
            } 
            set {
                ratePumpField = value;
                NotifyPropertyChanged("RatePump");
            }
        }

        private VolumeFlowRateMeasure ratePumpField; 

        /// <summary>
        /// Volume pumped = eTimPump * ratePump. 
        /// </summary>
		[Description("Volume pumped = eTimPump * ratePump.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volPump")]
        public VolumeMeasure VolPump {
            get {
                return volPumpField;
            } 
            set {
                volPumpField = value;
                NotifyPropertyChanged("VolPump");
            }
        }

        private VolumeMeasure volPumpField; 

        /// <summary>
        /// Number of pump strokes for the fluid to be pumped (assumes pump output known). 
        /// </summary>
		[Description("Number of pump strokes for the fluid to be pumped (assumes pump output known).")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("strokePump")]
        public short? StrokePump {
            get {
                return strokePumpField;
            } 
            set {
                strokePumpField = value;
                 this.StrokePumpSpecified = true;
                NotifyPropertyChanged("StrokePump");
            }
        }

        private short? strokePumpField; 

        /// <summary>
        /// strokePumpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StrokePumpSpecified {
            get {
                return strokePumpSpecifiedField;
            } 
            set {
                strokePumpSpecifiedField = value;
                NotifyPropertyChanged("StrokePumpSpecified");
            }
        }

        private bool strokePumpSpecifiedField; 

        /// <summary>
        /// Back pressure applied during pumping stage. 
        /// </summary>
		[Description("Back pressure applied during pumping stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presBack")]
        public PressureMeasure PresBack {
            get {
                return presBackField;
            } 
            set {
                presBackField = value;
                NotifyPropertyChanged("PresBack");
            }
        }

        private PressureMeasure presBackField; 

        /// <summary>
        /// If shutdown event, the elapsed time duration. 
        /// </summary>
		[Description("If shutdown event, the elapsed time duration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimShutdown")]
        public TimeMeasure ETimeShutdown {
            get {
                return eTimShutdownField;
            } 
            set {
                eTimShutdownField = value;
                NotifyPropertyChanged("ETimeShutdown");
            }
        }

        private TimeMeasure eTimShutdownField; 

        /// <summary>
        /// Comments and Remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and Remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cementing Fluid Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementingFluid", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Cementing Fluid Component Schema ")]
    public partial class CementingFluid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Fluid type: Mud, Wash, Spacer, Slurry. 
        /// </summary>
		[StringLength(16)]
        [Description("Fluid type: Mud, Wash, Spacer, Slurry.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("typeFluid")]
        public string TypeFluid {
            get {
                return typeFluidField;
            } 
            set {
                typeFluidField = value;
                NotifyPropertyChanged("TypeFluid");
            }
        }

        private string typeFluidField; 

        /// <summary>
        /// Fluid Index: 1: first fluid pumped (=original mud), (last-1)=Tail cement, last= displacement mud 
        /// </summary>
		[Description("Fluid Index: 1: first fluid pumped (=original mud),  (last-1)=Tail cement, last= displacement mud")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("fluidIndex")]
        public short? FluidIndex {
            get {
                return fluidIndexField;
            } 
            set {
                fluidIndexField = value;
                 this.FluidIndexSpecified = true;
                NotifyPropertyChanged("FluidIndex");
            }
        }

        private short? fluidIndexField; 

        /// <summary>
        /// fluidIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidIndexSpecified {
            get {
                return fluidIndexSpecifiedField;
            } 
            set {
                fluidIndexSpecifiedField = value;
                NotifyPropertyChanged("FluidIndexSpecified");
            }
        }

        private bool fluidIndexSpecifiedField; 

        /// <summary>
        /// Fluid description. 
        /// </summary>
		[StringLength(64)]
        [Description("Fluid description.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("descFluid")]
        public string DescFluid {
            get {
                return descFluidField;
            } 
            set {
                descFluidField = value;
                NotifyPropertyChanged("DescFluid");
            }
        }

        private string descFluidField; 

        /// <summary>
        /// Purpose description. 
        /// </summary>
		[StringLength(32)]
        [Description("Purpose description.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("purpose")]
        public string Purpose {
            get {
                return purposeField;
            } 
            set {
                purposeField = value;
                NotifyPropertyChanged("Purpose");
            }
        }

        private string purposeField; 

        /// <summary>
        /// Slurry class. 
        /// </summary>
		[StringLength(16)]
        [Description("Slurry class.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("classSlurryDryBlend")]
        public string ClassSlurryDryBlend {
            get {
                return classSlurryDryBlendField;
            } 
            set {
                classSlurryDryBlendField = value;
                NotifyPropertyChanged("ClassSlurryDryBlend");
            }
        }

        private string classSlurryDryBlendField; 

        /// <summary>
        /// Measured depth at top of slurry placement. 
        /// </summary>
		[Description("Measured depth at top of slurry placement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdFluidTop")]
        public MeasuredDepthCoord MDFluidTop {
            get {
                return mdFluidTopField;
            } 
            set {
                mdFluidTopField = value;
                NotifyPropertyChanged("MDFluidTop");
            }
        }

        private MeasuredDepthCoord mdFluidTopField; 

        /// <summary>
        /// Measured depth at bottom of slurry placement. 
        /// </summary>
		[Description("Measured depth at bottom of slurry placement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdFluidBottom")]
        public MeasuredDepthCoord MDFluidBottom {
            get {
                return mdFluidBottomField;
            } 
            set {
                mdFluidBottomField = value;
                NotifyPropertyChanged("MDFluidBottom");
            }
        }

        private MeasuredDepthCoord mdFluidBottomField; 

        /// <summary>
        /// Water Source Description. 
        /// </summary>
		[StringLength(32)]
        [Description("Water Source Description.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("sourceWater")]
        public string SourceWater {
            get {
                return sourceWaterField;
            } 
            set {
                sourceWaterField = value;
                NotifyPropertyChanged("SourceWater");
            }
        }

        private string sourceWaterField; 

        /// <summary>
        /// Water volume. 
        /// </summary>
		[Description("Water volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volWater")]
        public VolumeMeasure VolWater {
            get {
                return volWaterField;
            } 
            set {
                volWaterField = value;
                NotifyPropertyChanged("VolWater");
            }
        }

        private VolumeMeasure volWaterField; 

        /// <summary>
        /// Volume of cement. 
        /// </summary>
		[Description("Volume of cement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volCement")]
        public VolumeMeasure VolCement {
            get {
                return volCementField;
            } 
            set {
                volCementField = value;
                NotifyPropertyChanged("VolCement");
            }
        }

        private VolumeMeasure volCementField; 

        /// <summary>
        /// Mix Water Ratio. 
        /// </summary>
		[Description("Mix Water Ratio.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "specificVolumeMeasure")]
		[XmlElement("ratioMixWater")]
        public SpecificVolumeMeasure RatioMixWater {
            get {
                return ratioMixWaterField;
            } 
            set {
                ratioMixWaterField = value;
                NotifyPropertyChanged("RatioMixWater");
            }
        }

        private SpecificVolumeMeasure ratioMixWaterField; 

        /// <summary>
        /// Fluid/Slurry Volume. 
        /// </summary>
		[Description("Fluid/Slurry Volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volFluid")]
        public VolumeMeasure VolFluid {
            get {
                return volFluidField;
            } 
            set {
                volFluidField = value;
                NotifyPropertyChanged("VolFluid");
            }
        }

        private VolumeMeasure volFluidField; 

        /// <summary>
        /// Set of (Time / Rate / Back Pressure). 
        /// </summary>
		[Description("Set of (Time / Rate / Back Pressure).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_cementPumpSchedule")]
		[XmlElement("cementPumpSchedule")]
        public CementPumpSchedule CementPumpSchedule {
            get {
                return cementPumpScheduleField;
            } 
            set {
                cementPumpScheduleField = value;
                NotifyPropertyChanged("CementPumpSchedule");
            }
        }

        private CementPumpSchedule cementPumpScheduleField; 

        /// <summary>
        /// Excess Percent. 
        /// </summary>
		[Description("Excess Percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("excessPc")]
        public VolumePerVolumeMeasure ExcessPercent {
            get {
                return excessPcField;
            } 
            set {
                excessPcField = value;
                NotifyPropertyChanged("ExcessPercent");
            }
        }

        private VolumePerVolumeMeasure excessPcField; 

        /// <summary>
        /// Slurry Yield. 
        /// </summary>
		[Description("Slurry Yield.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "specificVolumeMeasure")]
		[XmlElement("volYield")]
        public SpecificVolumeMeasure VolYield {
            get {
                return volYieldField;
            } 
            set {
                volYieldField = value;
                NotifyPropertyChanged("VolYield");
            }
        }

        private SpecificVolumeMeasure volYieldField; 

        /// <summary>
        /// Fluid density. 
        /// </summary>
		[Description("Fluid density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// Equals 1 - Porosity. 
        /// </summary>
		[Description("Equals 1 - Porosity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("solidVolumeFraction")]
        public VolumePerVolumeMeasure SolidVolumeFraction {
            get {
                return solidVolumeFractionField;
            } 
            set {
                solidVolumeFractionField = value;
                NotifyPropertyChanged("SolidVolumeFraction");
            }
        }

        private VolumePerVolumeMeasure solidVolumeFractionField; 

        /// <summary>
        /// Volume Pumped. 
        /// </summary>
		[Description("Volume Pumped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volPumped")]
        public VolumeMeasure VolPumped {
            get {
                return volPumpedField;
            } 
            set {
                volPumpedField = value;
                NotifyPropertyChanged("VolPumped");
            }
        }

        private VolumeMeasure volPumpedField; 

        /// <summary>
        /// Other Volume. 
        /// </summary>
		[Description("Other Volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volOther")]
        public VolumeMeasure VolOther {
            get {
                return volOtherField;
            } 
            set {
                volOtherField = value;
                NotifyPropertyChanged("VolOther");
            }
        }

        private VolumeMeasure volOtherField; 

        /// <summary>
        /// Newtonian/Bingham/Power Law/Herschel Bulkley. 
        /// </summary>
		[StringLength(16)]
        [Description("Newtonian/Bingham/Power Law/Herschel Bulkley.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("fluidRheologicalModel")]
        public string FluidRheologicalModel {
            get {
                return fluidRheologicalModelField;
            } 
            set {
                fluidRheologicalModelField = value;
                NotifyPropertyChanged("FluidRheologicalModel");
            }
        }

        private string fluidRheologicalModelField; 

        /// <summary>
        /// Viscosity (Newtonian) or Plastic Viscosity if Bingham. 
        /// </summary>
		[Description("Viscosity (Newtonian) or Plastic Viscosity if Bingham.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("vis")]
        public DynamicViscosityMeasure Vis {
            get {
                return visField;
            } 
            set {
                visField = value;
                NotifyPropertyChanged("Vis");
            }
        }

        private DynamicViscosityMeasure visField; 

        /// <summary>
        /// Yield point (Bingham and Herschel Bulkley models). 
        /// </summary>
		[Description("Yield point (Bingham and Herschel Bulkley models).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("yp")]
        public PressureMeasure YP {
            get {
                return ypField;
            } 
            set {
                ypField = value;
                NotifyPropertyChanged("YP");
            }
        }

        private PressureMeasure ypField; 

        /// <summary>
        /// Power Law index (Power Law and HB). 
        /// </summary>
		[Description("Power Law index (Power Law and HB).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("n")]
        public DimensionlessMeasure N {
            get {
                return nField;
            } 
            set {
                nField = value;
                NotifyPropertyChanged("N");
            }
        }

        private DimensionlessMeasure nField; 

        /// <summary>
        /// Consistency index (Power Law and HB). 
        /// </summary>
		[Description("Consistency index (Power Law and HB).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("k")]
        public DimensionlessMeasure K {
            get {
                return kField;
            } 
            set {
                kField = value;
                NotifyPropertyChanged("K");
            }
        }

        private DimensionlessMeasure kField; 

        /// <summary>
        /// Gel reading after 10 seconds. 
        /// </summary>
		[Description("Gel reading after 10 seconds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("gel10SecReading")]
        public PlaneAngleMeasure Gel10SecReading {
            get {
                return gel10SecReadingField;
            } 
            set {
                gel10SecReadingField = value;
                NotifyPropertyChanged("Gel10SecReading");
            }
        }

        private PlaneAngleMeasure gel10SecReadingField; 

        /// <summary>
        /// Gel strength after 10 seconds. 
        /// </summary>
		[Description("Gel strength after 10 seconds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("gel10SecStrength")]
        public PressureMeasure Gel10SecStrength {
            get {
                return gel10SecStrengthField;
            } 
            set {
                gel10SecStrengthField = value;
                NotifyPropertyChanged("Gel10SecStrength");
            }
        }

        private PressureMeasure gel10SecStrengthField; 

        /// <summary>
        /// Gel reading after 1 minute. 
        /// </summary>
		[Description("Gel reading after 1 minute.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("gel1MinReading")]
        public PlaneAngleMeasure Gel1MinReading {
            get {
                return gel1MinReadingField;
            } 
            set {
                gel1MinReadingField = value;
                NotifyPropertyChanged("Gel1MinReading");
            }
        }

        private PlaneAngleMeasure gel1MinReadingField; 

        /// <summary>
        /// Gel strength after 1 minute. 
        /// </summary>
		[Description("Gel strength after 1 minute.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("gel1MinStrength")]
        public PressureMeasure Gel1MinStrength {
            get {
                return gel1MinStrengthField;
            } 
            set {
                gel1MinStrengthField = value;
                NotifyPropertyChanged("Gel1MinStrength");
            }
        }

        private PressureMeasure gel1MinStrengthField; 

        /// <summary>
        /// Gel reading after 10 minutes. 
        /// </summary>
		[Description("Gel reading after 10 minutes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("gel10MinReading")]
        public PlaneAngleMeasure Gel10MinReading {
            get {
                return gel10MinReadingField;
            } 
            set {
                gel10MinReadingField = value;
                NotifyPropertyChanged("Gel10MinReading");
            }
        }

        private PlaneAngleMeasure gel10MinReadingField; 

        /// <summary>
        /// Gel strength after 10 minutes. 
        /// </summary>
		[Description("Gel strength after 10 minutes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("gel10MinStrength")]
        public PressureMeasure Gel10MinStrength {
            get {
                return gel10MinStrengthField;
            } 
            set {
                gel10MinStrengthField = value;
                NotifyPropertyChanged("Gel10MinStrength");
            }
        }

        private PressureMeasure gel10MinStrengthField; 

        /// <summary>
        /// Type of base fluid: Fresh water, Sea water, Brine, Brackish water. 
        /// </summary>
		[StringLength(16)]
        [Description("Type of base fluid: Fresh water, Sea water, Brine, Brackish water.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
		[XmlElement("typeBaseFluid")]
        public string TypeBaseFluid {
            get {
                return typeBaseFluidField;
            } 
            set {
                typeBaseFluidField = value;
                NotifyPropertyChanged("TypeBaseFluid");
            }
        }

        private string typeBaseFluidField; 

        /// <summary>
        /// Density of base fluid. 
        /// </summary>
		[Description("Density of base fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densBaseFluid")]
        public DensityMeasure DensBaseFluid {
            get {
                return densBaseFluidField;
            } 
            set {
                densBaseFluidField = value;
                NotifyPropertyChanged("DensBaseFluid");
            }
        }

        private DensityMeasure densBaseFluidField; 

        /// <summary>
        /// Name of dry blend. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of dry blend.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("dryBlendName")]
        public string DryBlendName {
            get {
                return dryBlendNameField;
            } 
            set {
                dryBlendNameField = value;
                NotifyPropertyChanged("DryBlendName");
            }
        }

        private string dryBlendNameField; 

        /// <summary>
        /// Description of dry blend. 
        /// </summary>
		[StringLength(64)]
        [Description("Description of dry blend.")]
        [EnergisticsDataTypeAttribute(DataType = "shortDescriptionString")]
		[XmlElement("dryBlendDescription")]
        public string DryBlendDescription {
            get {
                return dryBlendDescriptionField;
            } 
            set {
                dryBlendDescriptionField = value;
                NotifyPropertyChanged("DryBlendDescription");
            }
        }

        private string dryBlendDescriptionField; 

        /// <summary>
        /// Mass of dry blend: the blend is made of different solid additives: the volume is not constant. 
        /// </summary>
		[Description("Mass of dry blend: the blend is made of different solid additives: the volume is not constant.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("massDryBlend")]
        public MassMeasure MassDryBlend {
            get {
                return massDryBlendField;
            } 
            set {
                massDryBlendField = value;
                NotifyPropertyChanged("MassDryBlend");
            }
        }

        private MassMeasure massDryBlendField; 

        /// <summary>
        /// Density of Dry blend. 
        /// </summary>
		[Description("Density of Dry blend.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densDryBlend")]
        public DensityMeasure DensDryBlend {
            get {
                return densDryBlendField;
            } 
            set {
                densDryBlendField = value;
                NotifyPropertyChanged("DensDryBlend");
            }
        }

        private DensityMeasure densDryBlendField; 

        /// <summary>
        /// Weight of a sack of dry blend. 
        /// </summary>
		[Description("Weight of a sack of dry blend.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("massSackDryBlend")]
        public MassMeasure MassSackDryBlend {
            get {
                return massSackDryBlendField;
            } 
            set {
                massSackDryBlendField = value;
                NotifyPropertyChanged("MassSackDryBlend");
            }
        }

        private MassMeasure massSackDryBlendField; 

        /// <summary>
        /// Additives can be added in slurry but also in spacers, washes, mud. 
        /// </summary>
		[Description("Additives can be added in slurry but also in spacers, washes, mud.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_cementAdditive")]
		[XmlElement("cementAdditive")]
        public List<CementAdditive> CementAdditive {
            get {
                return cementAdditiveField;
            } 
            set {
                cementAdditiveField = value;
                NotifyPropertyChanged("CementAdditive");
            }
        }

         /// <summary>
         /// bool to indicate if CementAdditive has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CementAdditiveSpecified
         {
             get {
             if(cementAdditiveField!=null)
                 return cementAdditiveField.Count>0?true:false;
             else return false;
             }
         }
        private List<CementAdditive> cementAdditiveField; 

        /// <summary>
        /// Foam used indicator. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Foam used indicator.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("foamUsed")]
        public bool? FoamUsed {
            get {
                return foamUsedField;
            } 
            set {
                foamUsedField = value;
                 this.FoamUsedSpecified = true;
                NotifyPropertyChanged("FoamUsed");
            }
        }

        private bool? foamUsedField; 

        /// <summary>
        /// foamUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FoamUsedSpecified {
            get {
                return foamUsedSpecifiedField;
            } 
            set {
                foamUsedSpecifiedField = value;
                NotifyPropertyChanged("FoamUsedSpecified");
            }
        }

        private bool foamUsedSpecifiedField; 

        /// <summary>
        /// Gas type used for foam job. 
        /// </summary>
		[StringLength(32)]
        [Description("Gas type used for foam job.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typeGasFoam")]
        public string TypeGasFoam {
            get {
                return typeGasFoamField;
            } 
            set {
                typeGasFoamField = value;
                NotifyPropertyChanged("TypeGasFoam");
            }
        }

        private string typeGasFoamField; 

        /// <summary>
        /// Volume of gas used for foam job. 
        /// </summary>
		[Description("Volume of gas used for foam job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volGasFoam")]
        public VolumeMeasure VolGasFoam {
            get {
                return volGasFoamField;
            } 
            set {
                volGasFoamField = value;
                NotifyPropertyChanged("VolGasFoam");
            }
        }

        private VolumeMeasure volGasFoamField; 

        /// <summary>
        /// Constant gas ratio method ratio 
        /// </summary>
		[Description("Constant gas ratio method ratio")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ratioConstGasMethodAv")]
        public VolumePerVolumeMeasure RatioConstGasMethodAverage {
            get {
                return ratioConstGasMethodAvField;
            } 
            set {
                ratioConstGasMethodAvField = value;
                NotifyPropertyChanged("RatioConstGasMethodAverage");
            }
        }

        private VolumePerVolumeMeasure ratioConstGasMethodAvField; 

        /// <summary>
        /// Constant gas ratio method average density. 
        /// </summary>
		[Description("Constant gas ratio method average density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densConstGasMethod")]
        public DensityMeasure DensConstGasMethod {
            get {
                return densConstGasMethodField;
            } 
            set {
                densConstGasMethodField = value;
                NotifyPropertyChanged("DensConstGasMethod");
            }
        }

        private DensityMeasure densConstGasMethodField; 

        /// <summary>
        /// Constant gas ratio method initial method ratio. 
        /// </summary>
		[Description("Constant gas ratio method initial method ratio.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ratioConstGasMethodStart")]
        public VolumePerVolumeMeasure RatioConstGasMethodStart {
            get {
                return ratioConstGasMethodStartField;
            } 
            set {
                ratioConstGasMethodStartField = value;
                NotifyPropertyChanged("RatioConstGasMethodStart");
            }
        }

        private VolumePerVolumeMeasure ratioConstGasMethodStartField; 

        /// <summary>
        /// Constant gas ratio method final method ratio. 
        /// </summary>
		[Description("Constant gas ratio method final method ratio.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("ratioConstGasMethodEnd")]
        public VolumePerVolumeMeasure RatioConstGasMethodEnd {
            get {
                return ratioConstGasMethodEndField;
            } 
            set {
                ratioConstGasMethodEndField = value;
                NotifyPropertyChanged("RatioConstGasMethodEnd");
            }
        }

        private VolumePerVolumeMeasure ratioConstGasMethodEndField; 

        /// <summary>
        /// Constant gas ratio method average density. 
        /// </summary>
		[Description("Constant gas ratio method average density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densConstGasFoam")]
        public DensityMeasure DensConstGasFoam {
            get {
                return densConstGasFoamField;
            } 
            set {
                densConstGasFoamField = value;
                NotifyPropertyChanged("DensConstGasFoam");
            }
        }

        private DensityMeasure densConstGasFoamField; 

        /// <summary>
        /// Test thickening time. 
        /// </summary>
		[Description("Test thickening time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimThickening")]
        public TimeMeasure ETimeThickening {
            get {
                return eTimThickeningField;
            } 
            set {
                eTimThickeningField = value;
                NotifyPropertyChanged("ETimeThickening");
            }
        }

        private TimeMeasure eTimThickeningField; 

        /// <summary>
        /// Test thickening temperature. 
        /// </summary>
		[Description("Test thickening temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempThickening")]
        public ThermodynamicTemperatureMeasure TempThickening {
            get {
                return tempThickeningField;
            } 
            set {
                tempThickeningField = value;
                NotifyPropertyChanged("TempThickening");
            }
        }

        private ThermodynamicTemperatureMeasure tempThickeningField; 

        /// <summary>
        /// Test thickening pressure. 
        /// </summary>
		[Description("Test thickening pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presTestThickening")]
        public PressureMeasure PresTestThickening {
            get {
                return presTestThickeningField;
            } 
            set {
                presTestThickeningField = value;
                NotifyPropertyChanged("PresTestThickening");
            }
        }

        private PressureMeasure presTestThickeningField; 

        /// <summary>
        /// Test thickening consistency/slurry viscosity - Bearden Consistency (Bc) 0 to 100. 
        /// </summary>
		[Description("Test thickening consistency/slurry viscosity - Bearden Consistency (Bc) 0 to 100.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("consTestThickening")]
        public DimensionlessMeasure ConsTestThickening {
            get {
                return consTestThickeningField;
            } 
            set {
                consTestThickeningField = value;
                NotifyPropertyChanged("ConsTestThickening");
            }
        }

        private DimensionlessMeasure consTestThickeningField; 

        /// <summary>
        /// Test free water na: = mL/250ML. 
        /// </summary>
		[Description("Test free water na: = mL/250ML.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("pcFreeWater")]
        public VolumePerVolumeMeasure PercentFreeWater {
            get {
                return pcFreeWaterField;
            } 
            set {
                pcFreeWaterField = value;
                NotifyPropertyChanged("PercentFreeWater");
            }
        }

        private VolumePerVolumeMeasure pcFreeWaterField; 

        /// <summary>
        /// Test free water temperature. 
        /// </summary>
		[Description("Test free water temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempFreeWater")]
        public ThermodynamicTemperatureMeasure TempFreeWater {
            get {
                return tempFreeWaterField;
            } 
            set {
                tempFreeWaterField = value;
                NotifyPropertyChanged("TempFreeWater");
            }
        }

        private ThermodynamicTemperatureMeasure tempFreeWaterField; 

        /// <summary>
        /// Test fluid loss. 
        /// </summary>
		[Description("Test fluid loss.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volTestFluidLoss")]
        public VolumeMeasure VolTestFluidLoss {
            get {
                return volTestFluidLossField;
            } 
            set {
                volTestFluidLossField = value;
                NotifyPropertyChanged("VolTestFluidLoss");
            }
        }

        private VolumeMeasure volTestFluidLossField; 

        /// <summary>
        /// Test fluid loss temperature. 
        /// </summary>
		[Description("Test fluid loss temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempFluidLoss")]
        public ThermodynamicTemperatureMeasure TempFluidLoss {
            get {
                return tempFluidLossField;
            } 
            set {
                tempFluidLossField = value;
                NotifyPropertyChanged("TempFluidLoss");
            }
        }

        private ThermodynamicTemperatureMeasure tempFluidLossField; 

        /// <summary>
        /// Test Fluid loss pressure. 
        /// </summary>
		[Description("Test Fluid loss pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presTestFluidLoss")]
        public PressureMeasure PresTestFluidLoss {
            get {
                return presTestFluidLossField;
            } 
            set {
                presTestFluidLossField = value;
                NotifyPropertyChanged("PresTestFluidLoss");
            }
        }

        private PressureMeasure presTestFluidLossField; 

        /// <summary>
        /// Test Fluid loss: dehydrating test period, used to compute the API Fluid Loss. 
        /// </summary>
		[Description("Test Fluid loss: dehydrating test period, used to compute the API Fluid Loss.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("timeFluidLoss")]
        public TimeMeasure TimeFluidLoss {
            get {
                return timeFluidLossField;
            } 
            set {
                timeFluidLossField = value;
                NotifyPropertyChanged("TimeFluidLoss");
            }
        }

        private TimeMeasure timeFluidLossField; 

        /// <summary>
        /// API Fluid Loss = 2 * volTestFluidLoss * SQRT(30/timefluidloss). 
        /// </summary>
		[Description("API Fluid Loss = 2 * volTestFluidLoss * SQRT(30/timefluidloss).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volAPIFluidLoss")]
        public VolumeMeasure VolAPIFluidLoss {
            get {
                return volAPIFluidLossField;
            } 
            set {
                volAPIFluidLossField = value;
                NotifyPropertyChanged("VolAPIFluidLoss");
            }
        }

        private VolumeMeasure volAPIFluidLossField; 

        /// <summary>
        /// Compressive strength time 1. 
        /// </summary>
		[Description("Compressive strength time 1.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimComprStren1")]
        public TimeMeasure ETimeComprStren1 {
            get {
                return eTimComprStren1Field;
            } 
            set {
                eTimComprStren1Field = value;
                NotifyPropertyChanged("ETimeComprStren1");
            }
        }

        private TimeMeasure eTimComprStren1Field; 

        /// <summary>
        /// Compressive strength time 2. 
        /// </summary>
		[Description("Compressive strength time 2.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimComprStren2")]
        public TimeMeasure ETimeComprStren2 {
            get {
                return eTimComprStren2Field;
            } 
            set {
                eTimComprStren2Field = value;
                NotifyPropertyChanged("ETimeComprStren2");
            }
        }

        private TimeMeasure eTimComprStren2Field; 

        /// <summary>
        /// Compressive strength pressure 1. 
        /// </summary>
		[Description("Compressive strength pressure 1.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presComprStren1")]
        public PressureMeasure PresComprStren1 {
            get {
                return presComprStren1Field;
            } 
            set {
                presComprStren1Field = value;
                NotifyPropertyChanged("PresComprStren1");
            }
        }

        private PressureMeasure presComprStren1Field; 

        /// <summary>
        /// Compressive strength pressure 2. 
        /// </summary>
		[Description("Compressive strength pressure 2.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presComprStren2")]
        public PressureMeasure PresComprStren2 {
            get {
                return presComprStren2Field;
            } 
            set {
                presComprStren2Field = value;
                NotifyPropertyChanged("PresComprStren2");
            }
        }

        private PressureMeasure presComprStren2Field; 

        /// <summary>
        /// Compressive strength temperature 1. 
        /// </summary>
		[Description("Compressive strength temperature 1.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempComprStren1")]
        public ThermodynamicTemperatureMeasure TempComprStren1 {
            get {
                return tempComprStren1Field;
            } 
            set {
                tempComprStren1Field = value;
                NotifyPropertyChanged("TempComprStren1");
            }
        }

        private ThermodynamicTemperatureMeasure tempComprStren1Field; 

        /// <summary>
        /// Compressive strength temperature 2. 
        /// </summary>
		[Description("Compressive strength temperature 2.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempComprStren2")]
        public ThermodynamicTemperatureMeasure TempComprStren2 {
            get {
                return tempComprStren2Field;
            } 
            set {
                tempComprStren2Field = value;
                NotifyPropertyChanged("TempComprStren2");
            }
        }

        private ThermodynamicTemperatureMeasure tempComprStren2Field; 

        /// <summary>
        /// Slurry density at pressure. 
        /// </summary>
		[Description("Slurry density at pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densAtPres")]
        public DensityMeasure DensAtPres {
            get {
                return densAtPresField;
            } 
            set {
                densAtPresField = value;
                NotifyPropertyChanged("DensAtPres");
            }
        }

        private DensityMeasure densAtPresField; 

        /// <summary>
        /// Volume reserved. 
        /// </summary>
		[Description("Volume reserved.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volReserved")]
        public VolumeMeasure VolReserved {
            get {
                return volReservedField;
            } 
            set {
                volReservedField = value;
                NotifyPropertyChanged("VolReserved");
            }
        }

        private VolumeMeasure volReservedField; 

        /// <summary>
        /// Total Slurry Volume. 
        /// </summary>
		[Description("Total Slurry Volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volTotSlurry")]
        public VolumeMeasure VolTotSlurry {
            get {
                return volTotSlurryField;
            } 
            set {
                volTotSlurryField = value;
                NotifyPropertyChanged("VolTotSlurry");
            }
        }

        private VolumeMeasure volTotSlurryField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Cement Stage Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementStage", Namespace="http://www.witsml.org/schemas/1series")]
	[Description(" WITSML - Cement Stage Component Schema ")]
    public partial class CementStage : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Stage number. 
        /// </summary>
		[Required]
        [Description("Stage number.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("numStage")]
        public short? NumStage {
            get {
                return numStageField;
            } 
            set {
                numStageField = value;
                NotifyPropertyChanged("NumStage");
            }
        }

        private short? numStageField; 

        /// <summary>
        /// Stage type. 
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("Stage type.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typeStage")]
        public string TypeStage {
            get {
                return typeStageField;
            } 
            set {
                typeStageField = value;
                NotifyPropertyChanged("TypeStage");
            }
        }

        private string typeStageField; 

        /// <summary>
        /// Date and time when mixing started. 
        /// </summary>
		[Description("Date and time when mixing started.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimMixStart")]
        public Timestamp? DateTimeMixStart {
            get {
                return dTimMixStartField;
            } 
            set {
                dTimMixStartField = value;
                 this.DateTimeMixStartSpecified = true;
                NotifyPropertyChanged("DateTimeMixStart");
            }
        }

        private Timestamp? dTimMixStartField; 

        /// <summary>
        /// dTimMixStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeMixStartSpecified {
            get {
                return dTimMixStartSpecifiedField;
            } 
            set {
                dTimMixStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeMixStartSpecified");
            }
        }

        private bool dTimMixStartSpecifiedField; 

        /// <summary>
        /// Datetime at start of pumping cement. 
        /// </summary>
		[Description("Datetime at start of pumping cement.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimPumpStart")]
        public Timestamp? DateTimePumpStart {
            get {
                return dTimPumpStartField;
            } 
            set {
                dTimPumpStartField = value;
                 this.DateTimePumpStartSpecified = true;
                NotifyPropertyChanged("DateTimePumpStart");
            }
        }

        private Timestamp? dTimPumpStartField; 

        /// <summary>
        /// dTimPumpStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePumpStartSpecified {
            get {
                return dTimPumpStartSpecifiedField;
            } 
            set {
                dTimPumpStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimePumpStartSpecified");
            }
        }

        private bool dTimPumpStartSpecifiedField; 

        /// <summary>
        /// Datetime at end of pumping cement. 
        /// </summary>
		[Description("Datetime at end of pumping cement.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimPumpEnd")]
        public Timestamp? DateTimePumpEnd {
            get {
                return dTimPumpEndField;
            } 
            set {
                dTimPumpEndField = value;
                 this.DateTimePumpEndSpecified = true;
                NotifyPropertyChanged("DateTimePumpEnd");
            }
        }

        private Timestamp? dTimPumpEndField; 

        /// <summary>
        /// dTimPumpEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePumpEndSpecified {
            get {
                return dTimPumpEndSpecifiedField;
            } 
            set {
                dTimPumpEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimePumpEndSpecified");
            }
        }

        private bool dTimPumpEndSpecifiedField; 

        /// <summary>
        /// Date and time when displacing cement started. 
        /// </summary>
		[Description("Date and time when displacing cement started.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimDisplaceStart")]
        public Timestamp? DateTimeDisplaceStart {
            get {
                return dTimDisplaceStartField;
            } 
            set {
                dTimDisplaceStartField = value;
                 this.DateTimeDisplaceStartSpecified = true;
                NotifyPropertyChanged("DateTimeDisplaceStart");
            }
        }

        private Timestamp? dTimDisplaceStartField; 

        /// <summary>
        /// dTimDisplaceStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeDisplaceStartSpecified {
            get {
                return dTimDisplaceStartSpecifiedField;
            } 
            set {
                dTimDisplaceStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeDisplaceStartSpecified");
            }
        }

        private bool dTimDisplaceStartSpecifiedField; 

        /// <summary>
        /// Measured depth at top of interval. 
        /// </summary>
		[Description("Measured depth at top of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Measured depth of base of cement. 
        /// </summary>
		[Description("Measured depth of base of cement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// Excess volume. 
        /// </summary>
		[Description("Excess volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volExcess")]
        public VolumeMeasure VolExcess {
            get {
                return volExcessField;
            } 
            set {
                volExcessField = value;
                NotifyPropertyChanged("VolExcess");
            }
        }

        private VolumeMeasure volExcessField; 

        /// <summary>
        /// Average displacement rate. 
        /// </summary>
		[Description("Average displacement rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateDisplaceAv")]
        public VolumeFlowRateMeasure FlowrateDisplaceAverage {
            get {
                return flowrateDisplaceAvField;
            } 
            set {
                flowrateDisplaceAvField = value;
                NotifyPropertyChanged("FlowrateDisplaceAverage");
            }
        }

        private VolumeFlowRateMeasure flowrateDisplaceAvField; 

        /// <summary>
        /// Maximum displacement rate. 
        /// </summary>
		[Description("Maximum displacement rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateDisplaceMx")]
        public VolumeFlowRateMeasure FlowrateDisplaceMax {
            get {
                return flowrateDisplaceMxField;
            } 
            set {
                flowrateDisplaceMxField = value;
                NotifyPropertyChanged("FlowrateDisplaceMax");
            }
        }

        private VolumeFlowRateMeasure flowrateDisplaceMxField; 

        /// <summary>
        /// Final displacement pressure. 
        /// </summary>
		[Description("Final displacement pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presDisplace")]
        public PressureMeasure PresDisplace {
            get {
                return presDisplaceField;
            } 
            set {
                presDisplaceField = value;
                NotifyPropertyChanged("PresDisplace");
            }
        }

        private PressureMeasure presDisplaceField; 

        /// <summary>
        /// Volume of returns. 
        /// </summary>
		[Description("Volume of returns.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volReturns")]
        public VolumeMeasure VolReturns {
            get {
                return volReturnsField;
            } 
            set {
                volReturnsField = value;
                NotifyPropertyChanged("VolReturns");
            }
        }

        private VolumeMeasure volReturnsField; 

        /// <summary>
        /// Mud circulation elapsed time before the job. 
        /// </summary>
		[Description("Mud circulation elapsed time before the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimMudCirculation")]
        public TimeMeasure ETimeMudCirculation {
            get {
                return eTimMudCirculationField;
            } 
            set {
                eTimMudCirculationField = value;
                NotifyPropertyChanged("ETimeMudCirculation");
            }
        }

        private TimeMeasure eTimMudCirculationField; 

        /// <summary>
        /// Rate mud circulated during stage. 
        /// </summary>
		[Description("Rate mud circulated during stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateMudCirc")]
        public VolumeFlowRateMeasure FlowrateMudCirc {
            get {
                return flowrateMudCircField;
            } 
            set {
                flowrateMudCircField = value;
                NotifyPropertyChanged("FlowrateMudCirc");
            }
        }

        private VolumeFlowRateMeasure flowrateMudCircField; 

        /// <summary>
        /// Mud circulation pressure. 
        /// </summary>
		[Description("Mud circulation pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presMudCirc")]
        public PressureMeasure PresMudCirc {
            get {
                return presMudCircField;
            } 
            set {
                presMudCircField = value;
                NotifyPropertyChanged("PresMudCirc");
            }
        }

        private PressureMeasure presMudCircField; 

        /// <summary>
        /// Final displacement pump rate. 
        /// </summary>
		[Description("Final displacement pump rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateEnd")]
        public VolumeFlowRateMeasure FlowrateEnd {
            get {
                return flowrateEndField;
            } 
            set {
                flowrateEndField = value;
                NotifyPropertyChanged("FlowrateEnd");
            }
        }

        private VolumeFlowRateMeasure flowrateEndField; 

        /// <summary>
        /// Displaced Mud, washes and spacers, cements, displacement mud. 
        /// </summary>
		[Description("Displaced Mud, washes and spacers, cements, displacement mud.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_cementingFluid")]
		[XmlElement("cementingFluid")]
        public CementingFluid CementingFluid {
            get {
                return cementingFluidField;
            } 
            set {
                cementingFluidField = value;
                NotifyPropertyChanged("CementingFluid");
            }
        }

        private CementingFluid cementingFluidField; 

        /// <summary>
        /// Annular flow at the end of displacement. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Annular flow at the end of displacement.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("afterFlowAnn")]
        public bool? AfterFlowAnn {
            get {
                return afterFlowAnnField;
            } 
            set {
                afterFlowAnnField = value;
                 this.AfterFlowAnnSpecified = true;
                NotifyPropertyChanged("AfterFlowAnn");
            }
        }

        private bool? afterFlowAnnField; 

        /// <summary>
        /// afterFlowAnnSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AfterFlowAnnSpecified {
            get {
                return afterFlowAnnSpecifiedField;
            } 
            set {
                afterFlowAnnSpecifiedField = value;
                NotifyPropertyChanged("AfterFlowAnnSpecified");
            }
        }

        private bool afterFlowAnnSpecifiedField; 

        /// <summary>
        /// Squeeze objective. 
        /// </summary>
		[StringLength(32)]
        [Description("Squeeze objective.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("squeezeObj")]
        public string SqueezeObj {
            get {
                return squeezeObjField;
            } 
            set {
                squeezeObjField = value;
                NotifyPropertyChanged("SqueezeObj");
            }
        }

        private string squeezeObjField; 

        /// <summary>
        /// Squeeze obtained. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Squeeze obtained.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("squeezeObtained")]
        public bool? SqueezeObtained {
            get {
                return squeezeObtainedField;
            } 
            set {
                squeezeObtainedField = value;
                 this.SqueezeObtainedSpecified = true;
                NotifyPropertyChanged("SqueezeObtained");
            }
        }

        private bool? squeezeObtainedField; 

        /// <summary>
        /// squeezeObtainedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SqueezeObtainedSpecified {
            get {
                return squeezeObtainedSpecifiedField;
            } 
            set {
                squeezeObtainedSpecifiedField = value;
                NotifyPropertyChanged("SqueezeObtainedSpecified");
            }
        }

        private bool squeezeObtainedSpecifiedField; 

        /// <summary>
        /// Measured depth of string (multi-stage cement job). 
        /// </summary>
		[Description("Measured depth of string (multi-stage cement job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdString")]
        public MeasuredDepthCoord MDString {
            get {
                return mdStringField;
            } 
            set {
                mdStringField = value;
                NotifyPropertyChanged("MDString");
            }
        }

        private MeasuredDepthCoord mdStringField; 

        /// <summary>
        /// Measured depth of tool (multi-stage cement job. 
        /// </summary>
		[Description("Measured depth of tool (multi-stage cement job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTool")]
        public MeasuredDepthCoord MDTool {
            get {
                return mdToolField;
            } 
            set {
                mdToolField = value;
                NotifyPropertyChanged("MDTool");
            }
        }

        private MeasuredDepthCoord mdToolField; 

        /// <summary>
        /// Measured depth of CoilTubing (multi-stage cement job. 
        /// </summary>
		[Description("Measured depth of CoilTubing (multi-stage cement job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdCoilTbg")]
        public MeasuredDepthCoord MDCoilTbg {
            get {
                return mdCoilTbgField;
            } 
            set {
                mdCoilTbgField = value;
                NotifyPropertyChanged("MDCoilTbg");
            }
        }

        private MeasuredDepthCoord mdCoilTbgField; 

        /// <summary>
        /// Total volume inside casing. 
        /// </summary>
		[Description("Total volume inside casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volCsgIn")]
        public VolumeMeasure VolCsgIn {
            get {
                return volCsgInField;
            } 
            set {
                volCsgInField = value;
                NotifyPropertyChanged("VolCsgIn");
            }
        }

        private VolumeMeasure volCsgInField; 

        /// <summary>
        /// Total volume outside casing for this stage placement. 
        /// </summary>
		[Description("Total volume outside casing for this stage placement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volCsgOut")]
        public VolumeMeasure VolCsgOut {
            get {
                return volCsgOutField;
            } 
            set {
                volCsgOutField = value;
                NotifyPropertyChanged("VolCsgOut");
            }
        }

        private VolumeMeasure volCsgOutField; 

        /// <summary>
        /// Tail pipe used? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Tail pipe used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("tailPipeUsed")]
        public bool? TailPipeUsed {
            get {
                return tailPipeUsedField;
            } 
            set {
                tailPipeUsedField = value;
                 this.TailPipeUsedSpecified = true;
                NotifyPropertyChanged("TailPipeUsed");
            }
        }

        private bool? tailPipeUsedField; 

        /// <summary>
        /// tailPipeUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TailPipeUsedSpecified {
            get {
                return tailPipeUsedSpecifiedField;
            } 
            set {
                tailPipeUsedSpecifiedField = value;
                NotifyPropertyChanged("TailPipeUsedSpecified");
            }
        }

        private bool tailPipeUsedSpecifiedField; 

        /// <summary>
        /// Tail pipe size (diameter). 
        /// </summary>
		[Description("Tail pipe size (diameter).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaTailPipe")]
        public LengthMeasure DiaTailPipe {
            get {
                return diaTailPipeField;
            } 
            set {
                diaTailPipeField = value;
                NotifyPropertyChanged("DiaTailPipe");
            }
        }

        private LengthMeasure diaTailPipeField; 

        /// <summary>
        /// Tail pipe perforated? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Tail pipe perforated?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("tailPipePerf")]
        public bool? TailPipePerf {
            get {
                return tailPipePerfField;
            } 
            set {
                tailPipePerfField = value;
                 this.TailPipePerfSpecified = true;
                NotifyPropertyChanged("TailPipePerf");
            }
        }

        private bool? tailPipePerfField; 

        /// <summary>
        /// tailPipePerfSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TailPipePerfSpecified {
            get {
                return tailPipePerfSpecifiedField;
            } 
            set {
                tailPipePerfSpecifiedField = value;
                NotifyPropertyChanged("TailPipePerfSpecified");
            }
        }

        private bool tailPipePerfSpecifiedField; 

        /// <summary>
        /// Tubing pressure at start of job (not coiled tubing). 
        /// </summary>
		[Description("Tubing pressure at start of job (not coiled tubing).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presTbgStart")]
        public PressureMeasure PresTbgStart {
            get {
                return presTbgStartField;
            } 
            set {
                presTbgStartField = value;
                NotifyPropertyChanged("PresTbgStart");
            }
        }

        private PressureMeasure presTbgStartField; 

        /// <summary>
        /// Tubing pressure at end of job. 
        /// </summary>
		[Description("Tubing pressure at end of job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presTbgEnd")]
        public PressureMeasure PresTbgEnd {
            get {
                return presTbgEndField;
            } 
            set {
                presTbgEndField = value;
                NotifyPropertyChanged("PresTbgEnd");
            }
        }

        private PressureMeasure presTbgEndField; 

        /// <summary>
        /// Casing pressure at start of job. 
        /// </summary>
		[Description("Casing pressure at start of job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presCsgStart")]
        public PressureMeasure PresCsgStart {
            get {
                return presCsgStartField;
            } 
            set {
                presCsgStartField = value;
                NotifyPropertyChanged("PresCsgStart");
            }
        }

        private PressureMeasure presCsgStartField; 

        /// <summary>
        /// Casing pressure at end of job. 
        /// </summary>
		[Description("Casing pressure at end of job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presCsgEnd")]
        public PressureMeasure PresCsgEnd {
            get {
                return presCsgEndField;
            } 
            set {
                presCsgEndField = value;
                NotifyPropertyChanged("PresCsgEnd");
            }
        }

        private PressureMeasure presCsgEndField; 

        /// <summary>
        /// Constant back pressure applied while pumping the job (can be supersede by a back pressure per pumping stage) 
        /// </summary>
		[Description("Constant back pressure applied while pumping the job (can be supersede by a back pressure per pumping stage)")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presBackPressure")]
        public PressureMeasure PresBackPressure {
            get {
                return presBackPressureField;
            } 
            set {
                presBackPressureField = value;
                NotifyPropertyChanged("PresBackPressure");
            }
        }

        private PressureMeasure presBackPressureField; 

        /// <summary>
        /// Pressure CTU start. 
        /// </summary>
		[Description("Pressure CTU start.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presCoilTbgStart")]
        public PressureMeasure PresCoilTbgStart {
            get {
                return presCoilTbgStartField;
            } 
            set {
                presCoilTbgStartField = value;
                NotifyPropertyChanged("PresCoilTbgStart");
            }
        }

        private PressureMeasure presCoilTbgStartField; 

        /// <summary>
        /// Pressure CTU end 
        /// </summary>
		[Description("Pressure CTU end")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presCoilTbgEnd")]
        public PressureMeasure PresCoilTbgEnd {
            get {
                return presCoilTbgEndField;
            } 
            set {
                presCoilTbgEndField = value;
                NotifyPropertyChanged("PresCoilTbgEnd");
            }
        }

        private PressureMeasure presCoilTbgEndField; 

        /// <summary>
        /// Breakdown pressure. 
        /// </summary>
		[Description("Breakdown pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presBreakDown")]
        public PressureMeasure PresBreakDown {
            get {
                return presBreakDownField;
            } 
            set {
                presBreakDownField = value;
                NotifyPropertyChanged("PresBreakDown");
            }
        }

        private PressureMeasure presBreakDownField; 

        /// <summary>
        /// Breakdown rate. 
        /// </summary>
		[Description("Breakdown rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateBreakDown")]
        public VolumeFlowRateMeasure FlowrateBreakDown {
            get {
                return flowrateBreakDownField;
            } 
            set {
                flowrateBreakDownField = value;
                NotifyPropertyChanged("FlowrateBreakDown");
            }
        }

        private VolumeFlowRateMeasure flowrateBreakDownField; 

        /// <summary>
        /// Squeeze pressure average. 
        /// </summary>
		[Description("Squeeze pressure average.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presSqueezeAv")]
        public PressureMeasure PresSqueezeAverage {
            get {
                return presSqueezeAvField;
            } 
            set {
                presSqueezeAvField = value;
                NotifyPropertyChanged("PresSqueezeAverage");
            }
        }

        private PressureMeasure presSqueezeAvField; 

        /// <summary>
        /// Squeeze pressure final. 
        /// </summary>
		[Description("Squeeze pressure final.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presSqueezeEnd")]
        public PressureMeasure PresSqueezeEnd {
            get {
                return presSqueezeEndField;
            } 
            set {
                presSqueezeEndField = value;
                NotifyPropertyChanged("PresSqueezeEnd");
            }
        }

        private PressureMeasure presSqueezeEndField; 

        /// <summary>
        /// Squeeze pressure held. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Squeeze pressure held.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("presSqueezeHeld")]
        public bool? PresSqueezeHeld {
            get {
                return presSqueezeHeldField;
            } 
            set {
                presSqueezeHeldField = value;
                 this.PresSqueezeHeldSpecified = true;
                NotifyPropertyChanged("PresSqueezeHeld");
            }
        }

        private bool? presSqueezeHeldField; 

        /// <summary>
        /// presSqueezeHeldSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PresSqueezeHeldSpecified {
            get {
                return presSqueezeHeldSpecifiedField;
            } 
            set {
                presSqueezeHeldSpecifiedField = value;
                NotifyPropertyChanged("PresSqueezeHeldSpecified");
            }
        }

        private bool presSqueezeHeldSpecifiedField; 

        /// <summary>
        /// Squeeze pressure left on pipe. 
        /// </summary>
		[Description("Squeeze pressure left on pipe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presSqueeze")]
        public PressureMeasure PresSqueeze {
            get {
                return presSqueezeField;
            } 
            set {
                presSqueezeField = value;
                NotifyPropertyChanged("PresSqueeze");
            }
        }

        private PressureMeasure presSqueezeField; 

        /// <summary>
        /// Time pressure held. 
        /// </summary>
		[Description("Time pressure held.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("eTimPresHeld")]
        public TimeMeasure ETimePresHeld {
            get {
                return eTimPresHeldField;
            } 
            set {
                eTimPresHeldField = value;
                NotifyPropertyChanged("ETimePresHeld");
            }
        }

        private TimeMeasure eTimPresHeldField; 

        /// <summary>
        /// Squeeze job average rate. 
        /// </summary>
		[Description("Squeeze job average rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateSqueezeAv")]
        public VolumeFlowRateMeasure FlowrateSqueezeAverage {
            get {
                return flowrateSqueezeAvField;
            } 
            set {
                flowrateSqueezeAvField = value;
                NotifyPropertyChanged("FlowrateSqueezeAverage");
            }
        }

        private VolumeFlowRateMeasure flowrateSqueezeAvField; 

        /// <summary>
        /// Squeeze job maximum rate. 
        /// </summary>
		[Description("Squeeze job maximum rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateSqueezeMx")]
        public VolumeFlowRateMeasure FlowrateSqueezeMax {
            get {
                return flowrateSqueezeMxField;
            } 
            set {
                flowrateSqueezeMxField = value;
                NotifyPropertyChanged("FlowrateSqueezeMax");
            }
        }

        private VolumeFlowRateMeasure flowrateSqueezeMxField; 

        /// <summary>
        /// Pump rate at start of job. 
        /// </summary>
		[Description("Pump rate at start of job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowratePumpStart")]
        public VolumeFlowRateMeasure FlowratePumpStart {
            get {
                return flowratePumpStartField;
            } 
            set {
                flowratePumpStartField = value;
                NotifyPropertyChanged("FlowratePumpStart");
            }
        }

        private VolumeFlowRateMeasure flowratePumpStartField; 

        /// <summary>
        /// Pump rate at end of job. 
        /// </summary>
		[Description("Pump rate at end of job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowratePumpEnd")]
        public VolumeFlowRateMeasure FlowratePumpEnd {
            get {
                return flowratePumpEndField;
            } 
            set {
                flowratePumpEndField = value;
                NotifyPropertyChanged("FlowratePumpEnd");
            }
        }

        private VolumeFlowRateMeasure flowratePumpEndField; 

        /// <summary>
        /// Pill below plug. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Pill below plug.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("pillBelowPlug")]
        public bool? PillBelowPlug {
            get {
                return pillBelowPlugField;
            } 
            set {
                pillBelowPlugField = value;
                 this.PillBelowPlugSpecified = true;
                NotifyPropertyChanged("PillBelowPlug");
            }
        }

        private bool? pillBelowPlugField; 

        /// <summary>
        /// pillBelowPlugSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PillBelowPlugSpecified {
            get {
                return pillBelowPlugSpecifiedField;
            } 
            set {
                pillBelowPlugSpecifiedField = value;
                NotifyPropertyChanged("PillBelowPlugSpecified");
            }
        }

        private bool pillBelowPlugSpecifiedField; 

        /// <summary>
        /// Plug catcher. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Plug catcher.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("plugCatcher")]
        public bool? PlugCatcher {
            get {
                return plugCatcherField;
            } 
            set {
                plugCatcherField = value;
                 this.PlugCatcherSpecified = true;
                NotifyPropertyChanged("PlugCatcher");
            }
        }

        private bool? plugCatcherField; 

        /// <summary>
        /// plugCatcherSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PlugCatcherSpecified {
            get {
                return plugCatcherSpecifiedField;
            } 
            set {
                plugCatcherSpecifiedField = value;
                NotifyPropertyChanged("PlugCatcherSpecified");
            }
        }

        private bool plugCatcherSpecifiedField; 

        /// <summary>
        /// Circulate out measured depth. 
        /// </summary>
		[Description("Circulate out measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdCircOut")]
        public MeasuredDepthCoord MDCircOut {
            get {
                return mdCircOutField;
            } 
            set {
                mdCircOutField = value;
                NotifyPropertyChanged("MDCircOut");
            }
        }

        private MeasuredDepthCoord mdCircOutField; 

        /// <summary>
        /// Circulate prior to start of job. 
        /// </summary>
		[Description("Circulate prior to start of job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volCircPrior")]
        public VolumeMeasure VolCircPrior {
            get {
                return volCircPriorField;
            } 
            set {
                volCircPriorField = value;
                NotifyPropertyChanged("VolCircPrior");
            }
        }

        private VolumeMeasure volCircPriorField; 

        /// <summary>
        /// Type of mud in hole. 
        /// </summary>
		[StringLength(32)]
        [Description("Type of mud in hole.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typeOriginalMud")]
        public string TypeOriginalMud {
            get {
                return typeOriginalMudField;
            } 
            set {
                typeOriginalMudField = value;
                NotifyPropertyChanged("TypeOriginalMud");
            }
        }

        private string typeOriginalMudField; 

        /// <summary>
        /// Mud density. 
        /// </summary>
		[Description("Mud density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("wtMud")]
        public DensityMeasure WeightMud {
            get {
                return wtMudField;
            } 
            set {
                wtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private DensityMeasure wtMudField; 

        /// <summary>
        /// Funnel viscosity in seconds (in hole at start of job). 
        /// </summary>
		[Description("Funnel viscosity in seconds (in hole at start of job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("visFunnelMud")]
        public TimeMeasure VisFunnelMud {
            get {
                return visFunnelMudField;
            } 
            set {
                visFunnelMudField = value;
                NotifyPropertyChanged("VisFunnelMud");
            }
        }

        private TimeMeasure visFunnelMudField; 

        /// <summary>
        /// Plastic viscosity (in hole at start of job). 
        /// </summary>
		[Description("Plastic viscosity (in hole at start of job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("pvMud")]
        public DynamicViscosityMeasure PVMud {
            get {
                return pvMudField;
            } 
            set {
                pvMudField = value;
                NotifyPropertyChanged("PVMud");
            }
        }

        private DynamicViscosityMeasure pvMudField; 

        /// <summary>
        /// Yield point (in hole at start of job). 
        /// </summary>
		[Description("Yield point (in hole at start of job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("ypMud")]
        public PressureMeasure YPMud {
            get {
                return ypMudField;
            } 
            set {
                ypMudField = value;
                NotifyPropertyChanged("YPMud");
            }
        }

        private PressureMeasure ypMudField; 

        /// <summary>
        /// Gels-10Sec (in hole at start of job). 
        /// </summary>
		[Description("Gels-10Sec (in hole at start of job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("gel10Sec")]
        public PressureMeasure Gel10Sec {
            get {
                return gel10SecField;
            } 
            set {
                gel10SecField = value;
                NotifyPropertyChanged("Gel10Sec");
            }
        }

        private PressureMeasure gel10SecField; 

        /// <summary>
        /// Gels-10Min (in hole at start of job). 
        /// </summary>
		[Description("Gels-10Min (in hole at start of job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("gel10Min")]
        public PressureMeasure Gel10Min {
            get {
                return gel10MinField;
            } 
            set {
                gel10MinField = value;
                NotifyPropertyChanged("Gel10Min");
            }
        }

        private PressureMeasure gel10MinField; 

        /// <summary>
        /// Bottom hole circulating temperature. 
        /// </summary>
		[Description("Bottom hole circulating temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempBHCT")]
        public ThermodynamicTemperatureMeasure TempBHCT {
            get {
                return tempBHCTField;
            } 
            set {
                tempBHCTField = value;
                NotifyPropertyChanged("TempBHCT");
            }
        }

        private ThermodynamicTemperatureMeasure tempBHCTField; 

        /// <summary>
        /// Bottom hole temperature static. 
        /// </summary>
		[Description("Bottom hole temperature static.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempBHST")]
        public ThermodynamicTemperatureMeasure TempBHST {
            get {
                return tempBHSTField;
            } 
            set {
                tempBHSTField = value;
                NotifyPropertyChanged("TempBHST");
            }
        }

        private ThermodynamicTemperatureMeasure tempBHSTField; 

        /// <summary>
        /// Method to estimate excess volume. 
        /// </summary>
		[StringLength(32)]
        [Description("Method to estimate excess volume.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("volExcessMethod")]
        public string VolExcessMethod {
            get {
                return volExcessMethodField;
            } 
            set {
                volExcessMethodField = value;
                NotifyPropertyChanged("VolExcessMethod");
            }
        }

        private string volExcessMethodField; 

        /// <summary>
        /// Mix method. 
        /// </summary>
		[StringLength(32)]
        [Description("Mix method.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("mixMethod")]
        public string MixMethod {
            get {
                return mixMethodField;
            } 
            set {
                mixMethodField = value;
                NotifyPropertyChanged("MixMethod");
            }
        }

        private string mixMethodField; 

        /// <summary>
        /// Method by which density is measured. 
        /// </summary>
		[StringLength(32)]
        [Description("Method by which density is measured.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("densMeasBy")]
        public string DensMeasBy {
            get {
                return densMeasByField;
            } 
            set {
                densMeasByField = value;
                NotifyPropertyChanged("DensMeasBy");
            }
        }

        private string densMeasByField; 

        /// <summary>
        /// Fluid returns. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Fluid returns.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("annFlowAfter")]
        public bool? AnnFlowAfter {
            get {
                return annFlowAfterField;
            } 
            set {
                annFlowAfterField = value;
                 this.AnnFlowAfterSpecified = true;
                NotifyPropertyChanged("AnnFlowAfter");
            }
        }

        private bool? annFlowAfterField; 

        /// <summary>
        /// annFlowAfterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AnnFlowAfterSpecified {
            get {
                return annFlowAfterSpecifiedField;
            } 
            set {
                annFlowAfterSpecifiedField = value;
                NotifyPropertyChanged("AnnFlowAfterSpecified");
            }
        }

        private bool annFlowAfterSpecifiedField; 

        /// <summary>
        /// Top plug used? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Top plug used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("topPlug")]
        public bool? TopPlug {
            get {
                return topPlugField;
            } 
            set {
                topPlugField = value;
                 this.TopPlugSpecified = true;
                NotifyPropertyChanged("TopPlug");
            }
        }

        private bool? topPlugField; 

        /// <summary>
        /// topPlugSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TopPlugSpecified {
            get {
                return topPlugSpecifiedField;
            } 
            set {
                topPlugSpecifiedField = value;
                NotifyPropertyChanged("TopPlugSpecified");
            }
        }

        private bool topPlugSpecifiedField; 

        /// <summary>
        /// Bottom plug used. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Bottom plug used.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("botPlug")]
        public bool? BotPlug {
            get {
                return botPlugField;
            } 
            set {
                botPlugField = value;
                 this.BotPlugSpecified = true;
                NotifyPropertyChanged("BotPlug");
            }
        }

        private bool? botPlugField; 

        /// <summary>
        /// botPlugSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BotPlugSpecified {
            get {
                return botPlugSpecifiedField;
            } 
            set {
                botPlugSpecifiedField = value;
                NotifyPropertyChanged("BotPlugSpecified");
            }
        }

        private bool botPlugSpecifiedField; 

        /// <summary>
        /// Amount of bottom plug used. 
        /// </summary>
		[Description("Amount of bottom plug used.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("botPlugNumber")]
        public short? BotPlugNumber {
            get {
                return botPlugNumberField;
            } 
            set {
                botPlugNumberField = value;
                 this.BotPlugNumberSpecified = true;
                NotifyPropertyChanged("BotPlugNumber");
            }
        }

        private short? botPlugNumberField; 

        /// <summary>
        /// botPlugNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BotPlugNumberSpecified {
            get {
                return botPlugNumberSpecifiedField;
            } 
            set {
                botPlugNumberSpecifiedField = value;
                NotifyPropertyChanged("BotPlugNumberSpecified");
            }
        }

        private bool botPlugNumberSpecifiedField; 

        /// <summary>
        /// Plug bumped? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[Description("Plug bumped? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("plugBumped")]
        public bool? PlugBumped {
            get {
                return plugBumpedField;
            } 
            set {
                plugBumpedField = value;
                 this.PlugBumpedSpecified = true;
                NotifyPropertyChanged("PlugBumped");
            }
        }

        private bool? plugBumpedField; 

        /// <summary>
        /// plugBumpedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PlugBumpedSpecified {
            get {
                return plugBumpedSpecifiedField;
            } 
            set {
                plugBumpedSpecifiedField = value;
                NotifyPropertyChanged("PlugBumpedSpecified");
            }
        }

        private bool plugBumpedSpecifiedField; 

        /// <summary>
        /// Pressure prior to bumping plug / pressure at end of displacement 
        /// </summary>
		[Description("Pressure prior to bumping plug / pressure at end of displacement")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presPriorBump")]
        public PressureMeasure PresPriorBump {
            get {
                return presPriorBumpField;
            } 
            set {
                presPriorBumpField = value;
                NotifyPropertyChanged("PresPriorBump");
            }
        }

        private PressureMeasure presPriorBumpField; 

        /// <summary>
        /// Pressure plug bumped. 
        /// </summary>
		[Description("Pressure plug bumped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presBump")]
        public PressureMeasure PresBump {
            get {
                return presBumpField;
            } 
            set {
                presBumpField = value;
                NotifyPropertyChanged("PresBump");
            }
        }

        private PressureMeasure presBumpField; 

        /// <summary>
        /// Pressure held to. 
        /// </summary>
		[Description("Pressure held to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presHeld")]
        public PressureMeasure PresHeld {
            get {
                return presHeldField;
            } 
            set {
                presHeldField = value;
                NotifyPropertyChanged("PresHeld");
            }
        }

        private PressureMeasure presHeldField; 

        /// <summary>
        /// Float held? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Float held?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("floatHeld")]
        public bool? FloatHeld {
            get {
                return floatHeldField;
            } 
            set {
                floatHeldField = value;
                 this.FloatHeldSpecified = true;
                NotifyPropertyChanged("FloatHeld");
            }
        }

        private bool? floatHeldField; 

        /// <summary>
        /// floatHeldSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FloatHeldSpecified {
            get {
                return floatHeldSpecifiedField;
            } 
            set {
                floatHeldSpecifiedField = value;
                NotifyPropertyChanged("FloatHeldSpecified");
            }
        }

        private bool floatHeldSpecifiedField; 

        /// <summary>
        /// Total mud lost. 
        /// </summary>
		[Description("Total mud lost.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volMudLost")]
        public VolumeMeasure VolMudLost {
            get {
                return volMudLostField;
            } 
            set {
                volMudLostField = value;
                NotifyPropertyChanged("VolMudLost");
            }
        }

        private VolumeMeasure volMudLostField; 

        /// <summary>
        /// Displacement fluid name. 
        /// </summary>
		[StringLength(32)]
        [Description("Displacement fluid name.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("fluidDisplace")]
        public string FluidDisplace {
            get {
                return fluidDisplaceField;
            } 
            set {
                fluidDisplaceField = value;
                NotifyPropertyChanged("FluidDisplace");
            }
        }

        private string fluidDisplaceField; 

        /// <summary>
        /// Density of displacement fluid. 
        /// </summary>
		[Description("Density of displacement fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densDisplaceFluid")]
        public DensityMeasure DensDisplaceFluid {
            get {
                return densDisplaceFluidField;
            } 
            set {
                densDisplaceFluidField = value;
                NotifyPropertyChanged("DensDisplaceFluid");
            }
        }

        private DensityMeasure densDisplaceFluidField; 

        /// <summary>
        /// Volume of displacement fluid. 
        /// </summary>
		[Description("Volume of displacement fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volDisplaceFluid")]
        public VolumeMeasure VolDisplaceFluid {
            get {
                return volDisplaceFluidField;
            } 
            set {
                volDisplaceFluidField = value;
                NotifyPropertyChanged("VolDisplaceFluid");
            }
        }

        private VolumeMeasure volDisplaceFluidField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Cement Job.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_cementJob", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML Cement Job.")]
    public partial class CementJob : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the cement job. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the cement job.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the cement job. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the cement job.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Type of cement job. 
        /// </summary>
		[Description("Type of cement job.")]
        [EnergisticsDataTypeAttribute(DataType = "CementJobType")]
		[XmlElement("jobType")]
        public CementJobType? JobType {
            get {
                return jobTypeField;
            } 
            set {
                jobTypeField = value;
                 this.JobTypeSpecified = true;
                NotifyPropertyChanged("JobType");
            }
        }

        private CementJobType? jobTypeField; 

        /// <summary>
        /// jobTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool JobTypeSpecified {
            get {
                return jobTypeSpecifiedField;
            } 
            set {
                jobTypeSpecifiedField = value;
                NotifyPropertyChanged("JobTypeSpecified");
            }
        }

        private bool jobTypeSpecifiedField; 

        /// <summary>
        /// Job configuration. 
        /// </summary>
		[StringLength(256)]
        [Description("Job configuration.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("jobConfig")]
        public string JobConfig {
            get {
                return jobConfigField;
            } 
            set {
                jobConfigField = value;
                NotifyPropertyChanged("JobConfig");
            }
        }

        private string jobConfigField; 

        /// <summary>
        /// Date and time of Cement Job. 
        /// </summary>
		[Description("Date and time of Cement Job.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimJob")]
        public Timestamp? DateTimeJob {
            get {
                return dTimJobField;
            } 
            set {
                dTimJobField = value;
                 this.DateTimeJobSpecified = true;
                NotifyPropertyChanged("DateTimeJob");
            }
        }

        private Timestamp? dTimJobField; 

        /// <summary>
        /// dTimJobSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeJobSpecified {
            get {
                return dTimJobSpecifiedField;
            } 
            set {
                dTimJobSpecifiedField = value;
                NotifyPropertyChanged("DateTimeJobSpecified");
            }
        }

        private bool dTimJobSpecifiedField; 

        /// <summary>
        /// Name for the cemented string 
        /// </summary>
		[StringLength(32)]
        [Description("Name for the cemented string")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("nameCementedString")]
        public string NameCementedString {
            get {
                return nameCementedStringField;
            } 
            set {
                nameCementedStringField = value;
                NotifyPropertyChanged("NameCementedString");
            }
        }

        private string nameCementedStringField; 

        /// <summary>
        /// Wellbore Geometry of annulus. 
        /// </summary>
		[Description("Wellbore Geometry of annulus.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wbGeometry")]
		[XmlElement("holeConfig")]
        public WellboreGeometry HoleConfig {
            get {
                return holeConfigField;
            } 
            set {
                holeConfigField = value;
                NotifyPropertyChanged("HoleConfig");
            }
        }

        private WellboreGeometry holeConfigField; 

        /// <summary>
        /// Name for the cement work string 
        /// </summary>
		[StringLength(64)]
        [Description("Name for the cement work string")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWorkString")]
        public string NameWorkString {
            get {
                return nameWorkStringField;
            } 
            set {
                nameWorkStringField = value;
                NotifyPropertyChanged("NameWorkString");
            }
        }

        private string nameWorkStringField; 

        /// <summary>
        /// Name of cementing contractor. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of cementing contractor.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("contractor")]
        public string Contractor {
            get {
                return contractorField;
            } 
            set {
                contractorField = value;
                NotifyPropertyChanged("Contractor");
            }
        }

        private string contractorField; 

        /// <summary>
        /// Cementing engineer. 
        /// </summary>
		[StringLength(32)]
        [Description("Cementing engineer.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("cementEngr")]
        public string CementEngr {
            get {
                return cementEngrField;
            } 
            set {
                cementEngrField = value;
                NotifyPropertyChanged("CementEngr");
            }
        }

        private string cementEngrField; 

        /// <summary>
        /// Offshore job? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[Description("Offshore job? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("offshoreJob")]
        public bool? OffshoreJob {
            get {
                return offshoreJobField;
            } 
            set {
                offshoreJobField = value;
                 this.OffshoreJobSpecified = true;
                NotifyPropertyChanged("OffshoreJob");
            }
        }

        private bool? offshoreJobField; 

        /// <summary>
        /// offshoreJobSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OffshoreJobSpecified {
            get {
                return offshoreJobSpecifiedField;
            } 
            set {
                offshoreJobSpecifiedField = value;
                NotifyPropertyChanged("OffshoreJobSpecified");
            }
        }

        private bool offshoreJobSpecifiedField; 

        /// <summary>
        /// Water depth if offshore. The distance from mean sea level to water bottom. 
        /// </summary>
		[Description("Water depth if offshore. The distance from mean sea level to water bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("mdWater")]
        public LengthMeasure MDWater {
            get {
                return mdWaterField;
            } 
            set {
                mdWaterField = value;
                NotifyPropertyChanged("MDWater");
            }
        }

        private LengthMeasure mdWaterField; 

        /// <summary>
        /// Returns to seabed? Values are "true" (or "1") and "false" (or "0"). 
        /// </summary>
		[Description("Returns to seabed? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("returnsToSeabed")]
        public bool? ReturnsToSeabed {
            get {
                return returnsToSeabedField;
            } 
            set {
                returnsToSeabedField = value;
                 this.ReturnsToSeabedSpecified = true;
                NotifyPropertyChanged("ReturnsToSeabed");
            }
        }

        private bool? returnsToSeabedField; 

        /// <summary>
        /// returnsToSeabedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReturnsToSeabedSpecified {
            get {
                return returnsToSeabedSpecifiedField;
            } 
            set {
                returnsToSeabedSpecifiedField = value;
                NotifyPropertyChanged("ReturnsToSeabedSpecified");
            }
        }

        private bool returnsToSeabedSpecifiedField; 

        /// <summary>
        /// Pipe being reciprocated. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Pipe being reciprocated.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("reciprocating")]
        public bool? Reciprocating {
            get {
                return reciprocatingField;
            } 
            set {
                reciprocatingField = value;
                 this.ReciprocatingSpecified = true;
                NotifyPropertyChanged("Reciprocating");
            }
        }

        private bool? reciprocatingField; 

        /// <summary>
        /// reciprocatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReciprocatingSpecified {
            get {
                return reciprocatingSpecifiedField;
            } 
            set {
                reciprocatingSpecifiedField = value;
                NotifyPropertyChanged("ReciprocatingSpecified");
            }
        }

        private bool reciprocatingSpecifiedField; 

        /// <summary>
        /// Duration for waiting on cement to set. 
        /// </summary>
		[Description("Duration for waiting on cement to set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("woc")]
        public TimeMeasure Woc {
            get {
                return wocField;
            } 
            set {
                wocField = value;
                NotifyPropertyChanged("Woc");
            }
        }

        private TimeMeasure wocField; 

        /// <summary>
        /// If Plug, measured depth of top of plug. 
        /// </summary>
		[Description("If Plug, measured depth of top of plug.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdPlugTop")]
        public MeasuredDepthCoord MDPlugTop {
            get {
                return mdPlugTopField;
            } 
            set {
                mdPlugTopField = value;
                NotifyPropertyChanged("MDPlugTop");
            }
        }

        private MeasuredDepthCoord mdPlugTopField; 

        /// <summary>
        /// If Plug, measured depth of bottom of plug. 
        /// </summary>
		[Description("If Plug, measured depth of bottom of plug.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdPlugBot")]
        public MeasuredDepthCoord MDPlugBot {
            get {
                return mdPlugBotField;
            } 
            set {
                mdPlugBotField = value;
                NotifyPropertyChanged("MDPlugBot");
            }
        }

        private MeasuredDepthCoord mdPlugBotField; 

        /// <summary>
        /// Measured depth at bottom of hole. 
        /// </summary>
		[Description("Measured depth at bottom of hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdHole")]
        public MeasuredDepthCoord MDHole {
            get {
                return mdHoleField;
            } 
            set {
                mdHoleField = value;
                NotifyPropertyChanged("MDHole");
            }
        }

        private MeasuredDepthCoord mdHoleField; 

        /// <summary>
        /// Measured depth of previous shoe. 
        /// </summary>
		[Description("Measured depth of previous shoe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdShoe")]
        public MeasuredDepthCoord MDShoe {
            get {
                return mdShoeField;
            } 
            set {
                mdShoeField = value;
                NotifyPropertyChanged("MDShoe");
            }
        }

        private MeasuredDepthCoord mdShoeField; 

        /// <summary>
        /// True Vertical Depth of previous shoe. 
        /// </summary>
		[Description("True Vertical Depth of previous shoe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdShoe")]
        public WellVerticalDepthCoord TvdShoe {
            get {
                return tvdShoeField;
            } 
            set {
                tvdShoeField = value;
                NotifyPropertyChanged("TvdShoe");
            }
        }

        private WellVerticalDepthCoord tvdShoeField; 

        /// <summary>
        /// Measured depth of cement string shoe. 
        /// </summary>
		[Description("Measured depth of cement string shoe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdStringSet")]
        public MeasuredDepthCoord MDStringSet {
            get {
                return mdStringSetField;
            } 
            set {
                mdStringSetField = value;
                NotifyPropertyChanged("MDStringSet");
            }
        }

        private MeasuredDepthCoord mdStringSetField; 

        /// <summary>
        /// True vertical depth of cement string shoe. 
        /// </summary>
		[Description("True vertical depth of cement string shoe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdStringSet")]
        public WellVerticalDepthCoord TvdStringSet {
            get {
                return tvdStringSetField;
            } 
            set {
                tvdStringSetField = value;
                NotifyPropertyChanged("TvdStringSet");
            }
        }

        private WellVerticalDepthCoord tvdStringSetField; 

        /// <summary>
        /// Set of stages for the job (usually 1 or 2). 
        /// </summary>
		[Description("Set of stages for the job (usually 1 or 2).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_cementStage")]
		[XmlElement("cementStage")]
        public List<CementStage> CementStage {
            get {
                return cementStageField;
            } 
            set {
                cementStageField = value;
                NotifyPropertyChanged("CementStage");
            }
        }

         /// <summary>
         /// bool to indicate if CementStage has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CementStageSpecified
         {
             get {
             if(cementStageField!=null)
                 return cementStageField.Count>0?true:false;
             else return false;
             }
         }
        private List<CementStage> cementStageField; 

        /// <summary>
        /// Test results post-job. 
        /// </summary>
		[Description("Test results post-job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_cementTest")]
		[XmlElement("cementTest")]
        public CementTest CementTest {
            get {
                return cementTestField;
            } 
            set {
                cementTestField = value;
                NotifyPropertyChanged("CementTest");
            }
        }

        private CementTest cementTestField; 

        /// <summary>
        /// Plug type. 
        /// </summary>
		[StringLength(32)]
        [Description("Plug type.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typePlug")]
        public string TypePlug {
            get {
                return typePlugField;
            } 
            set {
                typePlugField = value;
                NotifyPropertyChanged("TypePlug");
            }
        }

        private string typePlugField; 

        /// <summary>
        /// Name for the cementing string 
        /// </summary>
		[StringLength(64)]
        [Description("Name for the cementing string")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameCementString")]
        public string NameCementString {
            get {
                return nameCementStringField;
            } 
            set {
                nameCementStringField = value;
                NotifyPropertyChanged("NameCementString");
            }
        }

        private string nameCementStringField; 

        /// <summary>
        /// Date and time that cement plug was set. 
        /// </summary>
		[Description("Date and time that cement plug was set.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimPlugSet")]
        public Timestamp? DateTimePlugSet {
            get {
                return dTimPlugSetField;
            } 
            set {
                dTimPlugSetField = value;
                 this.DateTimePlugSetSpecified = true;
                NotifyPropertyChanged("DateTimePlugSet");
            }
        }

        private Timestamp? dTimPlugSetField; 

        /// <summary>
        /// dTimPlugSetSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePlugSetSpecified {
            get {
                return dTimPlugSetSpecifiedField;
            } 
            set {
                dTimPlugSetSpecifiedField = value;
                NotifyPropertyChanged("DateTimePlugSetSpecified");
            }
        }

        private bool dTimPlugSetSpecifiedField; 

        /// <summary>
        /// Cement drilled out flag. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Cement drilled out flag. Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("cementDrillOut")]
        public bool? CementDrillOut {
            get {
                return cementDrillOutField;
            } 
            set {
                cementDrillOutField = value;
                 this.CementDrillOutSpecified = true;
                NotifyPropertyChanged("CementDrillOut");
            }
        }

        private bool? cementDrillOutField; 

        /// <summary>
        /// cementDrillOutSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CementDrillOutSpecified {
            get {
                return cementDrillOutSpecifiedField;
            } 
            set {
                cementDrillOutSpecifiedField = value;
                NotifyPropertyChanged("CementDrillOutSpecified");
            }
        }

        private bool cementDrillOutSpecifiedField; 

        /// <summary>
        /// Date and time that cement was drilled out. 
        /// </summary>
		[Description("Date and time that cement was drilled out.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimCementDrillOut")]
        public Timestamp? DateTimeCementDrillOut {
            get {
                return dTimCementDrillOutField;
            } 
            set {
                dTimCementDrillOutField = value;
                 this.DateTimeCementDrillOutSpecified = true;
                NotifyPropertyChanged("DateTimeCementDrillOut");
            }
        }

        private Timestamp? dTimCementDrillOutField; 

        /// <summary>
        /// dTimCementDrillOutSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCementDrillOutSpecified {
            get {
                return dTimCementDrillOutSpecifiedField;
            } 
            set {
                dTimCementDrillOutSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCementDrillOutSpecified");
            }
        }

        private bool dTimCementDrillOutSpecifiedField; 

        /// <summary>
        /// Type of squeeze. 
        /// </summary>
		[StringLength(32)]
        [Description("Type of squeeze.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typeSqueeze")]
        public string TypeSqueeze {
            get {
                return typeSqueezeField;
            } 
            set {
                typeSqueezeField = value;
                NotifyPropertyChanged("TypeSqueeze");
            }
        }

        private string typeSqueezeField; 

        /// <summary>
        /// Measured depth of squeeze. 
        /// </summary>
		[Description("Measured depth of squeeze.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdSqueeze")]
        public MeasuredDepthCoord MDSqueeze {
            get {
                return mdSqueezeField;
            } 
            set {
                mdSqueezeField = value;
                NotifyPropertyChanged("MDSqueeze");
            }
        }

        private MeasuredDepthCoord mdSqueezeField; 

        /// <summary>
        /// Date and time of squeeze. 
        /// </summary>
		[Description("Date and time of squeeze.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimSqueeze")]
        public Timestamp? DateTimeSqueeze {
            get {
                return dTimSqueezeField;
            } 
            set {
                dTimSqueezeField = value;
                 this.DateTimeSqueezeSpecified = true;
                NotifyPropertyChanged("DateTimeSqueeze");
            }
        }

        private Timestamp? dTimSqueezeField; 

        /// <summary>
        /// dTimSqueezeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSqueezeSpecified {
            get {
                return dTimSqueezeSpecifiedField;
            } 
            set {
                dTimSqueezeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSqueezeSpecified");
            }
        }

        private bool dTimSqueezeSpecifiedField; 

        /// <summary>
        /// Tool Company. 
        /// </summary>
		[StringLength(64)]
        [Description("Tool Company.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("toolCompany")]
        public string ToolCompany {
            get {
                return toolCompanyField;
            } 
            set {
                toolCompanyField = value;
                NotifyPropertyChanged("ToolCompany");
            }
        }

        private string toolCompanyField; 

        /// <summary>
        /// Cement tool type. 
        /// </summary>
		[StringLength(64)]
        [Description("Cement tool type.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("typeTool")]
        public string TypeTool {
            get {
                return typeToolField;
            } 
            set {
                typeToolField = value;
                NotifyPropertyChanged("TypeTool");
            }
        }

        private string typeToolField; 

        /// <summary>
        /// Pipe rotation start time. 
        /// </summary>
		[Description("Pipe rotation start time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimPipeRotStart")]
        public Timestamp? DateTimePipeRotStart {
            get {
                return dTimPipeRotStartField;
            } 
            set {
                dTimPipeRotStartField = value;
                 this.DateTimePipeRotStartSpecified = true;
                NotifyPropertyChanged("DateTimePipeRotStart");
            }
        }

        private Timestamp? dTimPipeRotStartField; 

        /// <summary>
        /// dTimPipeRotStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePipeRotStartSpecified {
            get {
                return dTimPipeRotStartSpecifiedField;
            } 
            set {
                dTimPipeRotStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimePipeRotStartSpecified");
            }
        }

        private bool dTimPipeRotStartSpecifiedField; 

        /// <summary>
        /// Pipe rotation end time. 
        /// </summary>
		[Description("Pipe rotation end time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimPipeRotEnd")]
        public Timestamp? DateTimePipeRotEnd {
            get {
                return dTimPipeRotEndField;
            } 
            set {
                dTimPipeRotEndField = value;
                 this.DateTimePipeRotEndSpecified = true;
                NotifyPropertyChanged("DateTimePipeRotEnd");
            }
        }

        private Timestamp? dTimPipeRotEndField; 

        /// <summary>
        /// dTimPipeRotEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePipeRotEndSpecified {
            get {
                return dTimPipeRotEndSpecifiedField;
            } 
            set {
                dTimPipeRotEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimePipeRotEndSpecified");
            }
        }

        private bool dTimPipeRotEndSpecifiedField; 

        /// <summary>
        /// Pipe rotation rate (commonly in rpm). 
        /// </summary>
		[Description("Pipe rotation rate (commonly in rpm).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("rpmPipe")]
        public AnglePerTimeMeasure RpmPipe {
            get {
                return rpmPipeField;
            } 
            set {
                rpmPipeField = value;
                NotifyPropertyChanged("RpmPipe");
            }
        }

        private AnglePerTimeMeasure rpmPipeField; 

        /// <summary>
        /// Pipe rotation initial torque. 
        /// </summary>
		[Description("Pipe rotation initial torque.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqInitPipeRot")]
        public MomentOfForceMeasure TorqueInitPipeRot {
            get {
                return tqInitPipeRotField;
            } 
            set {
                tqInitPipeRotField = value;
                NotifyPropertyChanged("TorqueInitPipeRot");
            }
        }

        private MomentOfForceMeasure tqInitPipeRotField; 

        /// <summary>
        /// Pipe rotation average torque. 
        /// </summary>
		[Description("Pipe rotation average torque.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqPipeAv")]
        public MomentOfForceMeasure TorquePipeAverage {
            get {
                return tqPipeAvField;
            } 
            set {
                tqPipeAvField = value;
                NotifyPropertyChanged("TorquePipeAverage");
            }
        }

        private MomentOfForceMeasure tqPipeAvField; 

        /// <summary>
        /// Pipe rotation maximum torque. 
        /// </summary>
		[Description("Pipe rotation maximum torque.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "momentOfForceMeasure")]
		[XmlElement("tqPipeMx")]
        public MomentOfForceMeasure TorquePipeMax {
            get {
                return tqPipeMxField;
            } 
            set {
                tqPipeMxField = value;
                NotifyPropertyChanged("TorquePipeMax");
            }
        }

        private MomentOfForceMeasure tqPipeMxField; 

        /// <summary>
        /// Date and time at start of pipe reciprocation. 
        /// </summary>
		[Description("Date and time at start of pipe reciprocation.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRecipStart")]
        public Timestamp? DateTimeRecipStart {
            get {
                return dTimRecipStartField;
            } 
            set {
                dTimRecipStartField = value;
                 this.DateTimeRecipStartSpecified = true;
                NotifyPropertyChanged("DateTimeRecipStart");
            }
        }

        private Timestamp? dTimRecipStartField; 

        /// <summary>
        /// dTimRecipStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRecipStartSpecified {
            get {
                return dTimRecipStartSpecifiedField;
            } 
            set {
                dTimRecipStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRecipStartSpecified");
            }
        }

        private bool dTimRecipStartSpecifiedField; 

        /// <summary>
        /// Date and time at end of pipe reciprocation. 
        /// </summary>
		[Description("Date and time at end of pipe reciprocation.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRecipEnd")]
        public Timestamp? DateTimeRecipEnd {
            get {
                return dTimRecipEndField;
            } 
            set {
                dTimRecipEndField = value;
                 this.DateTimeRecipEndSpecified = true;
                NotifyPropertyChanged("DateTimeRecipEnd");
            }
        }

        private Timestamp? dTimRecipEndField; 

        /// <summary>
        /// dTimRecipEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRecipEndSpecified {
            get {
                return dTimRecipEndSpecifiedField;
            } 
            set {
                dTimRecipEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRecipEndSpecified");
            }
        }

        private bool dTimRecipEndSpecifiedField; 

        /// <summary>
        /// String up weight during reciprocation. 
        /// </summary>
		[Description("String up weight during reciprocation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("overPull")]
        public ForceMeasure OverPull {
            get {
                return overPullField;
            } 
            set {
                overPullField = value;
                NotifyPropertyChanged("OverPull");
            }
        }

        private ForceMeasure overPullField; 

        /// <summary>
        /// String down weight during reciprocation. 
        /// </summary>
		[Description("String down weight during reciprocation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("slackOff")]
        public ForceMeasure SlackOff {
            get {
                return slackOffField;
            } 
            set {
                slackOffField = value;
                NotifyPropertyChanged("SlackOff");
            }
        }

        private ForceMeasure slackOffField; 

        /// <summary>
        /// Pipe reciprocation RPM. 
        /// </summary>
		[Description("Pipe reciprocation RPM.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerTimeMeasure")]
		[XmlElement("rpmPipeRecip")]
        public AnglePerTimeMeasure RpmPipeRecip {
            get {
                return rpmPipeRecipField;
            } 
            set {
                rpmPipeRecipField = value;
                NotifyPropertyChanged("RpmPipeRecip");
            }
        }

        private AnglePerTimeMeasure rpmPipeRecipField; 

        /// <summary>
        /// Pipe reciprocation stroke length. 
        /// </summary>
		[Description("Pipe reciprocation stroke length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("lenPipeRecipStroke")]
        public LengthMeasure LenPipeRecipStroke {
            get {
                return lenPipeRecipStrokeField;
            } 
            set {
                lenPipeRecipStrokeField = value;
                NotifyPropertyChanged("LenPipeRecipStroke");
            }
        }

        private LengthMeasure lenPipeRecipStrokeField; 

        /// <summary>
        /// Coiled Tubing Used (true=CTU used). Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Coiled Tubing Used (true=CTU used).   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("coilTubing")]
        public bool? CoilTubing {
            get {
                return coilTubingField;
            } 
            set {
                coilTubingField = value;
                 this.CoilTubingSpecified = true;
                NotifyPropertyChanged("CoilTubing");
            }
        }

        private bool? coilTubingField; 

        /// <summary>
        /// coilTubingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CoilTubingSpecified {
            get {
                return coilTubingSpecifiedField;
            } 
            set {
                coilTubingSpecifiedField = value;
                NotifyPropertyChanged("CoilTubingSpecified");
            }
        }

        private bool coilTubingSpecifiedField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The non-contextual content of a WITSML bottom hole assembly run object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_bhaRun", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML bottom hole assembly run object.")]
    public partial class BhaRun : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the bottom hole assembly. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the bottom hole assembly.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the run. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the run.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// This represents a foreign key to the tubular (assembly) that was utilized in this run.
        /// </summary>
		[Required]
        [Description("This represents a foreign key to the tubular (assembly)  that was utilized in this run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("tubular")]
        public RefNameString Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private RefNameString tubularField; 

        /// <summary>
        /// Date and time that activities started. 
        /// </summary>
		[Description("Date and time that activities started.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// Date and time that activities stopped. 
        /// </summary>
		[Description("Date and time that activities stopped.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStop")]
        public Timestamp? DateTimeStop {
            get {
                return dTimStopField;
            } 
            set {
                dTimStopField = value;
                 this.DateTimeStopSpecified = true;
                NotifyPropertyChanged("DateTimeStop");
            }
        }

        private Timestamp? dTimStopField; 

        /// <summary>
        /// dTimStopSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStopSpecified {
            get {
                return dTimStopSpecifiedField;
            } 
            set {
                dTimStopSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStopSpecified");
            }
        }

        private bool dTimStopSpecifiedField; 

        /// <summary>
        /// Start on bottom - date and time. 
        /// </summary>
		[Description("Start on bottom - date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStartDrilling")]
        public Timestamp? DateTimeStartDrilling {
            get {
                return dTimStartDrillingField;
            } 
            set {
                dTimStartDrillingField = value;
                 this.DateTimeStartDrillingSpecified = true;
                NotifyPropertyChanged("DateTimeStartDrilling");
            }
        }

        private Timestamp? dTimStartDrillingField; 

        /// <summary>
        /// dTimStartDrillingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartDrillingSpecified {
            get {
                return dTimStartDrillingSpecifiedField;
            } 
            set {
                dTimStartDrillingSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartDrillingSpecified");
            }
        }

        private bool dTimStartDrillingSpecifiedField; 

        /// <summary>
        /// Start off bottom - date and time. 
        /// </summary>
		[Description("Start off bottom - date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStopDrilling")]
        public Timestamp? DateTimeStopDrilling {
            get {
                return dTimStopDrillingField;
            } 
            set {
                dTimStopDrillingField = value;
                 this.DateTimeStopDrillingSpecified = true;
                NotifyPropertyChanged("DateTimeStopDrilling");
            }
        }

        private Timestamp? dTimStopDrillingField; 

        /// <summary>
        /// dTimStopDrillingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStopDrillingSpecified {
            get {
                return dTimStopDrillingSpecifiedField;
            } 
            set {
                dTimStopDrillingSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStopDrillingSpecified");
            }
        }

        private bool dTimStopDrillingSpecifiedField; 

        /// <summary>
        /// Planned dogleg severity. 
        /// </summary>
		[Description("Planned dogleg severity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerLengthMeasure")]
		[XmlElement("planDogleg")]
        public AnglePerLengthMeasure PlanDogleg {
            get {
                return planDoglegField;
            } 
            set {
                planDoglegField = value;
                NotifyPropertyChanged("PlanDogleg");
            }
        }

        private AnglePerLengthMeasure planDoglegField; 

        /// <summary>
        /// Actual dogleg severity. 
        /// </summary>
		[Description("Actual dogleg severity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerLengthMeasure")]
		[XmlElement("actDogleg")]
        public AnglePerLengthMeasure ActDogleg {
            get {
                return actDoglegField;
            } 
            set {
                actDoglegField = value;
                NotifyPropertyChanged("ActDogleg");
            }
        }

        private AnglePerLengthMeasure actDoglegField; 

        /// <summary>
        /// Actual dogleg severity - Maximum. 
        /// </summary>
		[Description("Actual dogleg severity - Maximum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "anglePerLengthMeasure")]
		[XmlElement("actDoglegMx")]
        public AnglePerLengthMeasure ActDoglegMax {
            get {
                return actDoglegMxField;
            } 
            set {
                actDoglegMxField = value;
                NotifyPropertyChanged("ActDoglegMax");
            }
        }

        private AnglePerLengthMeasure actDoglegMxField; 

        /// <summary>
        /// Bottom hole assembly status.
        /// </summary>
		[Description("Bottom hole assembly status.")]
        [EnergisticsDataTypeAttribute(DataType = "BhaStatus")]
		[XmlElement("statusBha")]
        public BhaStatus? StatusBha {
            get {
                return statusBhaField;
            } 
            set {
                statusBhaField = value;
                 this.StatusBhaSpecified = true;
                NotifyPropertyChanged("StatusBha");
            }
        }

        private BhaStatus? statusBhaField; 

        /// <summary>
        /// statusBhaSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusBhaSpecified {
            get {
                return statusBhaSpecifiedField;
            } 
            set {
                statusBhaSpecifiedField = value;
                NotifyPropertyChanged("StatusBhaSpecified");
            }
        }

        private bool statusBhaSpecifiedField; 

        /// <summary>
        /// Bit run number. 
        /// </summary>
		[StringLength(64)]
        [Description("Bit run number.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("numBitRun")]
        public string NumBitRun {
            get {
                return numBitRunField;
            } 
            set {
                numBitRunField = value;
                NotifyPropertyChanged("NumBitRun");
            }
        }

        private string numBitRunField; 

        /// <summary>
        /// The BHA (drilling string) run number. 
        /// </summary>
		[Description("The BHA (drilling string) run number.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("numStringRun")]
        public short? NumStringRun {
            get {
                return numStringRunField;
            } 
            set {
                numStringRunField = value;
                 this.NumStringRunSpecified = true;
                NotifyPropertyChanged("NumStringRun");
            }
        }

        private short? numStringRunField; 

        /// <summary>
        /// numStringRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumStringRunSpecified {
            get {
                return numStringRunSpecifiedField;
            } 
            set {
                numStringRunSpecifiedField = value;
                NotifyPropertyChanged("NumStringRunSpecified");
            }
        }

        private bool numStringRunSpecifiedField; 

        /// <summary>
        /// Reason for trip. 
        /// </summary>
		[StringLength(4000)]
        [Description("Reason for trip.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("reasonTrip")]
        public string ReasonTrip {
            get {
                return reasonTripField;
            } 
            set {
                reasonTripField = value;
                NotifyPropertyChanged("ReasonTrip");
            }
        }

        private string reasonTripField; 

        /// <summary>
        /// Objective of bottom hole assembly. 
        /// </summary>
		[StringLength(4000)]
        [Description("Objective of bottom hole assembly.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("objectiveBha")]
        public string ObjectiveBha {
            get {
                return objectiveBhaField;
            } 
            set {
                objectiveBhaField = value;
                NotifyPropertyChanged("ObjectiveBha");
            }
        }

        private string objectiveBhaField; 

        /// <summary>
        /// Drilling parameters. 
        /// </summary>
		[Description("Drilling parameters.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_drillingParams")]
		[XmlElement("drillingParams")]
        public List<DrillingParams> DrillingParams {
            get {
                return drillingParamsField;
            } 
            set {
                drillingParamsField = value;
                NotifyPropertyChanged("DrillingParams");
            }
        }

         /// <summary>
         /// bool to indicate if DrillingParams has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DrillingParamsSpecified
         {
             get {
             if(drillingParamsField!=null)
                 return drillingParamsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillingParams> drillingParamsField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore.  This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The non-contextual content of a WITSML attachment object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_attachment", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("The non-contextual content of a WITSML attachment object.")]
    public partial class Attachment : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the wellbore. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the (sub) object that is represented by the attachment. If no wellbore is specified then the attachment represents the well. If a wellbore is specified but no other object is specified then the attachment represents the wellbore. 
        /// </summary>
		[StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the (sub) object that is represented by the attachment. If no wellbore is specified then the attachment represents the well. If a wellbore is specified but no other object is specified then the  attachment represents the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the attachment. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the attachment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A reference to an object that is defined within the context of the specified wellbore.
        /// </summary>
		[Description("A reference to an object that is defined within the  context of the specified wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refObjectString")]
		[XmlElement("objectReference")]
        public RefObjectString ObjectReference {
            get {
                return objectReferenceField;
            } 
            set {
                objectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private RefObjectString objectReferenceField; 

        /// <summary>
        /// A reference to an sub-object that is defined within the context of the object referenced by objectReference. This should only refer to recurring components of a growing object.
        /// </summary>
		[Description("A reference to an sub-object that is defined within the  context of the object referenced by objectReference. This should only refer to recurring components of a growing object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refObjectString")]
		[XmlElement("subObjectReference")]
        public RefObjectString SubObjectReference {
            get {
                return subObjectReferenceField;
            } 
            set {
                subObjectReferenceField = value;
                NotifyPropertyChanged("SubObjectReference");
            }
        }

        private RefObjectString subObjectReferenceField; 

        /// <summary>
        /// Along hole measured depth represented by the attachment. 
        /// </summary>
		[Description("Along hole measured depth represented by the attachment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Along hole measured depth of the bit. 
        /// </summary>
		[Description("Along hole measured depth of the bit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return mdBitField;
            } 
            set {
                mdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord mdBitField; 

        /// <summary>
        /// Any extra numeric data. For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.
        /// </summary>
		[Description("Any extra numeric data.  For this usage the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "indexedObject")]
		[XmlElement("param")]
        public List<IndexedObject> Param {
            get {
                return paramField;
            } 
            set {
                paramField = value;
                NotifyPropertyChanged("Param");
            }
        }

         /// <summary>
         /// bool to indicate if Param has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParamSpecified
         {
             get {
             if(paramField!=null)
                 return paramField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> paramField; 

        /// <summary>
        /// A file name associated with the attachment.
        /// </summary>
		[StringLength(64)]
        [Description("A file name associated with the attachment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("fileName")]
        public string FileName {
            get {
                return fileNameField;
            } 
            set {
                fileNameField = value;
                NotifyPropertyChanged("FileName");
            }
        }

        private string fileNameField; 

        /// <summary>
        /// A description of attachment
        /// </summary>
		[StringLength(4000)]
        [Description("A description of attachment")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// The file type.
        /// </summary>
		[StringLength(64)]
        [Description("The file type.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("fileType")]
        public string FileType {
            get {
                return fileTypeField;
            } 
            set {
                fileTypeField = value;
                NotifyPropertyChanged("FileType");
            }
        }

        private string fileTypeField; 

        /// <summary>
        /// The actual attachment content.
        /// </summary>
		[Required]
        [Description("The actual attachment content.")]
        [EnergisticsDataTypeAttribute(DataType = "base64Binary")]
		[XmlElement("content", DataType="base64Binary")]
        public Byte[] Content {
            get {
                return contentField;
            } 
            set {
                contentField = value;
                NotifyPropertyChanged("Content");
            }
        }

         /// <summary>
         /// bool to indicate if Content has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContentSpecified
         {
             get {
             if(contentField!=null)
                 return contentField.Length>0?true:false;
             else return false;
             }
         }
        private Byte[] contentField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the obj_wellCompletion xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellCompletion", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("This class represents the obj_wellCompletion xsd type.")]
    public partial class WellCompletion : Object, IWitsmlDataObject, ICommonDataObject, IWellObject, INotifyPropertyChanged
    {

        /// <summary>
        /// nameWell property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the completion.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the completion.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// fieldID property
        /// </summary>
		[StringLength(64)]
        [Description("Field ID.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("fieldID")]
        public string FieldID {
            get {
                return fieldIDField;
            } 
            set {
                fieldIDField = value;
                NotifyPropertyChanged("FieldID");
            }
        }

        private string fieldIDField; 

        /// <summary>
        /// fieldCode property
        /// </summary>
		[StringLength(64)]
        [Description("Field code.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("fieldCode")]
        public string FieldCode {
            get {
                return fieldCodeField;
            } 
            set {
                fieldCodeField = value;
                NotifyPropertyChanged("FieldCode");
            }
        }

        private string fieldCodeField; 

        /// <summary>
        /// fieldType property
        /// </summary>
		[StringLength(64)]
        [Description("Field type.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("fieldType")]
        public string FieldType {
            get {
                return fieldTypeField;
            } 
            set {
                fieldTypeField = value;
                NotifyPropertyChanged("FieldType");
            }
        }

        private string fieldTypeField; 

        /// <summary>
        /// effectiveDate property
        /// </summary>
		[Description("Field date.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("effectiveDate")]
        public Timestamp? EffectiveDate {
            get {
                return effectiveDateField;
            } 
            set {
                effectiveDateField = value;
                 this.EffectiveDateSpecified = true;
                NotifyPropertyChanged("EffectiveDate");
            }
        }

        private Timestamp? effectiveDateField; 

        /// <summary>
        /// effectiveDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EffectiveDateSpecified {
            get {
                return effectiveDateSpecifiedField;
            } 
            set {
                effectiveDateSpecifiedField = value;
                NotifyPropertyChanged("EffectiveDateSpecified");
            }
        }

        private bool effectiveDateSpecifiedField; 

        /// <summary>
        /// expiredDate property
        /// </summary>
		[Description("Expiration date")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("expiredDate")]
        public Timestamp? ExpiredDate {
            get {
                return expiredDateField;
            } 
            set {
                expiredDateField = value;
                 this.ExpiredDateSpecified = true;
                NotifyPropertyChanged("ExpiredDate");
            }
        }

        private Timestamp? expiredDateField; 

        /// <summary>
        /// expiredDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ExpiredDateSpecified {
            get {
                return expiredDateSpecifiedField;
            } 
            set {
                expiredDateSpecifiedField = value;
                NotifyPropertyChanged("ExpiredDateSpecified");
            }
        }

        private bool expiredDateSpecifiedField; 

        /// <summary>
        /// E_P_RightsID property
        /// </summary>
		[StringLength(64)]
        [Description("Documents exploration and production rights")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("E_P_RightsID")]
        public string E_P_RightsID {
            get {
                return E_P_RightsIDField;
            } 
            set {
                E_P_RightsIDField = value;
                NotifyPropertyChanged("E_P_RightsID");
            }
        }

        private string E_P_RightsIDField; 

        /// <summary>
        /// currentStatus property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CompletionStatus")]
		[XmlElement("currentStatus")]
        public CompletionStatus? CurrentStatus {
            get {
                return currentStatusField;
            } 
            set {
                currentStatusField = value;
                 this.CurrentStatusSpecified = true;
                NotifyPropertyChanged("CurrentStatus");
            }
        }

        private CompletionStatus? currentStatusField; 

        /// <summary>
        /// currentStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurrentStatusSpecified {
            get {
                return currentStatusSpecifiedField;
            } 
            set {
                currentStatusSpecifiedField = value;
                NotifyPropertyChanged("CurrentStatusSpecified");
            }
        }

        private bool currentStatusSpecifiedField; 

        /// <summary>
        /// statusDate property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("statusDate")]
        public Timestamp? StatusDate {
            get {
                return statusDateField;
            } 
            set {
                statusDateField = value;
                 this.StatusDateSpecified = true;
                NotifyPropertyChanged("StatusDate");
            }
        }

        private Timestamp? statusDateField; 

        /// <summary>
        /// statusDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusDateSpecified {
            get {
                return statusDateSpecifiedField;
            } 
            set {
                statusDateSpecifiedField = value;
                NotifyPropertyChanged("StatusDateSpecified");
            }
        }

        private bool statusDateSpecifiedField; 

        /// <summary>
        /// statusHistory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CompletionStatusHistory")]
		[XmlElement("statusHistory")]
        public List<CompletionStatusHistory> StatusHistory {
            get {
                return statusHistoryField;
            } 
            set {
                statusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if StatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusHistorySpecified
         {
             get {
             if(statusHistoryField!=null)
                 return statusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<CompletionStatusHistory> statusHistoryField; 

        /// <summary>
        /// commonData property
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// customData property
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uidWell property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CompletionStatusHistory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CompletionStatusHistory", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the CompletionStatusHistory xsd type.")]
    public partial class CompletionStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// status property
        /// </summary>
		[Description("Completion status")]
        [EnergisticsDataTypeAttribute(DataType = "CompletionStatus")]
		[XmlElement("status")]
        public CompletionStatus? Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private CompletionStatus? statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 

        /// <summary>
        /// startDate property
        /// </summary>
		[Description("the start date of status")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("startDate")]
        public Timestamp? StartDate {
            get {
                return startDateField;
            } 
            set {
                startDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private Timestamp? startDateField; 

        /// <summary>
        /// startDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return startDateSpecifiedField;
            } 
            set {
                startDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private bool startDateSpecifiedField; 

        /// <summary>
        /// endDate property
        /// </summary>
		[Description("the end date of status")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private bool endDateSpecifiedField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("The measured bottom of perforation")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("The measured top of perforation")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [Description("The description about the status")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_participant xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_participant", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_participant xsd type.")]
    public partial class Participant : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// participant property
        /// </summary>
		[Description("A collection of involved participants.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_memberObject")]
		[XmlElement("participant")]
        public List<MemberObject> Participants {
            get {
                return participantField;
            } 
            set {
                participantField = value;
                NotifyPropertyChanged("Participants");
            }
        }

         /// <summary>
         /// bool to indicate if Participants has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParticipantsSpecified
         {
             get {
             if(participantField!=null)
                 return participantField.Count>0?true:false;
             else return false;
             }
         }
        private List<MemberObject> participantField; 

        /// <summary>
        /// extNameValues property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extNameValues")]
        public List<ExtensionNameValue> ExtNameValues {
            get {
                return extNameValuesField;
            } 
            set {
                extNameValuesField = value;
                NotifyPropertyChanged("ExtNameValues");
            }
        }

         /// <summary>
         /// bool to indicate if ExtNameValues has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtNameValuesSpecified
         {
             get {
             if(extNameValuesField!=null)
                 return extNameValuesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extNameValuesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_downholeExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_downholeExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_downholeExtension xsd type.")]
    public partial class DownholeExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// downholeComponentRefID property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to downhole component")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("downholeComponentRefID")]
        public string DownholeComponentRefID {
            get {
                return downholeComponentRefIDField;
            } 
            set {
                downholeComponentRefIDField = value;
                NotifyPropertyChanged("DownholeComponentRefID");
            }
        }

        private string downholeComponentRefIDField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidReportExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidReportExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_fluidReportExtension xsd type.")]
    public partial class FluidReportExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// fluidReportRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to the fluid report")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("fluidReportRefID")]
        public string FluidReportRefID {
            get {
                return fluidReportRefIDField;
            } 
            set {
                fluidReportRefIDField = value;
                NotifyPropertyChanged("FluidReportRefID");
            }
        }

        private string fluidReportRefIDField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_perforating xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perforating", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_perforating xsd type.")]
    public partial class Perforating : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// stageNumber property
        /// </summary>
		[Description("index number of stage")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("stageNumber")]
        public short? StageNumber {
            get {
                return stageNumberField;
            } 
            set {
                stageNumberField = value;
                 this.StageNumberSpecified = true;
                NotifyPropertyChanged("StageNumber");
            }
        }

        private short? stageNumberField; 

        /// <summary>
        /// stageNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StageNumberSpecified {
            get {
                return stageNumberSpecifiedField;
            } 
            set {
                stageNumberSpecifiedField = value;
                NotifyPropertyChanged("StageNumberSpecified");
            }
        }

        private bool stageNumberSpecifiedField; 

        /// <summary>
        /// bottomPackerSet property
        /// </summary>
		[Description("Perf-Bottom of packer set depth")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("bottomPackerSet")]
        public MeasuredDepthCoord BottomPackerSet {
            get {
                return bottomPackerSetField;
            } 
            set {
                bottomPackerSetField = value;
                NotifyPropertyChanged("BottomPackerSet");
            }
        }

        private MeasuredDepthCoord bottomPackerSetField; 

        /// <summary>
        /// perforationFluidType property
        /// </summary>
		[StringLength(64)]
        [Description("Perforation fluid type")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("perforationFluidType")]
        public string PerforationFluidType {
            get {
                return perforationFluidTypeField;
            } 
            set {
                perforationFluidTypeField = value;
                NotifyPropertyChanged("PerforationFluidType");
            }
        }

        private string perforationFluidTypeField; 

        /// <summary>
        /// hydrostaticPressure property
        /// </summary>
		[Description("hydrostaticPressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("hydrostaticPressure")]
        public PressureMeasure HydrostaticPressure {
            get {
                return hydrostaticPressureField;
            } 
            set {
                hydrostaticPressureField = value;
                NotifyPropertyChanged("HydrostaticPressure");
            }
        }

        private PressureMeasure hydrostaticPressureField; 

        /// <summary>
        /// surfacePressure property
        /// </summary>
		[Description("Surface pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("surfacePressure")]
        public PressureMeasure SurfacePressure {
            get {
                return surfacePressureField;
            } 
            set {
                surfacePressureField = value;
                NotifyPropertyChanged("SurfacePressure");
            }
        }

        private PressureMeasure surfacePressureField; 

        /// <summary>
        /// reservoirPressure property
        /// </summary>
		[Description("Reservoir pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("reservoirPressure")]
        public PressureMeasure ReservoirPressure {
            get {
                return reservoirPressureField;
            } 
            set {
                reservoirPressureField = value;
                NotifyPropertyChanged("ReservoirPressure");
            }
        }

        private PressureMeasure reservoirPressureField; 

        /// <summary>
        /// fluidDensity property
        /// </summary>
		[Description("The density of fluid")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("fluidDensity")]
        public DensityMeasure FluidDensity {
            get {
                return fluidDensityField;
            } 
            set {
                fluidDensityField = value;
                NotifyPropertyChanged("FluidDensity");
            }
        }

        private DensityMeasure fluidDensityField; 

        /// <summary>
        /// fluidLevel property
        /// </summary>
		[Description("Fluid level.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("fluidLevel")]
        public MeasuredDepthCoord FluidLevel {
            get {
                return fluidLevelField;
            } 
            set {
                fluidLevelField = value;
                NotifyPropertyChanged("FluidLevel");
            }
        }

        private MeasuredDepthCoord fluidLevelField; 

        /// <summary>
        /// conveyanceMethod property
        /// </summary>
		[Description("The conveyance method")]
        [EnergisticsDataTypeAttribute(DataType = "PerfConveyanceMethod")]
		[XmlElement("conveyanceMethod")]
        public PerfConveyanceMethod? ConveyanceMethod {
            get {
                return conveyanceMethodField;
            } 
            set {
                conveyanceMethodField = value;
                 this.ConveyanceMethodSpecified = true;
                NotifyPropertyChanged("ConveyanceMethod");
            }
        }

        private PerfConveyanceMethod? conveyanceMethodField; 

        /// <summary>
        /// conveyanceMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ConveyanceMethodSpecified {
            get {
                return conveyanceMethodSpecifiedField;
            } 
            set {
                conveyanceMethodSpecifiedField = value;
                NotifyPropertyChanged("ConveyanceMethodSpecified");
            }
        }

        private bool conveyanceMethodSpecifiedField; 

        /// <summary>
        /// shotsPlanned property
        /// </summary>
		[Description("Number of shots planned")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("shotsPlanned")]
        public short? ShotsPlanned {
            get {
                return shotsPlannedField;
            } 
            set {
                shotsPlannedField = value;
                 this.ShotsPlannedSpecified = true;
                NotifyPropertyChanged("ShotsPlanned");
            }
        }

        private short? shotsPlannedField; 

        /// <summary>
        /// shotsPlannedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShotsPlannedSpecified {
            get {
                return shotsPlannedSpecifiedField;
            } 
            set {
                shotsPlannedSpecifiedField = value;
                NotifyPropertyChanged("ShotsPlannedSpecified");
            }
        }

        private bool shotsPlannedSpecifiedField; 

        /// <summary>
        /// shotsDensity property
        /// </summary>
		[Description("Number of shots per unit length (ft, m)")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "perLengthMeasure")]
		[XmlElement("shotsDensity")]
        public PerLengthMeasure ShotsDensity {
            get {
                return shotsDensityField;
            } 
            set {
                shotsDensityField = value;
                NotifyPropertyChanged("ShotsDensity");
            }
        }

        private PerLengthMeasure shotsDensityField; 

        /// <summary>
        /// shotsMisfired property
        /// </summary>
		[Description("The number of missed firings from the gun.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("shotsMisfired")]
        public short? ShotsMisfired {
            get {
                return shotsMisfiredField;
            } 
            set {
                shotsMisfiredField = value;
                 this.ShotsMisfiredSpecified = true;
                NotifyPropertyChanged("ShotsMisfired");
            }
        }

        private short? shotsMisfiredField; 

        /// <summary>
        /// shotsMisfiredSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShotsMisfiredSpecified {
            get {
                return shotsMisfiredSpecifiedField;
            } 
            set {
                shotsMisfiredSpecifiedField = value;
                NotifyPropertyChanged("ShotsMisfiredSpecified");
            }
        }

        private bool shotsMisfiredSpecifiedField; 

        /// <summary>
        /// orientation property
        /// </summary>
		[StringLength(64)]
        [Description("orientaton")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("orientation")]
        public string Orientation {
            get {
                return orientationField;
            } 
            set {
                orientationField = value;
                NotifyPropertyChanged("Orientation");
            }
        }

        private string orientationField; 

        /// <summary>
        /// orientationMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Description of orientaton method")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("orientationMethod")]
        public string OrientationMethod {
            get {
                return orientationMethodField;
            } 
            set {
                orientationMethodField = value;
                NotifyPropertyChanged("OrientationMethod");
            }
        }

        private string orientationMethodField; 

        /// <summary>
        /// perforationCompany property
        /// </summary>
		[StringLength(64)]
        [Description("The name of company providing the perforation.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("perforationCompany")]
        public string PerforationCompany {
            get {
                return perforationCompanyField;
            } 
            set {
                perforationCompanyField = value;
                NotifyPropertyChanged("PerforationCompany");
            }
        }

        private string perforationCompanyField; 

        /// <summary>
        /// carrierManufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("The manufacturer of the carrier.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("carrierManufacturer")]
        public string CarrierManufacturer {
            get {
                return carrierManufacturerField;
            } 
            set {
                carrierManufacturerField = value;
                NotifyPropertyChanged("CarrierManufacturer");
            }
        }

        private string carrierManufacturerField; 

        /// <summary>
        /// carrierSize property
        /// </summary>
		[Description("Size of the carrier.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("carrierSize")]
        public LengthMeasure CarrierSize {
            get {
                return carrierSizeField;
            } 
            set {
                carrierSizeField = value;
                NotifyPropertyChanged("CarrierSize");
            }
        }

        private LengthMeasure carrierSizeField; 

        /// <summary>
        /// carrierDescription property
        /// </summary>
		[StringLength(4000)]
        [Description("Description from carrier")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("carrierDescription")]
        public string CarrierDescription {
            get {
                return carrierDescriptionField;
            } 
            set {
                carrierDescriptionField = value;
                NotifyPropertyChanged("CarrierDescription");
            }
        }

        private string carrierDescriptionField; 

        /// <summary>
        /// chargeManufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("The manufacturer of the charge.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("chargeManufacturer")]
        public string ChargeManufacturer {
            get {
                return chargeManufacturerField;
            } 
            set {
                chargeManufacturerField = value;
                NotifyPropertyChanged("ChargeManufacturer");
            }
        }

        private string chargeManufacturerField; 

        /// <summary>
        /// chargeSize property
        /// </summary>
		[Description("The size of the charge.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("chargeSize")]
        public LengthMeasure ChargeSize {
            get {
                return chargeSizeField;
            } 
            set {
                chargeSizeField = value;
                NotifyPropertyChanged("ChargeSize");
            }
        }

        private LengthMeasure chargeSizeField; 

        /// <summary>
        /// chargeWeight property
        /// </summary>
		[Description("The weight of the charge.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("chargeWeight")]
        public MassMeasure ChargeWeight {
            get {
                return chargeWeightField;
            } 
            set {
                chargeWeightField = value;
                NotifyPropertyChanged("ChargeWeight");
            }
        }

        private MassMeasure chargeWeightField; 

        /// <summary>
        /// chargeType property
        /// </summary>
		[StringLength(64)]
        [Description("The type of the charge.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("chargeType")]
        public string ChargeType {
            get {
                return chargeTypeField;
            } 
            set {
                chargeTypeField = value;
                NotifyPropertyChanged("ChargeType");
            }
        }

        private string chargeTypeField; 

        /// <summary>
        /// refLog property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to the log")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("refLog")]
        public string RefLog {
            get {
                return refLogField;
            } 
            set {
                refLogField = value;
                NotifyPropertyChanged("RefLog");
            }
        }

        private string refLogField; 

        /// <summary>
        /// gunCentralized property
        /// </summary>
		[StringLength(64)]
        [Description("True if centralized, else decentralized.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("gunCentralized")]
        public string GunCentralized {
            get {
                return gunCentralizedField;
            } 
            set {
                gunCentralizedField = value;
                NotifyPropertyChanged("GunCentralized");
            }
        }

        private string gunCentralizedField; 

        /// <summary>
        /// gunSize property
        /// </summary>
		[Description("The size of the perforation gun.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("gunSize")]
        public LengthMeasure GunSize {
            get {
                return gunSizeField;
            } 
            set {
                gunSizeField = value;
                NotifyPropertyChanged("GunSize");
            }
        }

        private LengthMeasure gunSizeField; 

        /// <summary>
        /// gunDesciption property
        /// </summary>
		[StringLength(4000)]
        [Description("Description about the perforating gun.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("gunDesciption")]
        public string GunDesciption {
            get {
                return gunDesciptionField;
            } 
            set {
                gunDesciptionField = value;
                NotifyPropertyChanged("GunDesciption");
            }
        }

        private string gunDesciptionField; 

        /// <summary>
        /// gunLeftInHole property
        /// </summary>
		[Description("Flag indicating whether the gun is left in hole or not.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("gunLeftInHole")]
        public bool? GunLeftInHole {
            get {
                return gunLeftInHoleField;
            } 
            set {
                gunLeftInHoleField = value;
                 this.GunLeftInHoleSpecified = true;
                NotifyPropertyChanged("GunLeftInHole");
            }
        }

        private bool? gunLeftInHoleField; 

        /// <summary>
        /// gunLeftInHoleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GunLeftInHoleSpecified {
            get {
                return gunLeftInHoleSpecifiedField;
            } 
            set {
                gunLeftInHoleSpecifiedField = value;
                NotifyPropertyChanged("GunLeftInHoleSpecified");
            }
        }

        private bool gunLeftInHoleSpecifiedField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_perforatingExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perforatingExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_perforatingExtension xsd type.")]
    public partial class PerforatingExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// perforationSetRefID property
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The perforationSet reference ID.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("perforationSetRefID")]
        public string PerforationSetRefID {
            get {
                return perforationSetRefIDField;
            } 
            set {
                perforationSetRefIDField = value;
                NotifyPropertyChanged("PerforationSetRefID");
            }
        }

        private string perforationSetRefIDField; 

        /// <summary>
        /// perforating property
        /// </summary>
		[Description("Information on perforating event.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_perforating")]
		[XmlElement("perforating")]
        public List<Perforating> Perforating {
            get {
                return perforatingField;
            } 
            set {
                perforatingField = value;
                NotifyPropertyChanged("Perforating");
            }
        }

         /// <summary>
         /// bool to indicate if Perforating has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforatingSpecified
         {
             get {
             if(perforatingField!=null)
                 return perforatingField.Count>0?true:false;
             else return false;
             }
         }
        private List<Perforating> perforatingField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_waitingOnExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_waitingOnExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_waitingOnExtension xsd type.")]
    public partial class WaitingOnExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// subCategory property
        /// </summary>
		[StringLength(64)]
        [Description("Sub category")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("subCategory")]
        public string SubCategory {
            get {
                return subCategoryField;
            } 
            set {
                subCategoryField = value;
                NotifyPropertyChanged("SubCategory");
            }
        }

        private string subCategoryField; 

        /// <summary>
        /// chargeTypeCode property
        /// </summary>
		[StringLength(64)]
        [Description("Code for charge type")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("chargeTypeCode")]
        public string ChargeTypeCode {
            get {
                return chargeTypeCodeField;
            } 
            set {
                chargeTypeCodeField = value;
                NotifyPropertyChanged("ChargeTypeCode");
            }
        }

        private string chargeTypeCodeField; 

        /// <summary>
        /// businessOrgWaitingOn property
        /// </summary>
		[StringLength(64)]
        [Description("Business organization waiting on")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("businessOrgWaitingOn")]
        public string BusinessOrgWaitingOn {
            get {
                return businessOrgWaitingOnField;
            } 
            set {
                businessOrgWaitingOnField = value;
                NotifyPropertyChanged("BusinessOrgWaitingOn");
            }
        }

        private string businessOrgWaitingOnField; 

        /// <summary>
        /// isNoChargeToProducer property
        /// </summary>
		[Description("Flag indicating whether producer is charged or not")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isNoChargeToProducer")]
        public bool? IsNoChargeToProducer {
            get {
                return isNoChargeToProducerField;
            } 
            set {
                isNoChargeToProducerField = value;
                 this.IsNoChargeToProducerSpecified = true;
                NotifyPropertyChanged("IsNoChargeToProducer");
            }
        }

        private bool? isNoChargeToProducerField; 

        /// <summary>
        /// isNoChargeToProducerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsNoChargeToProducerSpecified {
            get {
                return isNoChargeToProducerSpecifiedField;
            } 
            set {
                isNoChargeToProducerSpecifiedField = value;
                NotifyPropertyChanged("IsNoChargeToProducerSpecified");
            }
        }

        private bool isNoChargeToProducerSpecifiedField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_pressureTestExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_pressureTestExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_pressureTestExtension xsd type.")]
    public partial class PressureTestExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// diaOrificeSize property
        /// </summary>
		[Description("Orifice Size")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaOrificeSize")]
        public LengthMeasure DiaOrificeSize {
            get {
                return diaOrificeSizeField;
            } 
            set {
                diaOrificeSizeField = value;
                NotifyPropertyChanged("DiaOrificeSize");
            }
        }

        private LengthMeasure diaOrificeSizeField; 

        /// <summary>
        /// dTimeNextTestDate property
        /// </summary>
		[Description("Next Test Date")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimeNextTestDate")]
        public Timestamp? DTimeNextTestDate {
            get {
                return dTimeNextTestDateField;
            } 
            set {
                dTimeNextTestDateField = value;
                 this.DTimeNextTestDateSpecified = true;
                NotifyPropertyChanged("DTimeNextTestDate");
            }
        }

        private Timestamp? dTimeNextTestDateField; 

        /// <summary>
        /// dTimeNextTestDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DTimeNextTestDateSpecified {
            get {
                return dTimeNextTestDateSpecifiedField;
            } 
            set {
                dTimeNextTestDateSpecifiedField = value;
                NotifyPropertyChanged("DTimeNextTestDateSpecified");
            }
        }

        private bool dTimeNextTestDateSpecifiedField; 

        /// <summary>
        /// flowrateRateBled property
        /// </summary>
		[Description("Rate Bled")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("flowrateRateBled")]
        public VolumeFlowRateMeasure FlowrateRateBled {
            get {
                return flowrateRateBledField;
            } 
            set {
                flowrateRateBledField = value;
                NotifyPropertyChanged("FlowrateRateBled");
            }
        }

        private VolumeFlowRateMeasure flowrateRateBledField; 

        /// <summary>
        /// identifierJob property
        /// </summary>
		[StringLength(64)]
        [Description("String Being Tested")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("identifierJob")]
        public string IdentifierJob {
            get {
                return identifierJobField;
            } 
            set {
                identifierJobField = value;
                NotifyPropertyChanged("IdentifierJob");
            }
        }

        private string identifierJobField; 

        /// <summary>
        /// isSuccess property
        /// </summary>
		[Description("True if successful")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isSuccess")]
        public bool? IsSuccess {
            get {
                return isSuccessField;
            } 
            set {
                isSuccessField = value;
                 this.IsSuccessSpecified = true;
                NotifyPropertyChanged("IsSuccess");
            }
        }

        private bool? isSuccessField; 

        /// <summary>
        /// isSuccessSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsSuccessSpecified {
            get {
                return isSuccessSpecifiedField;
            } 
            set {
                isSuccessSpecifiedField = value;
                NotifyPropertyChanged("IsSuccessSpecified");
            }
        }

        private bool isSuccessSpecifiedField; 

        /// <summary>
        /// maxPressureDuration property
        /// </summary>
		[Description("Maximum pressure held during test")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maxPressureDuration")]
        public PressureMeasure MaxPressureDuration {
            get {
                return maxPressureDurationField;
            } 
            set {
                maxPressureDurationField = value;
                NotifyPropertyChanged("MaxPressureDuration");
            }
        }

        private PressureMeasure maxPressureDurationField; 

        /// <summary>
        /// circulatingPosition property
        /// </summary>
		[StringLength(64)]
        [Description("Circulating position")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("circulatingPosition")]
        public string CirculatingPosition {
            get {
                return circulatingPositionField;
            } 
            set {
                circulatingPositionField = value;
                NotifyPropertyChanged("CirculatingPosition");
            }
        }

        private string circulatingPositionField; 

        /// <summary>
        /// fluidBledType property
        /// </summary>
		[StringLength(64)]
        [Description("Fluid bled type")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("fluidBledType")]
        public string FluidBledType {
            get {
                return fluidBledTypeField;
            } 
            set {
                fluidBledTypeField = value;
                NotifyPropertyChanged("FluidBledType");
            }
        }

        private string fluidBledTypeField; 

        /// <summary>
        /// orientationMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Description of orientaton method")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("orientationMethod")]
        public string OrientationMethod {
            get {
                return orientationMethodField;
            } 
            set {
                orientationMethodField = value;
                NotifyPropertyChanged("OrientationMethod");
            }
        }

        private string orientationMethodField; 

        /// <summary>
        /// testFluidType property
        /// </summary>
		[StringLength(64)]
        [Description("Test fluid type")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("testFluidType")]
        public string TestFluidType {
            get {
                return testFluidTypeField;
            } 
            set {
                testFluidTypeField = value;
                NotifyPropertyChanged("TestFluidType");
            }
        }

        private string testFluidTypeField; 

        /// <summary>
        /// testSubType property
        /// </summary>
		[StringLength(64)]
        [Description("Test sub type")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("testSubType")]
        public string TestSubType {
            get {
                return testSubTypeField;
            } 
            set {
                testSubTypeField = value;
                NotifyPropertyChanged("TestSubType");
            }
        }

        private string testSubTypeField; 

        /// <summary>
        /// testType property
        /// </summary>
		[StringLength(64)]
        [Description("Test type")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("testType")]
        public string TestType {
            get {
                return testTypeField;
            } 
            set {
                testTypeField = value;
                NotifyPropertyChanged("TestType");
            }
        }

        private string testTypeField; 

        /// <summary>
        /// annulusPressure property
        /// </summary>
		[Description("Annulus pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("annulusPressure")]
        public PressureMeasure AnnulusPressure {
            get {
                return annulusPressureField;
            } 
            set {
                annulusPressureField = value;
                NotifyPropertyChanged("AnnulusPressure");
            }
        }

        private PressureMeasure annulusPressureField; 

        /// <summary>
        /// wellPressureUsed property
        /// </summary>
		[StringLength(64)]
        [Description("Well pressure used")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("wellPressureUsed")]
        public string WellPressureUsed {
            get {
                return wellPressureUsedField;
            } 
            set {
                wellPressureUsedField = value;
                NotifyPropertyChanged("WellPressureUsed");
            }
        }

        private string wellPressureUsedField; 

        /// <summary>
        /// str10Reference property
        /// </summary>
		[StringLength(64)]
        [Description("Reference #")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("str10Reference")]
        public string Str10Reference {
            get {
                return str10ReferenceField;
            } 
            set {
                str10ReferenceField = value;
                NotifyPropertyChanged("Str10Reference");
            }
        }

        private string str10ReferenceField; 

        /// <summary>
        /// uidAssembly property
        /// </summary>
		[StringLength(64)]
        [Description("Well (Assembly)")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("uidAssembly")]
        public string UidAssembly {
            get {
                return uidAssemblyField;
            } 
            set {
                uidAssemblyField = value;
                NotifyPropertyChanged("UidAssembly");
            }
        }

        private string uidAssemblyField; 

        /// <summary>
        /// volumeBled property
        /// </summary>
		[Description("Volume Bled")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volumeBled")]
        public VolumeMeasure VolumeBled {
            get {
                return volumeBledField;
            } 
            set {
                volumeBledField = value;
                NotifyPropertyChanged("VolumeBled");
            }
        }

        private VolumeMeasure volumeBledField; 

        /// <summary>
        /// volumeLost property
        /// </summary>
		[Description("Volume Lost")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volumeLost")]
        public VolumeMeasure VolumeLost {
            get {
                return volumeLostField;
            } 
            set {
                volumeLostField = value;
                NotifyPropertyChanged("VolumeLost");
            }
        }

        private VolumeMeasure volumeLostField; 

        /// <summary>
        /// volumePumped property
        /// </summary>
		[Description("Volume Pumped")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volumePumped")]
        public VolumeMeasure VolumePumped {
            get {
                return volumePumpedField;
            } 
            set {
                volumePumpedField = value;
                NotifyPropertyChanged("VolumePumped");
            }
        }

        private VolumeMeasure volumePumpedField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_jobExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_jobExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_jobExtension xsd type.")]
    public partial class JobExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// jobReason property
        /// </summary>
		[StringLength(4000)]
        [Description("Comment on the reason for the job")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("jobReason")]
        public string JobReason {
            get {
                return jobReasonField;
            } 
            set {
                jobReasonField = value;
                NotifyPropertyChanged("JobReason");
            }
        }

        private string jobReasonField; 

        /// <summary>
        /// jobStatus property
        /// </summary>
		[StringLength(64)]
        [Description("Status of job")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("jobStatus")]
        public string JobStatus {
            get {
                return jobStatusField;
            } 
            set {
                jobStatusField = value;
                NotifyPropertyChanged("JobStatus");
            }
        }

        private string jobStatusField; 

        /// <summary>
        /// primaryMotivationForJob property
        /// </summary>
		[StringLength(64)]
        [Description("The primary reason for doing this job.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("primaryMotivationForJob")]
        public string PrimaryMotivationForJob {
            get {
                return primaryMotivationForJobField;
            } 
            set {
                primaryMotivationForJobField = value;
                NotifyPropertyChanged("PrimaryMotivationForJob");
            }
        }

        private string primaryMotivationForJobField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_acidizefracExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_acidizefracExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_acidizefracExtension xsd type.")]
    public partial class AcidizefracExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// stimJobID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to stimJob")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("stimJobID")]
        public string StimJobID {
            get {
                return stimJobIDField;
            } 
            set {
                stimJobIDField = value;
                NotifyPropertyChanged("StimJobID");
            }
        }

        private string stimJobIDField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_BHPExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_BHPExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_BHPExtension xsd type.")]
    public partial class BHPExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// BHPRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to bottom hole pressure")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("BHPRefID")]
        public string BHPRefID {
            get {
                return BHPRefIDField;
            } 
            set {
                BHPRefIDField = value;
                NotifyPropertyChanged("BHPRefID");
            }
        }

        private string BHPRefIDField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_lostCirculationExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_lostCirculationExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_lostCirculationExtension xsd type.")]
    public partial class LostCirculationExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// volumeLost property
        /// </summary>
		[Description("Volume lost")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volumeLost")]
        public VolumeMeasure VolumeLost {
            get {
                return volumeLostField;
            } 
            set {
                volumeLostField = value;
                NotifyPropertyChanged("VolumeLost");
            }
        }

        private VolumeMeasure volumeLostField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_directionalSurveyExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_directionalSurveyExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_directionalSurveyExtension xsd type.")]
    public partial class DirectionalSurveyExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// trajectoryRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("trajectory reference id.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("trajectoryRefID")]
        public string TrajectoryRefID {
            get {
                return trajectoryRefIDField;
            } 
            set {
                trajectoryRefIDField = value;
                NotifyPropertyChanged("TrajectoryRefID");
            }
        }

        private string trajectoryRefIDField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_cleanFillExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cleanFillExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_cleanFillExtension xsd type.")]
    public partial class CleanFillExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// fillCleaningMethod property
        /// </summary>
		[StringLength(64)]
        [Description("method of fill and cleaning")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("fillCleaningMethod")]
        public string FillCleaningMethod {
            get {
                return fillCleaningMethodField;
            } 
            set {
                fillCleaningMethodField = value;
                NotifyPropertyChanged("FillCleaningMethod");
            }
        }

        private string fillCleaningMethodField; 

        /// <summary>
        /// toolSize property
        /// </summary>
		[Description("the size of the tool")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("toolSize")]
        public LengthMeasure ToolSize {
            get {
                return toolSizeField;
            } 
            set {
                toolSizeField = value;
                NotifyPropertyChanged("ToolSize");
            }
        }

        private LengthMeasure toolSizeField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_cementExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_cementExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_cementExtension xsd type.")]
    public partial class CementExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// cementJobRefID property
        /// </summary>
		[StringLength(64)]
        [Description("unique id of cementJob")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("cementJobRefID")]
        public string CementJobRefID {
            get {
                return cementJobRefIDField;
            } 
            set {
                cementJobRefIDField = value;
                NotifyPropertyChanged("CementJobRefID");
            }
        }

        private string cementJobRefIDField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_eventExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_eventExtension", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_eventExtension xsd type.")]
    public partial class EventExtension : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// BHPExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("BHPExtension")]
        public BHPExtension BHPExtension {
            get {
                return BHPExtensionField;
            } 
            set {
                BHPExtensionField = value;
                BHPExtensionSpecified = (value!=null);
                NotifyPropertyChanged("BHPExtension");
            }
        }

        private BHPExtension BHPExtensionField; 
        private bool bHPExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if BHPExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BHPExtensionSpecified
        {
            get {
                return bHPExtensionSpecified;
            }
            set {
                bHPExtensionSpecified= value;
            }
        }

        /// <summary>
        /// acidizeFracExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("acidizeFracExtension")]
        public AcidizefracExtension AcidizeFracExtension {
            get {
                return acidizeFracExtensionField;
            } 
            set {
                acidizeFracExtensionField = value;
                AcidizeFracExtensionSpecified = (value!=null);
                NotifyPropertyChanged("AcidizeFracExtension");
            }
        }

        private AcidizefracExtension acidizeFracExtensionField; 
        private bool acidizeFracExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if AcidizeFracExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool AcidizeFracExtensionSpecified
        {
            get {
                return acidizeFracExtensionSpecified;
            }
            set {
                acidizeFracExtensionSpecified= value;
            }
        }

        /// <summary>
        /// cementExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("cementExtension")]
        public CementExtension CementExtension {
            get {
                return cementExtensionField;
            } 
            set {
                cementExtensionField = value;
                CementExtensionSpecified = (value!=null);
                NotifyPropertyChanged("CementExtension");
            }
        }

        private CementExtension cementExtensionField; 
        private bool cementExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if CementExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CementExtensionSpecified
        {
            get {
                return cementExtensionSpecified;
            }
            set {
                cementExtensionSpecified= value;
            }
        }

        /// <summary>
        /// cleanFillExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("cleanFillExtension")]
        public CleanFillExtension CleanFillExtension {
            get {
                return cleanFillExtensionField;
            } 
            set {
                cleanFillExtensionField = value;
                CleanFillExtensionSpecified = (value!=null);
                NotifyPropertyChanged("CleanFillExtension");
            }
        }

        private CleanFillExtension cleanFillExtensionField; 
        private bool cleanFillExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if CleanFillExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CleanFillExtensionSpecified
        {
            get {
                return cleanFillExtensionSpecified;
            }
            set {
                cleanFillExtensionSpecified= value;
            }
        }

        /// <summary>
        /// directionalSurveyExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("directionalSurveyExtension")]
        public DirectionalSurveyExtension DirectionalSurveyExtension {
            get {
                return directionalSurveyExtensionField;
            } 
            set {
                directionalSurveyExtensionField = value;
                DirectionalSurveyExtensionSpecified = (value!=null);
                NotifyPropertyChanged("DirectionalSurveyExtension");
            }
        }

        private DirectionalSurveyExtension directionalSurveyExtensionField; 
        private bool directionalSurveyExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if DirectionalSurveyExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DirectionalSurveyExtensionSpecified
        {
            get {
                return directionalSurveyExtensionSpecified;
            }
            set {
                directionalSurveyExtensionSpecified= value;
            }
        }

        /// <summary>
        /// downholeExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("downholeExtension")]
        public DownholeExtension DownholeExtension {
            get {
                return downholeExtensionField;
            } 
            set {
                downholeExtensionField = value;
                DownholeExtensionSpecified = (value!=null);
                NotifyPropertyChanged("DownholeExtension");
            }
        }

        private DownholeExtension downholeExtensionField; 
        private bool downholeExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if DownholeExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DownholeExtensionSpecified
        {
            get {
                return downholeExtensionSpecified;
            }
            set {
                downholeExtensionSpecified= value;
            }
        }

        /// <summary>
        /// fluidReportExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("fluidReportExtension")]
        public FluidReportExtension FluidReportExtension {
            get {
                return fluidReportExtensionField;
            } 
            set {
                fluidReportExtensionField = value;
                FluidReportExtensionSpecified = (value!=null);
                NotifyPropertyChanged("FluidReportExtension");
            }
        }

        private FluidReportExtension fluidReportExtensionField; 
        private bool fluidReportExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if FluidReportExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool FluidReportExtensionSpecified
        {
            get {
                return fluidReportExtensionSpecified;
            }
            set {
                fluidReportExtensionSpecified= value;
            }
        }

        /// <summary>
        /// jobExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("jobExtension")]
        public JobExtension JobExtension {
            get {
                return jobExtensionField;
            } 
            set {
                jobExtensionField = value;
                JobExtensionSpecified = (value!=null);
                NotifyPropertyChanged("JobExtension");
            }
        }

        private JobExtension jobExtensionField; 
        private bool jobExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if JobExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool JobExtensionSpecified
        {
            get {
                return jobExtensionSpecified;
            }
            set {
                jobExtensionSpecified= value;
            }
        }

        /// <summary>
        /// lostCirculationExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("lostCirculationExtension")]
        public LostCirculationExtension LostCirculationExtension {
            get {
                return lostCirculationExtensionField;
            } 
            set {
                lostCirculationExtensionField = value;
                LostCirculationExtensionSpecified = (value!=null);
                NotifyPropertyChanged("LostCirculationExtension");
            }
        }

        private LostCirculationExtension lostCirculationExtensionField; 
        private bool lostCirculationExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if LostCirculationExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LostCirculationExtensionSpecified
        {
            get {
                return lostCirculationExtensionSpecified;
            }
            set {
                lostCirculationExtensionSpecified= value;
            }
        }

        /// <summary>
        /// perforationExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("perforationExtension")]
        public PerforatingExtension PerforationExtension {
            get {
                return perforationExtensionField;
            } 
            set {
                perforationExtensionField = value;
                PerforationExtensionSpecified = (value!=null);
                NotifyPropertyChanged("PerforationExtension");
            }
        }

        private PerforatingExtension perforationExtensionField; 
        private bool perforationExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if PerforationExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool PerforationExtensionSpecified
        {
            get {
                return perforationExtensionSpecified;
            }
            set {
                perforationExtensionSpecified= value;
            }
        }

        /// <summary>
        /// pressureTestExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("pressureTestExtension")]
        public PressureTestExtension PressureTestExtension {
            get {
                return pressureTestExtensionField;
            } 
            set {
                pressureTestExtensionField = value;
                PressureTestExtensionSpecified = (value!=null);
                NotifyPropertyChanged("PressureTestExtension");
            }
        }

        private PressureTestExtension pressureTestExtensionField; 
        private bool pressureTestExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if PressureTestExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool PressureTestExtensionSpecified
        {
            get {
                return pressureTestExtensionSpecified;
            }
            set {
                pressureTestExtensionSpecified= value;
            }
        }

        /// <summary>
        /// waitingOnExtension property
        /// </summary>
        [ComponentElement]
        [XmlElement("waitingOnExtension")]
        public WaitingOnExtension WaitingOnExtension {
            get {
                return waitingOnExtensionField;
            } 
            set {
                waitingOnExtensionField = value;
                WaitingOnExtensionSpecified = (value!=null);
                NotifyPropertyChanged("WaitingOnExtension");
            }
        }

        private WaitingOnExtension waitingOnExtensionField; 
        private bool waitingOnExtensionSpecified = false; 

        /// <summary>
        /// bool to indicate if WaitingOnExtension has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool WaitingOnExtensionSpecified
        {
            get {
                return waitingOnExtensionSpecified;
            }
            set {
                waitingOnExtensionSpecified= value;
            }
        }



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the downholeStringRef xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="downholeStringRef", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the downholeStringRef xsd type.")]
    public partial class DownholeStringRef : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// stringEquipmentRefID property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("stringEquipmentRefID")]
        public List<string> StringEquipmentRefID {
            get {
                return stringEquipmentRefIDField;
            } 
            set {
                stringEquipmentRefIDField = value;
                NotifyPropertyChanged("StringEquipmentRefID");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentRefIDSpecified
         {
             get {
             if(stringEquipmentRefIDField!=null)
                 return stringEquipmentRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> stringEquipmentRefIDField; 

		/// <summary>
        /// downholeStringRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("downholeStringRefID")]
		
        public string DownholeStringRefID {
            get {
                return downholeStringRefIDField;
            } 
            set {
                downholeStringRefIDField = value;
                NotifyPropertyChanged("DownholeStringRefID");
            }
        }

        private string downholeStringRefIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the boreholeStringRef xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="boreholeStringRef", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the boreholeStringRef xsd type.")]
    public partial class BoreholeStringRef : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// stringEquipmentRefID property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("stringEquipmentRefID")]
        public List<string> StringEquipmentRefID {
            get {
                return stringEquipmentRefIDField;
            } 
            set {
                stringEquipmentRefIDField = value;
                NotifyPropertyChanged("StringEquipmentRefID");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentRefIDSpecified
         {
             get {
             if(stringEquipmentRefIDField!=null)
                 return stringEquipmentRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> stringEquipmentRefIDField; 

		/// <summary>
        /// boreholeStringRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("boreholeStringRefID")]
		
        public string BoreholeStringRefID {
            get {
                return boreholeStringRefIDField;
            } 
            set {
                boreholeStringRefIDField = value;
                NotifyPropertyChanged("BoreholeStringRefID");
            }
        }

        private string boreholeStringRefIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the downholeComponentRef xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="downholeComponentRef", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the downholeComponentRef xsd type.")]
    public partial class DownholeComponentRef : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// stringEquipmentRefID property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("stringEquipmentRefID")]
        public List<string> StringEquipmentRefID {
            get {
                return stringEquipmentRefIDField;
            } 
            set {
                stringEquipmentRefIDField = value;
                NotifyPropertyChanged("StringEquipmentRefID");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentRefIDSpecified
         {
             get {
             if(stringEquipmentRefIDField!=null)
                 return stringEquipmentRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> stringEquipmentRefIDField; 

        /// <summary>
        /// boreholeStringRef property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "boreholeStringRef")]
		[XmlElement("boreholeStringRef")]
        public List<BoreholeStringRef> BoreholeStringRef {
            get {
                return boreholeStringRefField;
            } 
            set {
                boreholeStringRefField = value;
                NotifyPropertyChanged("BoreholeStringRef");
            }
        }

         /// <summary>
         /// bool to indicate if BoreholeStringRef has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeStringRefSpecified
         {
             get {
             if(boreholeStringRefField!=null)
                 return boreholeStringRefField.Count>0?true:false;
             else return false;
             }
         }
        private List<BoreholeStringRef> boreholeStringRefField; 

        /// <summary>
        /// downholeStringsRef property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "downholeStringRef")]
		[XmlElement("downholeStringsRef")]
        public List<DownholeStringRef> DownholeStringsRef {
            get {
                return downholeStringsRefField;
            } 
            set {
                downholeStringsRefField = value;
                NotifyPropertyChanged("DownholeStringsRef");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeStringsRef has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeStringsRefSpecified
         {
             get {
             if(downholeStringsRefField!=null)
                 return downholeStringsRefField.Count>0?true:false;
             else return false;
             }
         }
        private List<DownholeStringRef> downholeStringsRefField; 

        /// <summary>
        /// perforationSetRefID property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("perforationSetRefID")]
        public List<string> PerforationSetRefID {
            get {
                return perforationSetRefIDField;
            } 
            set {
                perforationSetRefIDField = value;
                NotifyPropertyChanged("PerforationSetRefID");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSetRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetRefIDSpecified
         {
             get {
             if(perforationSetRefIDField!=null)
                 return perforationSetRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> perforationSetRefIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the eventType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="eventType", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the eventType xsd type.")]
    public partial class EventType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EventType class.
        /// </summary>
        public EventType() {}

        /// <summary>
        /// Initializes a new instance of the EventType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public EventType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// class property
        /// </summary>
		[Description("Class of the event type (job, daily report, etc.)")]
        [EnergisticsDataTypeAttribute(DataType = "EventClassType")]
        [XmlAttribute("class")]
		
        public EventClassType Class {
            get {
                return classField;
            } 
            set {
                classField = value;
                 this.ClassSpecified = true;
                NotifyPropertyChanged("Class");
            }
        }

        private EventClassType classField; 

        /// <summary>
        /// classSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ClassSpecified {
            get {
                return classSpecifiedField;
            } 
            set {
                classSpecifiedField = value;
                NotifyPropertyChanged("ClassSpecified");
            }
        }

        private bool classSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the obj_wellCMLedger xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellCMLedger", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("This class represents the obj_wellCMLedger xsd type.")]
    public partial class WellCMLedger : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// nameWell property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Well name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// nameWellbore property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Wellbore name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("Ledger name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// parentEventID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Parent event reference id.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("parentEventID")]
        public string ParentEventID {
            get {
                return parentEventIDField;
            } 
            set {
                parentEventIDField = value;
                NotifyPropertyChanged("ParentEventID");
            }
        }

        private string parentEventIDField; 

        /// <summary>
        /// dTimStart property
        /// </summary>
		[Description("Date and time that activities started.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// dTimEnd property
        /// </summary>
		[Description("Date and time that activities were completed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// duration property
        /// </summary>
		[Description("The activity duration (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("duration")]
        public TimeMeasure Duration {
            get {
                return durationField;
            } 
            set {
                durationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure durationField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth at Top of Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth at bottom of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// eventOrder property
        /// </summary>
		[Description("Order number of event.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("eventOrder")]
        public short? EventOrder {
            get {
                return eventOrderField;
            } 
            set {
                eventOrderField = value;
                 this.EventOrderSpecified = true;
                NotifyPropertyChanged("EventOrder");
            }
        }

        private short? eventOrderField; 

        /// <summary>
        /// eventOrderSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EventOrderSpecified {
            get {
                return eventOrderSpecifiedField;
            } 
            set {
                eventOrderSpecifiedField = value;
                NotifyPropertyChanged("EventOrderSpecified");
            }
        }

        private bool eventOrderSpecifiedField; 

        /// <summary>
        /// rigID property
        /// </summary>
		[Description("Rig reference id.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("rigID")]
        public List<string> RigID {
            get {
                return rigIDField;
            } 
            set {
                rigIDField = value;
                NotifyPropertyChanged("RigID");
            }
        }

         /// <summary>
         /// bool to indicate if RigID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RigIDSpecified
         {
             get {
             if(rigIDField!=null)
                 return rigIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> rigIDField; 

        /// <summary>
        /// activityCode property
        /// </summary>
		[Description("Activity code")]
        [EnergisticsDataTypeAttribute(DataType = "ActivityCode")]
		[XmlElement("activityCode")]
        public ActivityCode ActivityCode {
            get {
                return activityCodeField;
            } 
            set {
                activityCodeField = value;
                 this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private ActivityCode activityCodeField; 

        /// <summary>
        /// activityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ActivityCodeSpecified {
            get {
                return activityCodeSpecifiedField;
            } 
            set {
                activityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private bool activityCodeSpecifiedField; 

        /// <summary>
        /// type property
        /// </summary>
		[Description("Comment on type of this event, either referring to a job type or an  activity type e.g. a safety meeting.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "eventType")]
		[XmlElement("type")]
        public EventType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private EventType typeField; 

        /// <summary>
        /// isPlan property
        /// </summary>
		[Description("True if planned.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isPlan")]
        public bool? IsPlan {
            get {
                return isPlanField;
            } 
            set {
                isPlanField = value;
                 this.IsPlanSpecified = true;
                NotifyPropertyChanged("IsPlan");
            }
        }

        private bool? isPlanField; 

        /// <summary>
        /// isPlanSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsPlanSpecified {
            get {
                return isPlanSpecifiedField;
            } 
            set {
                isPlanSpecifiedField = value;
                NotifyPropertyChanged("IsPlanSpecified");
            }
        }

        private bool isPlanSpecifiedField; 

        /// <summary>
        /// workOrderID property
        /// </summary>
		[StringLength(64)]
        [Description("Extension event for work order id.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("workOrderID")]
        public string WorkOrderID {
            get {
                return workOrderIDField;
            } 
            set {
                workOrderIDField = value;
                NotifyPropertyChanged("WorkOrderID");
            }
        }

        private string workOrderIDField; 

        /// <summary>
        /// downholeComponentRef property
        /// </summary>
		[Description("this is to associate with verb(Event) and noun (downholeEquipment). to refer to the whole downholeComponent using downholeComponentExtension.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "downholeComponentRef")]
		[XmlElement("downholeComponentRef")]
        public DownholeComponentRef DownholeComponentRef {
            get {
                return downholeComponentRefField;
            } 
            set {
                downholeComponentRefField = value;
                NotifyPropertyChanged("DownholeComponentRef");
            }
        }

        private DownholeComponentRef downholeComponentRefField; 

        /// <summary>
        /// eventExtension property
        /// </summary>
		[Description("Event extensions")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventExtension")]
		[XmlElement("eventExtension")]
        public List<EventExtension> EventExtension {
            get {
                return eventExtensionField;
            } 
            set {
                eventExtensionField = value;
                NotifyPropertyChanged("EventExtension");
            }
        }

         /// <summary>
         /// bool to indicate if EventExtension has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EventExtensionSpecified
         {
             get {
             if(eventExtensionField!=null)
                 return eventExtensionField.Count>0?true:false;
             else return false;
             }
         }
        private List<EventExtension> eventExtensionField; 

        /// <summary>
        /// businessAssociate property
        /// </summary>
		[StringLength(64)]
        [Description("Service company or business")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("businessAssociate")]
        public string BusinessAssociate {
            get {
                return businessAssociateField;
            } 
            set {
                businessAssociateField = value;
                NotifyPropertyChanged("BusinessAssociate");
            }
        }

        private string businessAssociateField; 

        /// <summary>
        /// responsiblePerson property
        /// </summary>
		[StringLength(64)]
        [Description("Name or information about person responsible who is implementing the service or job.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("responsiblePerson")]
        public string ResponsiblePerson {
            get {
                return responsiblePersonField;
            } 
            set {
                responsiblePersonField = value;
                NotifyPropertyChanged("ResponsiblePerson");
            }
        }

        private string responsiblePersonField; 

        /// <summary>
        /// contact property
        /// </summary>
		[StringLength(64)]
        [Description("Contact name or person to get in touch with. Might not necessarily be the person responsible.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("contact")]
        public string Contact {
            get {
                return contactField;
            } 
            set {
                contactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

        private string contactField; 

        /// <summary>
        /// cost property
        /// </summary>
		[Description("The job or event cost detail.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_dayCost")]
		[XmlElement("cost")]
        public List<DayCost> Cost {
            get {
                return costField;
            } 
            set {
                costField = value;
                NotifyPropertyChanged("Cost");
            }
        }

         /// <summary>
         /// bool to indicate if Cost has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CostSpecified
         {
             get {
             if(costField!=null)
                 return costField.Count>0?true:false;
             else return false;
             }
         }
        private List<DayCost> costField; 

        /// <summary>
        /// nonproductive property
        /// </summary>
		[Description("True if event is not productive.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("nonproductive")]
        public bool? Nonproductive {
            get {
                return nonproductiveField;
            } 
            set {
                nonproductiveField = value;
                 this.NonproductiveSpecified = true;
                NotifyPropertyChanged("Nonproductive");
            }
        }

        private bool? nonproductiveField; 

        /// <summary>
        /// nonproductiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NonproductiveSpecified {
            get {
                return nonproductiveSpecifiedField;
            } 
            set {
                nonproductiveSpecifiedField = value;
                NotifyPropertyChanged("NonproductiveSpecified");
            }
        }

        private bool nonproductiveSpecifiedField; 

        /// <summary>
        /// trouble property
        /// </summary>
		[Description("True if event implies is in-trouble")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("trouble")]
        public bool? Trouble {
            get {
                return troubleField;
            } 
            set {
                troubleField = value;
                 this.TroubleSpecified = true;
                NotifyPropertyChanged("Trouble");
            }
        }

        private bool? troubleField; 

        /// <summary>
        /// troubleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TroubleSpecified {
            get {
                return troubleSpecifiedField;
            } 
            set {
                troubleSpecifiedField = value;
                NotifyPropertyChanged("TroubleSpecified");
            }
        }

        private bool troubleSpecifiedField; 

        /// <summary>
        /// preventiveMaintenance property
        /// </summary>
		[Description("True of event is for preventive maintenance")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("preventiveMaintenance")]
        public bool? PreventiveMaintenance {
            get {
                return preventiveMaintenanceField;
            } 
            set {
                preventiveMaintenanceField = value;
                 this.PreventiveMaintenanceSpecified = true;
                NotifyPropertyChanged("PreventiveMaintenance");
            }
        }

        private bool? preventiveMaintenanceField; 

        /// <summary>
        /// preventiveMaintenanceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PreventiveMaintenanceSpecified {
            get {
                return preventiveMaintenanceSpecifiedField;
            } 
            set {
                preventiveMaintenanceSpecifiedField = value;
                NotifyPropertyChanged("PreventiveMaintenanceSpecified");
            }
        }

        private bool preventiveMaintenanceSpecifiedField; 

        /// <summary>
        /// unplanned property
        /// </summary>
		[Description("True if there is no planning infomation for this activity.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("unplanned")]
        public bool? Unplanned {
            get {
                return unplannedField;
            } 
            set {
                unplannedField = value;
                 this.UnplannedSpecified = true;
                NotifyPropertyChanged("Unplanned");
            }
        }

        private bool? unplannedField; 

        /// <summary>
        /// unplannedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UnplannedSpecified {
            get {
                return unplannedSpecifiedField;
            } 
            set {
                unplannedSpecifiedField = value;
                NotifyPropertyChanged("UnplannedSpecified");
            }
        }

        private bool unplannedSpecifiedField; 

        /// <summary>
        /// phase property
        /// </summary>
		[StringLength(50)]
        [Description("Phase (large activity classification) e.g. Drill Surface Hole.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("phase")]
        public string Phase {
            get {
                return phaseField;
            } 
            set {
                phaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private string phaseField; 

        /// <summary>
        /// participant property
        /// </summary>
		[Description("Participant points to the involved witsmlobjects")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_participant")]
		[XmlElement("participant")]
        public Participant Participants {
            get {
                return participantField;
            } 
            set {
                participantField = value;
                NotifyPropertyChanged("Participants");
            }
        }

        private Participant participantField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [Description("Comment on this ledger")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// commonData property
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// customData property
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

        /// <summary>
        /// description property
        /// </summary>
		[StringLength(4000)]
        [Description("Description of this ledger")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

		/// <summary>
        /// uidWell property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// uidWellbore property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_slotsInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_slotsInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_slotsInterval xsd type.")]
    public partial class SlotsInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// stringEquipmentRefUID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("stringEquipmentRefUID")]
        public string StringEquipmentRefUID {
            get {
                return stringEquipmentRefUIDField;
            } 
            set {
                stringEquipmentRefUIDField = value;
                NotifyPropertyChanged("StringEquipmentRefUID");
            }
        }

        private string stringEquipmentRefUIDField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// intervalStatusHistory property
        /// </summary>
		[Description("The contactInterval history information")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_intervalStatusHistory")]
		[XmlElement("intervalStatusHistory")]
        public List<IntervalStatusHistory> IntervalStatusHistory {
            get {
                return intervalStatusHistoryField;
            } 
            set {
                intervalStatusHistoryField = value;
                NotifyPropertyChanged("IntervalStatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if IntervalStatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IntervalStatusHistorySpecified
         {
             get {
             if(intervalStatusHistoryField!=null)
                 return intervalStatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntervalStatusHistory> intervalStatusHistoryField; 

        /// <summary>
        /// eventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventInfo")]
		[XmlElement("eventHistory")]
        public EventInfo EventHistory {
            get {
                return eventHistoryField;
            } 
            set {
                eventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo eventHistoryField; 

        /// <summary>
        /// geologyFeatureRefID property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("geologyFeatureRefID")]
        public List<string> GeologyFeatureRefID {
            get {
                return geologyFeatureRefIDField;
            } 
            set {
                geologyFeatureRefIDField = value;
                NotifyPropertyChanged("GeologyFeatureRefID");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureRefIDSpecified
         {
             get {
             if(geologyFeatureRefIDField!=null)
                 return geologyFeatureRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> geologyFeatureRefIDField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_intervalStatusHistory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_intervalStatusHistory", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_intervalStatusHistory xsd type.")]
    public partial class IntervalStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// physicalStatus property
        /// </summary>
		[Description("The physical status of an interval (e.g., open, closed, proposed)")]
        [EnergisticsDataTypeAttribute(DataType = "PhysicalStatus")]
		[XmlElement("physicalStatus")]
        public PhysicalStatus? PhysicalStatus {
            get {
                return physicalStatusField;
            } 
            set {
                physicalStatusField = value;
                 this.PhysicalStatusSpecified = true;
                NotifyPropertyChanged("PhysicalStatus");
            }
        }

        private PhysicalStatus? physicalStatusField; 

        /// <summary>
        /// physicalStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhysicalStatusSpecified {
            get {
                return physicalStatusSpecifiedField;
            } 
            set {
                physicalStatusSpecifiedField = value;
                NotifyPropertyChanged("PhysicalStatusSpecified");
            }
        }

        private bool physicalStatusSpecifiedField; 

        /// <summary>
        /// startDate property
        /// </summary>
		[Description("The start date of status and allocation factor")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("startDate")]
        public Timestamp? StartDate {
            get {
                return startDateField;
            } 
            set {
                startDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private Timestamp? startDateField; 

        /// <summary>
        /// startDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return startDateSpecifiedField;
            } 
            set {
                startDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private bool startDateSpecifiedField; 

        /// <summary>
        /// endDate property
        /// </summary>
		[Description("The end date of status and allocation factor")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private bool endDateSpecifiedField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("The measured top depth of the interval")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("The measured bottom depth of the interval")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// allocationFactor property
        /// </summary>
		[Range(0, 1)]
        [Description("defines the proportional amount of fluid from the well completion  that is flowing through this interval whithin a wellbore")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeFraction")]
		[XmlElement("allocationFactor")]
        public double? AllocationFactor {
            get {
                return allocationFactorField;
            } 
            set {
                allocationFactorField = value;
                 this.AllocationFactorSpecified = true;
                NotifyPropertyChanged("AllocationFactor");
            }
        }

        private double? allocationFactorField; 

        /// <summary>
        /// allocationFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AllocationFactorSpecified {
            get {
                return allocationFactorSpecifiedField;
            } 
            set {
                allocationFactorSpecifiedField = value;
                NotifyPropertyChanged("AllocationFactorSpecified");
            }
        }

        private bool allocationFactorSpecifiedField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [Description("A remark about the interval over this period of time")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_eventInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_eventInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_eventInfo xsd type.")]
    public partial class EventInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// beginEvent property
        /// </summary>
		[Description("The referencing event was initailized")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventRefInfo")]
		[XmlElement("beginEvent")]
        public EventRefInfo BeginEvent {
            get {
                return beginEventField;
            } 
            set {
                beginEventField = value;
                NotifyPropertyChanged("BeginEvent");
            }
        }

        private EventRefInfo beginEventField; 

        /// <summary>
        /// endEvent property
        /// </summary>
		[Description("The referencing event when the even was end")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventRefInfo")]
		[XmlElement("endEvent")]
        public EventRefInfo EndEvent {
            get {
                return endEventField;
            } 
            set {
                endEventField = value;
                NotifyPropertyChanged("EndEvent");
            }
        }

        private EventRefInfo endEventField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_eventRefInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_eventRefInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_eventRefInfo xsd type.")]
    public partial class EventRefInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// eventRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The referencing eventledger ID")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("eventRefID")]
        public string EventRefID {
            get {
                return eventRefIDField;
            } 
            set {
                eventRefIDField = value;
                NotifyPropertyChanged("EventRefID");
            }
        }

        private string eventRefIDField; 

        /// <summary>
        /// eventDate property
        /// </summary>
		[Description("install/pull date")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("eventDate")]
        public Timestamp? EventDate {
            get {
                return eventDateField;
            } 
            set {
                eventDateField = value;
                 this.EventDateSpecified = true;
                NotifyPropertyChanged("EventDate");
            }
        }

        private Timestamp? eventDateField; 

        /// <summary>
        /// eventDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EventDateSpecified {
            get {
                return eventDateSpecifiedField;
            } 
            set {
                eventDateSpecifiedField = value;
                NotifyPropertyChanged("EventDateSpecified");
            }
        }

        private bool eventDateSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_perforationStatusHistory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perforationStatusHistory", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_perforationStatusHistory xsd type.")]
    public partial class PerforationStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// perforationStatus property
        /// </summary>
		[Description("perforation status")]
        [EnergisticsDataTypeAttribute(DataType = "PerforationStatus")]
		[XmlElement("perforationStatus")]
        public PerforationStatus? PerforationStatus {
            get {
                return perforationStatusField;
            } 
            set {
                perforationStatusField = value;
                 this.PerforationStatusSpecified = true;
                NotifyPropertyChanged("PerforationStatus");
            }
        }

        private PerforationStatus? perforationStatusField; 

        /// <summary>
        /// perforationStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerforationStatusSpecified {
            get {
                return perforationStatusSpecifiedField;
            } 
            set {
                perforationStatusSpecifiedField = value;
                NotifyPropertyChanged("PerforationStatusSpecified");
            }
        }

        private bool perforationStatusSpecifiedField; 

        /// <summary>
        /// startDate property
        /// </summary>
		[Description("the start date of status")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("startDate")]
        public Timestamp? StartDate {
            get {
                return startDateField;
            } 
            set {
                startDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private Timestamp? startDateField; 

        /// <summary>
        /// startDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return startDateSpecifiedField;
            } 
            set {
                startDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private bool startDateSpecifiedField; 

        /// <summary>
        /// endDate property
        /// </summary>
		[Description("the end date of status")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private bool endDateSpecifiedField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("The measured top of perforation")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("The measured bottom of perforation")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// allocationFactor property
        /// </summary>
		[Range(0, 1)]
        [Description("defines the proportional amount of fluid from the well completion  that is flowing through this interval whithin a wellbore")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeFraction")]
		[XmlElement("allocationFactor")]
        public double? AllocationFactor {
            get {
                return allocationFactorField;
            } 
            set {
                allocationFactorField = value;
                 this.AllocationFactorSpecified = true;
                NotifyPropertyChanged("AllocationFactor");
            }
        }

        private double? allocationFactorField; 

        /// <summary>
        /// allocationFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AllocationFactorSpecified {
            get {
                return allocationFactorSpecifiedField;
            } 
            set {
                allocationFactorSpecifiedField = value;
                NotifyPropertyChanged("AllocationFactorSpecified");
            }
        }

        private bool allocationFactorSpecifiedField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [Description("The description about the status")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_perforationSetInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perforationSetInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_perforationSetInterval xsd type.")]
    public partial class PerforationSetInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// perforationSetRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("perforationSetRefID")]
        public string PerforationSetRefID {
            get {
                return perforationSetRefIDField;
            } 
            set {
                perforationSetRefIDField = value;
                NotifyPropertyChanged("PerforationSetRefID");
            }
        }

        private string perforationSetRefIDField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// perforationStatusHistory property
        /// </summary>
		[Description("The contactInterval history information")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_perforationStatusHistory")]
		[XmlElement("perforationStatusHistory")]
        public List<PerforationStatusHistory> PerforationStatusHistory {
            get {
                return perforationStatusHistoryField;
            } 
            set {
                perforationStatusHistoryField = value;
                NotifyPropertyChanged("PerforationStatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationStatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationStatusHistorySpecified
         {
             get {
             if(perforationStatusHistoryField!=null)
                 return perforationStatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerforationStatusHistory> perforationStatusHistoryField; 

        /// <summary>
        /// eventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventInfo")]
		[XmlElement("eventHistory")]
        public EventInfo EventHistory {
            get {
                return eventHistoryField;
            } 
            set {
                eventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo eventHistoryField; 

        /// <summary>
        /// geologyFeatureRefID property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("geologyFeatureRefID")]
        public List<string> GeologyFeatureRefID {
            get {
                return geologyFeatureRefIDField;
            } 
            set {
                geologyFeatureRefIDField = value;
                NotifyPropertyChanged("GeologyFeatureRefID");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureRefIDSpecified
         {
             get {
             if(geologyFeatureRefIDField!=null)
                 return geologyFeatureRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> geologyFeatureRefIDField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_openHoleInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_openHoleInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_openHoleInterval xsd type.")]
    public partial class OpenHoleInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// boreholeStringRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("boreholeStringRefID")]
        public string BoreholeStringRefID {
            get {
                return boreholeStringRefIDField;
            } 
            set {
                boreholeStringRefIDField = value;
                NotifyPropertyChanged("BoreholeStringRefID");
            }
        }

        private string boreholeStringRefIDField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// intervalStatusHistory property
        /// </summary>
		[Description("The contactInterval history information")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_intervalStatusHistory")]
		[XmlElement("intervalStatusHistory")]
        public List<IntervalStatusHistory> IntervalStatusHistory {
            get {
                return intervalStatusHistoryField;
            } 
            set {
                intervalStatusHistoryField = value;
                NotifyPropertyChanged("IntervalStatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if IntervalStatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IntervalStatusHistorySpecified
         {
             get {
             if(intervalStatusHistoryField!=null)
                 return intervalStatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntervalStatusHistory> intervalStatusHistoryField; 

        /// <summary>
        /// eventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventInfo")]
		[XmlElement("eventHistory")]
        public EventInfo EventHistory {
            get {
                return eventHistoryField;
            } 
            set {
                eventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo eventHistoryField; 

        /// <summary>
        /// geologyFeatureRefID property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("geologyFeatureRefID")]
        public List<string> GeologyFeatureRefID {
            get {
                return geologyFeatureRefIDField;
            } 
            set {
                geologyFeatureRefIDField = value;
                NotifyPropertyChanged("GeologyFeatureRefID");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureRefIDSpecified
         {
             get {
             if(geologyFeatureRefIDField!=null)
                 return geologyFeatureRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> geologyFeatureRefIDField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_gravelPackInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_gravelPackInterval", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_gravelPackInterval xsd type.")]
    public partial class GravelPackInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// downholeStringRefID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("downholeStringRefID")]
        public string DownholeStringRefID {
            get {
                return downholeStringRefIDField;
            } 
            set {
                downholeStringRefIDField = value;
                NotifyPropertyChanged("DownholeStringRefID");
            }
        }

        private string downholeStringRefIDField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// intervalStatusHistory property
        /// </summary>
		[Description("The contactInterval history information")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_intervalStatusHistory")]
		[XmlElement("intervalStatusHistory")]
        public List<IntervalStatusHistory> IntervalStatusHistory {
            get {
                return intervalStatusHistoryField;
            } 
            set {
                intervalStatusHistoryField = value;
                NotifyPropertyChanged("IntervalStatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if IntervalStatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IntervalStatusHistorySpecified
         {
             get {
             if(intervalStatusHistoryField!=null)
                 return intervalStatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntervalStatusHistory> intervalStatusHistoryField; 

        /// <summary>
        /// eventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventInfo")]
		[XmlElement("eventHistory")]
        public EventInfo EventHistory {
            get {
                return eventHistoryField;
            } 
            set {
                eventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo eventHistoryField; 

        /// <summary>
        /// geologyFeatureRefID property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("geologyFeatureRefID")]
        public List<string> GeologyFeatureRefID {
            get {
                return geologyFeatureRefIDField;
            } 
            set {
                geologyFeatureRefIDField = value;
                NotifyPropertyChanged("GeologyFeatureRefID");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureRefIDSpecified
         {
             get {
             if(geologyFeatureRefIDField!=null)
                 return geologyFeatureRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> geologyFeatureRefIDField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_contactIntervalSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_contactIntervalSet", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_contactIntervalSet xsd type.")]
    public partial class ContactIntervalSet : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// gravelPackInterval property
        /// </summary>
		[Description("gravelPack interval")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_gravelPackInterval")]
		[XmlElement("gravelPackInterval")]
        public List<GravelPackInterval> GravelPackInterval {
            get {
                return gravelPackIntervalField;
            } 
            set {
                gravelPackIntervalField = value;
                NotifyPropertyChanged("GravelPackInterval");
            }
        }

         /// <summary>
         /// bool to indicate if GravelPackInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GravelPackIntervalSpecified
         {
             get {
             if(gravelPackIntervalField!=null)
                 return gravelPackIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<GravelPackInterval> gravelPackIntervalField; 

        /// <summary>
        /// openHoleInterval property
        /// </summary>
		[Description("cs_openHole interval")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_openHoleInterval")]
		[XmlElement("openHoleInterval")]
        public List<OpenHoleInterval> OpenHoleInterval {
            get {
                return openHoleIntervalField;
            } 
            set {
                openHoleIntervalField = value;
                NotifyPropertyChanged("OpenHoleInterval");
            }
        }

         /// <summary>
         /// bool to indicate if OpenHoleInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpenHoleIntervalSpecified
         {
             get {
             if(openHoleIntervalField!=null)
                 return openHoleIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<OpenHoleInterval> openHoleIntervalField; 

        /// <summary>
        /// perforationSetInterval property
        /// </summary>
		[Description("perforation interval")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_perforationSetInterval")]
		[XmlElement("perforationSetInterval")]
        public List<PerforationSetInterval> PerforationSetInterval {
            get {
                return perforationSetIntervalField;
            } 
            set {
                perforationSetIntervalField = value;
                NotifyPropertyChanged("PerforationSetInterval");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSetInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetIntervalSpecified
         {
             get {
             if(perforationSetIntervalField!=null)
                 return perforationSetIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerforationSetInterval> perforationSetIntervalField; 

        /// <summary>
        /// slotsInterval property
        /// </summary>
		[Description("cs_slots interval")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_slotsInterval")]
		[XmlElement("slotsInterval")]
        public List<SlotsInterval> SlotsInterval {
            get {
                return slotsIntervalField;
            } 
            set {
                slotsIntervalField = value;
                NotifyPropertyChanged("SlotsInterval");
            }
        }

         /// <summary>
         /// bool to indicate if SlotsInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SlotsIntervalSpecified
         {
             get {
             if(slotsIntervalField!=null)
                 return slotsIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<SlotsInterval> slotsIntervalField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the obj_wellboreCompletion xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellboreCompletion", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("This class represents the obj_wellboreCompletion xsd type.")]
    public partial class WellboreCompletion : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// nameWell property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the completion.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// nameWellbore property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the completion.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// nameWellCompletion property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well completion that contains the completion.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellCompletion")]
        public string NameWellCompletion {
            get {
                return nameWellCompletionField;
            } 
            set {
                nameWellCompletionField = value;
                NotifyPropertyChanged("NameWellCompletion");
            }
        }

        private string nameWellCompletionField; 

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("Preferred name")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// wellboreCompletionNo property
        /// </summary>
		[StringLength(64)]
        [Description("CompletionNo, etc API14")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("wellboreCompletionNo")]
        public string WellboreCompletionNo {
            get {
                return wellboreCompletionNoField;
            } 
            set {
                wellboreCompletionNoField = value;
                NotifyPropertyChanged("WellboreCompletionNo");
            }
        }

        private string wellboreCompletionNoField; 

        /// <summary>
        /// wellboreCompletionAlias property
        /// </summary>
		[StringLength(64)]
        [Description("Preferred alias name")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("wellboreCompletionAlias")]
        public string WellboreCompletionAlias {
            get {
                return wellboreCompletionAliasField;
            } 
            set {
                wellboreCompletionAliasField = value;
                NotifyPropertyChanged("WellboreCompletionAlias");
            }
        }

        private string wellboreCompletionAliasField; 

        /// <summary>
        /// evenHistory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventInfo")]
		[XmlElement("evenHistory")]
        public List<EventInfo> EvenHistory {
            get {
                return evenHistoryField;
            } 
            set {
                evenHistoryField = value;
                NotifyPropertyChanged("EvenHistory");
            }
        }

         /// <summary>
         /// bool to indicate if EvenHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EvenHistorySpecified
         {
             get {
             if(evenHistoryField!=null)
                 return evenHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<EventInfo> evenHistoryField; 

        /// <summary>
        /// wellboreCompletionDate property
        /// </summary>
		[Description("Completion Date")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("wellboreCompletionDate")]
        public Timestamp? WellboreCompletionDate {
            get {
                return wellboreCompletionDateField;
            } 
            set {
                wellboreCompletionDateField = value;
                 this.WellboreCompletionDateSpecified = true;
                NotifyPropertyChanged("WellboreCompletionDate");
            }
        }

        private Timestamp? wellboreCompletionDateField; 

        /// <summary>
        /// wellboreCompletionDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WellboreCompletionDateSpecified {
            get {
                return wellboreCompletionDateSpecifiedField;
            } 
            set {
                wellboreCompletionDateSpecifiedField = value;
                NotifyPropertyChanged("WellboreCompletionDateSpecified");
            }
        }

        private bool wellboreCompletionDateSpecifiedField; 

        /// <summary>
        /// suffixAPI property
        /// </summary>
		[StringLength(64)]
        [Description("API suffix.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("suffixAPI")]
        public string SuffixAPI {
            get {
                return suffixAPIField;
            } 
            set {
                suffixAPIField = value;
                NotifyPropertyChanged("SuffixAPI");
            }
        }

        private string suffixAPIField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth at top of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth at base of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth at top of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth at bottom of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// currentStatus property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CompletionStatus")]
		[XmlElement("currentStatus")]
        public CompletionStatus? CurrentStatus {
            get {
                return currentStatusField;
            } 
            set {
                currentStatusField = value;
                 this.CurrentStatusSpecified = true;
                NotifyPropertyChanged("CurrentStatus");
            }
        }

        private CompletionStatus? currentStatusField; 

        /// <summary>
        /// currentStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurrentStatusSpecified {
            get {
                return currentStatusSpecifiedField;
            } 
            set {
                currentStatusSpecifiedField = value;
                NotifyPropertyChanged("CurrentStatusSpecified");
            }
        }

        private bool currentStatusSpecifiedField; 

        /// <summary>
        /// statusDate property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("statusDate")]
        public Timestamp? StatusDate {
            get {
                return statusDateField;
            } 
            set {
                statusDateField = value;
                 this.StatusDateSpecified = true;
                NotifyPropertyChanged("StatusDate");
            }
        }

        private Timestamp? statusDateField; 

        /// <summary>
        /// statusDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusDateSpecified {
            get {
                return statusDateSpecifiedField;
            } 
            set {
                statusDateSpecifiedField = value;
                NotifyPropertyChanged("StatusDateSpecified");
            }
        }

        private bool statusDateSpecifiedField; 

        /// <summary>
        /// statusHistory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CompletionStatusHistory")]
		[XmlElement("statusHistory")]
        public List<CompletionStatusHistory> StatusHistory {
            get {
                return statusHistoryField;
            } 
            set {
                statusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if StatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusHistorySpecified
         {
             get {
             if(statusHistoryField!=null)
                 return statusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<CompletionStatusHistory> statusHistoryField; 

        /// <summary>
        /// contactIntervalSet property
        /// </summary>
		[Description("A collection of contact interval information")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_contactIntervalSet")]
		[XmlElement("contactIntervalSet")]
        public ContactIntervalSet ContactIntervalSet {
            get {
                return contactIntervalSetField;
            } 
            set {
                contactIntervalSetField = value;
                NotifyPropertyChanged("ContactIntervalSet");
            }
        }

        private ContactIntervalSet contactIntervalSetField; 

        /// <summary>
        /// commonData property
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// customData property
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uidWell property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// uidWellbore property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore..")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uidWellCompletion property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well completion.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("uidWellCompletion")]
		
        public string UidWellCompletion {
            get {
                return uidWellCompletionField;
            } 
            set {
                uidWellCompletionField = value;
                NotifyPropertyChanged("UidWellCompletion");
            }
        }

        private string uidWellCompletionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_perforationSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perforationSet", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_perforationSet xsd type.")]
    public partial class PerforationSet : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// boreholeStringRefID property
        /// </summary>
		[Description("perforation on borehole String")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("boreholeStringRefID")]
        public List<string> BoreholeStringRefID {
            get {
                return boreholeStringRefIDField;
            } 
            set {
                boreholeStringRefIDField = value;
                NotifyPropertyChanged("BoreholeStringRefID");
            }
        }

         /// <summary>
         /// bool to indicate if BoreholeStringRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeStringRefIDSpecified
         {
             get {
             if(boreholeStringRefIDField!=null)
                 return boreholeStringRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> boreholeStringRefIDField; 

        /// <summary>
        /// downholeStringRefID property
        /// </summary>
		[Description("perforation on downholeStringRefID")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("downholeStringRefID")]
        public List<string> DownholeStringRefID {
            get {
                return downholeStringRefIDField;
            } 
            set {
                downholeStringRefIDField = value;
                NotifyPropertyChanged("DownholeStringRefID");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeStringRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeStringRefIDSpecified
         {
             get {
             if(downholeStringRefIDField!=null)
                 return downholeStringRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> downholeStringRefIDField; 

        /// <summary>
        /// eventHistory property
        /// </summary>
		[Description("The contactInterval event information")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventInfo")]
		[XmlElement("eventHistory")]
        public EventInfo EventHistory {
            get {
                return eventHistoryField;
            } 
            set {
                eventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo eventHistoryField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("The measured top depth of the hole")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("The measured bottom of the hole")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// holeDiameter property
        /// </summary>
		[Description("The diameter of the hole")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("holeDiameter")]
        public LengthMeasure HoleDiameter {
            get {
                return holeDiameterField;
            } 
            set {
                holeDiameterField = value;
                NotifyPropertyChanged("HoleDiameter");
            }
        }

        private LengthMeasure holeDiameterField; 

        /// <summary>
        /// holeAngle property
        /// </summary>
		[Description("The angle of the holes")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("holeAngle")]
        public PlaneAngleMeasure HoleAngle {
            get {
                return holeAngleField;
            } 
            set {
                holeAngleField = value;
                NotifyPropertyChanged("HoleAngle");
            }
        }

        private PlaneAngleMeasure holeAngleField; 

        /// <summary>
        /// holePattern property
        /// </summary>
		[StringLength(64)]
        [Description("The pattern of the holes")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("holePattern")]
        public string HolePattern {
            get {
                return holePatternField;
            } 
            set {
                holePatternField = value;
                NotifyPropertyChanged("HolePattern");
            }
        }

        private string holePatternField; 

        /// <summary>
        /// holeDensity property
        /// </summary>
		[Description("The density of the holes")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "perLengthMeasure")]
		[XmlElement("holeDensity")]
        public PerLengthMeasure HoleDensity {
            get {
                return holeDensityField;
            } 
            set {
                holeDensityField = value;
                NotifyPropertyChanged("HoleDensity");
            }
        }

        private PerLengthMeasure holeDensityField; 

        /// <summary>
        /// holeCount property
        /// </summary>
		[Description("The number of holes")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("holeCount")]
        public short? HoleCount {
            get {
                return holeCountField;
            } 
            set {
                holeCountField = value;
                 this.HoleCountSpecified = true;
                NotifyPropertyChanged("HoleCount");
            }
        }

        private short? holeCountField; 

        /// <summary>
        /// holeCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool HoleCountSpecified {
            get {
                return holeCountSpecifiedField;
            } 
            set {
                holeCountSpecifiedField = value;
                NotifyPropertyChanged("HoleCountSpecified");
            }
        }

        private bool holeCountSpecifiedField; 

        /// <summary>
        /// frictionFactor property
        /// </summary>
		[Description("The friction factor of each perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("frictionFactor")]
        public double? FrictionFactor {
            get {
                return frictionFactorField;
            } 
            set {
                frictionFactorField = value;
                 this.FrictionFactorSpecified = true;
                NotifyPropertyChanged("FrictionFactor");
            }
        }

        private double? frictionFactorField; 

        /// <summary>
        /// frictionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FrictionFactorSpecified {
            get {
                return frictionFactorSpecifiedField;
            } 
            set {
                frictionFactorSpecifiedField = value;
                NotifyPropertyChanged("FrictionFactorSpecified");
            }
        }

        private bool frictionFactorSpecifiedField; 

        /// <summary>
        /// frictionPres property
        /// </summary>
		[Description("The friction pressure for the perforation set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("frictionPres")]
        public PressureMeasure FrictionPres {
            get {
                return frictionPresField;
            } 
            set {
                frictionPresField = value;
                NotifyPropertyChanged("FrictionPres");
            }
        }

        private PressureMeasure frictionPresField; 

        /// <summary>
        /// dischargeCoefficient property
        /// </summary>
		[Description("A coefficient used in the equation for calculation of pressure drop  across a perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("dischargeCoefficient")]
        public double? DischargeCoefficient {
            get {
                return dischargeCoefficientField;
            } 
            set {
                dischargeCoefficientField = value;
                 this.DischargeCoefficientSpecified = true;
                NotifyPropertyChanged("DischargeCoefficient");
            }
        }

        private double? dischargeCoefficientField; 

        /// <summary>
        /// dischargeCoefficientSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DischargeCoefficientSpecified {
            get {
                return dischargeCoefficientSpecifiedField;
            } 
            set {
                dischargeCoefficientSpecifiedField = value;
                NotifyPropertyChanged("DischargeCoefficientSpecified");
            }
        }

        private bool dischargeCoefficientSpecifiedField; 

        /// <summary>
        /// perforationTool property
        /// </summary>
		[Description("The type of perforation tool.")]
        [EnergisticsDataTypeAttribute(DataType = "PerforationToolType")]
		[XmlElement("perforationTool")]
        public PerforationToolType? PerforationTool {
            get {
                return perforationToolField;
            } 
            set {
                perforationToolField = value;
                 this.PerforationToolSpecified = true;
                NotifyPropertyChanged("PerforationTool");
            }
        }

        private PerforationToolType? perforationToolField; 

        /// <summary>
        /// perforationToolSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerforationToolSpecified {
            get {
                return perforationToolSpecifiedField;
            } 
            set {
                perforationToolSpecifiedField = value;
                NotifyPropertyChanged("PerforationToolSpecified");
            }
        }

        private bool perforationToolSpecifiedField; 

        /// <summary>
        /// perforationPenetration property
        /// </summary>
		[Description("The Penetration length of perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("perforationPenetration")]
        public LengthMeasure PerforationPenetration {
            get {
                return perforationPenetrationField;
            } 
            set {
                perforationPenetrationField = value;
                NotifyPropertyChanged("PerforationPenetration");
            }
        }

        private LengthMeasure perforationPenetrationField; 

        /// <summary>
        /// crushZoneDiameter property
        /// </summary>
		[Description("The diameter of crushed zone")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("crushZoneDiameter")]
        public LengthMeasure CrushZoneDiameter {
            get {
                return crushZoneDiameterField;
            } 
            set {
                crushZoneDiameterField = value;
                NotifyPropertyChanged("CrushZoneDiameter");
            }
        }

        private LengthMeasure crushZoneDiameterField; 

        /// <summary>
        /// crushDamageRatio property
        /// </summary>
		[StringLength(64)]
        [Description("The ratio value of cursh damage")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("crushDamageRatio")]
        public string CrushDamageRatio {
            get {
                return crushDamageRatioField;
            } 
            set {
                crushDamageRatioField = value;
                NotifyPropertyChanged("CrushDamageRatio");
            }
        }

        private string crushDamageRatioField; 

        /// <summary>
        /// perforationDate property
        /// </summary>
		[Description("The original perforation date")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("perforationDate")]
        public Timestamp? PerforationDate {
            get {
                return perforationDateField;
            } 
            set {
                perforationDateField = value;
                 this.PerforationDateSpecified = true;
                NotifyPropertyChanged("PerforationDate");
            }
        }

        private Timestamp? perforationDateField; 

        /// <summary>
        /// perforationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerforationDateSpecified {
            get {
                return perforationDateSpecifiedField;
            } 
            set {
                perforationDateSpecifiedField = value;
                NotifyPropertyChanged("PerforationDateSpecified");
            }
        }

        private bool perforationDateSpecifiedField; 

        /// <summary>
        /// permanentRemarks property
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks regarding this perforationSet")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("permanentRemarks")]
        public string PermanentRemarks {
            get {
                return permanentRemarksField;
            } 
            set {
                permanentRemarksField = value;
                NotifyPropertyChanged("PermanentRemarks");
            }
        }

        private string permanentRemarksField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_perfHole xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perfHole", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_perfHole xsd type.")]
    public partial class PerfHole : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("The measured top depth of the hole")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("The measured bottom of the hole")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth of the top perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth of the bottom perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// holeDiameter property
        /// </summary>
		[Description("The diameter of the hole")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("holeDiameter")]
        public LengthMeasure HoleDiameter {
            get {
                return holeDiameterField;
            } 
            set {
                holeDiameterField = value;
                NotifyPropertyChanged("HoleDiameter");
            }
        }

        private LengthMeasure holeDiameterField; 

        /// <summary>
        /// holeAngle property
        /// </summary>
		[Description("The angle of the holes")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("holeAngle")]
        public PlaneAngleMeasure HoleAngle {
            get {
                return holeAngleField;
            } 
            set {
                holeAngleField = value;
                NotifyPropertyChanged("HoleAngle");
            }
        }

        private PlaneAngleMeasure holeAngleField; 

        /// <summary>
        /// holePattern property
        /// </summary>
		[StringLength(64)]
        [Description("The pattern of the holes")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("holePattern")]
        public string HolePattern {
            get {
                return holePatternField;
            } 
            set {
                holePatternField = value;
                NotifyPropertyChanged("HolePattern");
            }
        }

        private string holePatternField; 

        /// <summary>
        /// holeDensity property
        /// </summary>
		[Description("The density of the holes")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "perLengthMeasure")]
		[XmlElement("holeDensity")]
        public PerLengthMeasure HoleDensity {
            get {
                return holeDensityField;
            } 
            set {
                holeDensityField = value;
                NotifyPropertyChanged("HoleDensity");
            }
        }

        private PerLengthMeasure holeDensityField; 

        /// <summary>
        /// holeCount property
        /// </summary>
		[Description("The number of holes")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("holeCount")]
        public short? HoleCount {
            get {
                return holeCountField;
            } 
            set {
                holeCountField = value;
                 this.HoleCountSpecified = true;
                NotifyPropertyChanged("HoleCount");
            }
        }

        private short? holeCountField; 

        /// <summary>
        /// holeCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool HoleCountSpecified {
            get {
                return holeCountSpecifiedField;
            } 
            set {
                holeCountSpecifiedField = value;
                NotifyPropertyChanged("HoleCountSpecified");
            }
        }

        private bool holeCountSpecifiedField; 

        /// <summary>
        /// remarks property
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks regarding this perforated hole")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("remarks")]
        public string Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private string remarksField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_perfSlot xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_perfSlot", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_perfSlot xsd type.")]
    public partial class PerfSlot : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// slotHeight property
        /// </summary>
		[Description("The height of slot")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("slotHeight")]
        public LengthMeasure SlotHeight {
            get {
                return slotHeightField;
            } 
            set {
                slotHeightField = value;
                NotifyPropertyChanged("SlotHeight");
            }
        }

        private LengthMeasure slotHeightField; 

        /// <summary>
        /// slotWidth property
        /// </summary>
		[Description("The width of the slot")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("slotWidth")]
        public LengthMeasure SlotWidth {
            get {
                return slotWidthField;
            } 
            set {
                slotWidthField = value;
                NotifyPropertyChanged("SlotWidth");
            }
        }

        private LengthMeasure slotWidthField; 

        /// <summary>
        /// slotCenterDistance property
        /// </summary>
		[Description("Distance from center point")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("slotCenterDistance")]
        public LengthMeasure SlotCenterDistance {
            get {
                return slotCenterDistanceField;
            } 
            set {
                slotCenterDistanceField = value;
                NotifyPropertyChanged("SlotCenterDistance");
            }
        }

        private LengthMeasure slotCenterDistanceField; 

        /// <summary>
        /// slotCount property
        /// </summary>
		[Description("The number of the slot")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("slotCount")]
        public short? SlotCount {
            get {
                return slotCountField;
            } 
            set {
                slotCountField = value;
                 this.SlotCountSpecified = true;
                NotifyPropertyChanged("SlotCount");
            }
        }

        private short? slotCountField; 

        /// <summary>
        /// slotCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SlotCountSpecified {
            get {
                return slotCountSpecifiedField;
            } 
            set {
                slotCountSpecifiedField = value;
                NotifyPropertyChanged("SlotCountSpecified");
            }
        }

        private bool slotCountSpecifiedField; 

        /// <summary>
        /// remarks property
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks regarding this perforation slot")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("remarks")]
        public string Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private string remarksField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_extPropNameValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_extPropNameValue", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_extPropNameValue xsd type.")]
    public partial class ExtPropNameValue : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("A string representing the name of property.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// value property
        /// </summary>
		[Description("A value string representing the units of measure of the value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "extensionvalue")]
		[XmlElement("value")]
        public Extensionvalue Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Extensionvalue valueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_equipment xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_equipment", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_equipment xsd type.")]
    public partial class Equipment : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// equipmentName property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the piece of equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("equipmentName")]
        public string EquipmentName {
            get {
                return equipmentNameField;
            } 
            set {
                equipmentNameField = value;
                NotifyPropertyChanged("EquipmentName");
            }
        }

        private string equipmentNameField; 

        /// <summary>
        /// equipmentType property
        /// </summary>
		[Required]
        [Description("The equipment type etc. bridge plug, bull plug. capillary tubing..")]
        [EnergisticsDataTypeAttribute(DataType = "EquipmentType")]
		[XmlElement("equipmentType")]
        public EquipmentType? EquipmentType {
            get {
                return equipmentTypeField;
            } 
            set {
                equipmentTypeField = value;
                 this.EquipmentTypeSpecified = true;
                NotifyPropertyChanged("EquipmentType");
            }
        }

        
        private bool EquipmentTypeSpecifiedField = false;
        
        /// <summary>
        /// EquipmentTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EquipmentTypeSpecified {
            get {
                return EquipmentTypeSpecifiedField;
            } 
            set {
                EquipmentTypeSpecifiedField = value;
                NotifyPropertyChanged("EquipmentTypeSpecified");
            }
        }
        
        private EquipmentType? equipmentTypeField; 

        /// <summary>
        /// manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer of this equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// model property
        /// </summary>
		[StringLength(64)]
        [Description("The model of the equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("model")]
        public string Model {
            get {
                return modelField;
            } 
            set {
                modelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string modelField; 

        /// <summary>
        /// catalogID property
        /// </summary>
		[StringLength(64)]
        [Description("Catalog where equipment can be found.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("catalogID")]
        public string CatalogID {
            get {
                return catalogIDField;
            } 
            set {
                catalogIDField = value;
                NotifyPropertyChanged("CatalogID");
            }
        }

        private string catalogIDField; 

        /// <summary>
        /// catalogName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of equipment as found in catalog.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("catalogName")]
        public string CatalogName {
            get {
                return catalogNameField;
            } 
            set {
                catalogNameField = value;
                NotifyPropertyChanged("CatalogName");
            }
        }

        private string catalogNameField; 

        /// <summary>
        /// brandName property
        /// </summary>
		[StringLength(64)]
        [Description("The equipment's brand name .")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("brandName")]
        public string BrandName {
            get {
                return brandNameField;
            } 
            set {
                brandNameField = value;
                NotifyPropertyChanged("BrandName");
            }
        }

        private string brandNameField; 

        /// <summary>
        /// modelType property
        /// </summary>
		[StringLength(64)]
        [Description("The equipment's model type.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("modelType")]
        public string ModelType {
            get {
                return modelTypeField;
            } 
            set {
                modelTypeField = value;
                NotifyPropertyChanged("ModelType");
            }
        }

        private string modelTypeField; 

        /// <summary>
        /// series property
        /// </summary>
		[StringLength(64)]
        [Description("Series number")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("series")]
        public string Series {
            get {
                return seriesField;
            } 
            set {
                seriesField = value;
                NotifyPropertyChanged("Series");
            }
        }

        private string seriesField; 

        /// <summary>
        /// isSerialized property
        /// </summary>
		[Description("a flag indicates the equipment has serialNumber.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isSerialized")]
        public bool? IsSerialized {
            get {
                return isSerializedField;
            } 
            set {
                isSerializedField = value;
                 this.IsSerializedSpecified = true;
                NotifyPropertyChanged("IsSerialized");
            }
        }

        private bool? isSerializedField; 

        /// <summary>
        /// isSerializedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsSerializedSpecified {
            get {
                return isSerializedSpecifiedField;
            } 
            set {
                isSerializedSpecifiedField = value;
                NotifyPropertyChanged("IsSerializedSpecified");
            }
        }

        private bool isSerializedSpecifiedField; 

        /// <summary>
        /// serialNumber property
        /// </summary>
		[StringLength(64)]
        [Description("serial number")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("serialNumber")]
        public string SerialNumber {
            get {
                return serialNumberField;
            } 
            set {
                serialNumberField = value;
                NotifyPropertyChanged("SerialNumber");
            }
        }

        private string serialNumberField; 

        /// <summary>
        /// partNo property
        /// </summary>
		[StringLength(64)]
        [Description("Number that identifies this part.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("partNo")]
        public string PartNo {
            get {
                return partNoField;
            } 
            set {
                partNoField = value;
                NotifyPropertyChanged("PartNo");
            }
        }

        private string partNoField; 

        /// <summary>
        /// surfaceCondition property
        /// </summary>
		[StringLength(64)]
        [Description("surface condition.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("surfaceCondition")]
        public string SurfaceCondition {
            get {
                return surfaceConditionField;
            } 
            set {
                surfaceConditionField = value;
                NotifyPropertyChanged("SurfaceCondition");
            }
        }

        private string surfaceConditionField; 

        /// <summary>
        /// material property
        /// </summary>
		[StringLength(64)]
        [Description("Material that equipment is made from")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("material")]
        public string Material {
            get {
                return materialField;
            } 
            set {
                materialField = value;
                NotifyPropertyChanged("Material");
            }
        }

        private string materialField; 

        /// <summary>
        /// grade property
        /// </summary>
		[Description("Grade level of this material.")]
        [EnergisticsDataTypeAttribute(DataType = "GradeType")]
		[XmlElement("grade")]
        public GradeType? Grade {
            get {
                return gradeField;
            } 
            set {
                gradeField = value;
                 this.GradeSpecified = true;
                NotifyPropertyChanged("Grade");
            }
        }

        private GradeType? gradeField; 

        /// <summary>
        /// gradeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GradeSpecified {
            get {
                return gradeSpecifiedField;
            } 
            set {
                gradeSpecifiedField = value;
                NotifyPropertyChanged("GradeSpecified");
            }
        }

        private bool gradeSpecifiedField; 

        /// <summary>
        /// unitWeight property
        /// </summary>
		[Description("The weight per length of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massPerLengthMeasure")]
		[XmlElement("unitWeight")]
        public MassPerLengthMeasure UnitWeight {
            get {
                return unitWeightField;
            } 
            set {
                unitWeightField = value;
                NotifyPropertyChanged("UnitWeight");
            }
        }

        private MassPerLengthMeasure unitWeightField; 

        /// <summary>
        /// coatingLinerapplied property
        /// </summary>
		[Description("Flag indicating whether equipment has coating")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("coatingLinerapplied")]
        public bool? CoatingLinerapplied {
            get {
                return coatingLinerappliedField;
            } 
            set {
                coatingLinerappliedField = value;
                 this.CoatingLinerappliedSpecified = true;
                NotifyPropertyChanged("CoatingLinerapplied");
            }
        }

        private bool? coatingLinerappliedField; 

        /// <summary>
        /// coatingLinerappliedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CoatingLinerappliedSpecified {
            get {
                return coatingLinerappliedSpecifiedField;
            } 
            set {
                coatingLinerappliedSpecifiedField = value;
                NotifyPropertyChanged("CoatingLinerappliedSpecified");
            }
        }

        private bool coatingLinerappliedSpecifiedField; 

        /// <summary>
        /// outsideCoating property
        /// </summary>
		[Description("Equipment's outside coating based on enumeration value")]
        [EnergisticsDataTypeAttribute(DataType = "Coating")]
		[XmlElement("outsideCoating")]
        public Coating? OutsideCoating {
            get {
                return outsideCoatingField;
            } 
            set {
                outsideCoatingField = value;
                 this.OutsideCoatingSpecified = true;
                NotifyPropertyChanged("OutsideCoating");
            }
        }

        private Coating? outsideCoatingField; 

        /// <summary>
        /// outsideCoatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OutsideCoatingSpecified {
            get {
                return outsideCoatingSpecifiedField;
            } 
            set {
                outsideCoatingSpecifiedField = value;
                NotifyPropertyChanged("OutsideCoatingSpecified");
            }
        }

        private bool outsideCoatingSpecifiedField; 

        /// <summary>
        /// insideCoating property
        /// </summary>
		[Description("Equipment's inner coating based on enumeration value")]
        [EnergisticsDataTypeAttribute(DataType = "Coating")]
		[XmlElement("insideCoating")]
        public Coating? InsideCoating {
            get {
                return insideCoatingField;
            } 
            set {
                insideCoatingField = value;
                 this.InsideCoatingSpecified = true;
                NotifyPropertyChanged("InsideCoating");
            }
        }

        private Coating? insideCoatingField; 

        /// <summary>
        /// insideCoatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InsideCoatingSpecified {
            get {
                return insideCoatingSpecifiedField;
            } 
            set {
                insideCoatingSpecifiedField = value;
                NotifyPropertyChanged("InsideCoatingSpecified");
            }
        }

        private bool insideCoatingSpecifiedField; 

        /// <summary>
        /// unitLength property
        /// </summary>
		[Description("The length of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("unitLength")]
        public LengthMeasure UnitLength {
            get {
                return unitLengthField;
            } 
            set {
                unitLengthField = value;
                NotifyPropertyChanged("UnitLength");
            }
        }

        private LengthMeasure unitLengthField; 

        /// <summary>
        /// majorOD property
        /// </summary>
		[Description("The major outside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("majorOD")]
        public LengthMeasure MajorOD {
            get {
                return majorODField;
            } 
            set {
                majorODField = value;
                NotifyPropertyChanged("MajorOD");
            }
        }

        private LengthMeasure majorODField; 

        /// <summary>
        /// minorOD property
        /// </summary>
		[Description("The minor outside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("minorOD")]
        public LengthMeasure MinorOD {
            get {
                return minorODField;
            } 
            set {
                minorODField = value;
                NotifyPropertyChanged("MinorOD");
            }
        }

        private LengthMeasure minorODField; 

        /// <summary>
        /// OD property
        /// </summary>
		[Description("The outside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("OD")]
        public LengthMeasure OD {
            get {
                return ODField;
            } 
            set {
                ODField = value;
                NotifyPropertyChanged("OD");
            }
        }

        private LengthMeasure ODField; 

        /// <summary>
        /// MaxOD property
        /// </summary>
		[Description("The maximum outside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("MaxOD")]
        public LengthMeasure MaxOD {
            get {
                return MaxODField;
            } 
            set {
                MaxODField = value;
                NotifyPropertyChanged("MaxOD");
            }
        }

        private LengthMeasure MaxODField; 

        /// <summary>
        /// MinOD property
        /// </summary>
		[Description("The minimum outside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("MinOD")]
        public LengthMeasure MinOD {
            get {
                return MinODField;
            } 
            set {
                MinODField = value;
                NotifyPropertyChanged("MinOD");
            }
        }

        private LengthMeasure MinODField; 

        /// <summary>
        /// majorID property
        /// </summary>
		[Description("The major inside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("majorID")]
        public LengthMeasure MajorID {
            get {
                return majorIDField;
            } 
            set {
                majorIDField = value;
                NotifyPropertyChanged("MajorID");
            }
        }

        private LengthMeasure majorIDField; 

        /// <summary>
        /// minorID property
        /// </summary>
		[Description("The minor inside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("minorID")]
        public LengthMeasure MinorID {
            get {
                return minorIDField;
            } 
            set {
                minorIDField = value;
                NotifyPropertyChanged("MinorID");
            }
        }

        private LengthMeasure minorIDField; 

        /// <summary>
        /// ID property
        /// </summary>
		[Description("The inside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("ID")]
        public LengthMeasure ID {
            get {
                return IDField;
            } 
            set {
                IDField = value;
                NotifyPropertyChanged("ID");
            }
        }

        private LengthMeasure IDField; 

        /// <summary>
        /// MaxID property
        /// </summary>
		[Description("The maximum inside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("MaxID")]
        public LengthMeasure MaxID {
            get {
                return MaxIDField;
            } 
            set {
                MaxIDField = value;
                NotifyPropertyChanged("MaxID");
            }
        }

        private LengthMeasure MaxIDField; 

        /// <summary>
        /// MinID property
        /// </summary>
		[Description("The minimum inside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("MinID")]
        public LengthMeasure MinID {
            get {
                return MinIDField;
            } 
            set {
                MinIDField = value;
                NotifyPropertyChanged("MinID");
            }
        }

        private LengthMeasure MinIDField; 

        /// <summary>
        /// drift property
        /// </summary>
		[Description("The drift diameter is the minimum inside diameter of pipe through which another tool or string can be pulled.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("drift")]
        public LengthMeasure Drift {
            get {
                return driftField;
            } 
            set {
                driftField = value;
                NotifyPropertyChanged("Drift");
            }
        }

        private LengthMeasure driftField; 

        /// <summary>
        /// nominalSize property
        /// </summary>
		[Description("The nominal size of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("nominalSize")]
        public LengthMeasure NominalSize {
            get {
                return nominalSizeField;
            } 
            set {
                nominalSizeField = value;
                NotifyPropertyChanged("NominalSize");
            }
        }

        private LengthMeasure nominalSizeField; 

        /// <summary>
        /// nameService property
        /// </summary>
		[StringLength(64)]
        [Description("sweet or sour service.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameService")]
        public string NameService {
            get {
                return nameServiceField;
            } 
            set {
                nameServiceField = value;
                NotifyPropertyChanged("NameService");
            }
        }

        private string nameServiceField; 

        /// <summary>
        /// description property
        /// </summary>
		[StringLength(4000)]
        [Description("The description of this equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// descriptionPermanent property
        /// </summary>
		[StringLength(4000)]
        [Description("The description of this equipment to be permanently kept.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("descriptionPermanent")]
        public string DescriptionPermanent {
            get {
                return descriptionPermanentField;
            } 
            set {
                descriptionPermanentField = value;
                NotifyPropertyChanged("DescriptionPermanent");
            }
        }

        private string descriptionPermanentField; 

        /// <summary>
        /// remark property
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks about this equipment property.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("remark")]
        public string Remark {
            get {
                return remarkField;
            } 
            set {
                remarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string remarkField; 

        /// <summary>
        /// property property
        /// </summary>
		[Description("Property description")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extPropNameValue")]
		[XmlElement("property")]
        public List<ExtPropNameValue> Property {
            get {
                return propertyField;
            } 
            set {
                propertyField = value;
                NotifyPropertyChanged("Property");
            }
        }

         /// <summary>
         /// bool to indicate if Property has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PropertySpecified
         {
             get {
             if(propertyField!=null)
                 return propertyField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtPropNameValue> propertyField; 

        /// <summary>
        /// slotAsManufactured property
        /// </summary>
		[Description("Describes the slot in equipment.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_perfSlot")]
		[XmlElement("slotAsManufactured")]
        public List<PerfSlot> SlotAsManufactured {
            get {
                return slotAsManufacturedField;
            } 
            set {
                slotAsManufacturedField = value;
                NotifyPropertyChanged("SlotAsManufactured");
            }
        }

         /// <summary>
         /// bool to indicate if SlotAsManufactured has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SlotAsManufacturedSpecified
         {
             get {
             if(slotAsManufacturedField!=null)
                 return slotAsManufacturedField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerfSlot> slotAsManufacturedField; 

        /// <summary>
        /// holeAsManufactured property
        /// </summary>
		[Description("Describes the hole in equipment.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_perfHole")]
		[XmlElement("holeAsManufactured")]
        public List<PerfHole> HoleAsManufactured {
            get {
                return holeAsManufacturedField;
            } 
            set {
                holeAsManufacturedField = value;
                NotifyPropertyChanged("HoleAsManufactured");
            }
        }

         /// <summary>
         /// bool to indicate if HoleAsManufactured has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool HoleAsManufacturedSpecified
         {
             get {
             if(holeAsManufacturedField!=null)
                 return holeAsManufacturedField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerfHole> holeAsManufacturedField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_geologyFeature xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geologyFeature", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_geologyFeature xsd type.")]
    public partial class GeologyFeature : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the feature")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// geologyType property
        /// </summary>
		[Description("Aquifer or reservoir")]
        [EnergisticsDataTypeAttribute(DataType = "GeologyType")]
		[XmlElement("geologyType")]
        public GeologyType? GeologyType {
            get {
                return geologyTypeField;
            } 
            set {
                geologyTypeField = value;
                 this.GeologyTypeSpecified = true;
                NotifyPropertyChanged("GeologyType");
            }
        }

        private GeologyType? geologyTypeField; 

        /// <summary>
        /// geologyTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GeologyTypeSpecified {
            get {
                return geologyTypeSpecifiedField;
            } 
            set {
                geologyTypeSpecifiedField = value;
                NotifyPropertyChanged("GeologyTypeSpecified");
            }
        }

        private bool geologyTypeSpecifiedField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth at top of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth at base of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth at top of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth at bottom of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// tvdBase property
        /// </summary>
		[Description("True vertical depth at base of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBase")]
        public WellVerticalDepthCoord TvdBase {
            get {
                return tvdBaseField;
            } 
            set {
                tvdBaseField = value;
                NotifyPropertyChanged("TvdBase");
            }
        }

        private WellVerticalDepthCoord tvdBaseField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_borehole xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_borehole", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_borehole xsd type.")]
    public partial class Borehole : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of borehole")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// typeBorehole property
        /// </summary>
		[Description("Type of borehole. etc. Cavern, cavity, NormalBorehole,UnderReam")]
        [EnergisticsDataTypeAttribute(DataType = "BoreholeType")]
		[XmlElement("typeBorehole")]
        public BoreholeType? TypeBorehole {
            get {
                return typeBoreholeField;
            } 
            set {
                typeBoreholeField = value;
                 this.TypeBoreholeSpecified = true;
                NotifyPropertyChanged("TypeBorehole");
            }
        }

        private BoreholeType? typeBoreholeField; 

        /// <summary>
        /// typeBoreholeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeBoreholeSpecified {
            get {
                return typeBoreholeSpecifiedField;
            } 
            set {
                typeBoreholeSpecifiedField = value;
                NotifyPropertyChanged("TypeBoreholeSpecified");
            }
        }

        private bool typeBoreholeSpecifiedField; 

        /// <summary>
        /// equipmentEventHistory property
        /// </summary>
		[Description("Event reference pointing to the eventledger.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventInfo")]
		[XmlElement("equipmentEventHistory")]
        public EventInfo EquipmentEventHistory {
            get {
                return equipmentEventHistoryField;
            } 
            set {
                equipmentEventHistoryField = value;
                NotifyPropertyChanged("EquipmentEventHistory");
            }
        }

        private EventInfo equipmentEventHistoryField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth at Top of Interval")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth at bottom of the section")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth at top of the section")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth at bottom of the section")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// diaBorehole property
        /// </summary>
		[Description("Borehole diameter")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaBorehole")]
        public LengthMeasure DiaBorehole {
            get {
                return diaBoreholeField;
            } 
            set {
                diaBoreholeField = value;
                NotifyPropertyChanged("DiaBorehole");
            }
        }

        private LengthMeasure diaBoreholeField; 

        /// <summary>
        /// descriptionPermanent property
        /// </summary>
		[StringLength(4000)]
        [Description("The description of this equipment to be permanently kept.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("descriptionPermanent")]
        public string DescriptionPermanent {
            get {
                return descriptionPermanentField;
            } 
            set {
                descriptionPermanentField = value;
                NotifyPropertyChanged("DescriptionPermanent");
            }
        }

        private string descriptionPermanentField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_boreholeString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_boreholeString", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_boreholeString xsd type.")]
    public partial class BoreholeString : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// nameWellbore property
        /// </summary>
		[StringLength(64)]
        [Description("Human recognizable context for the downhole equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the borehole String")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// borehole property
        /// </summary>
		[Description("The collection of boreholes")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_borehole")]
		[XmlElement("borehole")]
        public List<Borehole> Borehole {
            get {
                return boreholeField;
            } 
            set {
                boreholeField = value;
                NotifyPropertyChanged("Borehole");
            }
        }

         /// <summary>
         /// bool to indicate if Borehole has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeSpecified
         {
             get {
             if(boreholeField!=null)
                 return boreholeField.Count>0?true:false;
             else return false;
             }
         }
        private List<Borehole> boreholeField; 

        /// <summary>
        /// geologyFeature property
        /// </summary>
		[Description("Geology feature information")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_geologyFeature")]
		[XmlElement("geologyFeature")]
        public List<GeologyFeature> GeologyFeature {
            get {
                return geologyFeatureField;
            } 
            set {
                geologyFeatureField = value;
                NotifyPropertyChanged("GeologyFeature");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeature has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureSpecified
         {
             get {
             if(geologyFeatureField!=null)
                 return geologyFeatureField.Count>0?true:false;
             else return false;
             }
         }
        private List<GeologyFeature> geologyFeatureField; 

        /// <summary>
        /// accessories property
        /// </summary>
		[Description("The borehole accessories.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stringAccessory")]
		[XmlArrayItem("accessory")]
        [XmlArray("accessories")]
        public List<StringEquipment> Accessories {
            get {
                return accessoriesField;
            } 
            set {
                accessoriesField = value;
                NotifyPropertyChanged("Accessories");
            }
        }

         /// <summary>
         /// bool to indicate if Accessories has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AccessoriesSpecified
         {
             get {
             if(accessoriesField!=null)
                 return accessoriesField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> accessoriesField; 

		/// <summary>
        /// uidWellbore property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_stringEquipment xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_stringEquipment", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_stringEquipment xsd type.")]
    public partial class StringEquipment : Object, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// equipmentType property
        /// </summary>
		[Description("The type of the equipment.  Enumeration is defined in cs_equipmentCatalog.xsd. \"Optional\" is for expansion purpose, strong suggest that only ignore it if the equipment type could not found from equipmentType definition.")]
        [EnergisticsDataTypeAttribute(DataType = "EquipmentType")]
		[XmlElement("equipmentType")]
        public EquipmentType? EquipmentType {
            get {
                return equipmentTypeField;
            } 
            set {
                equipmentTypeField = value;
                 this.EquipmentTypeSpecified = true;
                NotifyPropertyChanged("EquipmentType");
            }
        }

        private EquipmentType? equipmentTypeField; 

        /// <summary>
        /// equipmentTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EquipmentTypeSpecified {
            get {
                return equipmentTypeSpecifiedField;
            } 
            set {
                equipmentTypeSpecifiedField = value;
                NotifyPropertyChanged("EquipmentTypeSpecified");
            }
        }

        private bool equipmentTypeSpecifiedField; 

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(256)]
        [Description("The name of the equipment.  Length of this element is 256 characters.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// equipmentEventHistory property
        /// </summary>
		[Description("History of event tied to this equipment")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_eventInfo")]
		[XmlElement("equipmentEventHistory")]
        public List<EventInfo> EquipmentEventHistory {
            get {
                return equipmentEventHistoryField;
            } 
            set {
                equipmentEventHistoryField = value;
                NotifyPropertyChanged("EquipmentEventHistory");
            }
        }

         /// <summary>
         /// bool to indicate if EquipmentEventHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EquipmentEventHistorySpecified
         {
             get {
             if(equipmentEventHistoryField!=null)
                 return equipmentEventHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<EventInfo> equipmentEventHistoryField; 

        /// <summary>
        /// orderOfObject property
        /// </summary>
		[Description("Defines a sequence number and with an optional description attribute")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "objectSequence")]
		[XmlElement("orderOfObject")]
        public ObjectSequence OrderOfObject {
            get {
                return orderOfObjectField;
            } 
            set {
                orderOfObjectField = value;
                NotifyPropertyChanged("OrderOfObject");
            }
        }

        private ObjectSequence orderOfObjectField; 

        /// <summary>
        /// status property
        /// </summary>
		[StringLength(64)]
        [Description("The status of the piece of equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("status")]
        public string Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                NotifyPropertyChanged("Status");
            }
        }

        private string statusField; 

        /// <summary>
        /// runNo property
        /// </summary>
		[StringLength(64)]
        [Description("The well run No")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("runNo")]
        public string RunNo {
            get {
                return runNoField;
            } 
            set {
                runNoField = value;
                NotifyPropertyChanged("RunNo");
            }
        }

        private string runNoField; 

        /// <summary>
        /// previousRunDays property
        /// </summary>
		[Description("The days that the equipment has run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("previousRunDays")]
        public TimeMeasure PreviousRunDays {
            get {
                return previousRunDaysField;
            } 
            set {
                previousRunDaysField = value;
                NotifyPropertyChanged("PreviousRunDays");
            }
        }

        private TimeMeasure previousRunDaysField; 

        /// <summary>
        /// objectCondition property
        /// </summary>
		[StringLength(64)]
        [Description("Object condition at installation")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("objectCondition")]
        public string ObjectCondition {
            get {
                return objectConditionField;
            } 
            set {
                objectConditionField = value;
                NotifyPropertyChanged("ObjectCondition");
            }
        }

        private string objectConditionField; 

        /// <summary>
        /// surfaceCondition property
        /// </summary>
		[StringLength(64)]
        [Description("Object surface condition")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("surfaceCondition")]
        public string SurfaceCondition {
            get {
                return surfaceConditionField;
            } 
            set {
                surfaceConditionField = value;
                NotifyPropertyChanged("SurfaceCondition");
            }
        }

        private string surfaceConditionField; 

        /// <summary>
        /// count property
        /// </summary>
		[Description("The count number of the same equipment. The default is 1.  In some cases, multiple pieces group into one component.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("count")]
        public short? Count {
            get {
                return countField;
            } 
            set {
                countField = value;
                 this.CountSpecified = true;
                NotifyPropertyChanged("Count");
            }
        }

        private short? countField; 

        /// <summary>
        /// countSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CountSpecified {
            get {
                return countSpecifiedField;
            } 
            set {
                countSpecifiedField = value;
                NotifyPropertyChanged("CountSpecified");
            }
        }

        private bool countSpecifiedField; 

        /// <summary>
        /// length property
        /// </summary>
		[Description("The total length of the equipment.  This is NOT length per unit.                     This is the length of unit stored at equipmentset's equipment information section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("length")]
        public LengthMeasure Length {
            get {
                return lengthField;
            } 
            set {
                lengthField = value;
                NotifyPropertyChanged("Length");
            }
        }

        private LengthMeasure lengthField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth at top of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth at base of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// tvdTop property
        /// </summary>
		[Description("True vertical depth at top of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return tvdTopField;
            } 
            set {
                tvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord tvdTopField; 

        /// <summary>
        /// tvdBottom property
        /// </summary>
		[Description("True vertical depth at bottom of the section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBottom")]
        public WellVerticalDepthCoord TvdBottom {
            get {
                return tvdBottomField;
            } 
            set {
                tvdBottomField = value;
                NotifyPropertyChanged("TvdBottom");
            }
        }

        private WellVerticalDepthCoord tvdBottomField; 

        /// <summary>
        /// tvdBase property
        /// </summary>
		[Description("True vertical depth at base of interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellVerticalDepthCoord")]
		[XmlElement("tvdBase")]
        public WellVerticalDepthCoord TvdBase {
            get {
                return tvdBaseField;
            } 
            set {
                tvdBaseField = value;
                NotifyPropertyChanged("TvdBase");
            }
        }

        private WellVerticalDepthCoord tvdBaseField; 

        /// <summary>
        /// outsideString property
        /// </summary>
		[Description("Flag indicating whether this component is inside the string or not .")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("outsideString")]
        public bool? OutsideString {
            get {
                return outsideStringField;
            } 
            set {
                outsideStringField = value;
                 this.OutsideStringSpecified = true;
                NotifyPropertyChanged("OutsideString");
            }
        }

        private bool? outsideStringField; 

        /// <summary>
        /// outsideStringSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OutsideStringSpecified {
            get {
                return outsideStringSpecifiedField;
            } 
            set {
                outsideStringSpecifiedField = value;
                NotifyPropertyChanged("OutsideStringSpecified");
            }
        }

        private bool outsideStringSpecifiedField; 

        /// <summary>
        /// insideComponent property
        /// </summary>
		[Description("The list of components contained in the equipment")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_refContainer")]
		[XmlElement("insideComponent")]
        public List<RefContainer> InsideComponent {
            get {
                return insideComponentField;
            } 
            set {
                insideComponentField = value;
                NotifyPropertyChanged("InsideComponent");
            }
        }

         /// <summary>
         /// bool to indicate if InsideComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InsideComponentSpecified
         {
             get {
             if(insideComponentField!=null)
                 return insideComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefContainer> insideComponentField; 

        /// <summary>
        /// outsideComponent property
        /// </summary>
		[Description("The list of components outside of this piece of equipment")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_refContainer")]
		[XmlElement("outsideComponent")]
        public List<RefContainer> OutsideComponent {
            get {
                return outsideComponentField;
            } 
            set {
                outsideComponentField = value;
                NotifyPropertyChanged("OutsideComponent");
            }
        }

         /// <summary>
         /// bool to indicate if OutsideComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OutsideComponentSpecified
         {
             get {
             if(outsideComponentField!=null)
                 return outsideComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefContainer> outsideComponentField; 

        /// <summary>
        /// tensileMax property
        /// </summary>
		[Description("Max Tensile Strength")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "forceMeasure")]
		[XmlElement("tensileMax")]
        public ForceMeasure TensileMax {
            get {
                return tensileMaxField;
            } 
            set {
                tensileMaxField = value;
                NotifyPropertyChanged("TensileMax");
            }
        }

        private ForceMeasure tensileMaxField; 

        /// <summary>
        /// presRating property
        /// </summary>
		[Description("Pressure  Rating")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presRating")]
        public PressureMeasure PresRating {
            get {
                return presRatingField;
            } 
            set {
                presRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure presRatingField; 

        /// <summary>
        /// presCollapse property
        /// </summary>
		[Description("Collapse Pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presCollapse")]
        public PressureMeasure PresCollapse {
            get {
                return presCollapseField;
            } 
            set {
                presCollapseField = value;
                NotifyPropertyChanged("PresCollapse");
            }
        }

        private PressureMeasure presCollapseField; 

        /// <summary>
        /// presBurst property
        /// </summary>
		[Description("Burst Pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presBurst")]
        public PressureMeasure PresBurst {
            get {
                return presBurstField;
            } 
            set {
                presBurstField = value;
                NotifyPropertyChanged("PresBurst");
            }
        }

        private PressureMeasure presBurstField; 

        /// <summary>
        /// heatRating property
        /// </summary>
		[Description("heat rating")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("heatRating")]
        public ThermodynamicTemperatureMeasure HeatRating {
            get {
                return heatRatingField;
            } 
            set {
                heatRatingField = value;
                NotifyPropertyChanged("HeatRating");
            }
        }

        private ThermodynamicTemperatureMeasure heatRatingField; 

        /// <summary>
        /// isLinetoSurface property
        /// </summary>
		[Description("Flag indicating the equipment has line connected to surface.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isLinetoSurface")]
        public bool? IsLinetoSurface {
            get {
                return isLinetoSurfaceField;
            } 
            set {
                isLinetoSurfaceField = value;
                 this.IsLinetoSurfaceSpecified = true;
                NotifyPropertyChanged("IsLinetoSurface");
            }
        }

        private bool? isLinetoSurfaceField; 

        /// <summary>
        /// isLinetoSurfaceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsLinetoSurfaceSpecified {
            get {
                return isLinetoSurfaceSpecifiedField;
            } 
            set {
                isLinetoSurfaceSpecifiedField = value;
                NotifyPropertyChanged("IsLinetoSurfaceSpecified");
            }
        }

        private bool isLinetoSurfaceSpecifiedField; 

        /// <summary>
        /// isCentralized property
        /// </summary>
		[Description("Flag indicating equipment is centralized")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isCentralized")]
        public bool? IsCentralized {
            get {
                return isCentralizedField;
            } 
            set {
                isCentralizedField = value;
                 this.IsCentralizedSpecified = true;
                NotifyPropertyChanged("IsCentralized");
            }
        }

        private bool? isCentralizedField; 

        /// <summary>
        /// isCentralizedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsCentralizedSpecified {
            get {
                return isCentralizedSpecifiedField;
            } 
            set {
                isCentralizedSpecifiedField = value;
                NotifyPropertyChanged("IsCentralizedSpecified");
            }
        }

        private bool isCentralizedSpecifiedField; 

        /// <summary>
        /// hasScratchers property
        /// </summary>
		[Description("Flag indicating scratchers have been added to the equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("hasScratchers")]
        public bool? HasScratchers {
            get {
                return hasScratchersField;
            } 
            set {
                hasScratchersField = value;
                 this.HasScratchersSpecified = true;
                NotifyPropertyChanged("HasScratchers");
            }
        }

        private bool? hasScratchersField; 

        /// <summary>
        /// hasScratchersSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool HasScratchersSpecified {
            get {
                return hasScratchersSpecifiedField;
            } 
            set {
                hasScratchersSpecifiedField = value;
                NotifyPropertyChanged("HasScratchersSpecified");
            }
        }

        private bool hasScratchersSpecifiedField; 

        /// <summary>
        /// connectionNext property
        /// </summary>
		[Description("Describes the next component connected.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_equipmentConnection")]
		[XmlElement("connectionNext")]
        public List<EquipmentConnection> ConnectionNext {
            get {
                return connectionNextField;
            } 
            set {
                connectionNextField = value;
                NotifyPropertyChanged("ConnectionNext");
            }
        }

         /// <summary>
         /// bool to indicate if ConnectionNext has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectionNextSpecified
         {
             get {
             if(connectionNextField!=null)
                 return connectionNextField.Count>0?true:false;
             else return false;
             }
         }
        private List<EquipmentConnection> connectionNextField; 

        /// <summary>
        /// assembly property
        /// </summary>
		[Description("Describes the assembly connected.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_assembly")]
		[XmlArrayItem("part")]
        [XmlArray("assembly")]
        public List<StringEquipment> Assembly {
            get {
                return assemblyField;
            } 
            set {
                assemblyField = value;
                NotifyPropertyChanged("Assembly");
            }
        }

         /// <summary>
         /// bool to indicate if Assembly has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AssemblySpecified
         {
             get {
             if(assemblyField!=null)
                 return assemblyField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> assemblyField; 

        /// <summary>
        /// perforationSetRefID property
        /// </summary>
		[Description("reference the perforated hole in equipment after perforation event.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("perforationSetRefID")]
        public List<string> PerforationSetRefID {
            get {
                return perforationSetRefIDField;
            } 
            set {
                perforationSetRefIDField = value;
                NotifyPropertyChanged("PerforationSetRefID");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSetRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetRefIDSpecified
         {
             get {
             if(perforationSetRefIDField!=null)
                 return perforationSetRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> perforationSetRefIDField; 

        /// <summary>
        /// permanentRemarks property
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks on the equipment stored permanently.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("permanentRemarks")]
        public string PermanentRemarks {
            get {
                return permanentRemarksField;
            } 
            set {
                permanentRemarksField = value;
                NotifyPropertyChanged("PermanentRemarks");
            }
        }

        private string permanentRemarksField; 

        /// <summary>
        /// usageComment property
        /// </summary>
		[StringLength(4000)]
        [Description("Remarks on usage of this equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("usageComment")]
        public string UsageComment {
            get {
                return usageCommentField;
            } 
            set {
                usageCommentField = value;
                NotifyPropertyChanged("UsageComment");
            }
        }

        private string usageCommentField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// commonData property
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// customData property
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

		/// <summary>
        /// equipmentRefUID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique reference for the equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("equipmentRefUID")]
		
        public string EquipmentRefUID {
            get {
                return equipmentRefUIDField;
            } 
            set {
                equipmentRefUIDField = value;
                NotifyPropertyChanged("EquipmentRefUID");
            }
        }

        private string equipmentRefUIDField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_refContainer xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refContainer", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_refContainer xsd type.")]
    public partial class RefContainer : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// stringRefID property
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("DownholeString reference id")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("stringRefID")]
        public string StringRefID {
            get {
                return stringRefIDField;
            } 
            set {
                stringRefIDField = value;
                NotifyPropertyChanged("StringRefID");
            }
        }

        private string stringRefIDField; 

        /// <summary>
        /// equipmentRefID property
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Equipment reference id")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("equipmentRefID")]
        public string EquipmentRefID {
            get {
                return equipmentRefIDField;
            } 
            set {
                equipmentRefIDField = value;
                NotifyPropertyChanged("EquipmentRefID");
            }
        }

        private string equipmentRefIDField; 

        /// <summary>
        /// accesoryEquipmentRefID property
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to the equipment for this accessory")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("accesoryEquipmentRefID")]
        public string AccesoryEquipmentRefID {
            get {
                return accesoryEquipmentRefIDField;
            } 
            set {
                accesoryEquipmentRefIDField = value;
                NotifyPropertyChanged("AccesoryEquipmentRefID");
            }
        }

        private string accesoryEquipmentRefIDField; 

        /// <summary>
        /// comment property
        /// </summary>
		[Required]
        [StringLength(4000)]
        [Description("Comment on this container reference")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_downholeString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_downholeString", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_downholeString xsd type.")]
    public partial class DownholeString : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// stringType property
        /// </summary>
		[Required]
        [Description("An enumeration type defined in equipmentCatelog, the \"DownholeStringEnum\"                     contains valid option of \"case\",\"rod\",\"tubing\", \"otherString\".")]
        [EnergisticsDataTypeAttribute(DataType = "DownholeStringType")]
		[XmlElement("stringType")]
        public DownholeStringType? StringType {
            get {
                return stringTypeField;
            } 
            set {
                stringTypeField = value;
                 this.StringTypeSpecified = true;
                NotifyPropertyChanged("StringType");
            }
        }

        
        private bool StringTypeSpecifiedField = false;
        
        /// <summary>
        /// StringTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StringTypeSpecified {
            get {
                return StringTypeSpecifiedField;
            } 
            set {
                StringTypeSpecifiedField = value;
                NotifyPropertyChanged("StringTypeSpecified");
            }
        }
        
        private DownholeStringType? stringTypeField; 

        /// <summary>
        /// subStringType property
        /// </summary>
		[Description("An enumeration type define for express further string type etc. \"SurfaceCasing\", \"IntermediaCasing\", \"productionCasing\".")]
        [EnergisticsDataTypeAttribute(DataType = "SubStringType")]
		[XmlElement("subStringType")]
        public SubStringType? SubStringType {
            get {
                return subStringTypeField;
            } 
            set {
                subStringTypeField = value;
                 this.SubStringTypeSpecified = true;
                NotifyPropertyChanged("SubStringType");
            }
        }

        private SubStringType? subStringTypeField; 

        /// <summary>
        /// subStringTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SubStringTypeSpecified {
            get {
                return subStringTypeSpecifiedField;
            } 
            set {
                subStringTypeSpecifiedField = value;
                NotifyPropertyChanged("SubStringTypeSpecified");
            }
        }

        private bool subStringTypeSpecifiedField; 

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of downhole string.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// stringInstallDate property
        /// </summary>
		[Description("The install date of downhole string.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("stringInstallDate")]
        public Timestamp? StringInstallDate {
            get {
                return stringInstallDateField;
            } 
            set {
                stringInstallDateField = value;
                 this.StringInstallDateSpecified = true;
                NotifyPropertyChanged("StringInstallDate");
            }
        }

        private Timestamp? stringInstallDateField; 

        /// <summary>
        /// stringInstallDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StringInstallDateSpecified {
            get {
                return stringInstallDateSpecifiedField;
            } 
            set {
                stringInstallDateSpecifiedField = value;
                NotifyPropertyChanged("StringInstallDateSpecified");
            }
        }

        private bool stringInstallDateSpecifiedField; 

        /// <summary>
        /// parentStringsName property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The name of parent string.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("parentStringsName")]
        public string ParentStringsName {
            get {
                return parentStringsNameField;
            } 
            set {
                parentStringsNameField = value;
                NotifyPropertyChanged("ParentStringsName");
            }
        }

        private string parentStringsNameField; 

        /// <summary>
        /// mdTop property
        /// </summary>
		[Description("Measured depth at Top of Interval")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// mdBottom property
        /// </summary>
		[Description("Measured depth at bottom of the section")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// axisOffset property
        /// </summary>
		[Description("the distance from the sibling string.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("axisOffset")]
        public LengthMeasure AxisOffset {
            get {
                return axisOffsetField;
            } 
            set {
                axisOffsetField = value;
                NotifyPropertyChanged("AxisOffset");
            }
        }

        private LengthMeasure axisOffsetField; 

        /// <summary>
        /// stringEquipmentSet property
        /// </summary>
		[Description("the list of equipment in the string. each equipment is liner connected and carry the rest of weight")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stringEquipmentSet")]
		[XmlArrayItem("stringEquipment")]
        [XmlArray("stringEquipmentSet")]
        public List<StringEquipment> StringEquipmentSet {
            get {
                return stringEquipmentSetField;
            } 
            set {
                stringEquipmentSetField = value;
                NotifyPropertyChanged("StringEquipmentSet");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentSetSpecified
         {
             get {
             if(stringEquipmentSetField!=null)
                 return stringEquipmentSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> stringEquipmentSetField; 

        /// <summary>
        /// accessories property
        /// </summary>
		[Description("the accessories equipment of the string. It locates in the downhole string, but it is not equipment which liner connected in string (from top to down), and it is not carraying the weight of string")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_stringAccessory")]
		[XmlArrayItem("accessory")]
        [XmlArray("accessories")]
        public List<StringEquipment> Accessories {
            get {
                return accessoriesField;
            } 
            set {
                accessoriesField = value;
                NotifyPropertyChanged("Accessories");
            }
        }

         /// <summary>
         /// bool to indicate if Accessories has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AccessoriesSpecified
         {
             get {
             if(accessoriesField!=null)
                 return accessoriesField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> accessoriesField; 

        /// <summary>
        /// extensionAny property
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

		/// <summary>
        /// uidParentString property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The uidParentString points to the parent string. Even if the string is not physically connected together, this string is             still considered as a continuation of the parent string.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidParentString")]
		
        public string UidParentString {
            get {
                return uidParentStringField;
            } 
            set {
                uidParentStringField = value;
                NotifyPropertyChanged("UidParentString");
            }
        }

        private string uidParentStringField; 

		/// <summary>
        /// uidWellbore property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the obj_downholeComponent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_downholeComponent", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("This class represents the obj_downholeComponent xsd type.")]
    public partial class DownholeComponent : Object, IWitsmlDataObject, ICommonDataObject, IWellObject, INotifyPropertyChanged
    {

        /// <summary>
        /// nameWell property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the downhole equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// startDate property
        /// </summary>
		[Description("The date range specification: start date")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("startDate")]
        public Timestamp? StartDate {
            get {
                return startDateField;
            } 
            set {
                startDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private Timestamp? startDateField; 

        /// <summary>
        /// startDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return startDateSpecifiedField;
            } 
            set {
                startDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private bool startDateSpecifiedField; 

        /// <summary>
        /// endDate property
        /// </summary>
		[Description("The date range specification: end date")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private bool endDateSpecifiedField; 

        /// <summary>
        /// wellHead property
        /// </summary>
		[Description("This section contains wellhead information, and is composed of string equipment")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_downholeString")]
		[XmlElement("wellHead")]
        public DownholeString WellHead {
            get {
                return wellHeadField;
            } 
            set {
                wellHeadField = value;
                NotifyPropertyChanged("WellHead");
            }
        }

        private DownholeString wellHeadField; 

        /// <summary>
        /// boreholeStringSet property
        /// </summary>
		[Description("This section contains bore hole string information including flow interval")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_boreholeStringSet")]
		[XmlArrayItem("boreholeString")]
        [XmlArray("boreholeStringSet")]
        public List<BoreholeString> BoreholeStringSet {
            get {
                return boreholeStringSetField;
            } 
            set {
                boreholeStringSetField = value;
                NotifyPropertyChanged("BoreholeStringSet");
            }
        }

         /// <summary>
         /// bool to indicate if BoreholeStringSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeStringSetSpecified
         {
             get {
             if(boreholeStringSetField!=null)
                 return boreholeStringSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<BoreholeString> boreholeStringSetField; 

        /// <summary>
        /// downholeStringSet property
        /// </summary>
		[Description("The linear downhole string equipment")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_downholeStringSet")]
		[XmlArrayItem("downholeString")]
        [XmlArray("downholeStringSet")]
        public List<DownholeString> DownholeStringSet {
            get {
                return downholeStringSetField;
            } 
            set {
                downholeStringSetField = value;
                NotifyPropertyChanged("DownholeStringSet");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeStringSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeStringSetSpecified
         {
             get {
             if(downholeStringSetField!=null)
                 return downholeStringSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<DownholeString> downholeStringSetField; 

        /// <summary>
        /// equipmentSet property
        /// </summary>
		[Description("A collection of equipment / component")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_equipmentSet")]
		[XmlArrayItem("equipment")]
        [XmlArray("equipmentSet")]
        public List<Equipment> EquipmentSet {
            get {
                return equipmentSetField;
            } 
            set {
                equipmentSetField = value;
                NotifyPropertyChanged("EquipmentSet");
            }
        }

         /// <summary>
         /// bool to indicate if EquipmentSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EquipmentSetSpecified
         {
             get {
             if(equipmentSetField!=null)
                 return equipmentSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<Equipment> equipmentSetField; 

        /// <summary>
        /// perforationSets property
        /// </summary>
		[Description("A collection of contact interval information")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_perforationSets")]
		[XmlArrayItem("perforationSet")]
        [XmlArray("perforationSets")]
        public List<PerforationSet> PerforationSets {
            get {
                return perforationSetsField;
            } 
            set {
                perforationSetsField = value;
                NotifyPropertyChanged("PerforationSets");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSets has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetsSpecified
         {
             get {
             if(perforationSetsField!=null)
                 return perforationSetsField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerforationSet> perforationSetsField; 

        /// <summary>
        /// commonData property
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// customData property
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uidWell property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_depthRegLogRect xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_depthRegLogRect", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_depthRegLogRect xsd type.")]
    public partial class DepthRegLogRect : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// type property
        /// </summary>
		[Description("A region of an image containing a log section image.")]
        [EnergisticsDataTypeAttribute(DataType = "LogRectangularType")]
		[XmlElement("type")]
        public LogRectangularType? Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private LogRectangularType? typeField; 

        /// <summary>
        /// typeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return typeSpecifiedField;
            } 
            set {
                typeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool typeSpecifiedField; 

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of a rectangular section.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// position property
        /// </summary>
		[Description("The bounding box of the log section image.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegRectangular")]
		[XmlElement("position")]
        public DepthRegRectangular Position {
            get {
                return positionField;
            } 
            set {
                positionField = value;
                NotifyPropertyChanged("Position");
            }
        }

        private DepthRegRectangular positionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_depthRegRectangular xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_depthRegRectangular", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_depthRegRectangular xsd type.")]
    public partial class DepthRegRectangular : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// ur property
        /// </summary>
		[Description("The upper right point of a rectangular region.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegPoint")]
		[XmlElement("ur")]
        public DepthRegPoint UpperRight {
            get {
                return urField;
            } 
            set {
                urField = value;
                NotifyPropertyChanged("UpperRight");
            }
        }

        private DepthRegPoint urField; 

        /// <summary>
        /// ul property
        /// </summary>
		[Description("The upper left point of a rectangular region.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegPoint")]
		[XmlElement("ul")]
        public DepthRegPoint UpperLeft {
            get {
                return ulField;
            } 
            set {
                ulField = value;
                NotifyPropertyChanged("UpperLeft");
            }
        }

        private DepthRegPoint ulField; 

        /// <summary>
        /// ll property
        /// </summary>
		[Description("The lower left point of a rectangular region.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegPoint")]
		[XmlElement("ll")]
        public DepthRegPoint LowerLeft {
            get {
                return llField;
            } 
            set {
                llField = value;
                NotifyPropertyChanged("LowerLeft");
            }
        }

        private DepthRegPoint llField; 

        /// <summary>
        /// lr property
        /// </summary>
		[Description("The lower right point of a rectangular region.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegPoint")]
		[XmlElement("lr")]
        public DepthRegPoint LowerRight {
            get {
                return lrField;
            } 
            set {
                lrField = value;
                NotifyPropertyChanged("LowerRight");
            }
        }

        private DepthRegPoint lrField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_depthRegPoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_depthRegPoint", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_depthRegPoint xsd type.")]
    public partial class DepthRegPoint : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// x property
        /// </summary>
		[Required]
        [Description("The x pixel position of a point.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeBigCount")]
		[XmlElement("x")]
        public int? X {
            get {
                return xField;
            } 
            set {
                xField = value;
                NotifyPropertyChanged("X");
            }
        }

        private int? xField; 

        /// <summary>
        /// y property
        /// </summary>
		[Required]
        [Description("The y pixel position of a point.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeBigCount")]
		[XmlElement("y")]
        public int? Y {
            get {
                return yField;
            } 
            set {
                yField = value;
                NotifyPropertyChanged("Y");
            }
        }

        private int? yField; 

        /// <summary>
        /// type property
        /// </summary>
		[StringLength(32)]
        [Description("Position Types include: topLeft, topRight, bottomLeft, bottomRight, Index")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_depthRegTrackCurve xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_depthRegTrackCurve", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_depthRegTrackCurve xsd type.")]
    public partial class DepthRegTrackCurve : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// curveInfo property
        /// </summary>
		[Required]
        [Description("Curve mnemonic")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "shortNameStruct")]
		[XmlElement("curveInfo")]
        public ShortNameStruct CurveInfo {
            get {
                return curveInfoField;
            } 
            set {
                curveInfoField = value;
                NotifyPropertyChanged("CurveInfo");
            }
        }

        private ShortNameStruct curveInfoField; 

        /// <summary>
        /// lineStyle property
        /// </summary>
		[Required]
        [Description("Image line style")]
        [EnergisticsDataTypeAttribute(DataType = "LineStyle")]
		[XmlElement("lineStyle")]
        public LineStyle? LineStyle {
            get {
                return lineStyleField;
            } 
            set {
                lineStyleField = value;
                 this.LineStyleSpecified = true;
                NotifyPropertyChanged("LineStyle");
            }
        }

        
        private bool LineStyleSpecifiedField = false;
        
        /// <summary>
        /// LineStyleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LineStyleSpecified {
            get {
                return LineStyleSpecifiedField;
            } 
            set {
                LineStyleSpecifiedField = value;
                NotifyPropertyChanged("LineStyleSpecified");
            }
        }
        
        private LineStyle? lineStyleField; 

        /// <summary>
        /// lineWeight property
        /// </summary>
		[Required]
        [Description("Description of line graveness")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("lineWeight")]
        public string LineWeight {
            get {
                return lineWeightField;
            } 
            set {
                lineWeightField = value;
                NotifyPropertyChanged("LineWeight");
            }
        }

        private string lineWeightField; 

        /// <summary>
        /// lineColor property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Color of this line")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("lineColor")]
        public string LineColor {
            get {
                return lineColorField;
            } 
            set {
                lineColorField = value;
                NotifyPropertyChanged("LineColor");
            }
        }

        private string lineColorField; 

        /// <summary>
        /// curveScaleType property
        /// </summary>
		[Required]
        [Description("Scale linearity")]
        [EnergisticsDataTypeAttribute(DataType = "ScaleType")]
		[XmlElement("curveScaleType")]
        public ScaleType? CurveScaleType {
            get {
                return curveScaleTypeField;
            } 
            set {
                curveScaleTypeField = value;
                 this.CurveScaleTypeSpecified = true;
                NotifyPropertyChanged("CurveScaleType");
            }
        }

        
        private bool CurveScaleTypeSpecifiedField = false;
        
        /// <summary>
        /// CurveScaleTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurveScaleTypeSpecified {
            get {
                return CurveScaleTypeSpecifiedField;
            } 
            set {
                CurveScaleTypeSpecifiedField = value;
                NotifyPropertyChanged("CurveScaleTypeSpecified");
            }
        }
        
        private ScaleType? curveScaleTypeField; 

        /// <summary>
        /// curveUnit property
        /// </summary>
		[Required]
        [Description("Unit of data represented")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("curveUnit")]
        public string CurveUnit {
            get {
                return curveUnitField;
            } 
            set {
                curveUnitField = value;
                NotifyPropertyChanged("CurveUnit");
            }
        }

        private string curveUnitField; 

        /// <summary>
        /// curveLeftScaleValue property
        /// </summary>
		[Required]
        [Description("Scale value on the left axis")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("curveLeftScaleValue")]
        public double? CurveLeftScaleValue {
            get {
                return curveLeftScaleValueField;
            } 
            set {
                curveLeftScaleValueField = value;
                NotifyPropertyChanged("CurveLeftScaleValue");
            }
        }

        private double? curveLeftScaleValueField; 

        /// <summary>
        /// curveRightScaleValue property
        /// </summary>
		[Required]
        [Description("Scale value on the right axis")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("curveRightScaleValue")]
        public double? CurveRightScaleValue {
            get {
                return curveRightScaleValueField;
            } 
            set {
                curveRightScaleValueField = value;
                NotifyPropertyChanged("CurveRightScaleValue");
            }
        }

        private double? curveRightScaleValueField; 

        /// <summary>
        /// curveBackupScaleType property
        /// </summary>
		[Required]
        [Description("Scale of the backup curve")]
        [EnergisticsDataTypeAttribute(DataType = "BackupScaleType")]
		[XmlElement("curveBackupScaleType")]
        public BackupScaleType? CurveBackupScaleType {
            get {
                return curveBackupScaleTypeField;
            } 
            set {
                curveBackupScaleTypeField = value;
                 this.CurveBackupScaleTypeSpecified = true;
                NotifyPropertyChanged("CurveBackupScaleType");
            }
        }

        
        private bool CurveBackupScaleTypeSpecifiedField = false;
        
        /// <summary>
        /// CurveBackupScaleTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurveBackupScaleTypeSpecified {
            get {
                return CurveBackupScaleTypeSpecifiedField;
            } 
            set {
                CurveBackupScaleTypeSpecifiedField = value;
                NotifyPropertyChanged("CurveBackupScaleTypeSpecified");
            }
        }
        
        private BackupScaleType? curveBackupScaleTypeField; 

        /// <summary>
        /// description property
        /// </summary>
		[StringLength(256)]
        [Description("Details of the line")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_depthRegTrack xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_depthRegTrack", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_depthRegTrack xsd type.")]
    public partial class DepthRegTrack : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("A label associated with the track.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// type property
        /// </summary>
		[Required]
        [Description("The kind of track.")]
        [EnergisticsDataTypeAttribute(DataType = "LogTrackType")]
		[XmlElement("type")]
        public LogTrackType? Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        
        private bool TypeSpecifiedField = false;
        
        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }
        
        private LogTrackType? typeField; 

        /// <summary>
        /// leftEdge property
        /// </summary>
		[Required]
        [Description("The position of the left edge of the track.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeBigCount")]
		[XmlElement("leftEdge")]
        public int? LeftEdge {
            get {
                return leftEdgeField;
            } 
            set {
                leftEdgeField = value;
                NotifyPropertyChanged("LeftEdge");
            }
        }

        private int? leftEdgeField; 

        /// <summary>
        /// rightEdge property
        /// </summary>
		[Required]
        [Description("The position of the right edge of the track.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeBigCount")]
		[XmlElement("rightEdge")]
        public int? RightEdge {
            get {
                return rightEdgeField;
            } 
            set {
                rightEdgeField = value;
                NotifyPropertyChanged("RightEdge");
            }
        }

        private int? rightEdgeField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// associatedCurve property
        /// </summary>
		[Description("One or more curves specified in this track.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegTrackCurve")]
		[XmlElement("associatedCurve")]
        public List<DepthRegTrackCurve> AssociatedCurve {
            get {
                return associatedCurveField;
            } 
            set {
                associatedCurveField = value;
                NotifyPropertyChanged("AssociatedCurve");
            }
        }

         /// <summary>
         /// bool to indicate if AssociatedCurve has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AssociatedCurveSpecified
         {
             get {
             if(associatedCurveField!=null)
                 return associatedCurveField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegTrackCurve> associatedCurveField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_depthRegParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_depthRegParameter", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_depthRegParameter xsd type.")]
    public partial class DepthRegParameter : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// mnemonic property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A dictionary-controlled mnemonic.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("mnemonic")]
        public string Mnemonic {
            get {
                return mnemonicField;
            } 
            set {
                mnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private string mnemonicField; 

        /// <summary>
        /// dictionary property
        /// </summary>
		[StringLength(64)]
        [Description("The name or identifier of the controlling dictionary.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("dictionary")]
        public string Dictionary {
            get {
                return dictionaryField;
            } 
            set {
                dictionaryField = value;
                NotifyPropertyChanged("Dictionary");
            }
        }

        private string dictionaryField; 

        /// <summary>
        /// topIndex property
        /// </summary>
		[Description("The upper limit of a vertical region for which the parameter value is applicable.  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("topIndex")]
        public GenericMeasure TopIndex {
            get {
                return topIndexField;
            } 
            set {
                topIndexField = value;
                NotifyPropertyChanged("TopIndex");
            }
        }

        private GenericMeasure topIndexField; 

        /// <summary>
        /// bottomIndex property
        /// </summary>
		[Description("The lower limit of a vertical region for which the parameter value is applicable.  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("bottomIndex")]
        public GenericMeasure BottomIndex {
            get {
                return bottomIndexField;
            } 
            set {
                bottomIndexField = value;
                NotifyPropertyChanged("BottomIndex");
            }
        }

        private GenericMeasure bottomIndexField; 

        /// <summary>
        /// value property
        /// </summary>
		[Required]
        [Description("The value assigned to the parameter.   The unit of measure should be consistent with the property implied by 'mnemonic' in 'dictionary'. If the value is unitless then a unit of 'Euc' should be used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("value")]
        public GenericMeasure Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private GenericMeasure valueField; 

        /// <summary>
        /// description property
        /// </summary>
		[StringLength(256)]
        [Description("A description or definition for the mnemonic; required when ../dictionary is absent.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_depthRegCalibrationPoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_depthRegCalibrationPoint", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_depthRegCalibrationPoint xsd type.")]
    public partial class DepthRegCalibrationPoint : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// index property
        /// </summary>
		[Required]
        [Description("The index (depth or time) for the calibration point.   The uom value must be consistent with the indexType.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("index")]
        public GenericMeasure Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private GenericMeasure indexField; 

        /// <summary>
        /// track property
        /// </summary>
		[Required]
        [Description("A pointer to the track containing the point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("track")]
        public RefNameString Track {
            get {
                return trackField;
            } 
            set {
                trackField = value;
                NotifyPropertyChanged("Track");
            }
        }

        private RefNameString trackField; 

        /// <summary>
        /// role property
        /// </summary>
		[Required]
        [Description("The horizontal position on the grid which the calibration  point represents.")]
        [EnergisticsDataTypeAttribute(DataType = "CalibrationPointRole")]
		[XmlElement("role")]
        public CalibrationPointRole? Role {
            get {
                return roleField;
            } 
            set {
                roleField = value;
                 this.RoleSpecified = true;
                NotifyPropertyChanged("Role");
            }
        }

        
        private bool RoleSpecifiedField = false;
        
        /// <summary>
        /// RoleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RoleSpecified {
            get {
                return RoleSpecifiedField;
            } 
            set {
                RoleSpecifiedField = value;
                NotifyPropertyChanged("RoleSpecified");
            }
        }
        
        private CalibrationPointRole? roleField; 

        /// <summary>
        /// curveName property
        /// </summary>
		[StringLength(32)]
        [Description("Facilitates searching for logs based on curve type.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("curveName")]
        public string CurveName {
            get {
                return curveNameField;
            } 
            set {
                curveNameField = value;
                NotifyPropertyChanged("CurveName");
            }
        }

        private string curveNameField; 

        /// <summary>
        /// fraction property
        /// </summary>
		[Description("An intermediate Point from left edge to right edge  (required when role is \"fraction\", not allowed otherwise);  used to extrapolate the rectified position of a track boundary which has  wandered off the edge of the image.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("fraction")]
        public double? Fraction {
            get {
                return fractionField;
            } 
            set {
                fractionField = value;
                 this.FractionSpecified = true;
                NotifyPropertyChanged("Fraction");
            }
        }

        private double? fractionField; 

        /// <summary>
        /// fractionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FractionSpecified {
            get {
                return fractionSpecifiedField;
            } 
            set {
                fractionSpecifiedField = value;
                NotifyPropertyChanged("FractionSpecified");
            }
        }

        private bool fractionSpecifiedField; 

        /// <summary>
        /// comment property
        /// </summary>
		[Description("Comments about the calibration.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public List<string> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> commentField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// parameter property
        /// </summary>
		[Description("Parameters associated with the calibration point.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegParameter")]
		[XmlElement("parameter")]
        public List<DepthRegParameter> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(parameterField!=null)
                 return parameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegParameter> parameterField; 

        /// <summary>
        /// point property
        /// </summary>
		[Required]
        [Description("The position on the image of the calibration point")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegPoint")]
		[XmlElement("point")]
        public DepthRegPoint Point {
            get {
                return pointField;
            } 
            set {
                pointField = value;
                NotifyPropertyChanged("Point");
            }
        }

        private DepthRegPoint pointField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_depthRegLogSection xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_depthRegLogSection", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("This class represents the cs_depthRegLogSection xsd type.")]
    public partial class DepthRegLogSection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// logSectionSequenceNumber property
        /// </summary>
		[Required]
        [Description("Zero-based index in log sections, in order of appearance.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("logSectionSequenceNumber")]
        public short? LogSectionSequenceNumber {
            get {
                return logSectionSequenceNumberField;
            } 
            set {
                logSectionSequenceNumberField = value;
                NotifyPropertyChanged("LogSectionSequenceNumber");
            }
        }

        private short? logSectionSequenceNumberField; 

        /// <summary>
        /// logSectionType property
        /// </summary>
		[Description("Type of log section.")]
        [EnergisticsDataTypeAttribute(DataType = "LogSectionType")]
		[XmlElement("logSectionType")]
        public LogSectionType? LogSectionType {
            get {
                return logSectionTypeField;
            } 
            set {
                logSectionTypeField = value;
                 this.LogSectionTypeSpecified = true;
                NotifyPropertyChanged("LogSectionType");
            }
        }

        private LogSectionType? logSectionTypeField; 

        /// <summary>
        /// logSectionTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LogSectionTypeSpecified {
            get {
                return logSectionTypeSpecifiedField;
            } 
            set {
                logSectionTypeSpecifiedField = value;
                NotifyPropertyChanged("LogSectionTypeSpecified");
            }
        }

        private bool logSectionTypeSpecifiedField; 

        /// <summary>
        /// logSectionName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of log section;  used to distinguish log sections of same type.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("logSectionName")]
        public string LogSectionName {
            get {
                return logSectionNameField;
            } 
            set {
                logSectionNameField = value;
                NotifyPropertyChanged("LogSectionName");
            }
        }

        private string logSectionNameField; 

        /// <summary>
        /// logMatrix property
        /// </summary>
		[StringLength(64)]
        [Description("Log matrix assumed for porosity computations.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("logMatrix")]
        public string LogMatrix {
            get {
                return logMatrixField;
            } 
            set {
                logMatrixField = value;
                NotifyPropertyChanged("LogMatrix");
            }
        }

        private string logMatrixField; 

        /// <summary>
        /// scaleNumerator property
        /// </summary>
		[Description("The numerator of the index (depth or time) scale of the original log, e. g. \"5 in\".")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("scaleNumerator")]
        public LengthMeasure ScaleNumerator {
            get {
                return scaleNumeratorField;
            } 
            set {
                scaleNumeratorField = value;
                NotifyPropertyChanged("ScaleNumerator");
            }
        }

        private LengthMeasure scaleNumeratorField; 

        /// <summary>
        /// scaleDenominator property
        /// </summary>
		[Description("The denominator of the index (depth or time) scale of the original log, e. g. \"100 ft\".  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("scaleDenominator")]
        public GenericMeasure ScaleDenominator {
            get {
                return scaleDenominatorField;
            } 
            set {
                scaleDenominatorField = value;
                NotifyPropertyChanged("ScaleDenominator");
            }
        }

        private GenericMeasure scaleDenominatorField; 

        /// <summary>
        /// indexType property
        /// </summary>
		[Required]
        [Description("Primary index type. For date-time indexes, any specified index values should be defined as a time offset (e.g., in seconds) from the  creationDate of the well log.")]
        [EnergisticsDataTypeAttribute(DataType = "LogIndexType")]
		[XmlElement("indexType")]
        public LogIndexType? IndexType {
            get {
                return indexTypeField;
            } 
            set {
                indexTypeField = value;
                 this.IndexTypeSpecified = true;
                NotifyPropertyChanged("IndexType");
            }
        }

        
        private bool IndexTypeSpecifiedField = false;
        
        /// <summary>
        /// IndexTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexTypeSpecified {
            get {
                return IndexTypeSpecifiedField;
            } 
            set {
                IndexTypeSpecifiedField = value;
                NotifyPropertyChanged("IndexTypeSpecified");
            }
        }
        
        private LogIndexType? indexTypeField; 

        /// <summary>
        /// indexUom property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Index uom of original log.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("indexUom")]
        public string IndexUom {
            get {
                return indexUomField;
            } 
            set {
                indexUomField = value;
                NotifyPropertyChanged("IndexUom");
            }
        }

        private string indexUomField; 

        /// <summary>
        /// indexReference property
        /// </summary>
		[Description("The origin for vertical coordinates on the original log. If this is not specified, information about the datum should be specified in comment.")]
        [EnergisticsDataTypeAttribute(DataType = "ElevCodeEnum")]
		[XmlElement("indexReference")]
        public ElevCodeEnum? IndexReference {
            get {
                return indexReferenceField;
            } 
            set {
                indexReferenceField = value;
                 this.IndexReferenceSpecified = true;
                NotifyPropertyChanged("IndexReference");
            }
        }

        private ElevCodeEnum? indexReferenceField; 

        /// <summary>
        /// indexReferenceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexReferenceSpecified {
            get {
                return indexReferenceSpecifiedField;
            } 
            set {
                indexReferenceSpecifiedField = value;
                NotifyPropertyChanged("IndexReferenceSpecified");
            }
        }

        private bool indexReferenceSpecifiedField; 

        /// <summary>
        /// log property
        /// </summary>
		[Description("The log ID being referred to by this section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("log")]
        public RefNameString Log {
            get {
                return logField;
            } 
            set {
                logField = value;
                NotifyPropertyChanged("Log");
            }
        }

        private RefNameString logField; 

        /// <summary>
        /// minInterval property
        /// </summary>
		[Required]
        [Description("Minimum of range of index values.  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("minInterval")]
        public GenericMeasure MinInterval {
            get {
                return minIntervalField;
            } 
            set {
                minIntervalField = value;
                NotifyPropertyChanged("MinInterval");
            }
        }

        private GenericMeasure minIntervalField; 

        /// <summary>
        /// maxInterval property
        /// </summary>
		[Required]
        [Description("Maximum of range of index values. '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "genericMeasure")]
		[XmlElement("maxInterval")]
        public GenericMeasure MaxInterval {
            get {
                return maxIntervalField;
            } 
            set {
                maxIntervalField = value;
                NotifyPropertyChanged("MaxInterval");
            }
        }

        private GenericMeasure maxIntervalField; 

        /// <summary>
        /// verticalLabel property
        /// </summary>
		[StringLength(256)]
        [Description("Vertical Log Scale Label (Ex. 1 IN/100 F).")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("verticalLabel")]
        public string VerticalLabel {
            get {
                return verticalLabelField;
            } 
            set {
                verticalLabelField = value;
                NotifyPropertyChanged("VerticalLabel");
            }
        }

        private string verticalLabelField; 

        /// <summary>
        /// verticalRatio property
        /// </summary>
		[StringLength(256)]
        [Description("Second Term of the Vertical Scale Ratio (Ex. 240 for a 5 inch per 100 Foot log section).")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("verticalRatio")]
        public string VerticalRatio {
            get {
                return verticalRatioField;
            } 
            set {
                verticalRatioField = value;
                NotifyPropertyChanged("VerticalRatio");
            }
        }

        private string verticalRatioField; 

        /// <summary>
        /// comment property
        /// </summary>
		[Description("Comments about the log section.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public List<string> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> commentField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// upperCurveScaleRect property
        /// </summary>
		[Description("The part of image containing upper curve scale banner.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegRectangular")]
		[XmlElement("upperCurveScaleRect")]
        public List<DepthRegRectangular> UpperCurveScaleRect {
            get {
                return upperCurveScaleRectField;
            } 
            set {
                upperCurveScaleRectField = value;
                NotifyPropertyChanged("UpperCurveScaleRect");
            }
        }

         /// <summary>
         /// bool to indicate if UpperCurveScaleRect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool UpperCurveScaleRectSpecified
         {
             get {
             if(upperCurveScaleRectField!=null)
                 return upperCurveScaleRectField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegRectangular> upperCurveScaleRectField; 

        /// <summary>
        /// lowerCurveScaleRect property
        /// </summary>
		[Description("The part of image containing lower curve scale banner.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegRectangular")]
		[XmlElement("lowerCurveScaleRect")]
        public List<DepthRegRectangular> LowerCurveScaleRect {
            get {
                return lowerCurveScaleRectField;
            } 
            set {
                lowerCurveScaleRectField = value;
                NotifyPropertyChanged("LowerCurveScaleRect");
            }
        }

         /// <summary>
         /// bool to indicate if LowerCurveScaleRect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LowerCurveScaleRectSpecified
         {
             get {
             if(lowerCurveScaleRectField!=null)
                 return lowerCurveScaleRectField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegRectangular> lowerCurveScaleRectField; 

        /// <summary>
        /// calibrationPoint property
        /// </summary>
		[Description("A mapping of pixel positions to rectified or depth-registered log image positions.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegCalibrationPoint")]
		[XmlElement("calibrationPoint")]
        public List<DepthRegCalibrationPoint> CalibrationPoint {
            get {
                return calibrationPointField;
            } 
            set {
                calibrationPointField = value;
                NotifyPropertyChanged("CalibrationPoint");
            }
        }

         /// <summary>
         /// bool to indicate if CalibrationPoint has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CalibrationPointSpecified
         {
             get {
             if(calibrationPointField!=null)
                 return calibrationPointField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegCalibrationPoint> calibrationPointField; 

        /// <summary>
        /// parameter property
        /// </summary>
		[Description("Parameters associated with the log section.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegParameter")]
		[XmlElement("parameter")]
        public List<DepthRegParameter> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(parameterField!=null)
                 return parameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegParameter> parameterField; 

        /// <summary>
        /// whitespace property
        /// </summary>
		[Description("The part of image left blank on original log.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegRectangular")]
		[XmlElement("whitespace")]
        public List<DepthRegRectangular> Whitespace {
            get {
                return whitespaceField;
            } 
            set {
                whitespaceField = value;
                NotifyPropertyChanged("Whitespace");
            }
        }

         /// <summary>
         /// bool to indicate if Whitespace has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WhitespaceSpecified
         {
             get {
             if(whitespaceField!=null)
                 return whitespaceField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegRectangular> whitespaceField; 

        /// <summary>
        /// track property
        /// </summary>
		[Description("Defines the position of the tracks within this section.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegTrack")]
		[XmlElement("track")]
        public List<DepthRegTrack> Track {
            get {
                return trackField;
            } 
            set {
                trackField = value;
                NotifyPropertyChanged("Track");
            }
        }

         /// <summary>
         /// bool to indicate if Track has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TrackSpecified
         {
             get {
             if(trackField!=null)
                 return trackField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegTrack> trackField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the checksum xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the checksum xsd type.")]
    public partial class Checksum : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the Checksum class.
        /// </summary>
        public Checksum() {}

        /// <summary>
        /// Initializes a new instance of the Checksum class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public Checksum(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// type property
        /// </summary>
		[Required]
        [Description("Message digest type.")]
        [EnergisticsDataTypeAttribute(DataType = "MessageDigestType")]
        [XmlAttribute("type")]
		
        public MessageDigestType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private MessageDigestType typeField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the fileSize xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the fileSize xsd type.")]
    public partial class FileSize : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FileSize class.
        /// </summary>
        public FileSize() {}

        /// <summary>
        /// Initializes a new instance of the FileSize class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public FileSize(double value, FileSizeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "FileSizeUom")]
        [XmlAttribute("uom")]
		
        public FileSizeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private FileSizeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the fileName xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the fileName xsd type.")]
    public partial class FileName : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FileName class.
        /// </summary>
        public FileName() {}

        /// <summary>
        /// Initializes a new instance of the FileName class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public FileName(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// nameType property
        /// </summary>
		[Required]
        [Description("Type of file reference.")]
        [EnergisticsDataTypeAttribute(DataType = "FileNameType")]
        [XmlAttribute("nameType")]
		
        public FileNameType NameType {
            get {
                return nameTypeField;
            } 
            set {
                nameTypeField = value;
                NotifyPropertyChanged("NameType");
            }
        }

        private FileNameType nameTypeField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the obj_depthRegImage xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_depthRegImage", Namespace="http://www.witsml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "1.4.1.1")]
    [Description("This class represents the obj_depthRegImage xsd type.")]
    public partial class DepthRegImage : Object, IWitsmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// nameWell property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// nameWellbore property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the image.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the image.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// fileName property
        /// </summary>
		[Required]
        [Description("Reference to file containing image content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "fileName")]
		[XmlElement("fileName")]
        public FileName FileName {
            get {
                return fileNameField;
            } 
            set {
                fileNameField = value;
                NotifyPropertyChanged("FileName");
            }
        }

        private FileName fileNameField; 

        /// <summary>
        /// mimetype property
        /// </summary>
		[Description("Mimetype of image file content.")]
        [EnergisticsDataTypeAttribute(DataType = "MimeType")]
		[XmlElement("mimetype")]
        public MimeType? Mimetype {
            get {
                return mimetypeField;
            } 
            set {
                mimetypeField = value;
                 this.MimetypeSpecified = true;
                NotifyPropertyChanged("Mimetype");
            }
        }

        private MimeType? mimetypeField; 

        /// <summary>
        /// mimetypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MimetypeSpecified {
            get {
                return mimetypeSpecifiedField;
            } 
            set {
                mimetypeSpecifiedField = value;
                NotifyPropertyChanged("MimetypeSpecified");
            }
        }

        private bool mimetypeSpecifiedField; 

        /// <summary>
        /// fileSize property
        /// </summary>
		[Description("Size of image file, in bytes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "fileSize")]
		[XmlElement("fileSize")]
        public FileSize FileSize {
            get {
                return fileSizeField;
            } 
            set {
                fileSizeField = value;
                NotifyPropertyChanged("FileSize");
            }
        }

        private FileSize fileSizeField; 

        /// <summary>
        /// checksum property
        /// </summary>
		[Description("Image file checksum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "checksum")]
		[XmlElement("checksum")]
        public Checksum Checksum {
            get {
                return checksumField;
            } 
            set {
                checksumField = value;
                NotifyPropertyChanged("Checksum");
            }
        }

        private Checksum checksumField; 

        /// <summary>
        /// imagePixelWidth property
        /// </summary>
		[Description("Image file width, in pixels.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeBigCount")]
		[XmlElement("imagePixelWidth")]
        public int? ImagePixelWidth {
            get {
                return imagePixelWidthField;
            } 
            set {
                imagePixelWidthField = value;
                 this.ImagePixelWidthSpecified = true;
                NotifyPropertyChanged("ImagePixelWidth");
            }
        }

        private int? imagePixelWidthField; 

        /// <summary>
        /// imagePixelWidthSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ImagePixelWidthSpecified {
            get {
                return imagePixelWidthSpecifiedField;
            } 
            set {
                imagePixelWidthSpecifiedField = value;
                NotifyPropertyChanged("ImagePixelWidthSpecified");
            }
        }

        private bool imagePixelWidthSpecifiedField; 

        /// <summary>
        /// imagePixelHeight property
        /// </summary>
		[Description("Image file height, in pixels.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeBigCount")]
		[XmlElement("imagePixelHeight")]
        public int? ImagePixelHeight {
            get {
                return imagePixelHeightField;
            } 
            set {
                imagePixelHeightField = value;
                 this.ImagePixelHeightSpecified = true;
                NotifyPropertyChanged("ImagePixelHeight");
            }
        }

        private int? imagePixelHeightField; 

        /// <summary>
        /// imagePixelHeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ImagePixelHeightSpecified {
            get {
                return imagePixelHeightSpecifiedField;
            } 
            set {
                imagePixelHeightSpecifiedField = value;
                NotifyPropertyChanged("ImagePixelHeightSpecified");
            }
        }

        private bool imagePixelHeightSpecifiedField; 

        /// <summary>
        /// version property
        /// </summary>
		[StringLength(32)]
        [Description("File version.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("version")]
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField; 

        /// <summary>
        /// alias property
        /// </summary>
		[StringLength(32)]
        [Description("A blank field that can be \"populated\" through batch processing of XML files")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("alias")]
        public string Alias {
            get {
                return aliasField;
            } 
            set {
                aliasField = value;
                NotifyPropertyChanged("Alias");
            }
        }

        private string aliasField; 

        /// <summary>
        /// logSection property
        /// </summary>
		[Description("Description and coordinates of well log section.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegLogSection")]
		[XmlElement("logSection")]
        public List<DepthRegLogSection> LogSection {
            get {
                return logSectionField;
            } 
            set {
                logSectionField = value;
                NotifyPropertyChanged("LogSection");
            }
        }

         /// <summary>
         /// bool to indicate if LogSection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogSectionSpecified
         {
             get {
             if(logSectionField!=null)
                 return logSectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegLogSection> logSectionField; 

        /// <summary>
        /// imageBoundary property
        /// </summary>
		[Description("Bounding box of actual image within image extent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegRectangular")]
		[XmlElement("imageBoundary")]
        public DepthRegRectangular ImageBoundary {
            get {
                return imageBoundaryField;
            } 
            set {
                imageBoundaryField = value;
                NotifyPropertyChanged("ImageBoundary");
            }
        }

        private DepthRegRectangular imageBoundaryField; 

        /// <summary>
        /// headerSection property
        /// </summary>
		[Description("Description and coordinates of the header section.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegLogRect")]
		[XmlElement("headerSection")]
        public List<DepthRegLogRect> HeaderSection {
            get {
                return headerSectionField;
            } 
            set {
                headerSectionField = value;
                NotifyPropertyChanged("HeaderSection");
            }
        }

         /// <summary>
         /// bool to indicate if HeaderSection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool HeaderSectionSpecified
         {
             get {
             if(headerSectionField!=null)
                 return headerSectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegLogRect> headerSectionField; 

        /// <summary>
        /// alternateSection property
        /// </summary>
		[Description("Description and coordinates of information box e. g. tool diagram.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_depthRegLogRect")]
		[XmlElement("alternateSection")]
        public List<DepthRegLogRect> AlternateSection {
            get {
                return alternateSectionField;
            } 
            set {
                alternateSectionField = value;
                NotifyPropertyChanged("AlternateSection");
            }
        }

         /// <summary>
         /// bool to indicate if AlternateSection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AlternateSectionSpecified
         {
             get {
             if(alternateSectionField!=null)
                 return alternateSectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegLogRect> alternateSectionField; 

        /// <summary>
        /// commonData property
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// customData property
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uidWell property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// uidWellbore property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for the registration image.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// An event type captures the basic information about an event that has affected the data.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentEvent", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("An event type captures the basic information about an event that has affected the data.")]
    public partial class DocumentEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date on which the event took place.
        /// </summary>
		[Required]
        [Description("The date on which the event took place.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("eventDate")]
        public Timestamp? EventDate {
            get {
                return eventDateField;
            } 
            set {
                eventDateField = value;
                NotifyPropertyChanged("EventDate");
            }
        }

        private Timestamp? eventDateField; 

        /// <summary>
        /// The kind of event event.
        /// </summary>
		[StringLength(64)]
        [Description("The kind of event event.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("eventType")]
        public string EventType {
            get {
                return eventTypeField;
            } 
            set {
                eventTypeField = value;
                NotifyPropertyChanged("EventType");
            }
        }

        private string eventTypeField; 

        /// <summary>
        /// The party responsible for the event.
        /// </summary>
		[StringLength(64)]
        [Description("The party responsible for the event.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("responsibleParty")]
        public string ResponsibleParty {
            get {
                return responsiblePartyField;
            } 
            set {
                responsiblePartyField = value;
                NotifyPropertyChanged("ResponsibleParty");
            }
        }

        private string responsiblePartyField; 

        /// <summary>
        /// A free form comment that can further define the event that occurred.
        /// </summary>
		[StringLength(4000)]
        [Description("A free form comment that can further  define the event that occurred.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about the security classification of the document. This is intended as a documentation of the security so that the file will not inadvertently be sent to someone who is not allowed access to the data. This block also carries a date that the security classification expires. For example, a well log is confidential for a period of time, and then becomes open. All security classes are characterized by their classification systems.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentSecurityInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("Information about the security classification of the document. This is intended as a documentation of the security so that the file will not inadvertently be sent to someone who is not allowed access to the data. This block also carries a date that the security classification expires. For example, a well log is confidential for a period of time, and then becomes open. All security classes are characterized by their classification systems.")]
    public partial class DocumentSecurityInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The security class in which this document is classified. Examples would be confidential, partner confidential, tight. The meaning of the class is determined by the System in which it is defined.
        /// </summary>
		[StringLength(50)]
        [Description("The security class in which this document is  classified. Examples would be confidential, partner confidential,  tight. The meaning of the class is determined by the System in which  it is defined.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("class")]
        public string Class {
            get {
                return classField;
            } 
            set {
                classField = value;
                NotifyPropertyChanged("Class");
            }
        }

        private string classField; 

        /// <summary>
        /// The security classification system. This gives context to the meaning of the Class value.
        /// </summary>
		[StringLength(50)]
        [Description("The security classification system.  This gives context to the meaning of the Class value.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("securitySystem")]
        public string SecuritySystem {
            get {
                return securitySystemField;
            } 
            set {
                securitySystemField = value;
                NotifyPropertyChanged("SecuritySystem");
            }
        }

        private string securitySystemField; 

        /// <summary>
        /// The date on which this security class is no longer applicable.
        /// </summary>
		[Description("The date on which this security class is no  longer applicable.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private bool endDateSpecifiedField; 

        /// <summary>
        /// A general comment to further define the security class.
        /// </summary>
		[StringLength(4000)]
        [Description("A general comment to further define the security  class.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A block of information about the creation of the XML file. This is different than the creation of the data that is included within the file.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentFileCreation", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A block of information about the creation of the XML file. This is different than the creation of the data that is included within the file.")]
    public partial class DocumentFileCreation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The date and time that the file was created.
        /// </summary>
		[Required]
        [Description("The date and time that the file was created.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("fileCreationDate")]
        public Timestamp? FileCreationDate {
            get {
                return fileCreationDateField;
            } 
            set {
                fileCreationDateField = value;
                NotifyPropertyChanged("FileCreationDate");
            }
        }

        private Timestamp? fileCreationDateField; 

        /// <summary>
        /// If appropriate, the software that created the file. This is a free form string, and may include whatever information is deemed relevant.
        /// </summary>
		[StringLength(64)]
        [Description("If appropriate, the software that created the file.  This is a free form string, and may include whatever information  is deemed relevant.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("softwareName")]
        public string SoftwareName {
            get {
                return softwareNameField;
            } 
            set {
                softwareNameField = value;
                NotifyPropertyChanged("SoftwareName");
            }
        }

        private string softwareNameField; 

        /// <summary>
        /// The person or business associate that created the file.
        /// </summary>
		[StringLength(64)]
        [Description("The person or business associate that created  the file.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("fileCreator")]
        public string FileCreator {
            get {
                return fileCreatorField;
            } 
            set {
                fileCreatorField = value;
                NotifyPropertyChanged("FileCreator");
            }
        }

        private string fileCreatorField; 

        /// <summary>
        /// Any comment that would be useful to further explain the creation of this instance document.
        /// </summary>
		[StringLength(4000)]
        [Description("Any comment that would be useful to further  explain the creation of this instance document.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentInfo", Namespace="http://www.witsml.org/schemas/1series")]
	[Description("A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.")]
    public partial class DocumentInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// An identifier for the document. This is intended to be unique within the context of the NamingSystem.
        /// </summary>
		[Required]
        [Description("An identifier for the document. This is  intended to be unique within the context of the NamingSystem.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("documentName")]
        public NameStruct DocumentName {
            get {
                return documentNameField;
            } 
            set {
                documentNameField = value;
                NotifyPropertyChanged("DocumentName");
            }
        }

        private NameStruct documentNameField; 

        /// <summary>
        /// Zero or more alternate names for the document. These names do not need to be unique within the naming system.
        /// </summary>
		[Description("Zero or more alternate names for the document.  These names do not need to be unique within the naming system.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("documentAlias")]
        public List<NameStruct> DocumentAlias {
            get {
                return documentAliasField;
            } 
            set {
                documentAliasField = value;
                NotifyPropertyChanged("DocumentAlias");
            }
        }

         /// <summary>
         /// bool to indicate if DocumentAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DocumentAliasSpecified
         {
             get {
             if(documentAliasField!=null)
                 return documentAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> documentAliasField; 

        /// <summary>
        /// The date of the creation of the document. This is not the same as the date that the file was created. For this date, the document is considered to be the set of information associated with this document information. For example, the document may be a seismic binset. This represents the date that the binset was created. The FileCreation information would capture the date that the XML file was created to send or exchange the binset.
        /// </summary>
		[Description("The date of the creation of the document.  This is not the same as the date that the file was created.  For this date, the document is considered to be the set of  information associated with this document information.  For example, the document may be a seismic binset.  This represents the date that the binset was created.  The FileCreation information would capture the date that  the XML file was created to send or exchange the binset.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("documentDate")]
        public Timestamp? DocumentDate {
            get {
                return documentDateField;
            } 
            set {
                documentDateField = value;
                 this.DocumentDateSpecified = true;
                NotifyPropertyChanged("DocumentDate");
            }
        }

        private Timestamp? documentDateField; 

        /// <summary>
        /// documentDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DocumentDateSpecified {
            get {
                return documentDateSpecifiedField;
            } 
            set {
                documentDateSpecifiedField = value;
                NotifyPropertyChanged("DocumentDateSpecified");
            }
        }

        private bool documentDateSpecifiedField; 

        /// <summary>
        /// A document class. Examples of classes would be a metadata classification or a set of keywords. 
        /// </summary>
		[Description("A document class. Examples of classes would be a  metadata classification or a set of keywords.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("documentClass")]
        public List<NameStruct> DocumentClass {
            get {
                return documentClassField;
            } 
            set {
                documentClassField = value;
                NotifyPropertyChanged("DocumentClass");
            }
        }

         /// <summary>
         /// bool to indicate if DocumentClass has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DocumentClassSpecified
         {
             get {
             if(documentClassField!=null)
                 return documentClassField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> documentClassField; 

        /// <summary>
        /// The information about the creation of the exchange file. This is not about the creation of the data within the file, but the creation of the file itself.
        /// </summary>
		[Description("The information about the creation of the  exchange file. This is not about the creation of the data within  the file, but the creation of the file itself.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentFileCreation")]
		[XmlElement("fileCreationInformation")]
        public DocumentFileCreation FileCreationInformation {
            get {
                return fileCreationInformationField;
            } 
            set {
                fileCreationInformationField = value;
                NotifyPropertyChanged("FileCreationInformation");
            }
        }

        private DocumentFileCreation fileCreationInformationField; 

        /// <summary>
        /// Information about the security to be applied to this file. More than one classification can be given.
        /// </summary>
		[Description("Information about the security to be applied to  this file. More than one classification can be given.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentSecurityInfo")]
		[XmlElement("securityInformation")]
        public List<DocumentSecurityInfo> SecurityInformation {
            get {
                return securityInformationField;
            } 
            set {
                securityInformationField = value;
                NotifyPropertyChanged("SecurityInformation");
            }
        }

         /// <summary>
         /// bool to indicate if SecurityInformation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SecurityInformationSpecified
         {
             get {
             if(securityInformationField!=null)
                 return securityInformationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DocumentSecurityInfo> securityInformationField; 

        /// <summary>
        /// A free-form string that allows a disclaimer to accompany the information.
        /// </summary>
		[StringLength(4000)]
        [Description("A free-form string that allows a disclaimer to  accompany the information.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("disclaimer")]
        public string Disclaimer {
            get {
                return disclaimerField;
            } 
            set {
                disclaimerField = value;
                NotifyPropertyChanged("Disclaimer");
            }
        }

        private string disclaimerField; 

        /// <summary>
        /// A collection of events that can document the history of the data.
        /// </summary>
		[Description("A collection of events that can document the  history of the data.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentAudit")]
		[XmlArrayItem("event")]
        [XmlArray("auditTrail")]
        public List<DocumentEvent> AuditTrail {
            get {
                return auditTrailField;
            } 
            set {
                auditTrailField = value;
                NotifyPropertyChanged("AuditTrail");
            }
        }

         /// <summary>
         /// bool to indicate if AuditTrail has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AuditTrailSpecified
         {
             get {
             if(auditTrailField!=null)
                 return auditTrailField.Count>0?true:false;
             else return false;
             }
         }
        private List<DocumentEvent> auditTrailField; 

        /// <summary>
        /// The owner of the data.
        /// </summary>
		[StringLength(64)]
        [Description("The owner of the data.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("owner")]
        public string Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string ownerField; 

        /// <summary>
        /// An optional comment about the document.
        /// </summary>
		[StringLength(4000)]
        [Description("An optional comment about the document.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the obj_wellbores xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wellbores", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_wellbores xsd type.")]
    public partial class WellboreList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a single wellbore. A wellbore is a unique, oriented path from the bottom of a drilled borehole to the surface of the Earth. The path must not overlap or cross itself. 
        /// </summary>
		[Required]
        [Description("Information about a single wellbore. A wellbore is a unique, oriented path from the bottom of a drilled  borehole to the surface of the Earth. The path must not overlap or cross itself.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_wellbore")]
		[XmlElement("wellbore")]
        public List<Wellbore> Wellbore {
            get {
                return wellboreField;
            } 
            set {
                wellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

         /// <summary>
         /// bool to indicate if Wellbore has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellboreSpecified
         {
             get {
             if(wellboreField!=null)
                 return wellboreField.Count>0?true:false;
             else return false;
             }
         }
        private List<Wellbore> wellboreField; 

        /// <summary>
        /// Information about a single wellbore. A wellbore is a unique, oriented path from the bottom of a drilled borehole to the surface of the Earth. The path must not overlap or cross itself. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Wellbore;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_wells xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wells", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_wells xsd type.")]
    public partial class WellList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a single well. A well is a unique surface location from which wellbores are drilled into the Earth for the purpose of either (1) finding or producing underground resources; or (2) providing services related to the production of underground resources. 
        /// </summary>
		[Required]
        [Description("Information about a single well. A well is a unique surface location from which wellbores are drilled  into the Earth for the purpose of either (1) finding or producing  underground resources; or (2) providing services related to the  production of underground resources.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_well")]
		[XmlElement("well")]
        public List<Well> Well {
            get {
                return wellField;
            } 
            set {
                wellField = value;
                NotifyPropertyChanged("Well");
            }
        }

         /// <summary>
         /// bool to indicate if Well has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellSpecified
         {
             get {
             if(wellField!=null)
                 return wellField.Count>0?true:false;
             else return false;
             }
         }
        private List<Well> wellField; 

        /// <summary>
        /// Information about a single well. A well is a unique surface location from which wellbores are drilled into the Earth for the purpose of either (1) finding or producing underground resources; or (2) providing services related to the production of underground resources. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Well;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_wbGeometrys xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wbGeometrys", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_wbGeometrys xsd type.")]
    public partial class WellboreGeometryList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single wellbore geometry. 
        /// </summary>
		[Required]
        [Description("A single wellbore geometry.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_wbGeometry")]
		[XmlElement("wbGeometry")]
        public List<StandAloneWellboreGeometry> WellboreGeometry {
            get {
                return wbGeometryField;
            } 
            set {
                wbGeometryField = value;
                NotifyPropertyChanged("WellboreGeometry");
            }
        }

         /// <summary>
         /// bool to indicate if WellboreGeometry has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellboreGeometrySpecified
         {
             get {
             if(wbGeometryField!=null)
                 return wbGeometryField.Count>0?true:false;
             else return false;
             }
         }
        private List<StandAloneWellboreGeometry> wbGeometryField; 

        /// <summary>
        /// A single wellbore geometry. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellboreGeometry;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_tubulars xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("tubulars", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_tubulars xsd type.")]
    public partial class TubularList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single tubular (assembly). This represents the "transient" assemblies used in drilling a well as opposed to the "fixed" assemblies (see wbGeometry).
        /// </summary>
		[Required]
        [Description("A single tubular (assembly).  This represents the \"transient\" assemblies used in drilling a well as opposed to the \"fixed\" assemblies (see wbGeometry).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_tubular")]
		[XmlElement("tubular")]
        public List<Tubular> Tubular {
            get {
                return tubularField;
            } 
            set {
                tubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

         /// <summary>
         /// bool to indicate if Tubular has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TubularSpecified
         {
             get {
             if(tubularField!=null)
                 return tubularField.Count>0?true:false;
             else return false;
             }
         }
        private List<Tubular> tubularField; 

        /// <summary>
        /// A single tubular (assembly). This represents the "transient" assemblies used in drilling a well as opposed to the "fixed" assemblies (see wbGeometry).
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Tubular;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_trajectorys xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("trajectorys", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_trajectorys xsd type.")]
    public partial class TrajectoryList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single trajectory. 
        /// </summary>
		[Required]
        [Description("A single trajectory.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_trajectory")]
		[XmlElement("trajectory")]
        public List<Trajectory> Trajectory {
            get {
                return trajectoryField;
            } 
            set {
                trajectoryField = value;
                NotifyPropertyChanged("Trajectory");
            }
        }

         /// <summary>
         /// bool to indicate if Trajectory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TrajectorySpecified
         {
             get {
             if(trajectoryField!=null)
                 return trajectoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<Trajectory> trajectoryField; 

        /// <summary>
        /// A single trajectory. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Trajectory;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_toolErrorTermSets xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("toolErrorTermSets", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_toolErrorTermSets xsd type.")]
    public partial class ToolErrorTermSetList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single error term set.
        /// </summary>
		[Required]
        [Description("A single error term set.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_toolErrorTermSet")]
		[XmlElement("toolErrorTermSet")]
        public List<ToolErrorTermSet> ToolErrorTermSet {
            get {
                return toolErrorTermSetField;
            } 
            set {
                toolErrorTermSetField = value;
                NotifyPropertyChanged("ToolErrorTermSet");
            }
        }

         /// <summary>
         /// bool to indicate if ToolErrorTermSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ToolErrorTermSetSpecified
         {
             get {
             if(toolErrorTermSetField!=null)
                 return toolErrorTermSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<ToolErrorTermSet> toolErrorTermSetField; 

        /// <summary>
        /// A single error term set.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ToolErrorTermSet;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_toolErrorModels xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("toolErrorModels", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_toolErrorModels xsd type.")]
    public partial class ToolErrorModelList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single error Term Source.
        /// </summary>
		[Required]
        [Description("A single error Term Source.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_toolErrorModel")]
		[XmlElement("toolErrorModel")]
        public List<ToolErrorModel> ToolErrorModel {
            get {
                return toolErrorModelField;
            } 
            set {
                toolErrorModelField = value;
                NotifyPropertyChanged("ToolErrorModel");
            }
        }

         /// <summary>
         /// bool to indicate if ToolErrorModel has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ToolErrorModelSpecified
         {
             get {
             if(toolErrorModelField!=null)
                 return toolErrorModelField.Count>0?true:false;
             else return false;
             }
         }
        private List<ToolErrorModel> toolErrorModelField; 

        /// <summary>
        /// A single error Term Source.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ToolErrorModel;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_targets xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("targets", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_targets xsd type.")]
    public partial class TargetList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single target. 
        /// </summary>
		[Required]
        [Description("A single target.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_target")]
		[XmlElement("target")]
        public List<Target> Target {
            get {
                return targetField;
            } 
            set {
                targetField = value;
                NotifyPropertyChanged("Target");
            }
        }

         /// <summary>
         /// bool to indicate if Target has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TargetSpecified
         {
             get {
             if(targetField!=null)
                 return targetField.Count>0?true:false;
             else return false;
             }
         }
        private List<Target> targetField; 

        /// <summary>
        /// A single target. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Target;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_surveyPrograms xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("surveyPrograms", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_surveyPrograms xsd type.")]
    public partial class SurveyProgramList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single survey program . 
        /// </summary>
		[Required]
        [Description("A single survey program .")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_surveyProgram")]
		[XmlElement("surveyProgram")]
        public List<SurveyProgram> SurveyProgram {
            get {
                return surveyProgramField;
            } 
            set {
                surveyProgramField = value;
                NotifyPropertyChanged("SurveyProgram");
            }
        }

         /// <summary>
         /// bool to indicate if SurveyProgram has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SurveyProgramSpecified
         {
             get {
             if(surveyProgramField!=null)
                 return surveyProgramField.Count>0?true:false;
             else return false;
             }
         }
        private List<SurveyProgram> surveyProgramField; 

        /// <summary>
        /// A single survey program . 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return SurveyProgram;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_stimJobs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("stimJobs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_stimJobs xsd type.")]
    public partial class StimJobList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single well stimulation job.
        /// </summary>
		[Required]
        [Description("A single well stimulation job.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_stimJob")]
		[XmlElement("stimJob")]
        public List<StimJob> StimJob {
            get {
                return stimJobField;
            } 
            set {
                stimJobField = value;
                NotifyPropertyChanged("StimJob");
            }
        }

         /// <summary>
         /// bool to indicate if StimJob has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StimJobSpecified
         {
             get {
             if(stimJobField!=null)
                 return stimJobField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimJob> stimJobField; 

        /// <summary>
        /// A single well stimulation job.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return StimJob;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_sidewallCores xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("sidewallCores", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_sidewallCores xsd type.")]
    public partial class SidewallCoreList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single sidewall core. 
        /// </summary>
		[Required]
        [Description("A single sidewall core.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_sidewallCore")]
		[XmlElement("sidewallCore")]
        public List<SidewallCore> SidewallCore {
            get {
                return sidewallCoreField;
            } 
            set {
                sidewallCoreField = value;
                NotifyPropertyChanged("SidewallCore");
            }
        }

         /// <summary>
         /// bool to indicate if SidewallCore has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SidewallCoreSpecified
         {
             get {
             if(sidewallCoreField!=null)
                 return sidewallCoreField.Count>0?true:false;
             else return false;
             }
         }
        private List<SidewallCore> sidewallCoreField; 

        /// <summary>
        /// A single sidewall core. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return SidewallCore;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_risks xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("risks", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_risks xsd type.")]
    public partial class RiskList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single risk. 
        /// </summary>
		[Required]
        [Description("A single risk.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_risk")]
		[XmlElement("risk")]
        public List<Risk> Risk {
            get {
                return riskField;
            } 
            set {
                riskField = value;
                NotifyPropertyChanged("Risk");
            }
        }

         /// <summary>
         /// bool to indicate if Risk has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RiskSpecified
         {
             get {
             if(riskField!=null)
                 return riskField.Count>0?true:false;
             else return false;
             }
         }
        private List<Risk> riskField; 

        /// <summary>
        /// A single risk. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Risk;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_rigs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("rigs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_rigs xsd type.")]
    public partial class RigList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single rig. 
        /// </summary>
		[Required]
        [Description("A single rig.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_rig")]
		[XmlElement("rig")]
        public List<Rig> Rig {
            get {
                return rigField;
            } 
            set {
                rigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

         /// <summary>
         /// bool to indicate if Rig has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RigSpecified
         {
             get {
             if(rigField!=null)
                 return rigField.Count>0?true:false;
             else return false;
             }
         }
        private List<Rig> rigField; 

        /// <summary>
        /// A single rig. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Rig;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_opsReports xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("opsReports", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_opsReports xsd type.")]
    public partial class OpsReportList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single operations report. 
        /// </summary>
		[Required]
        [Description("A single operations report.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_opsReport")]
		[XmlElement("opsReport")]
        public List<OpsReport> OpsReport {
            get {
                return opsReportField;
            } 
            set {
                opsReportField = value;
                NotifyPropertyChanged("OpsReport");
            }
        }

         /// <summary>
         /// bool to indicate if OpsReport has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpsReportSpecified
         {
             get {
             if(opsReportField!=null)
                 return opsReportField.Count>0?true:false;
             else return false;
             }
         }
        private List<OpsReport> opsReportField; 

        /// <summary>
        /// A single operations report. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return OpsReport;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_objectGroups xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("objectGroups", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_objectGroups xsd type.")]
    public partial class ObjectGroupList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single objectGroup Object
        /// </summary>
		[Required]
        [Description("A single objectGroup Object")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_objectGroup")]
		[XmlElement("objectGroup")]
        public List<ObjectGroup> ObjectGroup {
            get {
                return objectGroupField;
            } 
            set {
                objectGroupField = value;
                NotifyPropertyChanged("ObjectGroup");
            }
        }

         /// <summary>
         /// bool to indicate if ObjectGroup has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ObjectGroupSpecified
         {
             get {
             if(objectGroupField!=null)
                 return objectGroupField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectGroup> objectGroupField; 

        /// <summary>
        /// A single objectGroup Object
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ObjectGroup;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_mudLogs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("mudLogs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_mudLogs xsd type.")]
    public partial class MudLogList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single mud log. 
        /// </summary>
		[Required]
        [Description("A single mud log.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_mudLog")]
		[XmlElement("mudLog")]
        public List<MudLog> MudLog {
            get {
                return mudLogField;
            } 
            set {
                mudLogField = value;
                NotifyPropertyChanged("MudLog");
            }
        }

         /// <summary>
         /// bool to indicate if MudLog has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MudLogSpecified
         {
             get {
             if(mudLogField!=null)
                 return mudLogField.Count>0?true:false;
             else return false;
             }
         }
        private List<MudLog> mudLogField; 

        /// <summary>
        /// A single mud log. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return MudLog;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_messages xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("messages", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_messages xsd type.")]
    public partial class MessageList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single message. 
        /// </summary>
		[Required]
        [Description("A single message.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_message")]
		[XmlElement("message")]
        public List<Message> Message {
            get {
                return messageField;
            } 
            set {
                messageField = value;
                NotifyPropertyChanged("Message");
            }
        }

         /// <summary>
         /// bool to indicate if Message has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MessageSpecified
         {
             get {
             if(messageField!=null)
                 return messageField.Count>0?true:false;
             else return false;
             }
         }
        private List<Message> messageField; 

        /// <summary>
        /// A single message. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Message;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_logs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("logs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_logs xsd type.")]
    public partial class LogList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single log. 
        /// </summary>
		[Required]
        [Description("A single log.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_log")]
		[XmlElement("log")]
        public List<Log> Log {
            get {
                return logField;
            } 
            set {
                logField = value;
                NotifyPropertyChanged("Log");
            }
        }

         /// <summary>
         /// bool to indicate if Log has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogSpecified
         {
             get {
             if(logField!=null)
                 return logField.Count>0?true:false;
             else return false;
             }
         }
        private List<Log> logField; 

        /// <summary>
        /// A single log. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Log;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_formationMarkers xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("formationMarkers", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_formationMarkers xsd type.")]
    public partial class FormationMarkerList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single formation marker. 
        /// </summary>
		[Required]
        [Description("A single formation marker.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_formationMarker")]
		[XmlElement("formationMarker")]
        public List<FormationMarker> FormationMarker {
            get {
                return formationMarkerField;
            } 
            set {
                formationMarkerField = value;
                NotifyPropertyChanged("FormationMarker");
            }
        }

         /// <summary>
         /// bool to indicate if FormationMarker has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FormationMarkerSpecified
         {
             get {
             if(formationMarkerField!=null)
                 return formationMarkerField.Count>0?true:false;
             else return false;
             }
         }
        private List<FormationMarker> formationMarkerField; 

        /// <summary>
        /// A single formation marker. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FormationMarker;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_fluidsReports xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("fluidsReports", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_fluidsReports xsd type.")]
    public partial class FluidsReportList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single fluids report. 
        /// </summary>
		[Required]
        [Description("A single fluids report.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_fluidsReport")]
		[XmlElement("fluidsReport")]
        public List<FluidsReport> FluidsReport {
            get {
                return fluidsReportField;
            } 
            set {
                fluidsReportField = value;
                NotifyPropertyChanged("FluidsReport");
            }
        }

         /// <summary>
         /// bool to indicate if FluidsReport has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidsReportSpecified
         {
             get {
             if(fluidsReportField!=null)
                 return fluidsReportField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidsReport> fluidsReportField; 

        /// <summary>
        /// A single fluids report. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FluidsReport;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_drillReports xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("drillReports", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_drillReports xsd type.")]
    public partial class DrillReportList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single drilling report. 
        /// </summary>
		[Required]
        [Description("A single drilling report.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_drillReport")]
		[XmlElement("drillReport")]
        public List<DrillReport> DrillReport {
            get {
                return drillReportField;
            } 
            set {
                drillReportField = value;
                NotifyPropertyChanged("DrillReport");
            }
        }

         /// <summary>
         /// bool to indicate if DrillReport has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DrillReportSpecified
         {
             get {
             if(drillReportField!=null)
                 return drillReportField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReport> drillReportField; 

        /// <summary>
        /// A single drilling report. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DrillReport;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_coordinateReferenceSystems xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("coordinateReferenceSystems", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_coordinateReferenceSystems xsd type.")]
    public partial class CoordinateReferenceSystemList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single CRS. 
        /// </summary>
		[Required]
        [Description("A single  CRS.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_coordinateReferenceSystem")]
		[XmlElement("coordinateReferenceSystem")]
        public List<CoordinateReferenceSystem> CoordinateReferenceSystem {
            get {
                return coordinateReferenceSystemField;
            } 
            set {
                coordinateReferenceSystemField = value;
                NotifyPropertyChanged("CoordinateReferenceSystem");
            }
        }

         /// <summary>
         /// bool to indicate if CoordinateReferenceSystem has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CoordinateReferenceSystemSpecified
         {
             get {
             if(coordinateReferenceSystemField!=null)
                 return coordinateReferenceSystemField.Count>0?true:false;
             else return false;
             }
         }
        private List<CoordinateReferenceSystem> coordinateReferenceSystemField; 

        /// <summary>
        /// A single CRS. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return CoordinateReferenceSystem;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_convCores xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("convCores", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_convCores xsd type.")]
    public partial class ConvCoreList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single conventional core. 
        /// </summary>
		[Required]
        [Description("A single conventional core.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_convCore")]
		[XmlElement("convCore")]
        public List<ConvCore> ConvCore {
            get {
                return convCoreField;
            } 
            set {
                convCoreField = value;
                NotifyPropertyChanged("ConvCore");
            }
        }

         /// <summary>
         /// bool to indicate if ConvCore has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConvCoreSpecified
         {
             get {
             if(convCoreField!=null)
                 return convCoreField.Count>0?true:false;
             else return false;
             }
         }
        private List<ConvCore> convCoreField; 

        /// <summary>
        /// A single conventional core. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ConvCore;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_changeLogs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("changeLogs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_changeLogs xsd type.")]
    public partial class ChangeLogList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Defines a singular changeLog object.
        /// </summary>
		[Description("Defines a singular changeLog object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_changeLog")]
		[XmlElement("changeLog")]
        public List<ChangeLog> ChangeLog {
            get {
                return changeLogField;
            } 
            set {
                changeLogField = value;
                NotifyPropertyChanged("ChangeLog");
            }
        }

         /// <summary>
         /// bool to indicate if ChangeLog has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChangeLogSpecified
         {
             get {
             if(changeLogField!=null)
                 return changeLogField.Count>0?true:false;
             else return false;
             }
         }
        private List<ChangeLog> changeLogField; 

        /// <summary>
        /// Defines a singular changeLog object.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ChangeLog;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_cementJobs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("cementJobs", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_cementJobs xsd type.")]
    public partial class CementJobList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single cement job. 
        /// </summary>
		[Required]
        [Description("A single cement job.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_cementJob")]
		[XmlElement("cementJob")]
        public List<CementJob> CementJob {
            get {
                return cementJobField;
            } 
            set {
                cementJobField = value;
                NotifyPropertyChanged("CementJob");
            }
        }

         /// <summary>
         /// bool to indicate if CementJob has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CementJobSpecified
         {
             get {
             if(cementJobField!=null)
                 return cementJobField.Count>0?true:false;
             else return false;
             }
         }
        private List<CementJob> cementJobField; 

        /// <summary>
        /// A single cement job. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return CementJob;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_bhaRuns xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("bhaRuns", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_bhaRuns xsd type.")]
    public partial class BhaRunList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single bottom hole assembly run. This represents the period beginning when the BHA enters the hole until it leaves the hole. 
        /// </summary>
		[Required]
        [Description("A single bottom hole assembly run.  This represents the period beginning when the BHA enters the hole until it leaves the hole.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_bhaRun")]
		[XmlElement("bhaRun")]
        public List<BhaRun> BhaRun {
            get {
                return bhaRunField;
            } 
            set {
                bhaRunField = value;
                NotifyPropertyChanged("BhaRun");
            }
        }

         /// <summary>
         /// bool to indicate if BhaRun has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BhaRunSpecified
         {
             get {
             if(bhaRunField!=null)
                 return bhaRunField.Count>0?true:false;
             else return false;
             }
         }
        private List<BhaRun> bhaRunField; 

        /// <summary>
        /// A single bottom hole assembly run. This represents the period beginning when the BHA enters the hole until it leaves the hole. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return BhaRun;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_attachments xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("attachments", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_attachments xsd type.")]
    public partial class AttachmentList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// A single attachment Object
        /// </summary>
		[Required]
        [Description("A single attachment Object")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_attachment")]
		[XmlElement("attachment")]
        public List<Attachment> Attachment {
            get {
                return attachmentField;
            } 
            set {
                attachmentField = value;
                NotifyPropertyChanged("Attachment");
            }
        }

         /// <summary>
         /// bool to indicate if Attachment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AttachmentSpecified
         {
             get {
             if(attachmentField!=null)
                 return attachmentField.Count>0?true:false;
             else return false;
             }
         }
        private List<Attachment> attachmentField; 

        /// <summary>
        /// A single attachment Object
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return Attachment;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_wellCompletions xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wellCompletions", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_wellCompletions xsd type.")]
    public partial class WellCompletionList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// documentInfo property
        /// </summary>
		[Description("Information about the well completion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// wellCompletion property
        /// </summary>
		[Required]
        [Description("Information about a wellbore completion.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_wellCompletion")]
		[XmlElement("wellCompletion")]
        public List<WellCompletion> WellCompletion {
            get {
                return wellCompletionField;
            } 
            set {
                wellCompletionField = value;
                NotifyPropertyChanged("WellCompletion");
            }
        }

         /// <summary>
         /// bool to indicate if WellCompletion has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellCompletionSpecified
         {
             get {
             if(wellCompletionField!=null)
                 return wellCompletionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellCompletion> wellCompletionField; 

        /// <summary>
        /// wellCompletion property
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellCompletion;
			}
        }
		/// <summary>
        /// version property
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_wellCMLedgers xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wellCMLedgers", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_wellCMLedgers xsd type.")]
    public partial class WellCMLedgerList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// documentInfo property
        /// </summary>
		[Description("Information about the event ledger instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// wellCMLedger property
        /// </summary>
		[Required]
        [Description("The non-contextual elements for general event ledger information.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_wellCMLedger")]
		[XmlElement("wellCMLedger")]
        public List<WellCMLedger> WellCMLedger {
            get {
                return wellCMLedgerField;
            } 
            set {
                wellCMLedgerField = value;
                NotifyPropertyChanged("WellCMLedger");
            }
        }

         /// <summary>
         /// bool to indicate if WellCMLedger has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellCMLedgerSpecified
         {
             get {
             if(wellCMLedgerField!=null)
                 return wellCMLedgerField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellCMLedger> wellCMLedgerField; 

        /// <summary>
        /// wellCMLedger property
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellCMLedger;
			}
        }
		/// <summary>
        /// version property
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_wellboreCompletions xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wellboreCompletions", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_wellboreCompletions xsd type.")]
    public partial class WellboreCompletionList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// documentInfo property
        /// </summary>
		[Description("Information about the downhole component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// wellboreCompletion property
        /// </summary>
		[Required]
        [Description("Wellbore completion type")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_wellboreCompletion")]
		[XmlElement("wellboreCompletion")]
        public List<WellboreCompletion> WellboreCompletion {
            get {
                return wellboreCompletionField;
            } 
            set {
                wellboreCompletionField = value;
                NotifyPropertyChanged("WellboreCompletion");
            }
        }

         /// <summary>
         /// bool to indicate if WellboreCompletion has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellboreCompletionSpecified
         {
             get {
             if(wellboreCompletionField!=null)
                 return wellboreCompletionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellboreCompletion> wellboreCompletionField; 

        /// <summary>
        /// wellboreCompletion property
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellboreCompletion;
			}
        }
		/// <summary>
        /// version property
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_downholeComponents xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("downholeComponents", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_downholeComponents xsd type.")]
    public partial class DownholeComponentList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// documentInfo property
        /// </summary>
		[Description("Information about the downhole component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// downholeComponent property
        /// </summary>
		[Required]
        [Description("Information about a downhole equipment")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_downholeComponent")]
		[XmlElement("downholeComponent")]
        public List<DownholeComponent> DownholeComponent {
            get {
                return downholeComponentField;
            } 
            set {
                downholeComponentField = value;
                NotifyPropertyChanged("DownholeComponent");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeComponentSpecified
         {
             get {
             if(downholeComponentField!=null)
                 return downholeComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DownholeComponent> downholeComponentField; 

        /// <summary>
        /// downholeComponent property
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DownholeComponent;
			}
        }
		/// <summary>
        /// version property
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_depthRegImages xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("depthRegImages", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_depthRegImages xsd type.")]
    public partial class DepthRegImageList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// documentInfo property
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// depthRegImage property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_depthRegImage")]
		[XmlElement("depthRegImage")]
        public List<DepthRegImage> DepthRegImage {
            get {
                return depthRegImageField;
            } 
            set {
                depthRegImageField = value;
                NotifyPropertyChanged("DepthRegImage");
            }
        }

         /// <summary>
         /// bool to indicate if DepthRegImage has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DepthRegImageSpecified
         {
             get {
             if(depthRegImageField!=null)
                 return depthRegImageField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegImage> depthRegImageField; 

        /// <summary>
        /// depthRegImage property
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DepthRegImage;
			}
        }
		/// <summary>
        /// version property
        /// </summary>
		[Required]
        [RegularExpression("1\\.[4-9]\\.[0-9]\\.([0-9]|([1-9][0-9]))")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionString")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


    } //here

    /// <summary>
    /// This class represents the obj_capClients xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/api/141")]
    [System.Xml.Serialization.XmlRootAttribute("capClients", Namespace="http://www.witsml.org/api/141", IsNullable=false)]
	[Description("This class represents the obj_capClients xsd type.")]
    public partial class CapClients : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// capClient property
        /// </summary>
		[Description("Defines the singular Client Capabilities (capClient) element; only one can be specified.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_capClient")]
		[XmlElement("capClient")]
        public CapClient CapClient {
            get {
                return capClientField;
            } 
            set {
                capClientField = value;
                NotifyPropertyChanged("CapClient");
            }
        }

        private CapClient capClientField; 

		/// <summary>
        /// version property
        /// </summary>
		[StringLength(16)]
        [Description("API schema version.  It is optional. If the version is specified, its value must be set equal to the value specified by the  version's fixed attribute. Note that this is different from the data schema version.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the obj_capClient xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_capClient", Namespace="http://www.witsml.org/api/141")]
	[Description("This class represents the obj_capClient xsd type.")]
    public partial class CapClient : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// contact property
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_contact")]
		[XmlElement("contact")]
        public Contact Contact {
            get {
                return contactField;
            } 
            set {
                contactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

        private Contact contactField; 

        /// <summary>
        /// description property
        /// </summary>
		[StringLength(4096)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str4096")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// vendor property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("vendor")]
        public string Vendor {
            get {
                return vendorField;
            } 
            set {
                vendorField = value;
                NotifyPropertyChanged("Vendor");
            }
        }

        private string vendorField; 

        /// <summary>
        /// version property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("version")]
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField; 

        /// <summary>
        /// schemaVersion property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("schemaVersion")]
        public string SchemaVersion {
            get {
                return schemaVersionField;
            } 
            set {
                schemaVersionField = value;
                NotifyPropertyChanged("SchemaVersion");
            }
        }

        private string schemaVersionField; 

		/// <summary>
        /// apiVers property
        /// </summary>
		[Required]
        [StringLength(16)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
        [XmlAttribute("apiVers")]
		
        public string ApiVers {
            get {
                return apiVersField;
            } 
            set {
                apiVersField = value;
                NotifyPropertyChanged("ApiVers");
            }
        }

        private string apiVersField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_contact xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_contact", Namespace="http://www.witsml.org/api/141")]
	[Description("This class represents the cs_contact xsd type.")]
    public partial class Contact : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// email property
        /// </summary>
		[StringLength(256)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str256")]
		[XmlElement("email")]
        public string Email {
            get {
                return emailField;
            } 
            set {
                emailField = value;
                NotifyPropertyChanged("Email");
            }
        }

        private string emailField; 

        /// <summary>
        /// phone property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("phone")]
        public string Phone {
            get {
                return phoneField;
            } 
            set {
                phoneField = value;
                NotifyPropertyChanged("Phone");
            }
        }

        private string phoneField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the obj_capServers xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/api/141")]
    [System.Xml.Serialization.XmlRootAttribute("capServers", Namespace="http://www.witsml.org/api/141", IsNullable=false)]
	[Description("This class represents the obj_capServers xsd type.")]
    public partial class CapServers : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// capServer property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_capServer")]
		[XmlElement("capServer")]
        public CapServer CapServer {
            get {
                return capServerField;
            } 
            set {
                capServerField = value;
                NotifyPropertyChanged("CapServer");
            }
        }

        private CapServer capServerField; 

		/// <summary>
        /// version property
        /// </summary>
		[StringLength(16)]
        [Description("API schema version.  It is optional. If the version is specified, its value must be set equal to the value specified by the  version's fixed attribute. Note that this is different from the data schema version.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.4.1.1"; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the obj_capServer xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_capServer", Namespace="http://www.witsml.org/api/141")]
	[Description("This class represents the obj_capServer xsd type.")]
    public partial class CapServer : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// contact property
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_contact")]
		[XmlElement("contact")]
        public Contact Contact {
            get {
                return contactField;
            } 
            set {
                contactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

        private Contact contactField; 

        /// <summary>
        /// description property
        /// </summary>
		[StringLength(4096)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str4096")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// vendor property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("vendor")]
        public string Vendor {
            get {
                return vendorField;
            } 
            set {
                vendorField = value;
                NotifyPropertyChanged("Vendor");
            }
        }

        private string vendorField; 

        /// <summary>
        /// version property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("version")]
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField; 

        /// <summary>
        /// schemaVersion property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("schemaVersion")]
        public string SchemaVersion {
            get {
                return schemaVersionField;
            } 
            set {
                schemaVersionField = value;
                NotifyPropertyChanged("SchemaVersion");
            }
        }

        private string schemaVersionField; 

        /// <summary>
        /// changeDetectionPeriod property
        /// </summary>
		[Required]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("changeDetectionPeriod")]
        public int? ChangeDetectionPeriod {
            get {
                return changeDetectionPeriodField;
            } 
            set {
                changeDetectionPeriodField = value;
                NotifyPropertyChanged("ChangeDetectionPeriod");
            }
        }

        private int? changeDetectionPeriodField; 

        /// <summary>
        /// growingTimeoutPeriod property
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "growingTimeoutPeriod")]
		[XmlElement("growingTimeoutPeriod")]
        public List<GrowingTimeoutPeriod> GrowingTimeoutPeriod {
            get {
                return growingTimeoutPeriodField;
            } 
            set {
                growingTimeoutPeriodField = value;
                NotifyPropertyChanged("GrowingTimeoutPeriod");
            }
        }

         /// <summary>
         /// bool to indicate if GrowingTimeoutPeriod has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GrowingTimeoutPeriodSpecified
         {
             get {
             if(growingTimeoutPeriodField!=null)
                 return growingTimeoutPeriodField.Count>0?true:false;
             else return false;
             }
         }
        private List<GrowingTimeoutPeriod> growingTimeoutPeriodField; 

        /// <summary>
        /// maxRequestLatestValues property
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("maxRequestLatestValues")]
        public int? MaxRequestLatestValues {
            get {
                return maxRequestLatestValuesField;
            } 
            set {
                maxRequestLatestValuesField = value;
                 this.MaxRequestLatestValuesSpecified = true;
                NotifyPropertyChanged("MaxRequestLatestValues");
            }
        }

        private int? maxRequestLatestValuesField; 

        /// <summary>
        /// maxRequestLatestValuesSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaxRequestLatestValuesSpecified {
            get {
                return maxRequestLatestValuesSpecifiedField;
            } 
            set {
                maxRequestLatestValuesSpecifiedField = value;
                NotifyPropertyChanged("MaxRequestLatestValuesSpecified");
            }
        }

        private bool maxRequestLatestValuesSpecifiedField; 

        /// <summary>
        /// cascadedDelete property
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("cascadedDelete")]
        public bool? CascadedDelete {
            get {
                return cascadedDeleteField;
            } 
            set {
                cascadedDeleteField = value;
                 this.CascadedDeleteSpecified = true;
                NotifyPropertyChanged("CascadedDelete");
            }
        }

        private bool? cascadedDeleteField; 

        /// <summary>
        /// cascadedDeleteSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CascadedDeleteSpecified {
            get {
                return cascadedDeleteSpecifiedField;
            } 
            set {
                cascadedDeleteSpecifiedField = value;
                NotifyPropertyChanged("CascadedDeleteSpecified");
            }
        }

        private bool cascadedDeleteSpecifiedField; 

        /// <summary>
        /// supportUomConversion property
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("supportUomConversion")]
        public bool? SupportUomConversion {
            get {
                return supportUomConversionField;
            } 
            set {
                supportUomConversionField = value;
                 this.SupportUomConversionSpecified = true;
                NotifyPropertyChanged("SupportUomConversion");
            }
        }

        private bool? supportUomConversionField; 

        /// <summary>
        /// supportUomConversionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SupportUomConversionSpecified {
            get {
                return supportUomConversionSpecifiedField;
            } 
            set {
                supportUomConversionSpecifiedField = value;
                NotifyPropertyChanged("SupportUomConversionSpecified");
            }
        }

        private bool supportUomConversionSpecifiedField; 

        /// <summary>
        /// compressionMethod property
        /// </summary>
		[StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
		[XmlElement("compressionMethod")]
        public string CompressionMethod {
            get {
                return compressionMethodField;
            } 
            set {
                compressionMethodField = value;
                NotifyPropertyChanged("CompressionMethod");
            }
        }

        private string compressionMethodField; 

        /// <summary>
        /// function property
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_function")]
		[XmlElement("function")]
        public List<Function> Function {
            get {
                return functionField;
            } 
            set {
                functionField = value;
                NotifyPropertyChanged("Function");
            }
        }

         /// <summary>
         /// bool to indicate if Function has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FunctionSpecified
         {
             get {
             if(functionField!=null)
                 return functionField.Count>0?true:false;
             else return false;
             }
         }
        private List<Function> functionField; 

		/// <summary>
        /// apiVers property
        /// </summary>
		[Required]
        [StringLength(16)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str16")]
        [XmlAttribute("apiVers")]
		
        public string ApiVers {
            get {
                return apiVersField;
            } 
            set {
                apiVersField = value;
                NotifyPropertyChanged("ApiVers");
            }
        }

        private string apiVersField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the growingTimeoutPeriod xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="growingTimeoutPeriod", Namespace="http://www.witsml.org/api/141")]
	[Description("This class represents the growingTimeoutPeriod xsd type.")]
    public partial class GrowingTimeoutPeriod : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GrowingTimeoutPeriod class.
        /// </summary>
        public GrowingTimeoutPeriod() {}

        /// <summary>
        /// Initializes a new instance of the GrowingTimeoutPeriod class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public GrowingTimeoutPeriod(int value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// dataObject property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
        [XmlAttribute("dataObject")]
		
        public string DataObject {
            get {
                return dataObjectField;
            } 
            set {
                dataObjectField = value;
                NotifyPropertyChanged("DataObject");
            }
        }

        private string dataObjectField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public int Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private int ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_function xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_function", Namespace="http://www.witsml.org/api/141")]
	[Description("This class represents the cs_function xsd type.")]
    public partial class Function : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// dataObject property
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "objectWithConstraint")]
		[XmlElement("dataObject")]
        public List<ObjectWithConstraint> DataObject {
            get {
                return dataObjectField;
            } 
            set {
                dataObjectField = value;
                NotifyPropertyChanged("DataObject");
            }
        }

         /// <summary>
         /// bool to indicate if DataObject has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DataObjectSpecified
         {
             get {
             if(dataObjectField!=null)
                 return dataObjectField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectWithConstraint> dataObjectField; 

		/// <summary>
        /// name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "str64")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the objectWithConstraint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="objectWithConstraint", Namespace="http://www.witsml.org/api/141")]
	[Description("This class represents the objectWithConstraint xsd type.")]
    public partial class ObjectWithConstraint : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ObjectWithConstraint class.
        /// </summary>
        public ObjectWithConstraint() {}

        /// <summary>
        /// Initializes a new instance of the ObjectWithConstraint class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public ObjectWithConstraint(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// maxDataNodes property
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
        [XmlAttribute("maxDataNodes")]
		
        public int MaxDataNodes {
            get {
                return maxDataNodesField;
            } 
            set {
                maxDataNodesField = value;
                 this.MaxDataNodesSpecified = true;
                NotifyPropertyChanged("MaxDataNodes");
            }
        }

        private int maxDataNodesField; 

        /// <summary>
        /// maxDataNodesSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaxDataNodesSpecified {
            get {
                return maxDataNodesSpecifiedField;
            } 
            set {
                maxDataNodesSpecifiedField = value;
                NotifyPropertyChanged("MaxDataNodesSpecified");
            }
        }

        private bool maxDataNodesSpecifiedField; 

		/// <summary>
        /// maxDataPoints property
        /// </summary>
		[Description("See the API specification for a description of the use of this data.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
        [XmlAttribute("maxDataPoints")]
		
        public int MaxDataPoints {
            get {
                return maxDataPointsField;
            } 
            set {
                maxDataPointsField = value;
                 this.MaxDataPointsSpecified = true;
                NotifyPropertyChanged("MaxDataPoints");
            }
        }

        private int maxDataPointsField; 

        /// <summary>
        /// maxDataPointsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaxDataPointsSpecified {
            get {
                return maxDataPointsSpecifiedField;
            } 
            set {
                maxDataPointsSpecifiedField = value;
                NotifyPropertyChanged("MaxDataPointsSpecified");
            }
        }

        private bool maxDataPointsSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the resolution xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.witsml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the resolution xsd type.")]
    public partial class Resolution : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the Resolution class.
        /// </summary>
        public Resolution() {}

        /// <summary>
        /// Initializes a new instance of the Resolution class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public Resolution(double value, ResolutionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ResolutionUom")]
        [XmlAttribute("uom")]
		
        public ResolutionUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ResolutionUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    #endregion

    #region Enumerations
    namespace ReferenceData {
        /// <summary>
        /// This class represents the WellStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellStatus xsd enumeration.")]
        public enum WellStatus 
        {
        /// <summary>
        /// The status of a facility in which drilling, completion, and production operations have been permanently terminated.
        /// </summary>
          abandoned,
        /// <summary>
        /// For a well to be active, at least one of its wellbores must be active. For a wellbore to be active, at least one of its completions must be actively producing or injecting fluids.
        /// </summary>
          active,
        /// <summary>
        /// activeinjecting property
        /// </summary>
          [XmlEnum("active -- injecting")]
          activeinjecting,
        /// <summary>
        /// activeproducing property
        /// </summary>
          [XmlEnum("active -- producing")]
          activeproducing,
        /// <summary>
        /// The completion has been installed, but the facility is not yet active. This status is appropriate only before the initial producing or injecting activity.
        /// </summary>
          completed,
        /// <summary>
        /// The status of a well or wellbore in which drilling operations have begun, but are not yet completed. The status ends when another status becomes appropriate.
        /// </summary>
          drilling,
        /// <summary>
        /// partiallyplugged property
        /// </summary>
          [XmlEnum("partially plugged")]
          partiallyplugged,
        /// <summary>
        /// The facility has received regulatory approvel, but drilling has not yet commenced. For a well, it has been spudded. For a subsequent wellbore, the whipstock or similar device has not yet been set.
        /// </summary>
          permitted,
        /// <summary>
        /// pluggedandabandoned property
        /// </summary>
          [XmlEnum("plugged and abandoned")]
          pluggedandabandoned,
        /// <summary>
        /// The status of a well or wellbore from conception to either regulatory approval or commencement of drilling.
        /// </summary>
          proposed,
        /// <summary>
        /// The facility has been sold, so it is no longer appropriate to keep a close internal status value. Status values may be added at later times without changing the sold status.
        /// </summary>
          sold,
        /// <summary>
        /// Production or injection has been temporarily suspended in a manner that will allow immediate resumption of activities.
        /// </summary>
          suspended,
        /// <summary>
        /// temporarilyabandoned property
        /// </summary>
          [XmlEnum("temporarily abandoned")]
          temporarilyabandoned,
        /// <summary>
        /// The facility operations are suspended while tests are being conducted to determine formation and/or reservoir properties. For example, a drillstem test. This status also includes extended testing.
        /// </summary>
          testing,
        /// <summary>
        /// Information about the status of the well is confidential. This is more explicit than unknown, since it gives the reason that the status value is unknown.
        /// </summary>
          tight,
        /// <summary>
        /// workingover property
        /// </summary>
          [XmlEnum("working over")]
          workingover,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellPurpose xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellPurpose xsd enumeration.")]
        public enum WellPurpose 
        {
        /// <summary>
        /// A well drilled into a formation shown to be potentially productive of oil or gas by an earlier well for the purpose of obtaining more information about the reservoir. Also known as a delineation well.
        /// </summary>
          appraisal,
        /// <summary>
        /// appraisalconfirmationappraisal property
        /// </summary>
          [XmlEnum("appraisal -- confirmation appraisal")]
          appraisalconfirmationappraisal,
        /// <summary>
        /// appraisalexploratoryappraisal property
        /// </summary>
          [XmlEnum("appraisal -- exploratory appraisal")]
          appraisalexploratoryappraisal,
        /// <summary>
        /// An exploratory well drilled in an unproved area to test for a new field, a new pay, a deeper reservoir, or a shallower reservoir. Also known as a wildcat.
        /// </summary>
          exploration,
        /// <summary>
        /// explorationdeeperpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- deeper-pool wildcat")]
          explorationdeeperpoolwildcat,
        /// <summary>
        /// explorationnewfieldwildcat property
        /// </summary>
          [XmlEnum("exploration -- new-field wildcat")]
          explorationnewfieldwildcat,
        /// <summary>
        /// explorationnewpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- new-pool wildcat")]
          explorationnewpoolwildcat,
        /// <summary>
        /// explorationoutpostwildcat property
        /// </summary>
          [XmlEnum("exploration -- outpost wildcat")]
          explorationoutpostwildcat,
        /// <summary>
        /// explorationshallowerpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- shallower-pool wildcat")]
          explorationshallowerpoolwildcat,
        /// <summary>
        /// A well drilled in a zone in an area already proved productive.
        /// </summary>
          development,
        /// <summary>
        /// developmentinfilldevelopment property
        /// </summary>
          [XmlEnum("development -- infill development")]
          developmentinfilldevelopment,
        /// <summary>
        /// developmentinjector property
        /// </summary>
          [XmlEnum("development -- injector")]
          developmentinjector,
        /// <summary>
        /// developmentproducer property
        /// </summary>
          [XmlEnum("development -- producer")]
          developmentproducer,
        /// <summary>
        /// fluidstorage property
        /// </summary>
          [XmlEnum("fluid storage")]
          fluidstorage,
        /// <summary>
        /// fluidstoragegasstorage property
        /// </summary>
          [XmlEnum("fluid storage -- gas storage")]
          fluidstoragegasstorage,
        /// <summary>
        /// generalsrvc property
        /// </summary>
          [XmlEnum("general srvc")]
          generalsrvc,
        /// <summary>
        /// generalsrvcboreholereacquisition property
        /// </summary>
          [XmlEnum("general srvc -- borehole re-acquisition")]
          generalsrvcboreholereacquisition,
        /// <summary>
        /// generalsrvcobservation property
        /// </summary>
          [XmlEnum("general srvc -- observation")]
          generalsrvcobservation,
        /// <summary>
        /// generalsrvcrelief property
        /// </summary>
          [XmlEnum("general srvc -- relief")]
          generalsrvcrelief,
        /// <summary>
        /// generalsrvcresearch property
        /// </summary>
          [XmlEnum("general srvc -- research")]
          generalsrvcresearch,
        /// <summary>
        /// generalsrvcresearchdrilltest property
        /// </summary>
          [XmlEnum("general srvc -- research -- drill test")]
          generalsrvcresearchdrilltest,
        /// <summary>
        /// generalsrvcresearchstrattest property
        /// </summary>
          [XmlEnum("general srvc -- research -- strat test")]
          generalsrvcresearchstrattest,
        /// <summary>
        /// generalsrvcwastedisposal property
        /// </summary>
          [XmlEnum("general srvc -- waste disposal")]
          generalsrvcwastedisposal,
        /// <summary>
        /// A non-oil and gas E and P well drilled for the purpose of locating and/or extracting a mineral from the subsurface, usually through the injection and/or extraction of mineral-bearing fluids.
        /// </summary>
          mineral,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellboreType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellboreType xsd enumeration.")]
        public enum WellboreType 
        {
        /// <summary>
        /// The original wellbore had to be abandoned before its final usage. This wellbore is being drilled as a different wellbore, but one which has the same target as the one that was abandoned.
        /// </summary>
          bypass,
        /// <summary>
        /// This is the first wellbore that has been drilled, or attempted, in a given well.
        /// </summary>
          initial,
        /// <summary>
        /// The wellbore is being redrilled.
        /// </summary>
          redrill,
        /// <summary>
        /// The wellbore is being reentered after a period of abandonment.
        /// </summary>
          reentry,
        /// <summary>
        /// The wellbore is part of an existing regulatory well. The original borehole did not reach the target depth. This borehole required the well to be respudded (drilled from a different surface position).
        /// </summary>
          respud,
        /// <summary>
        /// The wellbore is a deviation from a given wellbore, that produces a different borehole from the others, and whose bottomhole differs from any previously extisting wellbore bottomholes.
        /// </summary>
          sidetrack,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellboreShape xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellboreShape xsd enumeration.")]
        public enum WellboreShape 
        {
        /// <summary>
        /// buildandhold property
        /// </summary>
          [XmlEnum("build and hold")]
          buildandhold,
        /// <summary>
        /// A wellbore that significantly departs from vertical with respect to the surface location.
        /// </summary>
          deviated,
        /// <summary>
        /// doublekickoff property
        /// </summary>
          [XmlEnum("double kickoff")]
          doublekickoff,
        /// <summary>
        /// A wellbore whose path deviates from the vertical by at least 75 degrees.
        /// </summary>
          horizontal,
        /// <summary>
        /// Sshaped property
        /// </summary>
          [XmlEnum("S-shaped")]
          Sshaped,
        /// <summary>
        /// A wellbore that is nearly vertical with respect to the surface location.
        /// </summary>
          vertical,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MeasuredDepthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MeasuredDepthUom xsd enumeration.")]
        public enum MeasuredDepthUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS
        }
        /// <summary>
        /// This class represents the LengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LengthUom xsd enumeration.")]
        public enum LengthUom 
        {
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// chBnA property
        /// </summary>
          chBnA,
        /// <summary>
        /// chBnB property
        /// </summary>
          chBnB,
        /// <summary>
        /// chCla property
        /// </summary>
          chCla,
        /// <summary>
        /// chSe property
        /// </summary>
          chSe,
        /// <summary>
        /// chUS property
        /// </summary>
          chUS,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftBnA property
        /// </summary>
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          ftBnB,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ftInd(37)")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ftInd(62)")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ftInd(75)")]
          ftInd75,
        /// <summary>
        /// ftMA property
        /// </summary>
          ftMA,
        /// <summary>
        /// ftSe property
        /// </summary>
          ftSe,
        /// <summary>
        /// ftUS property
        /// </summary>
          ftUS,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// in10 property
        /// </summary>
          [XmlEnum("in/10")]
          in10,
        /// <summary>
        /// in16 property
        /// </summary>
          [XmlEnum("in/16")]
          in16,
        /// <summary>
        /// in32 property
        /// </summary>
          [XmlEnum("in/32")]
          in32,
        /// <summary>
        /// in64 property
        /// </summary>
          [XmlEnum("in/64")]
          in64,
        /// <summary>
        /// inUS property
        /// </summary>
          inUS,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// lkBnA property
        /// </summary>
          lkBnA,
        /// <summary>
        /// lkBnB property
        /// </summary>
          lkBnB,
        /// <summary>
        /// lkCla property
        /// </summary>
          lkCla,
        /// <summary>
        /// lkSe property
        /// </summary>
          lkSe,
        /// <summary>
        /// lkUS property
        /// </summary>
          lkUS,
        /// <summary>
        /// mGer property
        /// </summary>
          mGer,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// miUS property
        /// </summary>
          miUS,
        /// <summary>
        /// mm property
        /// </summary>
          mm,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// nautmi property
        /// </summary>
          nautmi,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          ydCla,
        /// <summary>
        /// ydIm property
        /// </summary>
          ydIm,
        /// <summary>
        /// ydInd property
        /// </summary>
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("ydInd(37)")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("ydInd(62)")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("ydInd(75)")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          ydSe
        }
        /// <summary>
        /// This class represents the EastOrWest xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the EastOrWest xsd enumeration.")]
        public enum EastOrWest 
        {
        /// <summary>
        /// East of something.
        /// </summary>
          east,
        /// <summary>
        /// West of something.
        /// </summary>
          west,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NorthOrSouth xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the NorthOrSouth xsd enumeration.")]
        public enum NorthOrSouth 
        {
        /// <summary>
        /// North of something.
        /// </summary>
          north,
        /// <summary>
        /// South of something.
        /// </summary>
          south,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellVerticalCoordinateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellVerticalCoordinateUom xsd enumeration.")]
        public enum WellVerticalCoordinateUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65
        }
        /// <summary>
        /// This class represents the PercentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PercentUom xsd enumeration.")]
        public enum PercentUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item
        }
        /// <summary>
        /// This class represents the PlaneAngleUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PlaneAngleUom xsd enumeration.")]
        public enum PlaneAngleUom 
        {
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// c property
        /// </summary>
          c,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// gr property
        /// </summary>
          gr,
        /// <summary>
        /// Grad property
        /// </summary>
          Grad,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// mila property
        /// </summary>
          mila,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// mseca property
        /// </summary>
          mseca,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// urad property
        /// </summary>
          urad
        }
        /// <summary>
        /// This class represents the AziRef xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AziRef xsd enumeration.")]
        public enum AziRef 
        {
        /// <summary>
        /// magneticnorth property
        /// </summary>
          [XmlEnum("magnetic north")]
          magneticnorth,
        /// <summary>
        /// gridnorth property
        /// </summary>
          [XmlEnum("grid north")]
          gridnorth,
        /// <summary>
        /// truenorth property
        /// </summary>
          [XmlEnum("true north")]
          truenorth,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the VolumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumePerVolumeUom xsd enumeration.")]
        public enum VolumePerVolumeUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// permil property
        /// </summary>
          permil,
        /// <summary>
        /// ppdk property
        /// </summary>
          ppdk,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/acre.ft")]
          bblacreft,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bbl100bbl property
        /// </summary>
          [XmlEnum("bbl/100bbl")]
          bbl100bbl,
        /// <summary>
        /// bblkft3 property
        /// </summary>
          [XmlEnum("bbl/k(ft3)")]
          bblkft3,
        /// <summary>
        /// bblMft3 property
        /// </summary>
          [XmlEnum("bbl/M(ft3)")]
          bblMft3,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// galUSkgalUS property
        /// </summary>
          [XmlEnum("galUS/kgalUS")]
          galUSkgalUS,
        /// <summary>
        /// galUKkgalUK property
        /// </summary>
          [XmlEnum("galUK/kgalUK")]
          galUKkgalUK,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("galUK/ft3")]
          galUKft3,
        /// <summary>
        /// galUKMbbl property
        /// </summary>
          [XmlEnum("galUK/Mbbl")]
          galUKMbbl,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("galUS/bbl")]
          galUSbbl,
        /// <summary>
        /// galUS10bbl property
        /// </summary>
          [XmlEnum("galUS/10bbl")]
          galUS10bbl,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("galUS/ft3")]
          galUSft3,
        /// <summary>
        /// galUSMbbl property
        /// </summary>
          [XmlEnum("galUS/Mbbl")]
          galUSMbbl,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// ksm3sm3 property
        /// </summary>
          [XmlEnum("ksm3/sm3")]
          ksm3sm3,
        /// <summary>
        /// L10bbl property
        /// </summary>
          [XmlEnum("L/10bbl")]
          L10bbl,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/ha.m")]
          m3ham,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// Mft3acreft property
        /// </summary>
          [XmlEnum("M(ft3)/acre.ft")]
          Mft3acreft,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/galUK")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/galUS")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// MMbblacreft property
        /// </summary>
          [XmlEnum("MMbbl/acre.ft")]
          MMbblacreft,
        /// <summary>
        /// MMscf60stb60 property
        /// </summary>
          [XmlEnum("MMscf60/stb60")]
          MMscf60stb60,
        /// <summary>
        /// Mscf60stb60 property
        /// </summary>
          [XmlEnum("Mscf60/stb60")]
          Mscf60stb60,
        /// <summary>
        /// ptUKMbbl property
        /// </summary>
          [XmlEnum("ptUK/Mbbl")]
          ptUKMbbl,
        /// <summary>
        /// ptUS10bbl property
        /// </summary>
          [XmlEnum("ptUS/10bbl")]
          ptUS10bbl,
        /// <summary>
        /// pu property
        /// </summary>
          pu,
        /// <summary>
        /// scm15stb60 property
        /// </summary>
          [XmlEnum("scm15/stb60")]
          scm15stb60,
        /// <summary>
        /// sm3ksm3 property
        /// </summary>
          [XmlEnum("sm3/ksm3")]
          sm3ksm3,
        /// <summary>
        /// sm3sm3 property
        /// </summary>
          [XmlEnum("sm3/sm3")]
          sm3sm3,
        /// <summary>
        /// stb60MMscf60 property
        /// </summary>
          [XmlEnum("stb60/MMscf60")]
          stb60MMscf60,
        /// <summary>
        /// stb60MMscm15 property
        /// </summary>
          [XmlEnum("stb60/MMscm15")]
          stb60MMscm15,
        /// <summary>
        /// stb60Mscf60 property
        /// </summary>
          [XmlEnum("stb60/Mscf60")]
          stb60Mscf60,
        /// <summary>
        /// stb60Mscm15 property
        /// </summary>
          [XmlEnum("stb60/Mscm15")]
          stb60Mscm15,
        /// <summary>
        /// stb60scm15 property
        /// </summary>
          [XmlEnum("stb60/scm15")]
          stb60scm15
        }
        /// <summary>
        /// This class represents the VolumePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumePerLengthUom xsd enumeration.")]
        public enum VolumePerLengthUom 
        {
        /// <summary>
        /// bblPft property
        /// </summary>
          bblPft,
        /// <summary>
        /// bblPin property
        /// </summary>
          bblPin,
        /// <summary>
        /// bblPmi property
        /// </summary>
          bblPmi,
        /// <summary>
        /// dm3P100km property
        /// </summary>
          dm3P100km,
        /// <summary>
        /// dm3Pkm100 property
        /// </summary>
          [XmlEnum("dm3Pkm(100)")]
          dm3Pkm100,
        /// <summary>
        /// dm3Pm property
        /// </summary>
          dm3Pm,
        /// <summary>
        /// ft3Pft property
        /// </summary>
          ft3Pft,
        /// <summary>
        /// galUKPmi property
        /// </summary>
          galUKPmi,
        /// <summary>
        /// galUSPft property
        /// </summary>
          galUSPft,
        /// <summary>
        /// galUSPmi property
        /// </summary>
          galUSPmi,
        /// <summary>
        /// in3Pft property
        /// </summary>
          in3Pft,
        /// <summary>
        /// LP100km property
        /// </summary>
          LP100km,
        /// <summary>
        /// LPkm100 property
        /// </summary>
          [XmlEnum("LPkm(100)")]
          LPkm100,
        /// <summary>
        /// LPm property
        /// </summary>
          LPm,
        /// <summary>
        /// m3Pkm property
        /// </summary>
          m3Pkm,
        /// <summary>
        /// m3Pm property
        /// </summary>
          m3Pm
        }
        /// <summary>
        /// This class represents the VolumeFlowRateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumeFlowRateUom xsd enumeration.")]
        public enum VolumeFlowRateUom 
        {
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bblhr property
        /// </summary>
          [XmlEnum("bbl/hr")]
          bblhr,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// cm330min property
        /// </summary>
          [XmlEnum("cm3/30min")]
          cm330min,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("galUK/d")]
          galUKd,
        /// <summary>
        /// galUKhr property
        /// </summary>
          [XmlEnum("galUK/hr")]
          galUKhr,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("galUK/min")]
          galUKmin,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("galUS/d")]
          galUSd,
        /// <summary>
        /// galUShr property
        /// </summary>
          [XmlEnum("galUS/hr")]
          galUShr,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("galUS/min")]
          galUSmin,
        /// <summary>
        /// kbbld property
        /// </summary>
          [XmlEnum("kbbl/d")]
          kbbld,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000m3/h")]
          Item1000m3h,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// Mbbld property
        /// </summary>
          [XmlEnum("Mbbl/d")]
          Mbbld,
        /// <summary>
        /// Mft3d property
        /// </summary>
          [XmlEnum("M(ft3)/d")]
          Mft3d,
        /// <summary>
        /// Mm3d property
        /// </summary>
          [XmlEnum("M(m3)/d")]
          Mm3d
        }
        /// <summary>
        /// This class represents the VolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VolumeUom xsd enumeration.")]
        public enum VolumeUom 
        {
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// bcf property
        /// </summary>
          bcf,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// dm3 property
        /// </summary>
          dm3,
        /// <summary>
        /// flozUK property
        /// </summary>
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          flozUS,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// galUK property
        /// </summary>
          galUK,
        /// <summary>
        /// galUS property
        /// </summary>
          galUS,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000ft3")]
          Item1000ft3,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// Mbbl property
        /// </summary>
          Mbbl,
        /// <summary>
        /// Mcf property
        /// </summary>
          Mcf,
        /// <summary>
        /// Mft3 property
        /// </summary>
          [XmlEnum("M(ft3)")]
          Mft3,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// Mm3 property
        /// </summary>
          [XmlEnum("M(m3)")]
          Mm3,
        /// <summary>
        /// mm3 property
        /// </summary>
          mm3,
        /// <summary>
        /// MMbbl property
        /// </summary>
          MMbbl,
        /// <summary>
        /// ptUK property
        /// </summary>
          ptUK,
        /// <summary>
        /// ptUS property
        /// </summary>
          ptUS,
        /// <summary>
        /// qtUK property
        /// </summary>
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          qtUS,
        /// <summary>
        /// tcf property
        /// </summary>
          tcf,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3
        }
        /// <summary>
        /// This class represents the VelocityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the VelocityUom xsd enumeration.")]
        public enum VelocityUom 
        {
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// kfth property
        /// </summary>
          [XmlEnum("kft/h")]
          kfth,
        /// <summary>
        /// kfts property
        /// </summary>
          [XmlEnum("kft/s")]
          kfts,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// milyr property
        /// </summary>
          [XmlEnum("mil/yr")]
          milyr,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums
        }
        /// <summary>
        /// This class represents the TimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TimeUom xsd enumeration.")]
        public enum TimeUom 
        {
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// Ga property
        /// </summary>
          Ga,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// Item100s property
        /// </summary>
          [XmlEnum("100s")]
          Item100s,
        /// <summary>
        /// Ma property
        /// </summary>
          Ma,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// ms property
        /// </summary>
          ms,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("ms/2")]
          ms2,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// wk property
        /// </summary>
          wk,
        /// <summary>
        /// Item100ka property
        /// </summary>
          [XmlEnum("100ka")]
          Item100ka
        }
        /// <summary>
        /// This class represents the ThermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ThermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperatureUom 
        {
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degR property
        /// </summary>
          degR
        }
        /// <summary>
        /// This class represents the ThermalVolumetricExpansionUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ThermalVolumetricExpansionUom xsd enumeration.")]
        public enum ThermalVolumetricExpansionUom 
        {
        /// <summary>
        /// Item1K property
        /// </summary>
          [XmlEnum("1/K")]
          Item1K,
        /// <summary>
        /// ppmdegC property
        /// </summary>
          [XmlEnum("ppm/degC")]
          ppmdegC,
        /// <summary>
        /// ppmdegF property
        /// </summary>
          [XmlEnum("ppm/degF")]
          ppmdegF,
        /// <summary>
        /// Item1degC property
        /// </summary>
          [XmlEnum("1/degC")]
          Item1degC,
        /// <summary>
        /// Item1degF property
        /// </summary>
          [XmlEnum("1/degF")]
          Item1degF,
        /// <summary>
        /// Item1degR property
        /// </summary>
          [XmlEnum("1/degR")]
          Item1degR
        }
        /// <summary>
        /// This class represents the ThermalConductivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ThermalConductivityUom xsd enumeration.")]
        public enum ThermalConductivityUom 
        {
        /// <summary>
        /// WmK property
        /// </summary>
          [XmlEnum("W/m.K")]
          WmK,
        /// <summary>
        /// BtuhrftdegF property
        /// </summary>
          [XmlEnum("Btu/hr.ft.degF")]
          BtuhrftdegF,
        /// <summary>
        /// calhcmdegC property
        /// </summary>
          [XmlEnum("cal/h.cm.degC")]
          calhcmdegC,
        /// <summary>
        /// kcalhmdegC property
        /// </summary>
          [XmlEnum("kcal/h.m.degC")]
          kcalhmdegC,
        /// <summary>
        /// calscmdegC property
        /// </summary>
          [XmlEnum("cal/s.cm.degC")]
          calscmdegC
        }
        /// <summary>
        /// This class represents the StandardVolumePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StandardVolumePerTimeUom xsd enumeration.")]
        public enum StandardVolumePerTimeUom 
        {
        /// <summary>
        /// scf60Fd property
        /// </summary>
          [XmlEnum("scf(60F)/d")]
          scf60Fd,
        /// <summary>
        /// scm15Cs property
        /// </summary>
          [XmlEnum("scm(15C)/s")]
          scm15Cs,
        /// <summary>
        /// scm15Cd property
        /// </summary>
          [XmlEnum("scm(15C)/d")]
          scm15Cd,
        /// <summary>
        /// stb60Fd property
        /// </summary>
          [XmlEnum("stb(60F)/d")]
          stb60Fd,
        /// <summary>
        /// ksm3d property
        /// </summary>
          [XmlEnum("ksm3/d")]
          ksm3d,
        /// <summary>
        /// Mscm15Cd property
        /// </summary>
          [XmlEnum("Mscm(15C)/d")]
          Mscm15Cd,
        /// <summary>
        /// MMscm15Cd property
        /// </summary>
          [XmlEnum("MMscm(15C)/d")]
          MMscm15Cd,
        /// <summary>
        /// Mstb60Fd property
        /// </summary>
          [XmlEnum("Mstb(60F)/d")]
          Mstb60Fd,
        /// <summary>
        /// MMstb60Fd property
        /// </summary>
          [XmlEnum("MMstb(60F)/d")]
          MMstb60Fd,
        /// <summary>
        /// Mscf60Fd property
        /// </summary>
          [XmlEnum("Mscf(60F)/d")]
          Mscf60Fd,
        /// <summary>
        /// MMscf60Fd property
        /// </summary>
          [XmlEnum("MMscf(60F)/d")]
          MMscf60Fd
        }
        /// <summary>
        /// This class represents the StandardVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StandardVolumeUom xsd enumeration.")]
        public enum StandardVolumeUom 
        {
        /// <summary>
        /// scm15C property
        /// </summary>
          [XmlEnum("scm(15C)")]
          scm15C,
        /// <summary>
        /// scm0C property
        /// </summary>
          [XmlEnum("scm(0C)")]
          scm0C,
        /// <summary>
        /// Gsm3 property
        /// </summary>
          Gsm3,
        /// <summary>
        /// ksm3 property
        /// </summary>
          ksm3,
        /// <summary>
        /// MMscf60F property
        /// </summary>
          [XmlEnum("MMscf(60F)")]
          MMscf60F,
        /// <summary>
        /// MMscm15C property
        /// </summary>
          [XmlEnum("MMscm(15C)")]
          MMscm15C,
        /// <summary>
        /// MMstb60F property
        /// </summary>
          [XmlEnum("MMstb(60F)")]
          MMstb60F,
        /// <summary>
        /// Mscf60F property
        /// </summary>
          [XmlEnum("Mscf(60F)")]
          Mscf60F,
        /// <summary>
        /// Mstb60F property
        /// </summary>
          [XmlEnum("Mstb(60F)")]
          Mstb60F,
        /// <summary>
        /// scf60F property
        /// </summary>
          [XmlEnum("scf(60F)")]
          scf60F,
        /// <summary>
        /// stb60F property
        /// </summary>
          [XmlEnum("stb(60F)")]
          stb60F
        }
        /// <summary>
        /// This class represents the SpecificVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SpecificVolumeUom xsd enumeration.")]
        public enum SpecificVolumeUom 
        {
        /// <summary>
        /// m3kg property
        /// </summary>
          [XmlEnum("m3/kg")]
          m3kg,
        /// <summary>
        /// bbltonUK property
        /// </summary>
          [XmlEnum("bbl/tonUK")]
          bbltonUK,
        /// <summary>
        /// bbltonUS property
        /// </summary>
          [XmlEnum("bbl/tonUS")]
          bbltonUS,
        /// <summary>
        /// cm3g property
        /// </summary>
          [XmlEnum("cm3/g")]
          cm3g,
        /// <summary>
        /// dm3kg property
        /// </summary>
          [XmlEnum("dm3/kg")]
          dm3kg,
        /// <summary>
        /// dm3t property
        /// </summary>
          [XmlEnum("dm3/t")]
          dm3t,
        /// <summary>
        /// ft3kg property
        /// </summary>
          [XmlEnum("ft3/kg")]
          ft3kg,
        /// <summary>
        /// ft3lbm property
        /// </summary>
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        /// <summary>
        /// ft3sack94 property
        /// </summary>
          [XmlEnum("ft3/sack94")]
          ft3sack94,
        /// <summary>
        /// galUSsack94 property
        /// </summary>
          [XmlEnum("galUS/sack94")]
          galUSsack94,
        /// <summary>
        /// galUKlbm property
        /// </summary>
          [XmlEnum("galUK/lbm")]
          galUKlbm,
        /// <summary>
        /// galUSlbm property
        /// </summary>
          [XmlEnum("galUS/lbm")]
          galUSlbm,
        /// <summary>
        /// galUStonUK property
        /// </summary>
          [XmlEnum("galUS/tonUK")]
          galUStonUK,
        /// <summary>
        /// galUStonUS property
        /// </summary>
          [XmlEnum("galUS/tonUS")]
          galUStonUS,
        /// <summary>
        /// L100kg property
        /// </summary>
          [XmlEnum("L/100kg")]
          L100kg,
        /// <summary>
        /// Lkg property
        /// </summary>
          [XmlEnum("L/kg")]
          Lkg,
        /// <summary>
        /// Lt property
        /// </summary>
          [XmlEnum("L/t")]
          Lt,
        /// <summary>
        /// LtonUK property
        /// </summary>
          [XmlEnum("L/tonUK")]
          LtonUK,
        /// <summary>
        /// m3g property
        /// </summary>
          [XmlEnum("m3/g")]
          m3g,
        /// <summary>
        /// m3t property
        /// </summary>
          [XmlEnum("m3/t")]
          m3t,
        /// <summary>
        /// m3tonUK property
        /// </summary>
          [XmlEnum("m3/tonUK")]
          m3tonUK,
        /// <summary>
        /// m3tonUS property
        /// </summary>
          [XmlEnum("m3/tonUS")]
          m3tonUS
        }
        /// <summary>
        /// This class represents the SpecificHeatCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SpecificHeatCapacityUom xsd enumeration.")]
        public enum SpecificHeatCapacityUom 
        {
        /// <summary>
        /// JkgK property
        /// </summary>
          [XmlEnum("J/kg.K")]
          JkgK,
        /// <summary>
        /// BtulbmdegF property
        /// </summary>
          [XmlEnum("Btu/lbm.degF")]
          BtulbmdegF,
        /// <summary>
        /// BtulbmdegR property
        /// </summary>
          [XmlEnum("Btu/lbm.degR")]
          BtulbmdegR,
        /// <summary>
        /// calgK property
        /// </summary>
          [XmlEnum("cal/g.K")]
          calgK,
        /// <summary>
        /// JgK property
        /// </summary>
          [XmlEnum("J/g.K")]
          JgK,
        /// <summary>
        /// kcalkgdegC property
        /// </summary>
          [XmlEnum("kcal/kg.degC")]
          kcalkgdegC,
        /// <summary>
        /// kJkgK property
        /// </summary>
          [XmlEnum("kJ/kg.K")]
          kJkgK,
        /// <summary>
        /// kWhkgdegC property
        /// </summary>
          [XmlEnum("kW.h/kg.degC")]
          kWhkgdegC
        }
        /// <summary>
        /// This class represents the RelativePowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RelativePowerUom xsd enumeration.")]
        public enum RelativePowerUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Btubhphr property
        /// </summary>
          [XmlEnum("Btu/bhp.hr")]
          Btubhphr,
        /// <summary>
        /// WkW property
        /// </summary>
          [XmlEnum("W/kW")]
          WkW,
        /// <summary>
        /// WW property
        /// </summary>
          [XmlEnum("W/W")]
          WW
        }
        /// <summary>
        /// This class represents the PressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PressureUom xsd enumeration.")]
        public enum PressureUom 
        {
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// at property
        /// </summary>
          at,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O(4degC)")]
          cmH2O4degC,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm2,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// inH2O392F property
        /// </summary>
          [XmlEnum("inH2O(39.2F)")]
          inH2O392F,
        /// <summary>
        /// inH2O60F property
        /// </summary>
          [XmlEnum("inH2O(60F)")]
          inH2O60F,
        /// <summary>
        /// inHg32F property
        /// </summary>
          [XmlEnum("inHg(32F)")]
          inHg32F,
        /// <summary>
        /// inHg60F property
        /// </summary>
          [XmlEnum("inHg(60F)")]
          inHg60F,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm2,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// lbf100ft2 property
        /// </summary>
          [XmlEnum("lbf/100ft2")]
          lbf100ft2,
        /// <summary>
        /// lbfin2 property
        /// </summary>
          [XmlEnum("lbf/in2")]
          lbfin2,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// mmHg0C property
        /// </summary>
          [XmlEnum("mmHg(0C)")]
          mmHg0C,
        /// <summary>
        /// mPa property
        /// </summary>
          mPa,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm2,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// Pag property
        /// </summary>
          [XmlEnum("Pa(g)")]
          Pag,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// psia property
        /// </summary>
          psia,
        /// <summary>
        /// psig property
        /// </summary>
          psig,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonfUS/ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonfUS/in2")]
          tonfUSin2,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// umHg0C property
        /// </summary>
          [XmlEnum("umHg(0C)")]
          umHg0C,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi
        }
        /// <summary>
        /// This class represents the PowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PowerUom xsd enumeration.")]
        public enum PowerUom 
        {
        /// <summary>
        /// W property
        /// </summary>
          W,
        /// <summary>
        /// ch property
        /// </summary>
          ch,
        /// <summary>
        /// CV property
        /// </summary>
          CV,
        /// <summary>
        /// ehp property
        /// </summary>
          ehp,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// hhp property
        /// </summary>
          hhp,
        /// <summary>
        /// hp property
        /// </summary>
          hp,
        /// <summary>
        /// kcalh property
        /// </summary>
          [XmlEnum("kcal/h")]
          kcalh,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// MJa property
        /// </summary>
          [XmlEnum("MJ/a")]
          MJa,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// tonofrefrig property
        /// </summary>
          [XmlEnum("ton of refrig")]
          tonofrefrig,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// uW property
        /// </summary>
          uW
        }
        /// <summary>
        /// This class represents the PermeabilityRockUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PermeabilityRockUom xsd enumeration.")]
        public enum PermeabilityRockUom 
        {
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// mD property
        /// </summary>
          mD
        }
        /// <summary>
        /// This class represents the PerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerLengthUom xsd enumeration.")]
        public enum PerLengthUom 
        {
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// Item1angstrom property
        /// </summary>
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        /// <summary>
        /// Item1cm property
        /// </summary>
          [XmlEnum("1/cm")]
          Item1cm,
        /// <summary>
        /// Item1ft property
        /// </summary>
          [XmlEnum("1/ft")]
          Item1ft,
        /// <summary>
        /// Item1in property
        /// </summary>
          [XmlEnum("1/in")]
          Item1in,
        /// <summary>
        /// Item1mi property
        /// </summary>
          [XmlEnum("1/mi")]
          Item1mi,
        /// <summary>
        /// Item1mm property
        /// </summary>
          [XmlEnum("1/mm")]
          Item1mm,
        /// <summary>
        /// Item1nm property
        /// </summary>
          [XmlEnum("1/nm")]
          Item1nm,
        /// <summary>
        /// Item1yd property
        /// </summary>
          [XmlEnum("1/yd")]
          Item1yd
        }
        /// <summary>
        /// This class represents the MomentOfForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MomentOfForceUom xsd enumeration.")]
        public enum MomentOfForceUom 
        {
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// dNm property
        /// </summary>
          [XmlEnum("dN.m")]
          dNm,
        /// <summary>
        /// daNm property
        /// </summary>
          [XmlEnum("daN.m")]
          daNm,
        /// <summary>
        /// ftlbf property
        /// </summary>
          [XmlEnum("ft.lbf")]
          ftlbf,
        /// <summary>
        /// kftlbf property
        /// </summary>
          [XmlEnum("kft.lbf")]
          kftlbf,
        /// <summary>
        /// kgfm property
        /// </summary>
          [XmlEnum("kgf.m")]
          kgfm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN.m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf.ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf.in")]
          lbfin,
        /// <summary>
        /// lbmft2s2 property
        /// </summary>
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N.m")]
          Nm,
        /// <summary>
        /// pdlft property
        /// </summary>
          [XmlEnum("pdl.ft")]
          pdlft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonfUS.ft")]
          tonfUSft,
        /// <summary>
        /// tonfUSmi property
        /// </summary>
          [XmlEnum("tonfUS.mi")]
          tonfUSmi
        }
        /// <summary>
        /// This class represents the MassPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MassPerLengthUom xsd enumeration.")]
        public enum MassPerLengthUom 
        {
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg/m")]
          kgm,
        /// <summary>
        /// klbmin property
        /// </summary>
          [XmlEnum("klbm/in")]
          klbmin,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm/ft")]
          lbmft,
        /// <summary>
        /// Mgin property
        /// </summary>
          [XmlEnum("Mg/in")]
          Mgin,
        /// <summary>
        /// kgmcm2 property
        /// </summary>
          [XmlEnum("kg.m/cm2")]
          kgmcm2
        }
        /// <summary>
        /// This class represents the MassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MassUom xsd enumeration.")]
        public enum MassUom 
        {
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cwtUK property
        /// </summary>
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          cwtUS,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// ozav property
        /// </summary>
          [XmlEnum("oz(av)")]
          ozav,
        /// <summary>
        /// oztroy property
        /// </summary>
          [XmlEnum("oz(troy)")]
          oztroy,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// sack94 property
        /// </summary>
          sack94,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// tonUK property
        /// </summary>
          tonUK,
        /// <summary>
        /// tonUS property
        /// </summary>
          tonUS,
        /// <summary>
        /// ug property
        /// </summary>
          ug
        }
        /// <summary>
        /// This class represents the MassConcentrationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MassConcentrationUom xsd enumeration.")]
        public enum MassConcentrationUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgsack94 property
        /// </summary>
          [XmlEnum("kg/sack94")]
          kgsack94,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// permil property
        /// </summary>
          permil,
        /// <summary>
        /// ppdk property
        /// </summary>
          ppdk,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm
        }
        /// <summary>
        /// This class represents the MagneticInductionUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MagneticInductionUom xsd enumeration.")]
        public enum MagneticInductionUom 
        {
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// gauss property
        /// </summary>
          gauss,
        /// <summary>
        /// mT property
        /// </summary>
          mT,
        /// <summary>
        /// mgauss property
        /// </summary>
          mgauss,
        /// <summary>
        /// nT property
        /// </summary>
          nT,
        /// <summary>
        /// uT property
        /// </summary>
          uT
        }
        /// <summary>
        /// This class represents the LengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LengthPerLengthUom xsd enumeration.")]
        public enum LengthPerLengthUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// ft100ft property
        /// </summary>
          [XmlEnum("ft/100ft")]
          ft100ft,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// m30m property
        /// </summary>
          [XmlEnum("m/30m")]
          m30m,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin
        }
        /// <summary>
        /// This class represents the IlluminanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the IlluminanceUom xsd enumeration.")]
        public enum IlluminanceUom 
        {
        /// <summary>
        /// lx property
        /// </summary>
          lx,
        /// <summary>
        /// lmm2 property
        /// </summary>
          [XmlEnum("lm/m2")]
          lmm2,
        /// <summary>
        /// footcandle property
        /// </summary>
          footcandle,
        /// <summary>
        /// klx property
        /// </summary>
          klx
        }
        /// <summary>
        /// This class represents the ForcePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ForcePerVolumeUom xsd enumeration.")]
        public enum ForcePerVolumeUom 
        {
        /// <summary>
        /// Nm3 property
        /// </summary>
          [XmlEnum("N/m3")]
          Nm3,
        /// <summary>
        /// atm100m property
        /// </summary>
          [XmlEnum("atm/100m")]
          atm100m,
        /// <summary>
        /// atmm property
        /// </summary>
          [XmlEnum("atm/m")]
          atmm,
        /// <summary>
        /// barkm property
        /// </summary>
          [XmlEnum("bar/km")]
          barkm,
        /// <summary>
        /// barm property
        /// </summary>
          [XmlEnum("bar/m")]
          barm,
        /// <summary>
        /// GPacm property
        /// </summary>
          [XmlEnum("GPa/cm")]
          GPacm,
        /// <summary>
        /// kPa100m property
        /// </summary>
          [XmlEnum("kPa/100m")]
          kPa100m,
        /// <summary>
        /// kPam property
        /// </summary>
          [XmlEnum("kPa/m")]
          kPam,
        /// <summary>
        /// lbfft3 property
        /// </summary>
          [XmlEnum("lbf/ft3")]
          lbfft3,
        /// <summary>
        /// lbfgalUS property
        /// </summary>
          [XmlEnum("lbf/galUS")]
          lbfgalUS,
        /// <summary>
        /// MPam property
        /// </summary>
          [XmlEnum("MPa/m")]
          MPam,
        /// <summary>
        /// psift property
        /// </summary>
          [XmlEnum("psi/ft")]
          psift,
        /// <summary>
        /// psi100ft property
        /// </summary>
          [XmlEnum("psi/100ft")]
          psi100ft,
        /// <summary>
        /// psikft property
        /// </summary>
          [XmlEnum("psi/kft")]
          psikft,
        /// <summary>
        /// psim property
        /// </summary>
          [XmlEnum("psi/m")]
          psim,
        /// <summary>
        /// Pam property
        /// </summary>
          [XmlEnum("Pa/m")]
          Pam,
        /// <summary>
        /// atmft property
        /// </summary>
          [XmlEnum("atm/ft")]
          atmft
        }
        /// <summary>
        /// This class represents the ForcePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ForcePerLengthUom xsd enumeration.")]
        public enum ForcePerLengthUom 
        {
        /// <summary>
        /// N30m property
        /// </summary>
          [XmlEnum("N/30m")]
          N30m,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm,
        /// <summary>
        /// dynecm property
        /// </summary>
          [XmlEnum("dyne/cm")]
          dynecm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN/m")]
          kNm,
        /// <summary>
        /// kgfcm property
        /// </summary>
          [XmlEnum("kgf/cm")]
          kgfcm,
        /// <summary>
        /// lbf100ft property
        /// </summary>
          [XmlEnum("lbf/100ft")]
          lbf100ft,
        /// <summary>
        /// lbf30m property
        /// </summary>
          [XmlEnum("lbf/30m")]
          lbf30m,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf/ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf/in")]
          lbfin,
        /// <summary>
        /// mNkm property
        /// </summary>
          [XmlEnum("mN/km")]
          mNkm,
        /// <summary>
        /// mNm property
        /// </summary>
          [XmlEnum("mN/m")]
          mNm,
        /// <summary>
        /// pdlcm property
        /// </summary>
          [XmlEnum("pdl/cm")]
          pdlcm,
        /// <summary>
        /// tonfUKft property
        /// </summary>
          [XmlEnum("tonfUK/ft")]
          tonfUKft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonfUS/ft")]
          tonfUSft
        }
        /// <summary>
        /// This class represents the ForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ForceUom xsd enumeration.")]
        public enum ForceUom 
        {
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// daN property
        /// </summary>
          daN,
        /// <summary>
        /// dyne property
        /// </summary>
          dyne,
        /// <summary>
        /// gf property
        /// </summary>
          gf,
        /// <summary>
        /// kdyne property
        /// </summary>
          kdyne,
        /// <summary>
        /// kgf property
        /// </summary>
          kgf,
        /// <summary>
        /// klbf property
        /// </summary>
          klbf,
        /// <summary>
        /// kN property
        /// </summary>
          kN,
        /// <summary>
        /// lbf property
        /// </summary>
          lbf,
        /// <summary>
        /// Mgf property
        /// </summary>
          Mgf,
        /// <summary>
        /// mN property
        /// </summary>
          mN,
        /// <summary>
        /// MN property
        /// </summary>
          MN,
        /// <summary>
        /// ozf property
        /// </summary>
          ozf,
        /// <summary>
        /// pdl property
        /// </summary>
          pdl,
        /// <summary>
        /// tonfUK property
        /// </summary>
          tonfUK,
        /// <summary>
        /// tonfUS property
        /// </summary>
          tonfUS,
        /// <summary>
        /// uN property
        /// </summary>
          uN
        }
        /// <summary>
        /// This class represents the EquivalentPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the EquivalentPerMassUom xsd enumeration.")]
        public enum EquivalentPerMassUom 
        {
        /// <summary>
        /// eqkg property
        /// </summary>
          [XmlEnum("eq/kg")]
          eqkg,
        /// <summary>
        /// meqg property
        /// </summary>
          [XmlEnum("meq/g")]
          meqg,
        /// <summary>
        /// meq100g property
        /// </summary>
          [XmlEnum("meq/100g")]
          meq100g
        }
        /// <summary>
        /// This class represents the ElectricPotentialUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ElectricPotentialUom xsd enumeration.")]
        public enum ElectricPotentialUom 
        {
        /// <summary>
        /// V property
        /// </summary>
          V,
        /// <summary>
        /// kV property
        /// </summary>
          kV,
        /// <summary>
        /// mV property
        /// </summary>
          mV,
        /// <summary>
        /// MV property
        /// </summary>
          MV,
        /// <summary>
        /// uV property
        /// </summary>
          uV
        }
        /// <summary>
        /// This class represents the ElectricCurrentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ElectricCurrentUom xsd enumeration.")]
        public enum ElectricCurrentUom 
        {
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// uA property
        /// </summary>
          uA
        }
        /// <summary>
        /// This class represents the DynamicViscosityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DynamicViscosityUom xsd enumeration.")]
        public enum DynamicViscosityUom 
        {
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2
        }
        /// <summary>
        /// This class represents the DimensionlessUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DimensionlessUom xsd enumeration.")]
        public enum DimensionlessUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc
        }
        /// <summary>
        /// This class represents the DensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DensityUom xsd enumeration.")]
        public enum DensityUom 
        {
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// dAPI property
        /// </summary>
          dAPI,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/galUK")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/galUS")]
          ggalUS,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/galUS")]
          graingalUS,
        /// <summary>
        /// grain100ft3 property
        /// </summary>
          [XmlEnum("grain/100ft3")]
          grain100ft3,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// lbm10bbl property
        /// </summary>
          [XmlEnum("lbm/10bbl")]
          lbm10bbl,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/galUK")]
          lbmgalUK,
        /// <summary>
        /// lbm1000galUK property
        /// </summary>
          [XmlEnum("lbm/1000galUK")]
          lbm1000galUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/galUS")]
          lbmgalUS,
        /// <summary>
        /// lbm1000galUS property
        /// </summary>
          [XmlEnum("lbm/1000galUS")]
          lbm1000galUS,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// lbmMbbl property
        /// </summary>
          [XmlEnum("lbm/Mbbl")]
          lbmMbbl,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/galUS")]
          mggalUS,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3
        }
        /// <summary>
        /// This class represents the CompressibilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CompressibilityUom xsd enumeration.")]
        public enum CompressibilityUom 
        {
        /// <summary>
        /// Item1psi property
        /// </summary>
          [XmlEnum("1/psi")]
          Item1psi,
        /// <summary>
        /// Item1upsi property
        /// </summary>
          [XmlEnum("1/upsi")]
          Item1upsi,
        /// <summary>
        /// Item1Pa property
        /// </summary>
          [XmlEnum("1/Pa")]
          Item1Pa,
        /// <summary>
        /// Item1bar property
        /// </summary>
          [XmlEnum("1/bar")]
          Item1bar,
        /// <summary>
        /// Item1kPa property
        /// </summary>
          [XmlEnum("1/kPa")]
          Item1kPa,
        /// <summary>
        /// Item1pPa property
        /// </summary>
          [XmlEnum("1/pPa")]
          Item1pPa
        }
        /// <summary>
        /// This class represents the AreaPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AreaPerAreaUom xsd enumeration.")]
        public enum AreaPerAreaUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// in2ft2 property
        /// </summary>
          [XmlEnum("in2/ft2")]
          in2ft2,
        /// <summary>
        /// in2in2 property
        /// </summary>
          [XmlEnum("in2/in2")]
          in2in2,
        /// <summary>
        /// m2m2 property
        /// </summary>
          [XmlEnum("m2/m2")]
          m2m2,
        /// <summary>
        /// mm2mm2 property
        /// </summary>
          [XmlEnum("mm2/mm2")]
          mm2mm2
        }
        /// <summary>
        /// This class represents the AreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AreaUom xsd enumeration.")]
        public enum AreaUom 
        {
        /// <summary>
        /// m2 property
        /// </summary>
          m2,
        /// <summary>
        /// acre property
        /// </summary>
          acre,
        /// <summary>
        /// b property
        /// </summary>
          b,
        /// <summary>
        /// cm2 property
        /// </summary>
          cm2,
        /// <summary>
        /// ft2 property
        /// </summary>
          ft2,
        /// <summary>
        /// ha property
        /// </summary>
          ha,
        /// <summary>
        /// in2 property
        /// </summary>
          in2,
        /// <summary>
        /// km2 property
        /// </summary>
          km2,
        /// <summary>
        /// mi2 property
        /// </summary>
          mi2,
        /// <summary>
        /// miUS2 property
        /// </summary>
          miUS2,
        /// <summary>
        /// mm2 property
        /// </summary>
          mm2,
        /// <summary>
        /// um2 property
        /// </summary>
          um2,
        /// <summary>
        /// yd2 property
        /// </summary>
          yd2
        }
        /// <summary>
        /// This class represents the AnglePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AnglePerTimeUom xsd enumeration.")]
        public enum AnglePerTimeUom 
        {
        /// <summary>
        /// rads property
        /// </summary>
          [XmlEnum("rad/s")]
          rads,
        /// <summary>
        /// cs property
        /// </summary>
          [XmlEnum("c/s")]
          cs,
        /// <summary>
        /// degah property
        /// </summary>
          [XmlEnum("dega/h")]
          degah,
        /// <summary>
        /// degamin property
        /// </summary>
          [XmlEnum("dega/min")]
          degamin,
        /// <summary>
        /// degas property
        /// </summary>
          [XmlEnum("dega/s")]
          degas,
        /// <summary>
        /// revs property
        /// </summary>
          [XmlEnum("rev/s")]
          revs,
        /// <summary>
        /// rpm property
        /// </summary>
          rpm
        }
        /// <summary>
        /// This class represents the AnglePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AnglePerLengthUom xsd enumeration.")]
        public enum AnglePerLengthUom 
        {
        /// <summary>
        /// radm property
        /// </summary>
          [XmlEnum("rad/m")]
          radm,
        /// <summary>
        /// dega30ft property
        /// </summary>
          [XmlEnum("dega/30ft")]
          dega30ft,
        /// <summary>
        /// degaft property
        /// </summary>
          [XmlEnum("dega/ft")]
          degaft,
        /// <summary>
        /// dega100ft property
        /// </summary>
          [XmlEnum("dega/100ft")]
          dega100ft,
        /// <summary>
        /// degam property
        /// </summary>
          [XmlEnum("dega/m")]
          degam,
        /// <summary>
        /// dega30m property
        /// </summary>
          [XmlEnum("dega/30m")]
          dega30m,
        /// <summary>
        /// radft property
        /// </summary>
          [XmlEnum("rad/ft")]
          radft
        }
        /// <summary>
        /// This class represents the AccelerationLinearUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AccelerationLinearUom xsd enumeration.")]
        public enum AccelerationLinearUom 
        {
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("m/s2")]
          ms2,
        /// <summary>
        /// cms2 property
        /// </summary>
          [XmlEnum("cm/s2")]
          cms2,
        /// <summary>
        /// fts2 property
        /// </summary>
          [XmlEnum("ft/s2")]
          fts2,
        /// <summary>
        /// Gal property
        /// </summary>
          Gal,
        /// <summary>
        /// mgn property
        /// </summary>
          mgn,
        /// <summary>
        /// gn property
        /// </summary>
          gn,
        /// <summary>
        /// mGal property
        /// </summary>
          mGal
        }
        /// <summary>
        /// This class represents the ItemState xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemState xsd enumeration.")]
        public enum ItemState 
        {
        /// <summary>
        /// Actual data measured or entered at the well site.
        /// </summary>
          actual,
        /// <summary>
        /// Model data used for "what if" calculations.
        /// </summary>
          model,
        /// <summary>
        /// A planned object. That is, one which is expected to be executed in the future.
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PrimitiveType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PrimitiveType xsd enumeration.")]
        public enum PrimitiveType 
        {
        /// <summary>
        /// string property
        /// </summary>
          @string,
        /// <summary>
        /// boolean property
        /// </summary>
          boolean,
        /// <summary>
        /// float property
        /// </summary>
          @float,
        /// <summary>
        /// double property
        /// </summary>
          @double,
        /// <summary>
        /// duration property
        /// </summary>
          duration,
        /// <summary>
        /// dateTime property
        /// </summary>
          dateTime,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// date property
        /// </summary>
          date,
        /// <summary>
        /// gYearMonth property
        /// </summary>
          gYearMonth,
        /// <summary>
        /// gYear property
        /// </summary>
          gYear,
        /// <summary>
        /// gMonthDay property
        /// </summary>
          gMonthDay,
        /// <summary>
        /// gDay property
        /// </summary>
          gDay,
        /// <summary>
        /// gMonth property
        /// </summary>
          gMonth,
        /// <summary>
        /// base64Binary property
        /// </summary>
          base64Binary,
        /// <summary>
        /// anyURI property
        /// </summary>
          anyURI,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemsChoiceType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType xsd enumeration.")]
        public enum ItemsChoiceType 
        {
        /// <summary>
        /// easting property
        /// </summary>
          easting,
        /// <summary>
        /// latitude property
        /// </summary>
          latitude,
        /// <summary>
        /// localX property
        /// </summary>
          localX,
        /// <summary>
        /// localY property
        /// </summary>
          localY,
        /// <summary>
        /// longitude property
        /// </summary>
          longitude,
        /// <summary>
        /// northing property
        /// </summary>
          northing,
        /// <summary>
        /// projectedX property
        /// </summary>
          projectedX,
        /// <summary>
        /// projectedY property
        /// </summary>
          projectedY,
        /// <summary>
        /// southing property
        /// </summary>
          southing,
        /// <summary>
        /// westing property
        /// </summary>
          westing
        }
        /// <summary>
        /// This class represents the PrincipalMeridian xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PrincipalMeridian xsd enumeration.")]
        public enum PrincipalMeridian 
        {
        /// <summary>
        /// Item1stPrincipalMeridian property
        /// </summary>
          [XmlEnum("1st Principal Meridian")]
          Item1stPrincipalMeridian,
        /// <summary>
        /// Item2ndPrincipalMeridian property
        /// </summary>
          [XmlEnum("2nd Principal Meridian")]
          Item2ndPrincipalMeridian,
        /// <summary>
        /// Item3rdPrincipalMeridian property
        /// </summary>
          [XmlEnum("3rd Principal Meridian")]
          Item3rdPrincipalMeridian,
        /// <summary>
        /// Item4thPrincipalMeridian property
        /// </summary>
          [XmlEnum("4th Principal Meridian")]
          Item4thPrincipalMeridian,
        /// <summary>
        /// Item5thPrincipalMeridian property
        /// </summary>
          [XmlEnum("5th Principal Meridian")]
          Item5thPrincipalMeridian,
        /// <summary>
        /// Item6thPrincipalMeridian property
        /// </summary>
          [XmlEnum("6th Principal Meridian")]
          Item6thPrincipalMeridian,
        /// <summary>
        /// BlackHillsMeridian property
        /// </summary>
          [XmlEnum("Black Hills Meridian")]
          BlackHillsMeridian,
        /// <summary>
        /// BoiseMeridian property
        /// </summary>
          [XmlEnum("Boise Meridian")]
          BoiseMeridian,
        /// <summary>
        /// ChoctawMeridian property
        /// </summary>
          [XmlEnum("Choctaw Meridian")]
          ChoctawMeridian,
        /// <summary>
        /// ChickasawMeridian property
        /// </summary>
          [XmlEnum("Chickasaw Meridian")]
          ChickasawMeridian,
        /// <summary>
        /// CimarronMeridian property
        /// </summary>
          [XmlEnum("Cimarron Meridian")]
          CimarronMeridian,
        /// <summary>
        /// CopperRiverMeridian property
        /// </summary>
          [XmlEnum("Copper River Meridian")]
          CopperRiverMeridian,
        /// <summary>
        /// FairbanksMeridian property
        /// </summary>
          [XmlEnum("Fairbanks Meridian")]
          FairbanksMeridian,
        /// <summary>
        /// GilaandSaltRiverMeridian property
        /// </summary>
          [XmlEnum("Gila and Salt River Meridian")]
          GilaandSaltRiverMeridian,
        /// <summary>
        /// HumboldtMeridian property
        /// </summary>
          [XmlEnum("Humboldt Meridian")]
          HumboldtMeridian,
        /// <summary>
        /// HuntsvilleMeridian property
        /// </summary>
          [XmlEnum("Huntsville Meridian")]
          HuntsvilleMeridian,
        /// <summary>
        /// IndianMeridian property
        /// </summary>
          [XmlEnum("Indian Meridian")]
          IndianMeridian,
        /// <summary>
        /// KateelRiverMeridian property
        /// </summary>
          [XmlEnum("Kateel River Meridian")]
          KateelRiverMeridian,
        /// <summary>
        /// LousianaMeridian property
        /// </summary>
          [XmlEnum("Lousiana Meridian")]
          LousianaMeridian,
        /// <summary>
        /// MichiganMeridian property
        /// </summary>
          [XmlEnum("Michigan Meridian")]
          MichiganMeridian,
        /// <summary>
        /// MountDiabloMeridian property
        /// </summary>
          [XmlEnum("Mount Diablo Meridian")]
          MountDiabloMeridian,
        /// <summary>
        /// NewMexicoMeridian property
        /// </summary>
          [XmlEnum("New Mexico Meridian")]
          NewMexicoMeridian,
        /// <summary>
        /// SaintStephensMeridian property
        /// </summary>
          [XmlEnum("Saint Stephens Meridian")]
          SaintStephensMeridian,
        /// <summary>
        /// SaintHelenaMeridian property
        /// </summary>
          [XmlEnum("Saint Helena Meridian")]
          SaintHelenaMeridian,
        /// <summary>
        /// SaltLakeMeridian property
        /// </summary>
          [XmlEnum("Salt Lake Meridian")]
          SaltLakeMeridian,
        /// <summary>
        /// SanBernardoMeridian property
        /// </summary>
          [XmlEnum("San Bernardo Meridian")]
          SanBernardoMeridian,
        /// <summary>
        /// SewardMeridian property
        /// </summary>
          [XmlEnum("Seward Meridian")]
          SewardMeridian,
        /// <summary>
        /// TallahasseeMeridian property
        /// </summary>
          [XmlEnum("Tallahassee Meridian")]
          TallahasseeMeridian,
        /// <summary>
        /// UintahMeridian property
        /// </summary>
          [XmlEnum("Uintah Meridian")]
          UintahMeridian,
        /// <summary>
        /// UmiatMeridian property
        /// </summary>
          [XmlEnum("Umiat Meridian")]
          UmiatMeridian,
        /// <summary>
        /// UteMeridian property
        /// </summary>
          [XmlEnum("Ute Meridian")]
          UteMeridian,
        /// <summary>
        /// WashingtonMeridian property
        /// </summary>
          [XmlEnum("Washington Meridian")]
          WashingtonMeridian,
        /// <summary>
        /// WilliametteMeridian property
        /// </summary>
          [XmlEnum("Williamette Meridian")]
          WilliametteMeridian,
        /// <summary>
        /// WindRiverMeridian property
        /// </summary>
          [XmlEnum("Wind River Meridian")]
          WindRiverMeridian,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellFluid xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellFluid xsd enumeration.")]
        public enum WellFluid 
        {
        /// <summary>
        /// This is generally an injected fluid.
        /// </summary>
          air,
        /// <summary>
        /// Liquid hydrocarbons produced with natural gas that are separated from the gas by cooling and various other means. Condensate generally has an API gravity of 50 degrees to 120 degrees and is water white, straw, or bluish in color. It is the liquid recovery from a well classified as a gas well. It is generally dissolved in the gaseous state under reservoir conditions but separates as a liquid either in passing up the hole or at the surface. These hydrocarbons, from associated and nonassociated gas well gas, normally are recovered from lease separators or field facilities by mechanical separation.
        /// </summary>
          condensate,
        /// <summary>
        /// The well facility is classified as a dry well. It has not been, nor will it be used to produce or inject any fluids.
        /// </summary>
          dry,
        /// <summary>
        /// The well is classified as a gas well, producing or injecting a hydrocarbon gas. The gas is generally methane, but may have a mixture of other gases also.
        /// </summary>
          gas,
        /// <summary>
        /// gaswater property
        /// </summary>
          [XmlEnum("gas-water")]
          gaswater,
        /// <summary>
        /// nonHCgas property
        /// </summary>
          [XmlEnum("non HC gas")]
          nonHCgas,
        /// <summary>
        /// nonHCgasCO2 property
        /// </summary>
          [XmlEnum("non HC gas -- CO2")]
          nonHCgasCO2,
        /// <summary>
        /// The liquid hydrocarbon, generally referred to as crude oil.
        /// </summary>
          oil,
        /// <summary>
        /// oilgas property
        /// </summary>
          [XmlEnum("oil-gas")]
          oilgas,
        /// <summary>
        /// oilwater property
        /// </summary>
          [XmlEnum("oil-water")]
          oilwater,
        /// <summary>
        /// The gaseous state of water. This is generally an injected fluid, but it is possible that some hydrothermal wells produce steam.
        /// </summary>
          steam,
        /// <summary>
        /// The well is classified as a water well without distinguishing between brine or fresh water.
        /// </summary>
          water,
        /// <summary>
        /// waterbrine property
        /// </summary>
          [XmlEnum("water -- brine")]
          waterbrine,
        /// <summary>
        /// waterfreshwater property
        /// </summary>
          [XmlEnum("water -- fresh water")]
          waterfreshwater,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellDirection xsd enumeration.")]
        public enum WellDirection 
        {
        /// <summary>
        /// huffnpuff property
        /// </summary>
          [XmlEnum("huff-n-puff")]
          huffnpuff,
        /// <summary>
        /// The well facility is injecting fluids into the subsurface.
        /// </summary>
          injector,
        /// <summary>
        /// The well facility is producing fluids from the subsurface.
        /// </summary>
          producer,
        /// <summary>
        /// The flow direction of the fluids is variable, but not on a regular basis as is the case with the huff-n-puff flow.
        /// </summary>
          uncertain,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ElevCodeEnum xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ElevCodeEnum xsd enumeration.")]
        public enum ElevCodeEnum 
        {
        /// <summary>
        /// casing flange: A flange affixed to the top of the casing string used to attach production equipment.
        /// </summary>
          CF,
        /// <summary>
        /// crown valve
        /// </summary>
          CV,
        /// <summary>
        /// derrick floor
        /// </summary>
          DF,
        /// <summary>
        /// ground level
        /// </summary>
          GL,
        /// <summary>
        /// kelly bushing
        /// </summary>
          KB,
        /// <summary>
        /// rotary bushing
        /// </summary>
          RB,
        /// <summary>
        /// rotary table
        /// </summary>
          RT,
        /// <summary>
        /// sea floor
        /// </summary>
          SF,
        /// <summary>
        /// Lowest Astronomical Tide. The lowest tide level over the duration of the National Tidal Datum Epoch (19 years).
        /// </summary>
          LAT,
        /// <summary>
        /// Mean Sea Level - A tidal datum. The arithmetic mean of hourly heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          SL,
        /// <summary>
        /// Mean Higher High Water - A tidal datum. The average of the higher high water height of each tidal day observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHHW,
        /// <summary>
        /// Mean High Water - A tidal datum. The average of all the high water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHW,
        /// <summary>
        /// Mean Lower Low Water - A tidal datum. The average of the lower low water height of each tidal day observed over the National Tidal Datum Epoch (19 years ).
        /// </summary>
          MLLW,
        /// <summary>
        /// Mean Low Water - A tidal datum. The average of all the low water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MLW,
        /// <summary>
        /// Mean Tide Level - A tidal datum. The arithmetic mean of mean high water and mean low water. Same as half-tide level.
        /// </summary>
          MTL,
        /// <summary>
        /// kickoff point
        /// </summary>
          KO,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the GeodeticDatum xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GeodeticDatum xsd enumeration.")]
        public enum GeodeticDatum 
        {
        /// <summary>
        /// Adindian ellipsoid=CL80 region="Sudan, Ethiopia"
        /// </summary>
          ADND,
        /// <summary>
        /// ARC 1950 ellipsoid=CL80B region="Southern Africa"
        /// </summary>
          ARC50,
        /// <summary>
        /// Australian ellipsoid=GRS67 region="Australia Geodetic"
        /// </summary>
          AUSG,
        /// <summary>
        /// Camp Area Astro ellipsoid=INT24 region=Antarctica 
        /// </summary>
          CAA,
        /// <summary>
        /// Chau Astro ellipsoid=INT24 region=Paraguay 
        /// </summary>
          CHAS,
        /// <summary>
        /// Corrego Alegre ellipsoid=INT24 region=INT24 
        /// </summary>
          CORAL,
        /// <summary>
        /// European 1950 ellipsoid=INT24 region="Europe, Middle East, North Africa"
        /// </summary>
          ED50,
        /// <summary>
        /// European 1987 ellipsoid=INT24 region="Europe, Middle East, North Africa"
        /// </summary>
          ED87,
        /// <summary>
        /// Ireland 1965 ellipsoid=AIRY_MOD region=Ireland 
        /// </summary>
          ERIN65,
        /// <summary>
        /// Geodetic Datum 1949 ellipsoid=INT24 region="New Zealand"
        /// </summary>
          GD49,
        /// <summary>
        /// Ghana ellipsoid=WAR24 region=Ghana 
        /// </summary>
          GHANA,
        /// <summary>
        /// Guam 1963 ellipsoid=CL66 region="Marianas Islands"
        /// </summary>
          GUAM63,
        /// <summary>
        /// Hjorsey 1955 ellipsoid=INT24 region=Iceland 
        /// </summary>
          HJRS55,
        /// <summary>
        /// Hu-Tzu-Shan ellipsoid=INT24 region=Taiwan 
        /// </summary>
          HTS,
        /// <summary>
        /// Campo Inchauspe ellipsoid=INT24 region=Argentina 
        /// </summary>
          INCH,
        /// <summary>
        /// Indian 'Kalimpur' ellipsoid=EVER region=India 
        /// </summary>
          INDIA1,
        /// <summary>
        /// Indian 'Kalimpur' ellipsoid=INT24 region=India 
        /// </summary>
          INDIA2,
        /// <summary>
        /// Indonesia 1974 ellipsoid=GRS67 region=Indonesia 
        /// </summary>
          INDNS74,
        /// <summary>
        /// Liberia 1964 ellipsoid=CL80 region=Liberia 
        /// </summary>
          LIB64,
        /// <summary>
        /// Luzon ellipsoid=CL66 region=Philippines 
        /// </summary>
          LUZON,
        /// <summary>
        /// Merchich ellipsoid=CL80A region=Morocco 
        /// </summary>
          MRCH,
        /// <summary>
        /// North American 'Meades Ranch' ellipsoid=CL66 region="North America"
        /// </summary>
          NAD27,
        /// <summary>
        /// North American Datum of 1983 ellipsoid=GRS80 region="Canada, Cuba, U.S., Caribbean"
        /// </summary>
          NAD83,
        /// <summary>
        /// Nigeria ellipsoid=CL80 region=Nigeria 
        /// </summary>
          NGRA,
        /// <summary>
        /// 
        /// </summary>
          None,
        /// <summary>
        /// Naparima ellipsoid=INT24 region="Trinidad and Tobago"
        /// </summary>
          NPRM,
        /// <summary>
        /// Ordnance Survey of Great Britain 1936 ellipsoid=AIRY region="Great Britain, Northern Ireland"
        /// </summary>
          OSGB36,
        /// <summary>
        /// European 'Pelmert Tower, Potsdam' ellipsoid=INT24 region="Most of Eurasia, Africa"
        /// </summary>
          POTS1,
        /// <summary>
        /// Russian 'Pulkovo' ellipsoid=BESS41 
        /// </summary>
          PULK1,
        /// <summary>
        /// Russian 'Pulkovo' ellipsoid=KRSV 
        /// </summary>
          PULK2,
        /// <summary>
        /// Qornoq ellipsoid=INT24 region=Greenland 
        /// </summary>
          QRNQ,
        /// <summary>
        /// Provisional South American, 1956 ellipsoid=INT24 region="Bolivia, Chile, Colombia, Ecuador, Peru, Venezuela, the Guianas"
        /// </summary>
          SA56,
        /// <summary>
        /// Sierra Leone 1960 ellipsoid=CL80 region="Sierra Leone"
        /// </summary>
          SRL60,
        /// <summary>
        /// Tananarive (Antananarivo) Obsv. 1925T ellipsoid=INT24 region="Malagasy Republic"
        /// </summary>
          TNRV25,
        /// <summary>
        /// Tokyo ellipsoid=BESS41 region=Japan
        /// </summary>
          TOKYO,
        /// <summary>
        /// Datum defined elsewhere
        /// </summary>
          UserDefined,
        /// <summary>
        /// Voirol ellipsoid=CL80 region="Algeria, Tunisia"
        /// </summary>
          VROL,
        /// <summary>
        /// World Geodetic System 1972 ellipsoid=WGS72
        /// </summary>
          WGS72,
        /// <summary>
        /// World Geodetic System 1984 ellipsoid=WGS84 region="Sino-Soviet Bloc, SW Asia, Hydrographic, Aeronautical"
        /// </summary>
          WGS84,
        /// <summary>
        /// Yacare ellipsoid=INT24 region=Uruguay
        /// </summary>
          YACR,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Ellipsoid xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Ellipsoid xsd enumeration.")]
        public enum Ellipsoid 
        {
        /// <summary>
        /// Australian Old
        /// </summary>
          AGD66,
        /// <summary>
        /// Modified Airy
        /// </summary>
          AIRY_MOD,
        /// <summary>
        /// Airy 1830
        /// </summary>
          AIRY30,
        /// <summary>
        /// Airy 1849
        /// </summary>
          AIRY49,
        /// <summary>
        /// Australian National Same as KAU63 and SA69
        /// </summary>
          AUST_NAT,
        /// <summary>
        /// BESLDHD property
        /// </summary>
          [XmlEnum("BESL-DHD")]
          BESLDHD,
        /// <summary>
        /// BESLNGL property
        /// </summary>
          [XmlEnum("BESL-NGL")]
          BESLNGL,
        /// <summary>
        /// BESLRT9 property
        /// </summary>
          [XmlEnum("BESL-RT9")]
          BESLRT9,
        /// <summary>
        /// Bessel 1841
        /// </summary>
          BESS41,
        /// <summary>
        /// Bessel 1841 for Namibia
        /// </summary>
          BESSNAM,
        /// <summary>
        /// BOGOTA (International 1924)
        /// </summary>
          BOGOTA,
        /// <summary>
        /// Clarke 1858
        /// </summary>
          CL58,
        /// <summary>
        /// CL581 property
        /// </summary>
          [XmlEnum("CL58-1")]
          CL581,
        /// <summary>
        /// Clarke 1866
        /// </summary>
          CL66,
        /// <summary>
        /// CL66M property
        /// </summary>
          [XmlEnum("CL66-M")]
          CL66M,
        /// <summary>
        /// Clarke 1880
        /// </summary>
          CL80,
        /// <summary>
        /// CL80A property
        /// </summary>
          [XmlEnum("CL80-A")]
          CL80A,
        /// <summary>
        /// CL80B property
        /// </summary>
          [XmlEnum("CL80-B")]
          CL80B,
        /// <summary>
        /// CL80I property
        /// </summary>
          [XmlEnum("CL80-I")]
          CL80I,
        /// <summary>
        /// CL80J property
        /// </summary>
          [XmlEnum("CL80-J")]
          CL80J,
        /// <summary>
        /// CL80M property
        /// </summary>
          [XmlEnum("CL80-M")]
          CL80M,
        /// <summary>
        /// CL80P property
        /// </summary>
          [XmlEnum("CL80-P")]
          CL80P,
        /// <summary>
        /// CAMPO INCH (International 1924)
        /// </summary>
          CMPOINCH,
        /// <summary>
        /// Danish
        /// </summary>
          DAN,
        /// <summary>
        /// DELAMBRE 1810 
        /// </summary>
          DELA,
        /// <summary>
        /// ED50 (International 1924)
        /// </summary>
          ED50,
        /// <summary>
        /// EGYPT07 (Helmert 1906)
        /// </summary>
          EGYPT07,
        /// <summary>
        /// Everest 1830 - Indian
        /// </summary>
          EVER,
        /// <summary>
        /// Everest 1948
        /// </summary>
          EVER48,
        /// <summary>
        /// Everest 1956
        /// </summary>
          EVER56,
        /// <summary>
        /// Everest 1969
        /// </summary>
          EVER69,
        /// <summary>
        /// EVERBR property
        /// </summary>
          [XmlEnum("EVER-BR")]
          EVERBR,
        /// <summary>
        /// Modified Everest
        /// </summary>
          EVERMOD,
        /// <summary>
        /// EVERP property
        /// </summary>
          [XmlEnum("EVER-P")]
          EVERP,
        /// <summary>
        /// EVERTM property
        /// </summary>
          [XmlEnum("EVER-TM")]
          EVERTM,
        /// <summary>
        /// Everest - Timbali 
        /// </summary>
          EVTM,
        /// <summary>
        /// "Fischer 1960 aka ""Mercury"""
        /// </summary>
          FISC60,
        /// <summary>
        /// Fischer 1960 Modified
        /// </summary>
          FISC60MOD,
        /// <summary>
        /// "Fischer 1968 aka ""Modified Mercury"""
        /// </summary>
          FISC68,
        /// <summary>
        /// "Modified Fischer 1960 aka ""South Asia"""
        /// </summary>
          FISCMOD,
        /// <summary>
        /// GDA94 - Australia
        /// </summary>
          GDA94,
        /// <summary>
        /// Geodetic Reference System 1967
        /// </summary>
          GRS67,
        /// <summary>
        /// Geodetic Reference System 1980
        /// </summary>
          GRS80,
        /// <summary>
        /// Hayford 1909
        /// </summary>
          HAY09,
        /// <summary>
        /// Heiskanen 1929
        /// </summary>
          HEIS,
        /// <summary>
        /// Helmert 1906
        /// </summary>
          HEL06,
        /// <summary>
        /// Helmert 1907 
        /// </summary>
          HEL07,
        /// <summary>
        /// Hough 1956 
        /// </summary>
          HOUG,
        /// <summary>
        /// IAG75 property
        /// </summary>
          [XmlEnum("IAG-75")]
          IAG75,
        /// <summary>
        /// INDIAN75 (Everest 1930)
        /// </summary>
          INDIAN75,
        /// <summary>
        /// INDO74 property
        /// </summary>
          [XmlEnum("INDO-74")]
          INDO74,
        /// <summary>
        /// International 1924
        /// </summary>
          INT24,
        /// <summary>
        /// IUGG 1967
        /// </summary>
          IUGG67,
        /// <summary>
        /// IUGG 1975
        /// </summary>
          IUGG75,
        /// <summary>
        /// Jeffreys 1948
        /// </summary>
          JEFF48,
        /// <summary>
        /// Kaula 1963 Same as AUST_NAT and SA69
        /// </summary>
          KAU63,
        /// <summary>
        /// Krassovsky
        /// </summary>
          KRSV,
        /// <summary>
        /// MERIT83
        /// </summary>
          MERIT83,
        /// <summary>
        /// NAD27 (Clarke 1866)
        /// </summary>
          NAD27,
        /// <summary>
        /// NAHRAN (Clarke 1880)
        /// </summary>
          NAHRAN,
        /// <summary>
        /// New International 1967
        /// </summary>
          NEWINT67,
        /// <summary>
        /// NWL10D property
        /// </summary>
          [XmlEnum("NWL-10D")]
          NWL10D,
        /// <summary>
        /// NWL9D property
        /// </summary>
          [XmlEnum("NWL-9D")]
          NWL9D,
        /// <summary>
        /// OSGB36 (Airy 1830)
        /// </summary>
          OSGB36,
        /// <summary>
        /// OSU86F
        /// </summary>
          OSU86F,
        /// <summary>
        /// OSU91A
        /// </summary>
          OSU91A,
        /// <summary>
        /// PLESSIS1817 property
        /// </summary>
          [XmlEnum("PLESSIS-1817")]
          PLESSIS1817,
        /// <summary>
        /// PSAD56 (International 1924)
        /// </summary>
          PSAD56,
        /// <summary>
        /// Pointe Noire 1948
        /// </summary>
          PTNOIRE,
        /// <summary>
        /// South American 1969
        /// </summary>
          SA69,
        /// <summary>
        /// Sphere of radius 6370997
        /// </summary>
          SPHR,
        /// <summary>
        /// Struve 1860
        /// </summary>
          STRU,
        /// <summary>
        /// Walbeck
        /// </summary>
          WALB,
        /// <summary>
        /// War Office 1924
        /// </summary>
          WAR24,
        /// <summary>
        /// World Geodetic System 1960
        /// </summary>
          WGS60,
        /// <summary>
        /// World Geodetic System 1966
        /// </summary>
          WGS66,
        /// <summary>
        /// World Geodetic System 1972
        /// </summary>
          WGS72,
        /// <summary>
        /// World Geodetic System 1984
        /// </summary>
          WGS84,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Projection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Projection xsd enumeration.")]
        public enum Projection 
        {
        /// <summary>
        /// Albersequalarea property
        /// </summary>
          [XmlEnum("Albers equal area")]
          Albersequalarea,
        /// <summary>
        /// azimuthalequidistant property
        /// </summary>
          [XmlEnum("azimuthal equidistant")]
          azimuthalequidistant,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-CASSINI
        /// </summary>
          Cassini,
        /// <summary>
        /// equidistantconic property
        /// </summary>
          [XmlEnum("equidistant conic")]
          equidistantconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-EQUIRECTANGULAR
        /// </summary>
          equirectangular,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-GNOMONIC
        /// </summary>
          gnomonic,
        /// <summary>
        /// Lambertazimuthal property
        /// </summary>
          [XmlEnum("Lambert azimuthal")]
          Lambertazimuthal,
        /// <summary>
        /// Lambertconformalconic property
        /// </summary>
          [XmlEnum("Lambert conformal conic")]
          Lambertconformalconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-MERCATOR
        /// </summary>
          Mercator,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-MILLER
        /// </summary>
          Miller,
        /// <summary>
        /// obliqueMercator property
        /// </summary>
          [XmlEnum("oblique Mercator")]
          obliqueMercator,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-ORTHO
        /// </summary>
          orthographic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-PERSPECTIVE
        /// </summary>
          perspective,
        /// <summary>
        /// polarstereographic property
        /// </summary>
          [XmlEnum("polar stereographic")]
          polarstereographic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-POLYCONIC
        /// </summary>
          polyconic,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-SINUSOIDAL
        /// </summary>
          sinusoidal,
        /// <summary>
        /// stateplane property
        /// </summary>
          [XmlEnum("state plane")]
          stateplane,
        /// <summary>
        /// 217-PARAMETERS-PROJECTION-STEREO
        /// </summary>
          stereographic,
        /// <summary>
        /// transverseMercator property
        /// </summary>
          [XmlEnum("transverse Mercator")]
          transverseMercator,
        /// <summary>
        /// universaltransverseMercator property
        /// </summary>
          [XmlEnum("universal transverse Mercator")]
          universaltransverseMercator,
        /// <summary>
        /// userdefined property
        /// </summary>
          [XmlEnum("user defined")]
          userdefined,
        /// <summary>
        /// VanderGrinten property
        /// </summary>
          [XmlEnum("Van der Grinten")]
          VanderGrinten,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ProjectionVariantsObliqueMercator xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ProjectionVariantsObliqueMercator xsd enumeration.")]
        public enum ProjectionVariantsObliqueMercator 
        {
        /// <summary>
        /// 
        /// </summary>
          @default,
        /// <summary>
        /// 
        /// </summary>
          rectified,
        /// <summary>
        /// rectifiedskew property
        /// </summary>
          [XmlEnum("rectified skew")]
          rectifiedskew,
        /// <summary>
        /// rectifiedskewcenterorigin property
        /// </summary>
          [XmlEnum("rectified skew center origin")]
          rectifiedskewcenterorigin,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NADTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the NADTypes xsd enumeration.")]
        public enum NADTypeList 
        {
        /// <summary>
        /// 
        /// </summary>
          NAD27,
        /// <summary>
        /// 
        /// </summary>
          NAD83,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the Hemispheres xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Hemispheres xsd enumeration.")]
        public enum HemisphereList 
        {
        /// <summary>
        /// Northern hemisphere.
        /// </summary>
          northern,
        /// <summary>
        /// Southern hemisphere.
        /// </summary>
          southern,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemChoiceType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType xsd enumeration.")]
        public enum ItemChoiceType 
        {
        /// <summary>
        /// geodeticCRS property
        /// </summary>
          geodeticCRS,
        /// <summary>
        /// geographic property
        /// </summary>
          geographic,
        /// <summary>
        /// localCRS property
        /// </summary>
          localCRS,
        /// <summary>
        /// mapProjection property
        /// </summary>
          mapProjection,
        /// <summary>
        /// mapProjectionCRS property
        /// </summary>
          mapProjectionCRS
        }
        /// <summary>
        /// This class represents the HoleCasingType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the HoleCasingType xsd enumeration.")]
        public enum HoleCasingType 
        {
        /// <summary>
        /// blowoutpreventer property
        /// </summary>
          [XmlEnum("blow out preventer")]
          blowoutpreventer,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// 
        /// </summary>
          conductor,
        /// <summary>
        /// curvedconductor property
        /// </summary>
          [XmlEnum("curved conductor")]
          curvedconductor,
        /// <summary>
        /// 
        /// </summary>
          liner,
        /// <summary>
        /// openhole property
        /// </summary>
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// 
        /// </summary>
          riser,
        /// <summary>
        /// 
        /// </summary>
          tubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DeflectionMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DeflectionMethod xsd enumeration.")]
        public enum DeflectionMethod 
        {
        /// <summary>
        /// pointbit property
        /// </summary>
          [XmlEnum("point bit")]
          pointbit,
        /// <summary>
        /// pushbit property
        /// </summary>
          [XmlEnum("push bit")]
          pushbit
        }
        /// <summary>
        /// This class represents the MeasurementType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MeasurementType xsd enumeration.")]
        public enum MeasurementType 
        {
        /// <summary>
        /// Output from an accelerometer on a logging tool.
        /// </summary>
          acceleration,
        /// <summary>
        /// acousticcaliper property
        /// </summary>
          [XmlEnum("acoustic caliper")]
          acousticcaliper,
        /// <summary>
        /// acousticcasingcollarlocator property
        /// </summary>
          [XmlEnum("acoustic casing collar locator")]
          acousticcasingcollarlocator,
        /// <summary>
        /// acousticimpedance property
        /// </summary>
          [XmlEnum("acoustic impedance")]
          acousticimpedance,
        /// <summary>
        /// acousticporosity property
        /// </summary>
          [XmlEnum("acoustic porosity")]
          acousticporosity,
        /// <summary>
        /// acousticvelocity property
        /// </summary>
          [XmlEnum("acoustic velocity")]
          acousticvelocity,
        /// <summary>
        /// acousticwavematrixtraveltime property
        /// </summary>
          [XmlEnum("acoustic wave matrix travel time")]
          acousticwavematrixtraveltime,
        /// <summary>
        /// acousticwavetraveltime property
        /// </summary>
          [XmlEnum("acoustic wave travel time")]
          acousticwavetraveltime,
        /// <summary>
        /// Any measurement of the maximum departure of a wave from an average value.
        /// </summary>
          amplitude,
        /// <summary>
        /// amplitudeofacousticwave property
        /// </summary>
          [XmlEnum("amplitude of acoustic wave")]
          amplitudeofacousticwave,
        /// <summary>
        /// amplitudeofEMwave property
        /// </summary>
          [XmlEnum("amplitude of E-M wave")]
          amplitudeofEMwave,
        /// <summary>
        /// amplituderatio property
        /// </summary>
          [XmlEnum("amplitude ratio")]
          amplituderatio,
        /// <summary>
        /// A particular extent of space or surface.
        /// </summary>
          area,
        /// <summary>
        /// The amount of reduction in the amplitude of a wave.
        /// </summary>
          attenuation,
        /// <summary>
        /// attenuationofacousticwave property
        /// </summary>
          [XmlEnum("attenuation of acoustic wave")]
          attenuationofacousticwave,
        /// <summary>
        /// attenuationofEMwave property
        /// </summary>
          [XmlEnum("attenuation of E-M wave")]
          attenuationofEMwave,
        /// <summary>
        /// A general classification for measurements which are very specialized and not normally accessed by petrophysicists.
        /// </summary>
          auxiliary,
        /// <summary>
        /// averageporosity property
        /// </summary>
          [XmlEnum("average porosity")]
          averageporosity,
        /// <summary>
        /// In the horizontal plane, it is the clockwise angle of departure from magnetic north (while looking down hole).
        /// </summary>
          azimuth,
        /// <summary>
        /// baritemudcorrection property
        /// </summary>
          [XmlEnum("barite mud correction")]
          baritemudcorrection,
        /// <summary>
        /// bedthicknesscorrection property
        /// </summary>
          [XmlEnum("bed thickness correction")]
          bedthicknesscorrection,
        /// <summary>
        /// bitsize property
        /// </summary>
          [XmlEnum("bit size")]
          bitsize,
        /// <summary>
        /// A well log trace which has been edited to reflect sharp bed boundaries. The trace has a square wave appearance.
        /// </summary>
          blocked,
        /// <summary>
        /// boreholeenvironmentcorrection property
        /// </summary>
          [XmlEnum("borehole environment correction")]
          boreholeenvironmentcorrection,
        /// <summary>
        /// boreholefluidcompositioncorrection property
        /// </summary>
          [XmlEnum("borehole fluid composition correction")]
          boreholefluidcompositioncorrection,
        /// <summary>
        /// boreholefluidcorrection property
        /// </summary>
          [XmlEnum("borehole fluid correction")]
          boreholefluidcorrection,
        /// <summary>
        /// boreholesizecorrection property
        /// </summary>
          [XmlEnum("borehole size correction")]
          boreholesizecorrection,
        /// <summary>
        /// bromidemudcorrection property
        /// </summary>
          [XmlEnum("bromide mud correction")]
          bromidemudcorrection,
        /// <summary>
        /// bulkcompressibility property
        /// </summary>
          [XmlEnum("bulk compressibility")]
          bulkcompressibility,
        /// <summary>
        /// bulkdensity property
        /// </summary>
          [XmlEnum("bulk density")]
          bulkdensity,
        /// <summary>
        /// bulkvolume property
        /// </summary>
          [XmlEnum("bulk volume")]
          bulkvolume,
        /// <summary>
        /// bulkvolumegas property
        /// </summary>
          [XmlEnum("bulk volume gas")]
          bulkvolumegas,
        /// <summary>
        /// bulkvolumehydrocarbon property
        /// </summary>
          [XmlEnum("bulk volume hydrocarbon")]
          bulkvolumehydrocarbon,
        /// <summary>
        /// bulkvolumeoil property
        /// </summary>
          [XmlEnum("bulk volume oil")]
          bulkvolumeoil,
        /// <summary>
        /// bulkvolumewater property
        /// </summary>
          [XmlEnum("bulk volume water")]
          bulkvolumewater,
        /// <summary>
        /// COratio property
        /// </summary>
          [XmlEnum("C/O ratio")]
          COratio,
        /// <summary>
        /// A well log used to record hole diameter (open or cased).
        /// </summary>
          caliper,
        /// <summary>
        /// casedholecorrection property
        /// </summary>
          [XmlEnum("cased hole correction")]
          casedholecorrection,
        /// <summary>
        /// casingcollarlocator property
        /// </summary>
          [XmlEnum("casing collar locator")]
          casingcollarlocator,
        /// <summary>
        /// casingcorrection property
        /// </summary>
          [XmlEnum("casing correction")]
          casingcorrection,
        /// <summary>
        /// casingdiametercorrection property
        /// </summary>
          [XmlEnum("casing diameter correction")]
          casingdiametercorrection,
        /// <summary>
        /// casinginspection property
        /// </summary>
          [XmlEnum("casing inspection")]
          casinginspection,
        /// <summary>
        /// casingthicknesscorrection property
        /// </summary>
          [XmlEnum("casing thickness correction")]
          casingthicknesscorrection,
        /// <summary>
        /// casingweightcorrection property
        /// </summary>
          [XmlEnum("casing weight correction")]
          casingweightcorrection,
        /// <summary>
        /// cementcorrection property
        /// </summary>
          [XmlEnum("cement correction")]
          cementcorrection,
        /// <summary>
        /// cementdensitycorrection property
        /// </summary>
          [XmlEnum("cement density correction")]
          cementdensitycorrection,
        /// <summary>
        /// cementevaluation property
        /// </summary>
          [XmlEnum("cement evaluation")]
          cementevaluation,
        /// <summary>
        /// cementthicknesscorrection property
        /// </summary>
          [XmlEnum("cement thickness correction")]
          cementthicknesscorrection,
        /// <summary>
        /// cementtypecorrection property
        /// </summary>
          [XmlEnum("cement type correction")]
          cementtypecorrection,
        /// <summary>
        /// CHdensityporosity property
        /// </summary>
          [XmlEnum("CH density porosity")]
          CHdensityporosity,
        /// <summary>
        /// CHdolomitedensityporosity property
        /// </summary>
          [XmlEnum("CH dolomite density porosity")]
          CHdolomitedensityporosity,
        /// <summary>
        /// CHdolomiteneutronporosity property
        /// </summary>
          [XmlEnum("CH dolomite neutron porosity")]
          CHdolomiteneutronporosity,
        /// <summary>
        /// CHlimestonedensityporosity property
        /// </summary>
          [XmlEnum("CH limestone density porosity")]
          CHlimestonedensityporosity,
        /// <summary>
        /// CHlimestoneneutronporosity property
        /// </summary>
          [XmlEnum("CH limestone neutron porosity")]
          CHlimestoneneutronporosity,
        /// <summary>
        /// CHneutronporosity property
        /// </summary>
          [XmlEnum("CH neutron porosity")]
          CHneutronporosity,
        /// <summary>
        /// CHsandstonedensityporosity property
        /// </summary>
          [XmlEnum("CH sandstone density porosity")]
          CHsandstonedensityporosity,
        /// <summary>
        /// CHsandstoneneutronporosity property
        /// </summary>
          [XmlEnum("CH sandstone neutron porosity")]
          CHsandstoneneutronporosity,
        /// <summary>
        /// compressionalwavedolomiteporosity property
        /// </summary>
          [XmlEnum("compressional wave dolomite porosity")]
          compressionalwavedolomiteporosity,
        /// <summary>
        /// compressionalwavelimestoneporosity property
        /// </summary>
          [XmlEnum("compressional wave limestone porosity")]
          compressionalwavelimestoneporosity,
        /// <summary>
        /// compressionalwavematrixtraveltime property
        /// </summary>
          [XmlEnum("compressional wave matrix travel time")]
          compressionalwavematrixtraveltime,
        /// <summary>
        /// compressionalwavesandstoneporosity property
        /// </summary>
          [XmlEnum("compressional wave sandstone porosity")]
          compressionalwavesandstoneporosity,
        /// <summary>
        /// compressionalwavetraveltime property
        /// </summary>
          [XmlEnum("compressional wave travel time")]
          compressionalwavetraveltime,
        /// <summary>
        /// The property of a medium (solid or fluid) which allows the medium to conduct a form of energy; e.g., electrical conductivity or thermal conductivity.
        /// </summary>
          conductivity,
        /// <summary>
        /// conductivityfromattenuation property
        /// </summary>
          [XmlEnum("conductivity from attenuation")]
          conductivityfromattenuation,
        /// <summary>
        /// conductivityfromphaseshift property
        /// </summary>
          [XmlEnum("conductivity from phase shift")]
          conductivityfromphaseshift,
        /// <summary>
        /// connatewaterconductivity property
        /// </summary>
          [XmlEnum("connate water conductivity")]
          connatewaterconductivity,
        /// <summary>
        /// connatewaterresistivity property
        /// </summary>
          [XmlEnum("connate water resistivity")]
          connatewaterresistivity,
        /// <summary>
        /// conventionalcoreporosity property
        /// </summary>
          [XmlEnum("conventional core porosity")]
          conventionalcoreporosity,
        /// <summary>
        /// corematrixdensity property
        /// </summary>
          [XmlEnum("core matrix density")]
          corematrixdensity,
        /// <summary>
        /// corepermeability property
        /// </summary>
          [XmlEnum("core permeability")]
          corepermeability,
        /// <summary>
        /// coreporosity property
        /// </summary>
          [XmlEnum("core porosity")]
          coreporosity,
        /// <summary>
        /// A trace which has had corrections applied; e.g. environmental corrections.
        /// </summary>
          corrected,
        /// <summary>
        /// countrate property
        /// </summary>
          [XmlEnum("count rate")]
          countrate,
        /// <summary>
        /// countrateratio property
        /// </summary>
          [XmlEnum("count rate ratio")]
          countrateratio,
        /// <summary>
        /// crossplotporosity property
        /// </summary>
          [XmlEnum("cross plot porosity")]
          crossplotporosity,
        /// <summary>
        /// decaytime property
        /// </summary>
          [XmlEnum("decay time")]
          decaytime,
        /// <summary>
        /// deepconductivity property
        /// </summary>
          [XmlEnum("deep conductivity")]
          deepconductivity,
        /// <summary>
        /// deepinductionconductivity property
        /// </summary>
          [XmlEnum("deep induction conductivity")]
          deepinductionconductivity,
        /// <summary>
        /// deepinductionresistivity property
        /// </summary>
          [XmlEnum("deep induction resistivity")]
          deepinductionresistivity,
        /// <summary>
        /// deeplaterologconductivity property
        /// </summary>
          [XmlEnum("deep laterolog conductivity")]
          deeplaterologconductivity,
        /// <summary>
        /// deeplaterologresistivity property
        /// </summary>
          [XmlEnum("deep laterolog resistivity")]
          deeplaterologresistivity,
        /// <summary>
        /// deepresistivity property
        /// </summary>
          [XmlEnum("deep resistivity")]
          deepresistivity,
        /// <summary>
        /// Mass per unit Volume - well logging units are usually gm/cc.
        /// </summary>
          density,
        /// <summary>
        /// densityporosity property
        /// </summary>
          [XmlEnum("density porosity")]
          densityporosity,
        /// <summary>
        /// The distance to a point in a wellbore.
        /// </summary>
          depth,
        /// <summary>
        /// depthadjusted property
        /// </summary>
          [XmlEnum("depth adjusted")]
          depthadjusted,
        /// <summary>
        /// depthderivedfromvelocity property
        /// </summary>
          [XmlEnum("depth derived from velocity")]
          depthderivedfromvelocity,
        /// <summary>
        /// Departure of a borehole from vertical. Also, the angle measured between the tool axis and vertical.
        /// </summary>
          deviation,
        /// <summary>
        /// Relative permittivity.
        /// </summary>
          dielectric,
        /// <summary>
        /// diffusioncorrection property
        /// </summary>
          [XmlEnum("diffusion correction")]
          diffusioncorrection,
        /// <summary>
        /// The angle that a structural surface, e.g. a bedding or fault plane, makes with the horizontal, measured perpendicular to the strike of the structure.
        /// </summary>
          dip,
        /// <summary>
        /// Any of a number of measurements produced by a tool designed to measure formation dip and borehole characteristics through direct and indirect measurements.
        /// </summary>
          dipmeter,
        /// <summary>
        /// dipmeterconductivity property
        /// </summary>
          [XmlEnum("dipmeter conductivity")]
          dipmeterconductivity,
        /// <summary>
        /// dipmeterresistivity property
        /// </summary>
          [XmlEnum("dipmeter resistivity")]
          dipmeterresistivity,
        /// <summary>
        /// dolomiteacousticporosity property
        /// </summary>
          [XmlEnum("dolomite acoustic porosity")]
          dolomiteacousticporosity,
        /// <summary>
        /// dolomitedensityporosity property
        /// </summary>
          [XmlEnum("dolomite density porosity")]
          dolomitedensityporosity,
        /// <summary>
        /// dolomiteneutronporosity property
        /// </summary>
          [XmlEnum("dolomite neutron porosity")]
          dolomiteneutronporosity,
        /// <summary>
        /// A well log trace which has been corrected or adjusted through an editing process.
        /// </summary>
          edited,
        /// <summary>
        /// effectiveporosity property
        /// </summary>
          [XmlEnum("effective porosity")]
          effectiveporosity,
        /// <summary>
        /// electriccurrent property
        /// </summary>
          [XmlEnum("electric current")]
          electriccurrent,
        /// <summary>
        /// electricpotential property
        /// </summary>
          [XmlEnum("electric potential")]
          electricpotential,
        /// <summary>
        /// electromagneticwavematrixtraveltime property
        /// </summary>
          [XmlEnum("electromagnetic wave matrix travel time")]
          electromagneticwavematrixtraveltime,
        /// <summary>
        /// electromagneticwavetraveltime property
        /// </summary>
          [XmlEnum("electromagnetic wave travel time")]
          electromagneticwavetraveltime,
        /// <summary>
        /// The elemental composition, generally in weight percent, of a formation as calculated from information obtained from a geochemical logging pass; e.g., weight percent of Al, Si, Ca, Fe, etc.
        /// </summary>
          element,
        /// <summary>
        /// elementalratio property
        /// </summary>
          [XmlEnum("elemental ratio")]
          elementalratio,
        /// <summary>
        /// A well log trace which has been filtered to improve its value; e.g. inverse filtering for better resolution.
        /// </summary>
          enhanced,
        /// <summary>
        /// A well log trace which has had a filter applied to it.
        /// </summary>
          filtered,
        /// <summary>
        /// A logging tool to measure the rate and/or direction of fluid flow in a wellbore.
        /// </summary>
          flowmeter,
        /// <summary>
        /// fluiddensity property
        /// </summary>
          [XmlEnum("fluid density")]
          fluiddensity,
        /// <summary>
        /// fluidvelocity property
        /// </summary>
          [XmlEnum("fluid velocity")]
          fluidvelocity,
        /// <summary>
        /// fluidviscosity property
        /// </summary>
          [XmlEnum("fluid viscosity")]
          fluidviscosity,
        /// <summary>
        /// flushedzoneconductivity property
        /// </summary>
          [XmlEnum("flushed zone conductivity")]
          flushedzoneconductivity,
        /// <summary>
        /// flushedzoneresistivity property
        /// </summary>
          [XmlEnum("flushed zone resistivity")]
          flushedzoneresistivity,
        /// <summary>
        /// flushedzonesaturation property
        /// </summary>
          [XmlEnum("flushed zone saturation")]
          flushedzonesaturation,
        /// <summary>
        /// Energy exerted or brought to bear.
        /// </summary>
          force,
        /// <summary>
        /// formationdensitycorrection property
        /// </summary>
          [XmlEnum("formation density correction")]
          formationdensitycorrection,
        /// <summary>
        /// formationpropertiescorrection property
        /// </summary>
          [XmlEnum("formation properties correction")]
          formationpropertiescorrection,
        /// <summary>
        /// formationsalinitycorrection property
        /// </summary>
          [XmlEnum("formation salinity correction")]
          formationsalinitycorrection,
        /// <summary>
        /// formationsaturationcorrection property
        /// </summary>
          [XmlEnum("formation saturation correction")]
          formationsaturationcorrection,
        /// <summary>
        /// formationvolumefactorcorrection property
        /// </summary>
          [XmlEnum("formation volume factor correction")]
          formationvolumefactorcorrection,
        /// <summary>
        /// formationwaterdensitycorrection property
        /// </summary>
          [XmlEnum("formation water density correction")]
          formationwaterdensitycorrection,
        /// <summary>
        /// formationwatersaturationcorrection property
        /// </summary>
          [XmlEnum("formation water saturation correction")]
          formationwatersaturationcorrection,
        /// <summary>
        /// freefluidindex property
        /// </summary>
          [XmlEnum("free fluid index")]
          freefluidindex,
        /// <summary>
        /// frictioneffectcorrection property
        /// </summary>
          [XmlEnum("friction effect correction")]
          frictioneffectcorrection,
        /// <summary>
        /// gammaray property
        /// </summary>
          [XmlEnum("gamma ray")]
          gammaray,
        /// <summary>
        /// gammarayminusuranium property
        /// </summary>
          [XmlEnum("gamma ray minus uranium")]
          gammarayminusuranium,
        /// <summary>
        /// gassaturation property
        /// </summary>
          [XmlEnum("gas saturation")]
          gassaturation,
        /// <summary>
        /// The measurement of the average density of fluids in a wellbore.
        /// </summary>
          gradiomanometer,
        /// <summary>
        /// highfrequencyconductivity property
        /// </summary>
          [XmlEnum("high frequency conductivity")]
          highfrequencyconductivity,
        /// <summary>
        /// highfrequencyelectromagnetic property
        /// </summary>
          [XmlEnum("high frequency electromagnetic")]
          highfrequencyelectromagnetic,
        /// <summary>
        /// highfrequencyelectromagneticporosity property
        /// </summary>
          [XmlEnum("high frequency electromagnetic porosity")]
          highfrequencyelectromagneticporosity,
        /// <summary>
        /// highfrequencyEMphaseshift property
        /// </summary>
          [XmlEnum("high frequency E-M phase shift")]
          highfrequencyEMphaseshift,
        /// <summary>
        /// highfrequencyresistivity property
        /// </summary>
          [XmlEnum("high frequency resistivity")]
          highfrequencyresistivity,
        /// <summary>
        /// hydrocarboncorrection property
        /// </summary>
          [XmlEnum("hydrocarbon correction")]
          hydrocarboncorrection,
        /// <summary>
        /// hydrocarbondensitycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon density correction")]
          hydrocarbondensitycorrection,
        /// <summary>
        /// hydrocarbongravitycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon gravity correction")]
          hydrocarbongravitycorrection,
        /// <summary>
        /// hydrocarbonsaturation property
        /// </summary>
          [XmlEnum("hydrocarbon saturation")]
          hydrocarbonsaturation,
        /// <summary>
        /// hydrocarbonviscositycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon viscosity correction")]
          hydrocarbonviscositycorrection,
        /// <summary>
        /// The likeness of an object produced by an electrical device.
        /// </summary>
          image,
        /// <summary>
        /// interpretationvariable property
        /// </summary>
          [XmlEnum("interpretation variable")]
          interpretationvariable,
        /// <summary>
        /// ironmudcorrection property
        /// </summary>
          [XmlEnum("iron mud correction")]
          ironmudcorrection,
        /// <summary>
        /// A well log trace which has had two or more runs spliced together to make a single trace.
        /// </summary>
          joined,
        /// <summary>
        /// KClmudcorrection property
        /// </summary>
          [XmlEnum("KCl mud correction")]
          KClmudcorrection,
        /// <summary>
        /// A measured distance or dimension.
        /// </summary>
          length,
        /// <summary>
        /// limestoneacousticporosity property
        /// </summary>
          [XmlEnum("limestone acoustic porosity")]
          limestoneacousticporosity,
        /// <summary>
        /// limestonedensityporosity property
        /// </summary>
          [XmlEnum("limestone density porosity")]
          limestonedensityporosity,
        /// <summary>
        /// limestoneneutronporosity property
        /// </summary>
          [XmlEnum("limestone neutron porosity")]
          limestoneneutronporosity,
        /// <summary>
        /// lithologycorrection property
        /// </summary>
          [XmlEnum("lithology correction")]
          lithologycorrection,
        /// <summary>
        /// logderivedpermeability property
        /// </summary>
          [XmlEnum("log derived permeability")]
          logderivedpermeability,
        /// <summary>
        /// logmatrixdensity property
        /// </summary>
          [XmlEnum("log matrix density")]
          logmatrixdensity,
        /// <summary>
        /// magneticcasingcollarlocator property
        /// </summary>
          [XmlEnum("magnetic casing collar locator")]
          magneticcasingcollarlocator,
        /// <summary>
        /// matrixdensity property
        /// </summary>
          [XmlEnum("matrix density")]
          matrixdensity,
        /// <summary>
        /// matrixtraveltime property
        /// </summary>
          [XmlEnum("matrix travel time")]
          matrixtraveltime,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// mechanicalcaliper property
        /// </summary>
          [XmlEnum("mechanical caliper")]
          mechanicalcaliper,
        /// <summary>
        /// mechanicalcasingcollarlocator property
        /// </summary>
          [XmlEnum("mechanical casing collar locator")]
          mechanicalcasingcollarlocator,
        /// <summary>
        /// mediumconductivity property
        /// </summary>
          [XmlEnum("medium conductivity")]
          mediumconductivity,
        /// <summary>
        /// mediuminductionconductivity property
        /// </summary>
          [XmlEnum("medium induction conductivity")]
          mediuminductionconductivity,
        /// <summary>
        /// mediuminductionresistivity property
        /// </summary>
          [XmlEnum("medium induction resistivity")]
          mediuminductionresistivity,
        /// <summary>
        /// mediumlaterologconductivity property
        /// </summary>
          [XmlEnum("medium laterolog conductivity")]
          mediumlaterologconductivity,
        /// <summary>
        /// mediumlaterologresistivity property
        /// </summary>
          [XmlEnum("medium laterolog resistivity")]
          mediumlaterologresistivity,
        /// <summary>
        /// mediumresistivity property
        /// </summary>
          [XmlEnum("medium resistivity")]
          mediumresistivity,
        /// <summary>
        /// microconductivity property
        /// </summary>
          [XmlEnum("micro conductivity")]
          microconductivity,
        /// <summary>
        /// microinverseconductivity property
        /// </summary>
          [XmlEnum("micro inverse conductivity")]
          microinverseconductivity,
        /// <summary>
        /// microinverseresistivity property
        /// </summary>
          [XmlEnum("micro inverse resistivity")]
          microinverseresistivity,
        /// <summary>
        /// microlaterologconductivity property
        /// </summary>
          [XmlEnum("micro laterolog conductivity")]
          microlaterologconductivity,
        /// <summary>
        /// microlaterologresistivity property
        /// </summary>
          [XmlEnum("micro laterolog resistivity")]
          microlaterologresistivity,
        /// <summary>
        /// micronormalconductivity property
        /// </summary>
          [XmlEnum("micro normal conductivity")]
          micronormalconductivity,
        /// <summary>
        /// micronormalresistivity property
        /// </summary>
          [XmlEnum("micro normal resistivity")]
          micronormalresistivity,
        /// <summary>
        /// microresistivity property
        /// </summary>
          [XmlEnum("micro resistivity")]
          microresistivity,
        /// <summary>
        /// microsphericallyfocusedconductivity property
        /// </summary>
          [XmlEnum("micro spherically focused conductivity")]
          microsphericallyfocusedconductivity,
        /// <summary>
        /// microsphericallyfocusedresistivity property
        /// </summary>
          [XmlEnum("micro spherically focused resistivity")]
          microsphericallyfocusedresistivity,
        /// <summary>
        /// The mineral composition, generally in weight percent, of a formation as calculated from elemental information obtained from a geochemical logging pass; e.g., weight percent of dolomite, calcite, illite, quartzite, etc.
        /// </summary>
          mineral,
        /// <summary>
        /// mudcakeconductivity property
        /// </summary>
          [XmlEnum("mud cake conductivity")]
          mudcakeconductivity,
        /// <summary>
        /// mudcakecorrection property
        /// </summary>
          [XmlEnum("mud cake correction")]
          mudcakecorrection,
        /// <summary>
        /// mudcakedensitycorrection property
        /// </summary>
          [XmlEnum("mud cake density correction")]
          mudcakedensitycorrection,
        /// <summary>
        /// mudcakeresistivity property
        /// </summary>
          [XmlEnum("mud cake resistivity")]
          mudcakeresistivity,
        /// <summary>
        /// mudcakeresistivitycorrection property
        /// </summary>
          [XmlEnum("mud cake resistivity correction")]
          mudcakeresistivitycorrection,
        /// <summary>
        /// mudcakethicknesscorrection property
        /// </summary>
          [XmlEnum("mud cake thickness correction")]
          mudcakethicknesscorrection,
        /// <summary>
        /// mudcompositioncorrection property
        /// </summary>
          [XmlEnum("mud composition correction")]
          mudcompositioncorrection,
        /// <summary>
        /// mudconductivity property
        /// </summary>
          [XmlEnum("mud conductivity")]
          mudconductivity,
        /// <summary>
        /// mudfiltrateconductivity property
        /// </summary>
          [XmlEnum("mud filtrate conductivity")]
          mudfiltrateconductivity,
        /// <summary>
        /// mudfiltratecorrection property
        /// </summary>
          [XmlEnum("mud filtrate correction")]
          mudfiltratecorrection,
        /// <summary>
        /// mudfiltratedensitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate density correction")]
          mudfiltratedensitycorrection,
        /// <summary>
        /// mudfiltrateresistivity property
        /// </summary>
          [XmlEnum("mud filtrate resistivity")]
          mudfiltrateresistivity,
        /// <summary>
        /// mudfiltrateresistivitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate resistivity correction")]
          mudfiltrateresistivitycorrection,
        /// <summary>
        /// mudfiltratesalinitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate salinity correction")]
          mudfiltratesalinitycorrection,
        /// <summary>
        /// mudresistivity property
        /// </summary>
          [XmlEnum("mud resistivity")]
          mudresistivity,
        /// <summary>
        /// mudsalinitycorrection property
        /// </summary>
          [XmlEnum("mud salinity correction")]
          mudsalinitycorrection,
        /// <summary>
        /// mudviscositycorrection property
        /// </summary>
          [XmlEnum("mud viscosity correction")]
          mudviscositycorrection,
        /// <summary>
        /// mudweightcorrection property
        /// </summary>
          [XmlEnum("mud weight correction")]
          mudweightcorrection,
        /// <summary>
        /// neutrondieawaytime property
        /// </summary>
          [XmlEnum("neutron die away time")]
          neutrondieawaytime,
        /// <summary>
        /// neutronporosity property
        /// </summary>
          [XmlEnum("neutron porosity")]
          neutronporosity,
        /// <summary>
        /// nuclearcaliper property
        /// </summary>
          [XmlEnum("nuclear caliper")]
          nuclearcaliper,
        /// <summary>
        /// nuclearmagneticdecaytime property
        /// </summary>
          [XmlEnum("nuclear magnetic decay time")]
          nuclearmagneticdecaytime,
        /// <summary>
        /// nuclearmagnetismlogpermeability property
        /// </summary>
          [XmlEnum("nuclear magnetism log permeability")]
          nuclearmagnetismlogpermeability,
        /// <summary>
        /// nuclearmagnetismporosity property
        /// </summary>
          [XmlEnum("nuclear magnetism porosity")]
          nuclearmagnetismporosity,
        /// <summary>
        /// OHdensityporosity property
        /// </summary>
          [XmlEnum("OH density porosity")]
          OHdensityporosity,
        /// <summary>
        /// OHdolomitedensityporosity property
        /// </summary>
          [XmlEnum("OH dolomite density porosity")]
          OHdolomitedensityporosity,
        /// <summary>
        /// OHdolomiteneutronporosity property
        /// </summary>
          [XmlEnum("OH dolomite neutron porosity")]
          OHdolomiteneutronporosity,
        /// <summary>
        /// OHlimestonedensityporosity property
        /// </summary>
          [XmlEnum("OH limestone density porosity")]
          OHlimestonedensityporosity,
        /// <summary>
        /// OHlimestoneneutronporosity property
        /// </summary>
          [XmlEnum("OH limestone neutron porosity")]
          OHlimestoneneutronporosity,
        /// <summary>
        /// OHneutronporosity property
        /// </summary>
          [XmlEnum("OH neutron porosity")]
          OHneutronporosity,
        /// <summary>
        /// OHsandstonedensityporosity property
        /// </summary>
          [XmlEnum("OH sandstone density porosity")]
          OHsandstonedensityporosity,
        /// <summary>
        /// OHsandstoneneutronporosity property
        /// </summary>
          [XmlEnum("OH sandstone neutron porosity")]
          OHsandstoneneutronporosity,
        /// <summary>
        /// oilbasedmudcorrection property
        /// </summary>
          [XmlEnum("oil based mud correction")]
          oilbasedmudcorrection,
        /// <summary>
        /// oilsaturation property
        /// </summary>
          [XmlEnum("oil saturation")]
          oilsaturation,
        /// <summary>
        /// The procedure for introducing holes through casing into a formation so that formation fluids can enter into the casing.
        /// </summary>
          perforating,
        /// <summary>
        /// The permeability of the surrounding formation.
        /// </summary>
          permeability,
        /// <summary>
        /// phaseshift property
        /// </summary>
          [XmlEnum("phase shift")]
          phaseshift,
        /// <summary>
        /// photoelectricabsorption property
        /// </summary>
          [XmlEnum("photoelectric absorption")]
          photoelectricabsorption,
        /// <summary>
        /// photoelectricabsorptioncorrection property
        /// </summary>
          [XmlEnum("photoelectric absorption correction")]
          photoelectricabsorptioncorrection,
        /// <summary>
        /// physicalmeasurementcorrection property
        /// </summary>
          [XmlEnum("physical measurement correction")]
          physicalmeasurementcorrection,
        /// <summary>
        /// planeangle property
        /// </summary>
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// The total pore volume occupied by fluid in a rock. Includes isolated nonconnecting pores and volume occupied by absorbed, immobile fluid.
        /// </summary>
          porosity,
        /// <summary>
        /// porositycorrection property
        /// </summary>
          [XmlEnum("porosity correction")]
          porositycorrection,
        /// <summary>
        /// The measurement of gamma radiation emitted by potassium.
        /// </summary>
          potassium,
        /// <summary>
        /// The force or thrust exerted upon a surface divided by the area of the surface.
        /// </summary>
          pressure,
        /// <summary>
        /// pressurecorrection property
        /// </summary>
          [XmlEnum("pressure correction")]
          pressurecorrection,
        /// <summary>
        /// A well log trace which has been processed in some way; e.g., depth adjusted or environmentally corrected.
        /// </summary>
          processed,
        /// <summary>
        /// pulsedneutronporosity property
        /// </summary>
          [XmlEnum("pulsed neutron porosity")]
          pulsedneutronporosity,
        /// <summary>
        /// Degree of excellence.
        /// </summary>
          quality,
        /// <summary>
        /// A relationship between two values usually expressed as a fraction.
        /// </summary>
          ratio,
        /// <summary>
        /// A well log trace which has not had any processing. In other words, a trace which has not been depth adjusted or environmentally corrected.
        /// </summary>
          raw,
        /// <summary>
        /// relativebearing property
        /// </summary>
          [XmlEnum("relative bearing")]
          relativebearing,
        /// <summary>
        /// The property measuring the resistance to flow of an electrical current.
        /// </summary>
          resistivity,
        /// <summary>
        /// resistivityfactorcorrection property
        /// </summary>
          [XmlEnum("resistivity factor correction")]
          resistivityfactorcorrection,
        /// <summary>
        /// resistivityfromattenuation property
        /// </summary>
          [XmlEnum("resistivity from attenuation")]
          resistivityfromattenuation,
        /// <summary>
        /// resistivityfromphaseshift property
        /// </summary>
          [XmlEnum("resistivity from phase shift")]
          resistivityfromphaseshift,
        /// <summary>
        /// resistivityphaseshift property
        /// </summary>
          [XmlEnum("resistivity phase shift")]
          resistivityphaseshift,
        /// <summary>
        /// resistivityratio property
        /// </summary>
          [XmlEnum("resistivity ratio")]
          resistivityratio,
        /// <summary>
        /// The concentration of ions in solution.
        /// </summary>
          salinity,
        /// <summary>
        /// To take a sample of or from something.
        /// </summary>
          sampling,
        /// <summary>
        /// sandstoneacousticporosity property
        /// </summary>
          [XmlEnum("sandstone acoustic porosity")]
          sandstoneacousticporosity,
        /// <summary>
        /// sandstonedensityporosity property
        /// </summary>
          [XmlEnum("sandstone density porosity")]
          sandstonedensityporosity,
        /// <summary>
        /// sandstoneneutronporosity property
        /// </summary>
          [XmlEnum("sandstone neutron porosity")]
          sandstoneneutronporosity,
        /// <summary>
        /// The fraction or percentage of the pore volume of a rock.
        /// </summary>
          saturation,
        /// <summary>
        /// shalevolume property
        /// </summary>
          [XmlEnum("shale volume")]
          shalevolume,
        /// <summary>
        /// shallowconductivity property
        /// </summary>
          [XmlEnum("shallow conductivity")]
          shallowconductivity,
        /// <summary>
        /// shallowinductionconductivity property
        /// </summary>
          [XmlEnum("shallow induction conductivity")]
          shallowinductionconductivity,
        /// <summary>
        /// shallowinductionresistivity property
        /// </summary>
          [XmlEnum("shallow induction resistivity")]
          shallowinductionresistivity,
        /// <summary>
        /// shallowlaterologconductivity property
        /// </summary>
          [XmlEnum("shallow laterolog conductivity")]
          shallowlaterologconductivity,
        /// <summary>
        /// shallowlaterologresistivity property
        /// </summary>
          [XmlEnum("shallow laterolog resistivity")]
          shallowlaterologresistivity,
        /// <summary>
        /// shallowresistivity property
        /// </summary>
          [XmlEnum("shallow resistivity")]
          shallowresistivity,
        /// <summary>
        /// shearwavedolomiteporosity property
        /// </summary>
          [XmlEnum("shear wave dolomite porosity")]
          shearwavedolomiteporosity,
        /// <summary>
        /// shearwavelimestoneporosity property
        /// </summary>
          [XmlEnum("shear wave limestone porosity")]
          shearwavelimestoneporosity,
        /// <summary>
        /// shearwavematrixtraveltime property
        /// </summary>
          [XmlEnum("shear wave matrix travel time")]
          shearwavematrixtraveltime,
        /// <summary>
        /// shearwavesandstoneporosity property
        /// </summary>
          [XmlEnum("shear wave sandstone porosity")]
          shearwavesandstoneporosity,
        /// <summary>
        /// shearwavetraveltime property
        /// </summary>
          [XmlEnum("shear wave travel time")]
          shearwavetraveltime,
        /// <summary>
        /// A well log trace which has had its original values shifted by some factor; e.g., added or multiplied by a constant.
        /// </summary>
          shifted,
        /// <summary>
        /// sidewallcoreporosity property
        /// </summary>
          [XmlEnum("sidewall core porosity")]
          sidewallcoreporosity,
        /// <summary>
        /// The macroscopic capture cross section, i.e. the effective cross-sectional area per unit volume for the capture of neutrons.
        /// </summary>
          sigma,
        /// <summary>
        /// sigmaformation property
        /// </summary>
          [XmlEnum("sigma formation")]
          sigmaformation,
        /// <summary>
        /// sigmagas property
        /// </summary>
          [XmlEnum("sigma gas")]
          sigmagas,
        /// <summary>
        /// sigmahydrocarbon property
        /// </summary>
          [XmlEnum("sigma hydrocarbon")]
          sigmahydrocarbon,
        /// <summary>
        /// sigmamatrix property
        /// </summary>
          [XmlEnum("sigma matrix")]
          sigmamatrix,
        /// <summary>
        /// sigmaoil property
        /// </summary>
          [XmlEnum("sigma oil")]
          sigmaoil,
        /// <summary>
        /// sigmawater property
        /// </summary>
          [XmlEnum("sigma water")]
          sigmawater,
        /// <summary>
        /// slippagevelocitycorrection property
        /// </summary>
          [XmlEnum("slippage velocity correction")]
          slippagevelocitycorrection,
        /// <summary>
        /// A well log trace which has been filtered to smooth, or average the trace.
        /// </summary>
          smoothed,
        /// <summary>
        /// spectralgammaray property
        /// </summary>
          [XmlEnum("spectral gamma ray")]
          spectralgammaray,
        /// <summary>
        /// sphericallyfocusedconductivity property
        /// </summary>
          [XmlEnum("spherically focused conductivity")]
          sphericallyfocusedconductivity,
        /// <summary>
        /// sphericallyfocusedresistivity property
        /// </summary>
          [XmlEnum("spherically focused resistivity")]
          sphericallyfocusedresistivity,
        /// <summary>
        /// spontaneouspotential property
        /// </summary>
          [XmlEnum("spontaneous potential")]
          spontaneouspotential,
        /// <summary>
        /// spreadinglosscorrection property
        /// </summary>
          [XmlEnum("spreading loss correction")]
          spreadinglosscorrection,
        /// <summary>
        /// syntheticwelllogtrace property
        /// </summary>
          [XmlEnum("synthetic well log trace")]
          syntheticwelllogtrace,
        /// <summary>
        /// A temperature measurement.
        /// </summary>
          temperature,
        /// <summary>
        /// temperaturecorrection property
        /// </summary>
          [XmlEnum("temperature correction")]
          temperaturecorrection,
        /// <summary>
        /// The tension on the wireline cable while logging.
        /// </summary>
          tension,
        /// <summary>
        /// ThKratio property
        /// </summary>
          [XmlEnum("Th/K ratio")]
          ThKratio,
        /// <summary>
        /// The measurement of gamma radiation emitted by thorium.
        /// </summary>
          thorium,
        /// <summary>
        /// A measured or measurable period.
        /// </summary>
          time,
        /// <summary>
        /// tooldiametercorrection property
        /// </summary>
          [XmlEnum("tool diameter correction")]
          tooldiametercorrection,
        /// <summary>
        /// tooleccentricitycorrection property
        /// </summary>
          [XmlEnum("tool eccentricity correction")]
          tooleccentricitycorrection,
        /// <summary>
        /// totalgammaray property
        /// </summary>
          [XmlEnum("total gamma ray")]
          totalgammaray,
        /// <summary>
        /// totalporosity property
        /// </summary>
          [XmlEnum("total porosity")]
          totalporosity,
        /// <summary>
        /// tracersurvey property
        /// </summary>
          [XmlEnum("tracer survey")]
          tracersurvey,
        /// <summary>
        /// traveltime property
        /// </summary>
          [XmlEnum("travel time")]
          traveltime,
        /// <summary>
        /// trueconductivity property
        /// </summary>
          [XmlEnum("true conductivity")]
          trueconductivity,
        /// <summary>
        /// trueresistivity property
        /// </summary>
          [XmlEnum("true resistivity")]
          trueresistivity,
        /// <summary>
        /// trueverticaldepth property
        /// </summary>
          [XmlEnum("true vertical depth")]
          trueverticaldepth,
        /// <summary>
        /// tubewavedolomiteporosity property
        /// </summary>
          [XmlEnum("tube wave dolomite porosity")]
          tubewavedolomiteporosity,
        /// <summary>
        /// tubewavelimestoneporosity property
        /// </summary>
          [XmlEnum("tube wave limestone porosity")]
          tubewavelimestoneporosity,
        /// <summary>
        /// tubewavematrixtraveltime property
        /// </summary>
          [XmlEnum("tube wave matrix travel time")]
          tubewavematrixtraveltime,
        /// <summary>
        /// tubewavesandstoneporosity property
        /// </summary>
          [XmlEnum("tube wave sandstone porosity")]
          tubewavesandstoneporosity,
        /// <summary>
        /// tubewavetraveltime property
        /// </summary>
          [XmlEnum("tube wave travel time")]
          tubewavetraveltime,
        /// <summary>
        /// The measurement of gamma radiation emitted by uranium.
        /// </summary>
          uranium,
        /// <summary>
        /// directional speed
        /// </summary>
          velocity,
        /// <summary>
        /// cubic capacity
        /// </summary>
          volume,
        /// <summary>
        /// waterbasedfluidcorrection property
        /// </summary>
          [XmlEnum("water based fluid correction")]
          waterbasedfluidcorrection,
        /// <summary>
        /// waterholdupcorrection property
        /// </summary>
          [XmlEnum("water holdup correction")]
          waterholdupcorrection,
        /// <summary>
        /// watersaturatedconductivity property
        /// </summary>
          [XmlEnum("water saturated conductivity")]
          watersaturatedconductivity,
        /// <summary>
        /// watersaturatedresistivity property
        /// </summary>
          [XmlEnum("water saturated resistivity")]
          watersaturatedresistivity,
        /// <summary>
        /// watersaturation property
        /// </summary>
          [XmlEnum("water saturation")]
          watersaturation,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the HoleOpenerType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the HoleOpenerType xsd enumeration.")]
        public enum HoleOpenerType 
        {
        /// <summary>
        /// underreamer property
        /// </summary>
          [XmlEnum("under-reamer")]
          underreamer,
        /// <summary>
        /// fixedblade property
        /// </summary>
          [XmlEnum("fixed blade")]
          fixedblade,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BladeShapeType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BladeShapeType xsd enumeration.")]
        public enum BladeShapeType 
        {
        /// <summary>
        /// 
        /// </summary>
          dynamic,
        /// <summary>
        /// 
        /// </summary>
          melon,
        /// <summary>
        /// 
        /// </summary>
          spiral,
        /// <summary>
        /// 
        /// </summary>
          straight,
        /// <summary>
        /// 
        /// </summary>
          variable,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BladeType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BladeType xsd enumeration.")]
        public enum BladeType 
        {
        /// <summary>
        /// clampon property
        /// </summary>
          [XmlEnum("clamp-on")]
          clampon,
        /// <summary>
        /// 
        /// </summary>
          integral,
        /// <summary>
        /// 
        /// </summary>
          sleeve,
        /// <summary>
        /// 
        /// </summary>
          welded,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BearingType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BearingType xsd enumeration.")]
        public enum BearingType 
        {
        /// <summary>
        /// oilseal property
        /// </summary>
          [XmlEnum("oil seal")]
          oilseal,
        /// <summary>
        /// mudlube property
        /// </summary>
          [XmlEnum("mud lube")]
          mudlube,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the JarType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the JarType xsd enumeration.")]
        public enum JarType 
        {
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// 
        /// </summary>
          hydraulic,
        /// <summary>
        /// hydromechanical property
        /// </summary>
          [XmlEnum("hydro mechanical")]
          hydromechanical,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the JarAction xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the JarAction xsd enumeration.")]
        public enum JarAction 
        {
        /// <summary>
        /// 
        /// </summary>
          up,
        /// <summary>
        /// 
        /// </summary>
          down,
        /// <summary>
        /// 
        /// </summary>
          both,
        /// <summary>
        /// 
        /// </summary>
          vibrating,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the NozzleType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the NozzleType xsd enumeration.")]
        public enum NozzleType 
        {
        /// <summary>
        /// 
        /// </summary>
          extended,
        /// <summary>
        /// 
        /// </summary>
          normal,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TubularComponent xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TubularComponent xsd enumeration.")]
        public enum TubularComponentType 
        {
        /// <summary>
        /// nonmagneticstabilizer property
        /// </summary>
          [XmlEnum("non-magnetic stabilizer")]
          nonmagneticstabilizer,
        /// <summary>
        /// nonmagneticcollar property
        /// </summary>
          [XmlEnum("non-magnetic collar")]
          nonmagneticcollar,
        /// <summary>
        /// Drill string component with blades that help keep the drill string away from the sides of the hole.
        /// </summary>
          stabilizer,
        /// <summary>
        /// adjustablekickoff property
        /// </summary>
          [XmlEnum("adjustable kickoff")]
          adjustablekickoff,
        /// <summary>
        /// A downhole tool used in conjunction with a jar that stores energy for rapid release when the jar is fired. Depending on the operating mode, the energy in tension or compression is stored by means of a mechanical spring or compressible fluid such as nitrogen gas.
        /// </summary>
          accelerator,
        /// <summary>
        /// rotarysteeringtool property
        /// </summary>
          [XmlEnum("rotary steering tool")]
          rotarysteeringtool,
        /// <summary>
        /// subbarcatcher property
        /// </summary>
          [XmlEnum("sub-bar catcher")]
          subbarcatcher,
        /// <summary>
        /// subbent property
        /// </summary>
          [XmlEnum("sub-bent")]
          subbent,
        /// <summary>
        /// bitcorediamond property
        /// </summary>
          [XmlEnum("bit core diamond")]
          bitcorediamond,
        /// <summary>
        /// bitcorePDC property
        /// </summary>
          [XmlEnum("bit core PDC")]
          bitcorePDC,
        /// <summary>
        /// bitdiamondfixedcut property
        /// </summary>
          [XmlEnum("bit diamond fixed cut")]
          bitdiamondfixedcut,
        /// <summary>
        /// bitinsertrollercone property
        /// </summary>
          [XmlEnum("bit insert roller cone")]
          bitinsertrollercone,
        /// <summary>
        /// bitmilltoothrollercone property
        /// </summary>
          [XmlEnum("bit mill tooth roller cone")]
          bitmilltoothrollercone,
        /// <summary>
        /// bitPDCfixedcutter property
        /// </summary>
          [XmlEnum("bit PDC fixed cutter")]
          bitPDCfixedcutter,
        /// <summary>
        /// subbit property
        /// </summary>
          [XmlEnum("sub-bit")]
          subbit,
        /// <summary>
        /// bridgeplug property
        /// </summary>
          [XmlEnum("bridge plug")]
          bridgeplug,
        /// <summary>
        /// A blank end component substituting for a bit, when re entering an already existing hole to guide the BHA, to avoid inadvertent sidetracks, such as when run below a hole opener in an existing hole.
        /// </summary>
          bullnose,
        /// <summary>
        /// bullplug property
        /// </summary>
          [XmlEnum("bull plug")]
          bullplug,
        /// <summary>
        /// subbumper property
        /// </summary>
          [XmlEnum("sub-bumper")]
          subbumper,
        /// <summary>
        /// Tubing used to line the wellbore and protect against pressure differences between the wellbore fluids and the formation.
        /// </summary>
          casing,
        /// <summary>
        /// casingcutter property
        /// </summary>
          [XmlEnum("casing cutter")]
          casingcutter,
        /// <summary>
        /// hangercasingsubsea property
        /// </summary>
          [XmlEnum("hanger casing subsea")]
          hangercasingsubsea,
        /// <summary>
        /// hangercasingsurface property
        /// </summary>
          [XmlEnum("hanger casing surface")]
          hangercasingsurface,
        /// <summary>
        /// casinghead property
        /// </summary>
          [XmlEnum("casing head")]
          casinghead,
        /// <summary>
        /// catchassembly property
        /// </summary>
          [XmlEnum("catch assembly")]
          catchassembly,
        /// <summary>
        /// subcatcher property
        /// </summary>
          [XmlEnum("sub-catcher")]
          subcatcher,
        /// <summary>
        /// subcirculation property
        /// </summary>
          [XmlEnum("sub-circulation")]
          subcirculation,
        /// <summary>
        /// coiledtubinginhole property
        /// </summary>
          [XmlEnum("coiled tubing in hole")]
          coiledtubinginhole,
        /// <summary>
        /// coiledtubingoncoil property
        /// </summary>
          [XmlEnum("coiled tubing on coil")]
          coiledtubingoncoil,
        /// <summary>
        /// drillpipecompressive property
        /// </summary>
          [XmlEnum("drill pipe compressive")]
          drillpipecompressive,
        /// <summary>
        /// subcone property
        /// </summary>
          [XmlEnum("sub-cone")]
          subcone,
        /// <summary>
        /// corebarrel property
        /// </summary>
          [XmlEnum("core barrel")]
          corebarrel,
        /// <summary>
        /// coreorientationbarrel property
        /// </summary>
          [XmlEnum("core orientation barrel")]
          coreorientationbarrel,
        /// <summary>
        /// subcrossover property
        /// </summary>
          [XmlEnum("sub-crossover")]
          subcrossover,
        /// <summary>
        /// casingcrossover property
        /// </summary>
          [XmlEnum("casing crossover")]
          casingcrossover,
        /// <summary>
        /// subdart property
        /// </summary>
          [XmlEnum("sub-dart")]
          subdart,
        /// <summary>
        /// diecollar property
        /// </summary>
          [XmlEnum("die collar")]
          diecollar,
        /// <summary>
        /// diecollarLH property
        /// </summary>
          [XmlEnum("die collar LH")]
          diecollarLH,
        /// <summary>
        /// directionalguidancesystem property
        /// </summary>
          [XmlEnum("directional guidance system")]
          directionalguidancesystem,
        /// <summary>
        /// drillcollar property
        /// </summary>
          [XmlEnum("drill collar")]
          drillcollar,
        /// <summary>
        /// drillpipe property
        /// </summary>
          [XmlEnum("drill pipe")]
          drillpipe,
        /// <summary>
        /// drillpipeLH property
        /// </summary>
          [XmlEnum("drill pipe LH")]
          drillpipeLH,
        /// <summary>
        /// drillstemtestBHA property
        /// </summary>
          [XmlEnum("drill stem test BHA")]
          drillstemtestBHA,
        /// <summary>
        /// drivepipe property
        /// </summary>
          [XmlEnum("drive pipe")]
          drivepipe,
        /// <summary>
        /// dualcatchassembly property
        /// </summary>
          [XmlEnum("dual catch assembly")]
          dualcatchassembly,
        /// <summary>
        /// extensionbowlovershot property
        /// </summary>
          [XmlEnum("extension bowl overshot")]
          extensionbowlovershot,
        /// <summary>
        /// extensionsubovershot property
        /// </summary>
          [XmlEnum("extension sub-overshot")]
          extensionsubovershot,
        /// <summary>
        /// floatcollar property
        /// </summary>
          [XmlEnum("float collar")]
          floatcollar,
        /// <summary>
        /// floatshoe property
        /// </summary>
          [XmlEnum("float shoe")]
          floatshoe,
        /// <summary>
        /// subfloat property
        /// </summary>
          [XmlEnum("sub-float")]
          subfloat,
        /// <summary>
        /// flowhead property
        /// </summary>
          [XmlEnum("flow head")]
          flowhead,
        /// <summary>
        /// guideshoe property
        /// </summary>
          [XmlEnum("guide shoe")]
          guideshoe,
        /// <summary>
        /// MWDhangoffsub property
        /// </summary>
          [XmlEnum("MWD hang off sub")]
          MWDhangoffsub,
        /// <summary>
        /// heavyweightdrillpipe property
        /// </summary>
          [XmlEnum("heavy weight drill pipe")]
          heavyweightdrillpipe,
        /// <summary>
        /// heavyweightdrillpipeLH property
        /// </summary>
          [XmlEnum("heavy weight drill pipe LH")]
          heavyweightdrillpipeLH,
        /// <summary>
        /// riserhighpressure property
        /// </summary>
          [XmlEnum("riser high pressure")]
          riserhighpressure,
        /// <summary>
        /// bitholeopener property
        /// </summary>
          [XmlEnum("bit hole opener")]
          bitholeopener,
        /// <summary>
        /// casinginflatablepacker property
        /// </summary>
          [XmlEnum("casing inflatable packer")]
          casinginflatablepacker,
        /// <summary>
        /// motorinstrumented property
        /// </summary>
          [XmlEnum("motor instrumented")]
          motorinstrumented,
        /// <summary>
        /// Hydraulic or spring-loaded component used to free stuck pipe.
        /// </summary>
          jar,
        /// <summary>
        /// subjetting property
        /// </summary>
          [XmlEnum("sub-jetting")]
          subjetting,
        /// <summary>
        /// junkbasket property
        /// </summary>
          [XmlEnum("junk basket")]
          junkbasket,
        /// <summary>
        /// junkbasketreversecirculation property
        /// </summary>
          [XmlEnum("junk basket reverse circulation")]
          junkbasketreversecirculation,
        /// <summary>
        /// subjunk property
        /// </summary>
          [XmlEnum("sub-junk")]
          subjunk,
        /// <summary>
        /// Hexagonal or square pipe used to rotate the drill string from the rig floor.
        /// </summary>
          kelly,
        /// <summary>
        /// keyseatwipertool property
        /// </summary>
          [XmlEnum("keyseat wiper tool")]
          keyseatwipertool,
        /// <summary>
        /// landingfloatcollar property
        /// </summary>
          [XmlEnum("landing float collar")]
          landingfloatcollar,
        /// <summary>
        /// leadimpressionblock property
        /// </summary>
          [XmlEnum("lead impression block")]
          leadimpressionblock,
        /// <summary>
        /// Casing or tubing that is hung from the inside of existing casing rather than from the sea bed or surface.
        /// </summary>
          liner,
        /// <summary>
        /// hangerliner property
        /// </summary>
          [XmlEnum("hanger liner")]
          hangerliner,
        /// <summary>
        /// Magnet used to retrieve magnetic debris from the hole.
        /// </summary>
          magnet,
        /// <summary>
        /// risermarine property
        /// </summary>
          [XmlEnum("riser marine")]
          risermarine,
        /// <summary>
        /// milldress property
        /// </summary>
          [XmlEnum("mill dress")]
          milldress,
        /// <summary>
        /// millflatbottom property
        /// </summary>
          [XmlEnum("mill flat bottom")]
          millflatbottom,
        /// <summary>
        /// millhollow property
        /// </summary>
          [XmlEnum("mill hollow")]
          millhollow,
        /// <summary>
        /// millpolish property
        /// </summary>
          [XmlEnum("mill polish")]
          millpolish,
        /// <summary>
        /// millsection property
        /// </summary>
          [XmlEnum("mill section")]
          millsection,
        /// <summary>
        /// milltaper property
        /// </summary>
          [XmlEnum("mill taper")]
          milltaper,
        /// <summary>
        /// millwashover property
        /// </summary>
          [XmlEnum("mill washover")]
          millwashover,
        /// <summary>
        /// millpackerpickerassembly property
        /// </summary>
          [XmlEnum("mill packer picker assembly")]
          millpackerpickerassembly,
        /// <summary>
        /// milloutextension property
        /// </summary>
          [XmlEnum("millout extension")]
          milloutextension,
        /// <summary>
        /// multilateralhangerrunningtool property
        /// </summary>
          [XmlEnum("multilateral hanger running tool")]
          multilateralhangerrunningtool,
        /// <summary>
        /// hangermudline property
        /// </summary>
          [XmlEnum("hanger mud line")]
          hangermudline,
        /// <summary>
        /// Downhole tool, usually powered by fluid flow, that rotates the drill bit.
        /// </summary>
          motor,
        /// <summary>
        /// muleshoe property
        /// </summary>
          [XmlEnum("mule shoe")]
          muleshoe,
        /// <summary>
        /// loggingwhiledrillingtool property
        /// </summary>
          [XmlEnum("logging while drilling tool")]
          loggingwhiledrillingtool,
        /// <summary>
        /// stabilizernearbitrollerreamer property
        /// </summary>
          [XmlEnum("stabilizer near bit roller reamer")]
          stabilizernearbitrollerreamer,
        /// <summary>
        /// stabilizernearbit property
        /// </summary>
          [XmlEnum("stabilizer near bit")]
          stabilizernearbit,
        /// <summary>
        /// stabilizernonrotating property
        /// </summary>
          [XmlEnum("stabilizer non-rotating")]
          stabilizernonrotating,
        /// <summary>
        /// suborienting property
        /// </summary>
          [XmlEnum("sub-orienting")]
          suborienting,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// Tool used for retrieving pipe that has been lost in the hole.
        /// </summary>
          overshot,
        /// <summary>
        /// overshotLH property
        /// </summary>
          [XmlEnum("overshot LH")]
          overshotLH,
        /// <summary>
        /// oversizelipguideovershot property
        /// </summary>
          [XmlEnum("oversize lip guide overshot")]
          oversizelipguideovershot,
        /// <summary>
        /// Component that can be inflated so that it seals off a section of the wellbore, typically for formation testing.
        /// </summary>
          packer,
        /// <summary>
        /// polishedborereceptacle property
        /// </summary>
          [XmlEnum("polished bore receptacle")]
          polishedborereceptacle,
        /// <summary>
        /// millpilot property
        /// </summary>
          [XmlEnum("mill pilot")]
          millpilot,
        /// <summary>
        /// pipecutter property
        /// </summary>
          [XmlEnum("pipe cutter")]
          pipecutter,
        /// <summary>
        /// portedstinger property
        /// </summary>
          [XmlEnum("ported stinger")]
          portedstinger,
        /// <summary>
        /// subported property
        /// </summary>
          [XmlEnum("sub-ported")]
          subported,
        /// <summary>
        /// prepackedscreens property
        /// </summary>
          [XmlEnum("prepacked screens")]
          prepackedscreens,
        /// <summary>
        /// subpressurerelief property
        /// </summary>
          [XmlEnum("sub-pressure relief")]
          subpressurerelief,
        /// <summary>
        /// riserproduction property
        /// </summary>
          [XmlEnum("riser production")]
          riserproduction,
        /// <summary>
        /// MWDpulser property
        /// </summary>
          [XmlEnum("MWD pulser")]
          MWDpulser,
        /// <summary>
        /// subpumpout property
        /// </summary>
          [XmlEnum("sub-pump out")]
          subpumpout,
        /// <summary>
        /// subrestrictor property
        /// </summary>
          [XmlEnum("sub-restrictor")]
          subrestrictor,
        /// <summary>
        /// packerretrieveTTsqueeze property
        /// </summary>
          [XmlEnum("packer retrieve TT squeeze")]
          packerretrieveTTsqueeze,
        /// <summary>
        /// reversingtool property
        /// </summary>
          [XmlEnum("reversing tool")]
          reversingtool,
        /// <summary>
        /// stabilizerstringrollerreamer property
        /// </summary>
          [XmlEnum("stabilizer string roller reamer")]
          stabilizerstringrollerreamer,
        /// <summary>
        /// packerRTTS property
        /// </summary>
          [XmlEnum("packer RTTS")]
          packerRTTS,
        /// <summary>
        /// runningtool property
        /// </summary>
          [XmlEnum("running tool")]
          runningtool,
        /// <summary>
        /// safetyjoint property
        /// </summary>
          [XmlEnum("safety joint")]
          safetyjoint,
        /// <summary>
        /// safetyjointLH property
        /// </summary>
          [XmlEnum("safety joint LH")]
          safetyjointLH,
        /// <summary>
        /// subsaver property
        /// </summary>
          [XmlEnum("sub-saver")]
          subsaver,
        /// <summary>
        /// scablinerbitguide property
        /// </summary>
          [XmlEnum("scab liner bit guide")]
          scablinerbitguide,
        /// <summary>
        /// 
        /// </summary>
          scraper,
        /// <summary>
        /// A device for cleaning mud and mud filter cake off of the wellbore wall when cementing casing in the hole to ensure good contact and bonding between the cement and the wellbore wall.
        /// </summary>
          scratchers,
        /// <summary>
        /// casingshoescrewin property
        /// </summary>
          [XmlEnum("casing shoe screw-in")]
          casingshoescrewin,
        /// <summary>
        /// subshock property
        /// </summary>
          [XmlEnum("sub-shock")]
          subshock,
        /// <summary>
        /// drillcollarshort property
        /// </summary>
          [XmlEnum("drill collar short")]
          drillcollarshort,
        /// <summary>
        /// subsideentry property
        /// </summary>
          [XmlEnum("sub-side entry")]
          subsideentry,
        /// <summary>
        /// slottedliner property
        /// </summary>
          [XmlEnum("slotted liner")]
          slottedliner,
        /// <summary>
        /// Fishing tool that attaches to the inside of the stuck pipe by threads or grapples.
        /// </summary>
          spear,
        /// <summary>
        /// stagecementcollar property
        /// </summary>
          [XmlEnum("stage cement collar")]
          stagecementcollar,
        /// <summary>
        /// motorsteerable property
        /// </summary>
          [XmlEnum("motor steerable")]
          motorsteerable,
        /// <summary>
        /// packerstormvalveRTTS property
        /// </summary>
          [XmlEnum("packer storm valve RTTS")]
          packerstormvalveRTTS,
        /// <summary>
        /// stabilizerstring property
        /// </summary>
          [XmlEnum("stabilizer string")]
          stabilizerstring,
        /// <summary>
        /// surfacepipe property
        /// </summary>
          [XmlEnum("surface pipe")]
          surfacepipe,
        /// <summary>
        /// tapertap property
        /// </summary>
          [XmlEnum("taper tap")]
          tapertap,
        /// <summary>
        /// tapertapLH property
        /// </summary>
          [XmlEnum("taper tap LH")]
          tapertapLH,
        /// <summary>
        /// tubingconveyedperforatinggun property
        /// </summary>
          [XmlEnum("tubing-conveyed perforating gun")]
          tubingconveyedperforatinggun,
        /// <summary>
        /// Drilling tool used to maintain weight on bit.
        /// </summary>
          thruster,
        /// <summary>
        /// tiebackpolishedborereceptacle property
        /// </summary>
          [XmlEnum("tieback polished bore receptacle")]
          tiebackpolishedborereceptacle,
        /// <summary>
        /// tiebackstinger property
        /// </summary>
          [XmlEnum("tieback stinger")]
          tiebackstinger,
        /// <summary>
        /// Small diameter pipe that is run inside casing or tubing as part of the well completion.
        /// </summary>
          tubing,
        /// <summary>
        /// hangertubing property
        /// </summary>
          [XmlEnum("hanger tubing")]
          hangertubing,
        /// <summary>
        /// Downhole device used for directional drilling, powered by mud circulation that rotates the drill bit while the drill string remains non-rotating
        /// </summary>
          turbine,
        /// <summary>
        /// bitunderreamer property
        /// </summary>
          [XmlEnum("bit under reamer")]
          bitunderreamer,
        /// <summary>
        /// stabilizervariableblade property
        /// </summary>
          [XmlEnum("stabilizer variable blade")]
          stabilizervariableblade,
        /// <summary>
        /// washoverpipe property
        /// </summary>
          [XmlEnum("washover pipe")]
          washoverpipe,
        /// <summary>
        /// millwatermelon property
        /// </summary>
          [XmlEnum("mill watermelon")]
          millwatermelon,
        /// <summary>
        /// Wedge shaped tool used to drill off in a different direction.
        /// </summary>
          whipstock,
        /// <summary>
        /// whipstockanchor property
        /// </summary>
          [XmlEnum("whipstock anchor")]
          whipstockanchor,
        /// <summary>
        /// stabilizerturboback property
        /// </summary>
          [XmlEnum("stabilizer turbo back")]
          stabilizerturboback,
        /// <summary>
        /// stabilizerinline property
        /// </summary>
          [XmlEnum("stabilizer inline")]
          stabilizerinline,
        /// <summary>
        /// stabilizersteerable property
        /// </summary>
          [XmlEnum("stabilizer steerable")]
          stabilizersteerable,
        /// <summary>
        /// substop property
        /// </summary>
          [XmlEnum("sub-stop")]
          substop,
        /// <summary>
        /// subfilter property
        /// </summary>
          [XmlEnum("sub-filter")]
          subfilter,
        /// <summary>
        /// millcasingcutting property
        /// </summary>
          [XmlEnum("mill casing cutting")]
          millcasingcutting,
        /// <summary>
        /// Tool used to enlarge the hole.
        /// </summary>
          reamer,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BoxPinConfig xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BoxPinConfig xsd enumeration.")]
        public enum BoxPinConfig 
        {
        /// <summary>
        /// bottomboxtopbox property
        /// </summary>
          [XmlEnum("bottom box, top box")]
          bottomboxtopbox,
        /// <summary>
        /// bottomboxtoppin property
        /// </summary>
          [XmlEnum("bottom box, top pin")]
          bottomboxtoppin,
        /// <summary>
        /// bottompintopbox property
        /// </summary>
          [XmlEnum("bottom pin top box")]
          bottompintopbox,
        /// <summary>
        /// bottompin property
        /// </summary>
          [XmlEnum("bottom pin")]
          bottompin,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MaterialType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MaterialType xsd enumeration.")]
        public enum MaterialType 
        {
        /// <summary>
        /// 
        /// </summary>
          aluminum,
        /// <summary>
        /// berylliumcopper property
        /// </summary>
          [XmlEnum("beryllium copper")]
          berylliumcopper,
        /// <summary>
        /// chromealloy property
        /// </summary>
          [XmlEnum("chrome alloy")]
          chromealloy,
        /// <summary>
        /// 
        /// </summary>
          composite,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// nonmagneticsteel property
        /// </summary>
          [XmlEnum("non-magnetic steel")]
          nonmagneticsteel,
        /// <summary>
        /// 
        /// </summary>
          plastic,
        /// <summary>
        /// 
        /// </summary>
          steel,
        /// <summary>
        /// steelalloy property
        /// </summary>
          [XmlEnum("steel alloy")]
          steelalloy,
        /// <summary>
        /// 
        /// </summary>
          titanium,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BitType xsd enumeration.")]
        public enum BitType 
        {
        /// <summary>
        /// Diamond bit
        /// </summary>
          diamond,
        /// <summary>
        /// diamondcore property
        /// </summary>
          [XmlEnum("diamond core")]
          diamondcore,
        /// <summary>
        /// insertrollercone property
        /// </summary>
          [XmlEnum("insert roller cone")]
          insertrollercone,
        /// <summary>
        /// polycrystalline diamond compact fixed cutter bit
        /// </summary>
          PDC,
        /// <summary>
        /// PDCcore property
        /// </summary>
          [XmlEnum("PDC core")]
          PDCcore,
        /// <summary>
        /// rollercone property
        /// </summary>
          [XmlEnum("roller cone")]
          rollercone,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitDullCode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BitDullCode xsd enumeration.")]
        public enum BitDullCode 
        {
        /// <summary>
        /// Broken Cone
        /// </summary>
          BC,
        /// <summary>
        /// Broken teeth/cutters
        /// </summary>
          BT,
        /// <summary>
        /// Balled Up
        /// </summary>
          BU,
        /// <summary>
        /// Cracked Cone
        /// </summary>
          CC,
        /// <summary>
        /// Cone Dragged
        /// </summary>
          CD,
        /// <summary>
        /// Cone Interference
        /// </summary>
          CI,
        /// <summary>
        /// Cored
        /// </summary>
          CR,
        /// <summary>
        /// Chipped Teeth
        /// </summary>
          CT,
        /// <summary>
        /// Erosion
        /// </summary>
          ER,
        /// <summary>
        /// Flat Crested Wear
        /// </summary>
          FC,
        /// <summary>
        /// Heat Checking
        /// </summary>
          HC,
        /// <summary>
        /// Junk Damage
        /// </summary>
          JD,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LC,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LN,
        /// <summary>
        /// Lost Teeth/Cutters
        /// </summary>
          LT,
        /// <summary>
        /// No Dull/No Other Wear
        /// </summary>
          NO,
        /// <summary>
        /// Off-Center Wear
        /// </summary>
          OC,
        /// <summary>
        /// Pinched Bit
        /// </summary>
          PB,
        /// <summary>
        /// Plugged Nozzle
        /// </summary>
          PN,
        /// <summary>
        /// Rounded Gauge
        /// </summary>
          RG,
        /// <summary>
        /// Ring Out
        /// </summary>
          RO,
        /// <summary>
        /// Shirttail Damage
        /// </summary>
          SD,
        /// <summary>
        /// Self-Sharpening Wear
        /// </summary>
          SS,
        /// <summary>
        /// Tracking
        /// </summary>
          TR,
        /// <summary>
        /// WashOut on Bit
        /// </summary>
          WO,
        /// <summary>
        /// Worn Teeth/Cutters
        /// </summary>
          WT,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BitReasonPulled xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BitReasonPulled xsd enumeration.")]
        public enum BitReasonPulled 
        {
        /// <summary>
        /// Change Bottom Hole Assembly
        /// </summary>
          BHA,
        /// <summary>
        /// Condition Mud
        /// </summary>
          CM,
        /// <summary>
        /// Core Point
        /// </summary>
          CP,
        /// <summary>
        /// Downhole Motor Failure
        /// </summary>
          DMF,
        /// <summary>
        /// Drill Plug
        /// </summary>
          DP,
        /// <summary>
        /// Drill Stem Test
        /// </summary>
          DST,
        /// <summary>
        /// Downhole Tool Failure
        /// </summary>
          DTF,
        /// <summary>
        /// Formation Change
        /// </summary>
          FM,
        /// <summary>
        /// Hole Problems
        /// </summary>
          HP,
        /// <summary>
        /// Hours on Bit
        /// </summary>
          HR,
        /// <summary>
        /// Run Logs
        /// </summary>
          LOG,
        /// <summary>
        /// Pump Pressure
        /// </summary>
          PP,
        /// <summary>
        /// Penetration Rate
        /// </summary>
          PR,
        /// <summary>
        /// Rig Repairs
        /// </summary>
          RIG,
        /// <summary>
        /// Total Depth/Casing Depth
        /// </summary>
          TD,
        /// <summary>
        /// Torque
        /// </summary>
          TQ,
        /// <summary>
        /// Twist Off
        /// </summary>
          TW,
        /// <summary>
        /// Weather Conditions
        /// </summary>
          WC,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ConnectionPosition xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ConnectionPosition xsd enumeration.")]
        public enum ConnectionPosition 
        {
        /// <summary>
        /// The connection is the same at both ends of the component
        /// </summary>
          both,
        /// <summary>
        /// This connection is only at the bottom of the component
        /// </summary>
          bottom,
        /// <summary>
        /// This connection is only at the top of the component
        /// </summary>
          top,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the CasingConnectionType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CasingConnectionType xsd enumeration.")]
        public enum CasingConnectionType 
        {
        /// <summary>
        /// Landed property
        /// </summary>
          Landed,
        /// <summary>
        /// SelfSealingThreaded property
        /// </summary>
          [XmlEnum("SelfSealing-Threaded")]
          SelfSealingThreaded,
        /// <summary>
        /// Welded property
        /// </summary>
          Welded
        }
        /// <summary>
        /// This class represents the OtherConnectionType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the OtherConnectionType xsd enumeration.")]
        public enum OtherConnectionType 
        {
        /// <summary>
        /// DogsCompressionFitSealed property
        /// </summary>
          [XmlEnum("DogsCompressionFit-Sealed")]
          DogsCompressionFitSealed,
        /// <summary>
        /// Cementedinplace property
        /// </summary>
          [XmlEnum("Cemented-in-place")]
          Cementedinplace
        }
        /// <summary>
        /// This class represents the RodConnectionType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RodConnectionType xsd enumeration.")]
        public enum RodConnectionType 
        {
        /// <summary>
        /// Latched property
        /// </summary>
          Latched,
        /// <summary>
        /// SeatingNippleCup property
        /// </summary>
          [XmlEnum("Seating Nipple-Cup")]
          SeatingNippleCup,
        /// <summary>
        /// SeatingNippleMechanical property
        /// </summary>
          [XmlEnum("SeatingNipple-Mechanical")]
          SeatingNippleMechanical,
        /// <summary>
        /// SlipFitSealed property
        /// </summary>
          [XmlEnum("SlipFit-Sealed")]
          SlipFitSealed,
        /// <summary>
        /// Threaded property
        /// </summary>
          Threaded,
        /// <summary>
        /// Welded property
        /// </summary>
          Welded
        }
        /// <summary>
        /// This class represents the TubingConnectionType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TubingConnectionType xsd enumeration.")]
        public enum TubingConnectionType 
        {
        /// <summary>
        /// DogsCompressionFitNotSealed property
        /// </summary>
          [XmlEnum("DogsCompressionFit-NotSealed")]
          DogsCompressionFitNotSealed,
        /// <summary>
        /// Latched property
        /// </summary>
          Latched,
        /// <summary>
        /// Landed property
        /// </summary>
          Landed,
        /// <summary>
        /// SelfSealingThreaded property
        /// </summary>
          [XmlEnum("SelfSealing-Threaded")]
          SelfSealingThreaded,
        /// <summary>
        /// SlipFitSealed property
        /// </summary>
          [XmlEnum("SlipFit-Sealed")]
          SlipFitSealed,
        /// <summary>
        /// Threaded property
        /// </summary>
          Threaded,
        /// <summary>
        /// Radial property
        /// </summary>
          Radial,
        /// <summary>
        /// Unknown property
        /// </summary>
          Unknown
        }
        /// <summary>
        /// This class represents the ConnectionFormType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ConnectionFormType xsd enumeration.")]
        public enum ConnectionFormType 
        {
        /// <summary>
        /// Flange property
        /// </summary>
          Flange,
        /// <summary>
        /// Mandrel property
        /// </summary>
          Mandrel,
        /// <summary>
        /// Welded property
        /// </summary>
          Welded,
        /// <summary>
        /// Pin property
        /// </summary>
          Pin,
        /// <summary>
        /// Box property
        /// </summary>
          Box
        }
        /// <summary>
        /// This class represents the TubularAssembly xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TubularAssembly xsd enumeration.")]
        public enum TubularAssembly 
        {
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// directionaldrilling property
        /// </summary>
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// 
        /// </summary>
          fishing,
        /// <summary>
        /// conditionmud property
        /// </summary>
          [XmlEnum("condition mud")]
          conditionmud,
        /// <summary>
        /// tubingconveyedlogging property
        /// </summary>
          [XmlEnum("tubing conveyed logging")]
          tubingconveyedlogging,
        /// <summary>
        /// 
        /// </summary>
          cementing,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// cleanout property
        /// </summary>
          [XmlEnum("clean out")]
          cleanout,
        /// <summary>
        /// completionortesting property
        /// </summary>
          [XmlEnum("completion or testing")]
          completionortesting,
        /// <summary>
        /// 
        /// </summary>
          coring,
        /// <summary>
        /// holeopeningorunderreaming property
        /// </summary>
          [XmlEnum("hole opening or underreaming")]
          holeopeningorunderreaming,
        /// <summary>
        /// millingordressingorcutting property
        /// </summary>
          [XmlEnum("milling or dressing or cutting")]
          millingordressingorcutting,
        /// <summary>
        /// wiperorcheckorreaming property
        /// </summary>
          [XmlEnum("wiper or check or reaming")]
          wiperorcheckorreaming,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TrajStationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TrajStationType xsd enumeration.")]
        public enum TrajStationType 
        {
        /// <summary>
        /// azimuthonplane property
        /// </summary>
          [XmlEnum("azimuth on plane")]
          azimuthonplane,
        /// <summary>
        /// buildratetodeltaMD property
        /// </summary>
          [XmlEnum("buildrate to delta-MD")]
          buildratetodeltaMD,
        /// <summary>
        /// buildratetoINCL property
        /// </summary>
          [XmlEnum("buildrate to INCL")]
          buildratetoINCL,
        /// <summary>
        /// buildratetoMD property
        /// </summary>
          [XmlEnum("buildrate to MD")]
          buildratetoMD,
        /// <summary>
        /// buildrateandturnratetoAZI property
        /// </summary>
          [XmlEnum("buildrate and turnrate to AZI")]
          buildrateandturnratetoAZI,
        /// <summary>
        /// buildrateandturnratetodeltaMD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to delta-MD")]
          buildrateandturnratetodeltaMD,
        /// <summary>
        /// buildrateandturnratetoINCL property
        /// </summary>
          [XmlEnum("buildrate and turnrate to INCL")]
          buildrateandturnratetoINCL,
        /// <summary>
        /// buildrateandturnratetoINCLandAZI property
        /// </summary>
          [XmlEnum("buildrate and turnrate to INCL and AZI")]
          buildrateandturnratetoINCLandAZI,
        /// <summary>
        /// buildrateandturnratetoMD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to MD")]
          buildrateandturnratetoMD,
        /// <summary>
        /// buildrateandturnratetoTVD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to TVD")]
          buildrateandturnratetoTVD,
        /// <summary>
        /// buildrateTVD property
        /// </summary>
          [XmlEnum("buildrate TVD")]
          buildrateTVD,
        /// <summary>
        /// casingMD property
        /// </summary>
          [XmlEnum("casing MD")]
          casingMD,
        /// <summary>
        /// casingTVD property
        /// </summary>
          [XmlEnum("casing TVD")]
          casingTVD,
        /// <summary>
        /// Section follows a given dogleg severity 
        /// </summary>
          DLS,
        /// <summary>
        /// DLStoAZIandMD property
        /// </summary>
          [XmlEnum("DLS to AZI and MD")]
          DLStoAZIandMD,
        /// <summary>
        /// DLStoAZITVD property
        /// </summary>
          [XmlEnum("DLS to AZI-TVD")]
          DLStoAZITVD,
        /// <summary>
        /// DLStoINCL property
        /// </summary>
          [XmlEnum("DLS to INCL")]
          DLStoINCL,
        /// <summary>
        /// DLStoINCLandAZI property
        /// </summary>
          [XmlEnum("DLS to INCL and AZI")]
          DLStoINCLandAZI,
        /// <summary>
        /// DLStoINCLandMD property
        /// </summary>
          [XmlEnum("DLS to INCL and MD")]
          DLStoINCLandMD,
        /// <summary>
        /// DLStoINCLandTVD property
        /// </summary>
          [XmlEnum("DLS to INCL and TVD")]
          DLStoINCLandTVD,
        /// <summary>
        /// DLStoNSEWandTVD property
        /// </summary>
          [XmlEnum("DLS to NS, EW and TVD")]
          DLStoNSEWandTVD,
        /// <summary>
        /// DLSandtoolfacetoAZI property
        /// </summary>
          [XmlEnum("DLS and toolface to AZI")]
          DLSandtoolfacetoAZI,
        /// <summary>
        /// DLSandtoolfacetodeltaMD property
        /// </summary>
          [XmlEnum("DLS and toolface to delta-MD")]
          DLSandtoolfacetodeltaMD,
        /// <summary>
        /// DLSandtoolfacetoINCL property
        /// </summary>
          [XmlEnum("DLS and toolface to INCL")]
          DLSandtoolfacetoINCL,
        /// <summary>
        /// DLSandtoolfacetoINCLAZI property
        /// </summary>
          [XmlEnum("DLS and toolface to INCL-AZI")]
          DLSandtoolfacetoINCLAZI,
        /// <summary>
        /// DLSandtoolfacetoMD property
        /// </summary>
          [XmlEnum("DLS and toolface to MD")]
          DLSandtoolfacetoMD,
        /// <summary>
        /// DLSandtoolfacetoTVD property
        /// </summary>
          [XmlEnum("DLS and toolface to TVD")]
          DLSandtoolfacetoTVD,
        /// <summary>
        /// formationMD property
        /// </summary>
          [XmlEnum("formation MD")]
          formationMD,
        /// <summary>
        /// formationTVD property
        /// </summary>
          [XmlEnum("formation TVD")]
          formationTVD,
        /// <summary>
        /// gyroinertial property
        /// </summary>
          [XmlEnum("gyro inertial")]
          gyroinertial,
        /// <summary>
        /// gyroMWD property
        /// </summary>
          [XmlEnum("gyro MWD")]
          gyroMWD,
        /// <summary>
        /// gyronorthseeking property
        /// </summary>
          [XmlEnum("gyro north seeking")]
          gyronorthseeking,
        /// <summary>
        /// holdtodeltaMD property
        /// </summary>
          [XmlEnum("hold to delta-MD")]
          holdtodeltaMD,
        /// <summary>
        /// holdtoMD property
        /// </summary>
          [XmlEnum("hold to MD")]
          holdtoMD,
        /// <summary>
        /// holdtoTVD property
        /// </summary>
          [XmlEnum("hold to TVD")]
          holdtoTVD,
        /// <summary>
        /// INCLAZIandTVD property
        /// </summary>
          [XmlEnum("INCL, AZI and TVD")]
          INCLAZIandTVD,
        /// <summary>
        /// magneticmultishot property
        /// </summary>
          [XmlEnum("magnetic multi-shot")]
          magneticmultishot,
        /// <summary>
        /// magneticMWD property
        /// </summary>
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        /// <summary>
        /// magneticsingleshot property
        /// </summary>
          [XmlEnum("magnetic single shot")]
          magneticsingleshot,
        /// <summary>
        /// markerMD property
        /// </summary>
          [XmlEnum("marker MD")]
          markerMD,
        /// <summary>
        /// markerTVD property
        /// </summary>
          [XmlEnum("marker TVD")]
          markerTVD,
        /// <summary>
        /// NSEWandTVD property
        /// </summary>
          [XmlEnum("NS, EW and TVD")]
          NSEWandTVD,
        /// <summary>
        /// targetcenter property
        /// </summary>
          [XmlEnum("target center")]
          targetcenter,
        /// <summary>
        /// targetoffset property
        /// </summary>
          [XmlEnum("target offset")]
          targetoffset,
        /// <summary>
        /// tieinpoint property
        /// </summary>
          [XmlEnum("tie in point")]
          tieinpoint,
        /// <summary>
        /// turnratetoAZI property
        /// </summary>
          [XmlEnum("turnrate to AZI")]
          turnratetoAZI,
        /// <summary>
        /// turnratetodeltaMD property
        /// </summary>
          [XmlEnum("turnrate to delta-MD")]
          turnratetodeltaMD,
        /// <summary>
        /// turnratetoMD property
        /// </summary>
          [XmlEnum("turnrate to MD")]
          turnratetoMD,
        /// <summary>
        /// turnratetoTVD property
        /// </summary>
          [XmlEnum("turnrate to TVD")]
          turnratetoTVD,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TrajStationStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TrajStationStatus xsd enumeration.")]
        public enum TrajStationStatus 
        {
        /// <summary>
        /// constanttoolface property
        /// </summary>
          [XmlEnum("constant tool face")]
          constanttoolface,
        /// <summary>
        /// minimumcurvature property
        /// </summary>
          [XmlEnum("minimum curvature")]
          minimumcurvature,
        /// <summary>
        /// tangential property
        /// </summary>
          tangential,
        /// <summary>
        /// balancedtangential property
        /// </summary>
          [XmlEnum("balanced tangential")]
          balancedtangential,
        /// <summary>
        /// averageangle property
        /// </summary>
          [XmlEnum("average angle")]
          averageangle,
        /// <summary>
        /// radiusofcurvature property
        /// </summary>
          [XmlEnum("radius of curvature")]
          radiusofcurvature,
        /// <summary>
        /// inertial property
        /// </summary>
          inertial,
        /// <summary>
        /// custom property
        /// </summary>
          custom,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown,
        /// <summary>
        /// Has not been validated at this point, does not influence position computation for stations below.
        /// </summary>
          open,
        /// <summary>
        /// The quality is not ok, does not influence position computation for stations below.
        /// </summary>
          rejected,
        /// <summary>
        /// Has been validated and is used for position computation, used for position computation for stations below.
        /// </summary>
          position,
        /// <summary>
        /// unknown1 property
        /// </summary>
          [XmlEnum("unknown")]
          unknown1
        }
        /// <summary>
        /// This class represents the ItemChoiceType2 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType2 xsd enumeration.")]
        public enum ItemChoiceType2 
        {
        /// <summary>
        /// azi property
        /// </summary>
          azi,
        /// <summary>
        /// depth property
        /// </summary>
          depth,
        /// <summary>
        /// inc property
        /// </summary>
          inc,
        /// <summary>
        /// tvd property
        /// </summary>
          tvd
        }
        /// <summary>
        /// This class represents the ErrorTermSource xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ErrorTermSource xsd enumeration.")]
        public enum ErrorTermSource 
        {
        /// <summary>
        /// Errors arising from sensors in the survey tool 
        /// </summary>
          sensor,
        /// <summary>
        /// azimuthreference property
        /// </summary>
          [XmlEnum("azimuth reference")]
          azimuthreference,
        /// <summary>
        /// Errors arising from external magnetic field influences
        /// </summary>
          magnetic,
        /// <summary>
        /// Errors arising from the attitude of tool relative to borehole
        /// </summary>
          alignment,
        /// <summary>
        /// 
        /// </summary>
          misalignment,
        /// <summary>
        /// Errors arising from the measurement of depth 
        /// </summary>
          depth,
        /// <summary>
        /// Errors arising from the measurement of depth 
        /// </summary>
          reference,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SurveyToolOperatingMode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SurveyToolOperatingMode xsd enumeration.")]
        public enum SurveyToolOperatingMode 
        {
        /// <summary>
        /// Tool is operating in a stationary mode 
        /// </summary>
          stationary,
        /// <summary>
        /// continuousXY property
        /// </summary>
          [XmlEnum("continuous XY")]
          continuousXY,
        /// <summary>
        /// continuousZ property
        /// </summary>
          [XmlEnum("continuous Z")]
          continuousZ,
        /// <summary>
        /// continuousXYZ property
        /// </summary>
          [XmlEnum("continuous XYZ")]
          continuousXYZ,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the AuthorizationStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the AuthorizationStatus xsd enumeration.")]
        public enum AuthorizationStatus 
        {
        /// <summary>
        /// Not yet approved.
        /// </summary>
          draft,
        /// <summary>
        /// Approved for use.
        /// </summary>
          authorized,
        /// <summary>
        /// Obsolete; there is a newer version available.
        /// </summary>
          superceded,
        /// <summary>
        /// No longer approved in this or any other version.
        /// </summary>
          withdrawn,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ErrorPropagationMode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ErrorPropagationMode xsd enumeration.")]
        public enum ErrorPropagationMode 
        {
        /// <summary>
        /// Bias
        /// </summary>
          B,
        /// <summary>
        /// Random
        /// </summary>
          R,
        /// <summary>
        /// Systematic
        /// </summary>
          S,
        /// <summary>
        /// Well
        /// </summary>
          W,
        /// <summary>
        /// Global
        /// </summary>
          G,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ErrorModelMisalignmentMode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ErrorModelMisalignmentMode xsd enumeration.")]
        public enum ErrorModelMisalignmentMode 
        {
        /// <summary>
        /// Item1 property
        /// </summary>
          [XmlEnum("1")]
          Item1,
        /// <summary>
        /// Item2 property
        /// </summary>
          [XmlEnum("2")]
          Item2,
        /// <summary>
        /// Item3 property
        /// </summary>
          [XmlEnum("3")]
          Item3,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetSectionScope xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TargetSectionScope xsd enumeration.")]
        public enum TargetSectionScope 
        {
        /// <summary>
        /// continuous curve
        /// </summary>
          arc,
        /// <summary>
        /// straight line
        /// </summary>
          line,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetScope xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TargetScope xsd enumeration.")]
        public enum TargetScope 
        {
        /// <summary>
        /// Item3Dvolume property
        /// </summary>
          [XmlEnum("3D volume")]
          Item3Dvolume,
        /// <summary>
        /// 
        /// </summary>
          ellipsoid,
        /// <summary>
        /// Elliptical targets. Includes circle (semi-major = semi-minor axis). Any sections present are ignored.
        /// </summary>
          elliptical,
        /// <summary>
        /// Boundary Conditions. Use sections to describe, length and width ignore.
        /// </summary>
          hardLine,
        /// <summary>
        /// Includes half circle and polygon. Use sections to describe, length and width ignored. 
        /// </summary>
          irregular,
        /// <summary>
        /// leaseline property
        /// </summary>
          [XmlEnum("lease line")]
          leaseline,
        /// <summary>
        /// Line target
        /// </summary>
          line,
        /// <summary>
        /// Plane target. Used for horizontal wells. Any sections present are ignored.
        /// </summary>
          plane,
        /// <summary>
        /// Point Target. Any sections present are ignored.
        /// </summary>
          point,
        /// <summary>
        /// Rectangular Targets. Includes square (length = width). Any sections present are ignored.
        /// </summary>
          rectangular,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TargetCategory xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the TargetCategory xsd enumeration.")]
        public enum TargetCategory 
        {
        /// <summary>
        /// 
        /// </summary>
          geological,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimAnalysisMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimAnalysisMethod xsd enumeration.")]
        public enum StimAnalysisMethod 
        {
        /// <summary>
        /// Refers to the numeric average of the investigated variable of interest. In this case a diagnostic variable is produced by various methods and averaged to facilitate a diagnostic decision. 
        /// </summary>
          average,
        /// <summary>
        /// deltapressureovergtime property
        /// </summary>
          [XmlEnum("delta pressure over g-time")]
          deltapressureovergtime,
        /// <summary>
        /// deltapressureoverlineartime property
        /// </summary>
          [XmlEnum("delta pressure over linear time")]
          deltapressureoverlineartime,
        /// <summary>
        /// deltapressureoverradialtime property
        /// </summary>
          [XmlEnum("delta pressure over radial time")]
          deltapressureoverradialtime,
        /// <summary>
        /// gdk2d property
        /// </summary>
          [XmlEnum("gdk 2-d")]
          gdk2d,
        /// <summary>
        ///  A plot of bottomhole pressure over the log of a time ratio (Horner Time) to provide a first estimate of closure pressure and an extrapolated reservoir pressure. The Horner plot is used to determine if pseudo-radial flow developed during pressure decline. If a semi-log straight line is observed and the line can be extrapolated to a reasonable value of reservoir pressure, radial or pseudo-radial flow may be affecting the decline behavior. This suggests that the fracture is already closed and that data beyond the point of influence need not be considered in the evaluation of closure. The Horner plot provides a lower bound, first estimate of closure pressure. 
        /// </summary>
          horner,
        /// <summary>
        ///  A diagnostic plot of the change in pressure over the change in time to determine the pressure and time at which a fracture closed. 
        /// </summary>
          linear,
        /// <summary>
        /// loglog property
        /// </summary>
          [XmlEnum("log-log")]
          loglog,
        /// <summary>
        ///  Nolte analysis diagnostic derivative method is one of the methodologies for determining inflection points (i.e. fracture closure). Analyzing the derivative, dP/dt, as a function of time is a method of determining closure. The resulting trend represents the rate-of-change of pressure with respect to time. Depending on the type of data (i.e., flowback or natural decline), the derivative plot can be used to identify the closure by observing a characteristic change in the shape of this relationship. It accounts for mass conservation and fracture compliance and inherently assumes that the rate of pressure decline is proportional to the leakoff rate. Nolte was the first to implement this concept. In simple terms, if one can find a time function where the rate of pressure decline with respect to a time function is a constant during fracture closure, the closure time would be indicated by a deviation from the measured and theoretical pressure declines. 
        /// </summary>
          nolte,
        /// <summary>
        /// pdlcoefficient property
        /// </summary>
          [XmlEnum("pdl coefficient")]
          pdlcoefficient,
        /// <summary>
        /// perkinsandkern2d property
        /// </summary>
          [XmlEnum("perkins and kern 2-d")]
          perkinsandkern2d,
        /// <summary>
        /// radial2d property
        /// </summary>
          [XmlEnum("radial 2-d")]
          radial2d,
        /// <summary>
        /// squareroot property
        /// </summary>
          [XmlEnum("square root")]
          squareroot,
        /// <summary>
        /// thirdpartysoftware property
        /// </summary>
          [XmlEnum("third-party software")]
          thirdpartysoftware,
        /// <summary>
        /// A known method not one of the above. 
        /// </summary>
          other,
        /// <summary>
        /// Unknown
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimProppantType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimProppantType xsd enumeration.")]
        public enum StimProppantType 
        {
        /// <summary>
        /// Sand is a naturally occurring sand grains composed of finely divided rock and mineral particles.
        /// </summary>
          sand,
        /// <summary>
        /// manmadeproppant property
        /// </summary>
          [XmlEnum("manmade proppant")]
          manmadeproppant,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimAdditiveType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimAdditiveType xsd enumeration.")]
        public enum StimAdditiveType 
        {
        /// <summary>
        /// Substances used to wear away a surface by friction.
        /// </summary>
          abrasive,
        /// <summary>
        /// An accelerator additive.
        /// </summary>
          accelerator,
        /// <summary>
        /// acidinhibitorretarder property
        /// </summary>
          [XmlEnum("acid inhibitor/retarder")]
          acidinhibitorretarder,
        /// <summary>
        /// acidmaterial property
        /// </summary>
          [XmlEnum("acid material")]
          acidmaterial,
        /// <summary>
        /// acidsolubleadditive property
        /// </summary>
          [XmlEnum("acid soluble additive")]
          acidsolubleadditive,
        /// <summary>
        /// acidsource property
        /// </summary>
          [XmlEnum("acid source")]
          acidsource,
        /// <summary>
        /// An activator additive.
        /// </summary>
          activator,
        /// <summary>
        /// additivematerial property
        /// </summary>
          [XmlEnum("additive material")]
          additivematerial,
        /// <summary>
        /// An alcohol additive.
        /// </summary>
          alcohol,
        /// <summary>
        /// antiSludge property
        /// </summary>
          [XmlEnum("anti-Sludge")]
          antiSludge,
        /// <summary>
        /// antisulfidecracker property
        /// </summary>
          [XmlEnum("anti-sulfide cracker")]
          antisulfidecracker,
        /// <summary>
        /// aromaticsolvent property
        /// </summary>
          [XmlEnum("aromatic solvent")]
          aromaticsolvent,
        /// <summary>
        /// A biocide additive, is a chemical substance capable of killing living organisms and to protect them against biological infestation and growth.
        /// </summary>
          biocide,
        /// <summary>
        /// boreholestabilizer property
        /// </summary>
          [XmlEnum("borehole stabilizer")]
          boreholestabilizer,
        /// <summary>
        /// A breaker additive, Chemicals used to reduce the viscosity of fracturing fluids.
        /// </summary>
          breaker,
        /// <summary>
        /// bridgingagent property
        /// </summary>
          [XmlEnum("bridging agent")]
          bridgingagent,
        /// <summary>
        /// A buffer additive, A buffer solution is an aqueous solution consisting of a mixture of a weak acid and its conjugate base or a weak base and its conjugate acid. It has the property that the pH of the solution changes very little when a small amount of acid or base is added to it. Buffer solutions are used as a means of keeping pH at a nearly constant value in a wide variety of chemical applications.
        /// </summary>
          buffer,
        /// <summary>
        /// calciumremover property
        /// </summary>
          [XmlEnum("calcium remover")]
          calciumremover,
        /// <summary>
        /// carryingagent property
        /// </summary>
          [XmlEnum("carrying agent")]
          carryingagent,
        /// <summary>
        /// A material used in a process to activate a chemical reaction.
        /// </summary>
          catalyst,
        /// <summary>
        /// Clay is a naturally occurring material composed primarily of fine-grained minerals, which show plasticity through a variable range of water content.
        /// </summary>
          clay,
        /// <summary>
        /// claycontrol property
        /// </summary>
          [XmlEnum("clay control")]
          claycontrol,
        /// <summary>
        /// conductivityenhancer property
        /// </summary>
          [XmlEnum("conductivity enhancer")]
          conductivityenhancer,
        /// <summary>
        /// conformancecontrol property
        /// </summary>
          [XmlEnum("conformance control")]
          conformancecontrol,
        /// <summary>
        /// conformancecaterial property
        /// </summary>
          [XmlEnum("conformance caterial")]
          conformancecaterial,
        /// <summary>
        /// corrosioninhibitor property
        /// </summary>
          [XmlEnum("corrosion inhibitor")]
          corrosioninhibitor,
        /// <summary>
        /// crosslinkenhancer property
        /// </summary>
          [XmlEnum("crosslink enhancer")]
          crosslinkenhancer,
        /// <summary>
        /// A crosslinker additive, The crosslinker reacts with the multiple-strand polymer to couple the molecules, creating a fluid of high, but closely controlled, viscosity.
        /// </summary>
          crosslinker,
        /// <summary>
        /// curingagent property
        /// </summary>
          [XmlEnum("curing agent")]
          curingagent,
        /// <summary>
        /// A defoaming agent.
        /// </summary>
          defoamer,
        /// <summary>
        /// A demulsifier additive.
        /// </summary>
          demulsifier,
        /// <summary>
        /// A material used to dilute the base product.
        /// </summary>
          diluent,
        /// <summary>
        /// A dispersant agent.
        /// </summary>
          dispersant,
        /// <summary>
        /// A diverter agent.
        /// </summary>
          diverter,
        /// <summary>
        /// elastomericadditive property
        /// </summary>
          [XmlEnum("elastomeric additive")]
          elastomericadditive,
        /// <summary>
        /// An emulsifier agent.
        /// </summary>
          emulsifier,
        /// <summary>
        /// epoxyresin property
        /// </summary>
          [XmlEnum("epoxy resin")]
          epoxyresin,
        /// <summary>
        /// expoxyresinagent property
        /// </summary>
          [XmlEnum("expoxy resin agent")]
          expoxyresinagent,
        /// <summary>
        /// An expander agent.
        /// </summary>
          expander,
        /// <summary>
        /// filtrationcontrol property
        /// </summary>
          [XmlEnum("filtration control")]
          filtrationcontrol,
        /// <summary>
        /// An anti-suspension agent. Used to "knock" solids out of suspension.
        /// </summary>
          flocculant,
        /// <summary>
        /// fluidlosscontrol property
        /// </summary>
          [XmlEnum("fluid loss control")]
          fluidlosscontrol,
        /// <summary>
        /// flushspaceradditive property
        /// </summary>
          [XmlEnum("flush/spacer additive")]
          flushspaceradditive,
        /// <summary>
        /// A foamer additive.
        /// </summary>
          foamer,
        /// <summary>
        /// formationsealer property
        /// </summary>
          [XmlEnum("formation sealer")]
          formationsealer,
        /// <summary>
        /// freewatercontrol property
        /// </summary>
          [XmlEnum("free water control")]
          freewatercontrol,
        /// <summary>
        /// frictionreducer property
        /// </summary>
          [XmlEnum("friction reducer")]
          frictionreducer,
        /// <summary>
        /// Any general purpose gas.
        /// </summary>
          gas,
        /// <summary>
        /// gasmigrationcontrol property
        /// </summary>
          [XmlEnum("gas migration control")]
          gasmigrationcontrol,
        /// <summary>
        /// gelstabilizer property
        /// </summary>
          [XmlEnum("gel stabilizer")]
          gelstabilizer,
        /// <summary>
        /// gellingagent property
        /// </summary>
          [XmlEnum("gelling agent")]
          gellingagent,
        /// <summary>
        /// H2Sscavenger property
        /// </summary>
          [XmlEnum("H2S scavenger")]
          H2Sscavenger,
        /// <summary>
        /// An additive that intensifies the activity of another.
        /// </summary>
          intensifier,
        /// <summary>
        /// ironcontrol property
        /// </summary>
          [XmlEnum("iron control")]
          ironcontrol,
        /// <summary>
        /// lostcirculationadditive property
        /// </summary>
          [XmlEnum("lost circulation additive")]
          lostcirculationadditive,
        /// <summary>
        /// lowfluidlosscontrol property
        /// </summary>
          [XmlEnum("low fluid loss control")]
          lowfluidlosscontrol,
        /// <summary>
        /// A lubricant additive.
        /// </summary>
          lubricant,
        /// <summary>
        /// miscadditive property
        /// </summary>
          [XmlEnum("misc additive")]
          miscadditive,
        /// <summary>
        /// mixingfluid property
        /// </summary>
          [XmlEnum("mixing fluid")]
          mixingfluid,
        /// <summary>
        /// mudremovaladditive property
        /// </summary>
          [XmlEnum("mud removal additive")]
          mudremovaladditive,
        /// <summary>
        /// mudthinner property
        /// </summary>
          [XmlEnum("mud thinner")]
          mudthinner,
        /// <summary>
        /// mutualsolvent property
        /// </summary>
          [XmlEnum("mutual solvent")]
          mutualsolvent,
        /// <summary>
        /// An oxidizing agent, (also called an oxidant, oxidizer or oxidiser) can be defined as either: a chemical compound that readily transfers oxygen atoms, or a substance that gains electrons in a redox chemical reaction.
        /// </summary>
          oxydizer,
        /// <summary>
        /// oxygenscavenger property
        /// </summary>
          [XmlEnum("oxygen scavenger")]
          oxygenscavenger,
        /// <summary>
        /// parafincontrol property
        /// </summary>
          [XmlEnum("parafin control")]
          parafincontrol,
        /// <summary>
        /// penetratingagent property
        /// </summary>
          [XmlEnum("penetrating agent")]
          penetratingagent,
        /// <summary>
        /// A polymer is a large molecule (macromolecule) composed of repeating structural units connected by covalent chemical bonds. A material used in cement and mud slurries as a friction reducer, gelling agent, viscosifier, suspending agent, or fluid loss control agent.
        /// </summary>
          polymer,
        /// <summary>
        /// proppantstabilizer property
        /// </summary>
          [XmlEnum("proppant stabilizer")]
          proppantstabilizer,
        /// <summary>
        /// radioactivetracer property
        /// </summary>
          [XmlEnum("radioactive tracer")]
          radioactivetracer,
        /// <summary>
        /// rawacid property
        /// </summary>
          [XmlEnum("raw acid")]
          rawacid,
        /// <summary>
        /// relativepermmodifier property
        /// </summary>
          [XmlEnum("relative perm modifier")]
          relativepermmodifier,
        /// <summary>
        /// A retarder additive.
        /// </summary>
          retarder,
        /// <summary>
        /// A salt additive.
        /// </summary>
          salt,
        /// <summary>
        /// Naturally occurring granular material composed of finely divided rock and mineral particles.
        /// </summary>
          sand,
        /// <summary>
        /// sandcontrolmaterial property
        /// </summary>
          [XmlEnum("sand control material")]
          sandcontrolmaterial,
        /// <summary>
        /// scalecontroladditive property
        /// </summary>
          [XmlEnum("scale control additive")]
          scalecontroladditive,
        /// <summary>
        /// A special additive, substance added to prevent unwanted change in state of another substance.
        /// </summary>
          stabilizer,
        /// <summary>
        /// strengthretrogression property
        /// </summary>
          [XmlEnum("strength retrogression")]
          strengthretrogression,
        /// <summary>
        /// sulfidescavenger property
        /// </summary>
          [XmlEnum("sulfide scavenger")]
          sulfidescavenger,
        /// <summary>
        /// A surfactant agent.
        /// </summary>
          surfactant,
        /// <summary>
        /// suspensionagent property
        /// </summary>
          [XmlEnum("suspension agent")]
          suspensionagent,
        /// <summary>
        /// A tackiness agent; a substance which is added in order to increase the stickiness of a compound.
        /// </summary>
          tactifier,
        /// <summary>
        /// A viscosifier additive.
        /// </summary>
          viscosifier,
        /// <summary>
        /// wateradditive property
        /// </summary>
          [XmlEnum("water additive")]
          wateradditive,
        /// <summary>
        /// watermanagementmaterial property
        /// </summary>
          [XmlEnum("water management material")]
          watermanagementmaterial,
        /// <summary>
        /// pHcontrol property
        /// </summary>
          [XmlEnum("pH control")]
          pHcontrol,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimFluidType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimFluidType xsd enumeration.")]
        public enum StimFluidType 
        {
        /// <summary>
        /// acidbased property
        /// </summary>
          [XmlEnum("acid-based")]
          acidbased,
        /// <summary>
        /// A carrier medium in which gas is the primary medium of mixing and transport. 
        /// </summary>
          gas,
        /// <summary>
        /// oilbased property
        /// </summary>
          [XmlEnum("oil-based")]
          oilbased,
        /// <summary>
        /// waterbased property
        /// </summary>
          [XmlEnum("water-based")]
          waterbased
        }
        /// <summary>
        /// This class represents the StimFluidSubtype xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimFluidSubtype xsd enumeration.")]
        public enum StimFluidSubtype 
        {
        /// <summary>
        /// Chemical substance with a pH less than 7.
        /// </summary>
          acid,
        /// <summary>
        /// Chemical substance with a pH greater than 7.
        /// </summary>
          @base,
        /// <summary>
        /// carbondioxide property
        /// </summary>
          [XmlEnum("carbon dioxide")]
          carbondioxide,
        /// <summary>
        /// carbondioxideandnitrogen property
        /// </summary>
          [XmlEnum("carbon dioxide and nitrogen")]
          carbondioxideandnitrogen,
        /// <summary>
        /// carbondioxideandwater property
        /// </summary>
          [XmlEnum("carbon dioxide and water")]
          carbondioxideandwater,
        /// <summary>
        /// Lightweight hydrocarbon condensed from wet natural gas.
        /// </summary>
          condensate,
        /// <summary>
        /// crosslinkedgel property
        /// </summary>
          [XmlEnum("cross-linked gel")]
          crosslinkedgel,
        /// <summary>
        /// crudeoil property
        /// </summary>
          [XmlEnum("crude oil")]
          crudeoil,
        /// <summary>
        /// A specific fractional distillate of petroleum fuel oil.
        /// </summary>
          diesel,
        /// <summary>
        /// Fluid pumped with a gas such as air, carbon dioxide or nitrogen.
        /// </summary>
          foam,
        /// <summary>
        /// fracturingoil property
        /// </summary>
          [XmlEnum("fracturing oil")]
          fracturingoil,
        /// <summary>
        /// freshwater property
        /// </summary>
          [XmlEnum("fresh water")]
          freshwater,
        /// <summary>
        /// gelledacid property
        /// </summary>
          [XmlEnum("gelled acid")]
          gelledacid,
        /// <summary>
        /// gelledcondensate property
        /// </summary>
          [XmlEnum("gelled condensate")]
          gelledcondensate,
        /// <summary>
        /// gelledcrude property
        /// </summary>
          [XmlEnum("gelled crude")]
          gelledcrude,
        /// <summary>
        /// gelleddiesel property
        /// </summary>
          [XmlEnum("gelled diesel")]
          gelleddiesel,
        /// <summary>
        /// gelledoil property
        /// </summary>
          [XmlEnum("gelled oil")]
          gelledoil,
        /// <summary>
        /// gelledsaltwater property
        /// </summary>
          [XmlEnum("gelled salt water")]
          gelledsaltwater,
        /// <summary>
        /// hotcondensate property
        /// </summary>
          [XmlEnum("hot condensate")]
          hotcondensate,
        /// <summary>
        /// hotfreshwater property
        /// </summary>
          [XmlEnum("hot fresh water")]
          hotfreshwater,
        /// <summary>
        /// hotoil property
        /// </summary>
          [XmlEnum("hot oil")]
          hotoil,
        /// <summary>
        /// hotsaltwater property
        /// </summary>
          [XmlEnum("hot salt water")]
          hotsaltwater,
        /// <summary>
        /// A fluid system with two or more fluid types pumped during the same treatment.
        /// </summary>
          hybrid,
        /// <summary>
        /// lineargel property
        /// </summary>
          [XmlEnum("linear gel")]
          lineargel,
        /// <summary>
        /// liquefiedpetroleumgas property
        /// </summary>
          [XmlEnum("liquefied petroleum gas")]
          liquefiedpetroleumgas,
        /// <summary>
        /// nitrogen gas
        /// </summary>
          nitrogen,
        /// <summary>
        /// Any substance that is liquid at ambient temperatures and does not mix with water but may mix with other oils and organic solvents. This general definition includes vegetable oils, volatile essential oils, petrochemical oils, and synthetic oils.
        /// </summary>
          oil,
        /// <summary>
        /// producedwater property
        /// </summary>
          [XmlEnum("produced water")]
          producedwater,
        /// <summary>
        /// saltwater property
        /// </summary>
          [XmlEnum("salt water")]
          saltwater,
        /// <summary>
        /// slickwater property
        /// </summary>
          [XmlEnum("slick water")]
          slickwater,
        /// <summary>
        /// Other stimulation fluid.
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the StimStageType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimStageType xsd enumeration.")]
        public enum StimStageType 
        {
        /// <summary>
        /// A stage in which the fluid type is an acid.
        /// </summary>
          acid,
        /// <summary>
        /// acidspearhead property
        /// </summary>
          [XmlEnum("acid spearhead")]
          acidspearhead,
        /// <summary>
        /// acidballout property
        /// </summary>
          [XmlEnum("acid ball out")]
          acidballout,
        /// <summary>
        /// acidbreakdown property
        /// </summary>
          [XmlEnum("acid breakdown")]
          acidbreakdown,
        /// <summary>
        /// ballout property
        /// </summary>
          [XmlEnum("ball out")]
          ballout,
        /// <summary>
        /// The case in which a rock matrix of an exposed formation fractures and allows fluid to be injected.
        /// </summary>
          breakdown,
        /// <summary>
        /// chemicalwash property
        /// </summary>
          [XmlEnum("chemical wash")]
          chemicalwash,
        /// <summary>
        /// To pump fluid through the whole active fluid system.
        /// </summary>
          circulate,
        /// <summary>
        /// A stage that displaces the existing fluid in the wellbore.
        /// </summary>
          displacement,
        /// <summary>
        /// A stage used in stimulation treatments to ensure uniform injection over the area to be treated.
        /// </summary>
          diverter,
        /// <summary>
        /// fluidefficiencytest property
        /// </summary>
          [XmlEnum("fluid efficiency test")]
          fluidefficiencytest,
        /// <summary>
        /// A stage in which fluids are allowed to flow from the well following a treatment in preparation for a later treatment or for returning the well to production.
        /// </summary>
          flowback,
        /// <summary>
        /// A stage in which a specially prepared fluid is used to displace preceeding treatments away from the wellbore.
        /// </summary>
          flush,
        /// <summary>
        /// foamedacid property
        /// </summary>
          [XmlEnum("foamed acid")]
          foamedacid,
        /// <summary>
        /// A stage in which a specially prepared fluid is pumped through a jet.
        /// </summary>
          hydrajet,
        /// <summary>
        /// loadwell property
        /// </summary>
          [XmlEnum("load well")]
          loadwell,
        /// <summary>
        /// loadannulus property
        /// </summary>
          [XmlEnum("load annulus")]
          loadannulus,
        /// <summary>
        /// A stage in which a specially prepared fluid is used to displace preceeding treatments away from the wellbore in excess of the normal flush volume.
        /// </summary>
          overflush,
        /// <summary>
        /// A stage which uses a specially prepared fluid generally preceeding a fracture stimulation treatment to propagate the initiated fracture.
        /// </summary>
          pad,
        /// <summary>
        /// pumpin property
        /// </summary>
          [XmlEnum("pump-in")]
          pumpin,
        /// <summary>
        /// preJob property
        /// </summary>
          [XmlEnum("pre-Job")]
          preJob,
        /// <summary>
        /// preflush property
        /// </summary>
          [XmlEnum("pre-flush")]
          preflush,
        /// <summary>
        /// prepad property
        /// </summary>
          [XmlEnum("pre-pad")]
          prepad,
        /// <summary>
        /// shutin property
        /// </summary>
          [XmlEnum("shut-in")]
          shutin,
        /// <summary>
        /// shutinforFETanalysis property
        /// </summary>
          [XmlEnum("shut-in for FET analysis")]
          shutinforFETanalysis,
        /// <summary>
        /// proppantladenfluid property
        /// </summary>
          [XmlEnum("proppant laden fluid")]
          proppantladenfluid,
        /// <summary>
        /// A stage in which a mixture of suspended solids and liquids is pumped. A proppant laden fluid is also a slurry, but a slurry is not necessarily a proppant laden fluid.
        /// </summary>
          slurry,
        /// <summary>
        /// sandslug property
        /// </summary>
          [XmlEnum("sand slug")]
          sandslug,
        /// <summary>
        /// A stage that provides a fluid cusion or separator between two dissimilar fluids.
        /// </summary>
          spacer,
        /// <summary>
        /// spotacid property
        /// </summary>
          [XmlEnum("spot acid")]
          spotacid,
        /// <summary>
        /// stepratetest property
        /// </summary>
          [XmlEnum("step rate test")]
          stepratetest,
        /// <summary>
        /// A stage used to identify fluid injection to the wellbore.
        /// </summary>
          treatment,
        /// <summary>
        /// A stage of a known type not already listed here.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StimStageFlowPathType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StimStageFlowPathType xsd enumeration.")]
        public enum StimStageFlowPathType 
        {
        /// <summary>
        /// Fluid is conducted through the annulus, (volume between casing and tubing).
        /// </summary>
          annulus,
        /// <summary>
        /// Fluid is conducted through the casing, (no tubing present).
        /// </summary>
          casing,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// drillpipe property
        /// </summary>
          [XmlEnum("drill pipe")]
          drillpipe,
        /// <summary>
        /// openhole property
        /// </summary>
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// Fluid is conducted through the tubing.
        /// </summary>
          tubing,
        /// <summary>
        /// tubingandannulus property
        /// </summary>
          [XmlEnum("tubing and annulus")]
          tubingandannulus,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PIDXCommodityCode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PIDXCommodityCode xsd enumeration.")]
        public enum PIDXCommodityCode 
        {
        /// <summary>
        /// Item71131001 property
        /// </summary>
          [XmlEnum("71131001")]
          Item71131001,
        /// <summary>
        /// Item71131002 property
        /// </summary>
          [XmlEnum("71131002")]
          Item71131002,
        /// <summary>
        /// Item71131003 property
        /// </summary>
          [XmlEnum("71131003")]
          Item71131003,
        /// <summary>
        /// Item71131004 property
        /// </summary>
          [XmlEnum("71131004")]
          Item71131004,
        /// <summary>
        /// Item71131005 property
        /// </summary>
          [XmlEnum("71131005")]
          Item71131005,
        /// <summary>
        /// Item71131006 property
        /// </summary>
          [XmlEnum("71131006")]
          Item71131006,
        /// <summary>
        /// Item71131007 property
        /// </summary>
          [XmlEnum("71131007")]
          Item71131007,
        /// <summary>
        /// Item71131008 property
        /// </summary>
          [XmlEnum("71131008")]
          Item71131008,
        /// <summary>
        /// Item71131009 property
        /// </summary>
          [XmlEnum("71131009")]
          Item71131009,
        /// <summary>
        /// Item71131010 property
        /// </summary>
          [XmlEnum("71131010")]
          Item71131010,
        /// <summary>
        /// Item71131011 property
        /// </summary>
          [XmlEnum("71131011")]
          Item71131011,
        /// <summary>
        /// Item71131012 property
        /// </summary>
          [XmlEnum("71131012")]
          Item71131012,
        /// <summary>
        /// Item71131013 property
        /// </summary>
          [XmlEnum("71131013")]
          Item71131013,
        /// <summary>
        /// Item71131014 property
        /// </summary>
          [XmlEnum("71131014")]
          Item71131014,
        /// <summary>
        /// Item71131015 property
        /// </summary>
          [XmlEnum("71131015")]
          Item71131015,
        /// <summary>
        /// Item71131016 property
        /// </summary>
          [XmlEnum("71131016")]
          Item71131016,
        /// <summary>
        /// Item71131018 property
        /// </summary>
          [XmlEnum("71131018")]
          Item71131018,
        /// <summary>
        /// Item71131019 property
        /// </summary>
          [XmlEnum("71131019")]
          Item71131019
        }
        /// <summary>
        /// This class represents the ShowRating xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowRating xsd enumeration.")]
        public enum ShowRating 
        {
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// verypoor property
        /// </summary>
          [XmlEnum("very poor")]
          verypoor,
        /// <summary>
        /// 
        /// </summary>
          poor,
        /// <summary>
        /// 
        /// </summary>
          fair,
        /// <summary>
        /// 
        /// </summary>
          good,
        /// <summary>
        /// verygood property
        /// </summary>
          [XmlEnum("very good")]
          verygood,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowFluorescence xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowFluorescence xsd enumeration.")]
        public enum ShowFluorescence 
        {
        /// <summary>
        /// 
        /// </summary>
          faint,
        /// <summary>
        /// 
        /// </summary>
          bright,
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowSpeed xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowSpeed xsd enumeration.")]
        public enum ShowSpeed 
        {
        /// <summary>
        /// 
        /// </summary>
          slow,
        /// <summary>
        /// moderatelyfast property
        /// </summary>
          [XmlEnum("moderately fast")]
          moderatelyfast,
        /// <summary>
        /// 
        /// </summary>
          fast,
        /// <summary>
        /// 
        /// </summary>
          instantaneous,
        /// <summary>
        /// 
        /// </summary>
          none,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ShowLevel xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ShowLevel xsd enumeration.")]
        public enum ShowLevel 
        {
        /// <summary>
        /// 
        /// </summary>
          blooming,
        /// <summary>
        /// 
        /// </summary>
          streaming,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskType xsd enumeration.")]
        public enum RiskType 
        {
        /// <summary>
        /// 
        /// </summary>
          risk,
        /// <summary>
        /// 
        /// </summary>
          @event,
        /// <summary>
        /// nearmiss property
        /// </summary>
          [XmlEnum("near miss")]
          nearmiss,
        /// <summary>
        /// bestpractice property
        /// </summary>
          [XmlEnum("best practice")]
          bestpractice,
        /// <summary>
        /// lessonslearned property
        /// </summary>
          [XmlEnum("lessons learned")]
          lessonslearned,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskCategory xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskCategory xsd enumeration.")]
        public enum RiskCategory 
        {
        /// <summary>
        /// 
        /// </summary>
          hydraulics,
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// timerelated property
        /// </summary>
          [XmlEnum("time related")]
          timerelated,
        /// <summary>
        /// wellborestability property
        /// </summary>
          [XmlEnum("wellbore stability")]
          wellborestability,
        /// <summary>
        /// directionaldrilling property
        /// </summary>
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// 
        /// </summary>
          bit,
        /// <summary>
        /// equipmentfailure property
        /// </summary>
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// 
        /// </summary>
          completion,
        /// <summary>
        /// 
        /// </summary>
          casing,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RiskSubCategory xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskSubCategory xsd enumeration.")]
        public enum RiskSubCategory 
        {
        /// <summary>
        /// gaskick property
        /// </summary>
          [XmlEnum("gas kick")]
          gaskick,
        /// <summary>
        /// shallowwaterinflux property
        /// </summary>
          [XmlEnum("shallow water influx")]
          shallowwaterinflux,
        /// <summary>
        /// otherinfluxorkicks property
        /// </summary>
          [XmlEnum("other influx or kicks")]
          otherinfluxorkicks,
        /// <summary>
        /// losscirculation property
        /// </summary>
          [XmlEnum("loss circulation")]
          losscirculation,
        /// <summary>
        /// poorholecleaning property
        /// </summary>
          [XmlEnum("poor hole cleaning")]
          poorholecleaning,
        /// <summary>
        /// goodholecleaningathighROP property
        /// </summary>
          [XmlEnum("good hole cleaning at high ROP")]
          goodholecleaningathighROP,
        /// <summary>
        /// highmudweight property
        /// </summary>
          [XmlEnum("high mud weight")]
          highmudweight,
        /// <summary>
        /// specialadditivesneeded property
        /// </summary>
          [XmlEnum("special additives needed")]
          specialadditivesneeded,
        /// <summary>
        /// gumboproblems property
        /// </summary>
          [XmlEnum("gumbo problems")]
          gumboproblems,
        /// <summary>
        /// highECDrheologyrelated property
        /// </summary>
          [XmlEnum("high ECD - rheology related")]
          highECDrheologyrelated,
        /// <summary>
        /// excessivecirculation property
        /// </summary>
          [XmlEnum("excessive circulation")]
          excessivecirculation,
        /// <summary>
        /// performingakill property
        /// </summary>
          [XmlEnum("performing a kill")]
          performingakill,
        /// <summary>
        /// mudweightchange property
        /// </summary>
          [XmlEnum("mud weight change")]
          mudweightchange,
        /// <summary>
        /// excessivepipecementscaling property
        /// </summary>
          [XmlEnum("excessive pipe cement scaling")]
          excessivepipecementscaling,
        /// <summary>
        /// pitgainorloss property
        /// </summary>
          [XmlEnum("pit gain or loss")]
          pitgainorloss,
        /// <summary>
        /// mudstabilityproblems property
        /// </summary>
          [XmlEnum("mud stability problems")]
          mudstabilityproblems,
        /// <summary>
        /// shallowgasflow property
        /// </summary>
          [XmlEnum("shallow gas flow")]
          shallowgasflow,
        /// <summary>
        /// twistoff property
        /// </summary>
          [XmlEnum("twist off")]
          twistoff,
        /// <summary>
        /// stuckpipe property
        /// </summary>
          [XmlEnum("stuck pipe")]
          stuckpipe,
        /// <summary>
        /// wirelinestuckinhole property
        /// </summary>
          [XmlEnum("wireline stuck in hole")]
          wirelinestuckinhole,
        /// <summary>
        /// stickandslip property
        /// </summary>
          [XmlEnum("stick and slip")]
          stickandslip,
        /// <summary>
        /// vibrationaxial property
        /// </summary>
          [XmlEnum("vibration - axial")]
          vibrationaxial,
        /// <summary>
        /// vibrationtorsional property
        /// </summary>
          [XmlEnum("vibration - torsional")]
          vibrationtorsional,
        /// <summary>
        /// vibrationtransverse property
        /// </summary>
          [XmlEnum("vibration - transverse")]
          vibrationtransverse,
        /// <summary>
        /// vibrationunknownorroughdrilling property
        /// </summary>
          [XmlEnum("vibration unknown or rough drilling")]
          vibrationunknownorroughdrilling,
        /// <summary>
        /// unevenwearofBHA property
        /// </summary>
          [XmlEnum("uneven wear of BHA")]
          unevenwearofBHA,
        /// <summary>
        /// unevenwearofdrillstring property
        /// </summary>
          [XmlEnum("uneven wear of drillstring")]
          unevenwearofdrillstring,
        /// <summary>
        /// excessivetorque property
        /// </summary>
          [XmlEnum("excessive torque")]
          excessivetorque,
        /// <summary>
        /// excessivedrag property
        /// </summary>
          [XmlEnum("excessive drag")]
          excessivedrag,
        /// <summary>
        /// reaminggreaterthan2hours property
        /// </summary>
          [XmlEnum("reaming greater than 2 hours")]
          reaminggreaterthan2hours,
        /// <summary>
        /// 
        /// </summary>
          washouts,
        /// <summary>
        /// tightholeoroverPull property
        /// </summary>
          [XmlEnum("tight hole or overPull")]
          tightholeoroverPull,
        /// <summary>
        /// failedinspectionsorfatiguewear property
        /// </summary>
          [XmlEnum("failed inspections or fatigue wear")]
          failedinspectionsorfatiguewear,
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// drillinggreaterthan1000feetday property
        /// </summary>
          [XmlEnum("drilling greater than 1000 feet/day")]
          drillinggreaterthan1000feetday,
        /// <summary>
        /// drillinggreaterthan2000feetday property
        /// </summary>
          [XmlEnum("drilling greater than 2000 feet/day")]
          drillinggreaterthan2000feetday,
        /// <summary>
        /// drillinglessthan20feetday property
        /// </summary>
          [XmlEnum("drilling less than 20 feet/day")]
          drillinglessthan20feetday,
        /// <summary>
        /// tripsgreaterthan24hours property
        /// </summary>
          [XmlEnum("trips greater than 24 hours")]
          tripsgreaterthan24hours,
        /// <summary>
        /// excessivetimeforBHAmakeup property
        /// </summary>
          [XmlEnum("excessive time for BHA makeup")]
          excessivetimeforBHAmakeup,
        /// <summary>
        /// waitingondecisions property
        /// </summary>
          [XmlEnum("waiting on decisions")]
          waitingondecisions,
        /// <summary>
        /// waitingonweather property
        /// </summary>
          [XmlEnum("waiting on weather")]
          waitingonweather,
        /// <summary>
        /// waitingontools property
        /// </summary>
          [XmlEnum("waiting on tools")]
          waitingontools,
        /// <summary>
        /// sloughingorpackoffs property
        /// </summary>
          [XmlEnum("sloughing or packoffs")]
          sloughingorpackoffs,
        /// <summary>
        /// 
        /// </summary>
          ballooning,
        /// <summary>
        /// fractureproblems property
        /// </summary>
          [XmlEnum("fracture problems")]
          fractureproblems,
        /// <summary>
        /// unstablezones property
        /// </summary>
          [XmlEnum("unstable zones")]
          unstablezones,
        /// <summary>
        /// formationintegritytest property
        /// </summary>
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        /// <summary>
        /// leakofftest property
        /// </summary>
          [XmlEnum("leak-off test")]
          leakofftest,
        /// <summary>
        /// 
        /// </summary>
          tectonics,
        /// <summary>
        /// porepressure property
        /// </summary>
          [XmlEnum("pore pressure")]
          porepressure,
        /// <summary>
        /// 
        /// </summary>
          breakouts,
        /// <summary>
        /// bedparallel property
        /// </summary>
          [XmlEnum("bed parallel")]
          bedparallel,
        /// <summary>
        /// wellborestability property
        /// </summary>
          [XmlEnum("wellbore stability")]
          wellborestability,
        /// <summary>
        /// excessivedoglegs property
        /// </summary>
          [XmlEnum("excessive doglegs")]
          excessivedoglegs,
        /// <summary>
        /// 
        /// </summary>
          sidetrack,
        /// <summary>
        /// BHAchangefordirectional property
        /// </summary>
          [XmlEnum("BHA change for directional")]
          BHAchangefordirectional,
        /// <summary>
        /// wrongtotalflowarea property
        /// </summary>
          [XmlEnum("wrong total flow area")]
          wrongtotalflowarea,
        /// <summary>
        /// wellcollisionactual property
        /// </summary>
          [XmlEnum("well collision - actual")]
          wellcollisionactual,
        /// <summary>
        /// wellcollisiontechnical property
        /// </summary>
          [XmlEnum("well collision - technical")]
          wellcollisiontechnical,
        /// <summary>
        /// 
        /// </summary>
          geosteering,
        /// <summary>
        /// abnormaltendencychanges property
        /// </summary>
          [XmlEnum("abnormal tendency changes")]
          abnormaltendencychanges,
        /// <summary>
        /// 
        /// </summary>
          resurveying,
        /// <summary>
        /// infieldreferencingIFRactions property
        /// </summary>
          [XmlEnum("in-field referencing (IFR) actions")]
          infieldreferencingIFRactions,
        /// <summary>
        /// bitorBHAperformance property
        /// </summary>
          [XmlEnum("bit or BHA performance")]
          bitorBHAperformance,
        /// <summary>
        /// drillingoptimization property
        /// </summary>
          [XmlEnum("drilling optimization")]
          drillingoptimization,
        /// <summary>
        /// bitballing property
        /// </summary>
          [XmlEnum("bit balling")]
          bitballing,
        /// <summary>
        /// lostconesorbrokencutters property
        /// </summary>
          [XmlEnum("lost cones or broken cutters")]
          lostconesorbrokencutters,
        /// <summary>
        /// excessivebitwearorgauge property
        /// </summary>
          [XmlEnum("excessive bit wear or gauge")]
          excessivebitwearorgauge,
        /// <summary>
        /// lowrateofbitpenetration property
        /// </summary>
          [XmlEnum("low rate of bit penetration")]
          lowrateofbitpenetration,
        /// <summary>
        /// highrateofbitpenetration property
        /// </summary>
          [XmlEnum("high rate of bit penetration")]
          highrateofbitpenetration,
        /// <summary>
        /// downholetool property
        /// </summary>
          [XmlEnum("downhole tool")]
          downholetool,
        /// <summary>
        /// surfacesystem property
        /// </summary>
          [XmlEnum("surface system")]
          surfacesystem,
        /// <summary>
        /// motororrotarysteerablesystemfailure property
        /// </summary>
          [XmlEnum("motor or rotary steerable system failure")]
          motororrotarysteerablesystemfailure,
        /// <summary>
        /// topdrivefailure property
        /// </summary>
          [XmlEnum("topdrive failure")]
          topdrivefailure,
        /// <summary>
        /// hoistingequipmentfailure property
        /// </summary>
          [XmlEnum("hoisting equipment failure")]
          hoistingequipmentfailure,
        /// <summary>
        /// circulatingequipmentfailure property
        /// </summary>
          [XmlEnum("circulating equipment failure")]
          circulatingequipmentfailure,
        /// <summary>
        /// electricalsystemfailure property
        /// </summary>
          [XmlEnum("electrical system failure")]
          electricalsystemfailure,
        /// <summary>
        /// blowoutpreventerevents property
        /// </summary>
          [XmlEnum("blow out preventer events")]
          blowoutpreventerevents,
        /// <summary>
        /// surfaceinstrumentationproblems property
        /// </summary>
          [XmlEnum("surface instrumentation problems")]
          surfaceinstrumentationproblems,
        /// <summary>
        /// rigcommunications property
        /// </summary>
          [XmlEnum("rig communications")]
          rigcommunications,
        /// <summary>
        /// completionequipmentfailure property
        /// </summary>
          [XmlEnum("completion equipment failure")]
          completionequipmentfailure,
        /// <summary>
        /// miscellaneousrigequipment property
        /// </summary>
          [XmlEnum("miscellaneous rig equipment")]
          miscellaneousrigequipment,
        /// <summary>
        /// toolorequipmentfailure property
        /// </summary>
          [XmlEnum("tool or equipment failure")]
          toolorequipmentfailure,
        /// <summary>
        /// squeezejobs property
        /// </summary>
          [XmlEnum("squeeze jobs")]
          squeezejobs,
        /// <summary>
        /// casingsurgelosses property
        /// </summary>
          [XmlEnum("casing surge losses")]
          casingsurgelosses,
        /// <summary>
        /// stuckcasingorcompletion property
        /// </summary>
          [XmlEnum("stuck casing or completion")]
          stuckcasingorcompletion,
        /// <summary>
        /// shoefailures property
        /// </summary>
          [XmlEnum("shoe failures")]
          shoefailures,
        /// <summary>
        /// earlycementsetup property
        /// </summary>
          [XmlEnum("early cement setup")]
          earlycementsetup,
        /// <summary>
        /// casingcollapse property
        /// </summary>
          [XmlEnum("casing collapse")]
          casingcollapse,
        /// <summary>
        /// 
        /// </summary>
          milling,
        /// <summary>
        /// excessivecasingwearorcuttings property
        /// </summary>
          [XmlEnum("excessive casing wear or cuttings")]
          excessivecasingwearorcuttings,
        /// <summary>
        /// excessiveformationdamageorskin property
        /// </summary>
          [XmlEnum("excessive formation damage or skin")]
          excessiveformationdamageorskin,
        /// <summary>
        /// casingrotationorreciprocationrqd property
        /// </summary>
          [XmlEnum("casing rotation or reciprocation rqd")]
          casingrotationorreciprocationrqd,
        /// <summary>
        /// 
        /// </summary>
          broaching,
        /// <summary>
        /// completionorcasing property
        /// </summary>
          [XmlEnum("completion or casing")]
          completionorcasing,
        /// <summary>
        /// 
        /// </summary>
          stratigraphy,
        /// <summary>
        /// 
        /// </summary>
          fishing,
        /// <summary>
        /// junkinhole property
        /// </summary>
          [XmlEnum("junk in hole")]
          junkinhole,
        /// <summary>
        /// delayduetopoliticalunrest property
        /// </summary>
          [XmlEnum("delay due to political unrest")]
          delayduetopoliticalunrest,
        /// <summary>
        /// rigmove property
        /// </summary>
          [XmlEnum("rig move")]
          rigmove,
        /// <summary>
        /// gashydrates property
        /// </summary>
          [XmlEnum("gas hydrates")]
          gashydrates,
        /// <summary>
        /// pendinganalysis property
        /// </summary>
          [XmlEnum("pending analysis")]
          pendinganalysis,
        /// <summary>
        /// riserdisconnect property
        /// </summary>
          [XmlEnum("riser disconnect")]
          riserdisconnect,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// 
        /// </summary>
          personnel,
        /// <summary>
        /// 
        /// </summary>
          environmental,
        /// <summary>
        /// 
        /// </summary>
          automotive,
        /// <summary>
        /// 
        /// </summary>
          asset,
        /// <summary>
        /// 
        /// </summary>
          information,
        /// <summary>
        /// 
        /// </summary>
          time,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE
        }
        /// <summary>
        /// This class represents the RiskAffectedPersonnel xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RiskAffectedPersonnel xsd enumeration.")]
        public enum RiskAffectedPersonnel 
        {
        /// <summary>
        /// 
        /// </summary>
          cementer,
        /// <summary>
        /// companyman property
        /// </summary>
          [XmlEnum("company man")]
          companyman,
        /// <summary>
        /// 
        /// </summary>
          contractor,
        /// <summary>
        /// directionaldriller property
        /// </summary>
          [XmlEnum("directional driller")]
          directionaldriller,
        /// <summary>
        /// 
        /// </summary>
          driller,
        /// <summary>
        /// drillingengineer property
        /// </summary>
          [XmlEnum("drilling engineer")]
          drillingengineer,
        /// <summary>
        /// drillingsuperintendent property
        /// </summary>
          [XmlEnum("drilling superintendent")]
          drillingsuperintendent,
        /// <summary>
        /// drillingteam property
        /// </summary>
          [XmlEnum("drilling team")]
          drillingteam,
        /// <summary>
        /// facilityengineer property
        /// </summary>
          [XmlEnum("facility engineer")]
          facilityengineer,
        /// <summary>
        /// fieldservicemanager property
        /// </summary>
          [XmlEnum("field service manager")]
          fieldservicemanager,
        /// <summary>
        /// 
        /// </summary>
          foreman,
        /// <summary>
        /// generalservicesupervisor property
        /// </summary>
          [XmlEnum("general service supervisor")]
          generalservicesupervisor,
        /// <summary>
        /// 
        /// </summary>
          geologist,
        /// <summary>
        /// 
        /// </summary>
          member,
        /// <summary>
        /// mudengineer property
        /// </summary>
          [XmlEnum("mud engineer")]
          mudengineer,
        /// <summary>
        /// mudlogger property
        /// </summary>
          [XmlEnum("mud logger")]
          mudlogger,
        /// <summary>
        /// MWDorLWDengineer property
        /// </summary>
          [XmlEnum("MWD or LWD engineer")]
          MWDorLWDengineer,
        /// <summary>
        /// performengineer property
        /// </summary>
          [XmlEnum("perform engineer")]
          performengineer,
        /// <summary>
        /// 
        /// </summary>
          petrophysicist,
        /// <summary>
        /// productionengineer property
        /// </summary>
          [XmlEnum("production engineer")]
          productionengineer,
        /// <summary>
        /// remotelyoperatedvehicleengineer property
        /// </summary>
          [XmlEnum("remotely operated vehicle engineer")]
          remotelyoperatedvehicleengineer,
        /// <summary>
        /// safetymanger property
        /// </summary>
          [XmlEnum("safety manger")]
          safetymanger,
        /// <summary>
        /// salesengineer property
        /// </summary>
          [XmlEnum("sales engineer")]
          salesengineer,
        /// <summary>
        /// servicesupervisor property
        /// </summary>
          [XmlEnum("service supervisor")]
          servicesupervisor,
        /// <summary>
        /// technicalsupport property
        /// </summary>
          [XmlEnum("technical support")]
          technicalsupport,
        /// <summary>
        /// toolpusher property
        /// </summary>
          [XmlEnum("tool pusher")]
          toolpusher,
        /// <summary>
        /// wirelineengineer property
        /// </summary>
          [XmlEnum("wireline engineer")]
          wirelineengineer
        }
        /// <summary>
        /// This class represents the SurfEquipType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SurfEquipType xsd enumeration.")]
        public enum SurfEquipType 
        {
        /// <summary>
        /// 
        /// </summary>
          IADC,
        /// <summary>
        /// 
        /// </summary>
          custom,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PumpType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PumpType xsd enumeration.")]
        public enum PumpType 
        {
        /// <summary>
        /// Centrifugal mud pump
        /// </summary>
          centrifugal,
        /// <summary>
        /// Duplex mud mump, 2 cylinders
        /// </summary>
          duplex,
        /// <summary>
        /// Triplex mud pump, three cylinders
        /// </summary>
          triplex,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PitType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PitType xsd enumeration.")]
        public enum PitType 
        {
        /// <summary>
        /// 
        /// </summary>
          bulk,
        /// <summary>
        /// 
        /// </summary>
          chemical,
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// 
        /// </summary>
          mix,
        /// <summary>
        /// mudcleaning property
        /// </summary>
          [XmlEnum("mud cleaning")]
          mudcleaning,
        /// <summary>
        /// sandtrap property
        /// </summary>
          [XmlEnum("sand trap")]
          sandtrap,
        /// <summary>
        /// That pit in the active pit system located immediately downstream of the shale shakers, whose primary purpose is to allow the settling and disposal of the larger drilled cuttings not removed by the shale shakers. It is occasionally also called a settling tank.
        /// </summary>
          slug,
        /// <summary>
        /// 
        /// </summary>
          storage,
        /// <summary>
        /// surgetank property
        /// </summary>
          [XmlEnum("surge tank")]
          surgetank,
        /// <summary>
        /// triptank property
        /// </summary>
          [XmlEnum("trip tank")]
          triptank,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BopType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BopType xsd enumeration.")]
        public enum BopType 
        {
        /// <summary>
        /// annularpreventer property
        /// </summary>
          [XmlEnum("annular preventer")]
          annularpreventer,
        /// <summary>
        /// shearram property
        /// </summary>
          [XmlEnum("shear ram")]
          shearram,
        /// <summary>
        /// blindram property
        /// </summary>
          [XmlEnum("blind ram")]
          blindram,
        /// <summary>
        /// piperam property
        /// </summary>
          [XmlEnum("pipe ram")]
          piperam,
        /// <summary>
        /// drillingspool property
        /// </summary>
          [XmlEnum("drilling spool")]
          drillingspool,
        /// <summary>
        /// flexiblejoint property
        /// </summary>
          [XmlEnum("flexible joint")]
          flexiblejoint,
        /// <summary>
        /// 
        /// </summary>
          connector,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RigType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the RigType xsd enumeration.")]
        public enum RigType 
        {
        /// <summary>
        /// Barge rig
        /// </summary>
          barge,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// Floating rig
        /// </summary>
          floater,
        /// <summary>
        /// Jackup rig
        /// </summary>
          jackup,
        /// <summary>
        /// Land rig
        /// </summary>
          land,
        /// <summary>
        /// Fixed platform
        /// </summary>
          platform,
        /// <summary>
        /// semisubmersible property
        /// </summary>
          [XmlEnum("semi-submersible")]
          semisubmersible,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DerrickType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DerrickType xsd enumeration.")]
        public enum DerrickType 
        {
        /// <summary>
        /// 2 stand capacity derrick
        /// </summary>
          @double,
        /// <summary>
        /// 4 stand capacity derrick
        /// </summary>
          quadruple,
        /// <summary>
        /// Slant derrick
        /// </summary>
          slant,
        /// <summary>
        /// 3 stand capacity derrick
        /// </summary>
          triple,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DrawWorksType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DrawWorksType xsd enumeration.")]
        public enum DrawWorksType 
        {
        /// <summary>
        /// 
        /// </summary>
          mechanical,
        /// <summary>
        /// standardelectric property
        /// </summary>
          [XmlEnum("standard electric")]
          standardelectric,
        /// <summary>
        /// dieselelectric property
        /// </summary>
          [XmlEnum("diesel electric")]
          dieselelectric,
        /// <summary>
        /// ramrig property
        /// </summary>
          [XmlEnum("ram rig")]
          ramrig,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the DriveType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DriveType xsd enumeration.")]
        public enum DriveType 
        {
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// rotarykellydrive property
        /// </summary>
          [XmlEnum("rotary kelly drive")]
          rotarykellydrive,
        /// <summary>
        /// topdrive property
        /// </summary>
          [XmlEnum("top drive")]
          topdrive,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the SupportCraft xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SupportCraft xsd enumeration.")]
        public enum SupportCraftType 
        {
        /// <summary>
        /// 
        /// </summary>
          barge,
        /// <summary>
        /// standbyboat property
        /// </summary>
          [XmlEnum("standby boat")]
          standbyboat,
        /// <summary>
        /// 
        /// </summary>
          helicopter,
        /// <summary>
        /// supplyboat property
        /// </summary>
          [XmlEnum("supply boat")]
          supplyboat,
        /// <summary>
        /// 
        /// </summary>
          truck,
        /// <summary>
        /// crewvehicle property
        /// </summary>
          [XmlEnum("crew vehicle")]
          crewvehicle,
        /// <summary>
        /// tugboat property
        /// </summary>
          [XmlEnum("tug boat")]
          tugboat,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PumpOpType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PumpOpType xsd enumeration.")]
        public enum PumpOpType 
        {
        /// <summary>
        /// 
        /// </summary>
          drilling,
        /// <summary>
        /// 
        /// </summary>
          reaming,
        /// <summary>
        /// 
        /// </summary>
          circulating,
        /// <summary>
        /// slowpump property
        /// </summary>
          [XmlEnum("slow pump")]
          slowpump,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ScrType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ScrType xsd enumeration.")]
        public enum ScrType 
        {
        /// <summary>
        /// stringannulus property
        /// </summary>
          [XmlEnum("string annulus")]
          stringannulus,
        /// <summary>
        /// stringkillline property
        /// </summary>
          [XmlEnum("string kill line")]
          stringkillline,
        /// <summary>
        /// stringchokeline property
        /// </summary>
          [XmlEnum("string choke line")]
          stringchokeline,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ActivityClassType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ActivityClassType xsd enumeration.")]
        public enum ActivityClassType 
        {
        /// <summary>
        /// 
        /// </summary>
          planned,
        /// <summary>
        /// 
        /// </summary>
          unplanned,
        /// <summary>
        /// 
        /// </summary>
          downtime,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the StateDetailActivity xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the StateDetailActivity xsd enumeration.")]
        public enum StateDetailActivity 
        {
        /// <summary>
        /// Personnel injury in connection with drilling and/or drilling related operations.
        /// </summary>
          injury,
        /// <summary>
        /// operationfailed property
        /// </summary>
          [XmlEnum("operation failed")]
          operationfailed,
        /// <summary>
        /// Formation fluid invading the wellbore.
        /// </summary>
          kick,
        /// <summary>
        /// circulationloss property
        /// </summary>
          [XmlEnum("circulation loss")]
          circulationloss,
        /// <summary>
        /// mudloss property
        /// </summary>
          [XmlEnum("mud loss")]
          mudloss,
        /// <summary>
        /// stuckequipment property
        /// </summary>
          [XmlEnum("stuck equipment")]
          stuckequipment,
        /// <summary>
        /// equipmentfailure property
        /// </summary>
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// equipmenthang property
        /// </summary>
          [XmlEnum("equipment hang")]
          equipmenthang,
        /// <summary>
        /// Operation achieved objective.
        /// </summary>
          success,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MudClass xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MudClass xsd enumeration.")]
        public enum MudClass 
        {
        /// <summary>
        /// waterbased property
        /// </summary>
          [XmlEnum("water based")]
          waterbased,
        /// <summary>
        /// oilbased property
        /// </summary>
          [XmlEnum("oil based")]
          oilbased,
        /// <summary>
        /// A drilling fluid in which neither water nor oil is the continous phase.
        /// </summary>
          other,
        /// <summary>
        /// A drilling fluid which is gas-based.
        /// </summary>
          pneumatic,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogIndexType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogIndexType xsd enumeration.")]
        public enum LogIndexType 
        {
        /// <summary>
        /// datetime property
        /// </summary>
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// elapsedtime property
        /// </summary>
          [XmlEnum("elapsed time")]
          elapsedtime,
        /// <summary>
        /// Log is indexed on length (not a depth).
        /// </summary>
          length,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// verticaldepth property
        /// </summary>
          [XmlEnum("vertical depth")]
          verticaldepth,
        /// <summary>
        /// Any other index type for a log.
        /// </summary>
          other,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MudLogParameterType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MudLogParameterType xsd enumeration.")]
        public enum MudLogParameterType 
        {
        /// <summary>
        /// bitparameters property
        /// </summary>
          [XmlEnum("bit parameters")]
          bitparameters,
        /// <summary>
        /// bittypecomment property
        /// </summary>
          [XmlEnum("bit type comment")]
          bittypecomment,
        /// <summary>
        /// casingpointcomment property
        /// </summary>
          [XmlEnum("casing point comment")]
          casingpointcomment,
        /// <summary>
        /// chromatographcomment property
        /// </summary>
          [XmlEnum("chromatograph comment")]
          chromatographcomment,
        /// <summary>
        /// circulationsystemcomment property
        /// </summary>
          [XmlEnum("circulation system comment")]
          circulationsystemcomment,
        /// <summary>
        /// coreintervalcomment property
        /// </summary>
          [XmlEnum("core interval comment")]
          coreintervalcomment,
        /// <summary>
        /// cuttingsgas property
        /// </summary>
          [XmlEnum("cuttings gas")]
          cuttingsgas,
        /// <summary>
        /// directfracturepressure property
        /// </summary>
          [XmlEnum("direct fracture pressure")]
          directfracturepressure,
        /// <summary>
        /// directporepressuremeasurements property
        /// </summary>
          [XmlEnum("direct pore pressure measurements")]
          directporepressuremeasurements,
        /// <summary>
        /// drillingdatacomment property
        /// </summary>
          [XmlEnum("drilling data comment")]
          drillingdatacomment,
        /// <summary>
        /// fracturePGestimatemostlikely property
        /// </summary>
          [XmlEnum("fracture PG estimate most likely")]
          fracturePGestimatemostlikely,
        /// <summary>
        /// gaspeakscomment property
        /// </summary>
          [XmlEnum("gas peaks comment")]
          gaspeakscomment,
        /// <summary>
        /// gasratiocomment property
        /// </summary>
          [XmlEnum("gas ratio comment")]
          gasratiocomment,
        /// <summary>
        /// generalengineeringcomment property
        /// </summary>
          [XmlEnum("general engineering comment")]
          generalengineeringcomment,
        /// <summary>
        /// kicksandflows property
        /// </summary>
          [XmlEnum("kicks and flows")]
          kicksandflows,
        /// <summary>
        /// lithlogcomment property
        /// </summary>
          [XmlEnum("lithlog comment")]
          lithlogcomment,
        /// <summary>
        /// lostreturns property
        /// </summary>
          [XmlEnum("lost returns")]
          lostreturns,
        /// <summary>
        /// LWDcomment property
        /// </summary>
          [XmlEnum("LWD comment")]
          LWDcomment,
        /// <summary>
        /// markerorformationtopcomment property
        /// </summary>
          [XmlEnum("marker or formation top comment")]
          markerorformationtopcomment,
        /// <summary>
        /// midnightdepthdate property
        /// </summary>
          [XmlEnum("midnight depth date")]
          midnightdepthdate,
        /// <summary>
        /// mudcheckcomment property
        /// </summary>
          [XmlEnum("mud check comment")]
          mudcheckcomment,
        /// <summary>
        /// muddatacomment property
        /// </summary>
          [XmlEnum("mud data comment")]
          muddatacomment,
        /// <summary>
        /// mudlogcomment property
        /// </summary>
          [XmlEnum("mudlog comment")]
          mudlogcomment,
        /// <summary>
        /// overburdengradient property
        /// </summary>
          [XmlEnum("overburden gradient")]
          overburdengradient,
        /// <summary>
        /// overpullonconnection property
        /// </summary>
          [XmlEnum("overpull on connection")]
          overpullonconnection,
        /// <summary>
        /// overpullontrip property
        /// </summary>
          [XmlEnum("overpull on trip")]
          overpullontrip,
        /// <summary>
        /// porePGestimatemostlikely property
        /// </summary>
          [XmlEnum("pore PG estimate most likely")]
          porePGestimatemostlikely,
        /// <summary>
        /// porepressureestimatewhiledrilling property
        /// </summary>
          [XmlEnum("pore pressure estimate while drilling")]
          porepressureestimatewhiledrilling,
        /// <summary>
        /// pressuredatacomment property
        /// </summary>
          [XmlEnum("pressure data comment")]
          pressuredatacomment,
        /// <summary>
        /// shaledensitycomment property
        /// </summary>
          [XmlEnum("shale density comment")]
          shaledensitycomment,
        /// <summary>
        /// shorttripcomment property
        /// </summary>
          [XmlEnum("short trip comment")]
          shorttripcomment,
        /// <summary>
        /// showreportcomment property
        /// </summary>
          [XmlEnum("show report comment")]
          showreportcomment,
        /// <summary>
        /// sidewallcorecomment property
        /// </summary>
          [XmlEnum("sidewall core comment")]
          sidewallcorecomment,
        /// <summary>
        /// slidingInterval property
        /// </summary>
          [XmlEnum("sliding Interval")]
          slidingInterval,
        /// <summary>
        /// steamstillresultscomment property
        /// </summary>
          [XmlEnum("steam still results comment")]
          steamstillresultscomment,
        /// <summary>
        /// surveycomment property
        /// </summary>
          [XmlEnum("survey comment")]
          surveycomment,
        /// <summary>
        /// temperaturedatacomment property
        /// </summary>
          [XmlEnum("temperature data comment")]
          temperaturedatacomment,
        /// <summary>
        /// temperaturetrendcomment property
        /// </summary>
          [XmlEnum("temperature trend comment")]
          temperaturetrendcomment,
        /// <summary>
        /// wirelinelogcomment property
        /// </summary>
          [XmlEnum("wireline log comment")]
          wirelinelogcomment,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LithologySource xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LithologySource xsd enumeration.")]
        public enum LithologySource 
        {
        /// <summary>
        /// The lithology has one overall interpretation based on several sources such as logs and cuttings or cores.
        /// </summary>
          interpreted,
        /// <summary>
        /// The lithology as based on a visual inspection of the core. A percentage is commonly assigned to each portion of the lithology.
        /// </summary>
          core,
        /// <summary>
        /// The lithology as based on a visual inspection of the cuttings. A percentage is commonly assigned to each portion of the lithology.
        /// </summary>
          cuttings,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the GasPeakType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GasPeakType xsd enumeration.")]
        public enum GasPeakType 
        {
        /// <summary>
        /// circulatingbackgroundgas property
        /// </summary>
          [XmlEnum("circulating background gas")]
          circulatingbackgroundgas,
        /// <summary>
        /// connectiongas property
        /// </summary>
          [XmlEnum("connection gas")]
          connectiongas,
        /// <summary>
        /// drillingbackgroundgas property
        /// </summary>
          [XmlEnum("drilling background gas")]
          drillingbackgroundgas,
        /// <summary>
        /// drillinggaspeak property
        /// </summary>
          [XmlEnum("drilling gas peak")]
          drillinggaspeak,
        /// <summary>
        /// flowcheckgas property
        /// </summary>
          [XmlEnum("flow check gas")]
          flowcheckgas,
        /// <summary>
        /// noreadings property
        /// </summary>
          [XmlEnum("no readings")]
          noreadings,
        /// <summary>
        /// 
        /// </summary>
          other,
        /// <summary>
        /// shutdowngas property
        /// </summary>
          [XmlEnum("shut down gas")]
          shutdowngas,
        /// <summary>
        /// tripgas property
        /// </summary>
          [XmlEnum("trip gas")]
          tripgas,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LithostratigraphyUnit xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LithostratigraphyUnit xsd enumeration.")]
        public enum LithostratigraphyUnit 
        {
        /// <summary>
        ///  A succession of two or more contiguous or associated formations with significant and diagnostic lithologic properties in common. Formations need not be aggregated into groups unless doing so provides a useful means of simplifying stratigraphic classification in certain regions or certain intervals. Thickness of a stratigraphic succession is not a valid reason for defining a unit as a group rather than a formation. The component formations of a group need not be everywhere the same. 
        /// </summary>
          group,
        /// <summary>
        ///  The primary formal unit of lithostratigraphic classification. Formations are the only formal lithostratigraphic units into which the stratigraphic column everywhere should be divided completely on the basis of lithology. The contrast in lithology between formations required to justify their establishment varies with the complexity of the geology of a region and the detail needed for geologic mapping and to work out its geologic history. No formation is considered justifiable and useful that cannot be delineated at the scale of geologic mapping practiced in the region. The thickness of formations may range from less than a meter to several thousand meters. 
        /// </summary>
          formation,
        /// <summary>
        ///  The formal lithostratigraphic unit next in rank below a formation. It possesses lithologic properties distinguishing it from adjacent parts of the formation. No fixed standard is required for the extent and thickness of a member. A formation need not be divided into members unless a useful purpose is thus served. Some formations may be completely divided into members; others may have only certain parts designated as members. A member may extend from one formation to another. 
        /// </summary>
          member,
        /// <summary>
        ///  The smallest formal unit in the hierarchy of sedimentary lithostratigraphic units, e.g. a single stratum lithologically distinguishable from other layers above and below. Customarily only distinctive beds (key beds, marker beds) particularly useful for stratigraphic purposes are given proper names and considered formal lithostratigraphic units. 
        /// </summary>
          bed
        }
        /// <summary>
        /// This class represents the ChronostratigraphyUnit xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ChronostratigraphyUnit xsd enumeration.")]
        public enum ChronostratigraphyUnit 
        {
        /// <summary>
        ///  Era is the geochronologic equivalent of an erathem. The names of erathems were chosen to reflect major changes of the development of life on the Earth: Paleozoic (old life), Mesozoic (intermediate life), and Cenozoic (recent life). 
        /// </summary>
          era,
        /// <summary>
        ///  Period is the geochronologic equivalent of a System. A system is a unit of major rank in the conventional chronostratigraphic hierarchy, above a series and below an erathem. The names of currently recognized systems are of diverse origin inherited from early classifications: some indicate chronologic position (Tertiary, Quaternary), others have lithologic connotation (Carboniferous, Cretaceous), others are tribal (Ordovician, Silurian) and still others are geographic (Devonian, Permian). 
        /// </summary>
          period,
        /// <summary>
        ///  Epoch is the geochronologic equivalent of a Series. The names of the currently recognized series are derived from their position within a system: lower, middle, upper. 
        /// </summary>
          epoch,
        /// <summary>
        ///  The stage has been called the basic working unit of chronostratigraphy because it is suited in scope and rank to the practical needs and purposes of intraregional chronostratigraphic classification. A stage is normally the lowest ranking unit in the chronostratigraphic hierarchy that can be recognized on a global scale. 
        /// </summary>
          stage
        }
        /// <summary>
        /// This class represents the MessageType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MessageType xsd enumeration.")]
        public enum MessageType 
        {
        /// <summary>
        /// An alarm condition when something has exceeded specified limits
        /// </summary>
          alarm,
        /// <summary>
        /// Information about a specific event
        /// </summary>
          @event,
        /// <summary>
        /// General information message
        /// </summary>
          informational,
        /// <summary>
        /// A cautionary message
        /// </summary>
          warning,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageSeverity xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MessageSeverity xsd enumeration.")]
        public enum MessageSeverity 
        {
        /// <summary>
        /// 
        /// </summary>
          catastrophic,
        /// <summary>
        /// 
        /// </summary>
          major,
        /// <summary>
        /// 
        /// </summary>
          minor,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageProbability xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MessageProbability xsd enumeration.")]
        public enum MessageProbability 
        {
        /// <summary>
        /// 
        /// </summary>
          low,
        /// <summary>
        /// 
        /// </summary>
          medium,
        /// <summary>
        /// 
        /// </summary>
          high,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemChoiceType1 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType1 xsd enumeration.")]
        public enum ItemChoiceType1 
        {
        /// <summary>
        /// doubleValues property
        /// </summary>
          doubleValues,
        /// <summary>
        /// stringValues property
        /// </summary>
          stringValues
        }
        /// <summary>
        /// This class represents the LogTraceState xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogTraceState xsd enumeration.")]
        public enum LogTraceState 
        {
        /// <summary>
        /// depthadjusted property
        /// </summary>
          [XmlEnum("depth adjusted")]
          depthadjusted,
        /// <summary>
        /// 
        /// </summary>
          edited,
        /// <summary>
        /// 
        /// </summary>
          joined,
        /// <summary>
        /// 
        /// </summary>
          processed,
        /// <summary>
        /// 
        /// </summary>
          raw,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogTraceOrigin xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogTraceOrigin xsd enumeration.")]
        public enum LogTraceOrigin 
        {
        /// <summary>
        /// The data were read from a realtime sensor stream.
        /// </summary>
          realtime,
        /// <summary>
        /// The data are synthetic.
        /// </summary>
          modeled,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogDataType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogDataType xsd enumeration.")]
        public enum LogDataType 
        {
        /// <summary>
        /// Integer data value (nominally a one byte value). The value must conform to format of the xsd:dateTime data type (minInclusive=-128 and maxInclusive=127).
        /// </summary>
          @byte,
        /// <summary>
        /// datetime property
        /// </summary>
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// Double precision floating point value (nominally an 8 byte value). The value must conform to format of the xsd:double data type.
        /// </summary>
          @double,
        /// <summary>
        /// Single precision floating point value (nominally an 4 byte value). The value must conform to format of the xsd:float data type.
        /// </summary>
          @float,
        /// <summary>
        /// Integer data value (nominally an 4 byte value). The value must conform to format of the xsd:int data type.
        /// </summary>
          @int,
        /// <summary>
        /// Long integer data value (nominally an 8 byte value). The value must conform to format of the xsd:long data type.
        /// </summary>
          @long,
        /// <summary>
        /// Integer data value (nominally an 2 byte value). The value must conform to format of the xsd:short data type (minInclusive=-32768 and maxInclusive=32767).
        /// </summary>
          @short,
        /// <summary>
        /// Character string data. The value must conform to format of the xsd:string data type. The maximum length of a value is server dependent.
        /// </summary>
          @string,
        /// <summary>
        /// Character string data with a maximum length of 40 characters. The value must conform to format of the xsd:string data type.
        /// </summary>
          string40,
        /// <summary>
        /// Character string data with a maximum length of 16 characters. The value must conform to format of the xsd:string data type.
        /// </summary>
          string16,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogIndexDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogIndexDirection xsd enumeration.")]
        public enum LogIndexDirection 
        {
        /// <summary>
        /// Log items are in order of decreasing index values (e.g. wireline log logging while pulling out of hole)
        /// </summary>
          decreasing,
        /// <summary>
        /// Log items are in order of increasing index values (e.g. increasing depths or times)
        /// </summary>
          increasing,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellControlIncidentType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellControlIncidentType xsd enumeration.")]
        public enum WellControlIncidentType 
        {
        /// <summary>
        /// magneticMWD property
        /// </summary>
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        /// <summary>
        /// gyroscopicMWD property
        /// </summary>
          [XmlEnum("gyroscopic  MWD")]
          gyroscopicMWD,
        /// <summary>
        /// gyroscopicnorthseeking property
        /// </summary>
          [XmlEnum("gyroscopic north seeking")]
          gyroscopicnorthseeking,
        /// <summary>
        /// gyroscopicinertial property
        /// </summary>
          [XmlEnum("gyroscopic inertial")]
          gyroscopicinertial,
        /// <summary>
        /// magneticsingleshot property
        /// </summary>
          [XmlEnum("magnetic single-shot")]
          magneticsingleshot,
        /// <summary>
        /// magneticmultipleshot property
        /// </summary>
          [XmlEnum("magnetic multiple-shot")]
          magneticmultipleshot,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown,
        /// <summary>
        /// shallowgaskick property
        /// </summary>
          [XmlEnum("shallow gas kick")]
          shallowgaskick,
        /// <summary>
        /// waterkick property
        /// </summary>
          [XmlEnum("water kick")]
          waterkick,
        /// <summary>
        /// oilkick property
        /// </summary>
          [XmlEnum("oil kick")]
          oilkick,
        /// <summary>
        /// gaskick property
        /// </summary>
          [XmlEnum("gas kick")]
          gaskick,
        /// <summary>
        /// unknown1 property
        /// </summary>
          [XmlEnum("unknown")]
          unknown1
        }
        /// <summary>
        /// This class represents the WellKillingProcedureType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellKillingProcedureType xsd enumeration.")]
        public enum WellKillingProcedureType 
        {
        /// <summary>
        /// drillersmethod property
        /// </summary>
          [XmlEnum("drillers method")]
          drillersmethod,
        /// <summary>
        /// waitandweight property
        /// </summary>
          [XmlEnum("wait and weight")]
          waitandweight,
        /// <summary>
        /// A well killing procedure that is prescribing pumping of kill weight fluid down the tubing and forcing the wellbore fluids back into the formation through the perforations.
        /// </summary>
          bullheading,
        /// <summary>
        /// lubricateandbleed property
        /// </summary>
          [XmlEnum("lubricate and bleed")]
          lubricateandbleed,
        /// <summary>
        /// forwardcirculation property
        /// </summary>
          [XmlEnum("forward circulation")]
          forwardcirculation,
        /// <summary>
        /// reversecirculation property
        /// </summary>
          [XmlEnum("reverse circulation")]
          reversecirculation,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellTestType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellTestType xsd enumeration.")]
        public enum WellTestType 
        {
        /// <summary>
        /// drillstemtest property
        /// </summary>
          [XmlEnum("drill stem test")]
          drillstemtest,
        /// <summary>
        /// productiontest property
        /// </summary>
          [XmlEnum("production test")]
          productiontest,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the InnerBarrelType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the InnerBarrelType xsd enumeration.")]
        public enum InnerBarrelType 
        {
        /// <summary>
        /// A pipe that is located inside a core barrel to hold the core sample.
        /// </summary>
          undifferented,
        /// <summary>
        /// An inner core barrel made of aluminium.
        /// </summary>
          aluminum,
        /// <summary>
        /// An inner core barrel that that seals off the core sample using gel as the sealing material.
        /// </summary>
          gel,
        /// <summary>
        /// An inner core barrel made of glass fiber reinforced plastic.
        /// </summary>
          fiberglass,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemsChoiceType1 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType1 xsd enumeration.")]
        public enum ItemsChoiceType1 
        {
        /// <summary>
        /// eTimStatic property
        /// </summary>
          eTimStatic,
        /// <summary>
        /// tempBHCT property
        /// </summary>
          tempBHCT,
        /// <summary>
        /// tempBHST property
        /// </summary>
          tempBHST
        }
        /// <summary>
        /// This class represents the ReadingKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ReadingKind xsd enumeration.")]
        public enum ReadingKind 
        {
        /// <summary>
        /// The reading was measured.
        /// </summary>
          measured,
        /// <summary>
        /// The reading was estimated.
        /// </summary>
          estimated,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellNamingSystem xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WellNamingSystem xsd enumeration.")]
        public enum WellNamingSystem 
        {
        /// <summary>
        /// United Kingdom Department of Trade and Industry
        /// </summary>
          DTI,
        /// <summary>
        /// American Petroleum Institute well number (10,12 or 14 digits).
        /// </summary>
          API,
        /// <summary>
        /// NPDcode property
        /// </summary>
          [XmlEnum("NPD code")]
          NPDcode,
        /// <summary>
        /// NPDnumber property
        /// </summary>
          [XmlEnum("NPD number")]
          NPDnumber,
        /// <summary>
        /// localfield property
        /// </summary>
          [XmlEnum("local field")]
          localfield,
        /// <summary>
        /// A name assigned to a prospect - a well that has not yet been drilled.
        /// </summary>
          prospect,
        /// <summary>
        /// The naming system is not known.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PresTestType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PresTestType xsd enumeration.")]
        public enum PresTestType 
        {
        /// <summary>
        /// leakofftest property
        /// </summary>
          [XmlEnum("leak off test")]
          leakofftest,
        /// <summary>
        /// formationintegritytest property
        /// </summary>
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the OpsReportVersion xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the OpsReportVersion xsd enumeration.")]
        public enum OpsReportVersion 
        {
        /// <summary>
        /// A preliminary report that has not yet been approved by the drilling operator. This report is normally issued at the beginning of the work day (e.g., 6:00 am) before 
        /// </summary>
          preliminary,
        /// <summary>
        /// A normal daily staus report that has been approved by the drilling operator.
        /// </summary>
          normal,
        /// <summary>
        /// A report that represents the final definitive status for the well. This report is normally issued some period of time (e.g., 6 months) after the completion of drilling.
        /// </summary>
          final,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the RelatedTimeTypeRelativePosition xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        [Description("This class represents the RelatedTimeTypeRelativePosition xsd enumeration.")]
        public enum RelatedTimeTypeRelativePosition 
        {
        /// <summary>
        /// Before property
        /// </summary>
          Before,
        /// <summary>
        /// After property
        /// </summary>
          After,
        /// <summary>
        /// Begins property
        /// </summary>
          Begins,
        /// <summary>
        /// Ends property
        /// </summary>
          Ends,
        /// <summary>
        /// During property
        /// </summary>
          During,
        /// <summary>
        /// Equals property
        /// </summary>
          Equals,
        /// <summary>
        /// Contains property
        /// </summary>
          Contains,
        /// <summary>
        /// Overlaps property
        /// </summary>
          Overlaps,
        /// <summary>
        /// Meets property
        /// </summary>
          Meets,
        /// <summary>
        /// OverlappedBy property
        /// </summary>
          OverlappedBy,
        /// <summary>
        /// MetBy property
        /// </summary>
          MetBy,
        /// <summary>
        /// BegunBy property
        /// </summary>
          BegunBy,
        /// <summary>
        /// EndedBy property
        /// </summary>
          EndedBy
        }
        /// <summary>
        /// This class represents the AggregationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        [Description("This class represents the AggregationType xsd enumeration.")]
        public enum AggregationType 
        {
        /// <summary>
        /// set property
        /// </summary>
          set,
        /// <summary>
        /// bag property
        /// </summary>
          bag,
        /// <summary>
        /// sequence property
        /// </summary>
          sequence,
        /// <summary>
        /// array property
        /// </summary>
          array,
        /// <summary>
        /// record property
        /// </summary>
          record,
        /// <summary>
        /// table property
        /// </summary>
          table
        }
        /// <summary>
        /// This class represents the ChangeInfoType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ChangeInfoType xsd enumeration.")]
        public enum ChangeInfoType 
        {
        /// <summary>
        /// An object was added.
        /// </summary>
          add,
        /// <summary>
        /// An object was modified.
        /// </summary>
          update,
        /// <summary>
        /// An object was deleted.
        /// </summary>
          delete
        }
        /// <summary>
        /// This class represents the CementJobType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CementJobType xsd enumeration.")]
        public enum CementJobType 
        {
        /// <summary>
        /// 
        /// </summary>
          primary,
        /// <summary>
        /// 
        /// </summary>
          plug,
        /// <summary>
        /// 
        /// </summary>
          squeeze,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the BhaStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BhaStatus xsd enumeration.")]
        public enum BhaStatus 
        {
        /// <summary>
        /// 
        /// </summary>
          final,
        /// <summary>
        /// 
        /// </summary>
          progress,
        /// <summary>
        /// 
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the CompletionStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CompletionStatus xsd enumeration.")]
        public enum CompletionStatus 
        {
        /// <summary>
        /// Planned property
        /// </summary>
          Planned,
        /// <summary>
        /// Active property
        /// </summary>
          Active,
        /// <summary>
        /// Inactive property
        /// </summary>
          Inactive,
        /// <summary>
        /// PermanentAbandoned property
        /// </summary>
          [XmlEnum("Permanent Abandoned")]
          PermanentAbandoned,
        /// <summary>
        /// Suspended property
        /// </summary>
          Suspended,
        /// <summary>
        /// TemporaryAbandoned property
        /// </summary>
          [XmlEnum("Temporary Abandoned")]
          TemporaryAbandoned,
        /// <summary>
        /// Testing property
        /// </summary>
          Testing
        }
        /// <summary>
        /// This class represents the PerfConveyanceMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerfConveyanceMethod xsd enumeration.")]
        public enum PerfConveyanceMethod 
        {
        /// <summary>
        /// NA property
        /// </summary>
          [XmlEnum("N/A")]
          NA,
        /// <summary>
        /// SlickLine property
        /// </summary>
          [XmlEnum("Slick Line")]
          SlickLine,
        /// <summary>
        /// TubingConveyed property
        /// </summary>
          [XmlEnum("Tubing Conveyed")]
          TubingConveyed,
        /// <summary>
        /// Wireline property
        /// </summary>
          Wireline
        }
        /// <summary>
        /// This class represents the EventClassType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the EventClassType xsd enumeration.")]
        public enum EventClassType 
        {
        /// <summary>
        /// Job property
        /// </summary>
          Job,
        /// <summary>
        /// DailyReport property
        /// </summary>
          [XmlEnum("Daily Report")]
          DailyReport,
        /// <summary>
        /// TimeLogTimeMeasure property
        /// </summary>
          [XmlEnum("Time Log (Time Measure)")]
          TimeLogTimeMeasure,
        /// <summary>
        /// DailyCost property
        /// </summary>
          [XmlEnum("Daily Cost")]
          DailyCost,
        /// <summary>
        /// NPTlosttimeevent property
        /// </summary>
          [XmlEnum("NPT (lost time event)")]
          NPTlosttimeevent,
        /// <summary>
        /// Failuredownholeequipmentonly property
        /// </summary>
          [XmlEnum("Failure (downhole equipment only)")]
          Failuredownholeequipmentonly,
        /// <summary>
        /// MudAttributes property
        /// </summary>
          [XmlEnum("Mud Attributes")]
          MudAttributes,
        /// <summary>
        /// JobPlanphases property
        /// </summary>
          [XmlEnum("Job Plan (phases)")]
          JobPlanphases
        }
        /// <summary>
        /// This class represents the PhysicalStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PhysicalStatus xsd enumeration.")]
        public enum PhysicalStatus 
        {
        /// <summary>
        /// open property
        /// </summary>
          open,
        /// <summary>
        /// closed property
        /// </summary>
          closed,
        /// <summary>
        /// proposed property
        /// </summary>
          proposed
        }
        /// <summary>
        /// This class represents the PerforationStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerforationStatus xsd enumeration.")]
        public enum PerforationStatus 
        {
        /// <summary>
        /// open property
        /// </summary>
          open,
        /// <summary>
        /// squeezed property
        /// </summary>
          squeezed,
        /// <summary>
        /// proposed property
        /// </summary>
          proposed
        }
        /// <summary>
        /// This class represents the PerforationToolType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerforationToolType xsd enumeration.")]
        public enum PerforationToolType 
        {
        /// <summary>
        /// NA property
        /// </summary>
          [XmlEnum("N/A")]
          NA,
        /// <summary>
        /// CasingGun property
        /// </summary>
          [XmlEnum("Casing Gun")]
          CasingGun,
        /// <summary>
        /// ThroughTubingGun property
        /// </summary>
          [XmlEnum("Through Tubing Gun")]
          ThroughTubingGun,
        /// <summary>
        /// SlotsMachineCut property
        /// </summary>
          [XmlEnum("Slots-Machine Cut")]
          SlotsMachineCut,
        /// <summary>
        /// SlotsUndercut property
        /// </summary>
          [XmlEnum("Slots-Undercut")]
          SlotsUndercut,
        /// <summary>
        /// TCPGun property
        /// </summary>
          [XmlEnum("TCP Gun")]
          TCPGun,
        /// <summary>
        /// StripGun property
        /// </summary>
          [XmlEnum("Strip Gun")]
          StripGun,
        /// <summary>
        /// Drilled property
        /// </summary>
          Drilled,
        /// <summary>
        /// Mandrel property
        /// </summary>
          Mandrel,
        /// <summary>
        /// CoiledTubingJetTool property
        /// </summary>
          [XmlEnum("Coiled Tubing Jet Tool")]
          CoiledTubingJetTool
        }
        /// <summary>
        /// This class represents the EquipmentType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the EquipmentType xsd enumeration.")]
        public enum EquipmentType 
        {
        /// <summary>
        /// BridgePlug property
        /// </summary>
          [XmlEnum("Bridge Plug")]
          BridgePlug,
        /// <summary>
        /// BullPlug property
        /// </summary>
          [XmlEnum("Bull Plug")]
          BullPlug,
        /// <summary>
        /// CapillaryTubing property
        /// </summary>
          [XmlEnum("Capillary Tubing")]
          CapillaryTubing,
        /// <summary>
        /// CasingCrossover property
        /// </summary>
          [XmlEnum("Casing Crossover")]
          CasingCrossover,
        /// <summary>
        /// CasingHanger property
        /// </summary>
          [XmlEnum("Casing Hanger")]
          CasingHanger,
        /// <summary>
        /// CasingHead property
        /// </summary>
          [XmlEnum("Casing Head")]
          CasingHead,
        /// <summary>
        /// CasingLinerExpandable property
        /// </summary>
          [XmlEnum("Casing Liner-Expandable")]
          CasingLinerExpandable,
        /// <summary>
        /// CasingShoe property
        /// </summary>
          [XmlEnum("Casing Shoe")]
          CasingShoe,
        /// <summary>
        /// CasingSpool property
        /// </summary>
          [XmlEnum("Casing Spool")]
          CasingSpool,
        /// <summary>
        /// CasingCasingLiner property
        /// </summary>
          [XmlEnum("Casing/Casing Liner")]
          CasingCasingLiner,
        /// <summary>
        /// CementbehindCasing property
        /// </summary>
          [XmlEnum("Cement (behind Casing)")]
          CementbehindCasing,
        /// <summary>
        /// CementBasket property
        /// </summary>
          [XmlEnum("Cement Basket")]
          CementBasket,
        /// <summary>
        /// CementRetainer property
        /// </summary>
          [XmlEnum("Cement Retainer")]
          CementRetainer,
        /// <summary>
        /// CementSqueeze property
        /// </summary>
          [XmlEnum("Cement Squeeze")]
          CementSqueeze,
        /// <summary>
        /// CementStageTool property
        /// </summary>
          [XmlEnum("Cement Stage Tool")]
          CementStageTool,
        /// <summary>
        /// ChemicalInjectionMandrel property
        /// </summary>
          [XmlEnum("Chemical Injection Mandrel")]
          ChemicalInjectionMandrel,
        /// <summary>
        /// ChemicalInjectionValve property
        /// </summary>
          [XmlEnum("Chemical Injection Valve")]
          ChemicalInjectionValve,
        /// <summary>
        /// CorrosionCouponCarrier property
        /// </summary>
          [XmlEnum("Corrosion Coupon Carrier")]
          CorrosionCouponCarrier,
        /// <summary>
        /// DipTube property
        /// </summary>
          [XmlEnum("Dip Tube")]
          DipTube,
        /// <summary>
        /// DownholeChoke property
        /// </summary>
          [XmlEnum("Downhole Choke")]
          DownholeChoke,
        /// <summary>
        /// DownholeSensor property
        /// </summary>
          [XmlEnum("Downhole Sensor")]
          DownholeSensor,
        /// <summary>
        /// ESPAssembly property
        /// </summary>
          [XmlEnum("ESP Assembly")]
          ESPAssembly,
        /// <summary>
        /// ESPBoltonDischarge property
        /// </summary>
          [XmlEnum("ESP Bolt on Discharge")]
          ESPBoltonDischarge,
        /// <summary>
        /// ESPBoltonIntake property
        /// </summary>
          [XmlEnum("ESP Bolt on Intake")]
          ESPBoltonIntake,
        /// <summary>
        /// ESPBoltonMotorBase property
        /// </summary>
          [XmlEnum("ESP Bolt on Motor Base")]
          ESPBoltonMotorBase,
        /// <summary>
        /// ESPBoltonMotorHead property
        /// </summary>
          [XmlEnum("ESP Bolt on Motor Head")]
          ESPBoltonMotorHead,
        /// <summary>
        /// ESPCable property
        /// </summary>
          [XmlEnum("ESP Cable")]
          ESPCable,
        /// <summary>
        /// ESPGasHandler property
        /// </summary>
          [XmlEnum("ESP Gas Handler")]
          ESPGasHandler,
        /// <summary>
        /// ESPGasSeparator property
        /// </summary>
          [XmlEnum("ESP Gas Separator")]
          ESPGasSeparator,
        /// <summary>
        /// ESPLowerPigtail property
        /// </summary>
          [XmlEnum("ESP Lower Pigtail")]
          ESPLowerPigtail,
        /// <summary>
        /// ESPMotor property
        /// </summary>
          [XmlEnum("ESP Motor")]
          ESPMotor,
        /// <summary>
        /// ESPMotorBaseCentralizer property
        /// </summary>
          [XmlEnum("ESP Motor Base Centralizer")]
          ESPMotorBaseCentralizer,
        /// <summary>
        /// ESPMotorFlatCable property
        /// </summary>
          [XmlEnum("ESP Motor Flat Cable")]
          ESPMotorFlatCable,
        /// <summary>
        /// ESPMotorShroud property
        /// </summary>
          [XmlEnum("ESP Motor Shroud")]
          ESPMotorShroud,
        /// <summary>
        /// ESPPromotor property
        /// </summary>
          [XmlEnum("ESP Promotor")]
          ESPPromotor,
        /// <summary>
        /// ESPPump property
        /// </summary>
          [XmlEnum("ESP Pump")]
          ESPPump,
        /// <summary>
        /// ESPPumpDischargeSensorSub property
        /// </summary>
          [XmlEnum("ESP Pump Discharge Sensor Sub")]
          ESPPumpDischargeSensorSub,
        /// <summary>
        /// ESPSeal property
        /// </summary>
          [XmlEnum("ESP Seal")]
          ESPSeal,
        /// <summary>
        /// ExpansionJoint property
        /// </summary>
          [XmlEnum("Expansion Joint")]
          ExpansionJoint,
        /// <summary>
        /// ExternalCementingPort property
        /// </summary>
          [XmlEnum("External Cementing Port")]
          ExternalCementingPort,
        /// <summary>
        /// Fill property
        /// </summary>
          Fill,
        /// <summary>
        /// Fish property
        /// </summary>
          Fish,
        /// <summary>
        /// FloatCollar property
        /// </summary>
          [XmlEnum("Float Collar")]
          FloatCollar,
        /// <summary>
        /// FloatShoeGuideShoe property
        /// </summary>
          [XmlEnum("Float Shoe/Guide Shoe")]
          FloatShoeGuideShoe,
        /// <summary>
        /// GasAnchor property
        /// </summary>
          [XmlEnum("Gas Anchor")]
          GasAnchor,
        /// <summary>
        /// GasLiftMandrel property
        /// </summary>
          [XmlEnum("Gas Lift Mandrel")]
          GasLiftMandrel,
        /// <summary>
        /// GasLiftValve property
        /// </summary>
          [XmlEnum("Gas Lift Valve")]
          GasLiftValve,
        /// <summary>
        /// GravelPackScreen property
        /// </summary>
          [XmlEnum("Gravel Pack Screen")]
          GravelPackScreen,
        /// <summary>
        /// HydraulicPump property
        /// </summary>
          [XmlEnum("Hydraulic Pump")]
          HydraulicPump,
        /// <summary>
        /// InjectionMandrel property
        /// </summary>
          [XmlEnum("Injection Mandrel")]
          InjectionMandrel,
        /// <summary>
        /// InjectionValve property
        /// </summary>
          [XmlEnum("Injection Valve")]
          InjectionValve,
        /// <summary>
        /// JunkinWellbore property
        /// </summary>
          [XmlEnum("Junk in Wellbore")]
          JunkinWellbore,
        /// <summary>
        /// LandingCollar property
        /// </summary>
          [XmlEnum("Landing Collar")]
          LandingCollar,
        /// <summary>
        /// LinerEntryGuide property
        /// </summary>
          [XmlEnum("Liner Entry Guide")]
          LinerEntryGuide,
        /// <summary>
        /// LinerHanger property
        /// </summary>
          [XmlEnum("Liner Hanger")]
          LinerHanger,
        /// <summary>
        /// MuleShoe property
        /// </summary>
          [XmlEnum("Mule Shoe")]
          MuleShoe,
        /// <summary>
        /// NotchedCollar property
        /// </summary>
          [XmlEnum("Notched Collar")]
          NotchedCollar,
        /// <summary>
        /// OnOffTool property
        /// </summary>
          [XmlEnum("On-Off Tool")]
          OnOffTool,
        /// <summary>
        /// Overshot property
        /// </summary>
          Overshot,
        /// <summary>
        /// Packer property
        /// </summary>
          Packer,
        /// <summary>
        /// PackerMultipleStrings property
        /// </summary>
          [XmlEnum("Packer-Multiple Strings")]
          PackerMultipleStrings,
        /// <summary>
        /// PackerPlug property
        /// </summary>
          [XmlEnum("Packer Plug")]
          PackerPlug,
        /// <summary>
        /// PackoffTubing property
        /// </summary>
          [XmlEnum("Packoff (Tubing)")]
          PackoffTubing,
        /// <summary>
        /// PCPFlexshaftIntake property
        /// </summary>
          [XmlEnum("PCP-Flex shaft Intake")]
          PCPFlexshaftIntake,
        /// <summary>
        /// PCPGearReducerSubsurface property
        /// </summary>
          [XmlEnum("PCP-Gear Reducer (Subsurface)")]
          PCPGearReducerSubsurface,
        /// <summary>
        /// PCPNoTurnToolTorqueAnchor property
        /// </summary>
          [XmlEnum("PCP-No Turn Tool/Torque Anchor")]
          PCPNoTurnToolTorqueAnchor,
        /// <summary>
        /// PCPRotor property
        /// </summary>
          [XmlEnum("PCP-Rotor")]
          PCPRotor,
        /// <summary>
        /// PCPStator property
        /// </summary>
          [XmlEnum("PCP-Stator")]
          PCPStator,
        /// <summary>
        /// PCPTagBar property
        /// </summary>
          [XmlEnum("PCP-Tag Bar")]
          PCPTagBar,
        /// <summary>
        /// PlugCement property
        /// </summary>
          [XmlEnum("Plug - Cement")]
          PlugCement,
        /// <summary>
        /// PlugMud property
        /// </summary>
          [XmlEnum("Plug - Mud")]
          PlugMud,
        /// <summary>
        /// PlungerLiftBall property
        /// </summary>
          [XmlEnum("Plunger Lift Ball")]
          PlungerLiftBall,
        /// <summary>
        /// PlungerLiftBottomHoleBumperAssembly property
        /// </summary>
          [XmlEnum("Plunger Lift Bottom Hole Bumper Assembly")]
          PlungerLiftBottomHoleBumperAssembly,
        /// <summary>
        /// PlungerLiftBumperSpring property
        /// </summary>
          [XmlEnum("Plunger Lift Bumper Spring")]
          PlungerLiftBumperSpring,
        /// <summary>
        /// PlungerLiftCollarStop property
        /// </summary>
          [XmlEnum("Plunger Lift Collar Stop")]
          PlungerLiftCollarStop,
        /// <summary>
        /// PlungerLiftPlunger property
        /// </summary>
          [XmlEnum("Plunger Lift Plunger")]
          PlungerLiftPlunger,
        /// <summary>
        /// PolishedRod property
        /// </summary>
          [XmlEnum("Polished Rod")]
          PolishedRod,
        /// <summary>
        /// PolishedRodLiner property
        /// </summary>
          [XmlEnum("Polished Rod Liner")]
          PolishedRodLiner,
        /// <summary>
        /// PortedCollar property
        /// </summary>
          [XmlEnum("Ported Collar")]
          PortedCollar,
        /// <summary>
        /// ProfileNipple property
        /// </summary>
          [XmlEnum("Profile Nipple")]
          ProfileNipple,
        /// <summary>
        /// ProfileNipplePlug property
        /// </summary>
          [XmlEnum("Profile Nipple Plug")]
          ProfileNipplePlug,
        /// <summary>
        /// PumpOutPlug property
        /// </summary>
          [XmlEnum("Pump-Out Plug")]
          PumpOutPlug,
        /// <summary>
        /// SealAssembly property
        /// </summary>
          [XmlEnum("Seal Assembly")]
          SealAssembly,
        /// <summary>
        /// SuckerRod property
        /// </summary>
          [XmlEnum("Sucker Rod")]
          SuckerRod,
        /// <summary>
        /// SuckerRodBackoffCoupling property
        /// </summary>
          [XmlEnum("Sucker Rod Backoff Coupling")]
          SuckerRodBackoffCoupling,
        /// <summary>
        /// SuckerRodContinuous property
        /// </summary>
          [XmlEnum("Sucker Rod-Continuous")]
          SuckerRodContinuous,
        /// <summary>
        /// SuckerRodPumpInsert property
        /// </summary>
          [XmlEnum("Sucker Rod Pump-Insert")]
          SuckerRodPumpInsert,
        /// <summary>
        /// SuckerRodPumpJacket property
        /// </summary>
          [XmlEnum("Sucker Rod Pump-Jacket")]
          SuckerRodPumpJacket,
        /// <summary>
        /// SuckerRodPumpTubingPumpBarrel property
        /// </summary>
          [XmlEnum("Sucker Rod Pump-Tubing Pump Barrel")]
          SuckerRodPumpTubingPumpBarrel,
        /// <summary>
        /// SuckerRodPumpTubingPumpPlunger property
        /// </summary>
          [XmlEnum("Sucker Rod Pump-Tubing Pump Plunger")]
          SuckerRodPumpTubingPumpPlunger,
        /// <summary>
        /// SuckerRodRibbon property
        /// </summary>
          [XmlEnum("Sucker Rod-Ribbon")]
          SuckerRodRibbon,
        /// <summary>
        /// SuckerRodSinkerBar property
        /// </summary>
          [XmlEnum("Sucker Rod-Sinker Bar")]
          SuckerRodSinkerBar,
        /// <summary>
        /// SuckerRodSub property
        /// </summary>
          [XmlEnum("Sucker Rod Sub")]
          SuckerRodSub,
        /// <summary>
        /// SandScreenTubing property
        /// </summary>
          [XmlEnum("Sand Screen-Tubing")]
          SandScreenTubing,
        /// <summary>
        /// SandSeparator property
        /// </summary>
          [XmlEnum("Sand Separator")]
          SandSeparator,
        /// <summary>
        /// ScreenLinerInsert property
        /// </summary>
          [XmlEnum("Screen Liner/Insert")]
          ScreenLinerInsert,
        /// <summary>
        /// SealBoreExtension property
        /// </summary>
          [XmlEnum("Seal Bore Extension")]
          SealBoreExtension,
        /// <summary>
        /// SeatNippleShoe property
        /// </summary>
          [XmlEnum("Seat Nipple/Shoe")]
          SeatNippleShoe,
        /// <summary>
        /// ShearTool property
        /// </summary>
          [XmlEnum("Shear Tool")]
          ShearTool,
        /// <summary>
        /// SlidingSleeve property
        /// </summary>
          [XmlEnum("Sliding Sleeve")]
          SlidingSleeve,
        /// <summary>
        /// SteamCupMandrel property
        /// </summary>
          [XmlEnum("Steam Cup Mandrel")]
          SteamCupMandrel,
        /// <summary>
        /// SteamDeflectors property
        /// </summary>
          [XmlEnum("Steam Deflectors")]
          SteamDeflectors,
        /// <summary>
        /// StrainerNipple property
        /// </summary>
          [XmlEnum("Strainer Nipple")]
          StrainerNipple,
        /// <summary>
        /// SubsurfaceSafetyValve property
        /// </summary>
          [XmlEnum("Subsurface Safety Valve")]
          SubsurfaceSafetyValve,
        /// <summary>
        /// TCPGun property
        /// </summary>
          [XmlEnum("TCP Gun")]
          TCPGun,
        /// <summary>
        /// Tubing property
        /// </summary>
          Tubing,
        /// <summary>
        /// TubingCoiled property
        /// </summary>
          [XmlEnum("Tubing (Coiled)")]
          TubingCoiled,
        /// <summary>
        /// TubingAnchorCatcher property
        /// </summary>
          [XmlEnum("Tubing Anchor/Catcher")]
          TubingAnchorCatcher,
        /// <summary>
        /// TubingCrossover property
        /// </summary>
          [XmlEnum("Tubing Crossover")]
          TubingCrossover,
        /// <summary>
        /// TubingDrain property
        /// </summary>
          [XmlEnum("Tubing Drain")]
          TubingDrain,
        /// <summary>
        /// TubingHanger property
        /// </summary>
          [XmlEnum("Tubing Hanger")]
          TubingHanger,
        /// <summary>
        /// TubingHeadSpool property
        /// </summary>
          [XmlEnum("Tubing Head (Spool)")]
          TubingHeadSpool,
        /// <summary>
        /// TubingPurgeCheckValve property
        /// </summary>
          [XmlEnum("Tubing Purge Check Valve")]
          TubingPurgeCheckValve,
        /// <summary>
        /// TubingSub property
        /// </summary>
          [XmlEnum("Tubing Sub")]
          TubingSub,
        /// <summary>
        /// Whipstock property
        /// </summary>
          Whipstock,
        /// <summary>
        /// WirelineReEntryGuideBellCollar property
        /// </summary>
          [XmlEnum("Wireline Re-Entry Guide (Bell Collar)")]
          WirelineReEntryGuideBellCollar,
        /// <summary>
        /// WellboreNotes property
        /// </summary>
          [XmlEnum("Wellbore Notes")]
          WellboreNotes,
        /// <summary>
        /// YTool property
        /// </summary>
          [XmlEnum("Y-Tool")]
          YTool
        }
        /// <summary>
        /// This class represents the GradeType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GradeType xsd enumeration.")]
        public enum GradeType 
        {
        /// <summary>
        /// DE property
        /// </summary>
          DE,
        /// <summary>
        /// DER property
        /// </summary>
          DER,
        /// <summary>
        /// DR property
        /// </summary>
          DR,
        /// <summary>
        /// FG property
        /// </summary>
          FG,
        /// <summary>
        /// SE property
        /// </summary>
          SE,
        /// <summary>
        /// SER property
        /// </summary>
          SER,
        /// <summary>
        /// T66 property
        /// </summary>
          [XmlEnum("T-66")]
          T66,
        /// <summary>
        /// HS property
        /// </summary>
          HS,
        /// <summary>
        /// KD property
        /// </summary>
          KD,
        /// <summary>
        /// N97 property
        /// </summary>
          [XmlEnum("N-97")]
          N97,
        /// <summary>
        /// C property
        /// </summary>
          C,
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// E property
        /// </summary>
          E,
        /// <summary>
        /// E75 property
        /// </summary>
          [XmlEnum("E-75")]
          E75,
        /// <summary>
        /// G105 property
        /// </summary>
          [XmlEnum("G-105")]
          G105,
        /// <summary>
        /// S135 property
        /// </summary>
          [XmlEnum("S-135")]
          S135,
        /// <summary>
        /// V150 property
        /// </summary>
          [XmlEnum("V-150")]
          V150,
        /// <summary>
        /// X95 property
        /// </summary>
          [XmlEnum("X-95")]
          X95,
        /// <summary>
        /// Armco95 property
        /// </summary>
          [XmlEnum("Armco-95")]
          Armco95,
        /// <summary>
        /// C110 property
        /// </summary>
          [XmlEnum("C-110")]
          C110,
        /// <summary>
        /// C75 property
        /// </summary>
          [XmlEnum("C-75")]
          C75,
        /// <summary>
        /// C90 property
        /// </summary>
          [XmlEnum("C-90")]
          C90,
        /// <summary>
        /// C95 property
        /// </summary>
          [XmlEnum("C-95")]
          C95,
        /// <summary>
        /// F25 property
        /// </summary>
          [XmlEnum("F-25")]
          F25,
        /// <summary>
        /// H40 property
        /// </summary>
          [XmlEnum("H-40")]
          H40,
        /// <summary>
        /// HC95 property
        /// </summary>
          [XmlEnum("HC-95")]
          HC95,
        /// <summary>
        /// J20 property
        /// </summary>
          [XmlEnum("J-20")]
          J20,
        /// <summary>
        /// J55 property
        /// </summary>
          [XmlEnum("J-55")]
          J55,
        /// <summary>
        /// K40 property
        /// </summary>
          [XmlEnum("K-40")]
          K40,
        /// <summary>
        /// K55 property
        /// </summary>
          [XmlEnum("K-55")]
          K55,
        /// <summary>
        /// L80 property
        /// </summary>
          [XmlEnum("L-80")]
          L80,
        /// <summary>
        /// LS50 property
        /// </summary>
          [XmlEnum("LS-50")]
          LS50,
        /// <summary>
        /// LS65 property
        /// </summary>
          [XmlEnum("LS-65")]
          LS65,
        /// <summary>
        /// M65 property
        /// </summary>
          [XmlEnum("M-65")]
          M65,
        /// <summary>
        /// M90 property
        /// </summary>
          [XmlEnum("M-90")]
          M90,
        /// <summary>
        /// M95 property
        /// </summary>
          [XmlEnum("M-95")]
          M95,
        /// <summary>
        /// MAV50 property
        /// </summary>
          [XmlEnum("MAV-50")]
          MAV50,
        /// <summary>
        /// N105 property
        /// </summary>
          [XmlEnum("N-105")]
          N105,
        /// <summary>
        /// N23 property
        /// </summary>
          [XmlEnum("N-23")]
          N23,
        /// <summary>
        /// N80 property
        /// </summary>
          [XmlEnum("N-80")]
          N80,
        /// <summary>
        /// P105 property
        /// </summary>
          [XmlEnum("P-105")]
          P105,
        /// <summary>
        /// P110 property
        /// </summary>
          [XmlEnum("P-110")]
          P110,
        /// <summary>
        /// Q125 property
        /// </summary>
          [XmlEnum("Q-125")]
          Q125,
        /// <summary>
        /// S80 property
        /// </summary>
          [XmlEnum("S-80")]
          S80,
        /// <summary>
        /// S95 property
        /// </summary>
          [XmlEnum("S-95")]
          S95,
        /// <summary>
        /// T95 property
        /// </summary>
          [XmlEnum("T-95")]
          T95,
        /// <summary>
        /// X140 property
        /// </summary>
          [XmlEnum("X-140")]
          X140,
        /// <summary>
        /// Unknown property
        /// </summary>
          Unknown,
        /// <summary>
        /// EL property
        /// </summary>
          EL,
        /// <summary>
        /// MD56 property
        /// </summary>
          [XmlEnum("MD-56")]
          MD56,
        /// <summary>
        /// S60 property
        /// </summary>
          [XmlEnum("S-60")]
          S60,
        /// <summary>
        /// S67 property
        /// </summary>
          [XmlEnum("S-67")]
          S67,
        /// <summary>
        /// S87 property
        /// </summary>
          [XmlEnum("S-87")]
          S87,
        /// <summary>
        /// S88 property
        /// </summary>
          [XmlEnum("S-88")]
          S88,
        /// <summary>
        /// XD property
        /// </summary>
          XD,
        /// <summary>
        /// S59 property
        /// </summary>
          [XmlEnum("S-59")]
          S59,
        /// <summary>
        /// KD63 property
        /// </summary>
          [XmlEnum("KD-63")]
          KD63,
        /// <summary>
        /// N30 property
        /// </summary>
          [XmlEnum("N-30")]
          N30,
        /// <summary>
        /// N40 property
        /// </summary>
          [XmlEnum("N-40")]
          N40,
        /// <summary>
        /// N54 property
        /// </summary>
          [XmlEnum("N-54")]
          N54,
        /// <summary>
        /// N78 property
        /// </summary>
          [XmlEnum("N-78")]
          N78,
        /// <summary>
        /// N75 property
        /// </summary>
          [XmlEnum("N-75")]
          N75,
        /// <summary>
        /// N90 property
        /// </summary>
          [XmlEnum("N-90")]
          N90,
        /// <summary>
        /// N96 property
        /// </summary>
          [XmlEnum("N-96")]
          N96,
        /// <summary>
        /// Item35 property
        /// </summary>
          [XmlEnum("35")]
          Item35,
        /// <summary>
        /// Item50 property
        /// </summary>
          [XmlEnum("50")]
          Item50,
        /// <summary>
        /// Item45 property
        /// </summary>
          [XmlEnum("45")]
          Item45,
        /// <summary>
        /// TK65 property
        /// </summary>
          [XmlEnum("T-K65")]
          TK65,
        /// <summary>
        /// Item46 property
        /// </summary>
          [XmlEnum("46")]
          Item46,
        /// <summary>
        /// TD61 property
        /// </summary>
          [XmlEnum("T-D61")]
          TD61,
        /// <summary>
        /// TD63 property
        /// </summary>
          [XmlEnum("T-D63")]
          TD63,
        /// <summary>
        /// Item75 property
        /// </summary>
          [XmlEnum("75")]
          Item75,
        /// <summary>
        /// Item75A property
        /// </summary>
          [XmlEnum("75A")]
          Item75A,
        /// <summary>
        /// Item95 property
        /// </summary>
          [XmlEnum("95")]
          Item95,
        /// <summary>
        /// PH6 property
        /// </summary>
          [XmlEnum("PH-6")]
          PH6,
        /// <summary>
        /// WC50 property
        /// </summary>
          [XmlEnum("WC-50")]
          WC50,
        /// <summary>
        /// SOO95 property
        /// </summary>
          [XmlEnum("SOO-95")]
          SOO95,
        /// <summary>
        /// A53B property
        /// </summary>
          A53B,
        /// <summary>
        /// FS80 property
        /// </summary>
          [XmlEnum("FS-80")]
          FS80,
        /// <summary>
        /// FSS95 property
        /// </summary>
          [XmlEnum("FSS-95")]
          FSS95,
        /// <summary>
        /// SC90 property
        /// </summary>
          [XmlEnum("SC-90")]
          SC90,
        /// <summary>
        /// USS95 property
        /// </summary>
          [XmlEnum("USS-95")]
          USS95,
        /// <summary>
        /// USS125 property
        /// </summary>
          [XmlEnum("USS-125")]
          USS125,
        /// <summary>
        /// USS140 property
        /// </summary>
          [XmlEnum("USS-140")]
          USS140,
        /// <summary>
        /// GT80S property
        /// </summary>
          [XmlEnum("GT-80S")]
          GT80S,
        /// <summary>
        /// USS50 property
        /// </summary>
          [XmlEnum("USS-50")]
          USS50,
        /// <summary>
        /// LS140 property
        /// </summary>
          [XmlEnum("LS-140")]
          LS140,
        /// <summary>
        /// HCL80 property
        /// </summary>
          [XmlEnum("HCL-80")]
          HCL80,
        /// <summary>
        /// HCN80 property
        /// </summary>
          [XmlEnum("HCN-80")]
          HCN80,
        /// <summary>
        /// HCP110 property
        /// </summary>
          [XmlEnum("HCP-110")]
          HCP110,
        /// <summary>
        /// HCQ125 property
        /// </summary>
          [XmlEnum("HCQ-125")]
          HCQ125,
        /// <summary>
        /// H2S90 property
        /// </summary>
          [XmlEnum("H2S-90")]
          H2S90,
        /// <summary>
        /// QT700 property
        /// </summary>
          [XmlEnum("QT-700")]
          QT700,
        /// <summary>
        /// QT800 property
        /// </summary>
          [XmlEnum("QT-800")]
          QT800,
        /// <summary>
        /// QT900 property
        /// </summary>
          [XmlEnum("QT-900")]
          QT900,
        /// <summary>
        /// QT1000 property
        /// </summary>
          [XmlEnum("QT-1000")]
          QT1000,
        /// <summary>
        /// QT1200 property
        /// </summary>
          [XmlEnum("QT-1200")]
          QT1200,
        /// <summary>
        /// HO70 property
        /// </summary>
          [XmlEnum("HO-70")]
          HO70,
        /// <summary>
        /// A53 property
        /// </summary>
          A53,
        /// <summary>
        /// A53A property
        /// </summary>
          A53A,
        /// <summary>
        /// H2S95 property
        /// </summary>
          [XmlEnum("H2S-95")]
          H2S95,
        /// <summary>
        /// HCK55 property
        /// </summary>
          [XmlEnum("HCK-55")]
          HCK55,
        /// <summary>
        /// B property
        /// </summary>
          B,
        /// <summary>
        /// X42 property
        /// </summary>
          [XmlEnum("X-42")]
          X42,
        /// <summary>
        /// X52 property
        /// </summary>
          [XmlEnum("X-52")]
          X52,
        /// <summary>
        /// X56 property
        /// </summary>
          [XmlEnum("X-56")]
          X56,
        /// <summary>
        /// Item13CR property
        /// </summary>
          [XmlEnum("13CR")]
          Item13CR,
        /// <summary>
        /// Item13CR80 property
        /// </summary>
          [XmlEnum("13CR- 80")]
          Item13CR80,
        /// <summary>
        /// Item13CR85 property
        /// </summary>
          [XmlEnum("13CR- 85")]
          Item13CR85,
        /// <summary>
        /// Item13CR95 property
        /// </summary>
          [XmlEnum("13CR- 95")]
          Item13CR95,
        /// <summary>
        /// Item13CR110 property
        /// </summary>
          [XmlEnum("13CR-110")]
          Item13CR110,
        /// <summary>
        /// X46 property
        /// </summary>
          [XmlEnum("X-46")]
          X46,
        /// <summary>
        /// X60 property
        /// </summary>
          [XmlEnum("X-60")]
          X60,
        /// <summary>
        /// X70 property
        /// </summary>
          [XmlEnum("X-70")]
          X70,
        /// <summary>
        /// X property
        /// </summary>
          X,
        /// <summary>
        /// G property
        /// </summary>
          G,
        /// <summary>
        /// S property
        /// </summary>
          S,
        /// <summary>
        /// Stainless property
        /// </summary>
          Stainless,
        /// <summary>
        /// SWR property
        /// </summary>
          SWR,
        /// <summary>
        /// DWR property
        /// </summary>
          DWR,
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// SM property
        /// </summary>
          SM,
        /// <summary>
        /// UHS property
        /// </summary>
          UHS,
        /// <summary>
        /// MMS property
        /// </summary>
          MMS,
        /// <summary>
        /// PCP900 property
        /// </summary>
          [XmlEnum("PCP  900")]
          PCP900,
        /// <summary>
        /// PCP1000 property
        /// </summary>
          [XmlEnum("PCP 1000")]
          PCP1000,
        /// <summary>
        /// PCP1500 property
        /// </summary>
          [XmlEnum("PCP 1500")]
          PCP1500,
        /// <summary>
        /// PCP2500 property
        /// </summary>
          [XmlEnum("PCP 2500")]
          PCP2500,
        /// <summary>
        /// Plus property
        /// </summary>
          Plus,
        /// <summary>
        /// Item620C property
        /// </summary>
          [XmlEnum("620C")]
          Item620C,
        /// <summary>
        /// Item780M property
        /// </summary>
          [XmlEnum("780M")]
          Item780M,
        /// <summary>
        /// Item750N property
        /// </summary>
          [XmlEnum("750N")]
          Item750N,
        /// <summary>
        /// Item960M property
        /// </summary>
          [XmlEnum("960M")]
          Item960M,
        /// <summary>
        /// Item970N property
        /// </summary>
          [XmlEnum("970N")]
          Item970N
        }
        /// <summary>
        /// This class represents the Coating xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the Coating xsd enumeration.")]
        public enum Coating 
        {
        /// <summary>
        /// NA property
        /// </summary>
          [XmlEnum("N/A")]
          NA,
        /// <summary>
        /// SPRAYMETALMONEL property
        /// </summary>
          [XmlEnum("SPRAY-METAL-MONEL")]
          SPRAYMETALMONEL,
        /// <summary>
        /// TUFFR property
        /// </summary>
          TUFFR,
        /// <summary>
        /// CORROSIONCOATING property
        /// </summary>
          [XmlEnum("CORROSION COATING")]
          CORROSIONCOATING,
        /// <summary>
        /// CARBURIZEDHARDENED property
        /// </summary>
          [XmlEnum("CARBURIZED-HARDENED")]
          CARBURIZEDHARDENED,
        /// <summary>
        /// CARBURIZED property
        /// </summary>
          CARBURIZED,
        /// <summary>
        /// CARBONNITRIDED property
        /// </summary>
          CARBONNITRIDED,
        /// <summary>
        /// CHROMEPLATEDGROOVED property
        /// </summary>
          [XmlEnum("CHROMEPLATED-GROOVED")]
          CHROMEPLATEDGROOVED,
        /// <summary>
        /// CHROMEPLATEDHEAVY property
        /// </summary>
          [XmlEnum("CHROMEPLATED-HEAVY")]
          CHROMEPLATEDHEAVY,
        /// <summary>
        /// HARDLINED property
        /// </summary>
          [XmlEnum("HARD-LINED")]
          HARDLINED,
        /// <summary>
        /// HARDENED property
        /// </summary>
          HARDENED,
        /// <summary>
        /// INS property
        /// </summary>
          INS,
        /// <summary>
        /// LP property
        /// </summary>
          LP,
        /// <summary>
        /// IPCS505 property
        /// </summary>
          [XmlEnum("IPC-S505")]
          IPCS505,
        /// <summary>
        /// IPCS650 property
        /// </summary>
          [XmlEnum("IPC-S650")]
          IPCS650,
        /// <summary>
        /// IPCTK70 property
        /// </summary>
          [XmlEnum("IPC-TK70")]
          IPCTK70,
        /// <summary>
        /// CHROMEPLATED property
        /// </summary>
          [XmlEnum("CHROME-PLATED")]
          CHROMEPLATED,
        /// <summary>
        /// NICKELCARBIDE property
        /// </summary>
          [XmlEnum("NICKEL-CARBIDE")]
          NICKELCARBIDE,
        /// <summary>
        /// SPRAYMETAL property
        /// </summary>
          [XmlEnum("SPRAY-METAL")]
          SPRAYMETAL,
        /// <summary>
        /// PLUNGERLUBRICANT property
        /// </summary>
          [XmlEnum("PLUNGER-LUBRICANT")]
          PLUNGERLUBRICANT,
        /// <summary>
        /// MOLY property
        /// </summary>
          MOLY,
        /// <summary>
        /// MTR property
        /// </summary>
          MTR,
        /// <summary>
        /// NITRIDED property
        /// </summary>
          NITRIDED,
        /// <summary>
        /// NICKELPLATED property
        /// </summary>
          [XmlEnum("NICKEL-PLATED")]
          NICKELPLATED,
        /// <summary>
        /// PAP property
        /// </summary>
          PAP,
        /// <summary>
        /// PHOSPHORUS property
        /// </summary>
          PHOSPHORUS,
        /// <summary>
        /// PLASTIC property
        /// </summary>
          PLASTIC,
        /// <summary>
        /// TEFLONRED property
        /// </summary>
          [XmlEnum("TEFLON-RED")]
          TEFLONRED,
        /// <summary>
        /// SPRAYMETALODNICKELPLATEDID property
        /// </summary>
          [XmlEnum("SPRAYMETAL-OD/NICKELPLATED-ID")]
          SPRAYMETALODNICKELPLATEDID,
        /// <summary>
        /// SPRAYMETALTHICK property
        /// </summary>
          [XmlEnum("SPRAYMETAL-THICK")]
          SPRAYMETALTHICK,
        /// <summary>
        /// TEFLONTAN property
        /// </summary>
          [XmlEnum("TEFLON-TAN")]
          TEFLONTAN,
        /// <summary>
        /// TEFLONYELLOW property
        /// </summary>
          [XmlEnum("TEFLON-YELLOW")]
          TEFLONYELLOW,
        /// <summary>
        /// DBLGALV property
        /// </summary>
          DBLGALV,
        /// <summary>
        /// IPCNYLON property
        /// </summary>
          [XmlEnum("IPC-NYLON")]
          IPCNYLON,
        /// <summary>
        /// IPCEPXTHK property
        /// </summary>
          [XmlEnum("IPC-EPXTHK")]
          IPCEPXTHK,
        /// <summary>
        /// IPCEPXTHN property
        /// </summary>
          [XmlEnum("IPC-EPXTHN")]
          IPCEPXTHN,
        /// <summary>
        /// FIBERGLASSLINED property
        /// </summary>
          [XmlEnum("FIBERGLASS-LINED")]
          FIBERGLASSLINED,
        /// <summary>
        /// CEMENTLINED property
        /// </summary>
          CEMENTLINED,
        /// <summary>
        /// PVCLINED property
        /// </summary>
          PVCLINED,
        /// <summary>
        /// PELINED property
        /// </summary>
          PELINED,
        /// <summary>
        /// SSLINED property
        /// </summary>
          SSLINED,
        /// <summary>
        /// IPCEPOXY property
        /// </summary>
          [XmlEnum("IPC-EPOXY")]
          IPCEPOXY,
        /// <summary>
        /// BARE property
        /// </summary>
          BARE,
        /// <summary>
        /// DUOLINE property
        /// </summary>
          DUOLINE,
        /// <summary>
        /// RODGUIDE1 property
        /// </summary>
          [XmlEnum("RODGUIDE-1")]
          RODGUIDE1,
        /// <summary>
        /// RODGUIDE2 property
        /// </summary>
          [XmlEnum("RODGUIDE-2")]
          RODGUIDE2,
        /// <summary>
        /// RODGUIDE21 property
        /// </summary>
          [XmlEnum("RODGUIDE-2.")]
          RODGUIDE21,
        /// <summary>
        /// RODGUIDE3 property
        /// </summary>
          [XmlEnum("RODGUIDE-3")]
          RODGUIDE3,
        /// <summary>
        /// RODGUIDE4 property
        /// </summary>
          [XmlEnum("RODGUIDE-4")]
          RODGUIDE4,
        /// <summary>
        /// RODGUIDE5 property
        /// </summary>
          [XmlEnum("RODGUIDE-5")]
          RODGUIDE5,
        /// <summary>
        /// RODGUIDE6 property
        /// </summary>
          [XmlEnum("RODGUIDE-6")]
          RODGUIDE6,
        /// <summary>
        /// RODGUIDE7 property
        /// </summary>
          [XmlEnum("RODGUIDE-7")]
          RODGUIDE7,
        /// <summary>
        /// RODGUIDESO property
        /// </summary>
          [XmlEnum("RODGUIDE-SO")]
          RODGUIDESO,
        /// <summary>
        /// RODGUIDESp property
        /// </summary>
          [XmlEnum("RODGUIDE-Sp")]
          RODGUIDESp,
        /// <summary>
        /// RODGUIDEFx property
        /// </summary>
          [XmlEnum("RODGUIDE-Fx")]
          RODGUIDEFx,
        /// <summary>
        /// RODGUIDESO1 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO1")]
          RODGUIDESO1,
        /// <summary>
        /// RODGUIDESO2 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO2")]
          RODGUIDESO2,
        /// <summary>
        /// RODGUIDESO3 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO3")]
          RODGUIDESO3,
        /// <summary>
        /// RODGUIDESO4 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO4")]
          RODGUIDESO4,
        /// <summary>
        /// RODGUIDESO5 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO5")]
          RODGUIDESO5,
        /// <summary>
        /// RODGUIDESO6 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO6")]
          RODGUIDESO6,
        /// <summary>
        /// RODGUIDESO8 property
        /// </summary>
          [XmlEnum("RODGUIDE-SO8")]
          RODGUIDESO8,
        /// <summary>
        /// POLYPROPYLENE property
        /// </summary>
          POLYPROPYLENE,
        /// <summary>
        /// EPDM property
        /// </summary>
          EPDM,
        /// <summary>
        /// NITRILE property
        /// </summary>
          NITRILE,
        /// <summary>
        /// TEFLON property
        /// </summary>
          TEFLON,
        /// <summary>
        /// PPWNitrl property
        /// </summary>
          [XmlEnum("PPW/Nitrl")]
          PPWNitrl,
        /// <summary>
        /// TK99 property
        /// </summary>
          [XmlEnum("TK-99")]
          TK99,
        /// <summary>
        /// IPCRWrap property
        /// </summary>
          [XmlEnum("IPC-RWrap")]
          IPCRWrap,
        /// <summary>
        /// IPC property
        /// </summary>
          IPC,
        /// <summary>
        /// THERMO property
        /// </summary>
          THERMO,
        /// <summary>
        /// TK4 property
        /// </summary>
          [XmlEnum("TK-4")]
          TK4,
        /// <summary>
        /// POLISHEDRODLINER property
        /// </summary>
          [XmlEnum("POLISHED-RODLINER")]
          POLISHEDRODLINER,
        /// <summary>
        /// ZINCPLATED property
        /// </summary>
          ZINCPLATED,
        /// <summary>
        /// PHOSPHATE property
        /// </summary>
          PHOSPHATE,
        /// <summary>
        /// GALVANIZED property
        /// </summary>
          GALVANIZED,
        /// <summary>
        /// DUOLINE10 property
        /// </summary>
          DUOLINE10,
        /// <summary>
        /// DUOLINE20 property
        /// </summary>
          DUOLINE20,
        /// <summary>
        /// IPCTK75 property
        /// </summary>
          [XmlEnum("IPC-TK75")]
          IPCTK75,
        /// <summary>
        /// SPRAYMETALMONEL1 property
        /// </summary>
          [XmlEnum("SPRAYMETAL-MONEL")]
          SPRAYMETALMONEL1,
        /// <summary>
        /// SPRAYMETALNICKEL property
        /// </summary>
          [XmlEnum("SPRAYMETAL-NICKEL")]
          SPRAYMETALNICKEL,
        /// <summary>
        /// SPRAYMETALSTEEL property
        /// </summary>
          [XmlEnum("SPRAYMETAL-STEEL")]
          SPRAYMETALSTEEL,
        /// <summary>
        /// DUOLIN20WR property
        /// </summary>
          DUOLIN20WR,
        /// <summary>
        /// CHROME property
        /// </summary>
          CHROME,
        /// <summary>
        /// TUNGSTENPLATED property
        /// </summary>
          [XmlEnum("TUNGSTEN PLATED")]
          TUNGSTENPLATED
        }
        /// <summary>
        /// This class represents the GeologyType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GeologyType xsd enumeration.")]
        public enum GeologyType 
        {
        /// <summary>
        /// Aquifer property
        /// </summary>
          Aquifer,
        /// <summary>
        /// Reservoir property
        /// </summary>
          Reservoir
        }
        /// <summary>
        /// This class represents the BoreholeType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BoreholeType xsd enumeration.")]
        public enum BoreholeType 
        {
        /// <summary>
        /// Cavern property
        /// </summary>
          Cavern,
        /// <summary>
        /// Cavity property
        /// </summary>
          Cavity,
        /// <summary>
        /// NormalBorehole property
        /// </summary>
          NormalBorehole,
        /// <summary>
        /// UnderReam property
        /// </summary>
          UnderReam
        }
        /// <summary>
        /// This class represents the DownholeStringType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the DownholeStringType xsd enumeration.")]
        public enum DownholeStringType 
        {
        /// <summary>
        /// Casing property
        /// </summary>
          Casing,
        /// <summary>
        /// Rod property
        /// </summary>
          Rod,
        /// <summary>
        /// Tubing property
        /// </summary>
          Tubing,
        /// <summary>
        /// Wellhead property
        /// </summary>
          Wellhead,
        /// <summary>
        /// Others property
        /// </summary>
          Others
        }
        /// <summary>
        /// This class represents the SubStringType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the SubStringType xsd enumeration.")]
        public enum SubStringType 
        {
        /// <summary>
        /// AbandonedJunkFish property
        /// </summary>
          [XmlEnum("Abandoned Junk/Fish")]
          AbandonedJunkFish,
        /// <summary>
        /// CapillaryStringinsideTubing property
        /// </summary>
          [XmlEnum("Capillary String (inside Tubing)")]
          CapillaryStringinsideTubing,
        /// <summary>
        /// CapillaryStringTubingCasingAnnulus property
        /// </summary>
          [XmlEnum(" Capillary String (Tubing/Casing Annulus)")]
          CapillaryStringTubingCasingAnnulus,
        /// <summary>
        /// SurfaceCasing property
        /// </summary>
          [XmlEnum("Surface Casing")]
          SurfaceCasing,
        /// <summary>
        /// ConductorCasing property
        /// </summary>
          [XmlEnum("Conductor Casing")]
          ConductorCasing,
        /// <summary>
        /// IntermediateCasing property
        /// </summary>
          [XmlEnum("Intermediate Casing")]
          IntermediateCasing,
        /// <summary>
        /// ProductionCasing property
        /// </summary>
          [XmlEnum("Production Casing")]
          ProductionCasing,
        /// <summary>
        /// ProtectiveCasing property
        /// </summary>
          [XmlEnum(" Protective Casing")]
          ProtectiveCasing,
        /// <summary>
        /// DrillString property
        /// </summary>
          [XmlEnum("Drill String")]
          DrillString,
        /// <summary>
        /// ProductionLiner property
        /// </summary>
          [XmlEnum("Production Liner ")]
          ProductionLiner,
        /// <summary>
        /// WellboreNotes property
        /// </summary>
          [XmlEnum("Wellbore Notes")]
          WellboreNotes,
        /// <summary>
        /// YToolString property
        /// </summary>
          [XmlEnum("Y-Tool String")]
          YToolString,
        /// <summary>
        /// InnerLiner property
        /// </summary>
          [XmlEnum("Inner Liner ")]
          InnerLiner,
        /// <summary>
        /// GeologicalObjects property
        /// </summary>
          [XmlEnum("Geological Objects")]
          GeologicalObjects,
        /// <summary>
        /// Flowline property
        /// </summary>
          Flowline
        }
        /// <summary>
        /// This class represents the LogRectangularType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogRectangularType xsd enumeration.")]
        public enum LogRectangularType 
        {
        /// <summary>
        /// header property
        /// </summary>
          header,
        /// <summary>
        /// blank property
        /// </summary>
          blank,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LineStyle xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LineStyle xsd enumeration.")]
        public enum LineStyle 
        {
        /// <summary>
        /// dashed property
        /// </summary>
          dashed,
        /// <summary>
        /// solid property
        /// </summary>
          solid
        }
        /// <summary>
        /// This class represents the ScaleType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ScaleType xsd enumeration.")]
        public enum ScaleType 
        {
        /// <summary>
        /// linear property
        /// </summary>
          linear,
        /// <summary>
        /// logarithmic property
        /// </summary>
          logarithmic
        }
        /// <summary>
        /// This class represents the BackupScaleType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the BackupScaleType xsd enumeration.")]
        public enum BackupScaleType 
        {
        /// <summary>
        /// offscaleleftright property
        /// </summary>
          [XmlEnum("offscale left/right")]
          offscaleleftright,
        /// <summary>
        /// x10 property
        /// </summary>
          x10,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the LogTrackType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogTrackType xsd enumeration.")]
        public enum LogTrackType 
        {
        /// <summary>
        /// depth property
        /// </summary>
          depth,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the CalibrationPointRole xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CalibrationPointRole xsd enumeration.")]
        public enum CalibrationPointRole 
        {
        /// <summary>
        /// leftedge property
        /// </summary>
          [XmlEnum("left edge")]
          leftedge,
        /// <summary>
        /// rightedge property
        /// </summary>
          [XmlEnum("right edge")]
          rightedge,
        /// <summary>
        /// fraction property
        /// </summary>
          fraction,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the LogSectionType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LogSectionType xsd enumeration.")]
        public enum LogSectionType 
        {
        /// <summary>
        /// main property
        /// </summary>
          main,
        /// <summary>
        /// repeat property
        /// </summary>
          repeat,
        /// <summary>
        /// calibration property
        /// </summary>
          calibration,
        /// <summary>
        /// tiein property
        /// </summary>
          [XmlEnum("tie in")]
          tiein,
        /// <summary>
        /// goinginhole property
        /// </summary>
          [XmlEnum("going in hole")]
          goinginhole,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MessageDigestType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MessageDigestType xsd enumeration.")]
        public enum MessageDigestType 
        {
        /// <summary>
        /// MD5 property
        /// </summary>
          MD5,
        /// <summary>
        /// SHA1 property
        /// </summary>
          SHA1
        }
        /// <summary>
        /// This class represents the FileSizeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the FileSizeUom xsd enumeration.")]
        public enum FileSizeUom 
        {
        /// <summary>
        /// bytes property
        /// </summary>
          bytes,
        /// <summary>
        /// kBytes property
        /// </summary>
          kBytes,
        /// <summary>
        /// MBytes property
        /// </summary>
          MBytes
        }
        /// <summary>
        /// This class represents the FileNameType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the FileNameType xsd enumeration.")]
        public enum FileNameType 
        {
        /// <summary>
        /// filename property
        /// </summary>
          [XmlEnum("file name")]
          filename,
        /// <summary>
        /// pathname property
        /// </summary>
          [XmlEnum("path name")]
          pathname,
        /// <summary>
        /// universalresourcelocator property
        /// </summary>
          [XmlEnum("universal resource locator")]
          universalresourcelocator,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the MimeType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the MimeType xsd enumeration.")]
        public enum MimeType 
        {
        /// <summary>
        /// imagetiff property
        /// </summary>
          [XmlEnum("image/tiff")]
          imagetiff,
        /// <summary>
        /// imagegif property
        /// </summary>
          [XmlEnum("image/gif")]
          imagegif,
        /// <summary>
        /// imagepng property
        /// </summary>
          [XmlEnum("image/png")]
          imagepng,
        /// <summary>
        /// imagexmlsvg property
        /// </summary>
          [XmlEnum("image/xml+svg")]
          imagexmlsvg,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ContactIntervalType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ContactIntervalType xsd enumeration.")]
        public enum ContactIntervalType 
        {
        /// <summary>
        /// GravelPack property
        /// </summary>
          GravelPack,
        /// <summary>
        /// Openhole property
        /// </summary>
          Openhole,
        /// <summary>
        /// Perforation property
        /// </summary>
          Perforation,
        /// <summary>
        /// Slots property
        /// </summary>
          Slots
        }
        /// <summary>
        /// This class represents the CrudeOilClass xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CrudeOilClass xsd enumeration.")]
        public enum CrudeOilClass 
        {
        /// <summary>
        /// bitumous property
        /// </summary>
          bitumous,
        /// <summary>
        /// condensate property
        /// </summary>
          condensate,
        /// <summary>
        /// heavy property
        /// </summary>
          heavy,
        /// <summary>
        /// light property
        /// </summary>
          light,
        /// <summary>
        /// medium property
        /// </summary>
          medium,
        /// <summary>
        /// premiumlight property
        /// </summary>
          [XmlEnum("premium light")]
          premiumlight
        }
        /// <summary>
        /// This class represents the CrudeOilType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the CrudeOilType xsd enumeration.")]
        public enum CrudeOilType 
        {
        /// <summary>
        /// sour property
        /// </summary>
          sour,
        /// <summary>
        /// sweet property
        /// </summary>
          sweet,
        /// <summary>
        /// heavy property
        /// </summary>
          heavy,
        /// <summary>
        /// light property
        /// </summary>
          light
        }
        /// <summary>
        /// This class represents the FluidType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the FluidType xsd enumeration.")]
        public enum FluidType 
        {
        /// <summary>
        /// Bitumen property
        /// </summary>
          Bitumen,
        /// <summary>
        /// Condensate property
        /// </summary>
          Condensate,
        /// <summary>
        /// HydrocabonGas property
        /// </summary>
          [XmlEnum("Hydrocabon Gas")]
          HydrocabonGas,
        /// <summary>
        /// NoncombustibleGas property
        /// </summary>
          [XmlEnum("Non-combustible Gas")]
          NoncombustibleGas,
        /// <summary>
        /// Oil property
        /// </summary>
          Oil,
        /// <summary>
        /// Water property
        /// </summary>
          Water
        }
        /// <summary>
        /// This class represents the GasType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the GasType xsd enumeration.")]
        public enum GasType 
        {
        /// <summary>
        /// acidgas property
        /// </summary>
          [XmlEnum("acid gas")]
          acidgas,
        /// <summary>
        /// coalbedmethane property
        /// </summary>
          [XmlEnum("coalbed methane")]
          coalbedmethane,
        /// <summary>
        /// methane property
        /// </summary>
          methane,
        /// <summary>
        /// ethane property
        /// </summary>
          ethane,
        /// <summary>
        /// ethaneplus property
        /// </summary>
          [XmlEnum("ethane plus")]
          ethaneplus,
        /// <summary>
        /// propane property
        /// </summary>
          propane,
        /// <summary>
        /// butane property
        /// </summary>
          butane,
        /// <summary>
        /// pentane property
        /// </summary>
          pentane,
        /// <summary>
        /// C5H12pentaneplus property
        /// </summary>
          [XmlEnum("C5H12 - pentane plus")]
          C5H12pentaneplus,
        /// <summary>
        /// carbondioxide property
        /// </summary>
          [XmlEnum("carbon dioxide")]
          carbondioxide,
        /// <summary>
        /// condensate property
        /// </summary>
          condensate,
        /// <summary>
        /// helium property
        /// </summary>
          helium,
        /// <summary>
        /// liquidpetroleumgas property
        /// </summary>
          [XmlEnum("liquid petroleum gas")]
          liquidpetroleumgas,
        /// <summary>
        /// sulphur property
        /// </summary>
          sulphur,
        /// <summary>
        /// miscible property
        /// </summary>
          miscible,
        /// <summary>
        /// H2S property
        /// </summary>
          H2S,
        /// <summary>
        /// air property
        /// </summary>
          air,
        /// <summary>
        /// nitrogen property
        /// </summary>
          nitrogen,
        /// <summary>
        /// hydrogen property
        /// </summary>
          hydrogen,
        /// <summary>
        /// oxygen property
        /// </summary>
          oxygen
        }
        /// <summary>
        /// This class represents the LiftMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the LiftMethod xsd enumeration.")]
        public enum LiftMethod 
        {
        /// <summary>
        /// Flowing property
        /// </summary>
          Flowing,
        /// <summary>
        /// GasLiftContinuous property
        /// </summary>
          [XmlEnum("GasLift-Continuous")]
          GasLiftContinuous,
        /// <summary>
        /// GasLiftNonContinuous property
        /// </summary>
          [XmlEnum("GasLift-NonContinuous")]
          GasLiftNonContinuous,
        /// <summary>
        /// JetHydraulicPump property
        /// </summary>
          [XmlEnum("Jet/Hydraulic Pump")]
          JetHydraulicPump,
        /// <summary>
        /// JackLinePump property
        /// </summary>
          [XmlEnum("JackLine Pump")]
          JackLinePump,
        /// <summary>
        /// ProgressiveCavityPump property
        /// </summary>
          [XmlEnum("Progressive Cavity Pump")]
          ProgressiveCavityPump,
        /// <summary>
        /// PlungerLift property
        /// </summary>
          [XmlEnum("Plunger Lift")]
          PlungerLift,
        /// <summary>
        /// RodPump property
        /// </summary>
          [XmlEnum("Rod Pump")]
          RodPump,
        /// <summary>
        /// SubmersiblePump property
        /// </summary>
          [XmlEnum("Submersible Pump")]
          SubmersiblePump,
        /// <summary>
        /// SumbersiblePumpTandem property
        /// </summary>
          [XmlEnum("Sumbersible Pump Tandem")]
          SumbersiblePumpTandem,
        /// <summary>
        /// GasLift property
        /// </summary>
          GasLift
        }
        /// <summary>
        /// This class represents the PerforationFluidType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerforationFluidType xsd enumeration.")]
        public enum PerforationFluidType 
        {
        /// <summary>
        /// NA property
        /// </summary>
          [XmlEnum("N/A")]
          NA,
        /// <summary>
        /// BrineWater property
        /// </summary>
          [XmlEnum("Brine Water")]
          BrineWater,
        /// <summary>
        /// FreshWater property
        /// </summary>
          [XmlEnum("Fresh Water")]
          FreshWater,
        /// <summary>
        /// ProducingOil property
        /// </summary>
          [XmlEnum("Producing Oil")]
          ProducingOil,
        /// <summary>
        /// ProducingWater property
        /// </summary>
          [XmlEnum("Producing Water")]
          ProducingWater,
        /// <summary>
        /// SaltWaterCaCl property
        /// </summary>
          [XmlEnum("Salt Water (CaCl)")]
          SaltWaterCaCl,
        /// <summary>
        /// SaltWaterKCl property
        /// </summary>
          [XmlEnum("Salt Water (KCl)")]
          SaltWaterKCl,
        /// <summary>
        /// SaltWaterNaCl property
        /// </summary>
          [XmlEnum("Salt Water (NaCl)")]
          SaltWaterNaCl
        }
        /// <summary>
        /// This class represents the PerforationPattern xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the PerforationPattern xsd enumeration.")]
        public enum PerforationPattern 
        {
        /// <summary>
        /// NA property
        /// </summary>
          [XmlEnum("N/A")]
          NA,
        /// <summary>
        /// Cluster property
        /// </summary>
          Cluster,
        /// <summary>
        /// Linear property
        /// </summary>
          Linear,
        /// <summary>
        /// Logarithmic property
        /// </summary>
          Logarithmic,
        /// <summary>
        /// Oriented property
        /// </summary>
          Oriented
        }
        /// <summary>
        /// This class represents the WaterSalinity xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the WaterSalinity xsd enumeration.")]
        public enum WaterSalinity 
        {
        /// <summary>
        /// brackishwater property
        /// </summary>
          brackishwater,
        /// <summary>
        /// brine property
        /// </summary>
          brine,
        /// <summary>
        /// fresh property
        /// </summary>
          fresh,
        /// <summary>
        /// saline property
        /// </summary>
          saline
        }
        /// <summary>
        /// This class represents the ResolutionUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.witsml.org/schemas/1series")]
        [Description("This class represents the ResolutionUom xsd enumeration.")]
        public enum ResolutionUom 
        {
        /// <summary>
        /// pixelsinch property
        /// </summary>
          [XmlEnum("pixels/inch")]
          pixelsinch
        }
    }
    #endregion
}