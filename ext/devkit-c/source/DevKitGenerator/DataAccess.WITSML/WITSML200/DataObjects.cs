
//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.WITSML200.ComponentSchemas;
using Energistics.DataAccess.WITSML200.ReferenceData;
using Energistics.DataAccess.Reflection;
using Energistics.DataAccess.Validation;

namespace Energistics.DataAccess.WITSML200
{
    #region Classes
    /// <summary>
    /// This class represents the AbstractObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarkerSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreCompletion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellCompletion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToolErrorTermSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SurveyProgram))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimJobStage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimJob))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimPerforationCluster))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Risk))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Rig))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RigUtilization))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CuttingsGeologyInterval))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CuttingsGeology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InterpretedGeologyInterval))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InterpretedGeology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ShowEvaluationInterval))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ShowEvaluation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreGeology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DepthRegImage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellCMLedger))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OpsReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Trajectory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToolErrorModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DownholeComponent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJob))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobEvaluation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Log))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Channel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChannelSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BhaRun))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidsReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DrillReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Tubular))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Attachment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Wellbore))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Well))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GraphicalInformationSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataAssuranceRecord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActivityTemplate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Activity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKindDictionary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EpcExternalPartReference))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDataObject", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[Description("This class represents the AbstractObject xsd type.")]
    public abstract partial class AbstractObject : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Aliases property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("Aliases")]
        public List<ObjectAlias> Aliases {
            get {
                return AliasesField;
            } 
            set {
                AliasesField = value;
                NotifyPropertyChanged("Aliases");
            }
        }

         /// <summary>
         /// bool to indicate if Aliases has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AliasesSpecified
         {
             get {
             if(AliasesField!=null)
                 return AliasesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> AliasesField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Citation")]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// CustomData property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("CustomData")]
        public CustomData CustomData {
            get {
                return CustomDataField;
            } 
            set {
                CustomDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData CustomDataField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// objectVersion property
        /// </summary>
		[StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("objectVersion")]
		
        public string ObjectVersion {
            get {
                return objectVersionField;
            } 
            set {
                objectVersionField = value;
                NotifyPropertyChanged("ObjectVersion");
            }
        }

        private string objectVersionField; 

		/// <summary>
        /// schemaVersion property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("schemaVersion")]
		
        public string SchemaVersion {
            get {
                return schemaVersionField;
            } 
            set {
                schemaVersionField = value;
                NotifyPropertyChanged("SchemaVersion");
            }
        }

        private string schemaVersionField; 

		/// <summary>
        /// uuid property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
        [XmlAttribute("uuid")]
		
        public string Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string uuidField; 

		/// <summary>
        /// existenceKind property
        /// </summary>
		[Description("A lifecycle state like actual, required, planned, predicted, etc. This is used to qualify any top-level element (from Epicentre 2.1).")]
        [EnergisticsDataTypeAttribute(DataType = "ExistenceKind")]
        [XmlAttribute("existenceKind")]
		
        public ExistenceKind ExistenceKind {
            get {
                return existenceKindField;
            } 
            set {
                existenceKindField = value;
                 this.ExistenceKindSpecified = true;
                NotifyPropertyChanged("ExistenceKind");
            }
        }

        private ExistenceKind existenceKindField; 

        /// <summary>
        /// existenceKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ExistenceKindSpecified {
            get {
                return existenceKindSpecifiedField;
            } 
            set {
                existenceKindSpecifiedField = value;
                NotifyPropertyChanged("ExistenceKindSpecified");
            }
        }

        private bool existenceKindSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ObjectAlias xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ObjectAlias", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ObjectAlias xsd type.")]
    public partial class ObjectAlias : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Identifier property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Identifier")]
        public string Identifier {
            get {
                return IdentifierField;
            } 
            set {
                IdentifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

        private string IdentifierField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

		/// <summary>
        /// authority property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("authority")]
		
        public string Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string authorityField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GravelPackInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GravelPackInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GravelPackInterval xsd type.")]
    public partial class GravelPackInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DownholeStringReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the downhole string that denotes the interval of the gravel pack.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DownholeStringReferenceId")]
        public string DownholeStringReferenceId {
            get {
                return DownholeStringReferenceIdField;
            } 
            set {
                DownholeStringReferenceIdField = value;
                NotifyPropertyChanged("DownholeStringReferenceId");
            }
        }

        private string DownholeStringReferenceIdField; 

        /// <summary>
        /// GravelPackMdInterval property
        /// </summary>
		[Description("Gravel packed measured depth interval for this completion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("GravelPackMdInterval")]
        public MdInterval GravelPackMDInterval {
            get {
                return GravelPackMdIntervalField;
            } 
            set {
                GravelPackMdIntervalField = value;
                NotifyPropertyChanged("GravelPackMDInterval");
            }
        }

        private MdInterval GravelPackMdIntervalField; 

        /// <summary>
        /// GravelPackTvdInterval property
        /// </summary>
		[Description("Gravel packed true vertical depth interval for this completion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("GravelPackTvdInterval")]
        public TvdInterval GravelPackTvdInterval {
            get {
                return GravelPackTvdIntervalField;
            } 
            set {
                GravelPackTvdIntervalField = value;
                NotifyPropertyChanged("GravelPackTvdInterval");
            }
        }

        private TvdInterval GravelPackTvdIntervalField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[Description("The contactInterval event information.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EventInfo")]
		[XmlElement("EventHistory")]
        public EventInfo EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo EventHistoryField; 

        /// <summary>
        /// GeologyFeatureReferenceId property
        /// </summary>
		[Description("Reference to a geology feature.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GeologyFeatureReferenceId")]
        public List<string> GeologyFeatureReferenceId {
            get {
                return GeologyFeatureReferenceIdField;
            } 
            set {
                GeologyFeatureReferenceIdField = value;
                NotifyPropertyChanged("GeologyFeatureReferenceId");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureReferenceId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureReferenceIdSpecified
         {
             get {
             if(GeologyFeatureReferenceIdField!=null)
                 return GeologyFeatureReferenceIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> GeologyFeatureReferenceIdField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// StatusHistory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IntervalStatusHistory")]
		[XmlElement("StatusHistory")]
        public List<IntervalStatusHistory> StatusHistory {
            get {
                return StatusHistoryField;
            } 
            set {
                StatusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if StatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusHistorySpecified
         {
             get {
             if(StatusHistoryField!=null)
                 return StatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntervalStatusHistory> StatusHistoryField; 

		/// <summary>
        /// Unique identifier for this instance of GravelPackInterval.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of GravelPackInterval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MdInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MdInterval", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MdInterval xsd type.")]
    public partial class MdInterval : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// MdTop property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MdTop")]
        public LengthMeasure MDTop {
            get {
                return MdTopField;
            } 
            set {
                MdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private LengthMeasure MdTopField; 

        /// <summary>
        /// MdBase property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MdBase")]
        public LengthMeasure MDBase {
            get {
                return MdBaseField;
            } 
            set {
                MdBaseField = value;
                NotifyPropertyChanged("MDBase");
            }
        }

        private LengthMeasure MdBaseField; 

		/// <summary>
        /// datum property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("datum")]
		
        public string Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string datumField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthMeasure xsd type.")]
    public partial class LengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        public LengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasure(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TvdInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TvdInterval", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TvdInterval xsd type.")]
    public partial class TvdInterval : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// TvdTop property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("TvdTop")]
        public LengthMeasure TvdTop {
            get {
                return TvdTopField;
            } 
            set {
                TvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private LengthMeasure TvdTopField; 

        /// <summary>
        /// TvdBase property
        /// </summary>
		[Required]
        [Description("True vertical depth at the base of the interval")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("TvdBase")]
        public LengthMeasure TvdBase {
            get {
                return TvdBaseField;
            } 
            set {
                TvdBaseField = value;
                NotifyPropertyChanged("TvdBase");
            }
        }

        private LengthMeasure TvdBaseField; 

		/// <summary>
        /// datum property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("datum")]
		
        public string Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string datumField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EventInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EventInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the EventInfo xsd type.")]
    public partial class EventInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// BeginEvent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EventRefInfo")]
		[XmlElement("BeginEvent")]
        public EventRefInfo BeginEvent {
            get {
                return BeginEventField;
            } 
            set {
                BeginEventField = value;
                NotifyPropertyChanged("BeginEvent");
            }
        }

        private EventRefInfo BeginEventField; 

        /// <summary>
        /// EndEvent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EventRefInfo")]
		[XmlElement("EndEvent")]
        public EventRefInfo EndEvent {
            get {
                return EndEventField;
            } 
            set {
                EndEventField = value;
                NotifyPropertyChanged("EndEvent");
            }
        }

        private EventRefInfo EndEventField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ExtensionNameValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ExtensionNameValue", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ExtensionNameValue xsd type.")]
    public partial class ExtensionNameValue : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ExtensionNameValue class.
        /// </summary>
        public ExtensionNameValue() {}

        /// <summary>
        /// Initializes a new instance of the ExtensionNameValue class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public ExtensionNameValue(StringMeasure value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size.  For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the  respective SIG Technical Team before use.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StringMeasure")]
		[XmlElement("Value")]
        public StringMeasure Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private StringMeasure ValueField; 

        /// <summary>
        /// MeasureClass property
        /// </summary>
		[Description("The kind of the measure. For example, \"length\". This should be specified if the value requires a unit of measure.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("MeasureClass")]
        public MeasureClass? MeasureClass {
            get {
                return MeasureClassField;
            } 
            set {
                MeasureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass? MeasureClassField; 

        /// <summary>
        /// MeasureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return MeasureClassSpecifiedField;
            } 
            set {
                MeasureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool MeasureClassSpecifiedField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[Description("The date-time associated with the value.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Index property
        /// </summary>
		[Description("Indexes things with the same name.  That is, 1 indicates the first one, 2 indicates the second one, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Index")]
        public int? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private int? IndexField; 

        /// <summary>
        /// IndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexSpecified {
            get {
                return IndexSpecifiedField;
            } 
            set {
                IndexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private bool IndexSpecifiedField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the extension.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the StringMeasure xsd type.")]
    public partial class StringMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringMeasure class.
        /// </summary>
        public StringMeasure() {}

        /// <summary>
        /// Initializes a new instance of the StringMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public StringMeasure(string value, UnitOfMeasure uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "UnitOfMeasure")]
        [XmlAttribute("uom")]
		
        public UnitOfMeasure Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                 this.UomSpecified = true;
                NotifyPropertyChanged("Uom");
            }
        }

        private UnitOfMeasure uomField; 

        /// <summary>
        /// uomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UomSpecified {
            get {
                return uomSpecifiedField;
            } 
            set {
                uomSpecifiedField = value;
                NotifyPropertyChanged("UomSpecified");
            }
        }

        private bool uomSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EventRefInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EventRefInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the EventRefInfo xsd type.")]
    public partial class EventRefInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The referencing eventledger ID.
        /// </summary>
		[StringLength(64)]
        [Description("The referencing eventledger ID.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("EventReferenceId")]
        public string EventReferenceId {
            get {
                return EventReferenceIdField;
            } 
            set {
                EventReferenceIdField = value;
                NotifyPropertyChanged("EventReferenceId");
            }
        }

        private string EventReferenceIdField; 

        /// <summary>
        /// Install/pull date.
        /// </summary>
		[Description("Install/pull date.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("EventDate")]
        public Timestamp? EventDate {
            get {
                return EventDateField;
            } 
            set {
                EventDateField = value;
                 this.EventDateSpecified = true;
                NotifyPropertyChanged("EventDate");
            }
        }

        
        private bool EventDateSpecifiedField = false;
        
        /// <summary>
        /// EventDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EventDateSpecified {
            get {
                return EventDateSpecifiedField;
            } 
            set {
                EventDateSpecifiedField = value;
                NotifyPropertyChanged("EventDateSpecified");
            }
        }
        
        private Timestamp? EventDateField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntervalStatusHistory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntervalStatusHistory", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IntervalStatusHistory xsd type.")]
    public partial class IntervalStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The physical status of an interval (e.g., open, closed, proposed).
        /// </summary>
		[Description("The physical status of an interval (e.g., open, closed, proposed).")]
        [EnergisticsDataTypeAttribute(DataType = "PhysicalStatus")]
		[XmlElement("PhysicalStatus")]
        public PhysicalStatus? PhysicalStatus {
            get {
                return PhysicalStatusField;
            } 
            set {
                PhysicalStatusField = value;
                 this.PhysicalStatusSpecified = true;
                NotifyPropertyChanged("PhysicalStatus");
            }
        }

        private PhysicalStatus? PhysicalStatusField; 

        /// <summary>
        /// PhysicalStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhysicalStatusSpecified {
            get {
                return PhysicalStatusSpecifiedField;
            } 
            set {
                PhysicalStatusSpecifiedField = value;
                NotifyPropertyChanged("PhysicalStatusSpecified");
            }
        }

        private bool PhysicalStatusSpecifiedField; 

        /// <summary>
        /// The start date of the status and allocation factor.
        /// </summary>
		[Description("The start date of  the status and allocation factor.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("StartDate")]
        public Timestamp? StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        
        private bool StartDateSpecifiedField = false;
        
        /// <summary>
        /// StartDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return StartDateSpecifiedField;
            } 
            set {
                StartDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }
        
        private Timestamp? StartDateField; 

        /// <summary>
        /// The end date of status and allocation factor.
        /// </summary>
		[Description("The end date of status and allocation factor.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("EndDate")]
        public Timestamp? EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        
        private bool EndDateSpecifiedField = false;
        
        /// <summary>
        /// EndDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return EndDateSpecifiedField;
            } 
            set {
                EndDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }
        
        private Timestamp? EndDateField; 

        /// <summary>
        /// Measured depth interval over which this status is valid for the given time frame.
        /// </summary>
		[Description("Measured depth interval over which this status is valid for the given time frame.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("StatusMdInterval")]
        public MdInterval StatusMDInterval {
            get {
                return StatusMdIntervalField;
            } 
            set {
                StatusMdIntervalField = value;
                NotifyPropertyChanged("StatusMDInterval");
            }
        }

        private MdInterval StatusMdIntervalField; 

        /// <summary>
        /// Defines the proportional amount of fluid from the well completion that is flowing through this interval within a wellbore.
        /// </summary>
		[Description("Defines the proportional amount of fluid from the well completion that is flowing through this interval within a wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeFraction")]
		[XmlElement("AllocationFactor")]
        public double? AllocationFactor {
            get {
                return AllocationFactorField;
            } 
            set {
                AllocationFactorField = value;
                 this.AllocationFactorSpecified = true;
                NotifyPropertyChanged("AllocationFactor");
            }
        }

        private double? AllocationFactorField; 

        /// <summary>
        /// AllocationFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AllocationFactorSpecified {
            get {
                return AllocationFactorSpecifiedField;
            } 
            set {
                AllocationFactorSpecifiedField = value;
                NotifyPropertyChanged("AllocationFactorSpecified");
            }
        }

        private bool AllocationFactorSpecifiedField; 

        /// <summary>
        /// Comments and remarks about the interval over this period of time.
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks about the interval over this period of time.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

		/// <summary>
        /// Unique identifier for this instance of IntervalStatusHistory.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IntervalStatusHistory.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerforationStatusHistory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerforationStatusHistory", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerforationStatusHistory xsd type.")]
    public partial class PerforationStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Perforation status.
        /// </summary>
		[Description("Perforation status.")]
        [EnergisticsDataTypeAttribute(DataType = "PerforationStatus")]
		[XmlElement("PerforationStatus")]
        public PerforationStatus? PerforationStatus {
            get {
                return PerforationStatusField;
            } 
            set {
                PerforationStatusField = value;
                 this.PerforationStatusSpecified = true;
                NotifyPropertyChanged("PerforationStatus");
            }
        }

        private PerforationStatus? PerforationStatusField; 

        /// <summary>
        /// PerforationStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerforationStatusSpecified {
            get {
                return PerforationStatusSpecifiedField;
            } 
            set {
                PerforationStatusSpecifiedField = value;
                NotifyPropertyChanged("PerforationStatusSpecified");
            }
        }

        private bool PerforationStatusSpecifiedField; 

        /// <summary>
        /// The start date of the status.
        /// </summary>
		[Description("The start date of the status.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("StartDate")]
        public Timestamp? StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        
        private bool StartDateSpecifiedField = false;
        
        /// <summary>
        /// StartDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return StartDateSpecifiedField;
            } 
            set {
                StartDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }
        
        private Timestamp? StartDateField; 

        /// <summary>
        /// The end date of the status.
        /// </summary>
		[Description("The end date of the status.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("EndDate")]
        public Timestamp? EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        
        private bool EndDateSpecifiedField = false;
        
        /// <summary>
        /// EndDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return EndDateSpecifiedField;
            } 
            set {
                EndDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }
        
        private Timestamp? EndDateField; 

        /// <summary>
        /// Overall measured depth interval for this perforated interval.
        /// </summary>
		[Description("Overall measured depth interval for this perforated interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("PerforationMdInterval")]
        public MdInterval PerforationMDInterval {
            get {
                return PerforationMdIntervalField;
            } 
            set {
                PerforationMdIntervalField = value;
                NotifyPropertyChanged("PerforationMDInterval");
            }
        }

        private MdInterval PerforationMdIntervalField; 

        /// <summary>
        /// Overall true vertical depth interval for this perforated interval.
        /// </summary>
		[Description("Overall true vertical depth interval for this perforated interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("PerforationTvdInterval")]
        public TvdInterval PerforationTvdInterval {
            get {
                return PerforationTvdIntervalField;
            } 
            set {
                PerforationTvdIntervalField = value;
                NotifyPropertyChanged("PerforationTvdInterval");
            }
        }

        private TvdInterval PerforationTvdIntervalField; 

        /// <summary>
        /// Defines the proportional amount of fluid from the well completion that is flowing through this interval within a wellbore.
        /// </summary>
		[Description("Defines the proportional amount of fluid from the well completion that is flowing through this interval within a wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeFraction")]
		[XmlElement("AllocationFactor")]
        public double? AllocationFactor {
            get {
                return AllocationFactorField;
            } 
            set {
                AllocationFactorField = value;
                 this.AllocationFactorSpecified = true;
                NotifyPropertyChanged("AllocationFactor");
            }
        }

        private double? AllocationFactorField; 

        /// <summary>
        /// AllocationFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AllocationFactorSpecified {
            get {
                return AllocationFactorSpecifiedField;
            } 
            set {
                AllocationFactorSpecifiedField = value;
                NotifyPropertyChanged("AllocationFactorSpecified");
            }
        }

        private bool AllocationFactorSpecifiedField; 

        /// <summary>
        /// Remarks and comments about the status.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about the status.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

		/// <summary>
        /// Unique identifier for this instance of PerforationStatusHistory.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PerforationStatusHistory.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerforationSetInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerforationSetInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerforationSetInterval xsd type.")]
    public partial class PerforationSetInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// PerforationSetReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to a perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PerforationSetReferenceId")]
        public string PerforationSetReferenceId {
            get {
                return PerforationSetReferenceIdField;
            } 
            set {
                PerforationSetReferenceIdField = value;
                NotifyPropertyChanged("PerforationSetReferenceId");
            }
        }

        private string PerforationSetReferenceIdField; 

        /// <summary>
        /// PerforationSetMdInterval property
        /// </summary>
		[Description("Overall measured depth interval for this perforation set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("PerforationSetMdInterval")]
        public MdInterval PerforationSetMDInterval {
            get {
                return PerforationSetMdIntervalField;
            } 
            set {
                PerforationSetMdIntervalField = value;
                NotifyPropertyChanged("PerforationSetMDInterval");
            }
        }

        private MdInterval PerforationSetMdIntervalField; 

        /// <summary>
        /// PerforationSetTvdInterval property
        /// </summary>
		[Description("Overall true vertical depth interval for this perforation set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("PerforationSetTvdInterval")]
        public TvdInterval PerforationSetTvdInterval {
            get {
                return PerforationSetTvdIntervalField;
            } 
            set {
                PerforationSetTvdIntervalField = value;
                NotifyPropertyChanged("PerforationSetTvdInterval");
            }
        }

        private TvdInterval PerforationSetTvdIntervalField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[Description("The PerforationSetInterval event information.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EventInfo")]
		[XmlElement("EventHistory")]
        public EventInfo EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo EventHistoryField; 

        /// <summary>
        /// GeologyFeatureReferenceId property
        /// </summary>
		[Description("Reference to a geology feature.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GeologyFeatureReferenceId")]
        public List<string> GeologyFeatureReferenceId {
            get {
                return GeologyFeatureReferenceIdField;
            } 
            set {
                GeologyFeatureReferenceIdField = value;
                NotifyPropertyChanged("GeologyFeatureReferenceId");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureReferenceId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureReferenceIdSpecified
         {
             get {
             if(GeologyFeatureReferenceIdField!=null)
                 return GeologyFeatureReferenceIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> GeologyFeatureReferenceIdField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// PerforationStatusHistory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PerforationStatusHistory")]
		[XmlElement("PerforationStatusHistory")]
        public List<PerforationStatusHistory> PerforationStatusHistory {
            get {
                return PerforationStatusHistoryField;
            } 
            set {
                PerforationStatusHistoryField = value;
                NotifyPropertyChanged("PerforationStatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationStatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationStatusHistorySpecified
         {
             get {
             if(PerforationStatusHistoryField!=null)
                 return PerforationStatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerforationStatusHistory> PerforationStatusHistoryField; 

		/// <summary>
        /// Unique identifier for this instance of PerforationSetInterval.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PerforationSetInterval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OpenHoleInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OpenHoleInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the OpenHoleInterval xsd type.")]
    public partial class OpenHoleInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// BoreholeStringReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to a borehole (the as-drilled hole through the earth).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("BoreholeStringReferenceId")]
        public string BoreholeStringReferenceId {
            get {
                return BoreholeStringReferenceIdField;
            } 
            set {
                BoreholeStringReferenceIdField = value;
                NotifyPropertyChanged("BoreholeStringReferenceId");
            }
        }

        private string BoreholeStringReferenceIdField; 

        /// <summary>
        /// OpenHoleMdInterval property
        /// </summary>
		[Description("Openhole measured depth interval for this completion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("OpenHoleMdInterval")]
        public MdInterval OpenHoleMDInterval {
            get {
                return OpenHoleMdIntervalField;
            } 
            set {
                OpenHoleMdIntervalField = value;
                NotifyPropertyChanged("OpenHoleMDInterval");
            }
        }

        private MdInterval OpenHoleMdIntervalField; 

        /// <summary>
        /// OpenHoleTvdInterval property
        /// </summary>
		[Description("Openhole true vertical depth interval for this completion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("OpenHoleTvdInterval")]
        public TvdInterval OpenHoleTvdInterval {
            get {
                return OpenHoleTvdIntervalField;
            } 
            set {
                OpenHoleTvdIntervalField = value;
                NotifyPropertyChanged("OpenHoleTvdInterval");
            }
        }

        private TvdInterval OpenHoleTvdIntervalField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[Description("The OpenHoleInterval event information.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EventInfo")]
		[XmlElement("EventHistory")]
        public EventInfo EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo EventHistoryField; 

        /// <summary>
        /// GeologyFeatureReferenceId property
        /// </summary>
		[Description("Reference to a geology feature.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GeologyFeatureReferenceId")]
        public List<string> GeologyFeatureReferenceId {
            get {
                return GeologyFeatureReferenceIdField;
            } 
            set {
                GeologyFeatureReferenceIdField = value;
                NotifyPropertyChanged("GeologyFeatureReferenceId");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureReferenceId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureReferenceIdSpecified
         {
             get {
             if(GeologyFeatureReferenceIdField!=null)
                 return GeologyFeatureReferenceIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> GeologyFeatureReferenceIdField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// StatusHistory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IntervalStatusHistory")]
		[XmlElement("StatusHistory")]
        public List<IntervalStatusHistory> StatusHistory {
            get {
                return StatusHistoryField;
            } 
            set {
                StatusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if StatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusHistorySpecified
         {
             get {
             if(StatusHistoryField!=null)
                 return StatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntervalStatusHistory> StatusHistoryField; 

		/// <summary>
        /// Unique identifier for this instance of OpenHoleInterval.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of OpenHoleInterval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SlotsInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SlotsInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the SlotsInterval xsd type.")]
    public partial class SlotsInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StringEquipmentReferenceId property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to an equipment string, which is the equipment (e.g., tubing, gravel pack screens, etc.) that compose the completion.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StringEquipmentReferenceId")]
        public string StringEquipmentReferenceId {
            get {
                return StringEquipmentReferenceIdField;
            } 
            set {
                StringEquipmentReferenceIdField = value;
                NotifyPropertyChanged("StringEquipmentReferenceId");
            }
        }

        private string StringEquipmentReferenceIdField; 

        /// <summary>
        /// SlottedMdInterval property
        /// </summary>
		[Description("Slotted measured depth interval for this completion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("SlottedMdInterval")]
        public MdInterval SlottedMDInterval {
            get {
                return SlottedMdIntervalField;
            } 
            set {
                SlottedMdIntervalField = value;
                NotifyPropertyChanged("SlottedMDInterval");
            }
        }

        private MdInterval SlottedMdIntervalField; 

        /// <summary>
        /// SlottedTvdInterval property
        /// </summary>
		[Description("Slotted true vertical depth interval for this completion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("SlottedTvdInterval")]
        public TvdInterval SlottedTvdInterval {
            get {
                return SlottedTvdIntervalField;
            } 
            set {
                SlottedTvdIntervalField = value;
                NotifyPropertyChanged("SlottedTvdInterval");
            }
        }

        private TvdInterval SlottedTvdIntervalField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[Description("The SlotsInterval event information.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EventInfo")]
		[XmlElement("EventHistory")]
        public EventInfo EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo EventHistoryField; 

        /// <summary>
        /// GeologyFeatureRefID property
        /// </summary>
		[Description("Reference to a geology feature.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GeologyFeatureRefID")]
        public List<string> GeologyFeatureRefID {
            get {
                return GeologyFeatureRefIDField;
            } 
            set {
                GeologyFeatureRefIDField = value;
                NotifyPropertyChanged("GeologyFeatureRefID");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeatureRefID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureRefIDSpecified
         {
             get {
             if(GeologyFeatureRefIDField!=null)
                 return GeologyFeatureRefIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> GeologyFeatureRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// StatusHistory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IntervalStatusHistory")]
		[XmlElement("StatusHistory")]
        public List<IntervalStatusHistory> StatusHistory {
            get {
                return StatusHistoryField;
            } 
            set {
                StatusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if StatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusHistorySpecified
         {
             get {
             if(StatusHistoryField!=null)
                 return StatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntervalStatusHistory> StatusHistoryField; 

		/// <summary>
        /// Unique identifier for this instance of SlotsInterval.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of SlotsInterval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ContactIntervalSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ContactIntervalSet", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ContactIntervalSet xsd type.")]
    public partial class ContactIntervalSet : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SlotsInterval property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SlotsInterval")]
		[XmlElement("SlotsInterval")]
        public List<SlotsInterval> SlotsInterval {
            get {
                return SlotsIntervalField;
            } 
            set {
                SlotsIntervalField = value;
                NotifyPropertyChanged("SlotsInterval");
            }
        }

         /// <summary>
         /// bool to indicate if SlotsInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SlotsIntervalSpecified
         {
             get {
             if(SlotsIntervalField!=null)
                 return SlotsIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<SlotsInterval> SlotsIntervalField; 

        /// <summary>
        /// OpenHoleInterval property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "OpenHoleInterval")]
		[XmlElement("OpenHoleInterval")]
        public List<OpenHoleInterval> OpenHoleInterval {
            get {
                return OpenHoleIntervalField;
            } 
            set {
                OpenHoleIntervalField = value;
                NotifyPropertyChanged("OpenHoleInterval");
            }
        }

         /// <summary>
         /// bool to indicate if OpenHoleInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpenHoleIntervalSpecified
         {
             get {
             if(OpenHoleIntervalField!=null)
                 return OpenHoleIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<OpenHoleInterval> OpenHoleIntervalField; 

        /// <summary>
        /// PerforationSetInterval property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PerforationSetInterval")]
		[XmlElement("PerforationSetInterval")]
        public List<PerforationSetInterval> PerforationSetInterval {
            get {
                return PerforationSetIntervalField;
            } 
            set {
                PerforationSetIntervalField = value;
                NotifyPropertyChanged("PerforationSetInterval");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSetInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetIntervalSpecified
         {
             get {
             if(PerforationSetIntervalField!=null)
                 return PerforationSetIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerforationSetInterval> PerforationSetIntervalField; 

        /// <summary>
        /// GravelPackInterval property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GravelPackInterval")]
		[XmlElement("GravelPackInterval")]
        public List<GravelPackInterval> GravelPackInterval {
            get {
                return GravelPackIntervalField;
            } 
            set {
                GravelPackIntervalField = value;
                NotifyPropertyChanged("GravelPackInterval");
            }
        }

         /// <summary>
         /// bool to indicate if GravelPackInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GravelPackIntervalSpecified
         {
             get {
             if(GravelPackIntervalField!=null)
                 return GravelPackIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<GravelPackInterval> GravelPackIntervalField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CompletionStatusHistory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CompletionStatusHistory", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CompletionStatusHistory xsd type.")]
    public partial class CompletionStatusHistory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Completion status. 
        /// </summary>
		[Description("Completion status.")]
        [EnergisticsDataTypeAttribute(DataType = "CompletionStatus")]
		[XmlElement("Status")]
        public CompletionStatus? Status {
            get {
                return StatusField;
            } 
            set {
                StatusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private CompletionStatus? StatusField; 

        /// <summary>
        /// StatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return StatusSpecifiedField;
            } 
            set {
                StatusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool StatusSpecifiedField; 

        /// <summary>
        /// The start date of the status.
        /// </summary>
		[Description("The start date of the status.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("StartDate")]
        public Timestamp? StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        
        private bool StartDateSpecifiedField = false;
        
        /// <summary>
        /// StartDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return StartDateSpecifiedField;
            } 
            set {
                StartDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }
        
        private Timestamp? StartDateField; 

        /// <summary>
        /// The end date of the status.
        /// </summary>
		[Description("The end date of the status.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("EndDate")]
        public Timestamp? EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        
        private bool EndDateSpecifiedField = false;
        
        /// <summary>
        /// EndDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return EndDateSpecifiedField;
            } 
            set {
                EndDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }
        
        private Timestamp? EndDateField; 

        /// <summary>
        /// Measured depth interval between the top and the base of the perforations.
        /// </summary>
		[Description("Measured depth interval between the top and the base of the perforations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("PerforationMdInterval")]
        public MdInterval PerforationMDInterval {
            get {
                return PerforationMdIntervalField;
            } 
            set {
                PerforationMdIntervalField = value;
                NotifyPropertyChanged("PerforationMDInterval");
            }
        }

        private MdInterval PerforationMdIntervalField; 

        /// <summary>
        /// Comments or remarks on the status. 
        /// </summary>
		[StringLength(2000)]
        [Description("Comments or remarks on the status.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

		/// <summary>
        /// Unique identifier for this instance of CompletionStatusHistory.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of CompletionStatusHistory.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractIscwsaErrorCoefficient xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Tvd))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Depth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Inc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Azi))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractIscwsaErrorCoefficient", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractIscwsaErrorCoefficient xsd type.")]
    public abstract partial class AbstractIscwsaErrorCoefficient : Object, IUniqueId, INotifyPropertyChanged
    {

		/// <summary>
        /// Unique identifier for this instance of AbstractIscwsaErrorCoefficient.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of AbstractIscwsaErrorCoefficient.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Tvd xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Tvd", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Tvd xsd type.")]
    public partial class Tvd : AbstractIscwsaErrorCoefficient, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Tvd1 property
        /// </summary>
		
		[XmlElement("Tvd")]
        public string Tvd1 {
            get {
                return Tvd1Field;
            } 
            set {
                Tvd1Field = value;
                NotifyPropertyChanged("Tvd1");
            }
        }

        private string Tvd1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Depth xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Depth", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Depth xsd type.")]
    public partial class Depth : AbstractIscwsaErrorCoefficient, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Depth1 property
        /// </summary>
		
		[XmlElement("Depth")]
        public string Depth1 {
            get {
                return Depth1Field;
            } 
            set {
                Depth1Field = value;
                NotifyPropertyChanged("Depth1");
            }
        }

        private string Depth1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Inc xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Inc", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Inc xsd type.")]
    public partial class Inc : AbstractIscwsaErrorCoefficient, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Inc1 property
        /// </summary>
		
		[XmlElement("Inc")]
        public string Inc1 {
            get {
                return Inc1Field;
            } 
            set {
                Inc1Field = value;
                NotifyPropertyChanged("Inc1");
            }
        }

        private string Inc1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Azi xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Azi", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Azi xsd type.")]
    public partial class Azi : AbstractIscwsaErrorCoefficient, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Azi1 property
        /// </summary>
		
		[XmlElement("Azi")]
        public string Azi1 {
            get {
                return Azi1Field;
            } 
            set {
                Azi1Field = value;
                NotifyPropertyChanged("Azi1");
            }
        }

        private string Azi1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaErrorCoefficient xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaErrorCoefficient", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaErrorCoefficient xsd type.")]
    public partial class IscwsaErrorCoefficient : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// AbstractIscwsaErrorCoefficient property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIscwsaErrorCoefficient")]
		[XmlElement("AbstractIscwsaErrorCoefficient")]
        public List<AbstractIscwsaErrorCoefficient> AbstractIscwsaErrorCoefficient {
            get {
                return AbstractIscwsaErrorCoefficientField;
            } 
            set {
                AbstractIscwsaErrorCoefficientField = value;
                NotifyPropertyChanged("AbstractIscwsaErrorCoefficient");
            }
        }

         /// <summary>
         /// bool to indicate if AbstractIscwsaErrorCoefficient has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AbstractIscwsaErrorCoefficientSpecified
         {
             get {
             if(AbstractIscwsaErrorCoefficientField!=null)
                 return AbstractIscwsaErrorCoefficientField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractIscwsaErrorCoefficient> AbstractIscwsaErrorCoefficientField; 

		/// <summary>
        /// Unique identifier for this instance of IscwsaErrorCoefficient.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaErrorCoefficient.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaErrorTerm xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaErrorTerm", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaErrorTerm xsd type.")]
    public partial class IscwsaErrorTerm : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("This is the unique mnemonic for this term, e.g., \"ABIX\" or \"DECR\".")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Type property
        /// </summary>
		[Description("The class of the error source.")]
        [EnergisticsDataTypeAttribute(DataType = "ErrorTermSource")]
		[XmlElement("Type")]
        public ErrorTermSource? Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private ErrorTermSource? TypeField; 

        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool TypeSpecifiedField; 

        /// <summary>
        /// MeasureClass property
        /// </summary>
		[Description("The kind of quantity that the term represents. This constrains the unit that can be used for any errorTermValues.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("MeasureClass")]
        public MeasureClass? MeasureClass {
            get {
                return MeasureClassField;
            } 
            set {
                MeasureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass? MeasureClassField; 

        /// <summary>
        /// MeasureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return MeasureClassSpecifiedField;
            } 
            set {
                MeasureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool MeasureClassSpecifiedField; 

        /// <summary>
        /// Label property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human-readable name for the term, may be presented in  application software. E.g., \"MWD: X-Acceleromter Bias with Z-Axis Corr.\"")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Label")]
        public string Label {
            get {
                return LabelField;
            } 
            set {
                LabelField = value;
                NotifyPropertyChanged("Label");
            }
        }

        private string LabelField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("Human-readable name for the term. It may be presented in application software, e.g., \"MWD: X-Acceleromter Bias with Z-Axis Corr.\"")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// OperatingMode property
        /// </summary>
		[Description("Operating mode that is valid for this error term. In the absence of this element assume \"stationary\".")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SurveyToolOperatingMode")]
		[XmlElement("OperatingMode")]
        public List<SurveyToolOperatingMode> OperatingMode {
            get {
                return OperatingModeField;
            } 
            set {
                OperatingModeField = value;
                NotifyPropertyChanged("OperatingMode");
            }
        }

         /// <summary>
         /// bool to indicate if OperatingMode has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OperatingModeSpecified
         {
             get {
             if(OperatingModeField!=null)
                 return OperatingModeField.Count>0?true:false;
             else return false;
             }
         }
        private List<SurveyToolOperatingMode> OperatingModeField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ErrorCoefficient property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaErrorCoefficient")]
		[XmlElement("ErrorCoefficient")]
        public List<IscwsaErrorCoefficient> ErrorCoefficient {
            get {
                return ErrorCoefficientField;
            } 
            set {
                ErrorCoefficientField = value;
                NotifyPropertyChanged("ErrorCoefficient");
            }
        }

         /// <summary>
         /// bool to indicate if ErrorCoefficient has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ErrorCoefficientSpecified
         {
             get {
             if(ErrorCoefficientField!=null)
                 return ErrorCoefficientField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaErrorCoefficient> ErrorCoefficientField; 

		/// <summary>
        /// Unique identifier for this instance of IscwsaErrorTerm.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaErrorTerm.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaNomenclatureConstant xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaNomenclatureConstant", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaNomenclatureConstant xsd type.")]
    public partial class IscwsaNomenclatureConstant : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IscwsaNomenclatureConstant class.
        /// </summary>
        public IscwsaNomenclatureConstant() {}

        /// <summary>
        /// Initializes a new instance of the IscwsaNomenclatureConstant class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IscwsaNomenclatureConstant(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// The name of the constant.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the constant.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The value of the constant.
        /// </summary>
		[Required]
        [Description("The value of the constant.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Value")]
        public double? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double? ValueField; 

        /// <summary>
        /// The unit of measure of the constant. This value must match an acronym from the Energistics unit of measure dictionary.
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("The unit of measure of the constant. This value must match an acronym from the Energistics unit of measure dictionary.")]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
		[XmlElement("Unit")]
        public string Unit {
            get {
                return UnitField;
            } 
            set {
                UnitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string UnitField; 

        /// <summary>
        /// A textual description of the constant.
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("A textual description of the constant.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of IscwsaNomenclatureConstant.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaNomenclatureConstant.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaNameAndDescription xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaNameAndDescription", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaNameAndDescription xsd type.")]
    public partial class IscwsaNameAndDescription : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the item.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// A textual description of the item.
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("A textual description of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of IscwsaNameAndDescription.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaNameAndDescription.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaNomenclature xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaNomenclature", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaNomenclature xsd type.")]
    public partial class IscwsaNomenclature : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Parameter property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaNameAndDescription")]
		[XmlElement("Parameter")]
        public List<IscwsaNameAndDescription> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaNameAndDescription> ParameterField; 

        /// <summary>
        /// Function property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaNameAndDescription")]
		[XmlElement("Function")]
        public List<IscwsaNameAndDescription> Function {
            get {
                return FunctionField;
            } 
            set {
                FunctionField = value;
                NotifyPropertyChanged("Function");
            }
        }

         /// <summary>
         /// bool to indicate if Function has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FunctionSpecified
         {
             get {
             if(FunctionField!=null)
                 return FunctionField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaNameAndDescription> FunctionField; 

        /// <summary>
        /// Constant property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaNomenclatureConstant")]
		[XmlElement("Constant")]
        public List<IscwsaNomenclatureConstant> Constant {
            get {
                return ConstantField;
            } 
            set {
                ConstantField = value;
                NotifyPropertyChanged("Constant");
            }
        }

         /// <summary>
         /// bool to indicate if Constant has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConstantSpecified
         {
             get {
             if(ConstantField!=null)
                 return ConstantField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaNomenclatureConstant> ConstantField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SurveySection xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SurveySection", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the SurveySection xsd type.")]
    public partial class SurveySection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Sequence property
        /// </summary>
		[Required]
        [Description("Order in which the program sections are or were executed.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("Sequence")]
        public long? Sequence {
            get {
                return SequenceField;
            } 
            set {
                SequenceField = value;
                NotifyPropertyChanged("Sequence");
            }
        }

        private long? SequenceField; 

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the survey program section.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// Company who will run or has run the survey tool.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Company who will run or has run the survey tool.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameSurveyCompany")]
        public string NameSurveyCompany {
            get {
                return NameSurveyCompanyField;
            } 
            set {
                NameSurveyCompanyField = value;
                NotifyPropertyChanged("NameSurveyCompany");
            }
        }

        private string NameSurveyCompanyField; 

        /// <summary>
        /// Name of survey tool used in this section.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name of survey tool used in this section.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameTool")]
        public string NameTool {
            get {
                return NameToolField;
            } 
            set {
                NameToolField = value;
                NotifyPropertyChanged("NameTool");
            }
        }

        private string NameToolField; 

        /// <summary>
        /// Type of tool used.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Type of tool used.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeTool")]
        public string TypeTool {
            get {
                return TypeToolField;
            } 
            set {
                TypeToolField = value;
                NotifyPropertyChanged("TypeTool");
            }
        }

        private string TypeToolField; 

        /// <summary>
        /// Error model used to calculate the ellipses of uncertainty.
        /// </summary>
		[StringLength(64)]
        [Description("Error model used to calculate the ellipses of uncertainty.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ModelError")]
        public string ModelError {
            get {
                return ModelErrorField;
            } 
            set {
                ModelErrorField = value;
                NotifyPropertyChanged("ModelError");
            }
        }

        private string ModelErrorField; 

        /// <summary>
        /// Higher index trajectory takes precedence over overlapping section of previous trajectory? Values are "true" (or "1") and "false" (or "0"). Normally, this is true.
        /// </summary>
		[Description("Higher index trajectory takes precedence over overlapping section of previous trajectory?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). Normally, this is true.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Overwrite")]
        public bool? Overwrite {
            get {
                return OverwriteField;
            } 
            set {
                OverwriteField = value;
                 this.OverwriteSpecified = true;
                NotifyPropertyChanged("Overwrite");
            }
        }

        private bool? OverwriteField; 

        /// <summary>
        /// OverwriteSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OverwriteSpecified {
            get {
                return OverwriteSpecifiedField;
            } 
            set {
                OverwriteSpecifiedField = value;
                NotifyPropertyChanged("OverwriteSpecified");
            }
        }

        private bool OverwriteSpecifiedField; 

        /// <summary>
        /// Maximum allowable depth frequency for survey stations for this survey run.
        /// </summary>
		[Description("Maximum allowable depth frequency for survey stations for this survey run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FrequencyMx")]
        public LengthMeasure FrequencyMax {
            get {
                return FrequencyMxField;
            } 
            set {
                FrequencyMxField = value;
                NotifyPropertyChanged("FrequencyMax");
            }
        }

        private LengthMeasure FrequencyMxField; 

        /// <summary>
        /// The item state for the data object.
        /// </summary>
		[Description("The item state for the data object.")]
        [EnergisticsDataTypeAttribute(DataType = "ExistenceKind")]
		[XmlElement("ItemState")]
        public ExistenceKind? ItemState {
            get {
                return ItemStateField;
            } 
            set {
                ItemStateField = value;
                 this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ExistenceKind? ItemStateField; 

        /// <summary>
        /// ItemStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemStateSpecified {
            get {
                return ItemStateSpecifiedField;
            } 
            set {
                ItemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private bool ItemStateSpecifiedField; 

        /// <summary>
        /// Comments and remarks.
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier of this instance of SurveySection.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this instance of SurveySection.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PermeabilityLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PermeabilityLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PermeabilityLengthMeasure xsd type.")]
    public partial class PermeabilityLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PermeabilityLengthMeasure class.
        /// </summary>
        public PermeabilityLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PermeabilityLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PermeabilityLengthMeasure(double value, PermeabilityLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityLengthUom")]
        [XmlAttribute("uom")]
		
        public PermeabilityLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PermeabilityLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A stress, conductivity, permeability, and temperature data point.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimISO13503_5Point", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("A stress, conductivity, permeability, and temperature data point.")]
    public partial class StimISO13503_5Point : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The conductivity under stress.
        /// </summary>
		[Required]
        [Description("The conductivity under stress.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityLengthMeasure")]
		[XmlElement("Conductivity")]
        public PermeabilityLengthMeasure Conductivity {
            get {
                return ConductivityField;
            } 
            set {
                ConductivityField = value;
                NotifyPropertyChanged("Conductivity");
            }
        }

        private PermeabilityLengthMeasure ConductivityField; 

        /// <summary>
        /// The temperature at the time measurements were taken.
        /// </summary>
		[Required]
        [Description("The temperature at the time measurements were taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("Temperature")]
        public ThermodynamicTemperatureMeasure Temperature {
            get {
                return TemperatureField;
            } 
            set {
                TemperatureField = value;
                NotifyPropertyChanged("Temperature");
            }
        }

        private ThermodynamicTemperatureMeasure TemperatureField; 

        /// <summary>
        /// The permeability under stress.
        /// </summary>
		[Required]
        [Description("The permeability under stress.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityRockMeasure")]
		[XmlElement("Permeability")]
        public PermeabilityRockMeasure Permeability {
            get {
                return PermeabilityField;
            } 
            set {
                PermeabilityField = value;
                NotifyPropertyChanged("Permeability");
            }
        }

        private PermeabilityRockMeasure PermeabilityField; 

        /// <summary>
        /// The amount of stress applied.
        /// </summary>
		[Required]
        [Description("The amount of stress applied.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Stress")]
        public PressureMeasure Stress {
            get {
                return StressField;
            } 
            set {
                StressField = value;
                NotifyPropertyChanged("Stress");
            }
        }

        private PressureMeasure StressField; 

		/// <summary>
        /// Unique identifier for this instance of StimISO13503_5Point
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimISO13503_5Point")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ThermodynamicTemperatureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ThermodynamicTemperatureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ThermodynamicTemperatureMeasure xsd type.")]
    public partial class ThermodynamicTemperatureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        public ThermodynamicTemperatureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermodynamicTemperatureMeasure(double value, ThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureUom")]
        [XmlAttribute("uom")]
		
        public ThermodynamicTemperatureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermodynamicTemperatureUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PermeabilityRockMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PermeabilityRockMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PermeabilityRockMeasure xsd type.")]
    public partial class PermeabilityRockMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PermeabilityRockMeasure class.
        /// </summary>
        public PermeabilityRockMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PermeabilityRockMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PermeabilityRockMeasure(double value, PermeabilityRockUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityRockUom")]
        [XmlAttribute("uom")]
		
        public PermeabilityRockUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PermeabilityRockUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PressureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PressureMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PressureMeasure xsd type.")]
    public partial class PressureMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        public PressureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PressureMeasure(double value, PressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PressureUom")]
        [XmlAttribute("uom")]
		
        public PressureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PressureUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Proppant properties on percent retained and sieve number. Data from this ISO anaylsis. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ISO13503_2SieveAnalysisData", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("Proppant properties on percent retained and sieve number. Data from this ISO anaylsis. ")]
    public partial class ISO13503_2SieveAnalysisData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The percentage of mass retained in the sieve.
        /// </summary>
		[Required]
        [Description("The percentage of mass retained in the sieve.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("PercentRetained")]
        public MassPerMassMeasure PercentRetained {
            get {
                return PercentRetainedField;
            } 
            set {
                PercentRetainedField = value;
                NotifyPropertyChanged("PercentRetained");
            }
        }

        private MassPerMassMeasure PercentRetainedField; 

        /// <summary>
        /// ASTM US Standard mesh opening size used in the sieve analysis test. To indicate "Pan", use "0". 
        /// </summary>
		[Required]
        [Description("ASTM US Standard mesh opening size used in the sieve analysis test.  To indicate \"Pan\",  use \"0\".")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("SieveNumber")]
        public long? SieveNumber {
            get {
                return SieveNumberField;
            } 
            set {
                SieveNumberField = value;
                NotifyPropertyChanged("SieveNumber");
            }
        }

        private long? SieveNumberField; 

		/// <summary>
        /// Unique identifier for this instance of ISO13503_2SieveAnalysisData.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of ISO13503_2SieveAnalysisData.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerMassMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerMassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerMassMeasure xsd type.")]
    public partial class MassPerMassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerMassMeasure class.
        /// </summary>
        public MassPerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerMassMeasure(double value, MassPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassUom")]
        [XmlAttribute("uom")]
		
        public MassPerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerMassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Crush test data point. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ISO13503_2CrushTestData", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("Crush test data point. ")]
    public partial class ISO13503_2CrushTestData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Mass percentage of fines after being exposed to stress.
        /// </summary>
		[Required]
        [Description("Mass percentage of fines after being exposed to stress.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Fines")]
        public MassPerMassMeasure Fines {
            get {
                return FinesField;
            } 
            set {
                FinesField = value;
                NotifyPropertyChanged("Fines");
            }
        }

        private MassPerMassMeasure FinesField; 

        /// <summary>
        /// Stress measured at a point during a crush test.
        /// </summary>
		[Required]
        [Description("Stress measured at a point during a crush test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Stress")]
        public PressureMeasure Stress {
            get {
                return StressField;
            } 
            set {
                StressField = value;
                NotifyPropertyChanged("Stress");
            }
        }

        private PressureMeasure StressField; 

		/// <summary>
        /// Unique identifier for this instance of ISO13503_2CrushTestData. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of ISO13503_2CrushTestData.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// ISO13503-2 properties.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimISO13503_2Properties", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("ISO13503-2 properties.")]
    public partial class StimISO13503_2Properties : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// AbsoluteDensity property
        /// </summary>
		[Description("The density the material would have if no intra-granular porosity is present. (e.g. Boyle’s Law porosimetry).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("AbsoluteDensity")]
        public MassPerVolumeMeasure AbsoluteDensity {
            get {
                return AbsoluteDensityField;
            } 
            set {
                AbsoluteDensityField = value;
                NotifyPropertyChanged("AbsoluteDensity");
            }
        }

        private MassPerVolumeMeasure AbsoluteDensityField; 

        /// <summary>
        /// ClustersPercent property
        /// </summary>
		[Description("Percentage of undesirable agglomerated discrete proppant particles which typically occurs more with inefficiently processed natural sand proppants as opposed to manufactured ceramic proppants. ISO 13503-2 and API RP19C limit the mass of clusters to less than 1%.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("ClustersPercent")]
        public DimensionlessMeasure ClustersPercent {
            get {
                return ClustersPercentField;
            } 
            set {
                ClustersPercentField = value;
                NotifyPropertyChanged("ClustersPercent");
            }
        }

        private DimensionlessMeasure ClustersPercentField; 

        /// <summary>
        /// KValue property
        /// </summary>
		[Description("Crush test classification indicating the highest stress level at which a proppant generated no more than 10% crushed material rounded down to the nearest 1,000 psi during a crush test. For example, a value of 14 means ‘14K’ which is 14000 psi.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("KValue")]
        public double? KValue {
            get {
                return KValueField;
            } 
            set {
                KValueField = value;
                 this.KValueSpecified = true;
                NotifyPropertyChanged("KValue");
            }
        }

        private double? KValueField; 

        /// <summary>
        /// KValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KValueSpecified {
            get {
                return KValueSpecifiedField;
            } 
            set {
                KValueSpecifiedField = value;
                NotifyPropertyChanged("KValueSpecified");
            }
        }

        private bool KValueSpecifiedField; 

        /// <summary>
        /// MeanParticleDiameter property
        /// </summary>
		[Description("The mean diameter of particles in a sample of proppant.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MeanParticleDiameter")]
        public LengthMeasure MeanParticleDiameter {
            get {
                return MeanParticleDiameterField;
            } 
            set {
                MeanParticleDiameterField = value;
                NotifyPropertyChanged("MeanParticleDiameter");
            }
        }

        private LengthMeasure MeanParticleDiameterField; 

        /// <summary>
        /// MedianParticleDiameter property
        /// </summary>
		[Description("The median diameter of particles in a sample of proppant.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MedianParticleDiameter")]
        public LengthMeasure MedianParticleDiameter {
            get {
                return MedianParticleDiameterField;
            } 
            set {
                MedianParticleDiameterField = value;
                NotifyPropertyChanged("MedianParticleDiameter");
            }
        }

        private LengthMeasure MedianParticleDiameterField; 

        /// <summary>
        /// SpecificGravity property
        /// </summary>
		[Description("Not formally part of ISO 13503.2 properties, the specific gravity is the apparent density of the proppant divided by the density of water.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("SpecificGravity")]
        public double? SpecificGravity {
            get {
                return SpecificGravityField;
            } 
            set {
                SpecificGravityField = value;
                 this.SpecificGravitySpecified = true;
                NotifyPropertyChanged("SpecificGravity");
            }
        }

        private double? SpecificGravityField; 

        /// <summary>
        /// SpecificGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SpecificGravitySpecified {
            get {
                return SpecificGravitySpecifiedField;
            } 
            set {
                SpecificGravitySpecifiedField = value;
                NotifyPropertyChanged("SpecificGravitySpecified");
            }
        }

        private bool SpecificGravitySpecifiedField; 

        /// <summary>
        /// Roundness property
        /// </summary>
		[Description("Krumbein Roundness Shape Factor that is a measure of the relative sharpness of grain corners or of grain curvature. Krumbein and Sloss (1963) are the most widely used method of determining shape factors.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Roundness")]
        public double? Roundness {
            get {
                return RoundnessField;
            } 
            set {
                RoundnessField = value;
                 this.RoundnessSpecified = true;
                NotifyPropertyChanged("Roundness");
            }
        }

        private double? RoundnessField; 

        /// <summary>
        /// RoundnessSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RoundnessSpecified {
            get {
                return RoundnessSpecifiedField;
            } 
            set {
                RoundnessSpecifiedField = value;
                NotifyPropertyChanged("RoundnessSpecified");
            }
        }

        private bool RoundnessSpecifiedField; 

        /// <summary>
        /// AcidSolubility property
        /// </summary>
		[Description("The solubility of a proppant in 12:3 HCl:HF for 30 minutes at 150°F is an indication of the amount of soluble materials (i.e. carbonates, feldspars, iron oxides, clays, etc) present in the proppant.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("AcidSolubility")]
        public MassPerMassMeasure AcidSolubility {
            get {
                return AcidSolubilityField;
            } 
            set {
                AcidSolubilityField = value;
                NotifyPropertyChanged("AcidSolubility");
            }
        }

        private MassPerMassMeasure AcidSolubilityField; 

        /// <summary>
        /// ApparentDensity property
        /// </summary>
		[Description("Apparent density excludes extra-granular porosity by placing a known mass in a volume of fluid and determining how much of the fluid is displaced (Archimedes).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("ApparentDensity")]
        public MassPerVolumeMeasure ApparentDensity {
            get {
                return ApparentDensityField;
            } 
            set {
                ApparentDensityField = value;
                NotifyPropertyChanged("ApparentDensity");
            }
        }

        private MassPerVolumeMeasure ApparentDensityField; 

        /// <summary>
        /// BulkDensity property
        /// </summary>
		[Description("Bulk density includes both the proppant and the porosity. This is measured by filling a known volume with dry proppant and measuring the weight.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("BulkDensity")]
        public MassPerVolumeMeasure BulkDensity {
            get {
                return BulkDensityField;
            } 
            set {
                BulkDensityField = value;
                NotifyPropertyChanged("BulkDensity");
            }
        }

        private MassPerVolumeMeasure BulkDensityField; 

        /// <summary>
        /// LossOnIgnition property
        /// </summary>
		[Description("A mass loss (gravimetric) test method applied to coated proppants only, which determines the mass of resin coating applied to a natural sand or manufactured proppant by means of thorough combustion of the flammable resin from the nonflammable proppant. Reported as a % of original mass.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("LossOnIgnition")]
        public DimensionlessMeasure LossOnIgnition {
            get {
                return LossOnIgnitionField;
            } 
            set {
                LossOnIgnitionField = value;
                NotifyPropertyChanged("LossOnIgnition");
            }
        }

        private DimensionlessMeasure LossOnIgnitionField; 

        /// <summary>
        /// Sphericity property
        /// </summary>
		[Description("Krumbein Sphericity Shape Factor that is a measure of how closely a proppant particle approaches the shape of a sphere. Krumbein and Sloss (1963) are the most widely used method of determining shape factors.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Sphericity")]
        public double? Sphericity {
            get {
                return SphericityField;
            } 
            set {
                SphericityField = value;
                 this.SphericitySpecified = true;
                NotifyPropertyChanged("Sphericity");
            }
        }

        private double? SphericityField; 

        /// <summary>
        /// SphericitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SphericitySpecified {
            get {
                return SphericitySpecifiedField;
            } 
            set {
                SphericitySpecifiedField = value;
                NotifyPropertyChanged("SphericitySpecified");
            }
        }

        private bool SphericitySpecifiedField; 

        /// <summary>
        /// Turbidity property
        /// </summary>
		[Description("A measure of water clarity, how much the material suspended in water decreases the passage of light through the water. Unit of measure may be Nephelometric Turbidity Unit (NTU), but may vary based upon the detector geometry.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Turbidity")]
        public double? Turbidity {
            get {
                return TurbidityField;
            } 
            set {
                TurbidityField = value;
                 this.TurbiditySpecified = true;
                NotifyPropertyChanged("Turbidity");
            }
        }

        private double? TurbidityField; 

        /// <summary>
        /// TurbiditySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TurbiditySpecified {
            get {
                return TurbiditySpecifiedField;
            } 
            set {
                TurbiditySpecifiedField = value;
                NotifyPropertyChanged("TurbiditySpecified");
            }
        }

        private bool TurbiditySpecifiedField; 

        /// <summary>
        /// CrushTestData property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ISO13503_2CrushTestData")]
		[XmlElement("CrushTestData")]
        public List<ISO13503_2CrushTestData> CrushTestData {
            get {
                return CrushTestDataField;
            } 
            set {
                CrushTestDataField = value;
                NotifyPropertyChanged("CrushTestData");
            }
        }

         /// <summary>
         /// bool to indicate if CrushTestData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CrushTestDataSpecified
         {
             get {
             if(CrushTestDataField!=null)
                 return CrushTestDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<ISO13503_2CrushTestData> CrushTestDataField; 

        /// <summary>
        /// SieveAnalysisData property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ISO13503_2SieveAnalysisData")]
		[XmlElement("SieveAnalysisData")]
        public List<ISO13503_2SieveAnalysisData> SieveAnalysisData {
            get {
                return SieveAnalysisDataField;
            } 
            set {
                SieveAnalysisDataField = value;
                NotifyPropertyChanged("SieveAnalysisData");
            }
        }

         /// <summary>
         /// bool to indicate if SieveAnalysisData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SieveAnalysisDataSpecified
         {
             get {
             if(SieveAnalysisDataField!=null)
                 return SieveAnalysisDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<ISO13503_2SieveAnalysisData> SieveAnalysisDataField; 

		/// <summary>
        /// Unique identifier for this instance of StimISO13503_2Properties.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimISO13503_2Properties.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerVolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerVolumeMeasure xsd type.")]
    public partial class MassPerVolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerVolumeMeasure class.
        /// </summary>
        public MassPerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerVolumeMeasure(double value, MassPerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeUom")]
        [XmlAttribute("uom")]
		
        public MassPerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerVolumeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DimensionlessMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DimensionlessMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DimensionlessMeasure xsd type.")]
    public partial class DimensionlessMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        public DimensionlessMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DimensionlessMeasure(double value, DimensionlessUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessUom")]
        [XmlAttribute("uom")]
		
        public DimensionlessUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DimensionlessUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AreaPerMassMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AreaPerMassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AreaPerMassMeasure xsd type.")]
    public partial class AreaPerMassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaPerMassMeasure class.
        /// </summary>
        public AreaPerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaPerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaPerMassMeasure(double value, AreaPerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AreaPerMassUom")]
        [XmlAttribute("uom")]
		
        public AreaPerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaPerMassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimMaterial xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimAdditive))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimProppantAgent))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimMaterial", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimMaterial xsd type.")]
    public partial class StimMaterial : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The material kind.
        /// </summary>
		[Description("The material kind.")]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialKind")]
		[XmlElement("Kind")]
        public StimMaterialKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private StimMaterialKind? KindField; 

        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool KindSpecifiedField; 

        /// <summary>
        /// The name of the material.
        /// </summary>
		[StringLength(2000)]
        [Description("The name of the material.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The name of the material supplier.
        /// </summary>
		[StringLength(2000)]
        [Description("The name of the material supplier.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Supplier")]
        public string Supplier {
            get {
                return SupplierField;
            } 
            set {
                SupplierField = value;
                NotifyPropertyChanged("Supplier");
            }
        }

        private string SupplierField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of StimMaterial.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimMaterial.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimAdditive xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimAdditive", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimAdditive xsd type.")]
    public partial class StimAdditive : StimMaterial, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Additive type or function from the enumeration 'StimAdditiveKind'.
        /// </summary>
		[Description("Additive type or function from the enumeration 'StimAdditiveKind'.")]
        [EnergisticsDataTypeAttribute(DataType = "StimAdditiveKind")]
		[XmlElement("AdditiveKind")]
        public StimAdditiveKind? AdditiveKind {
            get {
                return AdditiveKindField;
            } 
            set {
                AdditiveKindField = value;
                 this.AdditiveKindSpecified = true;
                NotifyPropertyChanged("AdditiveKind");
            }
        }

        private StimAdditiveKind? AdditiveKindField; 

        /// <summary>
        /// AdditiveKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AdditiveKindSpecified {
            get {
                return AdditiveKindSpecifiedField;
            } 
            set {
                AdditiveKindSpecifiedField = value;
                NotifyPropertyChanged("AdditiveKindSpecified");
            }
        }

        private bool AdditiveKindSpecifiedField; 

        /// <summary>
        /// The type of additive that is used, which can represent a suppliers description or type of AdditiveKind. For example, 5% HCl could be the type when AdditiveKind=acid.
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("The type of additive that is used, which can represent a suppliers description or type of AdditiveKind.  For example, 5% HCl could be the type when AdditiveKind=acid.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// A code used to identify the supplier of the additive.
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("A code used to identify the supplier of the additive.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("SupplierCode")]
        public string SupplierCode {
            get {
                return SupplierCodeField;
            } 
            set {
                SupplierCodeField = value;
                NotifyPropertyChanged("SupplierCode");
            }
        }

        private string SupplierCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimProppantAgent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimProppantAgent", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimProppantAgent xsd type.")]
    public partial class StimProppantAgent : StimMaterial, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// FrictionCoefficientLaminar property
        /// </summary>
		[Description("Laminar flow friction coefficient.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("FrictionCoefficientLaminar")]
        public double? FrictionCoefficientLaminar {
            get {
                return FrictionCoefficientLaminarField;
            } 
            set {
                FrictionCoefficientLaminarField = value;
                 this.FrictionCoefficientLaminarSpecified = true;
                NotifyPropertyChanged("FrictionCoefficientLaminar");
            }
        }

        private double? FrictionCoefficientLaminarField; 

        /// <summary>
        /// FrictionCoefficientLaminarSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FrictionCoefficientLaminarSpecified {
            get {
                return FrictionCoefficientLaminarSpecifiedField;
            } 
            set {
                FrictionCoefficientLaminarSpecifiedField = value;
                NotifyPropertyChanged("FrictionCoefficientLaminarSpecified");
            }
        }

        private bool FrictionCoefficientLaminarSpecifiedField; 

        /// <summary>
        /// FrictionCoefficientTurbulent property
        /// </summary>
		[Description("Turbulent flow friction coefficient.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("FrictionCoefficientTurbulent")]
        public double? FrictionCoefficientTurbulent {
            get {
                return FrictionCoefficientTurbulentField;
            } 
            set {
                FrictionCoefficientTurbulentField = value;
                 this.FrictionCoefficientTurbulentSpecified = true;
                NotifyPropertyChanged("FrictionCoefficientTurbulent");
            }
        }

        private double? FrictionCoefficientTurbulentField; 

        /// <summary>
        /// FrictionCoefficientTurbulentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FrictionCoefficientTurbulentSpecified {
            get {
                return FrictionCoefficientTurbulentSpecifiedField;
            } 
            set {
                FrictionCoefficientTurbulentSpecifiedField = value;
                NotifyPropertyChanged("FrictionCoefficientTurbulentSpecified");
            }
        }

        private bool FrictionCoefficientTurbulentSpecifiedField; 

        /// <summary>
        /// MassAbsorptionCoefficient property
        /// </summary>
		[Description("Characterizes how easily radiation passes through a material. This can be used to compute the concentration of proppant in a slurry using a densitometer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaPerMassMeasure")]
		[XmlElement("MassAbsorptionCoefficient")]
        public AreaPerMassMeasure MassAbsorptionCoefficient {
            get {
                return MassAbsorptionCoefficientField;
            } 
            set {
                MassAbsorptionCoefficientField = value;
                NotifyPropertyChanged("MassAbsorptionCoefficient");
            }
        }

        private AreaPerMassMeasure MassAbsorptionCoefficientField; 

        /// <summary>
        /// MeshSizeHigh property
        /// </summary>
		[Description("High value of sieve mesh size: for 40/70 sand, this value is 70.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("MeshSizeHigh")]
        public long? MeshSizeHigh {
            get {
                return MeshSizeHighField;
            } 
            set {
                MeshSizeHighField = value;
                 this.MeshSizeHighSpecified = true;
                NotifyPropertyChanged("MeshSizeHigh");
            }
        }

        private long? MeshSizeHighField; 

        /// <summary>
        /// MeshSizeHighSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeshSizeHighSpecified {
            get {
                return MeshSizeHighSpecifiedField;
            } 
            set {
                MeshSizeHighSpecifiedField = value;
                NotifyPropertyChanged("MeshSizeHighSpecified");
            }
        }

        private bool MeshSizeHighSpecifiedField; 

        /// <summary>
        /// MeshSizeLow property
        /// </summary>
		[Description("Low value of sieve mesh size: for 40/70 sand, this value is 40.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("MeshSizeLow")]
        public long? MeshSizeLow {
            get {
                return MeshSizeLowField;
            } 
            set {
                MeshSizeLowField = value;
                 this.MeshSizeLowSpecified = true;
                NotifyPropertyChanged("MeshSizeLow");
            }
        }

        private long? MeshSizeLowField; 

        /// <summary>
        /// MeshSizeLowSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeshSizeLowSpecified {
            get {
                return MeshSizeLowSpecifiedField;
            } 
            set {
                MeshSizeLowSpecifiedField = value;
                NotifyPropertyChanged("MeshSizeLowSpecified");
            }
        }

        private bool MeshSizeLowSpecifiedField; 

        /// <summary>
        /// UnconfinedCompressiveStrength property
        /// </summary>
		[Description("The unconfined compressive strength of the proppant.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("UnconfinedCompressiveStrength")]
        public PressureMeasure UnconfinedCompressiveStrength {
            get {
                return UnconfinedCompressiveStrengthField;
            } 
            set {
                UnconfinedCompressiveStrengthField = value;
                NotifyPropertyChanged("UnconfinedCompressiveStrength");
            }
        }

        private PressureMeasure UnconfinedCompressiveStrengthField; 

        /// <summary>
        /// ProppantAgentKind property
        /// </summary>
		[Description("Proppant type or function.")]
        [EnergisticsDataTypeAttribute(DataType = "ProppantAgentKind")]
		[XmlElement("ProppantAgentKind")]
        public ProppantAgentKind? ProppantAgentKind {
            get {
                return ProppantAgentKindField;
            } 
            set {
                ProppantAgentKindField = value;
                 this.ProppantAgentKindSpecified = true;
                NotifyPropertyChanged("ProppantAgentKind");
            }
        }

        private ProppantAgentKind? ProppantAgentKindField; 

        /// <summary>
        /// ProppantAgentKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProppantAgentKindSpecified {
            get {
                return ProppantAgentKindSpecifiedField;
            } 
            set {
                ProppantAgentKindSpecifiedField = value;
                NotifyPropertyChanged("ProppantAgentKindSpecified");
            }
        }

        private bool ProppantAgentKindSpecifiedField; 

        /// <summary>
        /// ISO13503_2Properties property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimISO13503_2Properties")]
		[XmlElement("ISO13503_2Properties")]
        public List<StimISO13503_2Properties> ISO13503_2Properties {
            get {
                return ISO13503_2PropertiesField;
            } 
            set {
                ISO13503_2PropertiesField = value;
                NotifyPropertyChanged("ISO13503_2Properties");
            }
        }

         /// <summary>
         /// bool to indicate if ISO13503_2Properties has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ISO13503_2PropertiesSpecified
         {
             get {
             if(ISO13503_2PropertiesField!=null)
                 return ISO13503_2PropertiesField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimISO13503_2Properties> ISO13503_2PropertiesField; 

        /// <summary>
        /// ISO13503_5Point property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimISO13503_5Point")]
		[XmlElement("ISO13503_5Point")]
        public List<StimISO13503_5Point> ISO13503_5Point {
            get {
                return ISO13503_5PointField;
            } 
            set {
                ISO13503_5PointField = value;
                NotifyPropertyChanged("ISO13503_5Point");
            }
        }

         /// <summary>
         /// bool to indicate if ISO13503_5Point has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ISO13503_5PointSpecified
         {
             get {
             if(ISO13503_5PointField!=null)
                 return ISO13503_5PointField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimISO13503_5Point> ISO13503_5PointField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimJobMaterialCatalog xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimJobMaterialCatalog", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimJobMaterialCatalog xsd type.")]
    public partial class StimJobMaterialCatalog : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// List of additives in the catalog.
        /// </summary>
		[Description("List of additives in the catalog.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimAdditive")]
		[XmlElement("Additives")]
        public List<StimAdditive> Additives {
            get {
                return AdditivesField;
            } 
            set {
                AdditivesField = value;
                NotifyPropertyChanged("Additives");
            }
        }

         /// <summary>
         /// bool to indicate if Additives has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AdditivesSpecified
         {
             get {
             if(AdditivesField!=null)
                 return AdditivesField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimAdditive> AdditivesField; 

        /// <summary>
        /// List of proppant agents in the catalog.
        /// </summary>
		[Description("List of proppant agents in the catalog.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimProppantAgent")]
		[XmlElement("ProppantAgents")]
        public List<StimProppantAgent> ProppantAgents {
            get {
                return ProppantAgentsField;
            } 
            set {
                ProppantAgentsField = value;
                NotifyPropertyChanged("ProppantAgents");
            }
        }

         /// <summary>
         /// bool to indicate if ProppantAgents has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProppantAgentsSpecified
         {
             get {
             if(ProppantAgentsField!=null)
                 return ProppantAgentsField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimProppantAgent> ProppantAgentsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimJobDiversion xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimJobDiversion", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimJobDiversion xsd type.")]
    public partial class StimJobDiversion : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Name of the diversion contractor.
        /// </summary>
		[StringLength(2000)]
        [Description("Name of the diversion contractor.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Contractor")]
        public string Contractor {
            get {
                return ContractorField;
            } 
            set {
                ContractorField = value;
                NotifyPropertyChanged("Contractor");
            }
        }

        private string ContractorField; 

        /// <summary>
        /// The diversion method used.
        /// </summary>
		[Description("The diversion method used.")]
        [EnergisticsDataTypeAttribute(DataType = "StimJobDiversionMethod")]
		[XmlElement("Method")]
        public StimJobDiversionMethod? Method {
            get {
                return MethodField;
            } 
            set {
                MethodField = value;
                 this.MethodSpecified = true;
                NotifyPropertyChanged("Method");
            }
        }

        private StimJobDiversionMethod? MethodField; 

        /// <summary>
        /// MethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MethodSpecified {
            get {
                return MethodSpecifiedField;
            } 
            set {
                MethodSpecifiedField = value;
                NotifyPropertyChanged("MethodSpecified");
            }
        }

        private bool MethodSpecifiedField; 

        /// <summary>
        /// A supplier description of the diversion tool, such as its commercial name.
        /// </summary>
		[StringLength(2000)]
        [Description("A supplier description of the diversion tool, such as its commercial name.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("ToolDescription")]
        public string ToolDescription {
            get {
                return ToolDescriptionField;
            } 
            set {
                ToolDescriptionField = value;
                NotifyPropertyChanged("ToolDescription");
            }
        }

        private string ToolDescriptionField; 

        /// <summary>
        /// Spacing between packer elements.
        /// </summary>
		[Description("Spacing between packer elements.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ElementSpacing")]
        public LengthMeasure ElementSpacing {
            get {
                return ElementSpacingField;
            } 
            set {
                ElementSpacingField = value;
                NotifyPropertyChanged("ElementSpacing");
            }
        }

        private LengthMeasure ElementSpacingField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimReservoirInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimReservoirInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimReservoirInterval xsd type.")]
    public partial class StimReservoirInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Lithology measured depth interval.
        /// </summary>
		[Description("Lithology measured depth interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("LithMdInterval")]
        public MdInterval LithMDInterval {
            get {
                return LithMdIntervalField;
            } 
            set {
                LithMdIntervalField = value;
                NotifyPropertyChanged("LithMDInterval");
            }
        }

        private MdInterval LithMdIntervalField; 

        /// <summary>
        /// Formation permeability, a measurement of the ability of a fluid to flow through a rock. Commonly measured in milliDarcys (1m2 = 0.000000000000986923 Darcy).
        /// </summary>
		[Description("Formation permeability, a measurement of the ability of a fluid to flow through a rock. Commonly measured in milliDarcys (1m2 = 0.000000000000986923 Darcy).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityRockMeasure")]
		[XmlElement("LithFormationPermeability")]
        public PermeabilityRockMeasure LithFormationPermeability {
            get {
                return LithFormationPermeabilityField;
            } 
            set {
                LithFormationPermeabilityField = value;
                NotifyPropertyChanged("LithFormationPermeability");
            }
        }

        private PermeabilityRockMeasure LithFormationPermeabilityField; 

        /// <summary>
        /// Young's modulus (E) is a measure of the stiffness of an isotropic elastic material. It is also known as the Young modulus, modulus of elasticity, elastic modulus (though Young's modulus is actually one of several elastic moduli such as the bulk modulus and the shear modulus) or tensile modulus. It is defined as the ratio of the uniaxial stress over the uniaxial strain.
        /// </summary>
		[Description("Young's modulus (E) is a measure of the stiffness of an isotropic elastic material. It is also known as the Young modulus, modulus of elasticity, elastic modulus (though Young's modulus is actually one  of several elastic moduli such as the bulk modulus and the shear modulus) or tensile modulus. It is  defined as the ratio of the uniaxial stress over the uniaxial strain.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("LithYoungsModulus")]
        public PressureMeasure LithYoungsModulus {
            get {
                return LithYoungsModulusField;
            } 
            set {
                LithYoungsModulusField = value;
                NotifyPropertyChanged("LithYoungsModulus");
            }
        }

        private PressureMeasure LithYoungsModulusField; 

        /// <summary>
        /// Refers to the pressure of fluids held within a soil or rock, in gaps between particles’ formation porosity.
        /// </summary>
		[Description("Refers to the pressure of fluids held within a soil or rock, in gaps between particles’ formation porosity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("LithPorePres")]
        public PressureMeasure LithPorePres {
            get {
                return LithPorePresField;
            } 
            set {
                LithPorePresField = value;
                NotifyPropertyChanged("LithPorePres");
            }
        }

        private PressureMeasure LithPorePresField; 

        /// <summary>
        /// Net pay is computed. It is the thickness of rock that can deliver hydrocarbons to the wellbore formation.
        /// </summary>
		[Description("Net pay is computed. It is the thickness of rock that can deliver hydrocarbons to the wellbore formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LithNetPayThickness")]
        public LengthMeasure LithNetPayThickness {
            get {
                return LithNetPayThicknessField;
            } 
            set {
                LithNetPayThicknessField = value;
                NotifyPropertyChanged("LithNetPayThickness");
            }
        }

        private LengthMeasure LithNetPayThicknessField; 

        /// <summary>
        /// A name for the formation lithology.
        /// </summary>
		[StringLength(2000)]
        [Description("A name for the formation lithology.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("LithName")]
        public string LithName {
            get {
                return LithNameField;
            } 
            set {
                LithNameField = value;
                NotifyPropertyChanged("LithName");
            }
        }

        private string LithNameField; 

        /// <summary>
        /// Measured depth of the bottom of the formation.
        /// </summary>
		[Description("Measured depth of the bottom of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("GrossPayMdInterval")]
        public MdInterval GrossPayMDInterval {
            get {
                return GrossPayMdIntervalField;
            } 
            set {
                GrossPayMdIntervalField = value;
                NotifyPropertyChanged("GrossPayMDInterval");
            }
        }

        private MdInterval GrossPayMdIntervalField; 

        /// <summary>
        /// The total thickness of the interval being treated, whether or not it is productive.
        /// </summary>
		[Description("The total thickness of the interval being treated, whether or not it is productive.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("GrossPayThickness")]
        public LengthMeasure GrossPayThickness {
            get {
                return GrossPayThicknessField;
            } 
            set {
                GrossPayThicknessField = value;
                NotifyPropertyChanged("GrossPayThickness");
            }
        }

        private LengthMeasure GrossPayThicknessField; 

        /// <summary>
        /// The thickness of the most productive part of the interval. Net pay is a subset of the gross.
        /// </summary>
		[Description("The thickness of the most productive part of the interval. Net pay is a subset of the gross.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("NetPayThickness")]
        public LengthMeasure NetPayThickness {
            get {
                return NetPayThicknessField;
            } 
            set {
                NetPayThicknessField = value;
                NotifyPropertyChanged("NetPayThickness");
            }
        }

        private LengthMeasure NetPayThicknessField; 

        /// <summary>
        /// The pore pressure of the net pay.
        /// </summary>
		[Description("The pore pressure of the net pay.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("NetPayPorePres")]
        public PressureMeasure NetPayPorePres {
            get {
                return NetPayPorePresField;
            } 
            set {
                NetPayPorePresField = value;
                NotifyPropertyChanged("NetPayPorePres");
            }
        }

        private PressureMeasure NetPayPorePresField; 

        /// <summary>
        /// The volume change of the fluid in the net pay when pressure is applied.
        /// </summary>
		[Description("The volume change of the fluid in the net pay when pressure is applied.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IsothermalCompressibilityMeasure")]
		[XmlElement("NetPayFluidCompressibility")]
        public IsothermalCompressibilityMeasure NetPayFluidCompressibility {
            get {
                return NetPayFluidCompressibilityField;
            } 
            set {
                NetPayFluidCompressibilityField = value;
                NotifyPropertyChanged("NetPayFluidCompressibility");
            }
        }

        private IsothermalCompressibilityMeasure NetPayFluidCompressibilityField; 

        /// <summary>
        /// With respect to the net pay, a measurement of the internal resistance of a fluid to flow against itself. Expressed as the ratio of shear stress to shear rate.
        /// </summary>
		[Description("With respect to the net pay, a measurement of the internal resistance of a fluid to flow against itself. Expressed as the ratio of shear stress to shear rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("NetPayFluidViscosity")]
        public DynamicViscosityMeasure NetPayFluidViscosity {
            get {
                return NetPayFluidViscosityField;
            } 
            set {
                NetPayFluidViscosityField = value;
                NotifyPropertyChanged("NetPayFluidViscosity");
            }
        }

        private DynamicViscosityMeasure NetPayFluidViscosityField; 

        /// <summary>
        /// The name used for the net pay zone.
        /// </summary>
		[StringLength(2000)]
        [Description("The name used for the net pay zone.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("NetPayName")]
        public string NetPayName {
            get {
                return NetPayNameField;
            } 
            set {
                NetPayNameField = value;
                NotifyPropertyChanged("NetPayName");
            }
        }

        private string NetPayNameField; 

        /// <summary>
        /// The permeability of the net pay of the formation.
        /// </summary>
		[Description("The permeability of the net pay of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityRockMeasure")]
		[XmlElement("NetPayFormationPermeability")]
        public PermeabilityRockMeasure NetPayFormationPermeability {
            get {
                return NetPayFormationPermeabilityField;
            } 
            set {
                NetPayFormationPermeabilityField = value;
                NotifyPropertyChanged("NetPayFormationPermeability");
            }
        }

        private PermeabilityRockMeasure NetPayFormationPermeabilityField; 

        /// <summary>
        /// The ratio of the relative contraction strain, or transverse strain (normal to the applied load), divided by the relative extension strain, or axial strain (in the direction of the applied load).
        /// </summary>
		[Description("The ratio of the relative contraction strain, or transverse strain (normal to the applied load), divided by the relative extension strain, or axial strain (in the direction of the applied load).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("LithPoissonsRatio")]
        public DimensionlessMeasure LithPoissonsRatio {
            get {
                return LithPoissonsRatioField;
            } 
            set {
                LithPoissonsRatioField = value;
                NotifyPropertyChanged("LithPoissonsRatio");
            }
        }

        private DimensionlessMeasure LithPoissonsRatioField; 

        /// <summary>
        /// The porosity of the net pay formation.
        /// </summary>
		[Description("The porosity of the net pay formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("NetPayFormationPorosity")]
        public VolumePerVolumeMeasure NetPayFormationPorosity {
            get {
                return NetPayFormationPorosityField;
            } 
            set {
                NetPayFormationPorosityField = value;
                NotifyPropertyChanged("NetPayFormationPorosity");
            }
        }

        private VolumePerVolumeMeasure NetPayFormationPorosityField; 

        /// <summary>
        /// Permeability of the formation.
        /// </summary>
		[Description("Permeability of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityRockMeasure")]
		[XmlElement("FormationPermeability")]
        public PermeabilityRockMeasure FormationPermeability {
            get {
                return FormationPermeabilityField;
            } 
            set {
                FormationPermeabilityField = value;
                NotifyPropertyChanged("FormationPermeability");
            }
        }

        private PermeabilityRockMeasure FormationPermeabilityField; 

        /// <summary>
        /// Porosity of the formation.
        /// </summary>
		[Description("Porosity of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("FormationPorosity")]
        public VolumePerVolumeMeasure FormationPorosity {
            get {
                return FormationPorosityField;
            } 
            set {
                FormationPorosityField = value;
                NotifyPropertyChanged("FormationPorosity");
            }
        }

        private VolumePerVolumeMeasure FormationPorosityField; 

        /// <summary>
        /// Name of the formation.
        /// </summary>
		[StringLength(2000)]
        [Description("Name of the formation.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("NameFormation")]
        public string NameFormation {
            get {
                return NameFormationField;
            } 
            set {
                NameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private string NameFormationField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of StimReservoirInterval
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimReservoirInterval")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IsothermalCompressibilityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IsothermalCompressibilityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IsothermalCompressibilityMeasure xsd type.")]
    public partial class IsothermalCompressibilityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IsothermalCompressibilityMeasure class.
        /// </summary>
        public IsothermalCompressibilityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the IsothermalCompressibilityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IsothermalCompressibilityMeasure(double value, IsothermalCompressibilityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "IsothermalCompressibilityUom")]
        [XmlAttribute("uom")]
		
        public IsothermalCompressibilityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private IsothermalCompressibilityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DynamicViscosityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DynamicViscosityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DynamicViscosityMeasure xsd type.")]
    public partial class DynamicViscosityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        public DynamicViscosityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DynamicViscosityMeasure(double value, DynamicViscosityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityUom")]
        [XmlAttribute("uom")]
		
        public DynamicViscosityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DynamicViscosityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerVolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerVolumeMeasure xsd type.")]
    public partial class VolumePerVolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        public VolumePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasure(double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerVolumeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerLengthMeasure xsd type.")]
    public partial class VolumePerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerLengthMeasure class.
        /// </summary>
        public VolumePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerLengthMeasure(double value, VolumePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerLengthUom")]
        [XmlAttribute("uom")]
		
        public VolumePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimTubular xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimTubular", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimTubular xsd type.")]
    public partial class StimTubular : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of tubular (e.g., casing, tubing, liner, packer, open hole, other).
        /// </summary>
		[StringLength(64)]
        [Description("The type of tubular (e.g., casing, tubing, liner, packer, open hole, other).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// The inside diameter of the tubular used.
        /// </summary>
		[Description("The inside diameter of the tubular used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Id")]
        public LengthMeasure Id {
            get {
                return IdField;
            } 
            set {
                IdField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private LengthMeasure IdField; 

        /// <summary>
        /// The outside diameter of the tubular used.
        /// </summary>
		[Description("The outside diameter of the tubular used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Od")]
        public LengthMeasure OuterDiameter {
            get {
                return OdField;
            } 
            set {
                OdField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure OdField; 

        /// <summary>
        /// The weight per length of the tubular.
        /// </summary>
		[Description("The weight per length of the tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerLengthMeasure")]
		[XmlElement("Weight")]
        public MassPerLengthMeasure Weight {
            get {
                return WeightField;
            } 
            set {
                WeightField = value;
                NotifyPropertyChanged("Weight");
            }
        }

        private MassPerLengthMeasure WeightField; 

        /// <summary>
        /// Measured depth interval over which the tubular was used.
        /// </summary>
		[Description("Measured depth interval over which the tubular was used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("TubularMdInterval")]
        public MdInterval TubularMDInterval {
            get {
                return TubularMdIntervalField;
            } 
            set {
                TubularMdIntervalField = value;
                NotifyPropertyChanged("TubularMDInterval");
            }
        }

        private MdInterval TubularMdIntervalField; 

        /// <summary>
        /// True vertical depth interval over which the tubular was used.
        /// </summary>
		[Description("True vertical depth interval over which the tubular was used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("TubularTvdInterval")]
        public TvdInterval TubularTvdInterval {
            get {
                return TubularTvdIntervalField;
            } 
            set {
                TubularTvdIntervalField = value;
                NotifyPropertyChanged("TubularTvdInterval");
            }
        }

        private TvdInterval TubularTvdIntervalField; 

        /// <summary>
        /// The volume per length of the tubular.
        /// </summary>
		[Description("The volume per length of the tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerLengthMeasure")]
		[XmlElement("VolumeFactor")]
        public VolumePerLengthMeasure VolumeFactor {
            get {
                return VolumeFactorField;
            } 
            set {
                VolumeFactorField = value;
                NotifyPropertyChanged("VolumeFactor");
            }
        }

        private VolumePerLengthMeasure VolumeFactorField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of StimTubular.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimTubular.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerLengthMeasure xsd type.")]
    public partial class MassPerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerLengthMeasure class.
        /// </summary>
        public MassPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerLengthMeasure(double value, MassPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassPerLengthUom")]
        [XmlAttribute("uom")]
		
        public MassPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimFlowPath xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimFlowPath", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimFlowPath xsd type.")]
    public partial class StimFlowPath : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AvgPmaxPacPres property
        /// </summary>
		[Description("PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the average of all the pmax pressures calculated for this flow path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AvgPmaxPacPres")]
        public PressureMeasure AvgPmaxPacPres {
            get {
                return AvgPmaxPacPresField;
            } 
            set {
                AvgPmaxPacPresField = value;
                NotifyPropertyChanged("AvgPmaxPacPres");
            }
        }

        private PressureMeasure AvgPmaxPacPresField; 

        /// <summary>
        /// FrictionFactorOpenHole property
        /// </summary>
		[Description("The friction factor used to compute openhole pressure loss.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("FrictionFactorOpenHole")]
        public DimensionlessMeasure FrictionFactorOpenHole {
            get {
                return FrictionFactorOpenHoleField;
            } 
            set {
                FrictionFactorOpenHoleField = value;
                NotifyPropertyChanged("FrictionFactorOpenHole");
            }
        }

        private DimensionlessMeasure FrictionFactorOpenHoleField; 

        /// <summary>
        /// AvgPmaxWeaklinkPres property
        /// </summary>
		[Description("Average allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AvgPmaxWeaklinkPres")]
        public PressureMeasure AvgPmaxWeaklinkPres {
            get {
                return AvgPmaxWeaklinkPresField;
            } 
            set {
                AvgPmaxWeaklinkPresField = value;
                NotifyPropertyChanged("AvgPmaxWeaklinkPres");
            }
        }

        private PressureMeasure AvgPmaxWeaklinkPresField; 

        /// <summary>
        /// BreakDownPres property
        /// </summary>
		[Description("The pressure at which the formation broke.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BreakDownPres")]
        public PressureMeasure BreakDownPres {
            get {
                return BreakDownPresField;
            } 
            set {
                BreakDownPresField = value;
                NotifyPropertyChanged("BreakDownPres");
            }
        }

        private PressureMeasure BreakDownPresField; 

        /// <summary>
        /// BridgePlugMD property
        /// </summary>
		[Description("The measured depth of a bridge plug.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("BridgePlugMD")]
        public MeasuredDepthCoord BridgePlugMD {
            get {
                return BridgePlugMDField;
            } 
            set {
                BridgePlugMDField = value;
                NotifyPropertyChanged("BridgePlugMD");
            }
        }

        private MeasuredDepthCoord BridgePlugMDField; 

        /// <summary>
        /// FractureGradient property
        /// </summary>
		[Description("The formation fracture gradient for this treatment interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeMeasure")]
		[XmlElement("FractureGradient")]
        public ForcePerVolumeMeasure FractureGradient {
            get {
                return FractureGradientField;
            } 
            set {
                FractureGradientField = value;
                NotifyPropertyChanged("FractureGradient");
            }
        }

        private ForcePerVolumeMeasure FractureGradientField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[Description("The type of flow path.")]
        [EnergisticsDataTypeAttribute(DataType = "StimFlowPathType")]
		[XmlElement("Kind")]
        public StimFlowPathType? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private StimFlowPathType? KindField; 

        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool KindSpecifiedField; 

        /// <summary>
        /// MaxPmaxPacPres property
        /// </summary>
		[Description("PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the maximum of all the pmax pressures calculated for this flow path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("MaxPmaxPacPres")]
        public PressureMeasure MaxPmaxPacPres {
            get {
                return MaxPmaxPacPresField;
            } 
            set {
                MaxPmaxPacPresField = value;
                NotifyPropertyChanged("MaxPmaxPacPres");
            }
        }

        private PressureMeasure MaxPmaxPacPresField; 

        /// <summary>
        /// MaxPmaxWeaklinkPres property
        /// </summary>
		[Description("Maximum allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("MaxPmaxWeaklinkPres")]
        public PressureMeasure MaxPmaxWeaklinkPres {
            get {
                return MaxPmaxWeaklinkPresField;
            } 
            set {
                MaxPmaxWeaklinkPresField = value;
                NotifyPropertyChanged("MaxPmaxWeaklinkPres");
            }
        }

        private PressureMeasure MaxPmaxWeaklinkPresField; 

        /// <summary>
        /// PackerMD property
        /// </summary>
		[Description("The measured depth of a packer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("PackerMD")]
        public MeasuredDepthCoord PackerMD {
            get {
                return PackerMDField;
            } 
            set {
                PackerMDField = value;
                NotifyPropertyChanged("PackerMD");
            }
        }

        private MeasuredDepthCoord PackerMDField; 

        /// <summary>
        /// FrictionFactorPipe property
        /// </summary>
		[Description("The friction factor for the pipe, tubing, and/or casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("FrictionFactorPipe")]
        public DimensionlessMeasure FrictionFactorPipe {
            get {
                return FrictionFactorPipeField;
            } 
            set {
                FrictionFactorPipeField = value;
                NotifyPropertyChanged("FrictionFactorPipe");
            }
        }

        private DimensionlessMeasure FrictionFactorPipeField; 

        /// <summary>
        /// TubingBottomMD property
        /// </summary>
		[Description("The maximum measured depth of the tubing used for treatment of a stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("TubingBottomMD")]
        public MeasuredDepthCoord TubingBottomMD {
            get {
                return TubingBottomMDField;
            } 
            set {
                TubingBottomMDField = value;
                NotifyPropertyChanged("TubingBottomMD");
            }
        }

        private MeasuredDepthCoord TubingBottomMDField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimTubular")]
		[XmlElement("Tubular")]
        public List<StimTubular> Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

         /// <summary>
         /// bool to indicate if Tubular has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TubularSpecified
         {
             get {
             if(TubularField!=null)
                 return TubularField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimTubular> TubularField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MeasuredDepthCoord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MeasuredDepthCoord", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MeasuredDepthCoord xsd type.")]
    public partial class MeasuredDepthCoord : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        public MeasuredDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasuredDepthCoord(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// Unit of measure used by this measured depth coordinate.
        /// </summary>
		[Required]
        [Description("Unit of measure used by this measured depth coordinate.")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

		/// <summary>
        /// Defines the vertical datums associated with elevation, vertical depth, and measured depth coordinates.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Defines the vertical datums associated with elevation, vertical depth, and measured depth coordinates.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("datum")]
		
        public string Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string datumField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ForcePerVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ForcePerVolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ForcePerVolumeMeasure xsd type.")]
    public partial class ForcePerVolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasure class.
        /// </summary>
        public ForcePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerVolumeMeasure(double value, ForcePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeUom")]
        [XmlAttribute("uom")]
		
        public ForcePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerVolumeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the UnitlessMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="UnitlessMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the UnitlessMeasure xsd type.")]
    public partial class UnitlessMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the UnitlessMeasure class.
        /// </summary>
        public UnitlessMeasure() {}

        /// <summary>
        /// Initializes a new instance of the UnitlessMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public UnitlessMeasure(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimFluid xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimFluid", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimFluid xsd type.")]
    public partial class StimFluid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(2000)]
        [Description("The name of the fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[Description("The fluid types.")]
        [EnergisticsDataTypeAttribute(DataType = "StimFluidKind")]
		[XmlElement("Kind")]
        public StimFluidKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private StimFluidKind? KindField; 

        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool KindSpecifiedField; 

        /// <summary>
        /// Subtype property
        /// </summary>
		[Description("The fluid subtypes.")]
        [EnergisticsDataTypeAttribute(DataType = "StimFluidSubtype")]
		[XmlElement("Subtype")]
        public StimFluidSubtype? Subtype {
            get {
                return SubtypeField;
            } 
            set {
                SubtypeField = value;
                 this.SubtypeSpecified = true;
                NotifyPropertyChanged("Subtype");
            }
        }

        private StimFluidSubtype? SubtypeField; 

        /// <summary>
        /// SubtypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SubtypeSpecified {
            get {
                return SubtypeSpecifiedField;
            } 
            set {
                SubtypeSpecifiedField = value;
                NotifyPropertyChanged("SubtypeSpecified");
            }
        }

        private bool SubtypeSpecifiedField; 

        /// <summary>
        /// Purpose property
        /// </summary>
		[StringLength(2000)]
        [Description("The purpose of the fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Purpose")]
        public string Purpose {
            get {
                return PurposeField;
            } 
            set {
                PurposeField = value;
                NotifyPropertyChanged("Purpose");
            }
        }

        private string PurposeField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("The description of the fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Supplier property
        /// </summary>
		[StringLength(2000)]
        [Description("The supplier of the fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Supplier")]
        public string Supplier {
            get {
                return SupplierField;
            } 
            set {
                SupplierField = value;
                NotifyPropertyChanged("Supplier");
            }
        }

        private string SupplierField; 

        /// <summary>
        /// IsKillFluid property
        /// </summary>
		[Description("Is the fluid a kill fluid?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsKillFluid")]
        public bool? IsKillFluid {
            get {
                return IsKillFluidField;
            } 
            set {
                IsKillFluidField = value;
                 this.IsKillFluidSpecified = true;
                NotifyPropertyChanged("IsKillFluid");
            }
        }

        private bool? IsKillFluidField; 

        /// <summary>
        /// IsKillFluidSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsKillFluidSpecified {
            get {
                return IsKillFluidSpecifiedField;
            } 
            set {
                IsKillFluidSpecifiedField = value;
                NotifyPropertyChanged("IsKillFluidSpecified");
            }
        }

        private bool IsKillFluidSpecifiedField; 

        /// <summary>
        /// Volume property
        /// </summary>
		[Description("Volume of fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Volume")]
        public VolumeMeasure Volume {
            get {
                return VolumeField;
            } 
            set {
                VolumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeMeasure VolumeField; 

        /// <summary>
        /// Density property
        /// </summary>
		[Description("The density of the fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// FluidTemp property
        /// </summary>
		[Description("The temperature of the fluid at surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("FluidTemp")]
        public ThermodynamicTemperatureMeasure FluidTemp {
            get {
                return FluidTempField;
            } 
            set {
                FluidTempField = value;
                NotifyPropertyChanged("FluidTemp");
            }
        }

        private ThermodynamicTemperatureMeasure FluidTempField; 

        /// <summary>
        /// GelStrength10Min property
        /// </summary>
		[Description("The shear stress measured at low shear rate after a mud has set quiescently for 10 minutes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("GelStrength10Min")]
        public PressureMeasure GelStrength10Min {
            get {
                return GelStrength10MinField;
            } 
            set {
                GelStrength10MinField = value;
                NotifyPropertyChanged("GelStrength10Min");
            }
        }

        private PressureMeasure GelStrength10MinField; 

        /// <summary>
        /// GelStrength10Sec property
        /// </summary>
		[Description("The shear stress measured at low shear rate after a mud has set quiescently for 10 seconds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("GelStrength10Sec")]
        public PressureMeasure GelStrength10Sec {
            get {
                return GelStrength10SecField;
            } 
            set {
                GelStrength10SecField = value;
                NotifyPropertyChanged("GelStrength10Sec");
            }
        }

        private PressureMeasure GelStrength10SecField; 

        /// <summary>
        /// SpecificGravity property
        /// </summary>
		[Description("The specific gravity of the fluid at surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("SpecificGravity")]
        public DimensionlessMeasure SpecificGravity {
            get {
                return SpecificGravityField;
            } 
            set {
                SpecificGravityField = value;
                NotifyPropertyChanged("SpecificGravity");
            }
        }

        private DimensionlessMeasure SpecificGravityField; 

        /// <summary>
        /// Viscosity property
        /// </summary>
		[Description("Viscosity of stimulation fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("Viscosity")]
        public DynamicViscosityMeasure Viscosity {
            get {
                return ViscosityField;
            } 
            set {
                ViscosityField = value;
                NotifyPropertyChanged("Viscosity");
            }
        }

        private DynamicViscosityMeasure ViscosityField; 

        /// <summary>
        /// pH property
        /// </summary>
		[Description("The pH of the fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "UnitlessMeasure")]
		[XmlElement("pH")]
        public UnitlessMeasure PH {
            get {
                return pHField;
            } 
            set {
                pHField = value;
                NotifyPropertyChanged("PH");
            }
        }

        private UnitlessMeasure pHField; 

        /// <summary>
        /// AdditiveConcentration property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("AdditiveConcentration")]
        public List<StimMaterialQuantity> AdditiveConcentration {
            get {
                return AdditiveConcentrationField;
            } 
            set {
                AdditiveConcentrationField = value;
                NotifyPropertyChanged("AdditiveConcentration");
            }
        }

         /// <summary>
         /// bool to indicate if AdditiveConcentration has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AdditiveConcentrationSpecified
         {
             get {
             if(AdditiveConcentrationField!=null)
                 return AdditiveConcentrationField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> AdditiveConcentrationField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumeMeasure xsd type.")]
    public partial class VolumeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        public VolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeMeasure(double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimMaterialQuantity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimMaterialQuantity", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimMaterialQuantity xsd type.")]
    public partial class StimMaterialQuantity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The density of material used.
        /// </summary>
		[Description("The density of material used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// The mass of material used. This should be used without specifying any of the other material measures (e.g. volume, standard volume, etc.).
        /// </summary>
		[Description("The mass of material used.  This should be used without specifying any of the other material measures (e.g. volume, standard volume, etc.).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("Mass")]
        public MassMeasure Mass {
            get {
                return MassField;
            } 
            set {
                MassField = value;
                NotifyPropertyChanged("Mass");
            }
        }

        private MassMeasure MassField; 

        /// <summary>
        /// Rate at which mass of material is flowing.
        /// </summary>
		[Description("Rate at which mass of material is flowing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerTimeMeasure")]
		[XmlElement("MassFlowRate")]
        public MassPerTimeMeasure MassFlowRate {
            get {
                return MassFlowRateField;
            } 
            set {
                MassFlowRateField = value;
                NotifyPropertyChanged("MassFlowRate");
            }
        }

        private MassPerTimeMeasure MassFlowRateField; 

        /// <summary>
        /// The standard volume of material used. Standard volume is the volume measured under the same conditions. This should be used without specifying any of the other material measures (e.g., mass, volume, etc.).
        /// </summary>
		[Description("The standard volume of material used. Standard volume is the volume measured under the same conditions. This should be used without specifying any of the other material measures (e.g., mass, volume, etc.).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("StdVolume")]
        public VolumeMeasure StdVolume {
            get {
                return StdVolumeField;
            } 
            set {
                StdVolumeField = value;
                NotifyPropertyChanged("StdVolume");
            }
        }

        private VolumeMeasure StdVolumeField; 

        /// <summary>
        /// The volume of material used. This should be used without specifying any of the other material measures (e.g. mass, standard volume, etc.).
        /// </summary>
		[Description("The volume of material used.  This should be used without specifying any of the other material measures (e.g. mass, standard volume, etc.).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Volume")]
        public VolumeMeasure Volume {
            get {
                return VolumeField;
            } 
            set {
                VolumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeMeasure VolumeField; 

        /// <summary>
        /// The volume per volume measure of material used. This should be used without specifying any of the other material measures (e.g. mass, density, standard volume, etc.).
        /// </summary>
		[Description("The volume per volume measure of material used.  This should be used without specifying any of the other material measures (e.g. mass, density, standard volume, etc.).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("VolumeConcentration")]
        public VolumePerVolumeMeasure VolumeConcentration {
            get {
                return VolumeConcentrationField;
            } 
            set {
                VolumeConcentrationField = value;
                NotifyPropertyChanged("VolumeConcentration");
            }
        }

        private VolumePerVolumeMeasure VolumeConcentrationField; 

        /// <summary>
        /// Rate at which the volume of material is flowing.
        /// </summary>
		[Description("Rate at which the volume of material is flowing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("VolumetricFlowRate")]
        public VolumePerTimeMeasure VolumetricFlowRate {
            get {
                return VolumetricFlowRateField;
            } 
            set {
                VolumetricFlowRateField = value;
                NotifyPropertyChanged("VolumetricFlowRate");
            }
        }

        private VolumePerTimeMeasure VolumetricFlowRateField; 

        /// <summary>
        /// Material ID is equal to AbstractStimMaterial.RefId. This is a reference to the UID of the StimMaterial in the StimJobMaterialCatalog.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Material ID is  equal to AbstractStimMaterial.RefId.  This is a reference to the UID of the StimMaterial in the StimJobMaterialCatalog.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MaterialReference")]
        public string MaterialReference {
            get {
                return MaterialReferenceField;
            } 
            set {
                MaterialReferenceField = value;
                NotifyPropertyChanged("MaterialReference");
            }
        }

        private string MaterialReferenceField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of StimMaterialQuantity
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimMaterialQuantity")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassMeasure xsd type.")]
    public partial class MassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        public MassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassMeasure(double value, MassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassUom")]
        [XmlAttribute("uom")]
		
        public MassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MassPerTimeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MassPerTimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MassPerTimeMeasure xsd type.")]
    public partial class MassPerTimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassPerTimeMeasure class.
        /// </summary>
        public MassPerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassPerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassPerTimeMeasure(double value, MassPerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassPerTimeUom")]
        [XmlAttribute("uom")]
		
        public MassPerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassPerTimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerTimeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerTimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerTimeMeasure xsd type.")]
    public partial class VolumePerTimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerTimeMeasure class.
        /// </summary>
        public VolumePerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerTimeMeasure(double value, VolumePerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeUom")]
        [XmlAttribute("uom")]
		
        public VolumePerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerTimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimJobStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimJobStep", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimJobStep xsd type.")]
    public partial class StimJobStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StepName property
        /// </summary>
		[StringLength(2000)]
        [Description("A human readable name for the step.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("StepName")]
        public string StepName {
            get {
                return StepNameField;
            } 
            set {
                StepNameField = value;
                NotifyPropertyChanged("StepName");
            }
        }

        private string StepNameField; 

        /// <summary>
        /// StepNumber property
        /// </summary>
		[Required]
        [Description("Step number.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("StepNumber")]
        public long? StepNumber {
            get {
                return StepNumberField;
            } 
            set {
                StepNumberField = value;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private long? StepNumberField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[StringLength(2000)]
        [Description("The type of step.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Kind")]
        public string Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string KindField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A short description of the step.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("Date and time the step started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Description("Date and time the step ended.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        
        private bool DateTimeEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DateTimeEndSpecifiedField;
            } 
            set {
                DateTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }
        
        private Timestamp? DTimEndField; 

        /// <summary>
        /// AvgBaseFluidQuality property
        /// </summary>
		[Description("Base quality percentage of foam.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("AvgBaseFluidQuality")]
        public VolumePerVolumeMeasure AvgBaseFluidQuality {
            get {
                return AvgBaseFluidQualityField;
            } 
            set {
                AvgBaseFluidQualityField = value;
                NotifyPropertyChanged("AvgBaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasure AvgBaseFluidQualityField; 

        /// <summary>
        /// AvgCO2BaseFluidQuality property
        /// </summary>
		[Description("Base quality carbon dioxide percent of foam.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("AvgCO2BaseFluidQuality")]
        public VolumePerVolumeMeasure AvgCO2BaseFluidQuality {
            get {
                return AvgCO2BaseFluidQualityField;
            } 
            set {
                AvgCO2BaseFluidQualityField = value;
                NotifyPropertyChanged("AvgCO2BaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasure AvgCO2BaseFluidQualityField; 

        /// <summary>
        /// AvgHydraulicPower property
        /// </summary>
		[Description("Average hydraulic horse power used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("AvgHydraulicPower")]
        public PowerMeasure AvgHydraulicPower {
            get {
                return AvgHydraulicPowerField;
            } 
            set {
                AvgHydraulicPowerField = value;
                NotifyPropertyChanged("AvgHydraulicPower");
            }
        }

        private PowerMeasure AvgHydraulicPowerField; 

        /// <summary>
        /// AvgInternalPhaseFraction property
        /// </summary>
		[Description("Internal gas phase percentage of the foam.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("AvgInternalPhaseFraction")]
        public VolumePerVolumeMeasure AvgInternalPhaseFraction {
            get {
                return AvgInternalPhaseFractionField;
            } 
            set {
                AvgInternalPhaseFractionField = value;
                NotifyPropertyChanged("AvgInternalPhaseFraction");
            }
        }

        private VolumePerVolumeMeasure AvgInternalPhaseFractionField; 

        /// <summary>
        /// AvgMaterialUsedRate property
        /// </summary>
		[Description("Average material used per minute entering the flow stream.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("AvgMaterialUsedRate")]
        public List<StimMaterialQuantity> AvgMaterialUsedRate {
            get {
                return AvgMaterialUsedRateField;
            } 
            set {
                AvgMaterialUsedRateField = value;
                NotifyPropertyChanged("AvgMaterialUsedRate");
            }
        }

         /// <summary>
         /// bool to indicate if AvgMaterialUsedRate has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AvgMaterialUsedRateSpecified
         {
             get {
             if(AvgMaterialUsedRateField!=null)
                 return AvgMaterialUsedRateField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> AvgMaterialUsedRateField; 

        /// <summary>
        /// AvgMaterialUseRateBottomhole property
        /// </summary>
		[Description("Average material amount used (pumped) per minute at bottomhole.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("AvgMaterialUseRateBottomhole")]
        public List<StimMaterialQuantity> AvgMaterialUseRateBottomhole {
            get {
                return AvgMaterialUseRateBottomholeField;
            } 
            set {
                AvgMaterialUseRateBottomholeField = value;
                NotifyPropertyChanged("AvgMaterialUseRateBottomhole");
            }
        }

         /// <summary>
         /// bool to indicate if AvgMaterialUseRateBottomhole has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AvgMaterialUseRateBottomholeSpecified
         {
             get {
             if(AvgMaterialUseRateBottomholeField!=null)
                 return AvgMaterialUseRateBottomholeField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> AvgMaterialUseRateBottomholeField; 

        /// <summary>
        /// AvgN2BaseFluidQuality property
        /// </summary>
		[Description("Base quality nitrogen percentage of foam.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("AvgN2BaseFluidQuality")]
        public VolumePerVolumeMeasure AvgN2BaseFluidQuality {
            get {
                return AvgN2BaseFluidQualityField;
            } 
            set {
                AvgN2BaseFluidQualityField = value;
                NotifyPropertyChanged("AvgN2BaseFluidQuality");
            }
        }

        private VolumePerVolumeMeasure AvgN2BaseFluidQualityField; 

        /// <summary>
        /// AvgPresBottomhole property
        /// </summary>
		[Description("Average bottomhole pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AvgPresBottomhole")]
        public PressureMeasure AvgPresBottomhole {
            get {
                return AvgPresBottomholeField;
            } 
            set {
                AvgPresBottomholeField = value;
                NotifyPropertyChanged("AvgPresBottomhole");
            }
        }

        private PressureMeasure AvgPresBottomholeField; 

        /// <summary>
        /// AvgPresSurface property
        /// </summary>
		[Description("Average surface pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AvgPresSurface")]
        public PressureMeasure AvgPresSurface {
            get {
                return AvgPresSurfaceField;
            } 
            set {
                AvgPresSurfaceField = value;
                NotifyPropertyChanged("AvgPresSurface");
            }
        }

        private PressureMeasure AvgPresSurfaceField; 

        /// <summary>
        /// AvgPropConc property
        /// </summary>
		[Description("Average proppant concentration at the wellhead.  ppa: pounds proppant added per volume measure kgpa: kilograms proppant added per volume measure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("AvgPropConc")]
        public MassPerVolumeMeasure AvgPropConc {
            get {
                return AvgPropConcField;
            } 
            set {
                AvgPropConcField = value;
                NotifyPropertyChanged("AvgPropConc");
            }
        }

        private MassPerVolumeMeasure AvgPropConcField; 

        /// <summary>
        /// AvgProppantConcBottomhole property
        /// </summary>
		[Description("The average proppant concentration at bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("AvgProppantConcBottomhole")]
        public MassPerVolumeMeasure AvgProppantConcBottomhole {
            get {
                return AvgProppantConcBottomholeField;
            } 
            set {
                AvgProppantConcBottomholeField = value;
                NotifyPropertyChanged("AvgProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure AvgProppantConcBottomholeField; 

        /// <summary>
        /// AvgProppantConcSurface property
        /// </summary>
		[Description("The average proppant concentration at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("AvgProppantConcSurface")]
        public MassPerVolumeMeasure AvgProppantConcSurface {
            get {
                return AvgProppantConcSurfaceField;
            } 
            set {
                AvgProppantConcSurfaceField = value;
                NotifyPropertyChanged("AvgProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure AvgProppantConcSurfaceField; 

        /// <summary>
        /// AvgSlurryPropConc property
        /// </summary>
		[Description("Average proppant concentration exiting the equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("AvgSlurryPropConc")]
        public MassPerVolumeMeasure AvgSlurryPropConc {
            get {
                return AvgSlurryPropConcField;
            } 
            set {
                AvgSlurryPropConcField = value;
                NotifyPropertyChanged("AvgSlurryPropConc");
            }
        }

        private MassPerVolumeMeasure AvgSlurryPropConcField; 

        /// <summary>
        /// AvgSlurryRate property
        /// </summary>
		[Description("Average slurry return rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("AvgSlurryRate")]
        public VolumePerTimeMeasure AvgSlurryRate {
            get {
                return AvgSlurryRateField;
            } 
            set {
                AvgSlurryRateField = value;
                NotifyPropertyChanged("AvgSlurryRate");
            }
        }

        private VolumePerTimeMeasure AvgSlurryRateField; 

        /// <summary>
        /// AvgTemperature property
        /// </summary>
		[Description("Average fluid temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("AvgTemperature")]
        public ThermodynamicTemperatureMeasure AvgTemperature {
            get {
                return AvgTemperatureField;
            } 
            set {
                AvgTemperatureField = value;
                NotifyPropertyChanged("AvgTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure AvgTemperatureField; 

        /// <summary>
        /// AvgVolumeRateWellhead property
        /// </summary>
		[Description("Average volume per minute at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("AvgVolumeRateWellhead")]
        public VolumePerTimeMeasure AvgVolumeRateWellhead {
            get {
                return AvgVolumeRateWellheadField;
            } 
            set {
                AvgVolumeRateWellheadField = value;
                NotifyPropertyChanged("AvgVolumeRateWellhead");
            }
        }

        private VolumePerTimeMeasure AvgVolumeRateWellheadField; 

        /// <summary>
        /// BallsRecovered property
        /// </summary>
		[Description("Balls recovered during execution of the step.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("BallsRecovered")]
        public long? BallsRecovered {
            get {
                return BallsRecoveredField;
            } 
            set {
                BallsRecoveredField = value;
                 this.BallsRecoveredSpecified = true;
                NotifyPropertyChanged("BallsRecovered");
            }
        }

        private long? BallsRecoveredField; 

        /// <summary>
        /// BallsRecoveredSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BallsRecoveredSpecified {
            get {
                return BallsRecoveredSpecifiedField;
            } 
            set {
                BallsRecoveredSpecifiedField = value;
                NotifyPropertyChanged("BallsRecoveredSpecified");
            }
        }

        private bool BallsRecoveredSpecifiedField; 

        /// <summary>
        /// BallsUsed property
        /// </summary>
		[Description("Balls used during execution of the step.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("BallsUsed")]
        public long? BallsUsed {
            get {
                return BallsUsedField;
            } 
            set {
                BallsUsedField = value;
                 this.BallsUsedSpecified = true;
                NotifyPropertyChanged("BallsUsed");
            }
        }

        private long? BallsUsedField; 

        /// <summary>
        /// BallsUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BallsUsedSpecified {
            get {
                return BallsUsedSpecifiedField;
            } 
            set {
                BallsUsedSpecifiedField = value;
                NotifyPropertyChanged("BallsUsedSpecified");
            }
        }

        private bool BallsUsedSpecifiedField; 

        /// <summary>
        /// BaseFluidBypassVol property
        /// </summary>
		[Description("Base fluid volume recorded after equipment set to bypass.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("BaseFluidBypassVol")]
        public VolumeMeasure BaseFluidBypassVol {
            get {
                return BaseFluidBypassVolField;
            } 
            set {
                BaseFluidBypassVolField = value;
                NotifyPropertyChanged("BaseFluidBypassVol");
            }
        }

        private VolumeMeasure BaseFluidBypassVolField; 

        /// <summary>
        /// BaseFluidVol property
        /// </summary>
		[Description("Base fluid volume entering the equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("BaseFluidVol")]
        public VolumeMeasure BaseFluidVol {
            get {
                return BaseFluidVolField;
            } 
            set {
                BaseFluidVolField = value;
                NotifyPropertyChanged("BaseFluidVol");
            }
        }

        private VolumeMeasure BaseFluidVolField; 

        /// <summary>
        /// EndDirtyMaterialRate property
        /// </summary>
		[Description("Ending dirty fluid pump volume per minute.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("EndDirtyMaterialRate")]
        public VolumePerTimeMeasure EndDirtyMaterialRate {
            get {
                return EndDirtyMaterialRateField;
            } 
            set {
                EndDirtyMaterialRateField = value;
                NotifyPropertyChanged("EndDirtyMaterialRate");
            }
        }

        private VolumePerTimeMeasure EndDirtyMaterialRateField; 

        /// <summary>
        /// EndMaterialUsedRate property
        /// </summary>
		[Description("Ending quantity of material used per minute entering the flow stream.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("EndMaterialUsedRate")]
        public List<StimMaterialQuantity> EndMaterialUsedRate {
            get {
                return EndMaterialUsedRateField;
            } 
            set {
                EndMaterialUsedRateField = value;
                NotifyPropertyChanged("EndMaterialUsedRate");
            }
        }

         /// <summary>
         /// bool to indicate if EndMaterialUsedRate has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EndMaterialUsedRateSpecified
         {
             get {
             if(EndMaterialUsedRateField!=null)
                 return EndMaterialUsedRateField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> EndMaterialUsedRateField; 

        /// <summary>
        /// EndMaterialUsedRateBottomhole property
        /// </summary>
		[Description("Ending quantity of material used per minute at bottomhole.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("EndMaterialUsedRateBottomhole")]
        public List<StimMaterialQuantity> EndMaterialUsedRateBottomhole {
            get {
                return EndMaterialUsedRateBottomholeField;
            } 
            set {
                EndMaterialUsedRateBottomholeField = value;
                NotifyPropertyChanged("EndMaterialUsedRateBottomhole");
            }
        }

         /// <summary>
         /// bool to indicate if EndMaterialUsedRateBottomhole has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EndMaterialUsedRateBottomholeSpecified
         {
             get {
             if(EndMaterialUsedRateBottomholeField!=null)
                 return EndMaterialUsedRateBottomholeField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> EndMaterialUsedRateBottomholeField; 

        /// <summary>
        /// EndPresBottomhole property
        /// </summary>
		[Description("Final bottomhole pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("EndPresBottomhole")]
        public PressureMeasure EndPresBottomhole {
            get {
                return EndPresBottomholeField;
            } 
            set {
                EndPresBottomholeField = value;
                NotifyPropertyChanged("EndPresBottomhole");
            }
        }

        private PressureMeasure EndPresBottomholeField; 

        /// <summary>
        /// EndPresSurface property
        /// </summary>
		[Description("Final surface pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("EndPresSurface")]
        public PressureMeasure EndPresSurface {
            get {
                return EndPresSurfaceField;
            } 
            set {
                EndPresSurfaceField = value;
                NotifyPropertyChanged("EndPresSurface");
            }
        }

        private PressureMeasure EndPresSurfaceField; 

        /// <summary>
        /// EndProppantConcBottomhole property
        /// </summary>
		[Description("The final proppant concentration at bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("EndProppantConcBottomhole")]
        public MassPerVolumeMeasure EndProppantConcBottomhole {
            get {
                return EndProppantConcBottomholeField;
            } 
            set {
                EndProppantConcBottomholeField = value;
                NotifyPropertyChanged("EndProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure EndProppantConcBottomholeField; 

        /// <summary>
        /// EndProppantConcSurface property
        /// </summary>
		[Description("The final proppant concentration at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("EndProppantConcSurface")]
        public MassPerVolumeMeasure EndProppantConcSurface {
            get {
                return EndProppantConcSurfaceField;
            } 
            set {
                EndProppantConcSurfaceField = value;
                NotifyPropertyChanged("EndProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure EndProppantConcSurfaceField; 

        /// <summary>
        /// EndRateSurfaceCO2 property
        /// </summary>
		[Description("Final CO2 pump rate in volume per time at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("EndRateSurfaceCO2")]
        public VolumePerTimeMeasure EndRateSurfaceCO2 {
            get {
                return EndRateSurfaceCO2Field;
            } 
            set {
                EndRateSurfaceCO2Field = value;
                NotifyPropertyChanged("EndRateSurfaceCO2");
            }
        }

        private VolumePerTimeMeasure EndRateSurfaceCO2Field; 

        /// <summary>
        /// EndStdRateSurfaceN2 property
        /// </summary>
		[Description("Final nitrogen pump rate in volume per time at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("EndStdRateSurfaceN2")]
        public VolumePerTimeMeasure EndStdRateSurfaceN2 {
            get {
                return EndStdRateSurfaceN2Field;
            } 
            set {
                EndStdRateSurfaceN2Field = value;
                NotifyPropertyChanged("EndStdRateSurfaceN2");
            }
        }

        private VolumePerTimeMeasure EndStdRateSurfaceN2Field; 

        /// <summary>
        /// FluidVolBase property
        /// </summary>
		[Description("The step volume of the base step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FluidVolBase")]
        public VolumeMeasure FluidVolBase {
            get {
                return FluidVolBaseField;
            } 
            set {
                FluidVolBaseField = value;
                NotifyPropertyChanged("FluidVolBase");
            }
        }

        private VolumeMeasure FluidVolBaseField; 

        /// <summary>
        /// FluidVolCirculated property
        /// </summary>
		[Description("Fluid volume circulated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FluidVolCirculated")]
        public VolumeMeasure FluidVolCirculated {
            get {
                return FluidVolCirculatedField;
            } 
            set {
                FluidVolCirculatedField = value;
                NotifyPropertyChanged("FluidVolCirculated");
            }
        }

        private VolumeMeasure FluidVolCirculatedField; 

        /// <summary>
        /// FluidVolPumped property
        /// </summary>
		[Description("Fluid volume pumped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FluidVolPumped")]
        public VolumeMeasure FluidVolPumped {
            get {
                return FluidVolPumpedField;
            } 
            set {
                FluidVolPumpedField = value;
                NotifyPropertyChanged("FluidVolPumped");
            }
        }

        private VolumeMeasure FluidVolPumpedField; 

        /// <summary>
        /// FluidVolReturned property
        /// </summary>
		[Description("Fluid volume returned.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FluidVolReturned")]
        public VolumeMeasure FluidVolReturned {
            get {
                return FluidVolReturnedField;
            } 
            set {
                FluidVolReturnedField = value;
                NotifyPropertyChanged("FluidVolReturned");
            }
        }

        private VolumeMeasure FluidVolReturnedField; 

        /// <summary>
        /// FluidVolSlurry property
        /// </summary>
		[Description("The volume of the slurry (dirty) step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FluidVolSlurry")]
        public VolumeMeasure FluidVolSlurry {
            get {
                return FluidVolSlurryField;
            } 
            set {
                FluidVolSlurryField = value;
                NotifyPropertyChanged("FluidVolSlurry");
            }
        }

        private VolumeMeasure FluidVolSlurryField; 

        /// <summary>
        /// FluidVolSqueezed property
        /// </summary>
		[Description("Fluid volume squeezed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FluidVolSqueezed")]
        public VolumeMeasure FluidVolSqueezed {
            get {
                return FluidVolSqueezedField;
            } 
            set {
                FluidVolSqueezedField = value;
                NotifyPropertyChanged("FluidVolSqueezed");
            }
        }

        private VolumeMeasure FluidVolSqueezedField; 

        /// <summary>
        /// FluidVolWashed property
        /// </summary>
		[Description("Fluid volume washed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FluidVolWashed")]
        public VolumeMeasure FluidVolWashed {
            get {
                return FluidVolWashedField;
            } 
            set {
                FluidVolWashedField = value;
                NotifyPropertyChanged("FluidVolWashed");
            }
        }

        private VolumeMeasure FluidVolWashedField; 

        /// <summary>
        /// FractureGradientFinal property
        /// </summary>
		[Description("The fracture gradient when the step ends.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeMeasure")]
		[XmlElement("FractureGradientFinal")]
        public ForcePerVolumeMeasure FractureGradientFinal {
            get {
                return FractureGradientFinalField;
            } 
            set {
                FractureGradientFinalField = value;
                NotifyPropertyChanged("FractureGradientFinal");
            }
        }

        private ForcePerVolumeMeasure FractureGradientFinalField; 

        /// <summary>
        /// FractureGradientInitial property
        /// </summary>
		[Description("The fracture gradient before starting the step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeMeasure")]
		[XmlElement("FractureGradientInitial")]
        public ForcePerVolumeMeasure FractureGradientInitial {
            get {
                return FractureGradientInitialField;
            } 
            set {
                FractureGradientInitialField = value;
                NotifyPropertyChanged("FractureGradientInitial");
            }
        }

        private ForcePerVolumeMeasure FractureGradientInitialField; 

        /// <summary>
        /// FrictionFactor property
        /// </summary>
		[Description("Numeric value used to scale a calculated rheological friction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("FrictionFactor")]
        public DimensionlessMeasure FrictionFactor {
            get {
                return FrictionFactorField;
            } 
            set {
                FrictionFactorField = value;
                NotifyPropertyChanged("FrictionFactor");
            }
        }

        private DimensionlessMeasure FrictionFactorField; 

        /// <summary>
        /// MaxHydraulicPower property
        /// </summary>
		[Description("Maximum hydraulic power used during the step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("MaxHydraulicPower")]
        public PowerMeasure MaxHydraulicPower {
            get {
                return MaxHydraulicPowerField;
            } 
            set {
                MaxHydraulicPowerField = value;
                NotifyPropertyChanged("MaxHydraulicPower");
            }
        }

        private PowerMeasure MaxHydraulicPowerField; 

        /// <summary>
        /// MaxPresSurface property
        /// </summary>
		[Description("Maximum pumping pressure on surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("MaxPresSurface")]
        public PressureMeasure MaxPresSurface {
            get {
                return MaxPresSurfaceField;
            } 
            set {
                MaxPresSurfaceField = value;
                NotifyPropertyChanged("MaxPresSurface");
            }
        }

        private PressureMeasure MaxPresSurfaceField; 

        /// <summary>
        /// MaxProppantConcBottomhole property
        /// </summary>
		[Description("Maximum proppant concentration at bottomhole during the stimulation step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("MaxProppantConcBottomhole")]
        public MassPerVolumeMeasure MaxProppantConcBottomhole {
            get {
                return MaxProppantConcBottomholeField;
            } 
            set {
                MaxProppantConcBottomholeField = value;
                NotifyPropertyChanged("MaxProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure MaxProppantConcBottomholeField; 

        /// <summary>
        /// MaxProppantConcSurface property
        /// </summary>
		[Description("Maximum proppant concentration at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("MaxProppantConcSurface")]
        public MassPerVolumeMeasure MaxProppantConcSurface {
            get {
                return MaxProppantConcSurfaceField;
            } 
            set {
                MaxProppantConcSurfaceField = value;
                NotifyPropertyChanged("MaxProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure MaxProppantConcSurfaceField; 

        /// <summary>
        /// MaxSlurryPropConc property
        /// </summary>
		[Description("Maximum proppant concentration exiting the equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("MaxSlurryPropConc")]
        public MassPerVolumeMeasure MaxSlurryPropConc {
            get {
                return MaxSlurryPropConcField;
            } 
            set {
                MaxSlurryPropConcField = value;
                NotifyPropertyChanged("MaxSlurryPropConc");
            }
        }

        private MassPerVolumeMeasure MaxSlurryPropConcField; 

        /// <summary>
        /// MaxVolumeRateWellhead property
        /// </summary>
		[Description("Maximum volume per minute at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("MaxVolumeRateWellhead")]
        public VolumePerTimeMeasure MaxVolumeRateWellhead {
            get {
                return MaxVolumeRateWellheadField;
            } 
            set {
                MaxVolumeRateWellheadField = value;
                NotifyPropertyChanged("MaxVolumeRateWellhead");
            }
        }

        private VolumePerTimeMeasure MaxVolumeRateWellheadField; 

        /// <summary>
        /// PipeFrictionPressure property
        /// </summary>
		[Description("The friction pressure contribution from pipes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PipeFrictionPressure")]
        public PressureMeasure PipeFrictionPressure {
            get {
                return PipeFrictionPressureField;
            } 
            set {
                PipeFrictionPressureField = value;
                NotifyPropertyChanged("PipeFrictionPressure");
            }
        }

        private PressureMeasure PipeFrictionPressureField; 

        /// <summary>
        /// PumpTime property
        /// </summary>
		[Description("Total pumping time for the step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("PumpTime")]
        public TimeMeasure PumpTime {
            get {
                return PumpTimeField;
            } 
            set {
                PumpTimeField = value;
                NotifyPropertyChanged("PumpTime");
            }
        }

        private TimeMeasure PumpTimeField; 

        /// <summary>
        /// StartDirtyMaterialRate property
        /// </summary>
		[Description("Starting dirty fluid volume per minute.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("StartDirtyMaterialRate")]
        public VolumePerTimeMeasure StartDirtyMaterialRate {
            get {
                return StartDirtyMaterialRateField;
            } 
            set {
                StartDirtyMaterialRateField = value;
                NotifyPropertyChanged("StartDirtyMaterialRate");
            }
        }

        private VolumePerTimeMeasure StartDirtyMaterialRateField; 

        /// <summary>
        /// StartMaterialUsedRate property
        /// </summary>
		[Description("Starting quantity of material used per minute entering the flow stream.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("StartMaterialUsedRate")]
        public List<StimMaterialQuantity> StartMaterialUsedRate {
            get {
                return StartMaterialUsedRateField;
            } 
            set {
                StartMaterialUsedRateField = value;
                NotifyPropertyChanged("StartMaterialUsedRate");
            }
        }

         /// <summary>
         /// bool to indicate if StartMaterialUsedRate has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StartMaterialUsedRateSpecified
         {
             get {
             if(StartMaterialUsedRateField!=null)
                 return StartMaterialUsedRateField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> StartMaterialUsedRateField; 

        /// <summary>
        /// StartMaterialUsedRateBottomHole property
        /// </summary>
		[Description("Starting quantity of material used per minute at bottomhole.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("StartMaterialUsedRateBottomHole")]
        public List<StimMaterialQuantity> StartMaterialUsedRateBottomHole {
            get {
                return StartMaterialUsedRateBottomHoleField;
            } 
            set {
                StartMaterialUsedRateBottomHoleField = value;
                NotifyPropertyChanged("StartMaterialUsedRateBottomHole");
            }
        }

         /// <summary>
         /// bool to indicate if StartMaterialUsedRateBottomHole has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StartMaterialUsedRateBottomHoleSpecified
         {
             get {
             if(StartMaterialUsedRateBottomHoleField!=null)
                 return StartMaterialUsedRateBottomHoleField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> StartMaterialUsedRateBottomHoleField; 

        /// <summary>
        /// StartPresBottomhole property
        /// </summary>
		[Description("Starting bottomhole pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StartPresBottomhole")]
        public PressureMeasure StartPresBottomhole {
            get {
                return StartPresBottomholeField;
            } 
            set {
                StartPresBottomholeField = value;
                NotifyPropertyChanged("StartPresBottomhole");
            }
        }

        private PressureMeasure StartPresBottomholeField; 

        /// <summary>
        /// StartPresSurface property
        /// </summary>
		[Description("Starting surface pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StartPresSurface")]
        public PressureMeasure StartPresSurface {
            get {
                return StartPresSurfaceField;
            } 
            set {
                StartPresSurfaceField = value;
                NotifyPropertyChanged("StartPresSurface");
            }
        }

        private PressureMeasure StartPresSurfaceField; 

        /// <summary>
        /// StartProppantConcBottomhole property
        /// </summary>
		[Description("The beginning proppant concentration at bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("StartProppantConcBottomhole")]
        public MassPerVolumeMeasure StartProppantConcBottomhole {
            get {
                return StartProppantConcBottomholeField;
            } 
            set {
                StartProppantConcBottomholeField = value;
                NotifyPropertyChanged("StartProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure StartProppantConcBottomholeField; 

        /// <summary>
        /// StartProppantConcSurface property
        /// </summary>
		[Description("The beginning proppant concentration at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("StartProppantConcSurface")]
        public MassPerVolumeMeasure StartProppantConcSurface {
            get {
                return StartProppantConcSurfaceField;
            } 
            set {
                StartProppantConcSurfaceField = value;
                NotifyPropertyChanged("StartProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure StartProppantConcSurfaceField; 

        /// <summary>
        /// WellheadVol property
        /// </summary>
		[Description("Slurry volume entering the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("WellheadVol")]
        public VolumeMeasure WellheadVol {
            get {
                return WellheadVolField;
            } 
            set {
                WellheadVolField = value;
                NotifyPropertyChanged("WellheadVol");
            }
        }

        private VolumeMeasure WellheadVolField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// MaterialUsed property
        /// </summary>
		[Description("Material used during the step")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("MaterialUsed")]
        public List<StimMaterialQuantity> MaterialUsed {
            get {
                return MaterialUsedField;
            } 
            set {
                MaterialUsedField = value;
                NotifyPropertyChanged("MaterialUsed");
            }
        }

         /// <summary>
         /// bool to indicate if MaterialUsed has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MaterialUsedSpecified
         {
             get {
             if(MaterialUsedField!=null)
                 return MaterialUsedField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> MaterialUsedField; 

        /// <summary>
        /// MaxMaterialUsedRate property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("MaxMaterialUsedRate")]
        public List<StimMaterialQuantity> MaxMaterialUsedRate {
            get {
                return MaxMaterialUsedRateField;
            } 
            set {
                MaxMaterialUsedRateField = value;
                NotifyPropertyChanged("MaxMaterialUsedRate");
            }
        }

         /// <summary>
         /// bool to indicate if MaxMaterialUsedRate has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MaxMaterialUsedRateSpecified
         {
             get {
             if(MaxMaterialUsedRateField!=null)
                 return MaxMaterialUsedRateField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> MaxMaterialUsedRateField; 

        /// <summary>
        /// Fluid property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StimFluid")]
		[XmlElement("Fluid")]
        public StimFluid Fluid {
            get {
                return FluidField;
            } 
            set {
                FluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

        private StimFluid FluidField; 

		/// <summary>
        /// Unique identifier for this instance of StimJobStep.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimJobStep.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PowerMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PowerMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PowerMeasure xsd type.")]
    public partial class PowerMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PowerMeasure class.
        /// </summary>
        public PowerMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PowerMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PowerMeasure(double value, PowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PowerUom")]
        [XmlAttribute("uom")]
		
        public PowerUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PowerUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeMeasure xsd type.")]
    public partial class TimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        public TimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public TimeMeasure(double value, TimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "TimeUom")]
        [XmlAttribute("uom")]
		
        public TimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private TimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimEvent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimEvent", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimEvent xsd type.")]
    public partial class StimEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Event number.
        /// </summary>
		[Required]
        [Description("Event number.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("Number")]
        public long? Number {
            get {
                return NumberField;
            } 
            set {
                NumberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private long? NumberField; 

        /// <summary>
        /// Date and time of this event.
        /// </summary>
		[Description("Date and time of this event.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// A short description of the event.
        /// </summary>
		[StringLength(2000)]
        [Description("A short description of the event.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// Step number. Use it to reference an existing job step entry.
        /// </summary>
		[Description("Step number. Use it to reference an existing job step entry.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("NumStep")]
        public long? NumStep {
            get {
                return NumStepField;
            } 
            set {
                NumStepField = value;
                 this.NumStepSpecified = true;
                NotifyPropertyChanged("NumStep");
            }
        }

        private long? NumStepField; 

        /// <summary>
        /// NumStepSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumStepSpecified {
            get {
                return NumStepSpecifiedField;
            } 
            set {
                NumStepSpecifiedField = value;
                NotifyPropertyChanged("NumStepSpecified");
            }
        }

        private bool NumStepSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of StimEvent.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimEvent.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimShutInPressure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimShutInPressure", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimShutInPressure xsd type.")]
    public partial class StimShutInPressure : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The shut-in pressure.
        /// </summary>
		[Required]
        [Description("The shut-in pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Pressure")]
        public PressureMeasure Pressure {
            get {
                return PressureField;
            } 
            set {
                PressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure PressureField; 

        /// <summary>
        /// The time span after shut in at which the pressure was measured.
        /// </summary>
		[Required]
        [Description("The time span after shut in at which the pressure was measured.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("TimeAfterShutin")]
        public TimeMeasure TimeAfterShutin {
            get {
                return TimeAfterShutinField;
            } 
            set {
                TimeAfterShutinField = value;
                NotifyPropertyChanged("TimeAfterShutin");
            }
        }

        private TimeMeasure TimeAfterShutinField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of StimShutInPressure.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimShutInPressure.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimPumpFlowBackTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimPumpFlowBackTest", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimPumpFlowBackTest xsd type.")]
    public partial class StimPumpFlowBackTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Description("End time for the test.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        
        private bool DateTimeEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DateTimeEndSpecifiedField;
            } 
            set {
                DateTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }
        
        private Timestamp? DTimEndField; 

        /// <summary>
        /// FlowBackVolume property
        /// </summary>
		[Description("Total volume recovered during a flow back test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FlowBackVolume")]
        public VolumeMeasure FlowBackVolume {
            get {
                return FlowBackVolumeField;
            } 
            set {
                FlowBackVolumeField = value;
                NotifyPropertyChanged("FlowBackVolume");
            }
        }

        private VolumeMeasure FlowBackVolumeField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("Start time for the test.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// FractureCloseDuration property
        /// </summary>
		[Description("The time required for the fracture width to become zero.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("FractureCloseDuration")]
        public TimeMeasure FractureCloseDuration {
            get {
                return FractureCloseDurationField;
            } 
            set {
                FractureCloseDurationField = value;
                NotifyPropertyChanged("FractureCloseDuration");
            }
        }

        private TimeMeasure FractureCloseDurationField; 

        /// <summary>
        /// PresCasing property
        /// </summary>
		[Description("Casing pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresCasing")]
        public PressureMeasure PresCasing {
            get {
                return PresCasingField;
            } 
            set {
                PresCasingField = value;
                NotifyPropertyChanged("PresCasing");
            }
        }

        private PressureMeasure PresCasingField; 

        /// <summary>
        /// PresTubing property
        /// </summary>
		[Description("Tubing pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresTubing")]
        public PressureMeasure PresTubing {
            get {
                return PresTubingField;
            } 
            set {
                PresTubingField = value;
                NotifyPropertyChanged("PresTubing");
            }
        }

        private PressureMeasure PresTubingField; 

        /// <summary>
        /// FractureClosePres property
        /// </summary>
		[Description("The pressure when the fracture width becomes zero.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FractureClosePres")]
        public PressureMeasure FractureClosePres {
            get {
                return FractureClosePresField;
            } 
            set {
                FractureClosePresField = value;
                NotifyPropertyChanged("FractureClosePres");
            }
        }

        private PressureMeasure FractureClosePresField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Step property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimPumpFlowBackTestStep")]
		[XmlElement("Step")]
        public List<StimPumpFlowBackTestStep> Step {
            get {
                return StepField;
            } 
            set {
                StepField = value;
                NotifyPropertyChanged("Step");
            }
        }

         /// <summary>
         /// bool to indicate if Step has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StepSpecified
         {
             get {
             if(StepField!=null)
                 return StepField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimPumpFlowBackTestStep> StepField; 

		/// <summary>
        /// Unique identifier for this instance of StimPumpFlowBackTest.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimPumpFlowBackTest.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimPumpFlowBackTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimPumpFlowBackTestStep", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimPumpFlowBackTestStep xsd type.")]
    public partial class StimPumpFlowBackTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Time stamp of the pressure measurement.
        /// </summary>
		[Description("Time stamp of the pressure measurement.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Volume of flowback since the start of the test.
        /// </summary>
		[Description("Volume of flowback since the start of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FlowbackVolume")]
        public VolumeMeasure FlowbackVolume {
            get {
                return FlowbackVolumeField;
            } 
            set {
                FlowbackVolumeField = value;
                NotifyPropertyChanged("FlowbackVolume");
            }
        }

        private VolumeMeasure FlowbackVolumeField; 

        /// <summary>
        /// Flowback rate.
        /// </summary>
		[Description("Flowback rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowbackVolumeRate")]
        public VolumePerTimeMeasure FlowbackVolumeRate {
            get {
                return FlowbackVolumeRateField;
            } 
            set {
                FlowbackVolumeRateField = value;
                NotifyPropertyChanged("FlowbackVolumeRate");
            }
        }

        private VolumePerTimeMeasure FlowbackVolumeRateField; 

        /// <summary>
        /// The number of the step. Identifies the step within the step down test.
        /// </summary>
		[Required]
        [Description("The number of the step. Identifies the step within the step down test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("Number")]
        public long? Number {
            get {
                return NumberField;
            } 
            set {
                NumberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private long? NumberField; 

        /// <summary>
        /// Bottomhole flow rate for the specific step.
        /// </summary>
		[Description("Bottomhole flow rate for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("BottomholeRate")]
        public VolumePerTimeMeasure BottomholeRate {
            get {
                return BottomholeRateField;
            } 
            set {
                BottomholeRateField = value;
                NotifyPropertyChanged("BottomholeRate");
            }
        }

        private VolumePerTimeMeasure BottomholeRateField; 

        /// <summary>
        /// Surface pressure measured for the specific step.
        /// </summary>
		[Description("Surface pressure measured for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Pres")]
        public PressureMeasure Pres {
            get {
                return PresField;
            } 
            set {
                PresField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure PresField; 

        /// <summary>
        /// Calculated pipe friction for the specific step.
        /// </summary>
		[Description("Calculated pipe friction for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PipeFriction")]
        public PressureMeasure PipeFriction {
            get {
                return PipeFrictionField;
            } 
            set {
                PipeFrictionField = value;
                NotifyPropertyChanged("PipeFriction");
            }
        }

        private PressureMeasure PipeFrictionField; 

        /// <summary>
        /// Calculated entry friction accounting for perforation and near wellbore restrictions for the specific step.
        /// </summary>
		[Description("Calculated entry friction accounting for perforation and near wellbore restrictions for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("EntryFriction")]
        public PressureMeasure EntryFriction {
            get {
                return EntryFrictionField;
            } 
            set {
                EntryFrictionField = value;
                NotifyPropertyChanged("EntryFriction");
            }
        }

        private PressureMeasure EntryFrictionField; 

        /// <summary>
        /// Calculated perforation friction for the specific step.
        /// </summary>
		[Description("Calculated perforation friction for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PerfFriction")]
        public PressureMeasure PerfFriction {
            get {
                return PerfFrictionField;
            } 
            set {
                PerfFrictionField = value;
                NotifyPropertyChanged("PerfFriction");
            }
        }

        private PressureMeasure PerfFrictionField; 

        /// <summary>
        /// Calculated near-wellbore friction loss.
        /// </summary>
		[Description("Calculated near-wellbore friction loss.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("NearWellboreFriction")]
        public PressureMeasure NearWellboreFriction {
            get {
                return NearWellboreFrictionField;
            } 
            set {
                NearWellboreFrictionField = value;
                NotifyPropertyChanged("NearWellboreFriction");
            }
        }

        private PressureMeasure NearWellboreFrictionField; 

        /// <summary>
        /// Surface rate entering the well for the specific step.
        /// </summary>
		[Description("Surface rate entering the well for the specific step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("SurfaceRate")]
        public VolumePerTimeMeasure SurfaceRate {
            get {
                return SurfaceRateField;
            } 
            set {
                SurfaceRateField = value;
                NotifyPropertyChanged("SurfaceRate");
            }
        }

        private VolumePerTimeMeasure SurfaceRateField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of StimPumpFlowBackTestStep.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimPumpFlowBackTestStep.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimPressureFlowRate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimPressureFlowRate", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimPressureFlowRate xsd type.")]
    public partial class StimPressureFlowRate : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure of the step test.
        /// </summary>
		[Description("The pressure of the step test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Pressure")]
        public PressureMeasure Pressure {
            get {
                return PressureField;
            } 
            set {
                PressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure PressureField; 

        /// <summary>
        /// The flow of the fluid at the bottomhole.
        /// </summary>
		[Description("The flow of the fluid at the bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("BottomholeRate")]
        public VolumePerTimeMeasure BottomholeRate {
            get {
                return BottomholeRateField;
            } 
            set {
                BottomholeRateField = value;
                NotifyPropertyChanged("BottomholeRate");
            }
        }

        private VolumePerTimeMeasure BottomholeRateField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of StimPressureFlowRate.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimPressureFlowRate.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimStepTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimStepTest", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimStepTest xsd type.")]
    public partial class StimStepTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure necessary to extend the fracture once initiated. The fracture extension pressure may rise slightly with increasing fracture length and/or height because of friction pressure drop down the length of the fracture.
        /// </summary>
		[Description("The pressure necessary to extend the fracture once initiated.  The fracture extension pressure may rise slightly with increasing fracture length and/or height because of friction pressure drop down the length of the fracture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FractureExtensionPres")]
        public PressureMeasure FractureExtensionPres {
            get {
                return FractureExtensionPresField;
            } 
            set {
                FractureExtensionPresField = value;
                NotifyPropertyChanged("FractureExtensionPres");
            }
        }

        private PressureMeasure FractureExtensionPresField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// A pressure and fluid rate data reading.
        /// </summary>
		[Description("A pressure and fluid rate data reading.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimPressureFlowRate")]
		[XmlElement("PresMeasurement")]
        public List<StimPressureFlowRate> PresMeasurement {
            get {
                return PresMeasurementField;
            } 
            set {
                PresMeasurementField = value;
                NotifyPropertyChanged("PresMeasurement");
            }
        }

         /// <summary>
         /// bool to indicate if PresMeasurement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PresMeasurementSpecified
         {
             get {
             if(PresMeasurementField!=null)
                 return PresMeasurementField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimPressureFlowRate> PresMeasurementField; 

		/// <summary>
        /// Unique identifier for this instance of StimStepTest.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimStepTest.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimStepDownTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimStepDownTest", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimStepDownTest xsd type.")]
    public partial class StimStepDownTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The initial shutin pressure.
        /// </summary>
		[Description("The initial shutin pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("InitialShutinPres")]
        public PressureMeasure InitialShutinPres {
            get {
                return InitialShutinPresField;
            } 
            set {
                InitialShutinPresField = value;
                NotifyPropertyChanged("InitialShutinPres");
            }
        }

        private PressureMeasure InitialShutinPresField; 

        /// <summary>
        /// The density of the fluid at the bottom of the hole adjusting for bottomhole temperature and pressure during the step-down test.
        /// </summary>
		[Description("The density of the fluid at the bottom of the hole adjusting for bottomhole temperature and pressure during the step-down test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("BottomholeFluidDensity")]
        public MassPerVolumeMeasure BottomholeFluidDensity {
            get {
                return BottomholeFluidDensityField;
            } 
            set {
                BottomholeFluidDensityField = value;
                NotifyPropertyChanged("BottomholeFluidDensity");
            }
        }

        private MassPerVolumeMeasure BottomholeFluidDensityField; 

        /// <summary>
        /// Diameter of the injection point or perforation.
        /// </summary>
		[Description("Diameter of the injection point or perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiameterEntryHole")]
        public LengthMeasure DiameterEntryHole {
            get {
                return DiameterEntryHoleField;
            } 
            set {
                DiameterEntryHoleField = value;
                NotifyPropertyChanged("DiameterEntryHole");
            }
        }

        private LengthMeasure DiameterEntryHoleField; 

        /// <summary>
        /// The number of perforations in the interval being tested.
        /// </summary>
		[Description("The number of perforations in the interval being tested.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("PerforationCount")]
        public long? PerforationCount {
            get {
                return PerforationCountField;
            } 
            set {
                PerforationCountField = value;
                 this.PerforationCountSpecified = true;
                NotifyPropertyChanged("PerforationCount");
            }
        }

        private long? PerforationCountField; 

        /// <summary>
        /// PerforationCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerforationCountSpecified {
            get {
                return PerforationCountSpecifiedField;
            } 
            set {
                PerforationCountSpecifiedField = value;
                NotifyPropertyChanged("PerforationCountSpecified");
            }
        }

        private bool PerforationCountSpecifiedField; 

        /// <summary>
        /// A coefficient used in the equation for calculation of the pressure drop across a perforation set.
        /// </summary>
		[Description("A coefficient used in the equation for calculation of the pressure drop across a perforation set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("DischargeCoefficient")]
        public DimensionlessMeasure DischargeCoefficient {
            get {
                return DischargeCoefficientField;
            } 
            set {
                DischargeCoefficientField = value;
                NotifyPropertyChanged("DischargeCoefficient");
            }
        }

        private DimensionlessMeasure DischargeCoefficientField; 

        /// <summary>
        /// The number of perforations in the interval being tested that are calculated to be open to injection, which is determined during the step-down test.
        /// </summary>
		[Description("The number of perforations in the interval being tested that are  calculated to be open to injection, which is determined during the step-down test.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("EffectivePerfs")]
        public long? EffectivePerfs {
            get {
                return EffectivePerfsField;
            } 
            set {
                EffectivePerfsField = value;
                 this.EffectivePerfsSpecified = true;
                NotifyPropertyChanged("EffectivePerfs");
            }
        }

        private long? EffectivePerfsField; 

        /// <summary>
        /// EffectivePerfsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EffectivePerfsSpecified {
            get {
                return EffectivePerfsSpecifiedField;
            } 
            set {
                EffectivePerfsSpecifiedField = value;
                NotifyPropertyChanged("EffectivePerfsSpecified");
            }
        }

        private bool EffectivePerfsSpecifiedField; 

        /// <summary>
        /// The data related to a particular step in the step-down test.
        /// </summary>
		[Description("The data related to a particular step in the step-down test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimPumpFlowBackTestStep")]
		[XmlElement("Step")]
        public List<StimPumpFlowBackTestStep> Step {
            get {
                return StepField;
            } 
            set {
                StepField = value;
                NotifyPropertyChanged("Step");
            }
        }

         /// <summary>
         /// bool to indicate if Step has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StepSpecified
         {
             get {
             if(StepField!=null)
                 return StepField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimPumpFlowBackTestStep> StepField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of StimStepDownTest
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimStepDownTest")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimFetTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimFetTest", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimFetTest xsd type.")]
    public partial class StimFetTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// An analysis method used for this FET.
        /// </summary>
		[Description("An analysis method used for this FET.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimFetTestAnalysisMethod")]
		[XmlElement("AnalysisMethod")]
        public List<StimFetTestAnalysisMethod> AnalysisMethod {
            get {
                return AnalysisMethodField;
            } 
            set {
                AnalysisMethodField = value;
                NotifyPropertyChanged("AnalysisMethod");
            }
        }

         /// <summary>
         /// bool to indicate if AnalysisMethod has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnalysisMethodSpecified
         {
             get {
             if(AnalysisMethodField!=null)
                 return AnalysisMethodField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimFetTestAnalysisMethod> AnalysisMethodField; 

        /// <summary>
        /// Start time for the FET.
        /// </summary>
		[Description("Start time for the FET.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// End time for the FET.
        /// </summary>
		[Description("End time for the FET.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        
        private bool DateTimeEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DateTimeEndSpecifiedField;
            } 
            set {
                DateTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }
        
        private Timestamp? DTimEndField; 

        /// <summary>
        /// The end of the pressure-dependent leak-off portion of the FET.
        /// </summary>
		[Description("The end of the pressure-dependent leak-off portion of the FET.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("EndPdlDuration")]
        public TimeMeasure EndPdlDuration {
            get {
                return EndPdlDurationField;
            } 
            set {
                EndPdlDurationField = value;
                NotifyPropertyChanged("EndPdlDuration");
            }
        }

        private TimeMeasure EndPdlDurationField; 

        /// <summary>
        /// A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.
        /// </summary>
		[Description("A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("FluidEfficiency")]
        public VolumePerVolumeMeasure FluidEfficiency {
            get {
                return FluidEfficiencyField;
            } 
            set {
                FluidEfficiencyField = value;
                NotifyPropertyChanged("FluidEfficiency");
            }
        }

        private VolumePerVolumeMeasure FluidEfficiencyField; 

        /// <summary>
        /// The time at which the fracture effectively closes without proppant in place.
        /// </summary>
		[Description("The time at which the fracture effectively closes without proppant in place.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("FractureCloseDuration")]
        public TimeMeasure FractureCloseDuration {
            get {
                return FractureCloseDurationField;
            } 
            set {
                FractureCloseDurationField = value;
                NotifyPropertyChanged("FractureCloseDuration");
            }
        }

        private TimeMeasure FractureCloseDurationField; 

        /// <summary>
        /// The pressure at which the fracture effectively closes without proppant in place.
        /// </summary>
		[Description("The pressure at which the fracture effectively closes without proppant in place.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FractureClosePres")]
        public PressureMeasure FractureClosePres {
            get {
                return FractureClosePresField;
            } 
            set {
                FractureClosePresField = value;
                NotifyPropertyChanged("FractureClosePres");
            }
        }

        private PressureMeasure FractureClosePresField; 

        /// <summary>
        /// The fracture pressure limit for an unfractured formation is the fracture initiation pressure. This is typically considered the upper bound for the minimum horizontal stress or closure pressure. A step-rate test is used to determine the fracture extension pressure.
        /// </summary>
		[Description("The fracture pressure limit for an unfractured formation is the fracture initiation pressure. This is typically considered the upper bound for the minimum horizontal stress or closure pressure. A step-rate test is used to determine the fracture extension pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FractureExtensionPres")]
        public PressureMeasure FractureExtensionPres {
            get {
                return FractureExtensionPresField;
            } 
            set {
                FractureExtensionPresField = value;
                NotifyPropertyChanged("FractureExtensionPres");
            }
        }

        private PressureMeasure FractureExtensionPresField; 

        /// <summary>
        /// The fracture gradient.
        /// </summary>
		[Description("The fracture gradient.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeMeasure")]
		[XmlElement("FractureGradient")]
        public ForcePerVolumeMeasure FractureGradient {
            get {
                return FractureGradientField;
            } 
            set {
                FractureGradientField = value;
                NotifyPropertyChanged("FractureGradient");
            }
        }

        private ForcePerVolumeMeasure FractureGradientField; 

        /// <summary>
        /// The length of the fracture tip to tip; fracture half length is the length of one wing of a fracture from the wellbore to the tip.
        /// </summary>
		[Description("The length of the fracture tip to tip; fracture half length is the length of one wing of a fracture from the wellbore to the tip.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FractureLength")]
        public LengthMeasure FractureLength {
            get {
                return FractureLengthField;
            } 
            set {
                FractureLengthField = value;
                NotifyPropertyChanged("FractureLength");
            }
        }

        private LengthMeasure FractureLengthField; 

        /// <summary>
        /// The width of a fracture at the wellbore. Hydraulic frac width is generated by frac fluid viscosity and/or pump rate (i.e., horsepower).
        /// </summary>
		[Description("The width of a fracture at the wellbore. Hydraulic frac width is generated by frac fluid viscosity and/or pump rate (i.e., horsepower).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FractureWidth")]
        public LengthMeasure FractureWidth {
            get {
                return FractureWidthField;
            } 
            set {
                FractureWidthField = value;
                NotifyPropertyChanged("FractureWidth");
            }
        }

        private LengthMeasure FractureWidthField; 

        /// <summary>
        /// The difference between the fracture extension pressure and the pressure that exists in the fracture.
        /// </summary>
		[Description("The difference between the fracture extension pressure and the pressure that exists in the fracture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("NetPres")]
        public PressureMeasure NetPres {
            get {
                return NetPresField;
            } 
            set {
                NetPresField = value;
                NotifyPropertyChanged("NetPres");
            }
        }

        private PressureMeasure NetPresField; 

        /// <summary>
        /// The pressure dependent leak-off coefficient.
        /// </summary>
		[Description("The pressure dependent leak-off coefficient.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("PdlCoef")]
        public DimensionlessMeasure PdlCoef {
            get {
                return PdlCoefField;
            } 
            set {
                PdlCoefField = value;
                NotifyPropertyChanged("PdlCoef");
            }
        }

        private DimensionlessMeasure PdlCoefField; 

        /// <summary>
        /// The pressure of the liquids in the formation pores.
        /// </summary>
		[Description("The pressure of the liquids in the formation pores.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PorePres")]
        public PressureMeasure PorePres {
            get {
                return PorePresField;
            } 
            set {
                PorePresField = value;
                NotifyPropertyChanged("PorePres");
            }
        }

        private PressureMeasure PorePresField; 

        /// <summary>
        /// The Horner plot is used to determine if pseudo-radial flow developed during pressure decline. If a semi-log straight line is observed and the line can be extrapolated to a reasonable value of reservoir pressure, then radial or pseudo-radial flow may be affecting the decline behavior. This suggests that the fracture is already closed and that data beyond the point of influence need not be considered in the evaluation of closure.
        /// </summary>
		[Description("The Horner plot is used to determine if pseudo-radial flow developed during pressure decline.  If a semi-log straight line is observed and the line can be extrapolated to a reasonable value of reservoir pressure, then radial or pseudo-radial flow may be affecting the decline behavior.  This suggests that the fracture is already closed and that data beyond the point of influence need not be considered in the evaluation of closure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PseudoRadialPres")]
        public PressureMeasure PseudoRadialPres {
            get {
                return PseudoRadialPresField;
            } 
            set {
                PseudoRadialPresField = value;
                NotifyPropertyChanged("PseudoRadialPres");
            }
        }

        private PressureMeasure PseudoRadialPresField; 

        /// <summary>
        /// That permeability which remains after a fractured formation has closed, allowing the the formation fracture face to be pressurized before the fracture is mechanically reopened.
        /// </summary>
		[Description("That permeability which remains after a fractured formation has closed, allowing the the formation fracture face to be pressurized before the fracture is mechanically reopened.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PermeabilityRockMeasure")]
		[XmlElement("ResidualPermeability")]
        public PermeabilityRockMeasure ResidualPermeability {
            get {
                return ResidualPermeabilityField;
            } 
            set {
                ResidualPermeabilityField = value;
                NotifyPropertyChanged("ResidualPermeability");
            }
        }

        private PermeabilityRockMeasure ResidualPermeabilityField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of StimFetTest.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimFetTest.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumetricThermalExpansionMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumetricThermalExpansionMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumetricThermalExpansionMeasure xsd type.")]
    public partial class VolumetricThermalExpansionMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumetricThermalExpansionMeasure class.
        /// </summary>
        public VolumetricThermalExpansionMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumetricThermalExpansionMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumetricThermalExpansionMeasure(double value, VolumetricThermalExpansionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumetricThermalExpansionUom")]
        [XmlAttribute("uom")]
		
        public VolumetricThermalExpansionUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumetricThermalExpansionUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ThermalConductivityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ThermalConductivityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ThermalConductivityMeasure xsd type.")]
    public partial class ThermalConductivityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermalConductivityMeasure class.
        /// </summary>
        public ThermalConductivityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermalConductivityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermalConductivityMeasure(double value, ThermalConductivityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ThermalConductivityUom")]
        [XmlAttribute("uom")]
		
        public ThermalConductivityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermalConductivityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SpecificHeatCapacityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SpecificHeatCapacityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the SpecificHeatCapacityMeasure xsd type.")]
    public partial class SpecificHeatCapacityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SpecificHeatCapacityMeasure class.
        /// </summary>
        public SpecificHeatCapacityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the SpecificHeatCapacityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public SpecificHeatCapacityMeasure(double value, SpecificHeatCapacityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "SpecificHeatCapacityUom")]
        [XmlAttribute("uom")]
		
        public SpecificHeatCapacityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private SpecificHeatCapacityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StimJobDiagnosticSession xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StimJobDiagnosticSession", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StimJobDiagnosticSession xsd type.")]
    public partial class StimJobDiagnosticSession : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the session.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the session.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The number of this pumping diagnostics session.
        /// </summary>
		[Description("The number of this pumping diagnostics session.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("Number")]
        public long? Number {
            get {
                return NumberField;
            } 
            set {
                NumberField = value;
                 this.NumberSpecified = true;
                NotifyPropertyChanged("Number");
            }
        }

        private long? NumberField; 

        /// <summary>
        /// NumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumberSpecified {
            get {
                return NumberSpecifiedField;
            } 
            set {
                NumberSpecifiedField = value;
                NotifyPropertyChanged("NumberSpecified");
            }
        }

        private bool NumberSpecifiedField; 

        /// <summary>
        /// A description of the session.
        /// </summary>
		[StringLength(2000)]
        [Description("A description of the session.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// The size of the choke used during a flow back test.
        /// </summary>
		[Description("The size of the choke used during a flow back test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ChokeSize")]
        public LengthMeasure ChokeSize {
            get {
                return ChokeSizeField;
            } 
            set {
                ChokeSizeField = value;
                NotifyPropertyChanged("ChokeSize");
            }
        }

        private LengthMeasure ChokeSizeField; 

        /// <summary>
        /// The date and time pumping began.
        /// </summary>
		[Description("The date and time pumping began.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimPumpOn")]
        public Timestamp? DateTimePumpOn {
            get {
                return DTimPumpOnField;
            } 
            set {
                DTimPumpOnField = value;
                 this.DateTimePumpOnSpecified = true;
                NotifyPropertyChanged("DateTimePumpOn");
            }
        }

        
        private bool DateTimePumpOnSpecifiedField = false;
        
        /// <summary>
        /// DateTimePumpOnSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePumpOnSpecified {
            get {
                return DateTimePumpOnSpecifiedField;
            } 
            set {
                DateTimePumpOnSpecifiedField = value;
                NotifyPropertyChanged("DateTimePumpOnSpecified");
            }
        }
        
        private Timestamp? DTimPumpOnField; 

        /// <summary>
        /// The date and time pumping ended.
        /// </summary>
		[Description("The date and time pumping ended.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimPumpOff")]
        public Timestamp? DateTimePumpOff {
            get {
                return DTimPumpOffField;
            } 
            set {
                DTimPumpOffField = value;
                 this.DateTimePumpOffSpecified = true;
                NotifyPropertyChanged("DateTimePumpOff");
            }
        }

        
        private bool DateTimePumpOffSpecifiedField = false;
        
        /// <summary>
        /// DateTimePumpOffSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePumpOffSpecified {
            get {
                return DateTimePumpOffSpecifiedField;
            } 
            set {
                DateTimePumpOffSpecifiedField = value;
                NotifyPropertyChanged("DateTimePumpOffSpecified");
            }
        }
        
        private Timestamp? DTimPumpOffField; 

        /// <summary>
        /// The time between the shutin time and the pump on time.
        /// </summary>
		[Description("The time between the shutin time and the pump on time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("PumpDuration")]
        public TimeMeasure PumpDuration {
            get {
                return PumpDurationField;
            } 
            set {
                PumpDurationField = value;
                NotifyPropertyChanged("PumpDuration");
            }
        }

        private TimeMeasure PumpDurationField; 

        /// <summary>
        /// The date and time at which a well ceases flowing and the valves are closed.
        /// </summary>
		[Description("The date and time at which a well ceases flowing and the valves are closed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimWellShutin")]
        public Timestamp? DateTimeWellShutin {
            get {
                return DTimWellShutinField;
            } 
            set {
                DTimWellShutinField = value;
                 this.DateTimeWellShutinSpecified = true;
                NotifyPropertyChanged("DateTimeWellShutin");
            }
        }

        
        private bool DateTimeWellShutinSpecifiedField = false;
        
        /// <summary>
        /// DateTimeWellShutinSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeWellShutinSpecified {
            get {
                return DateTimeWellShutinSpecifiedField;
            } 
            set {
                DateTimeWellShutinSpecifiedField = value;
                NotifyPropertyChanged("DateTimeWellShutinSpecified");
            }
        }
        
        private Timestamp? DTimWellShutinField; 

        /// <summary>
        /// The date and time when the fluid in the fracture is completely leaked off into the formation and the fracture closes on its faces.
        /// </summary>
		[Description("The date and time when the fluid in the fracture is completely leaked off into the formation and the fracture closes on its faces.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimFractureClose")]
        public Timestamp? DateTimeFractureClose {
            get {
                return DTimFractureCloseField;
            } 
            set {
                DTimFractureCloseField = value;
                 this.DateTimeFractureCloseSpecified = true;
                NotifyPropertyChanged("DateTimeFractureClose");
            }
        }

        
        private bool DateTimeFractureCloseSpecifiedField = false;
        
        /// <summary>
        /// DateTimeFractureCloseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeFractureCloseSpecified {
            get {
                return DateTimeFractureCloseSpecifiedField;
            } 
            set {
                DateTimeFractureCloseSpecifiedField = value;
                NotifyPropertyChanged("DateTimeFractureCloseSpecified");
            }
        }
        
        private Timestamp? DTimFractureCloseField; 

        /// <summary>
        /// Average bottomhole treatment pressure.
        /// </summary>
		[Description("Average bottomhole treatment pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AvgBottomholeTreatmentPres")]
        public PressureMeasure AvgBottomholeTreatmentPres {
            get {
                return AvgBottomholeTreatmentPresField;
            } 
            set {
                AvgBottomholeTreatmentPresField = value;
                NotifyPropertyChanged("AvgBottomholeTreatmentPres");
            }
        }

        private PressureMeasure AvgBottomholeTreatmentPresField; 

        /// <summary>
        /// Average bottomhole treatment flow rate.
        /// </summary>
		[Description("Average bottomhole treatment flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("AvgBottomholeTreatmentRate")]
        public VolumePerTimeMeasure AvgBottomholeTreatmentRate {
            get {
                return AvgBottomholeTreatmentRateField;
            } 
            set {
                AvgBottomholeTreatmentRateField = value;
                NotifyPropertyChanged("AvgBottomholeTreatmentRate");
            }
        }

        private VolumePerTimeMeasure AvgBottomholeTreatmentRateField; 

        /// <summary>
        /// Base fluid volume entering equipment.
        /// </summary>
		[Description("Base fluid volume entering equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("BaseFluidVol")]
        public VolumeMeasure BaseFluidVol {
            get {
                return BaseFluidVolField;
            } 
            set {
                BaseFluidVolField = value;
                NotifyPropertyChanged("BaseFluidVol");
            }
        }

        private VolumeMeasure BaseFluidVolField; 

        /// <summary>
        /// Bottomhole hydrostatic pressure.
        /// </summary>
		[Description("Bottomhole hydrostatic pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BottomholeHydrostaticPres")]
        public PressureMeasure BottomholeHydrostaticPres {
            get {
                return BottomholeHydrostaticPresField;
            } 
            set {
                BottomholeHydrostaticPresField = value;
                NotifyPropertyChanged("BottomholeHydrostaticPres");
            }
        }

        private PressureMeasure BottomholeHydrostaticPresField; 

        /// <summary>
        /// The pressure at which gas begins to break out of an under saturated oil and form a free gas phase in the matrix or a gas cap.
        /// </summary>
		[Description("The pressure at which gas begins to break out of an under saturated oil and form a free gas phase in the matrix or a gas cap.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BubblePointPres")]
        public PressureMeasure BubblePointPres {
            get {
                return BubblePointPresField;
            } 
            set {
                BubblePointPresField = value;
                NotifyPropertyChanged("BubblePointPres");
            }
        }

        private PressureMeasure BubblePointPresField; 

        /// <summary>
        /// The density of the fluid.
        /// </summary>
		[Description("The density of the fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("FluidDensity")]
        public MassPerVolumeMeasure FluidDensity {
            get {
                return FluidDensityField;
            } 
            set {
                FluidDensityField = value;
                NotifyPropertyChanged("FluidDensity");
            }
        }

        private MassPerVolumeMeasure FluidDensityField; 

        /// <summary>
        /// The pressure when the fracture width becomes zero.
        /// </summary>
		[Description("The pressure when the fracture width becomes zero.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FractureClosePres")]
        public PressureMeasure FractureClosePres {
            get {
                return FractureClosePresField;
            } 
            set {
                FractureClosePresField = value;
                NotifyPropertyChanged("FractureClosePres");
            }
        }

        private PressureMeasure FractureClosePresField; 

        /// <summary>
        /// The pressure loss due to fluid friction with the pipe while a fluid is being pumped.
        /// </summary>
		[Description("The pressure loss due to fluid friction with the pipe while a fluid is being pumped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FrictionPres")]
        public PressureMeasure FrictionPres {
            get {
                return FrictionPresField;
            } 
            set {
                FrictionPresField = value;
                NotifyPropertyChanged("FrictionPres");
            }
        }

        private PressureMeasure FrictionPresField; 

        /// <summary>
        /// Initial shutin pressure.
        /// </summary>
		[Description("Initial shutin pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("InitialShutinPres")]
        public PressureMeasure InitialShutinPres {
            get {
                return InitialShutinPresField;
            } 
            set {
                InitialShutinPresField = value;
                NotifyPropertyChanged("InitialShutinPres");
            }
        }

        private PressureMeasure InitialShutinPresField; 

        /// <summary>
        /// The pressure of the liquids in the formation pores.
        /// </summary>
		[Description("The pressure of the liquids in the formation pores.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PorePres")]
        public PressureMeasure PorePres {
            get {
                return PorePresField;
            } 
            set {
                PorePresField = value;
                NotifyPropertyChanged("PorePres");
            }
        }

        private PressureMeasure PorePresField; 

        /// <summary>
        /// The volume of fluid in the wellbore.
        /// </summary>
		[Description("The volume of fluid in the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("WellboreVolume")]
        public VolumeMeasure WellboreVolume {
            get {
                return WellboreVolumeField;
            } 
            set {
                WellboreVolumeField = value;
                NotifyPropertyChanged("WellboreVolume");
            }
        }

        private VolumeMeasure WellboreVolumeField; 

        /// <summary>
        /// The measured depth of the wellbore to its injection point.
        /// </summary>
		[Description("The measured depth of the wellbore to its injection point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdSurface")]
        public MeasuredDepthCoord MDSurface {
            get {
                return MdSurfaceField;
            } 
            set {
                MdSurfaceField = value;
                NotifyPropertyChanged("MDSurface");
            }
        }

        private MeasuredDepthCoord MdSurfaceField; 

        /// <summary>
        /// The measured depth of the bottom of the hole.
        /// </summary>
		[Description("The measured depth of the bottom of the hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBottomhole")]
        public MeasuredDepthCoord MDBottomhole {
            get {
                return MdBottomholeField;
            } 
            set {
                MdBottomholeField = value;
                NotifyPropertyChanged("MDBottomhole");
            }
        }

        private MeasuredDepthCoord MdBottomholeField; 

        /// <summary>
        /// The measured depth of the middle perforation.
        /// </summary>
		[Description("The measured depth of the middle perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdMidPerforation")]
        public MeasuredDepthCoord MDMidPerforation {
            get {
                return MdMidPerforationField;
            } 
            set {
                MdMidPerforationField = value;
                NotifyPropertyChanged("MDMidPerforation");
            }
        }

        private MeasuredDepthCoord MdMidPerforationField; 

        /// <summary>
        /// The true vertical depth of the middle perforation.
        /// </summary>
		[Description("The true vertical depth of the middle perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdMidPerforation")]
        public WellVerticalDepthCoord TvdMidPerforation {
            get {
                return TvdMidPerforationField;
            } 
            set {
                TvdMidPerforationField = value;
                NotifyPropertyChanged("TvdMidPerforation");
            }
        }

        private WellVerticalDepthCoord TvdMidPerforationField; 

        /// <summary>
        /// The constant earth temperature at a given depth specific to a region.
        /// </summary>
		[Description("The constant earth temperature at a given depth specific to a region.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("SurfaceTemperature")]
        public ThermodynamicTemperatureMeasure SurfaceTemperature {
            get {
                return SurfaceTemperatureField;
            } 
            set {
                SurfaceTemperatureField = value;
                NotifyPropertyChanged("SurfaceTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure SurfaceTemperatureField; 

        /// <summary>
        /// Static bottomhole temperature.
        /// </summary>
		[Description("Static bottomhole temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("BottomholeTemperature")]
        public ThermodynamicTemperatureMeasure BottomholeTemperature {
            get {
                return BottomholeTemperatureField;
            } 
            set {
                BottomholeTemperatureField = value;
                NotifyPropertyChanged("BottomholeTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure BottomholeTemperatureField; 

        /// <summary>
        /// Temperature of the fluid at the surface.
        /// </summary>
		[Description("Temperature of the fluid at the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("SurfaceFluidTemperature")]
        public ThermodynamicTemperatureMeasure SurfaceFluidTemperature {
            get {
                return SurfaceFluidTemperatureField;
            } 
            set {
                SurfaceFluidTemperatureField = value;
                NotifyPropertyChanged("SurfaceFluidTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure SurfaceFluidTemperatureField; 

        /// <summary>
        /// The volume change of a fluid when pressure is applied.
        /// </summary>
		[Description("The volume change of a fluid when pressure is applied.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IsothermalCompressibilityMeasure")]
		[XmlElement("FluidCompressibility")]
        public IsothermalCompressibilityMeasure FluidCompressibility {
            get {
                return FluidCompressibilityField;
            } 
            set {
                FluidCompressibilityField = value;
                NotifyPropertyChanged("FluidCompressibility");
            }
        }

        private IsothermalCompressibilityMeasure FluidCompressibilityField; 

        /// <summary>
        /// The volume change of a reservoir material when pressure is applied.
        /// </summary>
		[Description("The volume change of a reservoir material when pressure is applied.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IsothermalCompressibilityMeasure")]
		[XmlElement("ReservoirTotalCompressibility")]
        public IsothermalCompressibilityMeasure ReservoirTotalCompressibility {
            get {
                return ReservoirTotalCompressibilityField;
            } 
            set {
                ReservoirTotalCompressibilityField = value;
                NotifyPropertyChanged("ReservoirTotalCompressibility");
            }
        }

        private IsothermalCompressibilityMeasure ReservoirTotalCompressibilityField; 

        /// <summary>
        /// Power law component. As 'n' decreases from 1, the fluid becomes more shear thinning. Reducing 'n' produces more non-Newtonian behavior.
        /// </summary>
		[Description("Power law component. As 'n' decreases from 1, the fluid becomes more shear thinning. Reducing 'n' produces more non-Newtonian behavior.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("FluidNprimeFactor")]
        public DimensionlessMeasure FluidNprimeFactor {
            get {
                return FluidNprimeFactorField;
            } 
            set {
                FluidNprimeFactorField = value;
                NotifyPropertyChanged("FluidNprimeFactor");
            }
        }

        private DimensionlessMeasure FluidNprimeFactorField; 

        /// <summary>
        /// The consistency index K is the shear stress or viscosity of the fluid at one sec-1 shear rate. An increasing K raises the effective viscosity.
        /// </summary>
		[Description("The consistency index K is the shear stress or viscosity of the fluid at one sec-1 shear rate. An increasing K raises the effective viscosity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("FluidKprimeFactor")]
        public DimensionlessMeasure FluidKprimeFactor {
            get {
                return FluidKprimeFactorField;
            } 
            set {
                FluidKprimeFactorField = value;
                NotifyPropertyChanged("FluidKprimeFactor");
            }
        }

        private DimensionlessMeasure FluidKprimeFactorField; 

        /// <summary>
        /// The heat required to raise one unit mass of a substance by one degree.
        /// </summary>
		[Description("The heat required to raise one unit mass of a substance by one degree.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SpecificHeatCapacityMeasure")]
		[XmlElement("FluidSpecificHeat")]
        public SpecificHeatCapacityMeasure FluidSpecificHeat {
            get {
                return FluidSpecificHeatField;
            } 
            set {
                FluidSpecificHeatField = value;
                NotifyPropertyChanged("FluidSpecificHeat");
            }
        }

        private SpecificHeatCapacityMeasure FluidSpecificHeatField; 

        /// <summary>
        /// In physics, thermal conductivity is the property of a material describing its ability to conduct heat. It appears primarily in Fourier's Law for heat conduction. Thermal conductivity is measured in watts per kelvin-meter. Multiplied by a temperature difference (in kelvins) and an area (in square meters), and divided by a thickness (in meters), the thermal conductivity predicts the rate of energy loss (in watts) through a piece of material.
        /// </summary>
		[Description("In physics, thermal conductivity is the property of a material describing its ability to conduct heat. It appears primarily in Fourier's Law for heat conduction. Thermal conductivity is measured in watts per kelvin-meter.  Multiplied by a temperature difference (in kelvins) and an area (in square meters), and divided by a thickness (in meters), the thermal conductivity predicts the rate of energy loss (in watts) through a piece of material.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermalConductivityMeasure")]
		[XmlElement("FluidThermalConductivity")]
        public ThermalConductivityMeasure FluidThermalConductivity {
            get {
                return FluidThermalConductivityField;
            } 
            set {
                FluidThermalConductivityField = value;
                NotifyPropertyChanged("FluidThermalConductivity");
            }
        }

        private ThermalConductivityMeasure FluidThermalConductivityField; 

        /// <summary>
        /// Dimensional response to temperature change is expressed by its coefficient of thermal expansion. When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms also changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling. The degree of expansion divided by the change in temperature is called the material's coefficient of thermal expansion and generally varies with temperature.
        /// </summary>
		[Description("Dimensional response to temperature change is expressed by its coefficient of thermal expansion. When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms also changes. When the stored energy increases, so does the length of the molecular bonds.  As a result, solids typically expand in response to heating and contract on cooling.  The degree of expansion divided by the change in temperature is called the material's coefficient of thermal expansion and generally varies with temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumetricThermalExpansionMeasure")]
		[XmlElement("FluidThermalExpansionCoefficient")]
        public VolumetricThermalExpansionMeasure FluidThermalExpansionCoefficient {
            get {
                return FluidThermalExpansionCoefficientField;
            } 
            set {
                FluidThermalExpansionCoefficientField = value;
                NotifyPropertyChanged("FluidThermalExpansionCoefficient");
            }
        }

        private VolumetricThermalExpansionMeasure FluidThermalExpansionCoefficientField; 

        /// <summary>
        /// A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.
        /// </summary>
		[Description("A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("FluidEfficiency")]
        public VolumePerVolumeMeasure FluidEfficiency {
            get {
                return FluidEfficiencyField;
            } 
            set {
                FluidEfficiencyField = value;
                NotifyPropertyChanged("FluidEfficiency");
            }
        }

        private VolumePerVolumeMeasure FluidEfficiencyField; 

        /// <summary>
        /// Foam quality percentage of foam for the job during the stimulation services.
        /// </summary>
		[Description("Foam quality percentage of foam for the job during the stimulation services.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("FoamQuality")]
        public VolumePerVolumeMeasure FoamQuality {
            get {
                return FoamQualityField;
            } 
            set {
                FoamQualityField = value;
                NotifyPropertyChanged("FoamQuality");
            }
        }

        private VolumePerVolumeMeasure FoamQualityField; 

        /// <summary>
        /// The volume of the pad divided by the (volume of the pad + the volume of the proppant laden fluid).
        /// </summary>
		[Description("The volume of the pad divided by the (volume of the pad + the volume of the proppant laden fluid).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("PercentPad")]
        public VolumePerVolumeMeasure PercentPad {
            get {
                return PercentPadField;
            } 
            set {
                PercentPadField = value;
                NotifyPropertyChanged("PercentPad");
            }
        }

        private VolumePerVolumeMeasure PercentPadField; 

        /// <summary>
        /// The number of a stage associated with this diagnostics session.
        /// </summary>
		[Description("The number of a stage associated with this diagnostics session.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StageNumber")]
        public long? StageNumber {
            get {
                return StageNumberField;
            } 
            set {
                StageNumberField = value;
                 this.StageNumberSpecified = true;
                NotifyPropertyChanged("StageNumber");
            }
        }

        private long? StageNumberField; 

        /// <summary>
        /// StageNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StageNumberSpecified {
            get {
                return StageNumberSpecifiedField;
            } 
            set {
                StageNumberSpecifiedField = value;
                NotifyPropertyChanged("StageNumberSpecified");
            }
        }

        private bool StageNumberSpecifiedField; 

        /// <summary>
        /// Are the calculations corrected for temperature? A value of "true" (or "1") indicates that the calculations were corrected for temperature. A value of "false" (or "0") or not given indicates otherwise.
        /// </summary>
		[Description("Are the calculations corrected for temperature? A value of \"true\" (or \"1\") indicates that the calculations were corrected for temperature.  A value of \"false\" (or \"0\") or not given indicates otherwise.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("TemperatureCorrectionApplied")]
        public bool? TemperatureCorrectionApplied {
            get {
                return TemperatureCorrectionAppliedField;
            } 
            set {
                TemperatureCorrectionAppliedField = value;
                 this.TemperatureCorrectionAppliedSpecified = true;
                NotifyPropertyChanged("TemperatureCorrectionApplied");
            }
        }

        private bool? TemperatureCorrectionAppliedField; 

        /// <summary>
        /// TemperatureCorrectionAppliedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TemperatureCorrectionAppliedSpecified {
            get {
                return TemperatureCorrectionAppliedSpecifiedField;
            } 
            set {
                TemperatureCorrectionAppliedSpecifiedField = value;
                NotifyPropertyChanged("TemperatureCorrectionAppliedSpecified");
            }
        }

        private bool TemperatureCorrectionAppliedSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// A diagnostic test determining fluid efficiency.
        /// </summary>
		[Description("A diagnostic test determining fluid efficiency.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimFetTest")]
		[XmlElement("FluidEfficiencyTest")]
        public List<StimFetTest> FluidEfficiencyTest {
            get {
                return FluidEfficiencyTestField;
            } 
            set {
                FluidEfficiencyTestField = value;
                NotifyPropertyChanged("FluidEfficiencyTest");
            }
        }

         /// <summary>
         /// bool to indicate if FluidEfficiencyTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidEfficiencyTestSpecified
         {
             get {
             if(FluidEfficiencyTestField!=null)
                 return FluidEfficiencyTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimFetTest> FluidEfficiencyTestField; 

        /// <summary>
        /// An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure. An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure.
        /// </summary>
		[Description("An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure. An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimStepDownTest")]
		[XmlElement("StepDownTest")]
        public List<StimStepDownTest> StepDownTest {
            get {
                return StepDownTestField;
            } 
            set {
                StepDownTestField = value;
                NotifyPropertyChanged("StepDownTest");
            }
        }

         /// <summary>
         /// bool to indicate if StepDownTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StepDownTestSpecified
         {
             get {
             if(StepDownTestField!=null)
                 return StepDownTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimStepDownTest> StepDownTestField; 

        /// <summary>
        /// An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.
        /// </summary>
		[Description("An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimStepTest")]
		[XmlElement("StepRateTest")]
        public List<StimStepTest> StepRateTest {
            get {
                return StepRateTestField;
            } 
            set {
                StepRateTestField = value;
                NotifyPropertyChanged("StepRateTest");
            }
        }

         /// <summary>
         /// bool to indicate if StepRateTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StepRateTestSpecified
         {
             get {
             if(StepRateTestField!=null)
                 return StepRateTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimStepTest> StepRateTestField; 

        /// <summary>
        /// A diagnostic test involving flowing a well back after treatment.
        /// </summary>
		[Description("A diagnostic test involving flowing a well back after treatment.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimPumpFlowBackTest")]
		[XmlElement("PumpFlowBackTest")]
        public List<StimPumpFlowBackTest> PumpFlowBackTest {
            get {
                return PumpFlowBackTestField;
            } 
            set {
                PumpFlowBackTestField = value;
                NotifyPropertyChanged("PumpFlowBackTest");
            }
        }

         /// <summary>
         /// bool to indicate if PumpFlowBackTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PumpFlowBackTestSpecified
         {
             get {
             if(PumpFlowBackTestField!=null)
                 return PumpFlowBackTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimPumpFlowBackTest> PumpFlowBackTestField; 

		/// <summary>
        /// Unique identifier for this instance of StimJobDiagnosticSession.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimJobDiagnosticSession.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellVerticalDepthCoord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellVerticalDepthCoord", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the WellVerticalDepthCoord xsd type.")]
    public partial class WellVerticalDepthCoord : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellVerticalDepthCoord class.
        /// </summary>
        public WellVerticalDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellVerticalDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellVerticalDepthCoord(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// Unit of measure used by this vertical depth coordinate
        /// </summary>
		[Required]
        [Description("Unit of measure used by this vertical depth coordinate")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

		/// <summary>
        /// Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("datum")]
		
        public string Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string datumField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SurfaceEquipment xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SurfaceEquipment", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the SurfaceEquipment xsd type.")]
    public partial class SurfaceEquipment : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Description of item and details.
        /// </summary>
		[StringLength(2000)]
        [Description("Description of item and details.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Pressure rating of the item.
        /// </summary>
		[Description("Pressure rating of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresRating")]
        public PressureMeasure PresRating {
            get {
                return PresRatingField;
            } 
            set {
                PresRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure PresRatingField; 

        /// <summary>
        /// Surface equipment type (IADC1-4, Custom, Coiled Tubing).
        /// </summary>
		[Required]
        [Description("Surface equipment type (IADC1-4, Custom, Coiled Tubing).")]
        [EnergisticsDataTypeAttribute(DataType = "SurfEquipType")]
		[XmlElement("TypeSurfEquip")]
        public SurfEquipType? TypeSurfEquip {
            get {
                return TypeSurfEquipField;
            } 
            set {
                TypeSurfEquipField = value;
                 this.TypeSurfEquipSpecified = true;
                NotifyPropertyChanged("TypeSurfEquip");
            }
        }

        
        private bool TypeSurfEquipSpecifiedField = false;
        
        /// <summary>
        /// TypeSurfEquipSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSurfEquipSpecified {
            get {
                return TypeSurfEquipSpecifiedField;
            } 
            set {
                TypeSurfEquipSpecifiedField = value;
                NotifyPropertyChanged("TypeSurfEquipSpecified");
            }
        }
        
        private SurfEquipType? TypeSurfEquipField; 

        /// <summary>
        /// Use pump discharge line? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use pump discharge line?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("UsePumpDischarge")]
        public bool? UsePumpDischarge {
            get {
                return UsePumpDischargeField;
            } 
            set {
                UsePumpDischargeField = value;
                 this.UsePumpDischargeSpecified = true;
                NotifyPropertyChanged("UsePumpDischarge");
            }
        }

        private bool? UsePumpDischargeField; 

        /// <summary>
        /// UsePumpDischargeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UsePumpDischargeSpecified {
            get {
                return UsePumpDischargeSpecifiedField;
            } 
            set {
                UsePumpDischargeSpecifiedField = value;
                NotifyPropertyChanged("UsePumpDischargeSpecified");
            }
        }

        private bool UsePumpDischargeSpecifiedField; 

        /// <summary>
        /// Use standpipe geometry? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use standpipe geometry?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("UseStandpipe")]
        public bool? UseStandpipe {
            get {
                return UseStandpipeField;
            } 
            set {
                UseStandpipeField = value;
                 this.UseStandpipeSpecified = true;
                NotifyPropertyChanged("UseStandpipe");
            }
        }

        private bool? UseStandpipeField; 

        /// <summary>
        /// UseStandpipeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseStandpipeSpecified {
            get {
                return UseStandpipeSpecifiedField;
            } 
            set {
                UseStandpipeSpecifiedField = value;
                NotifyPropertyChanged("UseStandpipeSpecified");
            }
        }

        private bool UseStandpipeSpecifiedField; 

        /// <summary>
        /// Use kelly hose geometry? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use kelly hose geometry?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("UseHose")]
        public bool? UseHose {
            get {
                return UseHoseField;
            } 
            set {
                UseHoseField = value;
                 this.UseHoseSpecified = true;
                NotifyPropertyChanged("UseHose");
            }
        }

        private bool? UseHoseField; 

        /// <summary>
        /// UseHoseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseHoseSpecified {
            get {
                return UseHoseSpecifiedField;
            } 
            set {
                UseHoseSpecifiedField = value;
                NotifyPropertyChanged("UseHoseSpecified");
            }
        }

        private bool UseHoseSpecifiedField; 

        /// <summary>
        /// Use swivel geometry? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use swivel geometry?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("UseSwivel")]
        public bool? UseSwivel {
            get {
                return UseSwivelField;
            } 
            set {
                UseSwivelField = value;
                 this.UseSwivelSpecified = true;
                NotifyPropertyChanged("UseSwivel");
            }
        }

        private bool? UseSwivelField; 

        /// <summary>
        /// UseSwivelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseSwivelSpecified {
            get {
                return UseSwivelSpecifiedField;
            } 
            set {
                UseSwivelSpecifiedField = value;
                NotifyPropertyChanged("UseSwivelSpecified");
            }
        }

        private bool UseSwivelSpecifiedField; 

        /// <summary>
        /// Use kelly geometry? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use kelly geometry?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("UseKelly")]
        public bool? UseKelly {
            get {
                return UseKellyField;
            } 
            set {
                UseKellyField = value;
                 this.UseKellySpecified = true;
                NotifyPropertyChanged("UseKelly");
            }
        }

        private bool? UseKellyField; 

        /// <summary>
        /// UseKellySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseKellySpecified {
            get {
                return UseKellySpecifiedField;
            } 
            set {
                UseKellySpecifiedField = value;
                NotifyPropertyChanged("UseKellySpecified");
            }
        }

        private bool UseKellySpecifiedField; 

        /// <summary>
        /// Use top stack height? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use top stack height?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("UseTopStack")]
        public bool? UseTopStack {
            get {
                return UseTopStackField;
            } 
            set {
                UseTopStackField = value;
                 this.UseTopStackSpecified = true;
                NotifyPropertyChanged("UseTopStack");
            }
        }

        private bool? UseTopStackField; 

        /// <summary>
        /// UseTopStackSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseTopStackSpecified {
            get {
                return UseTopStackSpecifiedField;
            } 
            set {
                UseTopStackSpecifiedField = value;
                NotifyPropertyChanged("UseTopStackSpecified");
            }
        }

        private bool UseTopStackSpecifiedField; 

        /// <summary>
        /// Use injector stack height? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use injector stack height?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("UseInjStack")]
        public bool? UseInjStack {
            get {
                return UseInjStackField;
            } 
            set {
                UseInjStackField = value;
                 this.UseInjStackSpecified = true;
                NotifyPropertyChanged("UseInjStack");
            }
        }

        private bool? UseInjStackField; 

        /// <summary>
        /// UseInjStackSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseInjStackSpecified {
            get {
                return UseInjStackSpecifiedField;
            } 
            set {
                UseInjStackSpecifiedField = value;
                NotifyPropertyChanged("UseInjStackSpecified");
            }
        }

        private bool UseInjStackSpecifiedField; 

        /// <summary>
        /// Use surface iron description? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Use surface iron description?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("UseSurfaceIron")]
        public bool? UseSurfaceIron {
            get {
                return UseSurfaceIronField;
            } 
            set {
                UseSurfaceIronField = value;
                 this.UseSurfaceIronSpecified = true;
                NotifyPropertyChanged("UseSurfaceIron");
            }
        }

        private bool? UseSurfaceIronField; 

        /// <summary>
        /// UseSurfaceIronSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UseSurfaceIronSpecified {
            get {
                return UseSurfaceIronSpecifiedField;
            } 
            set {
                UseSurfaceIronSpecifiedField = value;
                NotifyPropertyChanged("UseSurfaceIronSpecified");
            }
        }

        private bool UseSurfaceIronSpecifiedField; 

        /// <summary>
        /// Inner diameter of the standpipe.
        /// </summary>
		[Description("Inner diameter of the standpipe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdStandpipe")]
        public LengthMeasure InnerDiameterStandpipe {
            get {
                return IdStandpipeField;
            } 
            set {
                IdStandpipeField = value;
                NotifyPropertyChanged("InnerDiameterStandpipe");
            }
        }

        private LengthMeasure IdStandpipeField; 

        /// <summary>
        /// Length of the standpipe.
        /// </summary>
		[Description("Length of the standpipe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenStandpipe")]
        public LengthMeasure LenStandpipe {
            get {
                return LenStandpipeField;
            } 
            set {
                LenStandpipeField = value;
                NotifyPropertyChanged("LenStandpipe");
            }
        }

        private LengthMeasure LenStandpipeField; 

        /// <summary>
        /// Inner diameter of the kelly hose.
        /// </summary>
		[Description("Inner diameter of the kelly hose.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdHose")]
        public LengthMeasure InnerDiameterHose {
            get {
                return IdHoseField;
            } 
            set {
                IdHoseField = value;
                NotifyPropertyChanged("InnerDiameterHose");
            }
        }

        private LengthMeasure IdHoseField; 

        /// <summary>
        /// Length of the kelly hose.
        /// </summary>
		[Description("Length of the kelly hose.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenHose")]
        public LengthMeasure LenHose {
            get {
                return LenHoseField;
            } 
            set {
                LenHoseField = value;
                NotifyPropertyChanged("LenHose");
            }
        }

        private LengthMeasure LenHoseField; 

        /// <summary>
        /// Inner diameter of the swivel.
        /// </summary>
		[Description("Inner diameter of the swivel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdSwivel")]
        public LengthMeasure InnerDiameterSwivel {
            get {
                return IdSwivelField;
            } 
            set {
                IdSwivelField = value;
                NotifyPropertyChanged("InnerDiameterSwivel");
            }
        }

        private LengthMeasure IdSwivelField; 

        /// <summary>
        /// Length of the swivel.
        /// </summary>
		[Description("Length of the swivel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenSwivel")]
        public LengthMeasure LenSwivel {
            get {
                return LenSwivelField;
            } 
            set {
                LenSwivelField = value;
                NotifyPropertyChanged("LenSwivel");
            }
        }

        private LengthMeasure LenSwivelField; 

        /// <summary>
        /// Inner diameter of the kelly bushing.
        /// </summary>
		[Description("Inner diameter of the kelly bushing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdKelly")]
        public LengthMeasure InnerDiameterKelly {
            get {
                return IdKellyField;
            } 
            set {
                IdKellyField = value;
                NotifyPropertyChanged("InnerDiameterKelly");
            }
        }

        private LengthMeasure IdKellyField; 

        /// <summary>
        /// Length of the kelly bushing.
        /// </summary>
		[Description("Length of the kelly bushing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenKelly")]
        public LengthMeasure LenKelly {
            get {
                return LenKellyField;
            } 
            set {
                LenKellyField = value;
                NotifyPropertyChanged("LenKelly");
            }
        }

        private LengthMeasure LenKellyField; 

        /// <summary>
        /// Inner diameter of the surface iron.
        /// </summary>
		[Description("Inner diameter of the surface iron.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdSurfaceIron")]
        public LengthMeasure InnerDiameterSurfaceIron {
            get {
                return IdSurfaceIronField;
            } 
            set {
                IdSurfaceIronField = value;
                NotifyPropertyChanged("InnerDiameterSurfaceIron");
            }
        }

        private LengthMeasure IdSurfaceIronField; 

        /// <summary>
        /// Length of the surface iron.
        /// </summary>
		[Description("Length of the surface iron.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenSurfaceIron")]
        public LengthMeasure LenSurfaceIron {
            get {
                return LenSurfaceIronField;
            } 
            set {
                LenSurfaceIronField = value;
                NotifyPropertyChanged("LenSurfaceIron");
            }
        }

        private LengthMeasure LenSurfaceIronField; 

        /// <summary>
        /// Height of the surface iron.
        /// </summary>
		[Description("Height of the surface iron.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HtSurfaceIron")]
        public LengthMeasure HeightSurfaceIron {
            get {
                return HtSurfaceIronField;
            } 
            set {
                HtSurfaceIronField = value;
                NotifyPropertyChanged("HeightSurfaceIron");
            }
        }

        private LengthMeasure HtSurfaceIronField; 

        /// <summary>
        /// Coiled tubing: inner diameter of the pump discharge line.
        /// </summary>
		[Description("Coiled tubing: inner diameter of the pump discharge line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdDischargeLine")]
        public LengthMeasure InnerDiameterDischargeLine {
            get {
                return IdDischargeLineField;
            } 
            set {
                IdDischargeLineField = value;
                NotifyPropertyChanged("InnerDiameterDischargeLine");
            }
        }

        private LengthMeasure IdDischargeLineField; 

        /// <summary>
        /// Coiled tubing: length of the pump discharge line.
        /// </summary>
		[Description("Coiled tubing: length of the pump discharge line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenDischargeLine")]
        public LengthMeasure LenDischargeLine {
            get {
                return LenDischargeLineField;
            } 
            set {
                LenDischargeLineField = value;
                NotifyPropertyChanged("LenDischargeLine");
            }
        }

        private LengthMeasure LenDischargeLineField; 

        /// <summary>
        /// Coiled tubing: the coiled tubing wrap type.
        /// </summary>
		[StringLength(64)]
        [Description("Coiled tubing: the coiled tubing wrap type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CtWrapType")]
        public string CTWrapType {
            get {
                return CtWrapTypeField;
            } 
            set {
                CtWrapTypeField = value;
                NotifyPropertyChanged("CTWrapType");
            }
        }

        private string CtWrapTypeField; 

        /// <summary>
        /// Coiled tubing: outside diameter of the coiled tubing reel.
        /// </summary>
		[Description("Coiled tubing: outside diameter of the coiled tubing reel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdReel")]
        public LengthMeasure OuterDiameterReel {
            get {
                return OdReelField;
            } 
            set {
                OdReelField = value;
                NotifyPropertyChanged("OuterDiameterReel");
            }
        }

        private LengthMeasure OdReelField; 

        /// <summary>
        /// Coiled tubing: outside diameter of the reel core that the coiled tubing is wrapped around.
        /// </summary>
		[Description("Coiled tubing: outside diameter of the reel core that the coiled tubing is wrapped around.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdCore")]
        public LengthMeasure OuterDiameterCore {
            get {
                return OdCoreField;
            } 
            set {
                OdCoreField = value;
                NotifyPropertyChanged("OuterDiameterCore");
            }
        }

        private LengthMeasure OdCoreField; 

        /// <summary>
        /// Coiled tubing: width of the reel core. This is the inside dimension.
        /// </summary>
		[Description("Coiled tubing: width of the reel core. This is the inside dimension.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("WidReelWrap")]
        public LengthMeasure WidReelWrap {
            get {
                return WidReelWrapField;
            } 
            set {
                WidReelWrapField = value;
                NotifyPropertyChanged("WidReelWrap");
            }
        }

        private LengthMeasure WidReelWrapField; 

        /// <summary>
        /// Coiled tubing: length of the coiled tubing remaining on the reel.
        /// </summary>
		[Description("Coiled tubing: length of the coiled tubing remaining on the reel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenReel")]
        public LengthMeasure LenReel {
            get {
                return LenReelField;
            } 
            set {
                LenReelField = value;
                NotifyPropertyChanged("LenReel");
            }
        }

        private LengthMeasure LenReelField; 

        /// <summary>
        /// Coiled tubing: Does it have an injector stack up? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Coiled tubing: Does it have an injector stack up? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("InjStkUp")]
        public bool? InjStkUp {
            get {
                return InjStkUpField;
            } 
            set {
                InjStkUpField = value;
                 this.InjStkUpSpecified = true;
                NotifyPropertyChanged("InjStkUp");
            }
        }

        private bool? InjStkUpField; 

        /// <summary>
        /// InjStkUpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InjStkUpSpecified {
            get {
                return InjStkUpSpecifiedField;
            } 
            set {
                InjStkUpSpecifiedField = value;
                NotifyPropertyChanged("InjStkUpSpecified");
            }
        }

        private bool InjStkUpSpecifiedField; 

        /// <summary>
        /// Coiled tubing: The length of tubing from the end of the coil reel to the rotary kelly bushing. This length includes the tubing in the hole and the tubing on the reel. This measurement takes into account the 20 or so feet of tubing that is being straightened and pushed through the injector head.
        /// </summary>
		[Description("Coiled tubing: The length of tubing from the end of the coil reel to the rotary kelly bushing. This length includes the tubing in the hole and the tubing on the reel. This measurement takes into account the 20 or so feet of tubing that is being straightened and pushed through the injector head.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HtInjStk")]
        public LengthMeasure HeightInjStk {
            get {
                return HtInjStkField;
            } 
            set {
                HtInjStkField = value;
                NotifyPropertyChanged("HeightInjStk");
            }
        }

        private LengthMeasure HtInjStkField; 

        /// <summary>
        /// Coiled tubing: Umbilical inside, true/false flag to account for the wireline inside the coiled tubing. With this pressure loss calculation, you can calculate for the strings used for logging, wireline coring, etc. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Coiled tubing: Umbilical inside, true/false flag to account for the wireline inside the coiled tubing. With this pressure loss calculation, you can calculate for the strings used for logging, wireline coring, etc.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("UmbInside")]
        public bool? UmbInside {
            get {
                return UmbInsideField;
            } 
            set {
                UmbInsideField = value;
                 this.UmbInsideSpecified = true;
                NotifyPropertyChanged("UmbInside");
            }
        }

        private bool? UmbInsideField; 

        /// <summary>
        /// UmbInsideSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UmbInsideSpecified {
            get {
                return UmbInsideSpecifiedField;
            } 
            set {
                UmbInsideSpecifiedField = value;
                NotifyPropertyChanged("UmbInsideSpecified");
            }
        }

        private bool UmbInsideSpecifiedField; 

        /// <summary>
        /// Coiled tubing: outer diameter of the umbilical.
        /// </summary>
		[Description("Coiled tubing: outer diameter of the umbilical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdUmbilical")]
        public LengthMeasure OuterDiameterUmbilical {
            get {
                return OdUmbilicalField;
            } 
            set {
                OdUmbilicalField = value;
                NotifyPropertyChanged("OuterDiameterUmbilical");
            }
        }

        private LengthMeasure OdUmbilicalField; 

        /// <summary>
        /// Coiled tubing: length of the umbilical.
        /// </summary>
		[Description("Coiled tubing: length of the umbilical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenUmbilical")]
        public LengthMeasure LenUmbilical {
            get {
                return LenUmbilicalField;
            } 
            set {
                LenUmbilicalField = value;
                NotifyPropertyChanged("LenUmbilical");
            }
        }

        private LengthMeasure LenUmbilicalField; 

        /// <summary>
        /// Top drive: inner diameter of the top stack.
        /// </summary>
		[Description("Top drive: inner diameter of the top stack.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdTopStk")]
        public LengthMeasure InnerDiameterTopStk {
            get {
                return IdTopStkField;
            } 
            set {
                IdTopStkField = value;
                NotifyPropertyChanged("InnerDiameterTopStk");
            }
        }

        private LengthMeasure IdTopStkField; 

        /// <summary>
        /// Top drive: The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. We are measuring the distance that the mud will flow through the top drive.For the top drive. The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. This is the measurement of the distance that the mud flows through the top drive.
        /// </summary>
		[Description("Top drive: The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. We are measuring the distance that the mud will flow through the top drive.For the top drive. The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. This is the measurement of the distance that the mud flows through the top drive.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HtTopStk")]
        public LengthMeasure HeightTopStk {
            get {
                return HtTopStkField;
            } 
            set {
                HtTopStkField = value;
                NotifyPropertyChanged("HeightTopStk");
            }
        }

        private LengthMeasure HtTopStkField; 

        /// <summary>
        /// Height of the flange. 
        /// </summary>
		[Description("Height of the flange.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HtFlange")]
        public LengthMeasure HeightFlange {
            get {
                return HtFlangeField;
            } 
            set {
                HtFlangeField = value;
                NotifyPropertyChanged("HeightFlange");
            }
        }

        private LengthMeasure HtFlangeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Degasser xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Degasser", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Degasser xsd type.")]
    public partial class Degasser : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer or supplier of the item.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer or supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// Manufacturer's designated model.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer's designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Model")]
        public string Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string ModelField; 

        /// <summary>
        /// Date and time the degasser was installed.
        /// </summary>
		[Description("Date and time the degasser was installed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        
        private bool DateTimeInstallSpecifiedField = false;
        
        /// <summary>
        /// DateTimeInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return DateTimeInstallSpecifiedField;
            } 
            set {
                DateTimeInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }
        
        private Timestamp? DTimInstallField; 

        /// <summary>
        /// Date and time the degasser was removed.
        /// </summary>
		[Description("Date and time the degasser was removed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        
        private bool DateTimeRemoveSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return DateTimeRemoveSpecifiedField;
            } 
            set {
                DateTimeRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }
        
        private Timestamp? DTimRemoveField; 

        /// <summary>
        /// Description for the type of object.
        /// </summary>
		[StringLength(64)]
        [Description("Description for the type of object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// Contractor/owner.
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Owner")]
        public string Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string OwnerField; 

        /// <summary>
        /// Height of the separator.
        /// </summary>
		[Description("Height of the separator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Height")]
        public LengthMeasure Height {
            get {
                return HeightField;
            } 
            set {
                HeightField = value;
                NotifyPropertyChanged("Height");
            }
        }

        private LengthMeasure HeightField; 

        /// <summary>
        /// Length of the separator.
        /// </summary>
		[Description("Length of the separator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Len")]
        public LengthMeasure Len {
            get {
                return LenField;
            } 
            set {
                LenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure LenField; 

        /// <summary>
        /// Internal diameter of the object.
        /// </summary>
		[Description("Internal diameter of the object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Id")]
        public LengthMeasure InnerDiameter {
            get {
                return IdField;
            } 
            set {
                IdField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure IdField; 

        /// <summary>
        /// Maximum pump rate at which the unit efficiently operates.
        /// </summary>
		[Description("Maximum pump rate at which the unit efficiently operates.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("CapFlow")]
        public VolumePerTimeMeasure CapFlow {
            get {
                return CapFlowField;
            } 
            set {
                CapFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumePerTimeMeasure CapFlowField; 

        /// <summary>
        /// Flow area of the separator.
        /// </summary>
		[Description("Flow area of the separator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaMeasure")]
		[XmlElement("AreaSeparatorFlow")]
        public AreaMeasure AreaSeparatorFlow {
            get {
                return AreaSeparatorFlowField;
            } 
            set {
                AreaSeparatorFlowField = value;
                NotifyPropertyChanged("AreaSeparatorFlow");
            }
        }

        private AreaMeasure AreaSeparatorFlowField; 

        /// <summary>
        /// Depth of trip-tank fluid level to provide back pressure against the separator flow.
        /// </summary>
		[Description("Depth of trip-tank fluid level to provide back pressure against the separator flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HtMudSeal")]
        public LengthMeasure HeightMudSeal {
            get {
                return HtMudSealField;
            } 
            set {
                HtMudSealField = value;
                NotifyPropertyChanged("HeightMudSeal");
            }
        }

        private LengthMeasure HtMudSealField; 

        /// <summary>
        /// Internal diameter of the inlet line.
        /// </summary>
		[Description("Internal diameter of the inlet line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdInlet")]
        public LengthMeasure InnerDiameterInlet {
            get {
                return IdInletField;
            } 
            set {
                IdInletField = value;
                NotifyPropertyChanged("InnerDiameterInlet");
            }
        }

        private LengthMeasure IdInletField; 

        /// <summary>
        /// Internal diameter of the vent line.
        /// </summary>
		[Description("Internal diameter of the vent line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdVentLine")]
        public LengthMeasure InnerDiameterVentLine {
            get {
                return IdVentLineField;
            } 
            set {
                IdVentLineField = value;
                NotifyPropertyChanged("InnerDiameterVentLine");
            }
        }

        private LengthMeasure IdVentLineField; 

        /// <summary>
        /// Length of the vent line.
        /// </summary>
		[Description("Length of the vent line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenVentLine")]
        public LengthMeasure LenVentLine {
            get {
                return LenVentLineField;
            } 
            set {
                LenVentLineField = value;
                NotifyPropertyChanged("LenVentLine");
            }
        }

        private LengthMeasure LenVentLineField; 

        /// <summary>
        /// Safe gas-separating capacity.
        /// </summary>
		[Description("Safe gas-separating capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("CapGasSep")]
        public VolumePerTimeMeasure CapGasSep {
            get {
                return CapGasSepField;
            } 
            set {
                CapGasSepField = value;
                NotifyPropertyChanged("CapGasSep");
            }
        }

        private VolumePerTimeMeasure CapGasSepField; 

        /// <summary>
        /// Gas vent rate at which the vent line pressure drop exceeds the hydrostatic head because of the mud seal.
        /// </summary>
		[Description("Gas vent rate at which the vent line pressure drop exceeds the hydrostatic head because of the mud seal.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("CapBlowdown")]
        public VolumePerTimeMeasure CapBlowdown {
            get {
                return CapBlowdownField;
            } 
            set {
                CapBlowdownField = value;
                NotifyPropertyChanged("CapBlowdown");
            }
        }

        private VolumePerTimeMeasure CapBlowdownField; 

        /// <summary>
        /// Pressure rating of the item.
        /// </summary>
		[Description("Pressure rating of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresRating")]
        public PressureMeasure PresRating {
            get {
                return PresRatingField;
            } 
            set {
                PresRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure PresRatingField; 

        /// <summary>
        /// Temperature rating of the separator.
        /// </summary>
		[Description("Temperature rating of the separator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempRating")]
        public ThermodynamicTemperatureMeasure TempRating {
            get {
                return TempRatingField;
            } 
            set {
                TempRatingField = value;
                NotifyPropertyChanged("TempRating");
            }
        }

        private ThermodynamicTemperatureMeasure TempRatingField; 

        /// <summary>
        /// An identification tag for the degasser. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element only identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the degasser. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element only identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameTag")]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(NameTagField!=null)
                 return NameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of degasser
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of degasser")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AreaMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AreaMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AreaMeasure xsd type.")]
    public partial class AreaMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        public AreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaMeasure(double value, AreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AreaUom")]
        [XmlAttribute("uom")]
		
        public AreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the NameTag xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NameTag", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the NameTag xsd type.")]
    public partial class NameTag : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The physical identification string of the equipment tag.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The physical identification string of the equipment tag.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The format or encoding specification of the equipment tag. The tag may contain different pieces of information and knowledge of that information is inherent in the specification. The "identification string" is a mandatory part of the information in a tag.
        /// </summary>
		[Required]
        [Description("The format or encoding specification of the equipment tag. The tag may contain different pieces of information and knowledge of that information is inherent in the specification. The \"identification string\" is a mandatory part of the information in a tag.")]
        [EnergisticsDataTypeAttribute(DataType = "NameTagNumberingScheme")]
		[XmlElement("NumberingScheme")]
        public NameTagNumberingScheme? NumberingScheme {
            get {
                return NumberingSchemeField;
            } 
            set {
                NumberingSchemeField = value;
                 this.NumberingSchemeSpecified = true;
                NotifyPropertyChanged("NumberingScheme");
            }
        }

        
        private bool NumberingSchemeSpecifiedField = false;
        
        /// <summary>
        /// NumberingSchemeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumberingSchemeSpecified {
            get {
                return NumberingSchemeSpecifiedField;
            } 
            set {
                NumberingSchemeSpecifiedField = value;
                NotifyPropertyChanged("NumberingSchemeSpecified");
            }
        }
        
        private NameTagNumberingScheme? NumberingSchemeField; 

        /// <summary>
        /// Identifies the general type of identifier on an item. If multiple identifiers exist on an item, a separate description set for each identifier should be created. For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling. The barcode label may in turn be an RFID-equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label' - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label' - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.
        /// </summary>
		[Description("Identifies the general type of identifier on an item.  If multiple identifiers exist on an item, a separate description set for each identifier should be created.  For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling.  The barcode label may in turn be an RFID-equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label'  - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label'  - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.")]
        [EnergisticsDataTypeAttribute(DataType = "NameTagTechnology")]
		[XmlElement("Technology")]
        public NameTagTechnology? Technology {
            get {
                return TechnologyField;
            } 
            set {
                TechnologyField = value;
                 this.TechnologySpecified = true;
                NotifyPropertyChanged("Technology");
            }
        }

        private NameTagTechnology? TechnologyField; 

        /// <summary>
        /// TechnologySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TechnologySpecified {
            get {
                return TechnologySpecifiedField;
            } 
            set {
                TechnologySpecifiedField = value;
                NotifyPropertyChanged("TechnologySpecified");
            }
        }

        private bool TechnologySpecifiedField; 

        /// <summary>
        /// An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item. This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener. 'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item. Most non-downhole tools use either 'body', 'other' or not specified because the location tends to lose value with smaller or non threaded items.
        /// </summary>
		[Description("An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item.  This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener.  'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item.  Most non-downhole tools use either 'body', 'other' or not specified because the location tends to lose value with smaller or non threaded items.")]
        [EnergisticsDataTypeAttribute(DataType = "NameTagLocation")]
		[XmlElement("Location")]
        public NameTagLocation? Location {
            get {
                return LocationField;
            } 
            set {
                LocationField = value;
                 this.LocationSpecified = true;
                NotifyPropertyChanged("Location");
            }
        }

        private NameTagLocation? LocationField; 

        /// <summary>
        /// LocationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LocationSpecified {
            get {
                return LocationSpecifiedField;
            } 
            set {
                LocationSpecifiedField = value;
                NotifyPropertyChanged("LocationSpecified");
            }
        }

        private bool LocationSpecifiedField; 

        /// <summary>
        /// When the tag was installed in or on the item.
        /// </summary>
		[Description("When the tag was installed in or on the item.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("InstallationDate")]
        public Timestamp? InstallationDate {
            get {
                return InstallationDateField;
            } 
            set {
                InstallationDateField = value;
                 this.InstallationDateSpecified = true;
                NotifyPropertyChanged("InstallationDate");
            }
        }

        
        private bool InstallationDateSpecifiedField = false;
        
        /// <summary>
        /// InstallationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InstallationDateSpecified {
            get {
                return InstallationDateSpecifiedField;
            } 
            set {
                InstallationDateSpecifiedField = value;
                NotifyPropertyChanged("InstallationDateSpecified");
            }
        }
        
        private Timestamp? InstallationDateField; 

        /// <summary>
        /// The name of the company that installed the tag.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the company that installed the tag.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("InstallationCompany")]
        public string InstallationCompany {
            get {
                return InstallationCompanyField;
            } 
            set {
                InstallationCompanyField = value;
                NotifyPropertyChanged("InstallationCompany");
            }
        }

        private string InstallationCompanyField; 

        /// <summary>
        /// Reference to a manufacturer's or installer's installation description, code, or method.
        /// </summary>
		[StringLength(64)]
        [Description("Reference to a manufacturer's or installer's installation description, code, or method.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MountingCode")]
        public string MountingCode {
            get {
                return MountingCodeField;
            } 
            set {
                MountingCodeField = value;
                NotifyPropertyChanged("MountingCode");
            }
        }

        private string MountingCodeField; 

        /// <summary>
        /// A comment or remark about the tag.
        /// </summary>
		[StringLength(2000)]
        [Description("A comment or remark about the tag.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of NameTag.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of NameTag.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Hydrocyclone xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Hydrocyclone", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Hydrocyclone xsd type.")]
    public partial class Hydrocyclone : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer or supplier of the item.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer or supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// Manufacturer's designated model.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer's designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Model")]
        public string Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string ModelField; 

        /// <summary>
        /// Date and time the hydroclone was installed.
        /// </summary>
		[Description("Date and time the hydroclone was installed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        
        private bool DateTimeInstallSpecifiedField = false;
        
        /// <summary>
        /// DateTimeInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return DateTimeInstallSpecifiedField;
            } 
            set {
                DateTimeInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }
        
        private Timestamp? DTimInstallField; 

        /// <summary>
        /// Removal date and time the hydroclone was removed.
        /// </summary>
		[Description("Removal date and time the hydroclone was removed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        
        private bool DateTimeRemoveSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return DateTimeRemoveSpecifiedField;
            } 
            set {
                DateTimeRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }
        
        private Timestamp? DTimRemoveField; 

        /// <summary>
        /// Description of the type of object.
        /// </summary>
		[StringLength(64)]
        [Description("Description of the type of object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// Cone description.
        /// </summary>
		[StringLength(64)]
        [Description("Cone description.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DescCone")]
        public string DescCone {
            get {
                return DescConeField;
            } 
            set {
                DescConeField = value;
                NotifyPropertyChanged("DescCone");
            }
        }

        private string DescConeField; 

        /// <summary>
        /// Contractor/owner.
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Owner")]
        public string Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string OwnerField; 

        /// <summary>
        /// An identification tag for the hydrocyclone. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the hydrocyclone. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameTag")]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(NameTagField!=null)
                 return NameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of Hydrocyclone.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Hydrocyclone.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Centrifuge xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Centrifuge", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Centrifuge xsd type.")]
    public partial class Centrifuge : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer or supplier of the item.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer or supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// Manufacturer's designated model.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer's designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Model")]
        public string Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string ModelField; 

        /// <summary>
        /// Date and time the centrifuge was installed.
        /// </summary>
		[Description("Date and time the centrifuge was installed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        
        private bool DateTimeInstallSpecifiedField = false;
        
        /// <summary>
        /// DateTimeInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return DateTimeInstallSpecifiedField;
            } 
            set {
                DateTimeInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }
        
        private Timestamp? DTimInstallField; 

        /// <summary>
        /// Date and time the centrifuge was removed.
        /// </summary>
		[Description("Date and time the centrifuge was removed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        
        private bool DateTimeRemoveSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return DateTimeRemoveSpecifiedField;
            } 
            set {
                DateTimeRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }
        
        private Timestamp? DTimRemoveField; 

        /// <summary>
        /// Description for the type of object.
        /// </summary>
		[StringLength(64)]
        [Description("Description for the type of object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// Maximum pump rate at which the unit efficiently operates.
        /// </summary>
		[Description("Maximum pump rate at which the unit efficiently operates.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("CapFlow")]
        public VolumePerTimeMeasure CapFlow {
            get {
                return CapFlowField;
            } 
            set {
                CapFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumePerTimeMeasure CapFlowField; 

        /// <summary>
        /// Contractor/owner.
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Owner")]
        public string Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string OwnerField; 

        /// <summary>
        /// An identification tag for the centrifuge. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element only identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the centrifuge. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element only identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameTag")]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(NameTagField!=null)
                 return NameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of Centrifuge.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Centrifuge.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudPump xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudPump", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudPump xsd type.")]
    public partial class MudPump : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Relative pump number. One-based.
        /// </summary>
		[Required]
        [Description("Relative pump number. One-based.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Index")]
        public int? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private int? IndexField; 

        /// <summary>
        /// Manufacturer or supplier of the item.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer or supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// Manufacturer's designated model.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer's designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Model")]
        public string Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string ModelField; 

        /// <summary>
        /// Date and time the pump was installed.
        /// </summary>
		[Description("Date and time the pump was installed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        
        private bool DateTimeInstallSpecifiedField = false;
        
        /// <summary>
        /// DateTimeInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return DateTimeInstallSpecifiedField;
            } 
            set {
                DateTimeInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }
        
        private Timestamp? DTimInstallField; 

        /// <summary>
        /// Date and time the pump was removed.
        /// </summary>
		[Description("Date and time the pump was removed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        
        private bool DateTimeRemoveSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return DateTimeRemoveSpecifiedField;
            } 
            set {
                DateTimeRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }
        
        private Timestamp? DTimRemoveField; 

        /// <summary>
        /// Contractor/owner.
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Owner")]
        public string Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string OwnerField; 

        /// <summary>
        /// Pump type reference list.
        /// </summary>
		[Description("Pump type reference list.")]
        [EnergisticsDataTypeAttribute(DataType = "PumpType")]
		[XmlElement("TypePump")]
        public PumpType? TypePump {
            get {
                return TypePumpField;
            } 
            set {
                TypePumpField = value;
                 this.TypePumpSpecified = true;
                NotifyPropertyChanged("TypePump");
            }
        }

        private PumpType? TypePumpField; 

        /// <summary>
        /// TypePumpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypePumpSpecified {
            get {
                return TypePumpSpecifiedField;
            } 
            set {
                TypePumpSpecifiedField = value;
                NotifyPropertyChanged("TypePumpSpecified");
            }
        }

        private bool TypePumpSpecifiedField; 

        /// <summary>
        /// Number of cylinders (3 = single acting, 2 = double acting)
        /// </summary>
		[Description("Number of cylinders (3 = single acting, 2 = double acting)")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumCyl")]
        public int? NumCyl {
            get {
                return NumCylField;
            } 
            set {
                NumCylField = value;
                 this.NumCylSpecified = true;
                NotifyPropertyChanged("NumCyl");
            }
        }

        private int? NumCylField; 

        /// <summary>
        /// NumCylSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumCylSpecified {
            get {
                return NumCylSpecifiedField;
            } 
            set {
                NumCylSpecifiedField = value;
                NotifyPropertyChanged("NumCylSpecified");
            }
        }

        private bool NumCylSpecifiedField; 

        /// <summary>
        /// Rod outer diameter.
        /// </summary>
		[Description("Rod outer diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdRod")]
        public LengthMeasure OuterDiameterRod {
            get {
                return OdRodField;
            } 
            set {
                OdRodField = value;
                NotifyPropertyChanged("OuterDiameterRod");
            }
        }

        private LengthMeasure OdRodField; 

        /// <summary>
        /// Inner diameter of the pump liner.
        /// </summary>
		[Required]
        [Description("Inner diameter of the pump liner.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdLiner")]
        public LengthMeasure LinerSize {
            get {
                return IdLinerField;
            } 
            set {
                IdLinerField = value;
                NotifyPropertyChanged("LinerSize");
            }
        }

        private LengthMeasure IdLinerField; 

        /// <summary>
        /// Pump action. 1 = single acting, 2 = double acting.
        /// </summary>
		[Description("Pump action. 1 = single acting, 2 = double acting.")]
        [EnergisticsDataTypeAttribute(DataType = "PumpActionIntegerCode")]
		[XmlElement("PumpAction")]
        public short? PumpAction {
            get {
                return PumpActionField;
            } 
            set {
                PumpActionField = value;
                 this.PumpActionSpecified = true;
                NotifyPropertyChanged("PumpAction");
            }
        }

        private short? PumpActionField; 

        /// <summary>
        /// PumpActionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PumpActionSpecified {
            get {
                return PumpActionSpecifiedField;
            } 
            set {
                PumpActionSpecifiedField = value;
                NotifyPropertyChanged("PumpActionSpecified");
            }
        }

        private bool PumpActionSpecifiedField; 

        /// <summary>
        /// Efficiency of the pump.
        /// </summary>
		[Description("Efficiency of the pump.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerPerPowerMeasure")]
		[XmlElement("Eff")]
        public PowerPerPowerMeasure Eff {
            get {
                return EffField;
            } 
            set {
                EffField = value;
                NotifyPropertyChanged("Eff");
            }
        }

        private PowerPerPowerMeasure EffField; 

        /// <summary>
        /// Stroke length.
        /// </summary>
		[Description("Stroke length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenStroke")]
        public LengthMeasure LenStroke {
            get {
                return LenStrokeField;
            } 
            set {
                LenStrokeField = value;
                NotifyPropertyChanged("LenStroke");
            }
        }

        private LengthMeasure LenStrokeField; 

        /// <summary>
        /// Maximum pump pressure.
        /// </summary>
		[Description("Maximum pump pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresMx")]
        public PressureMeasure PresMax {
            get {
                return PresMxField;
            } 
            set {
                PresMxField = value;
                NotifyPropertyChanged("PresMax");
            }
        }

        private PressureMeasure PresMxField; 

        /// <summary>
        /// Maximum hydraulics horsepower.
        /// </summary>
		[Description("Maximum hydraulics horsepower.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("PowHydMx")]
        public PowerMeasure PowHydMax {
            get {
                return PowHydMxField;
            } 
            set {
                PowHydMxField = value;
                NotifyPropertyChanged("PowHydMax");
            }
        }

        private PowerMeasure PowHydMxField; 

        /// <summary>
        /// Maximum speed.
        /// </summary>
		[Description("Maximum speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("SpmMx")]
        public AngularVelocityMeasure SpmMax {
            get {
                return SpmMxField;
            } 
            set {
                SpmMxField = value;
                NotifyPropertyChanged("SpmMax");
            }
        }

        private AngularVelocityMeasure SpmMxField; 

        /// <summary>
        /// Pump displacement.
        /// </summary>
		[Required]
        [Description("Pump displacement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Displacement")]
        public VolumeMeasure Displacement {
            get {
                return DisplacementField;
            } 
            set {
                DisplacementField = value;
                NotifyPropertyChanged("Displacement");
            }
        }

        private VolumeMeasure DisplacementField; 

        /// <summary>
        /// Pulsation dampener pressure.
        /// </summary>
		[Description("Pulsation dampener pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresDamp")]
        public PressureMeasure PresDamp {
            get {
                return PresDampField;
            } 
            set {
                PresDampField = value;
                NotifyPropertyChanged("PresDamp");
            }
        }

        private PressureMeasure PresDampField; 

        /// <summary>
        /// Pulsation dampener volume.
        /// </summary>
		[Description("Pulsation dampener volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolDamp")]
        public VolumeMeasure VolDamp {
            get {
                return VolDampField;
            } 
            set {
                VolDampField = value;
                NotifyPropertyChanged("VolDamp");
            }
        }

        private VolumeMeasure VolDampField; 

        /// <summary>
        /// Maximum mechanical power.
        /// </summary>
		[Description("Maximum mechanical power.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("PowMechMx")]
        public PowerMeasure PowMechMax {
            get {
                return PowMechMxField;
            } 
            set {
                PowMechMxField = value;
                NotifyPropertyChanged("PowMechMax");
            }
        }

        private PowerMeasure PowMechMxField; 

        /// <summary>
        /// An identification tag for the pump. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element onlyidentifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the pump. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element onlyidentifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameTag")]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(NameTagField!=null)
                 return NameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of MudPump.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of MudPump.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PowerPerPowerMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PowerPerPowerMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PowerPerPowerMeasure xsd type.")]
    public partial class PowerPerPowerMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PowerPerPowerMeasure class.
        /// </summary>
        public PowerPerPowerMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PowerPerPowerMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PowerPerPowerMeasure(double value, PowerPerPowerUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PowerPerPowerUom")]
        [XmlAttribute("uom")]
		
        public PowerPerPowerUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PowerPerPowerUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AngularVelocityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AngularVelocityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AngularVelocityMeasure xsd type.")]
    public partial class AngularVelocityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AngularVelocityMeasure class.
        /// </summary>
        public AngularVelocityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AngularVelocityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AngularVelocityMeasure(double value, AngularVelocityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityUom")]
        [XmlAttribute("uom")]
		
        public AngularVelocityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AngularVelocityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Pit xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Pit", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Pit xsd type.")]
    public partial class Pit : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Relative pit number of all pits on the rig. One-based.
        /// </summary>
		[Required]
        [Description("Relative pit number of all pits on the rig. One-based.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Index")]
        public int? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private int? IndexField; 

        /// <summary>
        /// Date and time the pit was installed.
        /// </summary>
		[Description("Date and time the pit was installed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        
        private bool DateTimeInstallSpecifiedField = false;
        
        /// <summary>
        /// DateTimeInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return DateTimeInstallSpecifiedField;
            } 
            set {
                DateTimeInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }
        
        private Timestamp? DTimInstallField; 

        /// <summary>
        /// Date and time the pit was removed.
        /// </summary>
		[Description("Date and time the pit was removed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        
        private bool DateTimeRemoveSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return DateTimeRemoveSpecifiedField;
            } 
            set {
                DateTimeRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }
        
        private Timestamp? DTimRemoveField; 

        /// <summary>
        /// Maximum pit capacity.
        /// </summary>
		[Required]
        [Description("Maximum pit capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CapMx")]
        public VolumeMeasure CapMax {
            get {
                return CapMxField;
            } 
            set {
                CapMxField = value;
                NotifyPropertyChanged("CapMax");
            }
        }

        private VolumeMeasure CapMxField; 

        /// <summary>
        /// Contractor/owner.
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Owner")]
        public string Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string OwnerField; 

        /// <summary>
        /// The type of pit.
        /// </summary>
		[Description("The type of pit.")]
        [EnergisticsDataTypeAttribute(DataType = "PitType")]
		[XmlElement("TypePit")]
        public PitType? TypePit {
            get {
                return TypePitField;
            } 
            set {
                TypePitField = value;
                 this.TypePitSpecified = true;
                NotifyPropertyChanged("TypePit");
            }
        }

        private PitType? TypePitField; 

        /// <summary>
        /// TypePitSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypePitSpecified {
            get {
                return TypePitSpecifiedField;
            } 
            set {
                TypePitSpecifiedField = value;
                NotifyPropertyChanged("TypePitSpecified");
            }
        }

        private bool TypePitSpecifiedField; 

        /// <summary>
        /// Flag to indicate if the pit is part of the active system. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Flag to indicate if the pit is part of the active system.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsActive")]
        public bool? IsActive {
            get {
                return IsActiveField;
            } 
            set {
                IsActiveField = value;
                 this.IsActiveSpecified = true;
                NotifyPropertyChanged("IsActive");
            }
        }

        private bool? IsActiveField; 

        /// <summary>
        /// IsActiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsActiveSpecified {
            get {
                return IsActiveSpecifiedField;
            } 
            set {
                IsActiveSpecifiedField = value;
                NotifyPropertyChanged("IsActiveSpecified");
            }
        }

        private bool IsActiveSpecifiedField; 

        /// <summary>
        /// An identification tag for the pit. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the pit. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameTag")]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(NameTagField!=null)
                 return NameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of pit
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of pit")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BopComponent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BopComponent", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BopComponent xsd type.")]
    public partial class BopComponent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Type of ram or preventer.
        /// </summary>
		[Description("Type of ram or preventer.")]
        [EnergisticsDataTypeAttribute(DataType = "BopType")]
		[XmlElement("TypeBopComp")]
        public BopType? TypeBopComp {
            get {
                return TypeBopCompField;
            } 
            set {
                TypeBopCompField = value;
                 this.TypeBopCompSpecified = true;
                NotifyPropertyChanged("TypeBopComp");
            }
        }

        private BopType? TypeBopCompField; 

        /// <summary>
        /// TypeBopCompSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeBopCompSpecified {
            get {
                return TypeBopCompSpecifiedField;
            } 
            set {
                TypeBopCompSpecifiedField = value;
                NotifyPropertyChanged("TypeBopCompSpecified");
            }
        }

        private bool TypeBopCompSpecifiedField; 

        /// <summary>
        /// Description of the component.
        /// </summary>
		[StringLength(64)]
        [Description("Description of the component.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DescComp")]
        public string DescComp {
            get {
                return DescCompField;
            } 
            set {
                DescCompField = value;
                NotifyPropertyChanged("DescComp");
            }
        }

        private string DescCompField; 

        /// <summary>
        /// Inner diameter that tubulars can pass through.
        /// </summary>
		[Description("Inner diameter that tubulars can pass through.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdPassThru")]
        public LengthMeasure InnerDiameterPassThru {
            get {
                return IdPassThruField;
            } 
            set {
                IdPassThruField = value;
                NotifyPropertyChanged("InnerDiameterPassThru");
            }
        }

        private LengthMeasure IdPassThruField; 

        /// <summary>
        /// Working rating pressure of the component.
        /// </summary>
		[Description("Working rating pressure of the component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresWork")]
        public PressureMeasure PresWork {
            get {
                return PresWorkField;
            } 
            set {
                PresWorkField = value;
                NotifyPropertyChanged("PresWork");
            }
        }

        private PressureMeasure PresWorkField; 

        /// <summary>
        /// Minimum diameter of the component it will seal.
        /// </summary>
		[Description("Minimum diameter of the component it will seal.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaCloseMn")]
        public LengthMeasure DiaCloseMin {
            get {
                return DiaCloseMnField;
            } 
            set {
                DiaCloseMnField = value;
                NotifyPropertyChanged("DiaCloseMin");
            }
        }

        private LengthMeasure DiaCloseMnField; 

        /// <summary>
        /// Maximum diameter of the component it will seal.
        /// </summary>
		[Description("Maximum diameter of the component it will seal.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaCloseMx")]
        public LengthMeasure DiaCloseMax {
            get {
                return DiaCloseMxField;
            } 
            set {
                DiaCloseMxField = value;
                NotifyPropertyChanged("DiaCloseMax");
            }
        }

        private LengthMeasure DiaCloseMxField; 

        /// <summary>
        /// Arrangement nomenclature for the blowout preventer stack (e.g., S, R, A).
        /// </summary>
		[StringLength(64)]
        [Description("Arrangement nomenclature for the blowout preventer stack (e.g., S, R, A).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Nomenclature")]
        public string Nomenclature {
            get {
                return NomenclatureField;
            } 
            set {
                NomenclatureField = value;
                NotifyPropertyChanged("Nomenclature");
            }
        }

        private string NomenclatureField; 

        /// <summary>
        /// Is ram bore variable or single size? Defaults to false. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is ram bore variable or single size? Defaults to false.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsVariable")]
        public bool? IsVariable {
            get {
                return IsVariableField;
            } 
            set {
                IsVariableField = value;
                 this.IsVariableSpecified = true;
                NotifyPropertyChanged("IsVariable");
            }
        }

        private bool? IsVariableField; 

        /// <summary>
        /// IsVariableSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsVariableSpecified {
            get {
                return IsVariableSpecifiedField;
            } 
            set {
                IsVariableSpecifiedField = value;
                NotifyPropertyChanged("IsVariableSpecified");
            }
        }

        private bool IsVariableSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of BopComponent
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of BopComponent")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Bop xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Bop", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Bop xsd type.")]
    public partial class Bop : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer or supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer's designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Model")]
        public string Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string ModelField; 

        /// <summary>
        /// DTimInstall property
        /// </summary>
		[Description("Date and time the BOP was installed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        
        private bool DateTimeInstallSpecifiedField = false;
        
        /// <summary>
        /// DateTimeInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return DateTimeInstallSpecifiedField;
            } 
            set {
                DateTimeInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }
        
        private Timestamp? DTimInstallField; 

        /// <summary>
        /// DTimRemove property
        /// </summary>
		[Description("Date and time of the BOP was removed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        
        private bool DateTimeRemoveSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return DateTimeRemoveSpecifiedField;
            } 
            set {
                DateTimeRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }
        
        private Timestamp? DTimRemoveField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the blowout preventer. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element only identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameTag")]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(NameTagField!=null)
                 return NameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// TypeConnectionBop property
        /// </summary>
		[StringLength(64)]
        [Description("Type of connection to the blowout preventer.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeConnectionBop")]
        public string TypeConnectionBop {
            get {
                return TypeConnectionBopField;
            } 
            set {
                TypeConnectionBopField = value;
                NotifyPropertyChanged("TypeConnectionBop");
            }
        }

        private string TypeConnectionBopField; 

        /// <summary>
        /// SizeConnectionBop property
        /// </summary>
		[Description("Size of the connection to the blowout preventer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SizeConnectionBop")]
        public LengthMeasure SizeConnectionBop {
            get {
                return SizeConnectionBopField;
            } 
            set {
                SizeConnectionBopField = value;
                NotifyPropertyChanged("SizeConnectionBop");
            }
        }

        private LengthMeasure SizeConnectionBopField; 

        /// <summary>
        /// PresBopRating property
        /// </summary>
		[Required]
        [Description("Maximum pressure rating of the blowout preventer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresBopRating")]
        public PressureMeasure PresBopRating {
            get {
                return PresBopRatingField;
            } 
            set {
                PresBopRatingField = value;
                NotifyPropertyChanged("PresBopRating");
            }
        }

        private PressureMeasure PresBopRatingField; 

        /// <summary>
        /// SizeBopSys property
        /// </summary>
		[Required]
        [Description("Maximum tubulars passable through the blowout preventer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SizeBopSys")]
        public LengthMeasure SizeBopSys {
            get {
                return SizeBopSysField;
            } 
            set {
                SizeBopSysField = value;
                NotifyPropertyChanged("SizeBopSys");
            }
        }

        private LengthMeasure SizeBopSysField; 

        /// <summary>
        /// RotBop property
        /// </summary>
		[Description("Is this a rotating blowout preventer? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("RotBop")]
        public bool? RotBop {
            get {
                return RotBopField;
            } 
            set {
                RotBopField = value;
                 this.RotBopSpecified = true;
                NotifyPropertyChanged("RotBop");
            }
        }

        private bool? RotBopField; 

        /// <summary>
        /// RotBopSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RotBopSpecified {
            get {
                return RotBopSpecifiedField;
            } 
            set {
                RotBopSpecifiedField = value;
                NotifyPropertyChanged("RotBopSpecified");
            }
        }

        private bool RotBopSpecifiedField; 

        /// <summary>
        /// IdBoosterLine property
        /// </summary>
		[Description("Inner diameter of the booster line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdBoosterLine")]
        public LengthMeasure InnerDiameterBoosterLine {
            get {
                return IdBoosterLineField;
            } 
            set {
                IdBoosterLineField = value;
                NotifyPropertyChanged("InnerDiameterBoosterLine");
            }
        }

        private LengthMeasure IdBoosterLineField; 

        /// <summary>
        /// OdBoosterLine property
        /// </summary>
		[Description("Outer diameter of the booster line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdBoosterLine")]
        public LengthMeasure OuterDiameterBoosterLine {
            get {
                return OdBoosterLineField;
            } 
            set {
                OdBoosterLineField = value;
                NotifyPropertyChanged("OuterDiameterBoosterLine");
            }
        }

        private LengthMeasure OdBoosterLineField; 

        /// <summary>
        /// LenBoosterLine property
        /// </summary>
		[Description("Length of the booster line along the riser.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenBoosterLine")]
        public LengthMeasure LenBoosterLine {
            get {
                return LenBoosterLineField;
            } 
            set {
                LenBoosterLineField = value;
                NotifyPropertyChanged("LenBoosterLine");
            }
        }

        private LengthMeasure LenBoosterLineField; 

        /// <summary>
        /// IdSurfLine property
        /// </summary>
		[Description("Inner diameter of the surface line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdSurfLine")]
        public LengthMeasure InnerDiameterSurfLine {
            get {
                return IdSurfLineField;
            } 
            set {
                IdSurfLineField = value;
                NotifyPropertyChanged("InnerDiameterSurfLine");
            }
        }

        private LengthMeasure IdSurfLineField; 

        /// <summary>
        /// OdSurfLine property
        /// </summary>
		[Description("Outer diameter of the surface line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdSurfLine")]
        public LengthMeasure OuterDiameterSurfLine {
            get {
                return OdSurfLineField;
            } 
            set {
                OdSurfLineField = value;
                NotifyPropertyChanged("OuterDiameterSurfLine");
            }
        }

        private LengthMeasure OdSurfLineField; 

        /// <summary>
        /// LenSurfLine property
        /// </summary>
		[Description("Length of the surface line the along riser.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenSurfLine")]
        public LengthMeasure LenSurfLine {
            get {
                return LenSurfLineField;
            } 
            set {
                LenSurfLineField = value;
                NotifyPropertyChanged("LenSurfLine");
            }
        }

        private LengthMeasure LenSurfLineField; 

        /// <summary>
        /// IdChkLine property
        /// </summary>
		[Description("Inner diameter of the choke line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdChkLine")]
        public LengthMeasure InnerDiameterChkLine {
            get {
                return IdChkLineField;
            } 
            set {
                IdChkLineField = value;
                NotifyPropertyChanged("InnerDiameterChkLine");
            }
        }

        private LengthMeasure IdChkLineField; 

        /// <summary>
        /// OdChkLine property
        /// </summary>
		[Description("Outer diameter of the choke line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdChkLine")]
        public LengthMeasure OuterDiameterChkLine {
            get {
                return OdChkLineField;
            } 
            set {
                OdChkLineField = value;
                NotifyPropertyChanged("OuterDiameterChkLine");
            }
        }

        private LengthMeasure OdChkLineField; 

        /// <summary>
        /// LenChkLine property
        /// </summary>
		[Description("Length of the choke line along the riser.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenChkLine")]
        public LengthMeasure LenChkLine {
            get {
                return LenChkLineField;
            } 
            set {
                LenChkLineField = value;
                NotifyPropertyChanged("LenChkLine");
            }
        }

        private LengthMeasure LenChkLineField; 

        /// <summary>
        /// IdKillLine property
        /// </summary>
		[Description("Inner diameter of the kill line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdKillLine")]
        public LengthMeasure InnerDiameterKillLine {
            get {
                return IdKillLineField;
            } 
            set {
                IdKillLineField = value;
                NotifyPropertyChanged("InnerDiameterKillLine");
            }
        }

        private LengthMeasure IdKillLineField; 

        /// <summary>
        /// OdKillLine property
        /// </summary>
		[Description("Outer diameter of the kill line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdKillLine")]
        public LengthMeasure OuterDiameterKillLine {
            get {
                return OdKillLineField;
            } 
            set {
                OdKillLineField = value;
                NotifyPropertyChanged("OuterDiameterKillLine");
            }
        }

        private LengthMeasure OdKillLineField; 

        /// <summary>
        /// LenKillLine property
        /// </summary>
		[Description("Length of the kill line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenKillLine")]
        public LengthMeasure LenKillLine {
            get {
                return LenKillLineField;
            } 
            set {
                LenKillLineField = value;
                NotifyPropertyChanged("LenKillLine");
            }
        }

        private LengthMeasure LenKillLineField; 

        /// <summary>
        /// TypeDiverter property
        /// </summary>
		[StringLength(64)]
        [Description("Diverter description.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeDiverter")]
        public string TypeDiverter {
            get {
                return TypeDiverterField;
            } 
            set {
                TypeDiverterField = value;
                NotifyPropertyChanged("TypeDiverter");
            }
        }

        private string TypeDiverterField; 

        /// <summary>
        /// DiaDiverter property
        /// </summary>
		[Description("Diameter of the diverter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaDiverter")]
        public LengthMeasure DiaDiverter {
            get {
                return DiaDiverterField;
            } 
            set {
                DiaDiverterField = value;
                NotifyPropertyChanged("DiaDiverter");
            }
        }

        private LengthMeasure DiaDiverterField; 

        /// <summary>
        /// PresWorkDiverter property
        /// </summary>
		[Description("Working rating pressure of the component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresWorkDiverter")]
        public PressureMeasure PresWorkDiverter {
            get {
                return PresWorkDiverterField;
            } 
            set {
                PresWorkDiverterField = value;
                NotifyPropertyChanged("PresWorkDiverter");
            }
        }

        private PressureMeasure PresWorkDiverterField; 

        /// <summary>
        /// Accumulator property
        /// </summary>
		[StringLength(64)]
        [Description("Type of accumulator/description.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Accumulator")]
        public string Accumulator {
            get {
                return AccumulatorField;
            } 
            set {
                AccumulatorField = value;
                NotifyPropertyChanged("Accumulator");
            }
        }

        private string AccumulatorField; 

        /// <summary>
        /// CapAccFluid property
        /// </summary>
		[Description("Accumulator fluid capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CapAccFluid")]
        public VolumeMeasure CapAccFluid {
            get {
                return CapAccFluidField;
            } 
            set {
                CapAccFluidField = value;
                NotifyPropertyChanged("CapAccFluid");
            }
        }

        private VolumeMeasure CapAccFluidField; 

        /// <summary>
        /// PresAccPreCharge property
        /// </summary>
		[Description("Accumulator pre-charge pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresAccPreCharge")]
        public PressureMeasure PresAccPreCharge {
            get {
                return PresAccPreChargeField;
            } 
            set {
                PresAccPreChargeField = value;
                NotifyPropertyChanged("PresAccPreCharge");
            }
        }

        private PressureMeasure PresAccPreChargeField; 

        /// <summary>
        /// VolAccPreCharge property
        /// </summary>
		[Description("Accumulator pre-charge volume")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolAccPreCharge")]
        public VolumeMeasure VolAccPreCharge {
            get {
                return VolAccPreChargeField;
            } 
            set {
                VolAccPreChargeField = value;
                NotifyPropertyChanged("VolAccPreCharge");
            }
        }

        private VolumeMeasure VolAccPreChargeField; 

        /// <summary>
        /// PresAccOpRating property
        /// </summary>
		[Description("Accumulator operating pressure rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresAccOpRating")]
        public PressureMeasure PresAccOperatingRating {
            get {
                return PresAccOpRatingField;
            } 
            set {
                PresAccOpRatingField = value;
                NotifyPropertyChanged("PresAccOperatingRating");
            }
        }

        private PressureMeasure PresAccOpRatingField; 

        /// <summary>
        /// TypeControlManifold property
        /// </summary>
		[StringLength(64)]
        [Description("The blowout preventer control system.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeControlManifold")]
        public string TypeControlManifold {
            get {
                return TypeControlManifoldField;
            } 
            set {
                TypeControlManifoldField = value;
                NotifyPropertyChanged("TypeControlManifold");
            }
        }

        private string TypeControlManifoldField; 

        /// <summary>
        /// DescControlManifold property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of the control system.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("DescControlManifold")]
        public string DescControlManifold {
            get {
                return DescControlManifoldField;
            } 
            set {
                DescControlManifoldField = value;
                NotifyPropertyChanged("DescControlManifold");
            }
        }

        private string DescControlManifoldField; 

        /// <summary>
        /// TypeChokeManifold property
        /// </summary>
		[StringLength(64)]
        [Description("Type of choke manifold.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeChokeManifold")]
        public string TypeChokeManifold {
            get {
                return TypeChokeManifoldField;
            } 
            set {
                TypeChokeManifoldField = value;
                NotifyPropertyChanged("TypeChokeManifold");
            }
        }

        private string TypeChokeManifoldField; 

        /// <summary>
        /// PresChokeManifold property
        /// </summary>
		[Description("Choke manifold pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresChokeManifold")]
        public PressureMeasure PresChokeManifold {
            get {
                return PresChokeManifoldField;
            } 
            set {
                PresChokeManifoldField = value;
                NotifyPropertyChanged("PresChokeManifold");
            }
        }

        private PressureMeasure PresChokeManifoldField; 

        /// <summary>
        /// BopComponent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "BopComponent")]
		[XmlElement("BopComponent")]
        public List<BopComponent> BopComponent {
            get {
                return BopComponentField;
            } 
            set {
                BopComponentField = value;
                NotifyPropertyChanged("BopComponent");
            }
        }

         /// <summary>
         /// bool to indicate if BopComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BopComponentSpecified
         {
             get {
             if(BopComponentField!=null)
                 return BopComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<BopComponent> BopComponentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Shaker xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Shaker", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Shaker xsd type.")]
    public partial class Shaker : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Human-recognizable context for the shaker.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human-recognizable context for the shaker.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Manufacturer or supplier of the item.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer or supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// Manufacturer's designated model.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer's designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Model")]
        public string Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string ModelField; 

        /// <summary>
        /// Date and time the shaker was installed.
        /// </summary>
		[Description("Date and time the shaker was installed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimInstall")]
        public Timestamp? DateTimeInstall {
            get {
                return DTimInstallField;
            } 
            set {
                DTimInstallField = value;
                 this.DateTimeInstallSpecified = true;
                NotifyPropertyChanged("DateTimeInstall");
            }
        }

        
        private bool DateTimeInstallSpecifiedField = false;
        
        /// <summary>
        /// DateTimeInstallSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeInstallSpecified {
            get {
                return DateTimeInstallSpecifiedField;
            } 
            set {
                DateTimeInstallSpecifiedField = value;
                NotifyPropertyChanged("DateTimeInstallSpecified");
            }
        }
        
        private Timestamp? DTimInstallField; 

        /// <summary>
        /// Date and time the shaker was removed. 
        /// </summary>
		[Description("Date and time the shaker was removed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRemove")]
        public Timestamp? DateTimeRemove {
            get {
                return DTimRemoveField;
            } 
            set {
                DTimRemoveField = value;
                 this.DateTimeRemoveSpecified = true;
                NotifyPropertyChanged("DateTimeRemove");
            }
        }

        
        private bool DateTimeRemoveSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRemoveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRemoveSpecified {
            get {
                return DateTimeRemoveSpecifiedField;
            } 
            set {
                DateTimeRemoveSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRemoveSpecified");
            }
        }
        
        private Timestamp? DTimRemoveField; 

        /// <summary>
        /// Description for the type of object.
        /// </summary>
		[StringLength(64)]
        [Description("Description for the type of object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// Shaker location on the rig.
        /// </summary>
		[StringLength(64)]
        [Description("Shaker location on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LocationShaker")]
        public string LocationShaker {
            get {
                return LocationShakerField;
            } 
            set {
                LocationShakerField = value;
                NotifyPropertyChanged("LocationShaker");
            }
        }

        private string LocationShakerField; 

        /// <summary>
        /// Number of decks.
        /// </summary>
		[Description("Number of decks.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumDecks")]
        public int? NumDecks {
            get {
                return NumDecksField;
            } 
            set {
                NumDecksField = value;
                 this.NumDecksSpecified = true;
                NotifyPropertyChanged("NumDecks");
            }
        }

        private int? NumDecksField; 

        /// <summary>
        /// NumDecksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumDecksSpecified {
            get {
                return NumDecksSpecifiedField;
            } 
            set {
                NumDecksSpecifiedField = value;
                NotifyPropertyChanged("NumDecksSpecified");
            }
        }

        private bool NumDecksSpecifiedField; 

        /// <summary>
        /// Number of cascade levels.
        /// </summary>
		[Description("Number of cascade levels.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumCascLevel")]
        public int? NumCascLevel {
            get {
                return NumCascLevelField;
            } 
            set {
                NumCascLevelField = value;
                 this.NumCascLevelSpecified = true;
                NotifyPropertyChanged("NumCascLevel");
            }
        }

        private int? NumCascLevelField; 

        /// <summary>
        /// NumCascLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumCascLevelSpecified {
            get {
                return NumCascLevelSpecifiedField;
            } 
            set {
                NumCascLevelSpecifiedField = value;
                NotifyPropertyChanged("NumCascLevelSpecified");
            }
        }

        private bool NumCascLevelSpecifiedField; 

        /// <summary>
        /// Is part of mud-cleaning assembly as opposed to discrete shale shaker? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is part of mud-cleaning assembly as opposed to discrete shale shaker? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("MudCleaner")]
        public bool? MudCleaner {
            get {
                return MudCleanerField;
            } 
            set {
                MudCleanerField = value;
                 this.MudCleanerSpecified = true;
                NotifyPropertyChanged("MudCleaner");
            }
        }

        private bool? MudCleanerField; 

        /// <summary>
        /// MudCleanerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MudCleanerSpecified {
            get {
                return MudCleanerSpecifiedField;
            } 
            set {
                MudCleanerSpecifiedField = value;
                NotifyPropertyChanged("MudCleanerSpecified");
            }
        }

        private bool MudCleanerSpecifiedField; 

        /// <summary>
        /// Maximum pump rate at which the unit efficiently operates.
        /// </summary>
		[Description("Maximum pump rate at which the unit efficiently operates.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("CapFlow")]
        public VolumePerTimeMeasure CapFlow {
            get {
                return CapFlowField;
            } 
            set {
                CapFlowField = value;
                NotifyPropertyChanged("CapFlow");
            }
        }

        private VolumePerTimeMeasure CapFlowField; 

        /// <summary>
        /// Contractor/owner.
        /// </summary>
		[StringLength(64)]
        [Description("Contractor/owner.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Owner")]
        public string Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string OwnerField; 

        /// <summary>
        /// Minimum mesh size.
        /// </summary>
		[Description("Minimum mesh size.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SizeMeshMn")]
        public LengthMeasure SizeMeshMin {
            get {
                return SizeMeshMnField;
            } 
            set {
                SizeMeshMnField = value;
                NotifyPropertyChanged("SizeMeshMin");
            }
        }

        private LengthMeasure SizeMeshMnField; 

        /// <summary>
        /// An identification tag for the shaker. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents. .
        /// </summary>
		[Description("An identification tag for the shaker. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents. .")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameTag")]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(NameTagField!=null)
                 return NameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of Shaker. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Shaker.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerVolumeMeasureExt xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerVolumeMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerVolumeMeasureExt xsd type.")]
    public partial class VolumePerVolumeMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasureExt class.
        /// </summary>
        public VolumePerVolumeMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ForcePerVolumeMeasureExt xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ForcePerVolumeMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ForcePerVolumeMeasureExt xsd type.")]
    public partial class ForcePerVolumeMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasureExt class.
        /// </summary>
        public ForcePerVolumeMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerVolumeMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerVolumeMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PressureMeasureExt xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PressureMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PressureMeasureExt xsd type.")]
    public partial class PressureMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PressureMeasureExt class.
        /// </summary>
        public PressureMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the PressureMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PressureMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PressureUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ForceMeasureExt xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ForceMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ForceMeasureExt xsd type.")]
    public partial class ForceMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForceMeasureExt class.
        /// </summary>
        public ForceMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the ForceMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForceMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ForceUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudLogParameter xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogConcentrationParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogStringParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogPressureGradientParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogPressureParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogForceParameter))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudLogParameter", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudLogParameter xsd type.")]
    public abstract partial class MudLogParameter : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Measured depth interval that is the focus of this parameter.
        /// </summary>
		[Description("Measured depth interval that is the focus of this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the MudLogParameter.
        /// </summary>
		[Required]
        [Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the MudLogParameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Citation")]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// Description or secondary qualifier pertaining to MudlogParameter or to Value attribute.
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Description or secondary qualifier pertaining to MudlogParameter or to Value attribute.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

		/// <summary>
        /// Unique identifier for this instance of MudLogParameter.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of MudLogParameter.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Citation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Citation", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the Citation xsd type.")]
    public partial class Citation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("One line description/name of the object.  This is the equivalent in ISO 19115 of CI_Citation.title  Legacy DCGroup - title")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Title")]
        public string Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private string TitleField; 

        /// <summary>
        /// Originator property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name (or other human-readable identifier) of the person who initially originated the object or document in the source application. If that information is not available, then this is the user who created the format file. The originator remains the same as the object is subsequently edited.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is \"originator\".  Legacy DCGroup - author")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Originator")]
        public string Originator {
            get {
                return OriginatorField;
            } 
            set {
                OriginatorField = value;
                NotifyPropertyChanged("Originator");
            }
        }

        private string OriginatorField; 

        /// <summary>
        /// Creation property
        /// </summary>
		[Required]
        [Description("Date and time the document was created in the source application or, if that information is not available, when it was saved to the file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation\"  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - created")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("Creation")]
        public DateTime? Creation {
            get {
                return CreationField;
            } 
            set {
                CreationField = value;
                NotifyPropertyChanged("Creation");
            }
        }

        private DateTime? CreationField; 

        /// <summary>
        /// Format property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.  The ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.  SIG Implementation Notes - Legacy DCGroup from v1.1 - publisher - fileExtension is not relevant and will be ignored if present. - vendor and applicationName are mandatory.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Format")]
        public string Format {
            get {
                return FormatField;
            } 
            set {
                FormatField = value;
                NotifyPropertyChanged("Format");
            }
        }

        private string FormatField; 

        /// <summary>
        /// Editor property
        /// </summary>
		[StringLength(64)]
        [Description("Name (or other human-readable identifier) of the last person who updated the object.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is \"editor\".  Legacy DCGroup - contributor")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Editor")]
        public string Editor {
            get {
                return EditorField;
            } 
            set {
                EditorField = value;
                NotifyPropertyChanged("Editor");
            }
        }

        private string EditorField; 

        /// <summary>
        /// LastUpdate property
        /// </summary>
		[Description("Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate\"   Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - modified")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("LastUpdate")]
        public DateTime? LastUpdate {
            get {
                return LastUpdateField;
            } 
            set {
                LastUpdateField = value;
                 this.LastUpdateSpecified = true;
                NotifyPropertyChanged("LastUpdate");
            }
        }

        private DateTime? LastUpdateField; 

        /// <summary>
        /// LastUpdateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastUpdateSpecified {
            get {
                return LastUpdateSpecifiedField;
            } 
            set {
                LastUpdateSpecifiedField = value;
                NotifyPropertyChanged("LastUpdateSpecified");
            }
        }

        private bool LastUpdateSpecifiedField; 

        /// <summary>
        /// VersionString property
        /// </summary>
		[StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("VersionString")]
        public string VersionString {
            get {
                return VersionStringField;
            } 
            set {
                VersionStringField = value;
                NotifyPropertyChanged("VersionString");
            }
        }

        private string VersionStringField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("User descriptive comments about the object. Intended for end-user use (human readable); not necessarily meant to be used by software.  This is the equivalent of the ISO 19115 abstract.CharacterString  Legacy DCGroup - description")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// DescriptiveKeywords property
        /// </summary>
		[StringLength(2000)]
        [Description("Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.  This is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords  Legacy DCGroup - subject")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("DescriptiveKeywords")]
        public string DescriptiveKeywords {
            get {
                return DescriptiveKeywordsField;
            } 
            set {
                DescriptiveKeywordsField = value;
                NotifyPropertyChanged("DescriptiveKeywords");
            }
        }

        private string DescriptiveKeywordsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudLogConcentrationParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudLogConcentrationParameter", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudLogConcentrationParameter xsd type.")]
    public partial class MudLogConcentrationParameter : MudLogParameter, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MudLogConcentrationParameter class.
        /// </summary>
        public MudLogConcentrationParameter() {}

        /// <summary>
        /// Initializes a new instance of the MudLogConcentrationParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MudLogConcentrationParameter(VolumePerVolumeMeasureExt value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasureExt")]
		[XmlElement("Value")]
        public VolumePerVolumeMeasureExt Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private VolumePerVolumeMeasureExt ValueField; 

        /// <summary>
        /// ConcentrationParameterKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ConcentrationParameterKind")]
		[XmlElement("ConcentrationParameterKind")]
        public ConcentrationParameterKind? ConcentrationParameterKind {
            get {
                return ConcentrationParameterKindField;
            } 
            set {
                ConcentrationParameterKindField = value;
                 this.ConcentrationParameterKindSpecified = true;
                NotifyPropertyChanged("ConcentrationParameterKind");
            }
        }

        
        private bool ConcentrationParameterKindSpecifiedField = false;
        
        /// <summary>
        /// ConcentrationParameterKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ConcentrationParameterKindSpecified {
            get {
                return ConcentrationParameterKindSpecifiedField;
            } 
            set {
                ConcentrationParameterKindSpecifiedField = value;
                NotifyPropertyChanged("ConcentrationParameterKindSpecified");
            }
        }
        
        private ConcentrationParameterKind? ConcentrationParameterKindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudLogStringParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudLogStringParameter", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudLogStringParameter xsd type.")]
    public partial class MudLogStringParameter : MudLogParameter, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MudLogStringParameter class.
        /// </summary>
        public MudLogStringParameter() {}

        /// <summary>
        /// Initializes a new instance of the MudLogStringParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MudLogStringParameter(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The value of the parameter as a character string.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Value")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 

        /// <summary>
        /// MudLogStringParameterKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MudLogStringParameterKind")]
		[XmlElement("MudLogStringParameterKind")]
        public MudLogStringParameterKind? MudLogStringParameterKind {
            get {
                return MudLogStringParameterKindField;
            } 
            set {
                MudLogStringParameterKindField = value;
                 this.MudLogStringParameterKindSpecified = true;
                NotifyPropertyChanged("MudLogStringParameterKind");
            }
        }

        
        private bool MudLogStringParameterKindSpecifiedField = false;
        
        /// <summary>
        /// MudLogStringParameterKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MudLogStringParameterKindSpecified {
            get {
                return MudLogStringParameterKindSpecifiedField;
            } 
            set {
                MudLogStringParameterKindSpecifiedField = value;
                NotifyPropertyChanged("MudLogStringParameterKindSpecified");
            }
        }
        
        private MudLogStringParameterKind? MudLogStringParameterKindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudLogPressureGradientParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudLogPressureGradientParameter", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudLogPressureGradientParameter xsd type.")]
    public partial class MudLogPressureGradientParameter : MudLogParameter, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MudLogPressureGradientParameter class.
        /// </summary>
        public MudLogPressureGradientParameter() {}

        /// <summary>
        /// Initializes a new instance of the MudLogPressureGradientParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MudLogPressureGradientParameter(ForcePerVolumeMeasureExt value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("The value of the parameter in pressure gradient units.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeMeasureExt")]
		[XmlElement("Value")]
        public ForcePerVolumeMeasureExt Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private ForcePerVolumeMeasureExt ValueField; 

        /// <summary>
        /// PressureGradientParameterKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PressureGradientParameterKind")]
		[XmlElement("PressureGradientParameterKind")]
        public PressureGradientParameterKind? PressureGradientParameterKind {
            get {
                return PressureGradientParameterKindField;
            } 
            set {
                PressureGradientParameterKindField = value;
                 this.PressureGradientParameterKindSpecified = true;
                NotifyPropertyChanged("PressureGradientParameterKind");
            }
        }

        
        private bool PressureGradientParameterKindSpecifiedField = false;
        
        /// <summary>
        /// PressureGradientParameterKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PressureGradientParameterKindSpecified {
            get {
                return PressureGradientParameterKindSpecifiedField;
            } 
            set {
                PressureGradientParameterKindSpecifiedField = value;
                NotifyPropertyChanged("PressureGradientParameterKindSpecified");
            }
        }
        
        private PressureGradientParameterKind? PressureGradientParameterKindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudLogPressureParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudLogPressureParameter", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudLogPressureParameter xsd type.")]
    public partial class MudLogPressureParameter : MudLogParameter, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MudLogPressureParameter class.
        /// </summary>
        public MudLogPressureParameter() {}

        /// <summary>
        /// Initializes a new instance of the MudLogPressureParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MudLogPressureParameter(PressureMeasureExt value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("The value of the parameter in pressure units.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasureExt")]
		[XmlElement("Value")]
        public PressureMeasureExt Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private PressureMeasureExt ValueField; 

        /// <summary>
        /// PressureParameterKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PressureParameterKind")]
		[XmlElement("PressureParameterKind")]
        public PressureParameterKind? PressureParameterKind {
            get {
                return PressureParameterKindField;
            } 
            set {
                PressureParameterKindField = value;
                 this.PressureParameterKindSpecified = true;
                NotifyPropertyChanged("PressureParameterKind");
            }
        }

        
        private bool PressureParameterKindSpecifiedField = false;
        
        /// <summary>
        /// PressureParameterKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PressureParameterKindSpecified {
            get {
                return PressureParameterKindSpecifiedField;
            } 
            set {
                PressureParameterKindSpecifiedField = value;
                NotifyPropertyChanged("PressureParameterKindSpecified");
            }
        }
        
        private PressureParameterKind? PressureParameterKindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudLogForceParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudLogForceParameter", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudLogForceParameter xsd type.")]
    public partial class MudLogForceParameter : MudLogParameter, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MudLogForceParameter class.
        /// </summary>
        public MudLogForceParameter() {}

        /// <summary>
        /// Initializes a new instance of the MudLogForceParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MudLogForceParameter(ForceMeasureExt value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasureExt")]
		[XmlElement("Value")]
        public ForceMeasureExt Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private ForceMeasureExt ValueField; 

        /// <summary>
        /// ForceParameterKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ForceParameterKind")]
		[XmlElement("ForceParameterKind")]
        public ForceParameterKind? ForceParameterKind {
            get {
                return ForceParameterKindField;
            } 
            set {
                ForceParameterKindField = value;
                 this.ForceParameterKindSpecified = true;
                NotifyPropertyChanged("ForceParameterKind");
            }
        }

        
        private bool ForceParameterKindSpecifiedField = false;
        
        /// <summary>
        /// ForceParameterKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ForceParameterKindSpecified {
            get {
                return ForceParameterKindSpecifiedField;
            } 
            set {
                ForceParameterKindSpecifiedField = value;
                NotifyPropertyChanged("ForceParameterKindSpecified");
            }
        }
        
        private ForceParameterKind? ForceParameterKindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GasPeak xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GasPeak", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GasPeak xsd type.")]
    public partial class GasPeak : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PeakType property
        /// </summary>
		[Required]
        [Description("Type of gas peak")]
        [EnergisticsDataTypeAttribute(DataType = "GasPeakType")]
		[XmlElement("PeakType")]
        public GasPeakType? PeakType {
            get {
                return PeakTypeField;
            } 
            set {
                PeakTypeField = value;
                 this.PeakTypeSpecified = true;
                NotifyPropertyChanged("PeakType");
            }
        }

        
        private bool PeakTypeSpecifiedField = false;
        
        /// <summary>
        /// PeakTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PeakTypeSpecified {
            get {
                return PeakTypeSpecifiedField;
            } 
            set {
                PeakTypeSpecifiedField = value;
                NotifyPropertyChanged("PeakTypeSpecified");
            }
        }
        
        private GasPeakType? PeakTypeField; 

        /// <summary>
        /// MdPeak property
        /// </summary>
		[Description("Measured depth at which the gas reading was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MdPeak")]
        public LengthMeasure MDPeak {
            get {
                return MdPeakField;
            } 
            set {
                MdPeakField = value;
                NotifyPropertyChanged("MDPeak");
            }
        }

        private LengthMeasure MdPeakField; 

        /// <summary>
        /// AverageGas property
        /// </summary>
		[Description("Average total gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("AverageGas")]
        public VolumePerVolumeMeasure AverageGas {
            get {
                return AverageGasField;
            } 
            set {
                AverageGasField = value;
                NotifyPropertyChanged("AverageGas");
            }
        }

        private VolumePerVolumeMeasure AverageGasField; 

        /// <summary>
        /// PeakGas property
        /// </summary>
		[Description("Peak gas reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("PeakGas")]
        public VolumePerVolumeMeasure PeakGas {
            get {
                return PeakGasField;
            } 
            set {
                PeakGasField = value;
                NotifyPropertyChanged("PeakGas");
            }
        }

        private VolumePerVolumeMeasure PeakGasField; 

        /// <summary>
        /// BackgroundGas property
        /// </summary>
		[Description("Background gas reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("BackgroundGas")]
        public VolumePerVolumeMeasure BackgroundGas {
            get {
                return BackgroundGasField;
            } 
            set {
                BackgroundGasField = value;
                NotifyPropertyChanged("BackgroundGas");
            }
        }

        private VolumePerVolumeMeasure BackgroundGasField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DataObjectReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DataObjectReference", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DataObjectReference xsd type.")]
    public partial class DataObjectReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ContentType property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("The content type of the referenced element.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("ContentType")]
        public string ContentType {
            get {
                return ContentTypeField;
            } 
            set {
                ContentTypeField = value;
                NotifyPropertyChanged("ContentType");
            }
        }

        private string ContentTypeField; 

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("The Title of the referenced object. The Title of a top level element would be inherited from AbstractObject and must be present on any referenced object.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Title")]
        public string Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private string TitleField; 

        /// <summary>
        /// Uuid property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("Reference to an object using its global UID.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("Uuid")]
        public string Uuid {
            get {
                return UuidField;
            } 
            set {
                UuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string UuidField; 

        /// <summary>
        /// UuidAuthority property
        /// </summary>
		[StringLength(64)]
        [Description("The authority that issued and maintains the uuid of the referenced object. Used mainly in alias context.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("UuidAuthority")]
        public string UuidAuthority {
            get {
                return UuidAuthorityField;
            } 
            set {
                UuidAuthorityField = value;
                NotifyPropertyChanged("UuidAuthority");
            }
        }

        private string UuidAuthorityField; 

        /// <summary>
        /// Uri property
        /// </summary>
		[Description("This is the URI of a referenced object.   Do not use this to store the path and file names of an external object - that is done through the External Dataset machinery.  This element is intended for use with the Energistics Transfer Protocol.")]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
		[XmlElement("Uri", DataType="anyURI")]
        public string Uri {
            get {
                return UriField;
            } 
            set {
                UriField = value;
                NotifyPropertyChanged("Uri");
            }
        }

        private string UriField; 

        /// <summary>
        /// VersionString property
        /// </summary>
		[StringLength(64)]
        [Description("Indicates the version of the object which is referenced.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("VersionString")]
        public string VersionString {
            get {
                return VersionStringField;
            } 
            set {
                VersionStringField = value;
                NotifyPropertyChanged("VersionString");
            }
        }

        private string VersionStringField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GasInMud xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GasInMud", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GasInMud xsd type.")]
    public partial class GasInMud : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average property
        /// </summary>
		[Description("Average percentage of gas in the mud.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Average")]
        public VolumePerVolumeMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private VolumePerVolumeMeasure AverageField; 

        /// <summary>
        /// Maximum property
        /// </summary>
		[Description("Maximum percentage of gas in the mud.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Maximum")]
        public VolumePerVolumeMeasure Maximum {
            get {
                return MaximumField;
            } 
            set {
                MaximumField = value;
                NotifyPropertyChanged("Maximum");
            }
        }

        private VolumePerVolumeMeasure MaximumField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudGas xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudGas", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudGas xsd type.")]
    public partial class MudGas : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GasInMud property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GasInMud")]
		[XmlElement("GasInMud")]
        public GasInMud GasInMud {
            get {
                return GasInMudField;
            } 
            set {
                GasInMudField = value;
                NotifyPropertyChanged("GasInMud");
            }
        }

        private GasInMud GasInMudField; 

        /// <summary>
        /// GasPeak property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GasPeak")]
		[XmlElement("GasPeak")]
        public List<GasPeak> GasPeak {
            get {
                return GasPeakField;
            } 
            set {
                GasPeakField = value;
                NotifyPropertyChanged("GasPeak");
            }
        }

         /// <summary>
         /// bool to indicate if GasPeak has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GasPeakSpecified
         {
             get {
             if(GasPeakField!=null)
                 return GasPeakField.Count>0?true:false;
             else return false;
             }
         }
        private List<GasPeak> GasPeakField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DxcStatistics xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DxcStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DxcStatistics xsd type.")]
    public partial class DxcStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Corrected drilling exponent calculated for the interval.
        /// </summary>
		[Description("Corrected drilling exponent calculated for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Average")]
        public DimensionlessMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private DimensionlessMeasure AverageField; 

        /// <summary>
        /// Log channel from which the drilling coefficient statistics were calculated.
        /// </summary>
		[Description("Log channel from which the drilling coefficient statistics were calculated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EcdStatistics xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EcdStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the EcdStatistics xsd type.")]
    public partial class EcdStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average equivalent circulating density at TD through the interval.
        /// </summary>
		[Description("Average equivalent circulating density at TD through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Average")]
        public MassPerVolumeMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private MassPerVolumeMeasure AverageField; 

        /// <summary>
        /// Log channel from which the equivalent circulating density at TD statistics were calculated.
        /// </summary>
		[Description("Log channel from which the equivalent circulating density at TD statistics were calculated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudDensityStatistics xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudDensityStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudDensityStatistics xsd type.")]
    public partial class MudDensityStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average mud density through the interval.
        /// </summary>
		[Description("Average mud density through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Average")]
        public MassPerVolumeMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private MassPerVolumeMeasure AverageField; 

        /// <summary>
        /// Log channel from which the mud density statistics were calculated.
        /// </summary>
		[Description("Log channel from which the mud density statistics were calculated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RpmStatistics xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RpmStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RpmStatistics xsd type.")]
    public partial class RpmStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average bit turn rate through the interval.
        /// </summary>
		[Description("Average bit turn rate through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("Average")]
        public AngularVelocityMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private AngularVelocityMeasure AverageField; 

        /// <summary>
        /// Log channel from which the turn rate statistics were calculated.
        /// </summary>
		[Description("Log channel from which the turn rate statistics were calculated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ElectricCurrentMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ElectricCurrentMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ElectricCurrentMeasure xsd type.")]
    public partial class ElectricCurrentMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        public ElectricCurrentMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricCurrentMeasure(double value, ElectricCurrentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ElectricCurrentUom")]
        [XmlAttribute("uom")]
		
        public ElectricCurrentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricCurrentUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TorqueCurrentStatistics xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TorqueCurrentStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TorqueCurrentStatistics xsd type.")]
    public partial class TorqueCurrentStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average electric current through the interval
        /// </summary>
		[Description("Average electric current through the interval")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ElectricCurrentMeasure")]
		[XmlElement("Average")]
        public ElectricCurrentMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private ElectricCurrentMeasure AverageField; 

        /// <summary>
        /// Log channel from which the electric current statistics were calculated.
        /// </summary>
		[Description("Log channel from which the electric current statistics were calculated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TorqueStatistics xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TorqueStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TorqueStatistics xsd type.")]
    public partial class TorqueStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average torque through the interval.
        /// </summary>
		[Description("Average torque through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("Average")]
        public MomentOfForceMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private MomentOfForceMeasure AverageField; 

        /// <summary>
        /// Log channel from which the torque statistics were calculated.
        /// </summary>
		[Description("Log channel from which the torque statistics were calculated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MomentOfForceMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MomentOfForceMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MomentOfForceMeasure xsd type.")]
    public partial class MomentOfForceMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MomentOfForceMeasure class.
        /// </summary>
        public MomentOfForceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MomentOfForceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MomentOfForceMeasure(double value, MomentOfForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceUom")]
        [XmlAttribute("uom")]
		
        public MomentOfForceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MomentOfForceUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WobStatistics xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WobStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the WobStatistics xsd type.")]
    public partial class WobStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average weight on bit through the interval.
        /// </summary>
		[Description("Average weight on bit through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("Average")]
        public ForceMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private ForceMeasure AverageField; 

        /// <summary>
        /// Log channel from which the WOB statistics were calculated.
        /// </summary>
		[Description("Log channel from which the WOB statistics were calculated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ForceMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ForceMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ForceMeasure xsd type.")]
    public partial class ForceMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForceMeasure class.
        /// </summary>
        public ForceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForceMeasure(double value, ForceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ForceUom")]
        [XmlAttribute("uom")]
		
        public ForceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForceUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RopStatistics xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RopStatistics", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RopStatistics xsd type.")]
    public partial class RopStatistics : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Average rate of penetration through the interval.
        /// </summary>
		[Description("Average rate of penetration through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("Average")]
        public LengthPerTimeMeasure Average {
            get {
                return AverageField;
            } 
            set {
                AverageField = value;
                NotifyPropertyChanged("Average");
            }
        }

        private LengthPerTimeMeasure AverageField; 

        /// <summary>
        /// Minimum rate of penetration through the interval.
        /// </summary>
		[Description("Minimum rate of penetration through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("Minimum")]
        public LengthPerTimeMeasure Minimum {
            get {
                return MinimumField;
            } 
            set {
                MinimumField = value;
                NotifyPropertyChanged("Minimum");
            }
        }

        private LengthPerTimeMeasure MinimumField; 

        /// <summary>
        /// Maximum rate of penetration through the interval.
        /// </summary>
		[Description("Maximum rate of penetration through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("Maximum")]
        public LengthPerTimeMeasure Maximum {
            get {
                return MaximumField;
            } 
            set {
                MaximumField = value;
                NotifyPropertyChanged("Maximum");
            }
        }

        private LengthPerTimeMeasure MaximumField; 

        /// <summary>
        /// Log channel from which the ROP statistics were calculated.
        /// </summary>
		[Description("Log channel from which the ROP statistics were calculated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthPerTimeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthPerTimeMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthPerTimeMeasure xsd type.")]
    public partial class LengthPerTimeMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthPerTimeMeasure class.
        /// </summary>
        public LengthPerTimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthPerTimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthPerTimeMeasure(double value, LengthPerTimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeUom")]
        [XmlAttribute("uom")]
		
        public LengthPerTimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthPerTimeUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillingParameters xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillingParameters", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillingParameters xsd type.")]
    public partial class DrillingParameters : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Rate of penetration through the interval.
        /// </summary>
		[Description("Rate of penetration through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RopStatistics")]
		[XmlElement("Rop")]
        public RopStatistics Rop {
            get {
                return RopField;
            } 
            set {
                RopField = value;
                NotifyPropertyChanged("Rop");
            }
        }

        private RopStatistics RopField; 

        /// <summary>
        /// Surface weight on bit: average through the interval.
        /// </summary>
		[Description("Surface weight on bit: average through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WobStatistics")]
		[XmlElement("AverageWeightOnBit")]
        public WobStatistics AverageWeightOnBit {
            get {
                return AverageWeightOnBitField;
            } 
            set {
                AverageWeightOnBitField = value;
                NotifyPropertyChanged("AverageWeightOnBit");
            }
        }

        private WobStatistics AverageWeightOnBitField; 

        /// <summary>
        /// Average torque through the interval.
        /// </summary>
		[Description("Average torque through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TorqueStatistics")]
		[XmlElement("AverageTorque")]
        public TorqueStatistics AverageTorque {
            get {
                return AverageTorqueField;
            } 
            set {
                AverageTorqueField = value;
                NotifyPropertyChanged("AverageTorque");
            }
        }

        private TorqueStatistics AverageTorqueField; 

        /// <summary>
        /// Average torque current through the interval. This is the raw measurement from which the average torque can be calculated.
        /// </summary>
		[Description("Average torque current through the interval. This is the raw measurement from which the average torque can be calculated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TorqueCurrentStatistics")]
		[XmlElement("AverageTorqueCurrent")]
        public TorqueCurrentStatistics AverageTorqueCurrent {
            get {
                return AverageTorqueCurrentField;
            } 
            set {
                AverageTorqueCurrentField = value;
                NotifyPropertyChanged("AverageTorqueCurrent");
            }
        }

        private TorqueCurrentStatistics AverageTorqueCurrentField; 

        /// <summary>
        /// Average turn rate through the interval (commonly in rpm).
        /// </summary>
		[Description("Average turn rate through the interval (commonly in rpm).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RpmStatistics")]
		[XmlElement("AverageTurnRate")]
        public RpmStatistics AverageTurnRate {
            get {
                return AverageTurnRateField;
            } 
            set {
                AverageTurnRateField = value;
                NotifyPropertyChanged("AverageTurnRate");
            }
        }

        private RpmStatistics AverageTurnRateField; 

        /// <summary>
        /// Average mud density through the interval.
        /// </summary>
		[Description("Average mud density through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MudDensityStatistics")]
		[XmlElement("AverageMudDensity")]
        public MudDensityStatistics AverageMudDensity {
            get {
                return AverageMudDensityField;
            } 
            set {
                AverageMudDensityField = value;
                NotifyPropertyChanged("AverageMudDensity");
            }
        }

        private MudDensityStatistics AverageMudDensityField; 

        /// <summary>
        /// Average effective circulating density at TD through the interval.
        /// </summary>
		[Description("Average effective circulating density at TD through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EcdStatistics")]
		[XmlElement("AverageEcdAtTd")]
        public EcdStatistics AverageEcdAtTd {
            get {
                return AverageEcdAtTdField;
            } 
            set {
                AverageEcdAtTdField = value;
                NotifyPropertyChanged("AverageEcdAtTd");
            }
        }

        private EcdStatistics AverageEcdAtTdField; 

        /// <summary>
        /// Average drilling exponent through the interval.
        /// </summary>
		[Description("Average drilling exponent through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DxcStatistics")]
		[XmlElement("AverageDrillingCoefficient")]
        public DxcStatistics AverageDrillingCoefficient {
            get {
                return AverageDrillingCoefficientField;
            } 
            set {
                AverageDrillingCoefficientField = value;
                NotifyPropertyChanged("AverageDrillingCoefficient");
            }
        }

        private DxcStatistics AverageDrillingCoefficientField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Chromatograph xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Chromatograph", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Chromatograph xsd type.")]
    public partial class Chromatograph : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ChromatographMdInterval property
        /// </summary>
		[Description("Measured interval related to the chromatograph results.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("ChromatographMdInterval")]
        public MdInterval ChromatographMDInterval {
            get {
                return ChromatographMdIntervalField;
            } 
            set {
                ChromatographMdIntervalField = value;
                NotifyPropertyChanged("ChromatographMDInterval");
            }
        }

        private MdInterval ChromatographMdIntervalField; 

        /// <summary>
        /// DateTimeGasSampleProcessed property
        /// </summary>
		[Description("The date and time at which the gas sample was processed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DateTimeGasSampleProcessed")]
        public Timestamp? DateTimeGasSampleProcessed {
            get {
                return DateTimeGasSampleProcessedField;
            } 
            set {
                DateTimeGasSampleProcessedField = value;
                 this.DateTimeGasSampleProcessedSpecified = true;
                NotifyPropertyChanged("DateTimeGasSampleProcessed");
            }
        }

        
        private bool DateTimeGasSampleProcessedSpecifiedField = false;
        
        /// <summary>
        /// DateTimeGasSampleProcessedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeGasSampleProcessedSpecified {
            get {
                return DateTimeGasSampleProcessedSpecifiedField;
            } 
            set {
                DateTimeGasSampleProcessedSpecifiedField = value;
                NotifyPropertyChanged("DateTimeGasSampleProcessedSpecified");
            }
        }
        
        private Timestamp? DateTimeGasSampleProcessedField; 

        /// <summary>
        /// ChromatographType property
        /// </summary>
		[StringLength(64)]
        [Description("Chromatograph type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ChromatographType")]
        public string ChromatographType {
            get {
                return ChromatographTypeField;
            } 
            set {
                ChromatographTypeField = value;
                NotifyPropertyChanged("ChromatographType");
            }
        }

        private string ChromatographTypeField; 

        /// <summary>
        /// ETimChromCycle property
        /// </summary>
		[Description("Chromatograph cycle time. Commonly in seconds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimChromCycle")]
        public TimeMeasure ETimeChromCycle {
            get {
                return ETimChromCycleField;
            } 
            set {
                ETimChromCycleField = value;
                NotifyPropertyChanged("ETimeChromCycle");
            }
        }

        private TimeMeasure ETimChromCycleField; 

        /// <summary>
        /// ChromReportTime property
        /// </summary>
		[Description("Chromatograph integrator report time; format may be variable due to recording equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("ChromReportTime")]
        public Timestamp? ChromReportTime {
            get {
                return ChromReportTimeField;
            } 
            set {
                ChromReportTimeField = value;
                 this.ChromReportTimeSpecified = true;
                NotifyPropertyChanged("ChromReportTime");
            }
        }

        
        private bool ChromReportTimeSpecifiedField = false;
        
        /// <summary>
        /// ChromReportTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ChromReportTimeSpecified {
            get {
                return ChromReportTimeSpecifiedField;
            } 
            set {
                ChromReportTimeSpecifiedField = value;
                NotifyPropertyChanged("ChromReportTimeSpecified");
            }
        }
        
        private Timestamp? ChromReportTimeField; 

        /// <summary>
        /// MudWeightIn property
        /// </summary>
		[Description("Mud density in (active pits).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("MudWeightIn")]
        public MassPerVolumeMeasure MudWeightIn {
            get {
                return MudWeightInField;
            } 
            set {
                MudWeightInField = value;
                NotifyPropertyChanged("MudWeightIn");
            }
        }

        private MassPerVolumeMeasure MudWeightInField; 

        /// <summary>
        /// MudWeightOut property
        /// </summary>
		[Description("Mud density out (flowline).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("MudWeightOut")]
        public MassPerVolumeMeasure MudWeightOut {
            get {
                return MudWeightOutField;
            } 
            set {
                MudWeightOutField = value;
                NotifyPropertyChanged("MudWeightOut");
            }
        }

        private MassPerVolumeMeasure MudWeightOutField; 

        /// <summary>
        /// MethAv property
        /// </summary>
		[Description("Methane (C1) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("MethAv")]
        public VolumePerVolumeMeasure MethAverage {
            get {
                return MethAvField;
            } 
            set {
                MethAvField = value;
                NotifyPropertyChanged("MethAverage");
            }
        }

        private VolumePerVolumeMeasure MethAvField; 

        /// <summary>
        /// MethMn property
        /// </summary>
		[Description("Methane (C1) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("MethMn")]
        public VolumePerVolumeMeasure MethMin {
            get {
                return MethMnField;
            } 
            set {
                MethMnField = value;
                NotifyPropertyChanged("MethMin");
            }
        }

        private VolumePerVolumeMeasure MethMnField; 

        /// <summary>
        /// MethMx property
        /// </summary>
		[Description("Methane (C1) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("MethMx")]
        public VolumePerVolumeMeasure MethMax {
            get {
                return MethMxField;
            } 
            set {
                MethMxField = value;
                NotifyPropertyChanged("MethMax");
            }
        }

        private VolumePerVolumeMeasure MethMxField; 

        /// <summary>
        /// EthAv property
        /// </summary>
		[Description("Ethane (C2) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("EthAv")]
        public VolumePerVolumeMeasure EthAverage {
            get {
                return EthAvField;
            } 
            set {
                EthAvField = value;
                NotifyPropertyChanged("EthAverage");
            }
        }

        private VolumePerVolumeMeasure EthAvField; 

        /// <summary>
        /// EthMn property
        /// </summary>
		[Description("Ethane (C2) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("EthMn")]
        public VolumePerVolumeMeasure EthMin {
            get {
                return EthMnField;
            } 
            set {
                EthMnField = value;
                NotifyPropertyChanged("EthMin");
            }
        }

        private VolumePerVolumeMeasure EthMnField; 

        /// <summary>
        /// EthMx property
        /// </summary>
		[Description("Ethane (C2) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("EthMx")]
        public VolumePerVolumeMeasure EthMax {
            get {
                return EthMxField;
            } 
            set {
                EthMxField = value;
                NotifyPropertyChanged("EthMax");
            }
        }

        private VolumePerVolumeMeasure EthMxField; 

        /// <summary>
        /// PropAv property
        /// </summary>
		[Description("Propane (C3) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("PropAv")]
        public VolumePerVolumeMeasure PropAverage {
            get {
                return PropAvField;
            } 
            set {
                PropAvField = value;
                NotifyPropertyChanged("PropAverage");
            }
        }

        private VolumePerVolumeMeasure PropAvField; 

        /// <summary>
        /// PropMn property
        /// </summary>
		[Description("Propane (C3) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("PropMn")]
        public VolumePerVolumeMeasure PropMin {
            get {
                return PropMnField;
            } 
            set {
                PropMnField = value;
                NotifyPropertyChanged("PropMin");
            }
        }

        private VolumePerVolumeMeasure PropMnField; 

        /// <summary>
        /// PropMx property
        /// </summary>
		[Description("Propane (C3) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("PropMx")]
        public VolumePerVolumeMeasure PropMax {
            get {
                return PropMxField;
            } 
            set {
                PropMxField = value;
                NotifyPropertyChanged("PropMax");
            }
        }

        private VolumePerVolumeMeasure PropMxField; 

        /// <summary>
        /// IbutAv property
        /// </summary>
		[Description("iso-Butane (iC4) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("IbutAv")]
        public VolumePerVolumeMeasure IbutAverage {
            get {
                return IbutAvField;
            } 
            set {
                IbutAvField = value;
                NotifyPropertyChanged("IbutAverage");
            }
        }

        private VolumePerVolumeMeasure IbutAvField; 

        /// <summary>
        /// IbutMn property
        /// </summary>
		[Description("iso-Butane (iC4) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("IbutMn")]
        public VolumePerVolumeMeasure IbutMin {
            get {
                return IbutMnField;
            } 
            set {
                IbutMnField = value;
                NotifyPropertyChanged("IbutMin");
            }
        }

        private VolumePerVolumeMeasure IbutMnField; 

        /// <summary>
        /// IbutMx property
        /// </summary>
		[Description("iso-Butane (iC4) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("IbutMx")]
        public VolumePerVolumeMeasure IbutMax {
            get {
                return IbutMxField;
            } 
            set {
                IbutMxField = value;
                NotifyPropertyChanged("IbutMax");
            }
        }

        private VolumePerVolumeMeasure IbutMxField; 

        /// <summary>
        /// NbutAv property
        /// </summary>
		[Description("nor-Butane (nC4) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("NbutAv")]
        public VolumePerVolumeMeasure NbutAverage {
            get {
                return NbutAvField;
            } 
            set {
                NbutAvField = value;
                NotifyPropertyChanged("NbutAverage");
            }
        }

        private VolumePerVolumeMeasure NbutAvField; 

        /// <summary>
        /// NbutMn property
        /// </summary>
		[Description("nor-Butane (nC4) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("NbutMn")]
        public VolumePerVolumeMeasure NbutMin {
            get {
                return NbutMnField;
            } 
            set {
                NbutMnField = value;
                NotifyPropertyChanged("NbutMin");
            }
        }

        private VolumePerVolumeMeasure NbutMnField; 

        /// <summary>
        /// NbutMx property
        /// </summary>
		[Description("nor-Butane (nC4) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("NbutMx")]
        public VolumePerVolumeMeasure NbutMax {
            get {
                return NbutMxField;
            } 
            set {
                NbutMxField = value;
                NotifyPropertyChanged("NbutMax");
            }
        }

        private VolumePerVolumeMeasure NbutMxField; 

        /// <summary>
        /// IpentAv property
        /// </summary>
		[Description("iso-Pentane (iC5) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("IpentAv")]
        public VolumePerVolumeMeasure IpentAverage {
            get {
                return IpentAvField;
            } 
            set {
                IpentAvField = value;
                NotifyPropertyChanged("IpentAverage");
            }
        }

        private VolumePerVolumeMeasure IpentAvField; 

        /// <summary>
        /// IpentMn property
        /// </summary>
		[Description("iso-Pentane (iC5) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("IpentMn")]
        public VolumePerVolumeMeasure IpentMin {
            get {
                return IpentMnField;
            } 
            set {
                IpentMnField = value;
                NotifyPropertyChanged("IpentMin");
            }
        }

        private VolumePerVolumeMeasure IpentMnField; 

        /// <summary>
        /// IpentMx property
        /// </summary>
		[Description("iso-Pentane (iC5) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("IpentMx")]
        public VolumePerVolumeMeasure IpentMax {
            get {
                return IpentMxField;
            } 
            set {
                IpentMxField = value;
                NotifyPropertyChanged("IpentMax");
            }
        }

        private VolumePerVolumeMeasure IpentMxField; 

        /// <summary>
        /// NpentAv property
        /// </summary>
		[Description("nor-Pentane (nC5) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("NpentAv")]
        public VolumePerVolumeMeasure NpentAverage {
            get {
                return NpentAvField;
            } 
            set {
                NpentAvField = value;
                NotifyPropertyChanged("NpentAverage");
            }
        }

        private VolumePerVolumeMeasure NpentAvField; 

        /// <summary>
        /// NpentMn property
        /// </summary>
		[Description("nor-Pentane (nC5) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("NpentMn")]
        public VolumePerVolumeMeasure NpentMin {
            get {
                return NpentMnField;
            } 
            set {
                NpentMnField = value;
                NotifyPropertyChanged("NpentMin");
            }
        }

        private VolumePerVolumeMeasure NpentMnField; 

        /// <summary>
        /// NpentMx property
        /// </summary>
		[Description("nor-Pentane (nC5) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("NpentMx")]
        public VolumePerVolumeMeasure NpentMax {
            get {
                return NpentMxField;
            } 
            set {
                NpentMxField = value;
                NotifyPropertyChanged("NpentMax");
            }
        }

        private VolumePerVolumeMeasure NpentMxField; 

        /// <summary>
        /// EpentAv property
        /// </summary>
		[Description("neo-Pentane (eC5) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("EpentAv")]
        public VolumePerVolumeMeasure EpentAverage {
            get {
                return EpentAvField;
            } 
            set {
                EpentAvField = value;
                NotifyPropertyChanged("EpentAverage");
            }
        }

        private VolumePerVolumeMeasure EpentAvField; 

        /// <summary>
        /// EpentMn property
        /// </summary>
		[Description("neo-Pentane (eC5) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("EpentMn")]
        public VolumePerVolumeMeasure EpentMin {
            get {
                return EpentMnField;
            } 
            set {
                EpentMnField = value;
                NotifyPropertyChanged("EpentMin");
            }
        }

        private VolumePerVolumeMeasure EpentMnField; 

        /// <summary>
        /// EpentMx property
        /// </summary>
		[Description("neo-Pentane (eC5) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("EpentMx")]
        public VolumePerVolumeMeasure EpentMax {
            get {
                return EpentMxField;
            } 
            set {
                EpentMxField = value;
                NotifyPropertyChanged("EpentMax");
            }
        }

        private VolumePerVolumeMeasure EpentMxField; 

        /// <summary>
        /// IhexAv property
        /// </summary>
		[Description("iso-Hexane (iC6) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("IhexAv")]
        public VolumePerVolumeMeasure IhexAverage {
            get {
                return IhexAvField;
            } 
            set {
                IhexAvField = value;
                NotifyPropertyChanged("IhexAverage");
            }
        }

        private VolumePerVolumeMeasure IhexAvField; 

        /// <summary>
        /// IhexMn property
        /// </summary>
		[Description("iso-Hexane (iC6) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("IhexMn")]
        public VolumePerVolumeMeasure IhexMin {
            get {
                return IhexMnField;
            } 
            set {
                IhexMnField = value;
                NotifyPropertyChanged("IhexMin");
            }
        }

        private VolumePerVolumeMeasure IhexMnField; 

        /// <summary>
        /// IhexMx property
        /// </summary>
		[Description("iso-Hexane (iC6) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("IhexMx")]
        public VolumePerVolumeMeasure IhexMax {
            get {
                return IhexMxField;
            } 
            set {
                IhexMxField = value;
                NotifyPropertyChanged("IhexMax");
            }
        }

        private VolumePerVolumeMeasure IhexMxField; 

        /// <summary>
        /// NhexAv property
        /// </summary>
		[Description("nor-Hexane (nC6) ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("NhexAv")]
        public VolumePerVolumeMeasure NhexAverage {
            get {
                return NhexAvField;
            } 
            set {
                NhexAvField = value;
                NotifyPropertyChanged("NhexAverage");
            }
        }

        private VolumePerVolumeMeasure NhexAvField; 

        /// <summary>
        /// NhexMn property
        /// </summary>
		[Description("nor-Hexane (nC6) ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("NhexMn")]
        public VolumePerVolumeMeasure NhexMin {
            get {
                return NhexMnField;
            } 
            set {
                NhexMnField = value;
                NotifyPropertyChanged("NhexMin");
            }
        }

        private VolumePerVolumeMeasure NhexMnField; 

        /// <summary>
        /// NhexMx property
        /// </summary>
		[Description("nor-Hexane (nC6) ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("NhexMx")]
        public VolumePerVolumeMeasure NhexMax {
            get {
                return NhexMxField;
            } 
            set {
                NhexMxField = value;
                NotifyPropertyChanged("NhexMax");
            }
        }

        private VolumePerVolumeMeasure NhexMxField; 

        /// <summary>
        /// Co2Av property
        /// </summary>
		[Description("Carbon Dioxide ppm (average).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Co2Av")]
        public VolumePerVolumeMeasure Co2Average {
            get {
                return Co2AvField;
            } 
            set {
                Co2AvField = value;
                NotifyPropertyChanged("Co2Average");
            }
        }

        private VolumePerVolumeMeasure Co2AvField; 

        /// <summary>
        /// Co2Mn property
        /// </summary>
		[Description("Carbon Dioxide ppm (minimum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Co2Mn")]
        public VolumePerVolumeMeasure Co2Min {
            get {
                return Co2MnField;
            } 
            set {
                Co2MnField = value;
                NotifyPropertyChanged("Co2Min");
            }
        }

        private VolumePerVolumeMeasure Co2MnField; 

        /// <summary>
        /// Co2Mx property
        /// </summary>
		[Description("Carbon Dioxide ppm (maximum).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Co2Mx")]
        public VolumePerVolumeMeasure Co2Max {
            get {
                return Co2MxField;
            } 
            set {
                Co2MxField = value;
                NotifyPropertyChanged("Co2Max");
            }
        }

        private VolumePerVolumeMeasure Co2MxField; 

        /// <summary>
        /// H2sAv property
        /// </summary>
		[Description("Hydrogen Sulfide (average) ppm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("H2sAv")]
        public VolumePerVolumeMeasure H2sAverage {
            get {
                return H2sAvField;
            } 
            set {
                H2sAvField = value;
                NotifyPropertyChanged("H2sAverage");
            }
        }

        private VolumePerVolumeMeasure H2sAvField; 

        /// <summary>
        /// H2sMn property
        /// </summary>
		[Description("Hydrogen Sulfide (minimum) ppm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("H2sMn")]
        public VolumePerVolumeMeasure H2sMin {
            get {
                return H2sMnField;
            } 
            set {
                H2sMnField = value;
                NotifyPropertyChanged("H2sMin");
            }
        }

        private VolumePerVolumeMeasure H2sMnField; 

        /// <summary>
        /// H2sMx property
        /// </summary>
		[Description("Hydrogen Sulfide (maximum) ppm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("H2sMx")]
        public VolumePerVolumeMeasure H2sMax {
            get {
                return H2sMxField;
            } 
            set {
                H2sMxField = value;
                NotifyPropertyChanged("H2sMax");
            }
        }

        private VolumePerVolumeMeasure H2sMxField; 

        /// <summary>
        /// Acetylene property
        /// </summary>
		[Description("Acetylene.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Acetylene")]
        public VolumePerVolumeMeasure Acetylene {
            get {
                return AcetyleneField;
            } 
            set {
                AcetyleneField = value;
                NotifyPropertyChanged("Acetylene");
            }
        }

        private VolumePerVolumeMeasure AcetyleneField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Channel")]
        public DataObjectReference Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

        private DataObjectReference ChannelField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the MudlogReportInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_MudLogReportInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the MudlogReportInterval xsd type.")]
    public partial class MudlogReportInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("Measured depth interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// CuttingsGeologyInterval property
        /// </summary>
		[Description("The cuttings geology interval that is part of this mud log report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("CuttingsGeologyInterval")]
        public DataObjectReference CuttingsGeologyInterval {
            get {
                return CuttingsGeologyIntervalField;
            } 
            set {
                CuttingsGeologyIntervalField = value;
                NotifyPropertyChanged("CuttingsGeologyInterval");
            }
        }

        private DataObjectReference CuttingsGeologyIntervalField; 

        /// <summary>
        /// InterpretedGeologyInterval property
        /// </summary>
		[Description("The interpreted geology interval that is part of this mud log report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("InterpretedGeologyInterval")]
        public DataObjectReference InterpretedGeologyInterval {
            get {
                return InterpretedGeologyIntervalField;
            } 
            set {
                InterpretedGeologyIntervalField = value;
                NotifyPropertyChanged("InterpretedGeologyInterval");
            }
        }

        private DataObjectReference InterpretedGeologyIntervalField; 

        /// <summary>
        /// ShowEvaluationInterval property
        /// </summary>
		[Description("The show evaluation interval that is part of this mud log report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ShowEvaluationInterval")]
        public DataObjectReference ShowEvaluationInterval {
            get {
                return ShowEvaluationIntervalField;
            } 
            set {
                ShowEvaluationIntervalField = value;
                NotifyPropertyChanged("ShowEvaluationInterval");
            }
        }

        private DataObjectReference ShowEvaluationIntervalField; 

        /// <summary>
        /// Chromatograph property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Chromatograph")]
		[XmlElement("Chromatograph")]
        public Chromatograph Chromatograph {
            get {
                return ChromatographField;
            } 
            set {
                ChromatographField = value;
                NotifyPropertyChanged("Chromatograph");
            }
        }

        private Chromatograph ChromatographField; 

        /// <summary>
        /// DrillingParameters property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillingParameters")]
		[XmlElement("DrillingParameters")]
        public List<DrillingParameters> DrillingParameters {
            get {
                return DrillingParametersField;
            } 
            set {
                DrillingParametersField = value;
                NotifyPropertyChanged("DrillingParameters");
            }
        }

         /// <summary>
         /// bool to indicate if DrillingParameters has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DrillingParametersSpecified
         {
             get {
             if(DrillingParametersField!=null)
                 return DrillingParametersField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillingParameters> DrillingParametersField; 

        /// <summary>
        /// MudGas property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "MudGas")]
		[XmlElement("MudGas")]
        public List<MudGas> MudGas {
            get {
                return MudGasField;
            } 
            set {
                MudGasField = value;
                NotifyPropertyChanged("MudGas");
            }
        }

         /// <summary>
         /// bool to indicate if MudGas has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MudGasSpecified
         {
             get {
             if(MudGasField!=null)
                 return MudGasField.Count>0?true:false;
             else return false;
             }
         }
        private List<MudGas> MudGasField; 

		/// <summary>
        /// Unique identifier for this instance of MudLogReportInterval.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of MudLogReportInterval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CuttingsIntervalShow xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CuttingsIntervalShow", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CuttingsIntervalShow xsd type.")]
    public partial class CuttingsIntervalShow : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the CuttingsIntervalShow.
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the CuttingsIntervalShow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Citation")]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// Show Rating. 
        /// </summary>
		[Description("Show Rating.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowRating")]
		[XmlElement("ShowRating")]
        public ShowRating? ShowRating {
            get {
                return ShowRatingField;
            } 
            set {
                ShowRatingField = value;
                 this.ShowRatingSpecified = true;
                NotifyPropertyChanged("ShowRating");
            }
        }

        private ShowRating? ShowRatingField; 

        /// <summary>
        /// ShowRatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShowRatingSpecified {
            get {
                return ShowRatingSpecifiedField;
            } 
            set {
                ShowRatingSpecifiedField = value;
                NotifyPropertyChanged("ShowRatingSpecified");
            }
        }

        private bool ShowRatingSpecifiedField; 

        /// <summary>
        /// Visible stain color. 
        /// </summary>
		[StringLength(64)]
        [Description("Visible stain color.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StainColor")]
        public string StainColor {
            get {
                return StainColorField;
            } 
            set {
                StainColorField = value;
                NotifyPropertyChanged("StainColor");
            }
        }

        private string StainColorField; 

        /// <summary>
        /// Visible stain distribution. 
        /// </summary>
		[StringLength(64)]
        [Description("Visible stain distribution.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StainDistr")]
        public string StainDistr {
            get {
                return StainDistrField;
            } 
            set {
                StainDistrField = value;
                NotifyPropertyChanged("StainDistr");
            }
        }

        private string StainDistrField; 

        /// <summary>
        /// Visible stain (commonly in percent). 
        /// </summary>
		[Description("Visible stain (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaPerAreaMeasure")]
		[XmlElement("StainPc")]
        public AreaPerAreaMeasure StainPercent {
            get {
                return StainPcField;
            } 
            set {
                StainPcField = value;
                NotifyPropertyChanged("StainPercent");
            }
        }

        private AreaPerAreaMeasure StainPcField; 

        /// <summary>
        /// Cut speed. 
        /// </summary>
		[Description("Cut speed.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowSpeed")]
		[XmlElement("CutSpeed")]
        public ShowSpeed? CutSpeed {
            get {
                return CutSpeedField;
            } 
            set {
                CutSpeedField = value;
                 this.CutSpeedSpecified = true;
                NotifyPropertyChanged("CutSpeed");
            }
        }

        private ShowSpeed? CutSpeedField; 

        /// <summary>
        /// CutSpeedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CutSpeedSpecified {
            get {
                return CutSpeedSpecifiedField;
            } 
            set {
                CutSpeedSpecifiedField = value;
                NotifyPropertyChanged("CutSpeedSpecified");
            }
        }

        private bool CutSpeedSpecifiedField; 

        /// <summary>
        /// Cut color. 
        /// </summary>
		[StringLength(64)]
        [Description("Cut color.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CutColor")]
        public string CutColor {
            get {
                return CutColorField;
            } 
            set {
                CutColorField = value;
                NotifyPropertyChanged("CutColor");
            }
        }

        private string CutColorField; 

        /// <summary>
        /// Cut strength. 
        /// </summary>
		[StringLength(64)]
        [Description("Cut strength.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CutStrength")]
        public string CutStrength {
            get {
                return CutStrengthField;
            } 
            set {
                CutStrengthField = value;
                NotifyPropertyChanged("CutStrength");
            }
        }

        private string CutStrengthField; 

        /// <summary>
        /// Cut formulation. 
        /// </summary>
		[Description("Cut formulation.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowLevel")]
		[XmlElement("CutForm")]
        public ShowLevel? CutForm {
            get {
                return CutFormField;
            } 
            set {
                CutFormField = value;
                 this.CutFormSpecified = true;
                NotifyPropertyChanged("CutForm");
            }
        }

        private ShowLevel? CutFormField; 

        /// <summary>
        /// CutFormSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CutFormSpecified {
            get {
                return CutFormSpecifiedField;
            } 
            set {
                CutFormSpecifiedField = value;
                NotifyPropertyChanged("CutFormSpecified");
            }
        }

        private bool CutFormSpecifiedField; 

        /// <summary>
        /// Cut level (faint, bright, etc.). 
        /// </summary>
		[StringLength(64)]
        [Description("Cut level (faint, bright, etc.).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CutLevel")]
        public string CutLevel {
            get {
                return CutLevelField;
            } 
            set {
                CutLevelField = value;
                NotifyPropertyChanged("CutLevel");
            }
        }

        private string CutLevelField; 

        /// <summary>
        /// Cut fluorescence form. 
        /// </summary>
		[Description("Cut fluorescence form.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowLevel")]
		[XmlElement("CutFlorForm")]
        public ShowLevel? CutFlorForm {
            get {
                return CutFlorFormField;
            } 
            set {
                CutFlorFormField = value;
                 this.CutFlorFormSpecified = true;
                NotifyPropertyChanged("CutFlorForm");
            }
        }

        private ShowLevel? CutFlorFormField; 

        /// <summary>
        /// CutFlorFormSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CutFlorFormSpecified {
            get {
                return CutFlorFormSpecifiedField;
            } 
            set {
                CutFlorFormSpecifiedField = value;
                NotifyPropertyChanged("CutFlorFormSpecified");
            }
        }

        private bool CutFlorFormSpecifiedField; 

        /// <summary>
        /// Cut fluorescence color. 
        /// </summary>
		[StringLength(64)]
        [Description("Cut fluorescence color.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CutFlorColor")]
        public string CutFlorColor {
            get {
                return CutFlorColorField;
            } 
            set {
                CutFlorColorField = value;
                NotifyPropertyChanged("CutFlorColor");
            }
        }

        private string CutFlorColorField; 

        /// <summary>
        /// Cut fluorescence strength. 
        /// </summary>
		[StringLength(64)]
        [Description("Cut fluorescence strength.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CutFlorStrength")]
        public string CutFlorStrength {
            get {
                return CutFlorStrengthField;
            } 
            set {
                CutFlorStrengthField = value;
                NotifyPropertyChanged("CutFlorStrength");
            }
        }

        private string CutFlorStrengthField; 

        /// <summary>
        /// Cut fluorescence speed. 
        /// </summary>
		[Description("Cut fluorescence speed.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowSpeed")]
		[XmlElement("CutFlorSpeed")]
        public ShowSpeed? CutFlorSpeed {
            get {
                return CutFlorSpeedField;
            } 
            set {
                CutFlorSpeedField = value;
                 this.CutFlorSpeedSpecified = true;
                NotifyPropertyChanged("CutFlorSpeed");
            }
        }

        private ShowSpeed? CutFlorSpeedField; 

        /// <summary>
        /// CutFlorSpeedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CutFlorSpeedSpecified {
            get {
                return CutFlorSpeedSpecifiedField;
            } 
            set {
                CutFlorSpeedSpecifiedField = value;
                NotifyPropertyChanged("CutFlorSpeedSpecified");
            }
        }

        private bool CutFlorSpeedSpecifiedField; 

        /// <summary>
        /// Cut fluorescence level. 
        /// </summary>
		[Description("Cut fluorescence level.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowFluorescence")]
		[XmlElement("CutFlorLevel")]
        public ShowFluorescence? CutFlorLevel {
            get {
                return CutFlorLevelField;
            } 
            set {
                CutFlorLevelField = value;
                 this.CutFlorLevelSpecified = true;
                NotifyPropertyChanged("CutFlorLevel");
            }
        }

        private ShowFluorescence? CutFlorLevelField; 

        /// <summary>
        /// CutFlorLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CutFlorLevelSpecified {
            get {
                return CutFlorLevelSpecifiedField;
            } 
            set {
                CutFlorLevelSpecifiedField = value;
                NotifyPropertyChanged("CutFlorLevelSpecified");
            }
        }

        private bool CutFlorLevelSpecifiedField; 

        /// <summary>
        /// Natural fluorescence color. 
        /// </summary>
		[StringLength(64)]
        [Description("Natural fluorescence color.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NatFlorColor")]
        public string NatFlorColor {
            get {
                return NatFlorColorField;
            } 
            set {
                NatFlorColorField = value;
                NotifyPropertyChanged("NatFlorColor");
            }
        }

        private string NatFlorColorField; 

        /// <summary>
        /// Natural fluorescence (commonly in percent). 
        /// </summary>
		[Description("Natural fluorescence (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaPerAreaMeasure")]
		[XmlElement("NatFlorPc")]
        public AreaPerAreaMeasure NatFlorPercent {
            get {
                return NatFlorPcField;
            } 
            set {
                NatFlorPcField = value;
                NotifyPropertyChanged("NatFlorPercent");
            }
        }

        private AreaPerAreaMeasure NatFlorPcField; 

        /// <summary>
        /// Natural fluorescence level. 
        /// </summary>
		[Description("Natural fluorescence level.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowFluorescence")]
		[XmlElement("NatFlorLevel")]
        public ShowFluorescence? NatFlorLevel {
            get {
                return NatFlorLevelField;
            } 
            set {
                NatFlorLevelField = value;
                 this.NatFlorLevelSpecified = true;
                NotifyPropertyChanged("NatFlorLevel");
            }
        }

        private ShowFluorescence? NatFlorLevelField; 

        /// <summary>
        /// NatFlorLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NatFlorLevelSpecified {
            get {
                return NatFlorLevelSpecifiedField;
            } 
            set {
                NatFlorLevelSpecifiedField = value;
                NotifyPropertyChanged("NatFlorLevelSpecified");
            }
        }

        private bool NatFlorLevelSpecifiedField; 

        /// <summary>
        /// Natural fluorescence description. 
        /// </summary>
		[StringLength(64)]
        [Description("Natural fluorescence description.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NatFlorDesc")]
        public string NatFlorDesc {
            get {
                return NatFlorDescField;
            } 
            set {
                NatFlorDescField = value;
                NotifyPropertyChanged("NatFlorDesc");
            }
        }

        private string NatFlorDescField; 

        /// <summary>
        /// Residue color. 
        /// </summary>
		[StringLength(64)]
        [Description("Residue color.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ResidueColor")]
        public string ResidueColor {
            get {
                return ResidueColorField;
            } 
            set {
                ResidueColorField = value;
                NotifyPropertyChanged("ResidueColor");
            }
        }

        private string ResidueColorField; 

        /// <summary>
        /// Impregnated lithology. 
        /// </summary>
		[StringLength(64)]
        [Description("Impregnated lithology.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ImpregnatedLitho")]
        public string ImpregnatedLitho {
            get {
                return ImpregnatedLithoField;
            } 
            set {
                ImpregnatedLithoField = value;
                NotifyPropertyChanged("ImpregnatedLitho");
            }
        }

        private string ImpregnatedLithoField; 

        /// <summary>
        /// Description of any hydrocarbon type odors smelled. 
        /// </summary>
		[StringLength(64)]
        [Description("Description of any hydrocarbon type odors smelled.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Odor")]
        public string Odor {
            get {
                return OdorField;
            } 
            set {
                OdorField = value;
                NotifyPropertyChanged("Odor");
            }
        }

        private string OdorField; 

        /// <summary>
        /// Description of the cutting solvent used to treat the cuttings.
        /// </summary>
		[StringLength(64)]
        [Description("Description of the cutting solvent used to treat the cuttings.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CuttingFluid")]
        public string CuttingFluid {
            get {
                return CuttingFluidField;
            } 
            set {
                CuttingFluidField = value;
                NotifyPropertyChanged("CuttingFluid");
            }
        }

        private string CuttingFluidField; 

		/// <summary>
        /// Unique identifier for this instance of CuttingsIntervalShow.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of CuttingsIntervalShow.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AreaPerAreaMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AreaPerAreaMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AreaPerAreaMeasure xsd type.")]
    public partial class AreaPerAreaMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AreaPerAreaMeasure class.
        /// </summary>
        public AreaPerAreaMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AreaPerAreaMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AreaPerAreaMeasure(double value, AreaPerAreaUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AreaPerAreaUom")]
        [XmlAttribute("uom")]
		
        public AreaPerAreaUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AreaPerAreaUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CuttingsIntervalLithology xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CuttingsIntervalLithology", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CuttingsIntervalLithology xsd type.")]
    public partial class CuttingsIntervalLithology : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [Description("The geological name for the type of lithology from the enum table listing a subset of the OneGeology/CGI defined formation types.")]
        [EnergisticsDataTypeAttribute(DataType = "LithologyKindExt")]
		[XmlElement("Kind")]
        public ExtensibleEnum<LithologyKind>? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ExtensibleEnum<LithologyKind>? KindField; 

        /// <summary>
        /// LithPc property
        /// </summary>
		[Required]
        [Description("Lithology percent. Represents the portion of the sampled interval this lithology type relates to. The total of the lithologies within an interval should add up to 100 percent. If LithologySource in geology is:  - \"interpreted\" only 100% is allowed. - \"core\" or \"cuttings\" then recommended usage is that the creating application uses blocks of 10%. i.e. 10, 20, 30, 40, 50, 60, 70, 80, 90, 100.  Ideally the input application should enforce a total of 100% for each defined depth interval. If the total for a depth interval does not add up to 100%, then use the \"undifferentiated\" code to fill out to 100%.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("LithPc")]
        public VolumePerVolumeMeasure LithPercent {
            get {
                return LithPcField;
            } 
            set {
                LithPcField = value;
                NotifyPropertyChanged("LithPercent");
            }
        }

        private VolumePerVolumeMeasure LithPcField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the CuttingsIntervalLithology.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Citation")]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// CodeLith property
        /// </summary>
		[StringLength(64)]
        [Description("An optional custom lithology encoding scheme. If used, it is recommended that the scheme follows the NPD required usage. With the numeric values noted in the enum tables, which was the original intent for this item. The NPD Coding System assigns a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by lithology = (main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: (33 * 10) + 1 + (21 / 100) gives a numeric code of 331.21. However, the NPD is also working through Energistics/Caesar to potentially change this usage.) This scheme should not be used for mnemonics, because those vary by operator, and if an abbreviation is required, a local look-up table should be used by the rendering client, based on Lithology Type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CodeLith")]
        public string CodeLith {
            get {
                return CodeLithField;
            } 
            set {
                CodeLithField = value;
                NotifyPropertyChanged("CodeLith");
            }
        }

        private string CodeLithField; 

        /// <summary>
        /// Color property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 colors with the addition of: frosted. e.g., black, blue, brown, buff, green, grey, olive, orange, pink, purple, red, translucent, frosted, white, yellow; modified by: dark, light, moderate, medium, mottled, variegated, slight, weak, strong, and vivid.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Color")]
        public string Color {
            get {
                return ColorField;
            } 
            set {
                ColorField = value;
                NotifyPropertyChanged("Color");
            }
        }

        private string ColorField; 

        /// <summary>
        /// Texture property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6: crystalline, (often \"feather-edge\" appearance on breaking), friable, dull, earthy, chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular, sucrosic, (often exhibits capillary imbibition). Examples: compact interlocking, particulate, (Gradational textures are quite common.) chalky matrix with sucrosic patches, (Composite textures also occur).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Texture")]
        public string Texture {
            get {
                return TextureField;
            } 
            set {
                TextureField = value;
                NotifyPropertyChanged("Texture");
            }
        }

        private string TextureField; 

        /// <summary>
        /// Hardness property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Mineral hardness. Typically, this element is rarely used because mineral hardness is not typically recorded. What typically is recorded is compaction. However, this element is retained for use defined as per Mohs scale of mineral hardness.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Hardness")]
        public string Hardness {
            get {
                return HardnessField;
            } 
            set {
                HardnessField = value;
                NotifyPropertyChanged("Hardness");
            }
        }

        private string HardnessField; 

        /// <summary>
        /// Compaction property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5, which includes: not compacted, slightly compacted, compacted, strongly compacted, friable, indurated, hard.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Compaction")]
        public string Compaction {
            get {
                return CompactionField;
            } 
            set {
                CompactionField = value;
                NotifyPropertyChanged("Compaction");
            }
        }

        private string CompactionField; 

        /// <summary>
        /// SizeGrain property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1.(Wentworth) modified to remove the ambiguous term pelite.  Size ranges in millimeter (or micrometer) and inches. LT 256 mm        LT 10.1 in         \"boulder\" 64-256 mm        2.5–10.1 in        \"cobble\"; 32–64 mm        1.26–2.5 in       \"very coarse gravel\" 16–32 mm        0.63–1.26 in        \"coarse gravel\" 8–16 mm            0.31–0.63 in        \"medium gravel\" 4–8 mm            0.157–0.31 in        \"fine gravel\" 2–4 mm            0.079–0.157 in     \"very fine gravel\" 1–2 mm           0.039–0.079 in    \"very coarse sand\" 0.5–1 mm        0.020–0.039 in        \"coarse sand\" 0.25–0.5 mm        0.010–0.020 in     \"medium sand\" 125–250 um        0.0049–0.010 in        \"fine sand\" 62.5–125 um      .0025–0.0049 in   \"very fine sand\" 3.90625–62.5 um        0.00015–0.0025 in    \"silt\" LT 3.90625 um        LT 0.00015 in        \"clay\" LT 1 um            LT 0.000039 in        \"colloid\"")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SizeGrain")]
        public string SizeGrain {
            get {
                return SizeGrainField;
            } 
            set {
                SizeGrainField = value;
                NotifyPropertyChanged("SizeGrain");
            }
        }

        private string SizeGrainField; 

        /// <summary>
        /// Roundness property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3. Roundness refers to modal size class: very angular, angular, subangular, subrounded, rounded, well rounded.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Roundness")]
        public string Roundness {
            get {
                return RoundnessField;
            } 
            set {
                RoundnessField = value;
                NotifyPropertyChanged("Roundness");
            }
        }

        private string RoundnessField; 

        /// <summary>
        /// Sphericity property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity: very elongated, elongated, slightly elongated, slightly spherical, spherical, very spherical.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Sphericity")]
        public string Sphericity {
            get {
                return SphericityField;
            } 
            set {
                SphericityField = value;
                NotifyPropertyChanged("Sphericity");
            }
        }

        private string SphericityField; 

        /// <summary>
        /// Sorting property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology sorting description from Shell 4.3.1.2 Sorting: very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Sorting")]
        public string Sorting {
            get {
                return SortingField;
            } 
            set {
                SortingField = value;
                NotifyPropertyChanged("Sorting");
            }
        }

        private string SortingField; 

        /// <summary>
        /// MatrixCement property
        /// </summary>
		[Description("STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. e.g., \"calcite\" (Common) \"dolomite\", \"ankerite\" (e.g., North Sea HPHT reservoirs such as Elgin and Franklin have almost pure ankerite cementation) \"siderite\" (Sherwood sandstones, southern UK typical Siderite cements), \"quartz\" (grain-to-grain contact cementation or secondary quartz deposition), \"kaolinite\", \"illite\" (e.g., Village Fields North Sea), \"smectite\",\"chlorite\" (Teg, Algeria.).")]
        [EnergisticsDataTypeAttribute(DataType = "MatrixCementKind")]
		[XmlElement("MatrixCement")]
        public MatrixCementKind? MatrixCement {
            get {
                return MatrixCementField;
            } 
            set {
                MatrixCementField = value;
                 this.MatrixCementSpecified = true;
                NotifyPropertyChanged("MatrixCement");
            }
        }

        private MatrixCementKind? MatrixCementField; 

        /// <summary>
        /// MatrixCementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MatrixCementSpecified {
            get {
                return MatrixCementSpecifiedField;
            } 
            set {
                MatrixCementSpecifiedField = value;
                NotifyPropertyChanged("MatrixCementSpecified");
            }
        }

        private bool MatrixCementSpecifiedField; 

        /// <summary>
        /// PorosityVisible property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined after BakerHughes definitions, as opposed to Shell, which has no linkage to actual numeric estimates. The theoretical maximum porosity for a clastic rock is about 26%, which is normally much reduced by other factors. When estimating porosities use: more than 15% \"good\"; 10 to 15% \"fair\"; 5 to 10% \"poor\"; less than 5% \"trace\"; 0 \"none\".")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PorosityVisible")]
        public string PorosityVisible {
            get {
                return PorosityVisibleField;
            } 
            set {
                PorosityVisibleField = value;
                NotifyPropertyChanged("PorosityVisible");
            }
        }

        private string PorosityVisibleField; 

        /// <summary>
        /// PorosityFabric property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2: intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PorosityFabric")]
        public string PorosityFabric {
            get {
                return PorosityFabricField;
            } 
            set {
                PorosityFabricField = value;
                NotifyPropertyChanged("PorosityFabric");
            }
        }

        private string PorosityFabricField; 

        /// <summary>
        /// Permeability property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2.5. In the future, these values would benefit from quantification, e.g., tight, slightly, fairly, highly.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Permeability")]
        public string Permeability {
            get {
                return PermeabilityField;
            } 
            set {
                PermeabilityField = value;
                NotifyPropertyChanged("Permeability");
            }
        }

        private string PermeabilityField; 

        /// <summary>
        /// Shows property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CuttingsIntervalShow")]
		[XmlElement("Shows")]
        public List<CuttingsIntervalShow> Shows {
            get {
                return ShowsField;
            } 
            set {
                ShowsField = value;
                NotifyPropertyChanged("Shows");
            }
        }

         /// <summary>
         /// bool to indicate if Shows has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ShowsSpecified
         {
             get {
             if(ShowsField!=null)
                 return ShowsField.Count>0?true:false;
             else return false;
             }
         }
        private List<CuttingsIntervalShow> ShowsField; 

        /// <summary>
        /// Qualifier property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "LithologyQualifier")]
		[XmlElement("Qualifier")]
        public List<LithologyQualifier> Qualifier {
            get {
                return QualifierField;
            } 
            set {
                QualifierField = value;
                NotifyPropertyChanged("Qualifier");
            }
        }

         /// <summary>
         /// bool to indicate if Qualifier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool QualifierSpecified
         {
             get {
             if(QualifierField!=null)
                 return QualifierField.Count>0?true:false;
             else return false;
             }
         }
        private List<LithologyQualifier> QualifierField; 

		/// <summary>
        /// Unique identifier for this instance of CuttingsIntervalLithology.
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of CuttingsIntervalLithology.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LithologyQualifier xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LithologyQualifier", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the LithologyQualifier xsd type.")]
    public partial class LithologyQualifier : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of qualifier.
        /// </summary>
		[Required]
        [Description("The type of qualifier.")]
        [EnergisticsDataTypeAttribute(DataType = "LithologyQualifierKindExt")]
		[XmlElement("Kind")]
        public ExtensibleEnum<LithologyQualifierKind>? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ExtensibleEnum<LithologyQualifierKind>? KindField; 

        /// <summary>
        /// The measured depth interval represented by the qualifier. This must be within the range of the parent geologic interval. If MdInterval is not given then the qualifier is deemed to exist over the entire depth range of the parent geologyInterval.
        /// </summary>
		[Description("The measured depth interval represented by the qualifier. This must be within the range of the parent geologic interval. If MdInterval is not given then the qualifier is deemed to exist over the entire depth range of the parent geologyInterval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// The relative abundance of the qualifier estimated based on a "visual area" by inspecting the cuttings spread out on the shaker table before washing, or in the sample tray after washing. This represents the upper bound of the observed range, and is in the following increments at the upper bound: 1 = less than or equal to 1% 2 = greater than 1% and less than 2% 5 = greater than or equal to 2% and less than 5% and then in 5% increments, 10 (=5-10%), 15 (=10-15%) up to 100 (=95-100%). The end user can then elect to either display the %, or map them to an operator-specific term or coding, e.g., 1 less than or equal to 1% = rare trace, or occasional, or very sparse, etc., depending on the end users' terminology. i.e. 1 less then or equal to 1%=Rare Trace, or occasional, or very sparse etc., depending on the the end users' terminology.)
        /// </summary>
		[Description("The relative abundance of the qualifier estimated based on a \"visual area\" by inspecting the cuttings spread out on the shaker table before washing, or in the sample tray after washing. This represents the upper bound of the observed range, and is in the following increments at the upper bound: 1 = less than or equal to 1% 2 = greater than 1% and less than 2% 5 = greater than or equal to 2% and less than 5% and then in 5% increments, 10 (=5-10%), 15 (=10-15%) up to 100 (=95-100%). The end user can then elect to either display the %, or map them to an operator-specific term or coding, e.g., 1 less than or equal to 1% = rare trace, or occasional, or very sparse, etc., depending on the end users' terminology. i.e. 1 less then or equal to 1%=Rare Trace, or occasional, or very sparse etc., depending on the the end users' terminology.)")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Abundance")]
        public VolumePerVolumeMeasure Abundance {
            get {
                return AbundanceField;
            } 
            set {
                AbundanceField = value;
                NotifyPropertyChanged("Abundance");
            }
        }

        private VolumePerVolumeMeasure AbundanceField; 

        /// <summary>
        /// A textual description of the qualifier.
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the qualifier.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

		/// <summary>
        /// Unique identifier for this instance of LithologyQualifier
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of LithologyQualifier")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IlluminanceMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IlluminanceMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IlluminanceMeasure xsd type.")]
    public partial class IlluminanceMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IlluminanceMeasure class.
        /// </summary>
        public IlluminanceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the IlluminanceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IlluminanceMeasure(double value, IlluminanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "IlluminanceUom")]
        [XmlAttribute("uom")]
		
        public IlluminanceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private IlluminanceUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the InterpretedIntervalLithology xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="InterpretedIntervalLithology", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the InterpretedIntervalLithology xsd type.")]
    public partial class InterpretedIntervalLithology : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [Description("The geological name for the type of lithology from the enum table listing a  subset of the OneGeology / CGI defined formation types.")]
        [EnergisticsDataTypeAttribute(DataType = "LithologyKindExt")]
		[XmlElement("Kind")]
        public ExtensibleEnum<LithologyKind>? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ExtensibleEnum<LithologyKind>? KindField; 

        /// <summary>
        /// Citation property
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the InterpretedIntervalLithology")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Citation")]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// CodeLith property
        /// </summary>
		[StringLength(64)]
        [Description("An optional custom lithology encoding scheme. If used, it is recommended that the scheme follows the NPD required usage. With the numeric values noted in the enum tables, which was the original intent for this item. The NPD Coding System assigns a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by lithology = (main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: (33 * 10) + 1 + (21 / 100) gives a numeric code of 331.21. However, the NPD is also working through Energistics/Caesar to potentially change this usage.) This scheme should not be used for mnemonics, because those vary by operator, and if an abbreviation is required, a local look-up table should be used by the rendering client, based on Lithology Type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CodeLith")]
        public string CodeLith {
            get {
                return CodeLithField;
            } 
            set {
                CodeLithField = value;
                NotifyPropertyChanged("CodeLith");
            }
        }

        private string CodeLithField; 

        /// <summary>
        /// Color property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 Colors with the addition of: frosted. e.g., black, blue, brown, buff, green, grey, olive, orange, pink, purple, red, translucent, frosted, white, yellow; modified by: dark, light, moderate, medium, mottled, variegated, slight, weak, strong, and vivid.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Color")]
        public string Color {
            get {
                return ColorField;
            } 
            set {
                ColorField = value;
                NotifyPropertyChanged("Color");
            }
        }

        private string ColorField; 

        /// <summary>
        /// Texture property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6: crystalline, (often \"feather-edge\" appearance on breaking), friable, dull, earthy, chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular, sucrosic, (often exhibits capillary imbibition). Examples: compact interlocking, particulate, (Gradational textures are quite common.) chalky matrix with sucrosic patches, (Composite textures also occur).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Texture")]
        public string Texture {
            get {
                return TextureField;
            } 
            set {
                TextureField = value;
                NotifyPropertyChanged("Texture");
            }
        }

        private string TextureField; 

        /// <summary>
        /// Hardness property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Mineral hardness. Typically, this element is rarely used because mineral hardness is not typically recorded. What typically is recorded is compaction. However, this element is retained for use defined as per Mohs scale of mineral hardness.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Hardness")]
        public string Hardness {
            get {
                return HardnessField;
            } 
            set {
                HardnessField = value;
                NotifyPropertyChanged("Hardness");
            }
        }

        private string HardnessField; 

        /// <summary>
        /// Compaction property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5, which includes: not compacted, slightly compacted, compacted, strongly compacted, friable, indurated, hard.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Compaction")]
        public string Compaction {
            get {
                return CompactionField;
            } 
            set {
                CompactionField = value;
                NotifyPropertyChanged("Compaction");
            }
        }

        private string CompactionField; 

        /// <summary>
        /// SizeGrain property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1. (Wentworth) modified to remove the ambiguous term pelite.  Size ranges in millimeter (or micrometer) and inches. LT 256 mm        LT 10.1 in         \"boulder\" 64-256 mm        2.5–10.1 in        \"cobble\"; 32–64 mm        1.26–2.5 in       \"very coarse gravel\" 16–32 mm        0.63–1.26 in        \"coarse gravel\" 8–16 mm            0.31–0.63 in        \"medium gravel\" 4–8 mm            0.157–0.31 in        \"fine gravel\" 2–4 mm            0.079–0.157 in     \"very fine gravel\" 1–2 mm           0.039–0.079 in    \"very coarse sand\" 0.5–1 mm        0.020–0.039 in        \"coarse sand\" 0.25–0.5 mm        0.010–0.020 in     \"medium sand\" 125–250 um        0.0049–0.010 in        \"fine sand\" 62.5–125 um      .0025–0.0049 in   \"very fine sand\" 3.90625–62.5 um        0.00015–0.0025 in    \"silt\" LT 3.90625 um        LT 0.00015 in        \"clay\" LT 1 um            LT 0.000039 in        \"colloid\"")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SizeGrain")]
        public string SizeGrain {
            get {
                return SizeGrainField;
            } 
            set {
                SizeGrainField = value;
                NotifyPropertyChanged("SizeGrain");
            }
        }

        private string SizeGrainField; 

        /// <summary>
        /// Roundness property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3. Roundness refers to modal size class: very angular, angular, subangular, subrounded, rounded, well rounded.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Roundness")]
        public string Roundness {
            get {
                return RoundnessField;
            } 
            set {
                RoundnessField = value;
                NotifyPropertyChanged("Roundness");
            }
        }

        private string RoundnessField; 

        /// <summary>
        /// Sorting property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology sorting description from Shell 4.3.1.2 Sorting: very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Sorting")]
        public string Sorting {
            get {
                return SortingField;
            } 
            set {
                SortingField = value;
                NotifyPropertyChanged("Sorting");
            }
        }

        private string SortingField; 

        /// <summary>
        /// Sphericity property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity: very elongated, elongated, slightly elongated, slightly spherical, spherical, very spherical.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Sphericity")]
        public string Sphericity {
            get {
                return SphericityField;
            } 
            set {
                SphericityField = value;
                NotifyPropertyChanged("Sphericity");
            }
        }

        private string SphericityField; 

        /// <summary>
        /// MatrixCement property
        /// </summary>
		[Description("STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. e.g., \"calcite\" (Common) \"dolomite\", \"ankerite\" (e.g., North Sea HPHT reservoirs such as Elgin and Franklin have almost pure ankerite cementation) \"siderite\" (Sherwood sandstones, southern UK typical Siderite cements), \"quartz\" (grain-to-grain contact cementation or secondary quartz deposition), \"kaolinite\", \"illite\" (e.g., Village Fields North Sea), \"smectite\",\"chlorite\" (Teg, Algeria.).")]
        [EnergisticsDataTypeAttribute(DataType = "MatrixCementKind")]
		[XmlElement("MatrixCement")]
        public MatrixCementKind? MatrixCement {
            get {
                return MatrixCementField;
            } 
            set {
                MatrixCementField = value;
                 this.MatrixCementSpecified = true;
                NotifyPropertyChanged("MatrixCement");
            }
        }

        private MatrixCementKind? MatrixCementField; 

        /// <summary>
        /// MatrixCementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MatrixCementSpecified {
            get {
                return MatrixCementSpecifiedField;
            } 
            set {
                MatrixCementSpecifiedField = value;
                NotifyPropertyChanged("MatrixCementSpecified");
            }
        }

        private bool MatrixCementSpecifiedField; 

        /// <summary>
        /// PorosityVisible property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined after BakerHughes definitions, as opposed to Shell, which has no linkage to actual numeric estimates.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PorosityVisible")]
        public string PorosityVisible {
            get {
                return PorosityVisibleField;
            } 
            set {
                PorosityVisibleField = value;
                NotifyPropertyChanged("PorosityVisible");
            }
        }

        private string PorosityVisibleField; 

        /// <summary>
        /// PorosityFabric property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2: intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PorosityFabric")]
        public string PorosityFabric {
            get {
                return PorosityFabricField;
            } 
            set {
                PorosityFabricField = value;
                NotifyPropertyChanged("PorosityFabric");
            }
        }

        private string PorosityFabricField; 

        /// <summary>
        /// Permeability property
        /// </summary>
		[StringLength(64)]
        [Description("STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2.5. In the future, these values would benefit from quantification, e.g., tight, slightly, fairly, highly.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Permeability")]
        public string Permeability {
            get {
                return PermeabilityField;
            } 
            set {
                PermeabilityField = value;
                NotifyPropertyChanged("Permeability");
            }
        }

        private string PermeabilityField; 

        /// <summary>
        /// Qualifier property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "LithologyQualifier")]
		[XmlElement("Qualifier")]
        public List<LithologyQualifier> Qualifier {
            get {
                return QualifierField;
            } 
            set {
                QualifierField = value;
                NotifyPropertyChanged("Qualifier");
            }
        }

         /// <summary>
         /// bool to indicate if Qualifier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool QualifierSpecified
         {
             get {
             if(QualifierField!=null)
                 return QualifierField.Count>0?true:false;
             else return false;
             }
         }
        private List<LithologyQualifier> QualifierField; 

		/// <summary>
        /// Unique identifier for this instance of InterpretedIntervalLithology.
        /// </summary>
		[StringLength(64)]
        [Description("Unique identifier for this instance of InterpretedIntervalLithology.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LithostratigraphicUnit xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LithostratigraphicUnit", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the LithostratigraphicUnit xsd type.")]
    public partial class LithostratigraphicUnit : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LithostratigraphicUnit class.
        /// </summary>
        public LithostratigraphicUnit() {}

        /// <summary>
        /// Initializes a new instance of the LithostratigraphicUnit class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public LithostratigraphicUnit(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// Person or collective body responsible for authorizing the information.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Person or collective body responsible for authorizing the information.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("authority")]
		
        public string Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string authorityField; 

		/// <summary>
        /// Specifies the lithostratigraphic unit-hierarchy (group, formation, member or bed).
        /// </summary>
		[Required]
        [Description("Specifies the lithostratigraphic unit-hierarchy (group, formation, member or bed).")]
        [EnergisticsDataTypeAttribute(DataType = "LithostratigraphicRank")]
        [XmlAttribute("kind")]
		
        public LithostratigraphicRank Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private LithostratigraphicRank kindField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeochronologicalUnit xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeochronologicalUnit", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GeochronologicalUnit xsd type.")]
    public partial class GeochronologicalUnit : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GeochronologicalUnit class.
        /// </summary>
        public GeochronologicalUnit() {}

        /// <summary>
        /// Initializes a new instance of the GeochronologicalUnit class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public GeochronologicalUnit(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// Person or collective body responsible for authorizing the information.
        /// </summary>
		[StringLength(64)]
        [Description("Person or collective body responsible for authorizing the information.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("authority")]
		
        public string Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string authorityField; 

		/// <summary>
        /// Defines the time spans in geochronology.
        /// </summary>
		[Required]
        [Description("Defines the time spans in geochronology.")]
        [EnergisticsDataTypeAttribute(DataType = "GeochronologicalRank")]
        [XmlAttribute("kind")]
		
        public GeochronologicalRank Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private GeochronologicalRank kindField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegTrackCurve xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegTrackCurve", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegTrackCurve xsd type.")]
    public partial class DepthRegTrackCurve : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Curve mnemonic
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Curve mnemonic")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CurveInfo")]
        public string CurveInfo {
            get {
                return CurveInfoField;
            } 
            set {
                CurveInfoField = value;
                NotifyPropertyChanged("CurveInfo");
            }
        }

        private string CurveInfoField; 

        /// <summary>
        /// Image line style
        /// </summary>
		[Required]
        [Description("Image line style")]
        [EnergisticsDataTypeAttribute(DataType = "LineStyle")]
		[XmlElement("LineStyle")]
        public LineStyle? LineStyle {
            get {
                return LineStyleField;
            } 
            set {
                LineStyleField = value;
                 this.LineStyleSpecified = true;
                NotifyPropertyChanged("LineStyle");
            }
        }

        
        private bool LineStyleSpecifiedField = false;
        
        /// <summary>
        /// LineStyleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LineStyleSpecified {
            get {
                return LineStyleSpecifiedField;
            } 
            set {
                LineStyleSpecifiedField = value;
                NotifyPropertyChanged("LineStyleSpecified");
            }
        }
        
        private LineStyle? LineStyleField; 

        /// <summary>
        /// Description of line graveness
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Description of line graveness")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LineWeight")]
        public string LineWeight {
            get {
                return LineWeightField;
            } 
            set {
                LineWeightField = value;
                NotifyPropertyChanged("LineWeight");
            }
        }

        private string LineWeightField; 

        /// <summary>
        /// Color of this line
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Color of this line")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LineColor")]
        public string LineColor {
            get {
                return LineColorField;
            } 
            set {
                LineColorField = value;
                NotifyPropertyChanged("LineColor");
            }
        }

        private string LineColorField; 

        /// <summary>
        /// Scale linearity
        /// </summary>
		[Required]
        [Description("Scale linearity")]
        [EnergisticsDataTypeAttribute(DataType = "ScaleType")]
		[XmlElement("CurveScaleType")]
        public ScaleType? CurveScaleType {
            get {
                return CurveScaleTypeField;
            } 
            set {
                CurveScaleTypeField = value;
                 this.CurveScaleTypeSpecified = true;
                NotifyPropertyChanged("CurveScaleType");
            }
        }

        
        private bool CurveScaleTypeSpecifiedField = false;
        
        /// <summary>
        /// CurveScaleTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurveScaleTypeSpecified {
            get {
                return CurveScaleTypeSpecifiedField;
            } 
            set {
                CurveScaleTypeSpecifiedField = value;
                NotifyPropertyChanged("CurveScaleTypeSpecified");
            }
        }
        
        private ScaleType? CurveScaleTypeField; 

        /// <summary>
        /// Unit of data represented
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unit of data represented")]
        [EnergisticsDataTypeAttribute(DataType = "TypeEnum")]
		[XmlElement("CurveUnit")]
        public string CurveUnit {
            get {
                return CurveUnitField;
            } 
            set {
                CurveUnitField = value;
                NotifyPropertyChanged("CurveUnit");
            }
        }

        private string CurveUnitField; 

        /// <summary>
        /// Scale value on the left axis
        /// </summary>
		[Required]
        [Description("Scale value on the left axis")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("CurveLeftScaleValue")]
        public double? CurveLeftScaleValue {
            get {
                return CurveLeftScaleValueField;
            } 
            set {
                CurveLeftScaleValueField = value;
                NotifyPropertyChanged("CurveLeftScaleValue");
            }
        }

        private double? CurveLeftScaleValueField; 

        /// <summary>
        /// Scale value on the right axis
        /// </summary>
		[Required]
        [Description("Scale value on the right axis")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("CurveRightScaleValue")]
        public double? CurveRightScaleValue {
            get {
                return CurveRightScaleValueField;
            } 
            set {
                CurveRightScaleValueField = value;
                NotifyPropertyChanged("CurveRightScaleValue");
            }
        }

        private double? CurveRightScaleValueField; 

        /// <summary>
        /// Scale of the backup curve
        /// </summary>
		[Required]
        [Description("Scale of the backup curve")]
        [EnergisticsDataTypeAttribute(DataType = "BackupScaleType")]
		[XmlElement("CurveBackupScaleType")]
        public BackupScaleType? CurveBackupScaleType {
            get {
                return CurveBackupScaleTypeField;
            } 
            set {
                CurveBackupScaleTypeField = value;
                 this.CurveBackupScaleTypeSpecified = true;
                NotifyPropertyChanged("CurveBackupScaleType");
            }
        }

        
        private bool CurveBackupScaleTypeSpecifiedField = false;
        
        /// <summary>
        /// CurveBackupScaleTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurveBackupScaleTypeSpecified {
            get {
                return CurveBackupScaleTypeSpecifiedField;
            } 
            set {
                CurveBackupScaleTypeSpecifiedField = value;
                NotifyPropertyChanged("CurveBackupScaleTypeSpecified");
            }
        }
        
        private BackupScaleType? CurveBackupScaleTypeField; 

        /// <summary>
        /// Coordinates of rectangle representing the area describing the scale.
        /// </summary>
		[Description("Coordinates of rectangle representing the area describing the scale.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegRectangle")]
		[XmlElement("CurveScaleRect")]
        public List<DepthRegRectangle> CurveScaleRect {
            get {
                return CurveScaleRectField;
            } 
            set {
                CurveScaleRectField = value;
                NotifyPropertyChanged("CurveScaleRect");
            }
        }

         /// <summary>
         /// bool to indicate if CurveScaleRect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CurveScaleRectSpecified
         {
             get {
             if(CurveScaleRectField!=null)
                 return CurveScaleRectField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegRectangle> CurveScaleRectField; 

        /// <summary>
        /// Details of the line
        /// </summary>
		[StringLength(2000)]
        [Description("Details of the line")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

		/// <summary>
        /// Unique identifier for the curve.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the curve.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegRectangle xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegRectangle", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegRectangle xsd type.")]
    public partial class DepthRegRectangle : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// The upper left point of a rectangular region.
        /// </summary>
		[Description("The upper left point of a rectangular region.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegPoint")]
		[XmlElement("Ul")]
        public DepthRegPoint UpperLeft {
            get {
                return UlField;
            } 
            set {
                UlField = value;
                NotifyPropertyChanged("UpperLeft");
            }
        }

        private DepthRegPoint UlField; 

        /// <summary>
        /// The upper right point of a rectangular region.
        /// </summary>
		[Description("The upper right point of a rectangular region.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegPoint")]
		[XmlElement("Ur")]
        public DepthRegPoint UpperRight {
            get {
                return UrField;
            } 
            set {
                UrField = value;
                NotifyPropertyChanged("UpperRight");
            }
        }

        private DepthRegPoint UrField; 

        /// <summary>
        /// The lower left point of a rectangular region.
        /// </summary>
		[Description("The lower left point of a rectangular region.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegPoint")]
		[XmlElement("Ll")]
        public DepthRegPoint LowerLeft {
            get {
                return LlField;
            } 
            set {
                LlField = value;
                NotifyPropertyChanged("LowerLeft");
            }
        }

        private DepthRegPoint LlField; 

        /// <summary>
        /// The lower right point of a rectangular region.
        /// </summary>
		[Description("The lower right point of a rectangular region.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegPoint")]
		[XmlElement("Lr")]
        public DepthRegPoint LowerRight {
            get {
                return LrField;
            } 
            set {
                LrField = value;
                NotifyPropertyChanged("LowerRight");
            }
        }

        private DepthRegPoint LrField; 

		/// <summary>
        /// Unique identifier for the rectangular area.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the rectangular area.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegPoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegPoint", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegPoint xsd type.")]
    public partial class DepthRegPoint : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The x pixel position of a point.
        /// </summary>
		[Required]
        [Description("The x pixel position of a point.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("X")]
        public long? X {
            get {
                return XField;
            } 
            set {
                XField = value;
                NotifyPropertyChanged("X");
            }
        }

        private long? XField; 

        /// <summary>
        /// The y pixel position of a point.
        /// </summary>
		[Required]
        [Description("The y pixel position of a point.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("Y")]
        public long? Y {
            get {
                return YField;
            } 
            set {
                YField = value;
                NotifyPropertyChanged("Y");
            }
        }

        private long? YField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegTrack xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegTrack", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegTrack xsd type.")]
    public partial class DepthRegTrack : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("A label associated with the track.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Type property
        /// </summary>
		[Required]
        [Description("The kind of track.")]
        [EnergisticsDataTypeAttribute(DataType = "LogTrackType")]
		[XmlElement("Type")]
        public LogTrackType? Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        
        private bool TypeSpecifiedField = false;
        
        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }
        
        private LogTrackType? TypeField; 

        /// <summary>
        /// LeftEdge property
        /// </summary>
		[Required]
        [Description("The position of the left edge of the track.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("LeftEdge")]
        public long? LeftEdge {
            get {
                return LeftEdgeField;
            } 
            set {
                LeftEdgeField = value;
                NotifyPropertyChanged("LeftEdge");
            }
        }

        private long? LeftEdgeField; 

        /// <summary>
        /// RightEdge property
        /// </summary>
		[Required]
        [Description("The position of the right edge of the track.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("RightEdge")]
        public long? RightEdge {
            get {
                return RightEdgeField;
            } 
            set {
                RightEdgeField = value;
                NotifyPropertyChanged("RightEdge");
            }
        }

        private long? RightEdgeField; 

        /// <summary>
        /// TrackCurveScaleRect property
        /// </summary>
		[Description("Coordinates of rectangle representing the track.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegRectangle")]
		[XmlElement("TrackCurveScaleRect")]
        public List<DepthRegRectangle> TrackCurveScaleRect {
            get {
                return TrackCurveScaleRectField;
            } 
            set {
                TrackCurveScaleRectField = value;
                NotifyPropertyChanged("TrackCurveScaleRect");
            }
        }

         /// <summary>
         /// bool to indicate if TrackCurveScaleRect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TrackCurveScaleRectSpecified
         {
             get {
             if(TrackCurveScaleRectField!=null)
                 return TrackCurveScaleRectField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegRectangle> TrackCurveScaleRectField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// AssociatedCurve property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegTrackCurve")]
		[XmlElement("AssociatedCurve")]
        public List<DepthRegTrackCurve> AssociatedCurve {
            get {
                return AssociatedCurveField;
            } 
            set {
                AssociatedCurveField = value;
                NotifyPropertyChanged("AssociatedCurve");
            }
        }

         /// <summary>
         /// bool to indicate if AssociatedCurve has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AssociatedCurveSpecified
         {
             get {
             if(AssociatedCurveField!=null)
                 return AssociatedCurveField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegTrackCurve> AssociatedCurveField; 

		/// <summary>
        /// Unique identifier for the track.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the track.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegParameter", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegParameter xsd type.")]
    public partial class DepthRegParameter : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DepthRegParameter class.
        /// </summary>
        public DepthRegParameter() {}

        /// <summary>
        /// Initializes a new instance of the DepthRegParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public DepthRegParameter(GenericMeasure value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// A dictionary-controlled mnemonic.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A dictionary-controlled mnemonic.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Mnemonic")]
        public string Mnemonic {
            get {
                return MnemonicField;
            } 
            set {
                MnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private string MnemonicField; 

        /// <summary>
        /// The name or identifier of the controlling dictionary.
        /// </summary>
		[StringLength(64)]
        [Description("The name or identifier of the controlling dictionary.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Dictionary")]
        public string Dictionary {
            get {
                return DictionaryField;
            } 
            set {
                DictionaryField = value;
                NotifyPropertyChanged("Dictionary");
            }
        }

        private string DictionaryField; 

        /// <summary>
        /// The upper limit of a vertical region for which the parameter value is applicable. '@uom' must be consistent with '//indexType'.
        /// </summary>
		[Description("The upper limit of a vertical region for which the parameter value is applicable.  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("TopIndex")]
        public GenericMeasure TopIndex {
            get {
                return TopIndexField;
            } 
            set {
                TopIndexField = value;
                NotifyPropertyChanged("TopIndex");
            }
        }

        private GenericMeasure TopIndexField; 

        /// <summary>
        /// The lower limit of a vertical region for which the parameter value is applicable. '@uom' must be consistent with '//indexType'.
        /// </summary>
		[Description("The lower limit of a vertical region for which the parameter value is applicable.  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("BottomIndex")]
        public GenericMeasure BottomIndex {
            get {
                return BottomIndexField;
            } 
            set {
                BottomIndexField = value;
                NotifyPropertyChanged("BottomIndex");
            }
        }

        private GenericMeasure BottomIndexField; 

        /// <summary>
        /// The value assigned to the parameter. The unit of measure should be consistent with the property implied by 'mnemonic' in 'dictionary'. If the value is unitless, then use a unit of 'Euc'.
        /// </summary>
		[Required]
        [Description("The value assigned to the parameter.   The unit of measure should be consistent with the property implied by 'mnemonic' in 'dictionary'. If the value is unitless, then use a unit of 'Euc'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("Value")]
        public GenericMeasure Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private GenericMeasure ValueField; 

        /// <summary>
        /// A description or definition for the mnemonic; required when ../dictionary is absent.
        /// </summary>
		[StringLength(2000)]
        [Description("A description or definition for the mnemonic; required when ../dictionary is absent.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for the parameter.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GenericMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GenericMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GenericMeasure xsd type.")]
    public partial class GenericMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GenericMeasure class.
        /// </summary>
        public GenericMeasure() {}

        /// <summary>
        /// Initializes a new instance of the GenericMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public GenericMeasure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [StringLength(32)]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegCalibrationPoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegCalibrationPoint", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegCalibrationPoint xsd type.")]
    public partial class DepthRegCalibrationPoint : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("The index (depth or time) for the calibration point.   The UOM value must be consistent with the indexType.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("Index")]
        public GenericMeasure Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private GenericMeasure IndexField; 

        /// <summary>
        /// Track property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the track containing the point.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Track")]
        public string Track {
            get {
                return TrackField;
            } 
            set {
                TrackField = value;
                NotifyPropertyChanged("Track");
            }
        }

        private string TrackField; 

        /// <summary>
        /// Role property
        /// </summary>
		[Required]
        [Description("The horizontal position on the grid that the calibration point represents.")]
        [EnergisticsDataTypeAttribute(DataType = "CalibrationPointRole")]
		[XmlElement("Role")]
        public CalibrationPointRole? Role {
            get {
                return RoleField;
            } 
            set {
                RoleField = value;
                 this.RoleSpecified = true;
                NotifyPropertyChanged("Role");
            }
        }

        
        private bool RoleSpecifiedField = false;
        
        /// <summary>
        /// RoleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RoleSpecified {
            get {
                return RoleSpecifiedField;
            } 
            set {
                RoleSpecifiedField = value;
                NotifyPropertyChanged("RoleSpecified");
            }
        }
        
        private CalibrationPointRole? RoleField; 

        /// <summary>
        /// CurveName property
        /// </summary>
		[StringLength(64)]
        [Description("Facilitates searching for logs based on curve type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CurveName")]
        public string CurveName {
            get {
                return CurveNameField;
            } 
            set {
                CurveNameField = value;
                NotifyPropertyChanged("CurveName");
            }
        }

        private string CurveNameField; 

        /// <summary>
        /// Fraction property
        /// </summary>
		[Description("An intermediate point from the left edge to the right edge. Required when CalibrationPointRole is \"fraction\"; otherwise, not allowed otherwise.)  Used to extrapolate the rectified position of a track boundary that has wandered off the edge of the image.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Fraction")]
        public DimensionlessMeasure Fraction {
            get {
                return FractionField;
            } 
            set {
                FractionField = value;
                NotifyPropertyChanged("Fraction");
            }
        }

        private DimensionlessMeasure FractionField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[Description("Comments about the log section.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public List<string> Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(CommentField!=null)
                 return CommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> CommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Parameter property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegParameter")]
		[XmlElement("Parameter")]
        public List<DepthRegParameter> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegParameter> ParameterField; 

        /// <summary>
        /// Point property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegPoint")]
		[XmlElement("Point")]
        public DepthRegPoint Point {
            get {
                return PointField;
            } 
            set {
                PointField = value;
                NotifyPropertyChanged("Point");
            }
        }

        private DepthRegPoint PointField; 

		/// <summary>
        /// Unique identifier for the calibration point.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the calibration point.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegLogSection xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegLogSection", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegLogSection xsd type.")]
    public partial class DepthRegLogSection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// LogSectionSequenceNumber property
        /// </summary>
		[Required]
        [Description("Zero-based index in the log sections, in order of appearance.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("LogSectionSequenceNumber")]
        public long? LogSectionSequenceNumber {
            get {
                return LogSectionSequenceNumberField;
            } 
            set {
                LogSectionSequenceNumberField = value;
                NotifyPropertyChanged("LogSectionSequenceNumber");
            }
        }

        private long? LogSectionSequenceNumberField; 

        /// <summary>
        /// LogSectionType property
        /// </summary>
		[Description("Type of log section.")]
        [EnergisticsDataTypeAttribute(DataType = "LogSectionType")]
		[XmlElement("LogSectionType")]
        public LogSectionType? LogSectionType {
            get {
                return LogSectionTypeField;
            } 
            set {
                LogSectionTypeField = value;
                 this.LogSectionTypeSpecified = true;
                NotifyPropertyChanged("LogSectionType");
            }
        }

        private LogSectionType? LogSectionTypeField; 

        /// <summary>
        /// LogSectionTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LogSectionTypeSpecified {
            get {
                return LogSectionTypeSpecifiedField;
            } 
            set {
                LogSectionTypeSpecifiedField = value;
                NotifyPropertyChanged("LogSectionTypeSpecified");
            }
        }

        private bool LogSectionTypeSpecifiedField; 

        /// <summary>
        /// LogSectionName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of a log section;  used to distinguish log sections of the same type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LogSectionName")]
        public string LogSectionName {
            get {
                return LogSectionNameField;
            } 
            set {
                LogSectionNameField = value;
                NotifyPropertyChanged("LogSectionName");
            }
        }

        private string LogSectionNameField; 

        /// <summary>
        /// LogMatrix property
        /// </summary>
		[StringLength(64)]
        [Description("Log matrix assumed for porosity computations.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LogMatrix")]
        public string LogMatrix {
            get {
                return LogMatrixField;
            } 
            set {
                LogMatrixField = value;
                NotifyPropertyChanged("LogMatrix");
            }
        }

        private string LogMatrixField; 

        /// <summary>
        /// ScaleNumerator property
        /// </summary>
		[Description("The numerator of the index (depth or time) scale of the original log, e. g. \"5 in\".")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ScaleNumerator")]
        public LengthMeasure ScaleNumerator {
            get {
                return ScaleNumeratorField;
            } 
            set {
                ScaleNumeratorField = value;
                NotifyPropertyChanged("ScaleNumerator");
            }
        }

        private LengthMeasure ScaleNumeratorField; 

        /// <summary>
        /// ScaleDenominator property
        /// </summary>
		[Description("The denominator of the index (depth or time) scale of the original log, e. g. \"100 ft\".  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("ScaleDenominator")]
        public GenericMeasure ScaleDenominator {
            get {
                return ScaleDenominatorField;
            } 
            set {
                ScaleDenominatorField = value;
                NotifyPropertyChanged("ScaleDenominator");
            }
        }

        private GenericMeasure ScaleDenominatorField; 

        /// <summary>
        /// IndexType property
        /// </summary>
		[Required]
        [Description("Primary index type. For date-time indexes, any specified index values should be defined as a time offset (e.g., in seconds) from the creationDate of the well log.")]
        [EnergisticsDataTypeAttribute(DataType = "LogIndexType")]
		[XmlElement("IndexType")]
        public LogIndexType? IndexType {
            get {
                return IndexTypeField;
            } 
            set {
                IndexTypeField = value;
                 this.IndexTypeSpecified = true;
                NotifyPropertyChanged("IndexType");
            }
        }

        
        private bool IndexTypeSpecifiedField = false;
        
        /// <summary>
        /// IndexTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexTypeSpecified {
            get {
                return IndexTypeSpecifiedField;
            } 
            set {
                IndexTypeSpecifiedField = value;
                NotifyPropertyChanged("IndexTypeSpecified");
            }
        }
        
        private LogIndexType? IndexTypeField; 

        /// <summary>
        /// IndexUom property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Index UOM of the original log.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("IndexUom")]
        public string IndexUom {
            get {
                return IndexUomField;
            } 
            set {
                IndexUomField = value;
                NotifyPropertyChanged("IndexUom");
            }
        }

        private string IndexUomField; 

        /// <summary>
        /// IndexReference property
        /// </summary>
		[Description("The origin for vertical coordinates on the original log. If this is not specified, information about the datum should be specified in a comment.")]
        [EnergisticsDataTypeAttribute(DataType = "WellboreDatumReference")]
		[XmlElement("IndexReference")]
        public WellboreDatumReference? IndexReference {
            get {
                return IndexReferenceField;
            } 
            set {
                IndexReferenceField = value;
                 this.IndexReferenceSpecified = true;
                NotifyPropertyChanged("IndexReference");
            }
        }

        private WellboreDatumReference? IndexReferenceField; 

        /// <summary>
        /// IndexReferenceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexReferenceSpecified {
            get {
                return IndexReferenceSpecifiedField;
            } 
            set {
                IndexReferenceSpecifiedField = value;
                NotifyPropertyChanged("IndexReferenceSpecified");
            }
        }

        private bool IndexReferenceSpecifiedField; 

        /// <summary>
        /// Log property
        /// </summary>
		[Description("The ID of the log being referred to by this section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Log")]
        public DataObjectReference Log {
            get {
                return LogField;
            } 
            set {
                LogField = value;
                NotifyPropertyChanged("Log");
            }
        }

        private DataObjectReference LogField; 

        /// <summary>
        /// MinInterval property
        /// </summary>
		[Required]
        [Description("Minimum of the range of theindex values.  '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("MinInterval")]
        public GenericMeasure MinInterval {
            get {
                return MinIntervalField;
            } 
            set {
                MinIntervalField = value;
                NotifyPropertyChanged("MinInterval");
            }
        }

        private GenericMeasure MinIntervalField; 

        /// <summary>
        /// MaxInterval property
        /// </summary>
		[Required]
        [Description("Maximum of the range of the index values. '@uom' must be consistent with '//indexType'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("MaxInterval")]
        public GenericMeasure MaxInterval {
            get {
                return MaxIntervalField;
            } 
            set {
                MaxIntervalField = value;
                NotifyPropertyChanged("MaxInterval");
            }
        }

        private GenericMeasure MaxIntervalField; 

        /// <summary>
        /// VerticalLabel property
        /// </summary>
		[StringLength(2000)]
        [Description("Vertical log scale label (e.g., “1 IN/100 F”).")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("VerticalLabel")]
        public string VerticalLabel {
            get {
                return VerticalLabelField;
            } 
            set {
                VerticalLabelField = value;
                NotifyPropertyChanged("VerticalLabel");
            }
        }

        private string VerticalLabelField; 

        /// <summary>
        /// VerticalRatio property
        /// </summary>
		[StringLength(2000)]
        [Description("Second term of the vertical scale ratio (e.g., “240” for a 5-inch-per-100-foot log section).")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("VerticalRatio")]
        public string VerticalRatio {
            get {
                return VerticalRatioField;
            } 
            set {
                VerticalRatioField = value;
                NotifyPropertyChanged("VerticalRatio");
            }
        }

        private string VerticalRatioField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments about the calibration.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// UpperCurveScaleRect property
        /// </summary>
		[Description("Boundaries of the upper curve scale (or horizontal scale) section for this log section.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegRectangle")]
		[XmlElement("UpperCurveScaleRect")]
        public List<DepthRegRectangle> UpperCurveScaleRect {
            get {
                return UpperCurveScaleRectField;
            } 
            set {
                UpperCurveScaleRectField = value;
                NotifyPropertyChanged("UpperCurveScaleRect");
            }
        }

         /// <summary>
         /// bool to indicate if UpperCurveScaleRect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool UpperCurveScaleRectSpecified
         {
             get {
             if(UpperCurveScaleRectField!=null)
                 return UpperCurveScaleRectField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegRectangle> UpperCurveScaleRectField; 

        /// <summary>
        /// CalibrationPoint property
        /// </summary>
		[Description("Generally this associates an X, Y value pair with a depth value from the log section.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegCalibrationPoint")]
		[XmlElement("CalibrationPoint")]
        public List<DepthRegCalibrationPoint> CalibrationPoint {
            get {
                return CalibrationPointField;
            } 
            set {
                CalibrationPointField = value;
                NotifyPropertyChanged("CalibrationPoint");
            }
        }

         /// <summary>
         /// bool to indicate if CalibrationPoint has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CalibrationPointSpecified
         {
             get {
             if(CalibrationPointField!=null)
                 return CalibrationPointField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegCalibrationPoint> CalibrationPointField; 

        /// <summary>
        /// WhiteSpace property
        /// </summary>
		[Description("Defines blank space occurring within a log section in an image.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegRectangle")]
		[XmlElement("WhiteSpace")]
        public List<DepthRegRectangle> WhiteSpace {
            get {
                return WhiteSpaceField;
            } 
            set {
                WhiteSpaceField = value;
                NotifyPropertyChanged("WhiteSpace");
            }
        }

         /// <summary>
         /// bool to indicate if WhiteSpace has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WhiteSpaceSpecified
         {
             get {
             if(WhiteSpaceField!=null)
                 return WhiteSpaceField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegRectangle> WhiteSpaceField; 

        /// <summary>
        /// LowerCurveScaleRect property
        /// </summary>
		[Description("Boundaries of the lower curve scale (or horizontal scale) section for this log section.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegRectangle")]
		[XmlElement("LowerCurveScaleRect")]
        public List<DepthRegRectangle> LowerCurveScaleRect {
            get {
                return LowerCurveScaleRectField;
            } 
            set {
                LowerCurveScaleRectField = value;
                NotifyPropertyChanged("LowerCurveScaleRect");
            }
        }

         /// <summary>
         /// bool to indicate if LowerCurveScaleRect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LowerCurveScaleRectSpecified
         {
             get {
             if(LowerCurveScaleRectField!=null)
                 return LowerCurveScaleRectField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegRectangle> LowerCurveScaleRectField; 

        /// <summary>
        /// LogSectionRect property
        /// </summary>
		[Description("The bounding rectangle of this log section.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegRectangle")]
		[XmlElement("LogSectionRect")]
        public List<DepthRegRectangle> LogSectionRect {
            get {
                return LogSectionRectField;
            } 
            set {
                LogSectionRectField = value;
                NotifyPropertyChanged("LogSectionRect");
            }
        }

         /// <summary>
         /// bool to indicate if LogSectionRect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogSectionRectSpecified
         {
             get {
             if(LogSectionRectField!=null)
                 return LogSectionRectField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegRectangle> LogSectionRectField; 

        /// <summary>
        /// Parameter property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegParameter")]
		[XmlElement("Parameter")]
        public List<DepthRegParameter> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegParameter> ParameterField; 

        /// <summary>
        /// Track property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegTrack")]
		[XmlElement("Track")]
        public List<DepthRegTrack> Track {
            get {
                return TrackField;
            } 
            set {
                TrackField = value;
                NotifyPropertyChanged("Track");
            }
        }

         /// <summary>
         /// bool to indicate if Track has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TrackSpecified
         {
             get {
             if(TrackField!=null)
                 return TrackField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegTrack> TrackField; 

		/// <summary>
        /// Unique identifier for the log section.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the log section.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthRegLogRect xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthRegLogRect", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthRegLogRect xsd type.")]
    public partial class DepthRegLogRect : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Type property
        /// </summary>
		[Description("A region of an image containing a log section image.")]
        [EnergisticsDataTypeAttribute(DataType = "LogRectangleType")]
		[XmlElement("Type")]
        public LogRectangleType? Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private LogRectangleType? TypeField; 

        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool TypeSpecifiedField; 

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of a rectangular section.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Position property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegRectangle")]
		[XmlElement("Position")]
        public DepthRegRectangle Position {
            get {
                return PositionField;
            } 
            set {
                PositionField = value;
                NotifyPropertyChanged("Position");
            }
        }

        private DepthRegRectangle PositionField; 

		/// <summary>
        /// Unique identifier for the log section.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the log section.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DigitalStorageMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DigitalStorageMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DigitalStorageMeasure xsd type.")]
    public partial class DigitalStorageMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DigitalStorageMeasure class.
        /// </summary>
        public DigitalStorageMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DigitalStorageMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DigitalStorageMeasure(double value, DigitalStorageUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DigitalStorageUom")]
        [XmlAttribute("uom")]
		
        public DigitalStorageUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DigitalStorageUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MemberObject xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MemberObject", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MemberObject xsd type.")]
    public partial class MemberObject : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// IndexType property
        /// </summary>
		[Description("For a log object, this specifies the kind of the index curve for the log. This is only relevant for a systematically growing object.")]
        [EnergisticsDataTypeAttribute(DataType = "LogIndexType")]
		[XmlElement("IndexType")]
        public LogIndexType? IndexType {
            get {
                return IndexTypeField;
            } 
            set {
                IndexTypeField = value;
                 this.IndexTypeSpecified = true;
                NotifyPropertyChanged("IndexType");
            }
        }

        private LogIndexType? IndexTypeField; 

        /// <summary>
        /// IndexTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexTypeSpecified {
            get {
                return IndexTypeSpecifiedField;
            } 
            set {
                IndexTypeSpecifiedField = value;
                NotifyPropertyChanged("IndexTypeSpecified");
            }
        }

        private bool IndexTypeSpecifiedField; 

        /// <summary>
        /// RangeMin property
        /// </summary>
		[Description("The minimum growing-object index value that applies to this group. The significance of this range is defined by the groupType.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("RangeMin")]
        public GenericMeasure RangeMin {
            get {
                return RangeMinField;
            } 
            set {
                RangeMinField = value;
                NotifyPropertyChanged("RangeMin");
            }
        }

        private GenericMeasure RangeMinField; 

        /// <summary>
        /// RangeMax property
        /// </summary>
		[Description("The maximum growing-object index value that applies to this group. The significance of this range is defined by the groupType.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("RangeMax")]
        public GenericMeasure RangeMax {
            get {
                return RangeMaxField;
            } 
            set {
                RangeMaxField = value;
                NotifyPropertyChanged("RangeMax");
            }
        }

        private GenericMeasure RangeMaxField; 

        /// <summary>
        /// RangeDateTimeMin property
        /// </summary>
		[Description("The minimum log date-time index value that applies to this group. The significance of this range is defined by the groupType.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("RangeDateTimeMin")]
        public Timestamp? RangeDateTimeMin {
            get {
                return RangeDateTimeMinField;
            } 
            set {
                RangeDateTimeMinField = value;
                 this.RangeDateTimeMinSpecified = true;
                NotifyPropertyChanged("RangeDateTimeMin");
            }
        }

        
        private bool RangeDateTimeMinSpecifiedField = false;
        
        /// <summary>
        /// RangeDateTimeMinSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RangeDateTimeMinSpecified {
            get {
                return RangeDateTimeMinSpecifiedField;
            } 
            set {
                RangeDateTimeMinSpecifiedField = value;
                NotifyPropertyChanged("RangeDateTimeMinSpecified");
            }
        }
        
        private Timestamp? RangeDateTimeMinField; 

        /// <summary>
        /// RangeDateTimeMax property
        /// </summary>
		[Description("The maximum log date-time index value that applies to this group. The significance of this range is defined by the groupType.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("RangeDateTimeMax")]
        public Timestamp? RangeDateTimeMax {
            get {
                return RangeDateTimeMaxField;
            } 
            set {
                RangeDateTimeMaxField = value;
                 this.RangeDateTimeMaxSpecified = true;
                NotifyPropertyChanged("RangeDateTimeMax");
            }
        }

        
        private bool RangeDateTimeMaxSpecifiedField = false;
        
        /// <summary>
        /// RangeDateTimeMaxSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RangeDateTimeMaxSpecified {
            get {
                return RangeDateTimeMaxSpecifiedField;
            } 
            set {
                RangeDateTimeMaxSpecifiedField = value;
                NotifyPropertyChanged("RangeDateTimeMaxSpecified");
            }
        }
        
        private Timestamp? RangeDateTimeMaxField; 

        /// <summary>
        /// MnemonicList property
        /// </summary>
		[Description("A comma delimited list of log curve mnemonics. Each mnemonic should only occur once in the list. If not specified then the group applies to all curves in the log.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("MnemonicList")]
        public string MnemonicList {
            get {
                return MnemonicListField;
            } 
            set {
                MnemonicListField = value;
                NotifyPropertyChanged("MnemonicList");
            }
        }

        private string MnemonicListField; 

        /// <summary>
        /// ReferenceDepth property
        /// </summary>
		[Description("A measured depth related to this group.  This does not necessarily represent an actual depth within a growing-object. The significance of this depth is defined by the groupType.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("ReferenceDepth")]
        public MeasuredDepthCoord ReferenceDepth {
            get {
                return ReferenceDepthField;
            } 
            set {
                ReferenceDepthField = value;
                NotifyPropertyChanged("ReferenceDepth");
            }
        }

        private MeasuredDepthCoord ReferenceDepthField; 

        /// <summary>
        /// ReferenceDateTime property
        /// </summary>
		[Description("A date and time related to this group.  This does not necessarily represent an actual index within a growing-object. The significance of this time is defined by the groupType.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("ReferenceDateTime")]
        public Timestamp? ReferenceDateTime {
            get {
                return ReferenceDateTimeField;
            } 
            set {
                ReferenceDateTimeField = value;
                 this.ReferenceDateTimeSpecified = true;
                NotifyPropertyChanged("ReferenceDateTime");
            }
        }

        
        private bool ReferenceDateTimeSpecifiedField = false;
        
        /// <summary>
        /// ReferenceDateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReferenceDateTimeSpecified {
            get {
                return ReferenceDateTimeSpecifiedField;
            } 
            set {
                ReferenceDateTimeSpecifiedField = value;
                NotifyPropertyChanged("ReferenceDateTimeSpecified");
            }
        }
        
        private Timestamp? ReferenceDateTimeField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Sequence3 property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectSequence")]
		[XmlElement("Sequence3")]
        public ObjectSequence Sequence3 {
            get {
                return Sequence3Field;
            } 
            set {
                Sequence3Field = value;
                NotifyPropertyChanged("Sequence3");
            }
        }

        private ObjectSequence Sequence3Field; 

        /// <summary>
        /// ObjectReference property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ObjectReference")]
        public DataObjectReference ObjectReference {
            get {
                return ObjectReferenceField;
            } 
            set {
                ObjectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private DataObjectReference ObjectReferenceField; 

        /// <summary>
        /// Sequence1 property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectSequence")]
		[XmlElement("Sequence1")]
        public ObjectSequence Sequence1 {
            get {
                return Sequence1Field;
            } 
            set {
                Sequence1Field = value;
                NotifyPropertyChanged("Sequence1");
            }
        }

        private ObjectSequence Sequence1Field; 

        /// <summary>
        /// Sequence2 property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectSequence")]
		[XmlElement("Sequence2")]
        public ObjectSequence Sequence2 {
            get {
                return Sequence2Field;
            } 
            set {
                Sequence2Field = value;
                NotifyPropertyChanged("Sequence2");
            }
        }

        private ObjectSequence Sequence2Field; 

		/// <summary>
        /// Unique identifier for this instance of MemberObject
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of MemberObject")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ObjectSequence xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ObjectSequence", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ObjectSequence xsd type.")]
    public partial class ObjectSequence : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// The description of this object sequence.
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("The description of this object sequence.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
        [XmlAttribute("description")]
		
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Participant xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Participant", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Participant xsd type.")]
    public partial class Participant : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ExtNameValues property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtNameValues")]
        public List<ExtensionNameValue> ExtNameValues {
            get {
                return ExtNameValuesField;
            } 
            set {
                ExtNameValuesField = value;
                NotifyPropertyChanged("ExtNameValues");
            }
        }

         /// <summary>
         /// bool to indicate if ExtNameValues has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtNameValuesSpecified
         {
             get {
             if(ExtNameValuesField!=null)
                 return ExtNameValuesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtNameValuesField; 

        /// <summary>
        /// Participant1 property
        /// </summary>
		[RecurringElement]
		[XmlElement("Participant")]
        public List<MemberObject> Participant1 {
            get {
                return Participant1Field;
            } 
            set {
                Participant1Field = value;
                NotifyPropertyChanged("Participant1");
            }
        }

         /// <summary>
         /// bool to indicate if Participant1 has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool Participant1Specified
         {
             get {
             if(Participant1Field!=null)
                 return Participant1Field.Count>0?true:false;
             else return false;
             }
         }
        private List<MemberObject> Participant1Field; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DownholeStringReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DownholeStringReference", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DownholeStringReference xsd type.")]
    public partial class DownholeStringReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to string equipment
        /// </summary>
		[Description("Reference to string equipment")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StringEquipmentReferenceId")]
        public List<string> StringEquipmentReferenceId {
            get {
                return StringEquipmentReferenceIdField;
            } 
            set {
                StringEquipmentReferenceIdField = value;
                NotifyPropertyChanged("StringEquipmentReferenceId");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentReferenceId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentReferenceIdSpecified
         {
             get {
             if(StringEquipmentReferenceIdField!=null)
                 return StringEquipmentReferenceIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> StringEquipmentReferenceIdField; 

		/// <summary>
        /// Reference to downhole string
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to downhole string")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("downholeStringReferenceId")]
		
        public string DownholeStringReferenceId {
            get {
                return downholeStringReferenceIdField;
            } 
            set {
                downholeStringReferenceIdField = value;
                NotifyPropertyChanged("DownholeStringReferenceId");
            }
        }

        private string downholeStringReferenceIdField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BoreholeStringReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BoreholeStringReference", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BoreholeStringReference xsd type.")]
    public partial class BoreholeStringReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to string equipment
        /// </summary>
		[Description("Reference to string equipment")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StringEquipmentReferenceId")]
        public List<string> StringEquipmentReferenceId {
            get {
                return StringEquipmentReferenceIdField;
            } 
            set {
                StringEquipmentReferenceIdField = value;
                NotifyPropertyChanged("StringEquipmentReferenceId");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentReferenceId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentReferenceIdSpecified
         {
             get {
             if(StringEquipmentReferenceIdField!=null)
                 return StringEquipmentReferenceIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> StringEquipmentReferenceIdField; 

		/// <summary>
        /// Reference to borehole String
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to borehole String")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("boreholeStringReferenceId")]
		
        public string BoreholeStringReferenceId {
            get {
                return boreholeStringReferenceIdField;
            } 
            set {
                boreholeStringReferenceIdField = value;
                NotifyPropertyChanged("BoreholeStringReferenceId");
            }
        }

        private string boreholeStringReferenceIdField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DownholeComponentReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DownholeComponentReference", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DownholeComponentReference xsd type.")]
    public partial class DownholeComponentReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// StringEquipmentReferenceId property
        /// </summary>
		[Description("Reference to string equipment")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StringEquipmentReferenceId")]
        public List<string> StringEquipmentReferenceId {
            get {
                return StringEquipmentReferenceIdField;
            } 
            set {
                StringEquipmentReferenceIdField = value;
                NotifyPropertyChanged("StringEquipmentReferenceId");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentReferenceId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentReferenceIdSpecified
         {
             get {
             if(StringEquipmentReferenceIdField!=null)
                 return StringEquipmentReferenceIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> StringEquipmentReferenceIdField; 

        /// <summary>
        /// PerforationSetReferenceId property
        /// </summary>
		[Description("Reference to perforation set")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PerforationSetReferenceId")]
        public List<string> PerforationSetReferenceId {
            get {
                return PerforationSetReferenceIdField;
            } 
            set {
                PerforationSetReferenceIdField = value;
                NotifyPropertyChanged("PerforationSetReferenceId");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSetReferenceId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetReferenceIdSpecified
         {
             get {
             if(PerforationSetReferenceIdField!=null)
                 return PerforationSetReferenceIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> PerforationSetReferenceIdField; 

        /// <summary>
        /// BoreholeStringReference property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "BoreholeStringReference")]
		[XmlElement("BoreholeStringReference")]
        public List<BoreholeStringReference> BoreholeStringReference {
            get {
                return BoreholeStringReferenceField;
            } 
            set {
                BoreholeStringReferenceField = value;
                NotifyPropertyChanged("BoreholeStringReference");
            }
        }

         /// <summary>
         /// bool to indicate if BoreholeStringReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeStringReferenceSpecified
         {
             get {
             if(BoreholeStringReferenceField!=null)
                 return BoreholeStringReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<BoreholeStringReference> BoreholeStringReferenceField; 

        /// <summary>
        /// DownholeStringsReference property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DownholeStringReference")]
		[XmlElement("DownholeStringsReference")]
        public List<DownholeStringReference> DownholeStringsReference {
            get {
                return DownholeStringsReferenceField;
            } 
            set {
                DownholeStringsReferenceField = value;
                NotifyPropertyChanged("DownholeStringsReference");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeStringsReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeStringsReferenceSpecified
         {
             get {
             if(DownholeStringsReferenceField!=null)
                 return DownholeStringsReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<DownholeStringReference> DownholeStringsReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Perforating xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Perforating", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Perforating xsd type.")]
    public partial class Perforating : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// index number of stage
        /// </summary>
		[Description("index number of stage")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("StageNumber")]
        public int? StageNumber {
            get {
                return StageNumberField;
            } 
            set {
                StageNumberField = value;
                 this.StageNumberSpecified = true;
                NotifyPropertyChanged("StageNumber");
            }
        }

        private int? StageNumberField; 

        /// <summary>
        /// StageNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StageNumberSpecified {
            get {
                return StageNumberSpecifiedField;
            } 
            set {
                StageNumberSpecifiedField = value;
                NotifyPropertyChanged("StageNumberSpecified");
            }
        }

        private bool StageNumberSpecifiedField; 

        /// <summary>
        /// Perf-Bottom of packer set depth
        /// </summary>
		[Description("Perf-Bottom of packer set depth")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("BottomPackerSet")]
        public MeasuredDepthCoord BottomPackerSet {
            get {
                return BottomPackerSetField;
            } 
            set {
                BottomPackerSetField = value;
                NotifyPropertyChanged("BottomPackerSet");
            }
        }

        private MeasuredDepthCoord BottomPackerSetField; 

        /// <summary>
        /// Perforation fluid type
        /// </summary>
		[StringLength(64)]
        [Description("Perforation fluid type")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PerforationFluidType")]
        public string PerforationFluidType {
            get {
                return PerforationFluidTypeField;
            } 
            set {
                PerforationFluidTypeField = value;
                NotifyPropertyChanged("PerforationFluidType");
            }
        }

        private string PerforationFluidTypeField; 

        /// <summary>
        /// hydrostaticPressure
        /// </summary>
		[Description("hydrostaticPressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("HydrostaticPressure")]
        public PressureMeasure HydrostaticPressure {
            get {
                return HydrostaticPressureField;
            } 
            set {
                HydrostaticPressureField = value;
                NotifyPropertyChanged("HydrostaticPressure");
            }
        }

        private PressureMeasure HydrostaticPressureField; 

        /// <summary>
        /// Surface pressure
        /// </summary>
		[Description("Surface pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("SurfacePressure")]
        public PressureMeasure SurfacePressure {
            get {
                return SurfacePressureField;
            } 
            set {
                SurfacePressureField = value;
                NotifyPropertyChanged("SurfacePressure");
            }
        }

        private PressureMeasure SurfacePressureField; 

        /// <summary>
        /// Reservoir pressure
        /// </summary>
		[Description("Reservoir pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("ReservoirPressure")]
        public PressureMeasure ReservoirPressure {
            get {
                return ReservoirPressureField;
            } 
            set {
                ReservoirPressureField = value;
                NotifyPropertyChanged("ReservoirPressure");
            }
        }

        private PressureMeasure ReservoirPressureField; 

        /// <summary>
        /// The density of fluid
        /// </summary>
		[Description("The density of fluid")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("FluidDensity")]
        public MassPerMassMeasure FluidDensity {
            get {
                return FluidDensityField;
            } 
            set {
                FluidDensityField = value;
                NotifyPropertyChanged("FluidDensity");
            }
        }

        private MassPerMassMeasure FluidDensityField; 

        /// <summary>
        /// Fluid level.
        /// </summary>
		[Description("Fluid level.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("FluidLevel")]
        public MeasuredDepthCoord FluidLevel {
            get {
                return FluidLevelField;
            } 
            set {
                FluidLevelField = value;
                NotifyPropertyChanged("FluidLevel");
            }
        }

        private MeasuredDepthCoord FluidLevelField; 

        /// <summary>
        /// The conveyance method
        /// </summary>
		[Description("The conveyance method")]
        [EnergisticsDataTypeAttribute(DataType = "PerfConveyanceMethod")]
		[XmlElement("ConveyanceMethod")]
        public PerfConveyanceMethod? ConveyanceMethod {
            get {
                return ConveyanceMethodField;
            } 
            set {
                ConveyanceMethodField = value;
                 this.ConveyanceMethodSpecified = true;
                NotifyPropertyChanged("ConveyanceMethod");
            }
        }

        private PerfConveyanceMethod? ConveyanceMethodField; 

        /// <summary>
        /// ConveyanceMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ConveyanceMethodSpecified {
            get {
                return ConveyanceMethodSpecifiedField;
            } 
            set {
                ConveyanceMethodSpecifiedField = value;
                NotifyPropertyChanged("ConveyanceMethodSpecified");
            }
        }

        private bool ConveyanceMethodSpecifiedField; 

        /// <summary>
        /// Number of shots planned
        /// </summary>
		[Description("Number of shots planned")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("ShotsPlanned")]
        public int? ShotsPlanned {
            get {
                return ShotsPlannedField;
            } 
            set {
                ShotsPlannedField = value;
                 this.ShotsPlannedSpecified = true;
                NotifyPropertyChanged("ShotsPlanned");
            }
        }

        private int? ShotsPlannedField; 

        /// <summary>
        /// ShotsPlannedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShotsPlannedSpecified {
            get {
                return ShotsPlannedSpecifiedField;
            } 
            set {
                ShotsPlannedSpecifiedField = value;
                NotifyPropertyChanged("ShotsPlannedSpecified");
            }
        }

        private bool ShotsPlannedSpecifiedField; 

        /// <summary>
        /// Number of shots per unit length (ft, m)
        /// </summary>
		[Description("Number of shots per unit length (ft, m)")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ReciprocalLengthMeasure")]
		[XmlElement("ShotsDensity")]
        public ReciprocalLengthMeasure ShotsDensity {
            get {
                return ShotsDensityField;
            } 
            set {
                ShotsDensityField = value;
                NotifyPropertyChanged("ShotsDensity");
            }
        }

        private ReciprocalLengthMeasure ShotsDensityField; 

        /// <summary>
        /// The number of missed firings from the gun.
        /// </summary>
		[Description("The number of missed firings from the gun.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("ShotsMisfired")]
        public int? ShotsMisfired {
            get {
                return ShotsMisfiredField;
            } 
            set {
                ShotsMisfiredField = value;
                 this.ShotsMisfiredSpecified = true;
                NotifyPropertyChanged("ShotsMisfired");
            }
        }

        private int? ShotsMisfiredField; 

        /// <summary>
        /// ShotsMisfiredSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShotsMisfiredSpecified {
            get {
                return ShotsMisfiredSpecifiedField;
            } 
            set {
                ShotsMisfiredSpecifiedField = value;
                NotifyPropertyChanged("ShotsMisfiredSpecified");
            }
        }

        private bool ShotsMisfiredSpecifiedField; 

        /// <summary>
        /// orientaton
        /// </summary>
		[StringLength(64)]
        [Description("orientaton")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Orientation")]
        public string Orientation {
            get {
                return OrientationField;
            } 
            set {
                OrientationField = value;
                NotifyPropertyChanged("Orientation");
            }
        }

        private string OrientationField; 

        /// <summary>
        /// Description of orientaton method
        /// </summary>
		[StringLength(64)]
        [Description("Description of orientaton method")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("OrientationMethod")]
        public string OrientationMethod {
            get {
                return OrientationMethodField;
            } 
            set {
                OrientationMethodField = value;
                NotifyPropertyChanged("OrientationMethod");
            }
        }

        private string OrientationMethodField; 

        /// <summary>
        /// The name of company providing the perforation.
        /// </summary>
		[StringLength(64)]
        [Description("The name of company providing the perforation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PerforationCompany")]
        public string PerforationCompany {
            get {
                return PerforationCompanyField;
            } 
            set {
                PerforationCompanyField = value;
                NotifyPropertyChanged("PerforationCompany");
            }
        }

        private string PerforationCompanyField; 

        /// <summary>
        /// The manufacturer of the carrier.
        /// </summary>
		[StringLength(64)]
        [Description("The manufacturer of the carrier.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CarrierManufacturer")]
        public string CarrierManufacturer {
            get {
                return CarrierManufacturerField;
            } 
            set {
                CarrierManufacturerField = value;
                NotifyPropertyChanged("CarrierManufacturer");
            }
        }

        private string CarrierManufacturerField; 

        /// <summary>
        /// Size of the carrier.
        /// </summary>
		[Description("Size of the carrier.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("CarrierSize")]
        public LengthMeasure CarrierSize {
            get {
                return CarrierSizeField;
            } 
            set {
                CarrierSizeField = value;
                NotifyPropertyChanged("CarrierSize");
            }
        }

        private LengthMeasure CarrierSizeField; 

        /// <summary>
        /// Description from carrier
        /// </summary>
		[StringLength(2000)]
        [Description("Description from carrier")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("CarrierDescription")]
        public string CarrierDescription {
            get {
                return CarrierDescriptionField;
            } 
            set {
                CarrierDescriptionField = value;
                NotifyPropertyChanged("CarrierDescription");
            }
        }

        private string CarrierDescriptionField; 

        /// <summary>
        /// The manufacturer of the charge.
        /// </summary>
		[StringLength(64)]
        [Description("The manufacturer of the charge.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ChargeManufacturer")]
        public string ChargeManufacturer {
            get {
                return ChargeManufacturerField;
            } 
            set {
                ChargeManufacturerField = value;
                NotifyPropertyChanged("ChargeManufacturer");
            }
        }

        private string ChargeManufacturerField; 

        /// <summary>
        /// The size of the charge.
        /// </summary>
		[Description("The size of the charge.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ChargeSize")]
        public LengthMeasure ChargeSize {
            get {
                return ChargeSizeField;
            } 
            set {
                ChargeSizeField = value;
                NotifyPropertyChanged("ChargeSize");
            }
        }

        private LengthMeasure ChargeSizeField; 

        /// <summary>
        /// The weight of the charge.
        /// </summary>
		[Description("The weight of the charge.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("ChargeWeight")]
        public MassMeasure ChargeWeight {
            get {
                return ChargeWeightField;
            } 
            set {
                ChargeWeightField = value;
                NotifyPropertyChanged("ChargeWeight");
            }
        }

        private MassMeasure ChargeWeightField; 

        /// <summary>
        /// The type of the charge.
        /// </summary>
		[StringLength(64)]
        [Description("The type of the charge.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ChargeType")]
        public string ChargeType {
            get {
                return ChargeTypeField;
            } 
            set {
                ChargeTypeField = value;
                NotifyPropertyChanged("ChargeType");
            }
        }

        private string ChargeTypeField; 

        /// <summary>
        /// Reference to the log
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the log")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RefLog")]
        public string RefLog {
            get {
                return RefLogField;
            } 
            set {
                RefLogField = value;
                NotifyPropertyChanged("RefLog");
            }
        }

        private string RefLogField; 

        /// <summary>
        /// True if centralized, else decentralized.
        /// </summary>
		[StringLength(64)]
        [Description("True if centralized, else decentralized.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GunCentralized")]
        public string GunCentralized {
            get {
                return GunCentralizedField;
            } 
            set {
                GunCentralizedField = value;
                NotifyPropertyChanged("GunCentralized");
            }
        }

        private string GunCentralizedField; 

        /// <summary>
        /// The size of the perforation gun.
        /// </summary>
		[Description("The size of the perforation gun.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("GunSize")]
        public LengthMeasure GunSize {
            get {
                return GunSizeField;
            } 
            set {
                GunSizeField = value;
                NotifyPropertyChanged("GunSize");
            }
        }

        private LengthMeasure GunSizeField; 

        /// <summary>
        /// Description about the perforating gun.
        /// </summary>
		[StringLength(2000)]
        [Description("Description about the perforating gun.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("GunDesciption")]
        public string GunDesciption {
            get {
                return GunDesciptionField;
            } 
            set {
                GunDesciptionField = value;
                NotifyPropertyChanged("GunDesciption");
            }
        }

        private string GunDesciptionField; 

        /// <summary>
        /// Flag indicating whether the gun is left in hole or not.
        /// </summary>
		[Description("Flag indicating whether the gun is left in hole or not.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("GunLeftInHole")]
        public bool? GunLeftInHole {
            get {
                return GunLeftInHoleField;
            } 
            set {
                GunLeftInHoleField = value;
                 this.GunLeftInHoleSpecified = true;
                NotifyPropertyChanged("GunLeftInHole");
            }
        }

        private bool? GunLeftInHoleField; 

        /// <summary>
        /// GunLeftInHoleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GunLeftInHoleSpecified {
            get {
                return GunLeftInHoleSpecifiedField;
            } 
            set {
                GunLeftInHoleSpecifiedField = value;
                NotifyPropertyChanged("GunLeftInHoleSpecified");
            }
        }

        private bool GunLeftInHoleSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of Perforating
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Perforating")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReciprocalLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReciprocalLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ReciprocalLengthMeasure xsd type.")]
    public partial class ReciprocalLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ReciprocalLengthMeasure class.
        /// </summary>
        public ReciprocalLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ReciprocalLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ReciprocalLengthMeasure(double value, ReciprocalLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ReciprocalLengthUom")]
        [XmlAttribute("uom")]
		
        public ReciprocalLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ReciprocalLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractEventExtension xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DownholeExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidReportExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PerforatingExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WaitingOnExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PressureTestExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JobExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AcidizefracExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BHPExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LostCirculationExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DirectionalSurveyExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CleanFillExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementExtension))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractEventExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractEventExtension xsd type.")]
    public abstract partial class AbstractEventExtension : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DownholeExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DownholeExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DownholeExtension xsd type.")]
    public partial class DownholeExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// DownholeComponentRefID property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to downhole component")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DownholeComponentRefID")]
        public string DownholeComponentRefID {
            get {
                return DownholeComponentRefIDField;
            } 
            set {
                DownholeComponentRefIDField = value;
                NotifyPropertyChanged("DownholeComponentRefID");
            }
        }

        private string DownholeComponentRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CustomData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CustomData", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the CustomData xsd type.")]
    public partial class CustomData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Any property
        /// </summary>
		[RecurringElement]
		[XmlAnyElement]
        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

         /// <summary>
         /// bool to indicate if Any has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnySpecified
         {
             get {
             if(AnyField!=null)
                 return AnyField.Count>0?true:false;
             else return false;
             }
         }
        private List<XmlElement> AnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidReportExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidReportExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the FluidReportExtension xsd type.")]
    public partial class FluidReportExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// FluidReportRefID property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the fluid report")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FluidReportRefID")]
        public string FluidReportRefID {
            get {
                return FluidReportRefIDField;
            } 
            set {
                FluidReportRefIDField = value;
                NotifyPropertyChanged("FluidReportRefID");
            }
        }

        private string FluidReportRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerforatingExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerforatingExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerforatingExtension xsd type.")]
    public partial class PerforatingExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// PerforationSetRefID property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The perforationSet reference ID.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PerforationSetRefID")]
        public string PerforationSetRefID {
            get {
                return PerforationSetRefIDField;
            } 
            set {
                PerforationSetRefIDField = value;
                NotifyPropertyChanged("PerforationSetRefID");
            }
        }

        private string PerforationSetRefIDField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

        /// <summary>
        /// Perforating property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Perforating")]
		[XmlElement("Perforating")]
        public List<Perforating> Perforating {
            get {
                return PerforatingField;
            } 
            set {
                PerforatingField = value;
                NotifyPropertyChanged("Perforating");
            }
        }

         /// <summary>
         /// bool to indicate if Perforating has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforatingSpecified
         {
             get {
             if(PerforatingField!=null)
                 return PerforatingField.Count>0?true:false;
             else return false;
             }
         }
        private List<Perforating> PerforatingField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WaitingOnExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WaitingOnExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the WaitingOnExtension xsd type.")]
    public partial class WaitingOnExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// SubCategory property
        /// </summary>
		[StringLength(64)]
        [Description("Sub category")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SubCategory")]
        public string SubCategory {
            get {
                return SubCategoryField;
            } 
            set {
                SubCategoryField = value;
                NotifyPropertyChanged("SubCategory");
            }
        }

        private string SubCategoryField; 

        /// <summary>
        /// ChargeTypeCode property
        /// </summary>
		[StringLength(64)]
        [Description("Code for charge type")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ChargeTypeCode")]
        public string ChargeTypeCode {
            get {
                return ChargeTypeCodeField;
            } 
            set {
                ChargeTypeCodeField = value;
                NotifyPropertyChanged("ChargeTypeCode");
            }
        }

        private string ChargeTypeCodeField; 

        /// <summary>
        /// BusinessOrgWaitingOn property
        /// </summary>
		[StringLength(64)]
        [Description("Business organization waiting on")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("BusinessOrgWaitingOn")]
        public string BusinessOrgWaitingOn {
            get {
                return BusinessOrgWaitingOnField;
            } 
            set {
                BusinessOrgWaitingOnField = value;
                NotifyPropertyChanged("BusinessOrgWaitingOn");
            }
        }

        private string BusinessOrgWaitingOnField; 

        /// <summary>
        /// IsNoChargeToProducer property
        /// </summary>
		[Description("Flag indicating whether producer is charged or not")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsNoChargeToProducer")]
        public bool? IsNoChargeToProducer {
            get {
                return IsNoChargeToProducerField;
            } 
            set {
                IsNoChargeToProducerField = value;
                 this.IsNoChargeToProducerSpecified = true;
                NotifyPropertyChanged("IsNoChargeToProducer");
            }
        }

        private bool? IsNoChargeToProducerField; 

        /// <summary>
        /// IsNoChargeToProducerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsNoChargeToProducerSpecified {
            get {
                return IsNoChargeToProducerSpecifiedField;
            } 
            set {
                IsNoChargeToProducerSpecifiedField = value;
                NotifyPropertyChanged("IsNoChargeToProducerSpecified");
            }
        }

        private bool IsNoChargeToProducerSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PressureTestExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PressureTestExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PressureTestExtension xsd type.")]
    public partial class PressureTestExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// DiaOrificeSize property
        /// </summary>
		[Description("Orifice Size")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaOrificeSize")]
        public LengthMeasure DiaOrificeSize {
            get {
                return DiaOrificeSizeField;
            } 
            set {
                DiaOrificeSizeField = value;
                NotifyPropertyChanged("DiaOrificeSize");
            }
        }

        private LengthMeasure DiaOrificeSizeField; 

        /// <summary>
        /// DTimeNextTestDate property
        /// </summary>
		[Description("Next Test Date")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimeNextTestDate")]
        public Timestamp? DTimeNextTestDate {
            get {
                return DTimeNextTestDateField;
            } 
            set {
                DTimeNextTestDateField = value;
                 this.DTimeNextTestDateSpecified = true;
                NotifyPropertyChanged("DTimeNextTestDate");
            }
        }

        
        private bool DTimeNextTestDateSpecifiedField = false;
        
        /// <summary>
        /// DTimeNextTestDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DTimeNextTestDateSpecified {
            get {
                return DTimeNextTestDateSpecifiedField;
            } 
            set {
                DTimeNextTestDateSpecifiedField = value;
                NotifyPropertyChanged("DTimeNextTestDateSpecified");
            }
        }
        
        private Timestamp? DTimeNextTestDateField; 

        /// <summary>
        /// FlowrateRateBled property
        /// </summary>
		[Description("Rate Bled")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateRateBled")]
        public VolumePerTimeMeasure FlowrateRateBled {
            get {
                return FlowrateRateBledField;
            } 
            set {
                FlowrateRateBledField = value;
                NotifyPropertyChanged("FlowrateRateBled");
            }
        }

        private VolumePerTimeMeasure FlowrateRateBledField; 

        /// <summary>
        /// IdentifierJob property
        /// </summary>
		[StringLength(64)]
        [Description("String Being Tested")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("IdentifierJob")]
        public string IdentifierJob {
            get {
                return IdentifierJobField;
            } 
            set {
                IdentifierJobField = value;
                NotifyPropertyChanged("IdentifierJob");
            }
        }

        private string IdentifierJobField; 

        /// <summary>
        /// IsSuccess property
        /// </summary>
		[Description("True if successful")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsSuccess")]
        public bool? IsSuccess {
            get {
                return IsSuccessField;
            } 
            set {
                IsSuccessField = value;
                 this.IsSuccessSpecified = true;
                NotifyPropertyChanged("IsSuccess");
            }
        }

        private bool? IsSuccessField; 

        /// <summary>
        /// IsSuccessSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsSuccessSpecified {
            get {
                return IsSuccessSpecifiedField;
            } 
            set {
                IsSuccessSpecifiedField = value;
                NotifyPropertyChanged("IsSuccessSpecified");
            }
        }

        private bool IsSuccessSpecifiedField; 

        /// <summary>
        /// MaxPressureDuration property
        /// </summary>
		[Description("Maximum pressure held during test")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("MaxPressureDuration")]
        public PressureMeasure MaxPressureDuration {
            get {
                return MaxPressureDurationField;
            } 
            set {
                MaxPressureDurationField = value;
                NotifyPropertyChanged("MaxPressureDuration");
            }
        }

        private PressureMeasure MaxPressureDurationField; 

        /// <summary>
        /// CirculatingPosition property
        /// </summary>
		[StringLength(64)]
        [Description("Circulating position")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CirculatingPosition")]
        public string CirculatingPosition {
            get {
                return CirculatingPositionField;
            } 
            set {
                CirculatingPositionField = value;
                NotifyPropertyChanged("CirculatingPosition");
            }
        }

        private string CirculatingPositionField; 

        /// <summary>
        /// FluidBledType property
        /// </summary>
		[StringLength(64)]
        [Description("Fluid bled type")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FluidBledType")]
        public string FluidBledType {
            get {
                return FluidBledTypeField;
            } 
            set {
                FluidBledTypeField = value;
                NotifyPropertyChanged("FluidBledType");
            }
        }

        private string FluidBledTypeField; 

        /// <summary>
        /// OrientationMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Description of orientaton method")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("OrientationMethod")]
        public string OrientationMethod {
            get {
                return OrientationMethodField;
            } 
            set {
                OrientationMethodField = value;
                NotifyPropertyChanged("OrientationMethod");
            }
        }

        private string OrientationMethodField; 

        /// <summary>
        /// TestFluidType property
        /// </summary>
		[StringLength(64)]
        [Description("Test fluid type")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TestFluidType")]
        public string TestFluidType {
            get {
                return TestFluidTypeField;
            } 
            set {
                TestFluidTypeField = value;
                NotifyPropertyChanged("TestFluidType");
            }
        }

        private string TestFluidTypeField; 

        /// <summary>
        /// TestSubType property
        /// </summary>
		[StringLength(64)]
        [Description("Test sub type")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TestSubType")]
        public string TestSubType {
            get {
                return TestSubTypeField;
            } 
            set {
                TestSubTypeField = value;
                NotifyPropertyChanged("TestSubType");
            }
        }

        private string TestSubTypeField; 

        /// <summary>
        /// TestType property
        /// </summary>
		[StringLength(64)]
        [Description("Test type")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TestType")]
        public string TestType {
            get {
                return TestTypeField;
            } 
            set {
                TestTypeField = value;
                NotifyPropertyChanged("TestType");
            }
        }

        private string TestTypeField; 

        /// <summary>
        /// AnnulusPressure property
        /// </summary>
		[Description("Annulus pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AnnulusPressure")]
        public PressureMeasure AnnulusPressure {
            get {
                return AnnulusPressureField;
            } 
            set {
                AnnulusPressureField = value;
                NotifyPropertyChanged("AnnulusPressure");
            }
        }

        private PressureMeasure AnnulusPressureField; 

        /// <summary>
        /// WellPressureUsed property
        /// </summary>
		[StringLength(64)]
        [Description("Well pressure used")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WellPressureUsed")]
        public string WellPressureUsed {
            get {
                return WellPressureUsedField;
            } 
            set {
                WellPressureUsedField = value;
                NotifyPropertyChanged("WellPressureUsed");
            }
        }

        private string WellPressureUsedField; 

        /// <summary>
        /// Str10Reference property
        /// </summary>
		[StringLength(64)]
        [Description("Reference #")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Str10Reference")]
        public string Str10Reference {
            get {
                return Str10ReferenceField;
            } 
            set {
                Str10ReferenceField = value;
                NotifyPropertyChanged("Str10Reference");
            }
        }

        private string Str10ReferenceField; 

        /// <summary>
        /// UidAssembly property
        /// </summary>
		[StringLength(64)]
        [Description("Well (Assembly)")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("UidAssembly")]
        public string UidAssembly {
            get {
                return UidAssemblyField;
            } 
            set {
                UidAssemblyField = value;
                NotifyPropertyChanged("UidAssembly");
            }
        }

        private string UidAssemblyField; 

        /// <summary>
        /// VolumeBled property
        /// </summary>
		[Description("Volume Bled")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolumeBled")]
        public VolumeMeasure VolumeBled {
            get {
                return VolumeBledField;
            } 
            set {
                VolumeBledField = value;
                NotifyPropertyChanged("VolumeBled");
            }
        }

        private VolumeMeasure VolumeBledField; 

        /// <summary>
        /// VolumeLost property
        /// </summary>
		[Description("Volume Lost")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolumeLost")]
        public VolumeMeasure VolumeLost {
            get {
                return VolumeLostField;
            } 
            set {
                VolumeLostField = value;
                NotifyPropertyChanged("VolumeLost");
            }
        }

        private VolumeMeasure VolumeLostField; 

        /// <summary>
        /// VolumePumped property
        /// </summary>
		[Description("Volume Pumped")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolumePumped")]
        public VolumeMeasure VolumePumped {
            get {
                return VolumePumpedField;
            } 
            set {
                VolumePumpedField = value;
                NotifyPropertyChanged("VolumePumped");
            }
        }

        private VolumeMeasure VolumePumpedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the JobExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="JobExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the JobExtension xsd type.")]
    public partial class JobExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// JobReason property
        /// </summary>
		[StringLength(2000)]
        [Description("Comment on the reason for the job")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("JobReason")]
        public string JobReason {
            get {
                return JobReasonField;
            } 
            set {
                JobReasonField = value;
                NotifyPropertyChanged("JobReason");
            }
        }

        private string JobReasonField; 

        /// <summary>
        /// JobStatus property
        /// </summary>
		[StringLength(64)]
        [Description("Status of job")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("JobStatus")]
        public string JobStatus {
            get {
                return JobStatusField;
            } 
            set {
                JobStatusField = value;
                NotifyPropertyChanged("JobStatus");
            }
        }

        private string JobStatusField; 

        /// <summary>
        /// PrimaryMotivationForJob property
        /// </summary>
		[StringLength(64)]
        [Description("The primary reason for doing this job.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PrimaryMotivationForJob")]
        public string PrimaryMotivationForJob {
            get {
                return PrimaryMotivationForJobField;
            } 
            set {
                PrimaryMotivationForJobField = value;
                NotifyPropertyChanged("PrimaryMotivationForJob");
            }
        }

        private string PrimaryMotivationForJobField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AcidizefracExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AcidizefracExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AcidizefracExtension xsd type.")]
    public partial class AcidizefracExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// StimJobID property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to a StimJob.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StimJobID")]
        public string StimJobID {
            get {
                return StimJobIDField;
            } 
            set {
                StimJobIDField = value;
                NotifyPropertyChanged("StimJobID");
            }
        }

        private string StimJobIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BHPExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BHPExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BHPExtension xsd type.")]
    public partial class BHPExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// BHPRefID property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to bottom hole pressure")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("BHPRefID")]
        public string BHPRefID {
            get {
                return BHPRefIDField;
            } 
            set {
                BHPRefIDField = value;
                NotifyPropertyChanged("BHPRefID");
            }
        }

        private string BHPRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LostCirculationExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LostCirculationExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the LostCirculationExtension xsd type.")]
    public partial class LostCirculationExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// VolumeLost property
        /// </summary>
		[Description("Volume lost")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolumeLost")]
        public VolumeMeasure VolumeLost {
            get {
                return VolumeLostField;
            } 
            set {
                VolumeLostField = value;
                NotifyPropertyChanged("VolumeLost");
            }
        }

        private VolumeMeasure VolumeLostField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DirectionalSurveyExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DirectionalSurveyExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DirectionalSurveyExtension xsd type.")]
    public partial class DirectionalSurveyExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// TrajectoryRefID property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to trajectory")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TrajectoryRefID")]
        public string TrajectoryRefID {
            get {
                return TrajectoryRefIDField;
            } 
            set {
                TrajectoryRefIDField = value;
                NotifyPropertyChanged("TrajectoryRefID");
            }
        }

        private string TrajectoryRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CleanFillExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CleanFillExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CleanFillExtension xsd type.")]
    public partial class CleanFillExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// FillCleaningMethod property
        /// </summary>
		[StringLength(64)]
        [Description("method of fill and cleaning")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FillCleaningMethod")]
        public string FillCleaningMethod {
            get {
                return FillCleaningMethodField;
            } 
            set {
                FillCleaningMethodField = value;
                NotifyPropertyChanged("FillCleaningMethod");
            }
        }

        private string FillCleaningMethodField; 

        /// <summary>
        /// ToolSize property
        /// </summary>
		[Description("the size of the tool")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ToolSize")]
        public LengthMeasure ToolSize {
            get {
                return ToolSizeField;
            } 
            set {
                ToolSizeField = value;
                NotifyPropertyChanged("ToolSize");
            }
        }

        private LengthMeasure ToolSizeField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementExtension xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementExtension", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementExtension xsd type.")]
    public partial class CementExtension : AbstractEventExtension, INotifyPropertyChanged
    {

        /// <summary>
        /// CementJobRefID property
        /// </summary>
		[StringLength(64)]
        [Description("unique id of cementJob")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CementJobRefID")]
        public string CementJobRefID {
            get {
                return CementJobRefIDField;
            } 
            set {
                CementJobRefIDField = value;
                NotifyPropertyChanged("CementJobRefID");
            }
        }

        private string CementJobRefIDField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EventType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EventType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the EventType xsd type.")]
    public partial class EventType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EventType class.
        /// </summary>
        public EventType() {}

        /// <summary>
        /// Initializes a new instance of the EventType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public EventType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The type of the event (job, daily report, etc.)
        /// </summary>
		[Required]
        [Description("The type of the event (job, daily report, etc.)")]
        [EnergisticsDataTypeAttribute(DataType = "EventClassType")]
        [XmlAttribute("Class")]
		
        public EventClassType Class {
            get {
                return ClassField;
            } 
            set {
                ClassField = value;
                NotifyPropertyChanged("Class");
            }
        }

        private EventClassType ClassField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PumpOp xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PumpOp", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PumpOp xsd type.")]
    public partial class PumpOp : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time the information is related to.
        /// </summary>
		[Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// A pointer to the corresponding pump on the rig.
        /// </summary>
		[Required]
        [Description("A pointer to the corresponding pump on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Pump")]
        public int? Pump {
            get {
                return PumpField;
            } 
            set {
                PumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

        private int? PumpField; 

        /// <summary>
        /// Type of pump operation.
        /// </summary>
		[Description("Type of pump operation.")]
        [EnergisticsDataTypeAttribute(DataType = "PumpOpType")]
		[XmlElement("TypeOperation")]
        public PumpOpType? TypeOperation {
            get {
                return TypeOperationField;
            } 
            set {
                TypeOperationField = value;
                 this.TypeOperationSpecified = true;
                NotifyPropertyChanged("TypeOperation");
            }
        }

        private PumpOpType? TypeOperationField; 

        /// <summary>
        /// TypeOperationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeOperationSpecified {
            get {
                return TypeOperationSpecifiedField;
            } 
            set {
                TypeOperationSpecifiedField = value;
                NotifyPropertyChanged("TypeOperationSpecified");
            }
        }

        private bool TypeOperationSpecifiedField; 

        /// <summary>
        /// Liner inside diameter. 
        /// </summary>
		[Description("Liner inside diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdLiner")]
        public LengthMeasure LinerSize {
            get {
                return IdLinerField;
            } 
            set {
                IdLinerField = value;
                NotifyPropertyChanged("LinerSize");
            }
        }

        private LengthMeasure IdLinerField; 

        /// <summary>
        /// Stroke length.
        /// </summary>
		[Description("Stroke length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenStroke")]
        public LengthMeasure LenStroke {
            get {
                return LenStrokeField;
            } 
            set {
                LenStrokeField = value;
                NotifyPropertyChanged("LenStroke");
            }
        }

        private LengthMeasure LenStrokeField; 

        /// <summary>
        /// Pump rate (strokes per minute).
        /// </summary>
		[Required]
        [Description("Pump rate (strokes per minute).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("RateStroke")]
        public AngularVelocityMeasure RateStroke {
            get {
                return RateStrokeField;
            } 
            set {
                RateStrokeField = value;
                NotifyPropertyChanged("RateStroke");
            }
        }

        private AngularVelocityMeasure RateStrokeField; 

        /// <summary>
        /// Pump pressure recorded.
        /// </summary>
		[Required]
        [Description("Pump pressure recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Pressure")]
        public PressureMeasure Pressure {
            get {
                return PressureField;
            } 
            set {
                PressureField = value;
                NotifyPropertyChanged("Pressure");
            }
        }

        private PressureMeasure PressureField; 

        /// <summary>
        /// Pump efficiency.
        /// </summary>
		[Description("Pump efficiency.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerPerPowerMeasure")]
		[XmlElement("PcEfficiency")]
        public PowerPerPowerMeasure PercentEfficiency {
            get {
                return PcEfficiencyField;
            } 
            set {
                PcEfficiencyField = value;
                NotifyPropertyChanged("PercentEfficiency");
            }
        }

        private PowerPerPowerMeasure PcEfficiencyField; 

        /// <summary>
        /// Pump output (included for efficiency).
        /// </summary>
		[Description("Pump output (included for efficiency).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("PumpOutput")]
        public VolumePerTimeMeasure PumpOutput {
            get {
                return PumpOutputField;
            } 
            set {
                PumpOutputField = value;
                NotifyPropertyChanged("PumpOutput");
            }
        }

        private VolumePerTimeMeasure PumpOutputField; 

        /// <summary>
        /// Along-hole measured depth of the measurement from the drill datum.
        /// </summary>
		[Description("Along-hole measured depth of the measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return MdBitField;
            } 
            set {
                MdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord MdBitField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of PumpOp.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PumpOp.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PitVolume xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PitVolume", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PitVolume xsd type.")]
    public partial class PitVolume : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// This is a pointer to the corresponding pit on the rig containing the volume being described. 
        /// </summary>
		[Required]
        [Description("This is a pointer to the corresponding pit on the rig containing the volume being described.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Pit")]
        public int? Pit {
            get {
                return PitField;
            } 
            set {
                PitField = value;
                NotifyPropertyChanged("Pit");
            }
        }

        private int? PitField; 

        /// <summary>
        /// Date and time the information is related to.
        /// </summary>
		[Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Volume of fluid in the pit.
        /// </summary>
		[Required]
        [Description("Volume of fluid in the pit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolPit")]
        public VolumeMeasure VolPit {
            get {
                return VolPitField;
            } 
            set {
                VolPitField = value;
                NotifyPropertyChanged("VolPit");
            }
        }

        private VolumeMeasure VolPitField; 

        /// <summary>
        /// Density of fluid in the pit.
        /// </summary>
		[Description("Density of fluid in the pit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensFluid")]
        public MassPerVolumeMeasure DensFluid {
            get {
                return DensFluidField;
            } 
            set {
                DensFluidField = value;
                NotifyPropertyChanged("DensFluid");
            }
        }

        private MassPerVolumeMeasure DensFluidField; 

        /// <summary>
        /// Description of the fluid in the pit.
        /// </summary>
		[StringLength(64)]
        [Description("Description of the fluid in the pit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DescFluid")]
        public string DescFluid {
            get {
                return DescFluidField;
            } 
            set {
                DescFluidField = value;
                NotifyPropertyChanged("DescFluid");
            }
        }

        private string DescFluidField; 

        /// <summary>
        /// Funnel viscosity (in seconds).
        /// </summary>
		[Description("Funnel viscosity (in seconds).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("VisFunnel")]
        public TimeMeasure VisFunnel {
            get {
                return VisFunnelField;
            } 
            set {
                VisFunnelField = value;
                NotifyPropertyChanged("VisFunnel");
            }
        }

        private TimeMeasure VisFunnelField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of PitVolume.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PitVolume.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Scr xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Scr", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Scr xsd type.")]
    public partial class Scr : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time the information is related to.
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// A pointer to the corresponding pump on the rig.
        /// </summary>
		[Required]
        [Description("A pointer to the corresponding pump on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Pump")]
        public int? Pump {
            get {
                return PumpField;
            } 
            set {
                PumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

        private int? PumpField; 

        /// <summary>
        /// Type of slow circulation rate.
        /// </summary>
		[Required]
        [Description("Type of slow circulation rate.")]
        [EnergisticsDataTypeAttribute(DataType = "ScrType")]
		[XmlElement("TypeScr")]
        public ScrType? TypeScr {
            get {
                return TypeScrField;
            } 
            set {
                TypeScrField = value;
                 this.TypeScrSpecified = true;
                NotifyPropertyChanged("TypeScr");
            }
        }

        
        private bool TypeScrSpecifiedField = false;
        
        /// <summary>
        /// TypeScrSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeScrSpecified {
            get {
                return TypeScrSpecifiedField;
            } 
            set {
                TypeScrSpecifiedField = value;
                NotifyPropertyChanged("TypeScrSpecified");
            }
        }
        
        private ScrType? TypeScrField; 

        /// <summary>
        /// Pump stroke rate.
        /// </summary>
		[Required]
        [Description("Pump stroke rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("RateStroke")]
        public AngularVelocityMeasure RateStroke {
            get {
                return RateStrokeField;
            } 
            set {
                RateStrokeField = value;
                NotifyPropertyChanged("RateStroke");
            }
        }

        private AngularVelocityMeasure RateStrokeField; 

        /// <summary>
        /// Recorded pump pressure for the stroke rate.
        /// </summary>
		[Required]
        [Description("Recorded pump pressure for the stroke rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresRecorded")]
        public PressureMeasure PresRecorded {
            get {
                return PresRecordedField;
            } 
            set {
                PresRecordedField = value;
                NotifyPropertyChanged("PresRecorded");
            }
        }

        private PressureMeasure PresRecordedField; 

        /// <summary>
        /// Along hole measured depth of measurement from the drill datum.
        /// </summary>
		[Description("Along hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return MdBitField;
            } 
            set {
                MdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord MdBitField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of Scr
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Scr")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DayCost xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DayCost", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DayCost xsd type.")]
    public partial class DayCost : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// AFE number that this cost item applies to.
        /// </summary>
		[StringLength(64)]
        [Description("AFE number that this cost item applies to.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumAFE")]
        public string NumAFE {
            get {
                return NumAFEField;
            } 
            set {
                NumAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private string NumAFEField; 

        /// <summary>
        /// Cost group code.
        /// </summary>
		[StringLength(64)]
        [Description("Cost group code.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CostGroup")]
        public string CostGroup {
            get {
                return CostGroupField;
            } 
            set {
                CostGroupField = value;
                NotifyPropertyChanged("CostGroup");
            }
        }

        private string CostGroupField; 

        /// <summary>
        /// Cost class code.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Cost class code.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CostClass")]
        public string CostClass {
            get {
                return CostClassField;
            } 
            set {
                CostClassField = value;
                NotifyPropertyChanged("CostClass");
            }
        }

        private string CostClassField; 

        /// <summary>
        /// Cost code.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Cost code.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CostCode")]
        public string CostCode {
            get {
                return CostCodeField;
            } 
            set {
                CostCodeField = value;
                NotifyPropertyChanged("CostCode");
            }
        }

        private string CostCodeField; 

        /// <summary>
        /// Cost subcode.
        /// </summary>
		[StringLength(64)]
        [Description("Cost subcode.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CostSubCode")]
        public string CostSubCode {
            get {
                return CostSubCodeField;
            } 
            set {
                CostSubCodeField = value;
                NotifyPropertyChanged("CostSubCode");
            }
        }

        private string CostSubCodeField; 

        /// <summary>
        /// Description of the cost item.
        /// </summary>
		[StringLength(64)]
        [Description("Description of the cost item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CostItemDescription")]
        public string CostItemDescription {
            get {
                return CostItemDescriptionField;
            } 
            set {
                CostItemDescriptionField = value;
                NotifyPropertyChanged("CostItemDescription");
            }
        }

        private string CostItemDescriptionField; 

        /// <summary>
        /// The kind of cost item specified (e.g., rig dayrate, joints casing).
        /// </summary>
		[StringLength(32)]
        [Description("The kind of cost item specified (e.g., rig dayrate, joints casing).")]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
		[XmlElement("ItemKind")]
        public string ItemKind {
            get {
                return ItemKindField;
            } 
            set {
                ItemKindField = value;
                NotifyPropertyChanged("ItemKind");
            }
        }

        private string ItemKindField; 

        /// <summary>
        /// Size of one cost item.
        /// </summary>
		[Description("Size of one cost item.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("ItemSize")]
        public double? ItemSize {
            get {
                return ItemSizeField;
            } 
            set {
                ItemSizeField = value;
                 this.ItemSizeSpecified = true;
                NotifyPropertyChanged("ItemSize");
            }
        }

        private double? ItemSizeField; 

        /// <summary>
        /// ItemSizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemSizeSpecified {
            get {
                return ItemSizeSpecifiedField;
            } 
            set {
                ItemSizeSpecifiedField = value;
                NotifyPropertyChanged("ItemSizeSpecified");
            }
        }

        private bool ItemSizeSpecifiedField; 

        /// <summary>
        /// Number of cost items used that day, e.g., 1 rig dayrate, 30 joints of casing.
        /// </summary>
		[Description("Number of cost items used that day, e.g., 1 rig dayrate, 30 joints of casing.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("QtyItem")]
        public int? QtyItem {
            get {
                return QtyItemField;
            } 
            set {
                QtyItemField = value;
                 this.QtyItemSpecified = true;
                NotifyPropertyChanged("QtyItem");
            }
        }

        private int? QtyItemField; 

        /// <summary>
        /// QtyItemSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyItemSpecified {
            get {
                return QtyItemSpecifiedField;
            } 
            set {
                QtyItemSpecifiedField = value;
                NotifyPropertyChanged("QtyItemSpecified");
            }
        }

        private bool QtyItemSpecifiedField; 

        /// <summary>
        /// Invoice number for cost item; the bill is sent to the operator.
        /// </summary>
		[StringLength(64)]
        [Description("Invoice number for cost item; the  bill is sent to the operator.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumInvoice")]
        public string NumInvoice {
            get {
                return NumInvoiceField;
            } 
            set {
                NumInvoiceField = value;
                NotifyPropertyChanged("NumInvoice");
            }
        }

        private string NumInvoiceField; 

        /// <summary>
        /// Purchase order number provided by the operator.
        /// </summary>
		[StringLength(64)]
        [Description("Purchase order number provided by the operator.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumPO")]
        public string NumPO {
            get {
                return NumPOField;
            } 
            set {
                NumPOField = value;
                NotifyPropertyChanged("NumPO");
            }
        }

        private string NumPOField; 

        /// <summary>
        /// The field ticket number issued by the service company on location.
        /// </summary>
		[StringLength(64)]
        [Description("The field ticket number issued by the service company on location.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumTicket")]
        public string NumTicket {
            get {
                return NumTicketField;
            } 
            set {
                NumTicketField = value;
                NotifyPropertyChanged("NumTicket");
            }
        }

        private string NumTicketField; 

        /// <summary>
        /// Is this item carried from day to day? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is this item carried from day to day? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsCarryOver")]
        public bool? IsCarryOver {
            get {
                return IsCarryOverField;
            } 
            set {
                IsCarryOverField = value;
                 this.IsCarryOverSpecified = true;
                NotifyPropertyChanged("IsCarryOver");
            }
        }

        private bool? IsCarryOverField; 

        /// <summary>
        /// IsCarryOverSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsCarryOverSpecified {
            get {
                return IsCarryOverSpecifiedField;
            } 
            set {
                IsCarryOverSpecifiedField = value;
                NotifyPropertyChanged("IsCarryOverSpecified");
            }
        }

        private bool IsCarryOverSpecifiedField; 

        /// <summary>
        /// Is this item a rental? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is this item a rental? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsRental")]
        public bool? IsRental {
            get {
                return IsRentalField;
            } 
            set {
                IsRentalField = value;
                 this.IsRentalSpecified = true;
                NotifyPropertyChanged("IsRental");
            }
        }

        private bool? IsRentalField; 

        /// <summary>
        /// IsRentalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsRentalSpecified {
            get {
                return IsRentalSpecifiedField;
            } 
            set {
                IsRentalSpecifiedField = value;
                NotifyPropertyChanged("IsRentalSpecified");
            }
        }

        private bool IsRentalSpecifiedField; 

        /// <summary>
        /// An identification tag for the item. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents.
        /// </summary>
		[Description("An identification tag for the item. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameTag")]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(NameTagField!=null)
                 return NameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// Serial number.
        /// </summary>
		[StringLength(64)]
        [Description("Serial number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumSerial")]
        public string NumSerial {
            get {
                return NumSerialField;
            } 
            set {
                NumSerialField = value;
                NotifyPropertyChanged("NumSerial");
            }
        }

        private string NumSerialField; 

        /// <summary>
        /// Name of the vendor.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the vendor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameVendor")]
        public string NameVendor {
            get {
                return NameVendorField;
            } 
            set {
                NameVendorField = value;
                NotifyPropertyChanged("NameVendor");
            }
        }

        private string NameVendorField; 

        /// <summary>
        /// Vendor number.
        /// </summary>
		[StringLength(64)]
        [Description("Vendor number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumVendor")]
        public string NumVendor {
            get {
                return NumVendorField;
            } 
            set {
                NumVendorField = value;
                NotifyPropertyChanged("NumVendor");
            }
        }

        private string NumVendorField; 

        /// <summary>
        /// Name of pool/reservoir that this cost item can be accounted to.
        /// </summary>
		[StringLength(64)]
        [Description("Name of pool/reservoir that this cost item can be accounted to.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Pool")]
        public string Pool {
            get {
                return PoolField;
            } 
            set {
                PoolField = value;
                NotifyPropertyChanged("Pool");
            }
        }

        private string PoolField; 

        /// <summary>
        /// Is this an estimated cost? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is this an estimated cost? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Estimated")]
        public bool? Estimated {
            get {
                return EstimatedField;
            } 
            set {
                EstimatedField = value;
                 this.EstimatedSpecified = true;
                NotifyPropertyChanged("Estimated");
            }
        }

        private bool? EstimatedField; 

        /// <summary>
        /// EstimatedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EstimatedSpecified {
            get {
                return EstimatedSpecifiedField;
            } 
            set {
                EstimatedSpecifiedField = value;
                NotifyPropertyChanged("EstimatedSpecified");
            }
        }

        private bool EstimatedSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Cost for the item for this record.
        /// </summary>
		[Description("Cost for the item for this record.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Cost")]
		[XmlElement("CostAmount")]
        public Cost CostAmount {
            get {
                return CostAmountField;
            } 
            set {
                CostAmountField = value;
                NotifyPropertyChanged("CostAmount");
            }
        }

        private Cost CostAmountField; 

        /// <summary>
        /// Cost of each cost item, assume same currency.
        /// </summary>
		[Description("Cost of each cost item, assume same currency.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Cost")]
		[XmlElement("CostPerItem")]
        public Cost CostPerItem {
            get {
                return CostPerItemField;
            } 
            set {
                CostPerItemField = value;
                NotifyPropertyChanged("CostPerItem");
            }
        }

        private Cost CostPerItemField; 

		/// <summary>
        /// Unique identifier for this instance of DayCost
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DayCost")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Cost xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Cost", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Cost xsd type.")]
    public partial class Cost : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// Currency used for this Cost.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Currency used for this Cost.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("currency")]
		
        public string Currency {
            get {
                return currencyField;
            } 
            set {
                currencyField = value;
                NotifyPropertyChanged("Currency");
            }
        }

        private string currencyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Personnel xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Personnel", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Personnel xsd type.")]
    public partial class Personnel : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name of the company. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of the company.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Company")]
        public string Company {
            get {
                return CompanyField;
            } 
            set {
                CompanyField = value;
                NotifyPropertyChanged("Company");
            }
        }

        private string CompanyField; 

        /// <summary>
        /// Service provided by the company. 
        /// </summary>
		[StringLength(64)]
        [Description("Service provided by the company.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeService")]
        public string TypeService {
            get {
                return TypeServiceField;
            } 
            set {
                TypeServiceField = value;
                NotifyPropertyChanged("TypeService");
            }
        }

        private string TypeServiceField; 

        /// <summary>
        /// Number of people on board for that company.
        /// </summary>
		[Description("Number of people on board for that company.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumPeople")]
        public int? NumPeople {
            get {
                return NumPeopleField;
            } 
            set {
                NumPeopleField = value;
                 this.NumPeopleSpecified = true;
                NotifyPropertyChanged("NumPeople");
            }
        }

        private int? NumPeopleField; 

        /// <summary>
        /// NumPeopleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumPeopleSpecified {
            get {
                return NumPeopleSpecifiedField;
            } 
            set {
                NumPeopleSpecifiedField = value;
                NotifyPropertyChanged("NumPeopleSpecified");
            }
        }

        private bool NumPeopleSpecifiedField; 

        /// <summary>
        /// Total time worked by the company (commonly in hours).
        /// </summary>
		[Description("Total time worked by the company (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("TotalTime")]
        public TimeMeasure TotalTime {
            get {
                return TotalTimeField;
            } 
            set {
                TotalTimeField = value;
                NotifyPropertyChanged("TotalTime");
            }
        }

        private TimeMeasure TotalTimeField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of Personnel.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Personnel.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudLosses xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudLosses", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudLosses xsd type.")]
    public partial class MudLosses : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Volume of mud lost at shakers (at surface).
        /// </summary>
		[Description("Volume of mud lost at shakers (at surface).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostShakerSurf")]
        public VolumeMeasure VolLostShakerSurf {
            get {
                return VolLostShakerSurfField;
            } 
            set {
                VolLostShakerSurfField = value;
                NotifyPropertyChanged("VolLostShakerSurf");
            }
        }

        private VolumeMeasure VolLostShakerSurfField; 

        /// <summary>
        /// Volume of mud lost in mud cleaning equipment (at surface).
        /// </summary>
		[Description("Volume of mud lost in mud cleaning equipment (at surface).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostMudCleanerSurf")]
        public VolumeMeasure VolLostMudCleanerSurf {
            get {
                return VolLostMudCleanerSurfField;
            } 
            set {
                VolLostMudCleanerSurfField = value;
                NotifyPropertyChanged("VolLostMudCleanerSurf");
            }
        }

        private VolumeMeasure VolLostMudCleanerSurfField; 

        /// <summary>
        /// Volume of mud lost in pit room (at surface).
        /// </summary>
		[Description("Volume of mud lost in pit room (at surface).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostPitsSurf")]
        public VolumeMeasure VolLostPitsSurf {
            get {
                return VolLostPitsSurfField;
            } 
            set {
                VolLostPitsSurfField = value;
                NotifyPropertyChanged("VolLostPitsSurf");
            }
        }

        private VolumeMeasure VolLostPitsSurfField; 

        /// <summary>
        /// Volume of mud lost while tripping (at surface).
        /// </summary>
		[Description("Volume of mud lost while tripping (at surface).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostTrippingSurf")]
        public VolumeMeasure VolLostTrippingSurf {
            get {
                return VolLostTrippingSurfField;
            } 
            set {
                VolLostTrippingSurfField = value;
                NotifyPropertyChanged("VolLostTrippingSurf");
            }
        }

        private VolumeMeasure VolLostTrippingSurfField; 

        /// <summary>
        /// Surface volume lost other location.
        /// </summary>
		[Description("Surface volume lost other location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostOtherSurf")]
        public VolumeMeasure VolLostOtherSurf {
            get {
                return VolLostOtherSurfField;
            } 
            set {
                VolLostOtherSurfField = value;
                NotifyPropertyChanged("VolLostOtherSurf");
            }
        }

        private VolumeMeasure VolLostOtherSurfField; 

        /// <summary>
        /// Total volume of mud lost at surface.
        /// </summary>
		[Description("Total volume of mud lost at surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolTotMudLostSurf")]
        public VolumeMeasure VolTotMudLostSurf {
            get {
                return VolTotMudLostSurfField;
            } 
            set {
                VolTotMudLostSurfField = value;
                NotifyPropertyChanged("VolTotMudLostSurf");
            }
        }

        private VolumeMeasure VolTotMudLostSurfField; 

        /// <summary>
        /// Mud volume lost downhole while circulating.
        /// </summary>
		[Description("Mud volume lost downhole while circulating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostCircHole")]
        public VolumeMeasure VolLostCircHole {
            get {
                return VolLostCircHoleField;
            } 
            set {
                VolLostCircHoleField = value;
                NotifyPropertyChanged("VolLostCircHole");
            }
        }

        private VolumeMeasure VolLostCircHoleField; 

        /// <summary>
        /// Mud volume lost downhole while running casing.
        /// </summary>
		[Description("Mud volume lost downhole while running casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostCsgHole")]
        public VolumeMeasure VolLostCsgHole {
            get {
                return VolLostCsgHoleField;
            } 
            set {
                VolLostCsgHoleField = value;
                NotifyPropertyChanged("VolLostCsgHole");
            }
        }

        private VolumeMeasure VolLostCsgHoleField; 

        /// <summary>
        /// Mud volume lost downhole while cementing.
        /// </summary>
		[Description("Mud volume lost downhole while cementing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostCmtHole")]
        public VolumeMeasure VolLostCmtHole {
            get {
                return VolLostCmtHoleField;
            } 
            set {
                VolLostCmtHoleField = value;
                NotifyPropertyChanged("VolLostCmtHole");
            }
        }

        private VolumeMeasure VolLostCmtHoleField; 

        /// <summary>
        /// Mud volume lost downhole behind casing.
        /// </summary>
		[Description("Mud volume lost downhole behind casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostBhdCsgHole")]
        public VolumeMeasure VolLostBhdCsgHole {
            get {
                return VolLostBhdCsgHoleField;
            } 
            set {
                VolLostBhdCsgHoleField = value;
                NotifyPropertyChanged("VolLostBhdCsgHole");
            }
        }

        private VolumeMeasure VolLostBhdCsgHoleField; 

        /// <summary>
        /// Mud volume lost downhole during abandonment.
        /// </summary>
		[Description("Mud volume lost downhole during abandonment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostAbandonHole")]
        public VolumeMeasure VolLostAbandonHole {
            get {
                return VolLostAbandonHoleField;
            } 
            set {
                VolLostAbandonHoleField = value;
                NotifyPropertyChanged("VolLostAbandonHole");
            }
        }

        private VolumeMeasure VolLostAbandonHoleField; 

        /// <summary>
        /// Mud volume lost downhole from other location.
        /// </summary>
		[Description("Mud volume lost downhole from other location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolLostOtherHole")]
        public VolumeMeasure VolLostOtherHole {
            get {
                return VolLostOtherHoleField;
            } 
            set {
                VolLostOtherHoleField = value;
                NotifyPropertyChanged("VolLostOtherHole");
            }
        }

        private VolumeMeasure VolLostOtherHoleField; 

        /// <summary>
        /// Total volume of mud lost downhole.
        /// </summary>
		[Description("Total volume of mud lost downhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolTotMudLostHole")]
        public VolumeMeasure VolTotMudLostHole {
            get {
                return VolTotMudLostHoleField;
            } 
            set {
                VolTotMudLostHoleField = value;
                NotifyPropertyChanged("VolTotMudLostHole");
            }
        }

        private VolumeMeasure VolTotMudLostHoleField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MudVolume xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MudVolume", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MudVolume xsd type.")]
    public partial class MudVolume : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VolTotMudStart property
        /// </summary>
		[Description("Total volume of mud at start of report interval (including pits and hole).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolTotMudStart")]
        public VolumeMeasure VolTotMudStart {
            get {
                return VolTotMudStartField;
            } 
            set {
                VolTotMudStartField = value;
                NotifyPropertyChanged("VolTotMudStart");
            }
        }

        private VolumeMeasure VolTotMudStartField; 

        /// <summary>
        /// VolMudDumped property
        /// </summary>
		[Description("Volume of mud dumped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolMudDumped")]
        public VolumeMeasure VolMudDumped {
            get {
                return VolMudDumpedField;
            } 
            set {
                VolMudDumpedField = value;
                NotifyPropertyChanged("VolMudDumped");
            }
        }

        private VolumeMeasure VolMudDumpedField; 

        /// <summary>
        /// VolMudReceived property
        /// </summary>
		[Description("Volume of mud received from mud warehouse.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolMudReceived")]
        public VolumeMeasure VolMudReceived {
            get {
                return VolMudReceivedField;
            } 
            set {
                VolMudReceivedField = value;
                NotifyPropertyChanged("VolMudReceived");
            }
        }

        private VolumeMeasure VolMudReceivedField; 

        /// <summary>
        /// VolMudReturned property
        /// </summary>
		[Description("Volume of mud returned to mud warehouse.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolMudReturned")]
        public VolumeMeasure VolMudReturned {
            get {
                return VolMudReturnedField;
            } 
            set {
                VolMudReturnedField = value;
                NotifyPropertyChanged("VolMudReturned");
            }
        }

        private VolumeMeasure VolMudReturnedField; 

        /// <summary>
        /// VolMudBuilt property
        /// </summary>
		[Description("Volume of mud built.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolMudBuilt")]
        public VolumeMeasure VolMudBuilt {
            get {
                return VolMudBuiltField;
            } 
            set {
                VolMudBuiltField = value;
                NotifyPropertyChanged("VolMudBuilt");
            }
        }

        private VolumeMeasure VolMudBuiltField; 

        /// <summary>
        /// VolMudString property
        /// </summary>
		[Description("Volume of mud contained within active string.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolMudString")]
        public VolumeMeasure VolMudString {
            get {
                return VolMudStringField;
            } 
            set {
                VolMudStringField = value;
                NotifyPropertyChanged("VolMudString");
            }
        }

        private VolumeMeasure VolMudStringField; 

        /// <summary>
        /// VolMudCasing property
        /// </summary>
		[Description("Volume of mud contained in casing annulus.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolMudCasing")]
        public VolumeMeasure VolMudCasing {
            get {
                return VolMudCasingField;
            } 
            set {
                VolMudCasingField = value;
                NotifyPropertyChanged("VolMudCasing");
            }
        }

        private VolumeMeasure VolMudCasingField; 

        /// <summary>
        /// VolMudHole property
        /// </summary>
		[Description("Volume of mud contained in the openhole annulus.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolMudHole")]
        public VolumeMeasure VolMudHole {
            get {
                return VolMudHoleField;
            } 
            set {
                VolMudHoleField = value;
                NotifyPropertyChanged("VolMudHole");
            }
        }

        private VolumeMeasure VolMudHoleField; 

        /// <summary>
        /// VolMudRiser property
        /// </summary>
		[Description("Volume of mud contained in riser section annulus.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolMudRiser")]
        public VolumeMeasure VolMudRiser {
            get {
                return VolMudRiserField;
            } 
            set {
                VolMudRiserField = value;
                NotifyPropertyChanged("VolMudRiser");
            }
        }

        private VolumeMeasure VolMudRiserField; 

        /// <summary>
        /// VolTotMudEnd property
        /// </summary>
		[Description("Total volume of mud at the end of the report interval (including pits and hole).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolTotMudEnd")]
        public VolumeMeasure VolTotMudEnd {
            get {
                return VolTotMudEndField;
            } 
            set {
                VolTotMudEndField = value;
                NotifyPropertyChanged("VolTotMudEnd");
            }
        }

        private VolumeMeasure VolTotMudEndField; 

        /// <summary>
        /// MudLosses property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MudLosses")]
		[XmlElement("MudLosses")]
        public MudLosses MudLosses {
            get {
                return MudLossesField;
            } 
            set {
                MudLossesField = value;
                NotifyPropertyChanged("MudLosses");
            }
        }

        private MudLosses MudLossesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractItemWtOrVolPerUnit xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ItemWtPerUnit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ItemVolPerUnit))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractItemWtOrVolPerUnit", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractItemWtOrVolPerUnit xsd type.")]
    public abstract partial class AbstractItemWtOrVolPerUnit : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ItemWtPerUnit xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ItemWtPerUnit", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ItemWtPerUnit xsd type.")]
    public partial class ItemWtPerUnit : AbstractItemWtOrVolPerUnit, INotifyPropertyChanged
    {

        /// <summary>
        /// ItemWtPerUnit1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("ItemWtPerUnit")]
        public MassMeasure ItemWeightPerUnit1 {
            get {
                return ItemWtPerUnit1Field;
            } 
            set {
                ItemWtPerUnit1Field = value;
                NotifyPropertyChanged("ItemWeightPerUnit1");
            }
        }

        private MassMeasure ItemWtPerUnit1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ItemVolPerUnit xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ItemVolPerUnit", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ItemVolPerUnit xsd type.")]
    public partial class ItemVolPerUnit : AbstractItemWtOrVolPerUnit, INotifyPropertyChanged
    {

        /// <summary>
        /// ItemVolPerUnit1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("ItemVolPerUnit")]
        public VolumeMeasure ItemVolPerUnit1 {
            get {
                return ItemVolPerUnit1Field;
            } 
            set {
                ItemVolPerUnit1Field = value;
                NotifyPropertyChanged("ItemVolPerUnit1");
            }
        }

        private VolumeMeasure ItemVolPerUnit1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Inventory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Inventory", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Inventory xsd type.")]
    public partial class Inventory : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name or type of inventory item.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name or type of inventory item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Item weight or volume per unit.
        /// </summary>
		[Required]
        [Description("Item weight or volume per unit.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractItemWtOrVolPerUnit")]
		[XmlElement("ItemWtOrVolPerUnit")]
        public AbstractItemWtOrVolPerUnit ItemWeightOrVolPerUnit {
            get {
                return ItemWtOrVolPerUnitField;
            } 
            set {
                ItemWtOrVolPerUnitField = value;
                NotifyPropertyChanged("ItemWeightOrVolPerUnit");
            }
        }

        private AbstractItemWtOrVolPerUnit ItemWtOrVolPerUnitField; 

        /// <summary>
        /// Price per item unit, assume same currency for all items.
        /// </summary>
		[Description("Price per item unit, assume same currency for all items.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Cost")]
		[XmlElement("PricePerUnit")]
        public Cost PricePerUnit {
            get {
                return PricePerUnitField;
            } 
            set {
                PricePerUnitField = value;
                NotifyPropertyChanged("PricePerUnit");
            }
        }

        private Cost PricePerUnitField; 

        /// <summary>
        /// Start quantity for report interval.
        /// </summary>
		[Description("Start quantity for report interval.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("QtyStart")]
        public int? QtyStart {
            get {
                return QtyStartField;
            } 
            set {
                QtyStartField = value;
                 this.QtyStartSpecified = true;
                NotifyPropertyChanged("QtyStart");
            }
        }

        private int? QtyStartField; 

        /// <summary>
        /// QtyStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyStartSpecified {
            get {
                return QtyStartSpecifiedField;
            } 
            set {
                QtyStartSpecifiedField = value;
                NotifyPropertyChanged("QtyStartSpecified");
            }
        }

        private bool QtyStartSpecifiedField; 

        /// <summary>
        /// Daily quantity adjustment/correction.
        /// </summary>
		[Description("Daily quantity adjustment/correction.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("QtyAdjustment")]
        public int? QtyAdjustment {
            get {
                return QtyAdjustmentField;
            } 
            set {
                QtyAdjustmentField = value;
                 this.QtyAdjustmentSpecified = true;
                NotifyPropertyChanged("QtyAdjustment");
            }
        }

        private int? QtyAdjustmentField; 

        /// <summary>
        /// QtyAdjustmentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyAdjustmentSpecified {
            get {
                return QtyAdjustmentSpecifiedField;
            } 
            set {
                QtyAdjustmentSpecifiedField = value;
                NotifyPropertyChanged("QtyAdjustmentSpecified");
            }
        }

        private bool QtyAdjustmentSpecifiedField; 

        /// <summary>
        /// Quantity received at the site.
        /// </summary>
		[Description("Quantity received at the site.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("QtyReceived")]
        public int? QtyReceived {
            get {
                return QtyReceivedField;
            } 
            set {
                QtyReceivedField = value;
                 this.QtyReceivedSpecified = true;
                NotifyPropertyChanged("QtyReceived");
            }
        }

        private int? QtyReceivedField; 

        /// <summary>
        /// QtyReceivedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyReceivedSpecified {
            get {
                return QtyReceivedSpecifiedField;
            } 
            set {
                QtyReceivedSpecifiedField = value;
                NotifyPropertyChanged("QtyReceivedSpecified");
            }
        }

        private bool QtyReceivedSpecifiedField; 

        /// <summary>
        /// Quantity returned to base from site.
        /// </summary>
		[Description("Quantity returned to base from site.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("QtyReturned")]
        public int? QtyReturned {
            get {
                return QtyReturnedField;
            } 
            set {
                QtyReturnedField = value;
                 this.QtyReturnedSpecified = true;
                NotifyPropertyChanged("QtyReturned");
            }
        }

        private int? QtyReturnedField; 

        /// <summary>
        /// QtyReturnedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyReturnedSpecified {
            get {
                return QtyReturnedSpecifiedField;
            } 
            set {
                QtyReturnedSpecifiedField = value;
                NotifyPropertyChanged("QtyReturnedSpecified");
            }
        }

        private bool QtyReturnedSpecifiedField; 

        /// <summary>
        /// Quantity used for the report interval.
        /// </summary>
		[Description("Quantity used for the report interval.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("QtyUsed")]
        public int? QtyUsed {
            get {
                return QtyUsedField;
            } 
            set {
                QtyUsedField = value;
                 this.QtyUsedSpecified = true;
                NotifyPropertyChanged("QtyUsed");
            }
        }

        private int? QtyUsedField; 

        /// <summary>
        /// QtyUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyUsedSpecified {
            get {
                return QtyUsedSpecifiedField;
            } 
            set {
                QtyUsedSpecifiedField = value;
                NotifyPropertyChanged("QtyUsedSpecified");
            }
        }

        private bool QtyUsedSpecifiedField; 

        /// <summary>
        /// Cost for the product for the report interval.
        /// </summary>
		[Description("Cost for the product for the report interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Cost")]
		[XmlElement("CostItem")]
        public Cost CostItem {
            get {
                return CostItemField;
            } 
            set {
                CostItemField = value;
                NotifyPropertyChanged("CostItem");
            }
        }

        private Cost CostItemField; 

        /// <summary>
        /// Amount of the item remaining on location after all adjustments for the report interval.
        /// </summary>
		[Description("Amount of the item remaining on location after all adjustments for the report interval.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("QtyOnLocation")]
        public int? QtyOnLocation {
            get {
                return QtyOnLocationField;
            } 
            set {
                QtyOnLocationField = value;
                 this.QtyOnLocationSpecified = true;
                NotifyPropertyChanged("QtyOnLocation");
            }
        }

        private int? QtyOnLocationField; 

        /// <summary>
        /// QtyOnLocationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QtyOnLocationSpecified {
            get {
                return QtyOnLocationSpecifiedField;
            } 
            set {
                QtyOnLocationSpecifiedField = value;
                NotifyPropertyChanged("QtyOnLocationSpecified");
            }
        }

        private bool QtyOnLocationSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of Inventory.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Inventory.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Weather xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Weather", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Weather xsd type.")]
    public partial class Weather : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time the information is related to.
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Name of company that supplied the weather data.
        /// </summary>
		[StringLength(64)]
        [Description("Name of company that supplied the weather data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Agency")]
        public string Agency {
            get {
                return AgencyField;
            } 
            set {
                AgencyField = value;
                NotifyPropertyChanged("Agency");
            }
        }

        private string AgencyField; 

        /// <summary>
        /// Atmospheric pressure.
        /// </summary>
		[Description("Atmospheric pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BarometricPressure")]
        public PressureMeasure BarometricPressure {
            get {
                return BarometricPressureField;
            } 
            set {
                BarometricPressureField = value;
                NotifyPropertyChanged("BarometricPressure");
            }
        }

        private PressureMeasure BarometricPressureField; 

        /// <summary>
        /// The Beaufort wind force scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions. Values range from 0 (calm) to 12 (hurricane force). 
        /// </summary>
		[Description("The Beaufort wind force scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions. Values range from 0 (calm) to 12 (hurricane force).")]
        [EnergisticsDataTypeAttribute(DataType = "BeaufortScaleIntegerCode")]
		[XmlElement("BeaufortScaleNumber")]
        public short? BeaufortScaleNumber {
            get {
                return BeaufortScaleNumberField;
            } 
            set {
                BeaufortScaleNumberField = value;
                 this.BeaufortScaleNumberSpecified = true;
                NotifyPropertyChanged("BeaufortScaleNumber");
            }
        }

        private short? BeaufortScaleNumberField; 

        /// <summary>
        /// BeaufortScaleNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BeaufortScaleNumberSpecified {
            get {
                return BeaufortScaleNumberSpecifiedField;
            } 
            set {
                BeaufortScaleNumberSpecifiedField = value;
                NotifyPropertyChanged("BeaufortScaleNumberSpecified");
            }
        }

        private bool BeaufortScaleNumberSpecifiedField; 

        /// <summary>
        /// Minimum temperature above ground. Temperature of the atmosphere.
        /// </summary>
		[Description("Minimum temperature above ground. Temperature of the atmosphere.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempSurfaceMn")]
        public ThermodynamicTemperatureMeasure TempSurfaceMin {
            get {
                return TempSurfaceMnField;
            } 
            set {
                TempSurfaceMnField = value;
                NotifyPropertyChanged("TempSurfaceMin");
            }
        }

        private ThermodynamicTemperatureMeasure TempSurfaceMnField; 

        /// <summary>
        /// Maximum temperature above ground.
        /// </summary>
		[Description("Maximum temperature above ground.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempSurfaceMx")]
        public ThermodynamicTemperatureMeasure TempSurfaceMax {
            get {
                return TempSurfaceMxField;
            } 
            set {
                TempSurfaceMxField = value;
                NotifyPropertyChanged("TempSurfaceMax");
            }
        }

        private ThermodynamicTemperatureMeasure TempSurfaceMxField; 

        /// <summary>
        /// A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to the US weather service table, an air temperature of 30 degF with a 10 mph corresponds to a windchill of 22 degF.
        /// </summary>
		[Description("A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to the US weather service table, an air temperature of 30 degF with a 10 mph corresponds to a windchill of 22 degF.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempWindChill")]
        public ThermodynamicTemperatureMeasure TempWindChill {
            get {
                return TempWindChillField;
            } 
            set {
                TempWindChillField = value;
                NotifyPropertyChanged("TempWindChill");
            }
        }

        private ThermodynamicTemperatureMeasure TempWindChillField; 

        /// <summary>
        /// Sea temperature.
        /// </summary>
		[Description("Sea temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("Tempsea")]
        public ThermodynamicTemperatureMeasure Tempsea {
            get {
                return TempseaField;
            } 
            set {
                TempseaField = value;
                NotifyPropertyChanged("Tempsea");
            }
        }

        private ThermodynamicTemperatureMeasure TempseaField; 

        /// <summary>
        /// Horizontal visibility.
        /// </summary>
		[Description("Horizontal visibility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Visibility")]
        public LengthMeasure Visibility {
            get {
                return VisibilityField;
            } 
            set {
                VisibilityField = value;
                NotifyPropertyChanged("Visibility");
            }
        }

        private LengthMeasure VisibilityField; 

        /// <summary>
        /// The direction from which the waves are coming, measured from true north.
        /// </summary>
		[Description("The direction from which the waves are coming, measured from true north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("AziWave")]
        public PlaneAngleMeasure AziWave {
            get {
                return AziWaveField;
            } 
            set {
                AziWaveField = value;
                NotifyPropertyChanged("AziWave");
            }
        }

        private PlaneAngleMeasure AziWaveField; 

        /// <summary>
        /// Average height of the waves.
        /// </summary>
		[Description("Average height of the waves.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HtWave")]
        public LengthMeasure HeightWave {
            get {
                return HtWaveField;
            } 
            set {
                HtWaveField = value;
                NotifyPropertyChanged("HeightWave");
            }
        }

        private LengthMeasure HtWaveField; 

        /// <summary>
        /// An average of the higher 1/3 of the wave heights passing during a sample period (typically 20 to 30 minutes).
        /// </summary>
		[Description("An average of the higher 1/3 of the wave heights passing during a  sample period (typically 20 to 30 minutes).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SignificantWave")]
        public LengthMeasure SignificantWave {
            get {
                return SignificantWaveField;
            } 
            set {
                SignificantWaveField = value;
                NotifyPropertyChanged("SignificantWave");
            }
        }

        private LengthMeasure SignificantWaveField; 

        /// <summary>
        /// The maximum wave height.
        /// </summary>
		[Description("The maximum wave height.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MaxWave")]
        public LengthMeasure MaxWave {
            get {
                return MaxWaveField;
            } 
            set {
                MaxWaveField = value;
                NotifyPropertyChanged("MaxWave");
            }
        }

        private LengthMeasure MaxWaveField; 

        /// <summary>
        /// The elapsed time between the passing of two wave tops.
        /// </summary>
		[Description("The elapsed time between the passing of two wave tops.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("PeriodWave")]
        public TimeMeasure PeriodWave {
            get {
                return PeriodWaveField;
            } 
            set {
                PeriodWaveField = value;
                NotifyPropertyChanged("PeriodWave");
            }
        }

        private TimeMeasure PeriodWaveField; 

        /// <summary>
        /// The direction from which the wind is blowing, measured from true north.
        /// </summary>
		[Description("The direction from which the wind is blowing, measured from true north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("AziWind")]
        public PlaneAngleMeasure AziWind {
            get {
                return AziWindField;
            } 
            set {
                AziWindField = value;
                NotifyPropertyChanged("AziWind");
            }
        }

        private PlaneAngleMeasure AziWindField; 

        /// <summary>
        /// Wind speed.
        /// </summary>
		[Description("Wind speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("VelWind")]
        public LengthPerTimeMeasure VelWind {
            get {
                return VelWindField;
            } 
            set {
                VelWindField = value;
                NotifyPropertyChanged("VelWind");
            }
        }

        private LengthPerTimeMeasure VelWindField; 

        /// <summary>
        /// Type of precipitation.
        /// </summary>
		[StringLength(64)]
        [Description("Type of precipitation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypePrecip")]
        public string TypePrecip {
            get {
                return TypePrecipField;
            } 
            set {
                TypePrecipField = value;
                NotifyPropertyChanged("TypePrecip");
            }
        }

        private string TypePrecipField; 

        /// <summary>
        /// Amount of precipitation.
        /// </summary>
		[Description("Amount of precipitation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("AmtPrecip")]
        public LengthMeasure AmtPrecip {
            get {
                return AmtPrecipField;
            } 
            set {
                AmtPrecipField = value;
                NotifyPropertyChanged("AmtPrecip");
            }
        }

        private LengthMeasure AmtPrecipField; 

        /// <summary>
        /// Description of cloud cover.
        /// </summary>
		[StringLength(64)]
        [Description("Description of cloud cover.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CoverCloud")]
        public string CoverCloud {
            get {
                return CoverCloudField;
            } 
            set {
                CoverCloudField = value;
                NotifyPropertyChanged("CoverCloud");
            }
        }

        private string CoverCloudField; 

        /// <summary>
        /// Height of cloud cover.
        /// </summary>
		[Description("Height of cloud cover.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("CeilingCloud")]
        public LengthMeasure CeilingCloud {
            get {
                return CeilingCloudField;
            } 
            set {
                CeilingCloudField = value;
                NotifyPropertyChanged("CeilingCloud");
            }
        }

        private LengthMeasure CeilingCloudField; 

        /// <summary>
        /// The speed of the ocean current.
        /// </summary>
		[Description("The speed of the ocean current.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("CurrentSea")]
        public LengthPerTimeMeasure CurrentSea {
            get {
                return CurrentSeaField;
            } 
            set {
                CurrentSeaField = value;
                NotifyPropertyChanged("CurrentSea");
            }
        }

        private LengthPerTimeMeasure CurrentSeaField; 

        /// <summary>
        /// Azimuth of current.
        /// </summary>
		[Description("Azimuth of current.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("AziCurrentSea")]
        public PlaneAngleMeasure AziCurrentSea {
            get {
                return AziCurrentSeaField;
            } 
            set {
                AziCurrentSeaField = value;
                NotifyPropertyChanged("AziCurrentSea");
            }
        }

        private PlaneAngleMeasure AziCurrentSeaField; 

        /// <summary>
        /// Comments and remarks.
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of Weather
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Weather")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PlaneAngleMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PlaneAngleMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PlaneAngleMeasure xsd type.")]
    public partial class PlaneAngleMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        public PlaneAngleMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PlaneAngleMeasure(double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleUom")]
        [XmlAttribute("uom")]
		
        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SupportCraft xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SupportCraft", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the SupportCraft xsd type.")]
    public partial class SupportCraft : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Human-recognizable context for the support craft.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human-recognizable context for the support craft.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Type of support craft (e.g., barge, helicopter, tug boat, etc.)
        /// </summary>
		[Required]
        [Description("Type of support craft (e.g., barge, helicopter, tug boat, etc.)")]
        [EnergisticsDataTypeAttribute(DataType = "SupportCraftType")]
		[XmlElement("TypeSupportCraft")]
        public SupportCraftType? TypeSupportCraft {
            get {
                return TypeSupportCraftField;
            } 
            set {
                TypeSupportCraftField = value;
                 this.TypeSupportCraftSpecified = true;
                NotifyPropertyChanged("TypeSupportCraft");
            }
        }

        
        private bool TypeSupportCraftSpecifiedField = false;
        
        /// <summary>
        /// TypeSupportCraftSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSupportCraftSpecified {
            get {
                return TypeSupportCraftSpecifiedField;
            } 
            set {
                TypeSupportCraftSpecifiedField = value;
                NotifyPropertyChanged("TypeSupportCraftSpecified");
            }
        }
        
        private SupportCraftType? TypeSupportCraftField; 

        /// <summary>
        /// Date and time when the vehicle arrived at the rig site.
        /// </summary>
		[Description("Date and time when the vehicle arrived at the rig site.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimArrived")]
        public Timestamp? DateTimeArrived {
            get {
                return DTimArrivedField;
            } 
            set {
                DTimArrivedField = value;
                 this.DateTimeArrivedSpecified = true;
                NotifyPropertyChanged("DateTimeArrived");
            }
        }

        
        private bool DateTimeArrivedSpecifiedField = false;
        
        /// <summary>
        /// DateTimeArrivedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeArrivedSpecified {
            get {
                return DateTimeArrivedSpecifiedField;
            } 
            set {
                DateTimeArrivedSpecifiedField = value;
                NotifyPropertyChanged("DateTimeArrivedSpecified");
            }
        }
        
        private Timestamp? DTimArrivedField; 

        /// <summary>
        /// Date and time when the vehicle departed from the rig site.
        /// </summary>
		[Description("Date and time when the vehicle departed from the rig site.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimDeparted")]
        public Timestamp? DateTimeDeparted {
            get {
                return DTimDepartedField;
            } 
            set {
                DTimDepartedField = value;
                 this.DateTimeDepartedSpecified = true;
                NotifyPropertyChanged("DateTimeDeparted");
            }
        }

        
        private bool DateTimeDepartedSpecifiedField = false;
        
        /// <summary>
        /// DateTimeDepartedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeDepartedSpecified {
            get {
                return DateTimeDepartedSpecifiedField;
            } 
            set {
                DateTimeDepartedSpecifiedField = value;
                NotifyPropertyChanged("DateTimeDepartedSpecified");
            }
        }
        
        private Timestamp? DTimDepartedField; 

        /// <summary>
        /// Comments and remarks.
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of SupportCraft.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of SupportCraft.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Incident xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Incident", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Incident xsd type.")]
    public partial class Incident : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time the information is related to.
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Name of the person who prepared the incident report.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the person who prepared the incident report.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Reporter")]
        public string Reporter {
            get {
                return ReporterField;
            } 
            set {
                ReporterField = value;
                NotifyPropertyChanged("Reporter");
            }
        }

        private string ReporterField; 

        /// <summary>
        /// Number of personnel with minor injuries.
        /// </summary>
		[Description("Number of personnel with minor injuries.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumMinorInjury")]
        public int? NumMinorInjury {
            get {
                return NumMinorInjuryField;
            } 
            set {
                NumMinorInjuryField = value;
                 this.NumMinorInjurySpecified = true;
                NotifyPropertyChanged("NumMinorInjury");
            }
        }

        private int? NumMinorInjuryField; 

        /// <summary>
        /// NumMinorInjurySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumMinorInjurySpecified {
            get {
                return NumMinorInjurySpecifiedField;
            } 
            set {
                NumMinorInjurySpecifiedField = value;
                NotifyPropertyChanged("NumMinorInjurySpecified");
            }
        }

        private bool NumMinorInjurySpecifiedField; 

        /// <summary>
        /// Number of personnel with major injuries.
        /// </summary>
		[Description("Number of personnel with major injuries.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumMajorInjury")]
        public int? NumMajorInjury {
            get {
                return NumMajorInjuryField;
            } 
            set {
                NumMajorInjuryField = value;
                 this.NumMajorInjurySpecified = true;
                NotifyPropertyChanged("NumMajorInjury");
            }
        }

        private int? NumMajorInjuryField; 

        /// <summary>
        /// NumMajorInjurySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumMajorInjurySpecified {
            get {
                return NumMajorInjurySpecifiedField;
            } 
            set {
                NumMajorInjurySpecifiedField = value;
                NotifyPropertyChanged("NumMajorInjurySpecified");
            }
        }

        private bool NumMajorInjurySpecifiedField; 

        /// <summary>
        /// Number of personnel killed due to the incident.
        /// </summary>
		[Description("Number of personnel killed due to the incident.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumFatality")]
        public int? NumFatality {
            get {
                return NumFatalityField;
            } 
            set {
                NumFatalityField = value;
                 this.NumFatalitySpecified = true;
                NotifyPropertyChanged("NumFatality");
            }
        }

        private int? NumFatalityField; 

        /// <summary>
        /// NumFatalitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumFatalitySpecified {
            get {
                return NumFatalitySpecifiedField;
            } 
            set {
                NumFatalitySpecifiedField = value;
                NotifyPropertyChanged("NumFatalitySpecified");
            }
        }

        private bool NumFatalitySpecifiedField; 

        /// <summary>
        /// Near miss incident occurrence? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Near miss incident occurrence?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsNearMiss")]
        public bool? IsNearMiss {
            get {
                return IsNearMissField;
            } 
            set {
                IsNearMissField = value;
                 this.IsNearMissSpecified = true;
                NotifyPropertyChanged("IsNearMiss");
            }
        }

        private bool? IsNearMissField; 

        /// <summary>
        /// IsNearMissSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsNearMissSpecified {
            get {
                return IsNearMissSpecifiedField;
            } 
            set {
                IsNearMissSpecifiedField = value;
                NotifyPropertyChanged("IsNearMissSpecified");
            }
        }

        private bool IsNearMissSpecifiedField; 

        /// <summary>
        /// Location description.
        /// </summary>
		[StringLength(64)]
        [Description("Location description.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DescLocation")]
        public string DescLocation {
            get {
                return DescLocationField;
            } 
            set {
                DescLocationField = value;
                NotifyPropertyChanged("DescLocation");
            }
        }

        private string DescLocationField; 

        /// <summary>
        /// Accident description.
        /// </summary>
		[StringLength(2000)]
        [Description("Accident description.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("DescAccident")]
        public string DescAccident {
            get {
                return DescAccidentField;
            } 
            set {
                DescAccidentField = value;
                NotifyPropertyChanged("DescAccident");
            }
        }

        private string DescAccidentField; 

        /// <summary>
        /// Remedial action description.
        /// </summary>
		[StringLength(2000)]
        [Description("Remedial action description.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("RemedialActionDesc")]
        public string RemedialActionDesc {
            get {
                return RemedialActionDescField;
            } 
            set {
                RemedialActionDescField = value;
                NotifyPropertyChanged("RemedialActionDesc");
            }
        }

        private string RemedialActionDescField; 

        /// <summary>
        /// Cause description.
        /// </summary>
		[StringLength(2000)]
        [Description("Cause description.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("CauseDesc")]
        public string CauseDesc {
            get {
                return CauseDescField;
            } 
            set {
                CauseDescField = value;
                NotifyPropertyChanged("CauseDesc");
            }
        }

        private string CauseDescField; 

        /// <summary>
        /// Number of hours lost due to the incident.
        /// </summary>
		[Description("Number of hours lost due to the incident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimLostGross")]
        public TimeMeasure ETimeLostGross {
            get {
                return ETimLostGrossField;
            } 
            set {
                ETimLostGrossField = value;
                NotifyPropertyChanged("ETimeLostGross");
            }
        }

        private TimeMeasure ETimLostGrossField; 

        /// <summary>
        /// Gross estimate of the cost incurred due to the incident.
        /// </summary>
		[Description("Gross estimate of the cost incurred due to the incident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Cost")]
		[XmlElement("CostLossGross")]
        public Cost CostLossGross {
            get {
                return CostLossGrossField;
            } 
            set {
                CostLossGrossField = value;
                NotifyPropertyChanged("CostLossGross");
            }
        }

        private Cost CostLossGrossField; 

        /// <summary>
        /// Name of the company that caused the incident.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the company that caused the incident.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ResponsibleCompany")]
        public string ResponsibleCompany {
            get {
                return ResponsibleCompanyField;
            } 
            set {
                ResponsibleCompanyField = value;
                NotifyPropertyChanged("ResponsibleCompany");
            }
        }

        private string ResponsibleCompanyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of Incident
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Incident")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Hse xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Hse", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Hse xsd type.")]
    public partial class Hse : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DaysIncFree property
        /// </summary>
		[Description("Incident free duration (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("DaysIncFree")]
        public TimeMeasure DaysIncFree {
            get {
                return DaysIncFreeField;
            } 
            set {
                DaysIncFreeField = value;
                NotifyPropertyChanged("DaysIncFree");
            }
        }

        private TimeMeasure DaysIncFreeField; 

        /// <summary>
        /// LastCsgPresTest property
        /// </summary>
		[Description("Last casing pressure test date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastCsgPresTest")]
        public Timestamp? LastCsgPresTest {
            get {
                return LastCsgPresTestField;
            } 
            set {
                LastCsgPresTestField = value;
                 this.LastCsgPresTestSpecified = true;
                NotifyPropertyChanged("LastCsgPresTest");
            }
        }

        
        private bool LastCsgPresTestSpecifiedField = false;
        
        /// <summary>
        /// LastCsgPresTestSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastCsgPresTestSpecified {
            get {
                return LastCsgPresTestSpecifiedField;
            } 
            set {
                LastCsgPresTestSpecifiedField = value;
                NotifyPropertyChanged("LastCsgPresTestSpecified");
            }
        }
        
        private Timestamp? LastCsgPresTestField; 

        /// <summary>
        /// PresLastCsg property
        /// </summary>
		[Description("Last casing pressure test pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresLastCsg")]
        public PressureMeasure PresLastCsg {
            get {
                return PresLastCsgField;
            } 
            set {
                PresLastCsgField = value;
                NotifyPropertyChanged("PresLastCsg");
            }
        }

        private PressureMeasure PresLastCsgField; 

        /// <summary>
        /// LastBopPresTest property
        /// </summary>
		[Description("Last blow out preventer pressure test.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastBopPresTest")]
        public Timestamp? LastBopPresTest {
            get {
                return LastBopPresTestField;
            } 
            set {
                LastBopPresTestField = value;
                 this.LastBopPresTestSpecified = true;
                NotifyPropertyChanged("LastBopPresTest");
            }
        }

        
        private bool LastBopPresTestSpecifiedField = false;
        
        /// <summary>
        /// LastBopPresTestSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastBopPresTestSpecified {
            get {
                return LastBopPresTestSpecifiedField;
            } 
            set {
                LastBopPresTestSpecifiedField = value;
                NotifyPropertyChanged("LastBopPresTestSpecified");
            }
        }
        
        private Timestamp? LastBopPresTestField; 

        /// <summary>
        /// NextBopPresTest property
        /// </summary>
		[Description("Next blow out preventer pressure test.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("NextBopPresTest")]
        public Timestamp? NextBopPresTest {
            get {
                return NextBopPresTestField;
            } 
            set {
                NextBopPresTestField = value;
                 this.NextBopPresTestSpecified = true;
                NotifyPropertyChanged("NextBopPresTest");
            }
        }

        
        private bool NextBopPresTestSpecifiedField = false;
        
        /// <summary>
        /// NextBopPresTestSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NextBopPresTestSpecified {
            get {
                return NextBopPresTestSpecifiedField;
            } 
            set {
                NextBopPresTestSpecifiedField = value;
                NotifyPropertyChanged("NextBopPresTestSpecified");
            }
        }
        
        private Timestamp? NextBopPresTestField; 

        /// <summary>
        /// PresStdPipe property
        /// </summary>
		[Description("Standpipe manifold pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresStdPipe")]
        public PressureMeasure PresStdPipe {
            get {
                return PresStdPipeField;
            } 
            set {
                PresStdPipeField = value;
                NotifyPropertyChanged("PresStdPipe");
            }
        }

        private PressureMeasure PresStdPipeField; 

        /// <summary>
        /// PresKellyHose property
        /// </summary>
		[Description("Kelly hose pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresKellyHose")]
        public PressureMeasure PresKellyHose {
            get {
                return PresKellyHoseField;
            } 
            set {
                PresKellyHoseField = value;
                NotifyPropertyChanged("PresKellyHose");
            }
        }

        private PressureMeasure PresKellyHoseField; 

        /// <summary>
        /// PresDiverter property
        /// </summary>
		[Description("Blow out preventer diverter pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresDiverter")]
        public PressureMeasure PresDiverter {
            get {
                return PresDiverterField;
            } 
            set {
                PresDiverterField = value;
                NotifyPropertyChanged("PresDiverter");
            }
        }

        private PressureMeasure PresDiverterField; 

        /// <summary>
        /// PresAnnular property
        /// </summary>
		[Description("Blow out preventer annular preventer pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresAnnular")]
        public PressureMeasure PresAnnular {
            get {
                return PresAnnularField;
            } 
            set {
                PresAnnularField = value;
                NotifyPropertyChanged("PresAnnular");
            }
        }

        private PressureMeasure PresAnnularField; 

        /// <summary>
        /// PresRams property
        /// </summary>
		[Description("Blow out preventer ram pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresRams")]
        public PressureMeasure PresRams {
            get {
                return PresRamsField;
            } 
            set {
                PresRamsField = value;
                NotifyPropertyChanged("PresRams");
            }
        }

        private PressureMeasure PresRamsField; 

        /// <summary>
        /// PresChokeLine property
        /// </summary>
		[Description("Choke line pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresChokeLine")]
        public PressureMeasure PresChokeLine {
            get {
                return PresChokeLineField;
            } 
            set {
                PresChokeLineField = value;
                NotifyPropertyChanged("PresChokeLine");
            }
        }

        private PressureMeasure PresChokeLineField; 

        /// <summary>
        /// PresChokeMan property
        /// </summary>
		[Description("Choke line manifold pressure tested to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresChokeMan")]
        public PressureMeasure PresChokeMan {
            get {
                return PresChokeManField;
            } 
            set {
                PresChokeManField = value;
                NotifyPropertyChanged("PresChokeMan");
            }
        }

        private PressureMeasure PresChokeManField; 

        /// <summary>
        /// LastFireBoatDrill property
        /// </summary>
		[Description("Last fire or life boat drill.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastFireBoatDrill")]
        public Timestamp? LastFireBoatDrill {
            get {
                return LastFireBoatDrillField;
            } 
            set {
                LastFireBoatDrillField = value;
                 this.LastFireBoatDrillSpecified = true;
                NotifyPropertyChanged("LastFireBoatDrill");
            }
        }

        
        private bool LastFireBoatDrillSpecifiedField = false;
        
        /// <summary>
        /// LastFireBoatDrillSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastFireBoatDrillSpecified {
            get {
                return LastFireBoatDrillSpecifiedField;
            } 
            set {
                LastFireBoatDrillSpecifiedField = value;
                NotifyPropertyChanged("LastFireBoatDrillSpecified");
            }
        }
        
        private Timestamp? LastFireBoatDrillField; 

        /// <summary>
        /// LastAbandonDrill property
        /// </summary>
		[Description("Last abandonment drill.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastAbandonDrill")]
        public Timestamp? LastAbandonDrill {
            get {
                return LastAbandonDrillField;
            } 
            set {
                LastAbandonDrillField = value;
                 this.LastAbandonDrillSpecified = true;
                NotifyPropertyChanged("LastAbandonDrill");
            }
        }

        
        private bool LastAbandonDrillSpecifiedField = false;
        
        /// <summary>
        /// LastAbandonDrillSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastAbandonDrillSpecified {
            get {
                return LastAbandonDrillSpecifiedField;
            } 
            set {
                LastAbandonDrillSpecifiedField = value;
                NotifyPropertyChanged("LastAbandonDrillSpecified");
            }
        }
        
        private Timestamp? LastAbandonDrillField; 

        /// <summary>
        /// LastRigInspection property
        /// </summary>
		[Description("Last rig inspection/check.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastRigInspection")]
        public Timestamp? LastRigInspection {
            get {
                return LastRigInspectionField;
            } 
            set {
                LastRigInspectionField = value;
                 this.LastRigInspectionSpecified = true;
                NotifyPropertyChanged("LastRigInspection");
            }
        }

        
        private bool LastRigInspectionSpecifiedField = false;
        
        /// <summary>
        /// LastRigInspectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastRigInspectionSpecified {
            get {
                return LastRigInspectionSpecifiedField;
            } 
            set {
                LastRigInspectionSpecifiedField = value;
                NotifyPropertyChanged("LastRigInspectionSpecified");
            }
        }
        
        private Timestamp? LastRigInspectionField; 

        /// <summary>
        /// LastSafetyMeeting property
        /// </summary>
		[Description("Last safety meeting.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastSafetyMeeting")]
        public Timestamp? LastSafetyMeeting {
            get {
                return LastSafetyMeetingField;
            } 
            set {
                LastSafetyMeetingField = value;
                 this.LastSafetyMeetingSpecified = true;
                NotifyPropertyChanged("LastSafetyMeeting");
            }
        }

        
        private bool LastSafetyMeetingSpecifiedField = false;
        
        /// <summary>
        /// LastSafetyMeetingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastSafetyMeetingSpecified {
            get {
                return LastSafetyMeetingSpecifiedField;
            } 
            set {
                LastSafetyMeetingSpecifiedField = value;
                NotifyPropertyChanged("LastSafetyMeetingSpecified");
            }
        }
        
        private Timestamp? LastSafetyMeetingField; 

        /// <summary>
        /// LastSafetyInspection property
        /// </summary>
		[Description("Last safety inspection.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastSafetyInspection")]
        public Timestamp? LastSafetyInspection {
            get {
                return LastSafetyInspectionField;
            } 
            set {
                LastSafetyInspectionField = value;
                 this.LastSafetyInspectionSpecified = true;
                NotifyPropertyChanged("LastSafetyInspection");
            }
        }

        
        private bool LastSafetyInspectionSpecifiedField = false;
        
        /// <summary>
        /// LastSafetyInspectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastSafetyInspectionSpecified {
            get {
                return LastSafetyInspectionSpecifiedField;
            } 
            set {
                LastSafetyInspectionSpecifiedField = value;
                NotifyPropertyChanged("LastSafetyInspectionSpecified");
            }
        }
        
        private Timestamp? LastSafetyInspectionField; 

        /// <summary>
        /// LastTripDrill property
        /// </summary>
		[Description("Last trip drill.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastTripDrill")]
        public Timestamp? LastTripDrill {
            get {
                return LastTripDrillField;
            } 
            set {
                LastTripDrillField = value;
                 this.LastTripDrillSpecified = true;
                NotifyPropertyChanged("LastTripDrill");
            }
        }

        
        private bool LastTripDrillSpecifiedField = false;
        
        /// <summary>
        /// LastTripDrillSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastTripDrillSpecified {
            get {
                return LastTripDrillSpecifiedField;
            } 
            set {
                LastTripDrillSpecifiedField = value;
                NotifyPropertyChanged("LastTripDrillSpecified");
            }
        }
        
        private Timestamp? LastTripDrillField; 

        /// <summary>
        /// LastDiverterDrill property
        /// </summary>
		[Description("Last diverter drill.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastDiverterDrill")]
        public Timestamp? LastDiverterDrill {
            get {
                return LastDiverterDrillField;
            } 
            set {
                LastDiverterDrillField = value;
                 this.LastDiverterDrillSpecified = true;
                NotifyPropertyChanged("LastDiverterDrill");
            }
        }

        
        private bool LastDiverterDrillSpecifiedField = false;
        
        /// <summary>
        /// LastDiverterDrillSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastDiverterDrillSpecified {
            get {
                return LastDiverterDrillSpecifiedField;
            } 
            set {
                LastDiverterDrillSpecifiedField = value;
                NotifyPropertyChanged("LastDiverterDrillSpecified");
            }
        }
        
        private Timestamp? LastDiverterDrillField; 

        /// <summary>
        /// LastBopDrill property
        /// </summary>
		[Description("Last blow out preventer drill.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("LastBopDrill")]
        public Timestamp? LastBopDrill {
            get {
                return LastBopDrillField;
            } 
            set {
                LastBopDrillField = value;
                 this.LastBopDrillSpecified = true;
                NotifyPropertyChanged("LastBopDrill");
            }
        }

        
        private bool LastBopDrillSpecifiedField = false;
        
        /// <summary>
        /// LastBopDrillSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastBopDrillSpecified {
            get {
                return LastBopDrillSpecifiedField;
            } 
            set {
                LastBopDrillSpecifiedField = value;
                NotifyPropertyChanged("LastBopDrillSpecified");
            }
        }
        
        private Timestamp? LastBopDrillField; 

        /// <summary>
        /// RegAgencyInsp property
        /// </summary>
		[Description("Governmental regulatory inspection agency inspection?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("RegAgencyInsp")]
        public bool? RegAgencyInsp {
            get {
                return RegAgencyInspField;
            } 
            set {
                RegAgencyInspField = value;
                 this.RegAgencyInspSpecified = true;
                NotifyPropertyChanged("RegAgencyInsp");
            }
        }

        private bool? RegAgencyInspField; 

        /// <summary>
        /// RegAgencyInspSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RegAgencyInspSpecified {
            get {
                return RegAgencyInspSpecifiedField;
            } 
            set {
                RegAgencyInspSpecifiedField = value;
                NotifyPropertyChanged("RegAgencyInspSpecified");
            }
        }

        private bool RegAgencyInspSpecifiedField; 

        /// <summary>
        /// NonComplianceIssued property
        /// </summary>
		[Description("Inspection non-compliance notice served?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("NonComplianceIssued")]
        public bool? NonComplianceIssued {
            get {
                return NonComplianceIssuedField;
            } 
            set {
                NonComplianceIssuedField = value;
                 this.NonComplianceIssuedSpecified = true;
                NotifyPropertyChanged("NonComplianceIssued");
            }
        }

        private bool? NonComplianceIssuedField; 

        /// <summary>
        /// NonComplianceIssuedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NonComplianceIssuedSpecified {
            get {
                return NonComplianceIssuedSpecifiedField;
            } 
            set {
                NonComplianceIssuedSpecifiedField = value;
                NotifyPropertyChanged("NonComplianceIssuedSpecified");
            }
        }

        private bool NonComplianceIssuedSpecifiedField; 

        /// <summary>
        /// NumStopCards property
        /// </summary>
		[Description("Number of health, safety and environment incidents reported.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumStopCards")]
        public int? NumStopCards {
            get {
                return NumStopCardsField;
            } 
            set {
                NumStopCardsField = value;
                 this.NumStopCardsSpecified = true;
                NotifyPropertyChanged("NumStopCards");
            }
        }

        private int? NumStopCardsField; 

        /// <summary>
        /// NumStopCardsSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumStopCardsSpecified {
            get {
                return NumStopCardsSpecifiedField;
            } 
            set {
                NumStopCardsSpecifiedField = value;
                NotifyPropertyChanged("NumStopCardsSpecified");
            }
        }

        private bool NumStopCardsSpecifiedField; 

        /// <summary>
        /// FluidDischarged property
        /// </summary>
		[Description("Daily whole mud discarded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FluidDischarged")]
        public VolumeMeasure FluidDischarged {
            get {
                return FluidDischargedField;
            } 
            set {
                FluidDischargedField = value;
                NotifyPropertyChanged("FluidDischarged");
            }
        }

        private VolumeMeasure FluidDischargedField; 

        /// <summary>
        /// VolCtgDischarged property
        /// </summary>
		[Description("Volume of cuttings discharged.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolCtgDischarged")]
        public VolumeMeasure VolCtgDischarged {
            get {
                return VolCtgDischargedField;
            } 
            set {
                VolCtgDischargedField = value;
                NotifyPropertyChanged("VolCtgDischarged");
            }
        }

        private VolumeMeasure VolCtgDischargedField; 

        /// <summary>
        /// VolOilCtgDischarge property
        /// </summary>
		[Description("Oil on cuttings daily discharge.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolOilCtgDischarge")]
        public VolumeMeasure VolOilCtgDischarge {
            get {
                return VolOilCtgDischargeField;
            } 
            set {
                VolOilCtgDischargeField = value;
                NotifyPropertyChanged("VolOilCtgDischarge");
            }
        }

        private VolumeMeasure VolOilCtgDischargeField; 

        /// <summary>
        /// WasteDischarged property
        /// </summary>
		[Description("Volume of sanitary waste discharged.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("WasteDischarged")]
        public VolumeMeasure WasteDischarged {
            get {
                return WasteDischargedField;
            } 
            set {
                WasteDischargedField = value;
                NotifyPropertyChanged("WasteDischarged");
            }
        }

        private VolumeMeasure WasteDischargedField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

        /// <summary>
        /// Incident property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Incident")]
		[XmlElement("Incident")]
        public List<Incident> Incident {
            get {
                return IncidentField;
            } 
            set {
                IncidentField = value;
                NotifyPropertyChanged("Incident");
            }
        }

         /// <summary>
         /// bool to indicate if Incident has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IncidentSpecified
         {
             get {
             if(IncidentField!=null)
                 return IncidentField.Count>0?true:false;
             else return false;
             }
         }
        private List<Incident> IncidentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ShakerScreen xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ShakerScreen", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ShakerScreen xsd type.")]
    public partial class ShakerScreen : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that activities started.
        /// </summary>
		[Description("Date and time that activities started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// Date and time activities were completed.
        /// </summary>
		[Description("Date and time activities were completed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        
        private bool DateTimeEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DateTimeEndSpecifiedField;
            } 
            set {
                DateTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }
        
        private Timestamp? DTimEndField; 

        /// <summary>
        /// Deck number the mesh is installed on.
        /// </summary>
		[Description("Deck number the mesh is installed on.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumDeck")]
        public int? NumDeck {
            get {
                return NumDeckField;
            } 
            set {
                NumDeckField = value;
                 this.NumDeckSpecified = true;
                NotifyPropertyChanged("NumDeck");
            }
        }

        private int? NumDeckField; 

        /// <summary>
        /// NumDeckSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumDeckSpecified {
            get {
                return NumDeckSpecifiedField;
            } 
            set {
                NumDeckSpecifiedField = value;
                NotifyPropertyChanged("NumDeckSpecified");
            }
        }

        private bool NumDeckSpecifiedField; 

        /// <summary>
        /// Mesh size in the X direction.
        /// </summary>
		[Description("Mesh size in the X direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MeshX")]
        public LengthMeasure MeshX {
            get {
                return MeshXField;
            } 
            set {
                MeshXField = value;
                NotifyPropertyChanged("MeshX");
            }
        }

        private LengthMeasure MeshXField; 

        /// <summary>
        /// Mesh size in the Y direction.
        /// </summary>
		[Description("Mesh size in the Y direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MeshY")]
        public LengthMeasure MeshY {
            get {
                return MeshYField;
            } 
            set {
                MeshYField = value;
                NotifyPropertyChanged("MeshY");
            }
        }

        private LengthMeasure MeshYField; 

        /// <summary>
        /// Manufacturer or supplier of the item.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer or supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// Manufacturers designated model.
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturers designated model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Model")]
        public string Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string ModelField; 

        /// <summary>
        /// Shaker screen cut point, which is the maximum size cuttings that will pass through the screen.
        /// </summary>
		[Description("Shaker screen cut point, which is the maximum size cuttings that will pass through the screen.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("CutPoint")]
        public LengthMeasure CutPoint {
            get {
                return CutPointField;
            } 
            set {
                CutPointField = value;
                NotifyPropertyChanged("CutPoint");
            }
        }

        private LengthMeasure CutPointField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ShakerOp xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ShakerOp", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ShakerOp xsd type.")]
    public partial class ShakerOp : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Shaker property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the shaker that is characterized by this report.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Shaker")]
        public string Shaker {
            get {
                return ShakerField;
            } 
            set {
                ShakerField = value;
                NotifyPropertyChanged("Shaker");
            }
        }

        private string ShakerField; 

        /// <summary>
        /// MdHole property
        /// </summary>
		[Description("Hole measured depth at the time of measurement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdHole")]
        public MeasuredDepthCoord MDHole {
            get {
                return MdHoleField;
            } 
            set {
                MdHoleField = value;
                NotifyPropertyChanged("MDHole");
            }
        }

        private MeasuredDepthCoord MdHoleField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// HoursRun property
        /// </summary>
		[Description("Hours run the shaker has run for this operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("HoursRun")]
        public TimeMeasure HoursRun {
            get {
                return HoursRunField;
            } 
            set {
                HoursRunField = value;
                NotifyPropertyChanged("HoursRun");
            }
        }

        private TimeMeasure HoursRunField; 

        /// <summary>
        /// PcScreenCovered property
        /// </summary>
		[Description("Percent of screen covered by cuttings.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaPerAreaMeasure")]
		[XmlElement("PcScreenCovered")]
        public AreaPerAreaMeasure PercentScreenCovered {
            get {
                return PcScreenCoveredField;
            } 
            set {
                PcScreenCoveredField = value;
                NotifyPropertyChanged("PercentScreenCovered");
            }
        }

        private AreaPerAreaMeasure PcScreenCoveredField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ShakerScreen property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ShakerScreen")]
		[XmlElement("ShakerScreen")]
        public ShakerScreen ShakerScreen {
            get {
                return ShakerScreenField;
            } 
            set {
                ShakerScreenField = value;
                NotifyPropertyChanged("ShakerScreen");
            }
        }

        private ShakerScreen ShakerScreenField; 

		/// <summary>
        /// Unique identifier for this instance of ShakerOp
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of ShakerOp")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AnchorState xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AnchorState", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AnchorState xsd type.")]
    public partial class AnchorState : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The anchor number within a mooring system, or name if a name is used instead.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The anchor number within a mooring system, or name if a name is used instead.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("AnchorName")]
        public string AnchorName {
            get {
                return AnchorNameField;
            } 
            set {
                AnchorNameField = value;
                NotifyPropertyChanged("AnchorName");
            }
        }

        private string AnchorNameField; 

        /// <summary>
        /// Angle of the anchor or mooring line.
        /// </summary>
		[Description("Angle of the anchor or mooring line.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("AnchorAngle")]
        public PlaneAngleMeasure AnchorAngle {
            get {
                return AnchorAngleField;
            } 
            set {
                AnchorAngleField = value;
                NotifyPropertyChanged("AnchorAngle");
            }
        }

        private PlaneAngleMeasure AnchorAngleField; 

        /// <summary>
        /// Tension on the mooring line represented by the named anchor.
        /// </summary>
		[Description("Tension on the mooring line represented by the named anchor.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("AnchorTension")]
        public ForceMeasure AnchorTension {
            get {
                return AnchorTensionField;
            } 
            set {
                AnchorTensionField = value;
                NotifyPropertyChanged("AnchorTension");
            }
        }

        private ForceMeasure AnchorTensionField; 

        /// <summary>
        /// Free-test description of the state of this anchor or mooring line.
        /// </summary>
		[StringLength(2000)]
        [Description("Free-test description of the state of this anchor or mooring line.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RigResponse xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RigResponse", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RigResponse xsd type.")]
    public partial class RigResponse : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// RigHeading property
        /// </summary>
		[Description("Direction, relative to true north, to which the rig is facing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("RigHeading")]
        public PlaneAngleMeasure RigHeading {
            get {
                return RigHeadingField;
            } 
            set {
                RigHeadingField = value;
                NotifyPropertyChanged("RigHeading");
            }
        }

        private PlaneAngleMeasure RigHeadingField; 

        /// <summary>
        /// RigHeave property
        /// </summary>
		[Description("Maximum amplitude of the vertical motion of the rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("RigHeave")]
        public LengthMeasure RigHeave {
            get {
                return RigHeaveField;
            } 
            set {
                RigHeaveField = value;
                NotifyPropertyChanged("RigHeave");
            }
        }

        private LengthMeasure RigHeaveField; 

        /// <summary>
        /// RigPitchAngle property
        /// </summary>
		[Description("Measure of the fore-aft rotational movement of the rig due to the combined effects of wind and waves; measured as the angle from horizontal.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("RigPitchAngle")]
        public PlaneAngleMeasure RigPitchAngle {
            get {
                return RigPitchAngleField;
            } 
            set {
                RigPitchAngleField = value;
                NotifyPropertyChanged("RigPitchAngle");
            }
        }

        private PlaneAngleMeasure RigPitchAngleField; 

        /// <summary>
        /// RigRollAngle property
        /// </summary>
		[Description("Measure of the side-to-side rotational movement of the rig due to the combined effects of wind and waves; measured as the angle from vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("RigRollAngle")]
        public PlaneAngleMeasure RigRollAngle {
            get {
                return RigRollAngleField;
            } 
            set {
                RigRollAngleField = value;
                NotifyPropertyChanged("RigRollAngle");
            }
        }

        private PlaneAngleMeasure RigRollAngleField; 

        /// <summary>
        /// RiserAngle property
        /// </summary>
		[Description("Angle of the marine riser with the vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("RiserAngle")]
        public PlaneAngleMeasure RiserAngle {
            get {
                return RiserAngleField;
            } 
            set {
                RiserAngleField = value;
                NotifyPropertyChanged("RiserAngle");
            }
        }

        private PlaneAngleMeasure RiserAngleField; 

        /// <summary>
        /// RiserDirection property
        /// </summary>
		[Description("Direction of the marine riser.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("RiserDirection")]
        public PlaneAngleMeasure RiserDirection {
            get {
                return RiserDirectionField;
            } 
            set {
                RiserDirectionField = value;
                NotifyPropertyChanged("RiserDirection");
            }
        }

        private PlaneAngleMeasure RiserDirectionField; 

        /// <summary>
        /// RiserTension property
        /// </summary>
		[Description("Tension of the marine riser.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("RiserTension")]
        public ForceMeasure RiserTension {
            get {
                return RiserTensionField;
            } 
            set {
                RiserTensionField = value;
                NotifyPropertyChanged("RiserTension");
            }
        }

        private ForceMeasure RiserTensionField; 

        /// <summary>
        /// VariableDeckLoad property
        /// </summary>
		[Description("Current temporary load on the rig deck.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("VariableDeckLoad")]
        public ForceMeasure VariableDeckLoad {
            get {
                return VariableDeckLoadField;
            } 
            set {
                VariableDeckLoadField = value;
                NotifyPropertyChanged("VariableDeckLoad");
            }
        }

        private ForceMeasure VariableDeckLoadField; 

        /// <summary>
        /// TotalDeckLoad property
        /// </summary>
		[Description("Total deck load.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("TotalDeckLoad")]
        public ForceMeasure TotalDeckLoad {
            get {
                return TotalDeckLoadField;
            } 
            set {
                TotalDeckLoadField = value;
                NotifyPropertyChanged("TotalDeckLoad");
            }
        }

        private ForceMeasure TotalDeckLoadField; 

        /// <summary>
        /// GuideBaseAngle property
        /// </summary>
		[Description("Direction of the guide base.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("GuideBaseAngle")]
        public PlaneAngleMeasure GuideBaseAngle {
            get {
                return GuideBaseAngleField;
            } 
            set {
                GuideBaseAngleField = value;
                NotifyPropertyChanged("GuideBaseAngle");
            }
        }

        private PlaneAngleMeasure GuideBaseAngleField; 

        /// <summary>
        /// BallJointAngle property
        /// </summary>
		[Description("Angle between the riser and the blowout preventer (BOP) at the flex joint.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("BallJointAngle")]
        public PlaneAngleMeasure BallJointAngle {
            get {
                return BallJointAngleField;
            } 
            set {
                BallJointAngleField = value;
                NotifyPropertyChanged("BallJointAngle");
            }
        }

        private PlaneAngleMeasure BallJointAngleField; 

        /// <summary>
        /// BallJointDirection property
        /// </summary>
		[Description("Direction of the ball joint.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("BallJointDirection")]
        public PlaneAngleMeasure BallJointDirection {
            get {
                return BallJointDirectionField;
            } 
            set {
                BallJointDirectionField = value;
                NotifyPropertyChanged("BallJointDirection");
            }
        }

        private PlaneAngleMeasure BallJointDirectionField; 

        /// <summary>
        /// OffsetRig property
        /// </summary>
		[Description("Horizontal displacement of the rig relative to the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OffsetRig")]
        public LengthMeasure OffsetRig {
            get {
                return OffsetRigField;
            } 
            set {
                OffsetRigField = value;
                NotifyPropertyChanged("OffsetRig");
            }
        }

        private LengthMeasure OffsetRigField; 

        /// <summary>
        /// LoadLeg1 property
        /// </summary>
		[Description("Load carried by one leg of a jackup rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("LoadLeg1")]
        public ForceMeasure LoadLeg1 {
            get {
                return LoadLeg1Field;
            } 
            set {
                LoadLeg1Field = value;
                NotifyPropertyChanged("LoadLeg1");
            }
        }

        private ForceMeasure LoadLeg1Field; 

        /// <summary>
        /// LoadLeg2 property
        /// </summary>
		[Description("Load carried by the second leg of a jackup rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("LoadLeg2")]
        public ForceMeasure LoadLeg2 {
            get {
                return LoadLeg2Field;
            } 
            set {
                LoadLeg2Field = value;
                NotifyPropertyChanged("LoadLeg2");
            }
        }

        private ForceMeasure LoadLeg2Field; 

        /// <summary>
        /// LoadLeg3 property
        /// </summary>
		[Description("Load carried by the third leg of a jackup rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("LoadLeg3")]
        public ForceMeasure LoadLeg3 {
            get {
                return LoadLeg3Field;
            } 
            set {
                LoadLeg3Field = value;
                NotifyPropertyChanged("LoadLeg3");
            }
        }

        private ForceMeasure LoadLeg3Field; 

        /// <summary>
        /// LoadLeg4 property
        /// </summary>
		[Description("Load carried by the fourth leg of a jackup rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("LoadLeg4")]
        public ForceMeasure LoadLeg4 {
            get {
                return LoadLeg4Field;
            } 
            set {
                LoadLeg4Field = value;
                NotifyPropertyChanged("LoadLeg4");
            }
        }

        private ForceMeasure LoadLeg4Field; 

        /// <summary>
        /// PenetrationLeg1 property
        /// </summary>
		[Description("Penetration of the first leg into the seabed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("PenetrationLeg1")]
        public LengthMeasure PenetrationLeg1 {
            get {
                return PenetrationLeg1Field;
            } 
            set {
                PenetrationLeg1Field = value;
                NotifyPropertyChanged("PenetrationLeg1");
            }
        }

        private LengthMeasure PenetrationLeg1Field; 

        /// <summary>
        /// PenetrationLeg2 property
        /// </summary>
		[Description("Penetration of the second leg into the seabed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("PenetrationLeg2")]
        public LengthMeasure PenetrationLeg2 {
            get {
                return PenetrationLeg2Field;
            } 
            set {
                PenetrationLeg2Field = value;
                NotifyPropertyChanged("PenetrationLeg2");
            }
        }

        private LengthMeasure PenetrationLeg2Field; 

        /// <summary>
        /// PenetrationLeg3 property
        /// </summary>
		[Description("Penetration of the third leg into the seabed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("PenetrationLeg3")]
        public LengthMeasure PenetrationLeg3 {
            get {
                return PenetrationLeg3Field;
            } 
            set {
                PenetrationLeg3Field = value;
                NotifyPropertyChanged("PenetrationLeg3");
            }
        }

        private LengthMeasure PenetrationLeg3Field; 

        /// <summary>
        /// PenetrationLeg4 property
        /// </summary>
		[Description("Penetration of the fourth leg into the seabed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("PenetrationLeg4")]
        public LengthMeasure PenetrationLeg4 {
            get {
                return PenetrationLeg4Field;
            } 
            set {
                PenetrationLeg4Field = value;
                NotifyPropertyChanged("PenetrationLeg4");
            }
        }

        private LengthMeasure PenetrationLeg4Field; 

        /// <summary>
        /// DispRig property
        /// </summary>
		[Description("Vessel displacement (in water).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DispRig")]
        public LengthMeasure DispRig {
            get {
                return DispRigField;
            } 
            set {
                DispRigField = value;
                NotifyPropertyChanged("DispRig");
            }
        }

        private LengthMeasure DispRigField; 

        /// <summary>
        /// MeanDraft property
        /// </summary>
		[Description("Mean draft at mid-section of the vessel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MeanDraft")]
        public LengthMeasure MeanDraft {
            get {
                return MeanDraftField;
            } 
            set {
                MeanDraftField = value;
                NotifyPropertyChanged("MeanDraft");
            }
        }

        private LengthMeasure MeanDraftField; 

        /// <summary>
        /// AnchorState property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AnchorState")]
		[XmlElement("AnchorState")]
        public List<AnchorState> AnchorState {
            get {
                return AnchorStateField;
            } 
            set {
                AnchorStateField = value;
                NotifyPropertyChanged("AnchorState");
            }
        }

         /// <summary>
         /// bool to indicate if AnchorState has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnchorStateSpecified
         {
             get {
             if(AnchorStateField!=null)
                 return AnchorStateField.Count>0?true:false;
             else return false;
             }
         }
        private List<AnchorState> AnchorStateField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StnTrajCorUsed xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StnTrajCorUsed", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StnTrajCorUsed xsd type.")]
    public partial class StnTrajCorUsed : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Calculated gravitational field strength correction.
        /// </summary>
		[Description("Calculated gravitational field strength correction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LinearAccelerationMeasure")]
		[XmlElement("GravAxialAccelCor")]
        public LinearAccelerationMeasure GravAxialAccelCor {
            get {
                return GravAxialAccelCorField;
            } 
            set {
                GravAxialAccelCorField = value;
                NotifyPropertyChanged("GravAxialAccelCor");
            }
        }

        private LinearAccelerationMeasure GravAxialAccelCorField; 

        /// <summary>
        /// The correction applied to a cross-axial (direction 1) component of the Earth's gravitational field.
        /// </summary>
		[Description("The correction applied to a cross-axial (direction 1) component of the Earth's gravitational field.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LinearAccelerationMeasure")]
		[XmlElement("GravTran1AccelCor")]
        public LinearAccelerationMeasure GravTran1AccelCor {
            get {
                return GravTran1AccelCorField;
            } 
            set {
                GravTran1AccelCorField = value;
                NotifyPropertyChanged("GravTran1AccelCor");
            }
        }

        private LinearAccelerationMeasure GravTran1AccelCorField; 

        /// <summary>
        /// The correction applied to a cross-axial (direction 2) component of the Earth's gravitational field.
        /// </summary>
		[Description("The correction applied to a cross-axial (direction 2) component of the Earth's gravitational field.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LinearAccelerationMeasure")]
		[XmlElement("GravTran2AccelCor")]
        public LinearAccelerationMeasure GravTran2AccelCor {
            get {
                return GravTran2AccelCorField;
            } 
            set {
                GravTran2AccelCorField = value;
                NotifyPropertyChanged("GravTran2AccelCor");
            }
        }

        private LinearAccelerationMeasure GravTran2AccelCorField; 

        /// <summary>
        /// Axial magnetic drill string correction.
        /// </summary>
		[Description("Axial magnetic drill string correction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagAxialDrlstrCor")]
        public MagneticFluxDensityMeasure MagAxialDrlstrCor {
            get {
                return MagAxialDrlstrCorField;
            } 
            set {
                MagAxialDrlstrCorField = value;
                NotifyPropertyChanged("MagAxialDrlstrCor");
            }
        }

        private MagneticFluxDensityMeasure MagAxialDrlstrCorField; 

        /// <summary>
        /// Cross-axial (direction 1) magnetic correction.
        /// </summary>
		[Description("Cross-axial (direction 1) magnetic correction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagTran1DrlstrCor")]
        public MagneticFluxDensityMeasure MagTran1DrlstrCor {
            get {
                return MagTran1DrlstrCorField;
            } 
            set {
                MagTran1DrlstrCorField = value;
                NotifyPropertyChanged("MagTran1DrlstrCor");
            }
        }

        private MagneticFluxDensityMeasure MagTran1DrlstrCorField; 

        /// <summary>
        /// Cross-axial (direction 2) magnetic correction.
        /// </summary>
		[Description("Cross-axial (direction 2) magnetic correction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagTran2DrlstrCor")]
        public MagneticFluxDensityMeasure MagTran2DrlstrCor {
            get {
                return MagTran2DrlstrCorField;
            } 
            set {
                MagTran2DrlstrCorField = value;
                NotifyPropertyChanged("MagTran2DrlstrCor");
            }
        }

        private MagneticFluxDensityMeasure MagTran2DrlstrCorField; 

        /// <summary>
        /// Cross-axial (direction 1) magnetic correction due to a multi-station analysis process.
        /// </summary>
		[Description("Cross-axial (direction 1) magnetic correction due to a multi-station analysis process.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagTran1MSACor")]
        public MagneticFluxDensityMeasure MagTran1MSACor {
            get {
                return MagTran1MSACorField;
            } 
            set {
                MagTran1MSACorField = value;
                NotifyPropertyChanged("MagTran1MSACor");
            }
        }

        private MagneticFluxDensityMeasure MagTran1MSACorField; 

        /// <summary>
        /// Cross-axial (direction 2) magnetic correction due to a multi-station analysis process.
        /// </summary>
		[Description("Cross-axial (direction 2) magnetic correction due to a multi-station analysis process.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagTran2MSACor")]
        public MagneticFluxDensityMeasure MagTran2MSACor {
            get {
                return MagTran2MSACorField;
            } 
            set {
                MagTran2MSACorField = value;
                NotifyPropertyChanged("MagTran2MSACor");
            }
        }

        private MagneticFluxDensityMeasure MagTran2MSACorField; 

        /// <summary>
        /// Axial magnetic correction due to a multi-station analysis process.
        /// </summary>
		[Description("Axial magnetic correction due to a multi-station analysis process.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagAxialMSACor")]
        public MagneticFluxDensityMeasure MagAxialMSACor {
            get {
                return MagAxialMSACorField;
            } 
            set {
                MagAxialMSACorField = value;
                NotifyPropertyChanged("MagAxialMSACor");
            }
        }

        private MagneticFluxDensityMeasure MagAxialMSACorField; 

        /// <summary>
        /// Calculated sag correction to the inclination.
        /// </summary>
		[Description("Calculated sag correction to the inclination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("SagIncCor")]
        public PlaneAngleMeasure SagIncCor {
            get {
                return SagIncCorField;
            } 
            set {
                SagIncCorField = value;
                NotifyPropertyChanged("SagIncCor");
            }
        }

        private PlaneAngleMeasure SagIncCorField; 

        /// <summary>
        /// Calculated cosag correction to the azimuth.
        /// </summary>
		[Description("Calculated cosag correction to the azimuth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("SagAziCor")]
        public PlaneAngleMeasure SagAziCor {
            get {
                return SagAziCorField;
            } 
            set {
                SagAziCorField = value;
                NotifyPropertyChanged("SagAziCor");
            }
        }

        private PlaneAngleMeasure SagAziCorField; 

        /// <summary>
        /// Magnetic declination used to correct a Magnetic North referenced azimuth to a True North azimuth. Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.
        /// </summary>
		[Description("Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("StnMagDeclUsed")]
        public PlaneAngleMeasure StnMagDeclUsed {
            get {
                return StnMagDeclUsedField;
            } 
            set {
                StnMagDeclUsedField = value;
                NotifyPropertyChanged("StnMagDeclUsed");
            }
        }

        private PlaneAngleMeasure StnMagDeclUsedField; 

        /// <summary>
        /// Magnetic declination used to correct a Magnetic North referenced azimuth to a True North azimuth. Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.
        /// </summary>
		[Description("Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("StnGridConUsed")]
        public PlaneAngleMeasure StnGridConUsed {
            get {
                return StnGridConUsedField;
            } 
            set {
                StnGridConUsedField = value;
                NotifyPropertyChanged("StnGridConUsed");
            }
        }

        private PlaneAngleMeasure StnGridConUsedField; 

        /// <summary>
        /// Offset relative to the bit.
        /// </summary>
		[Description("Offset relative to the bit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DirSensorOffset")]
        public LengthMeasure DirSensorOffset {
            get {
                return DirSensorOffsetField;
            } 
            set {
                DirSensorOffsetField = value;
                NotifyPropertyChanged("DirSensorOffset");
            }
        }

        private LengthMeasure DirSensorOffsetField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LinearAccelerationMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LinearAccelerationMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LinearAccelerationMeasure xsd type.")]
    public partial class LinearAccelerationMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LinearAccelerationMeasure class.
        /// </summary>
        public LinearAccelerationMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LinearAccelerationMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LinearAccelerationMeasure(double value, LinearAccelerationUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LinearAccelerationUom")]
        [XmlAttribute("uom")]
		
        public LinearAccelerationUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LinearAccelerationUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MagneticFluxDensityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MagneticFluxDensityMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the MagneticFluxDensityMeasure xsd type.")]
    public partial class MagneticFluxDensityMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MagneticFluxDensityMeasure class.
        /// </summary>
        public MagneticFluxDensityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MagneticFluxDensityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MagneticFluxDensityMeasure(double value, MagneticFluxDensityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityUom")]
        [XmlAttribute("uom")]
		
        public MagneticFluxDensityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MagneticFluxDensityUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StnTrajRawData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StnTrajRawData", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StnTrajRawData xsd type.")]
    public partial class StnTrajRawData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Uncorrected gravitational field strength measured in the axial direction.
        /// </summary>
		[Description("Uncorrected gravitational field strength measured in the axial direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LinearAccelerationMeasure")]
		[XmlElement("GravAxialRaw")]
        public LinearAccelerationMeasure GravAxialRaw {
            get {
                return GravAxialRawField;
            } 
            set {
                GravAxialRawField = value;
                NotifyPropertyChanged("GravAxialRaw");
            }
        }

        private LinearAccelerationMeasure GravAxialRawField; 

        /// <summary>
        /// Uncorrected gravitational field strength measured in the transverse direction.
        /// </summary>
		[Description("Uncorrected gravitational field strength measured in the transverse direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LinearAccelerationMeasure")]
		[XmlElement("GravTran1Raw")]
        public LinearAccelerationMeasure GravTran1Raw {
            get {
                return GravTran1RawField;
            } 
            set {
                GravTran1RawField = value;
                NotifyPropertyChanged("GravTran1Raw");
            }
        }

        private LinearAccelerationMeasure GravTran1RawField; 

        /// <summary>
        /// Uncorrected gravitational field strength measured in the transverse direction, approximately normal to tran1.
        /// </summary>
		[Description("Uncorrected gravitational field strength measured in the transverse direction, approximately normal to tran1.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LinearAccelerationMeasure")]
		[XmlElement("GravTran2Raw")]
        public LinearAccelerationMeasure GravTran2Raw {
            get {
                return GravTran2RawField;
            } 
            set {
                GravTran2RawField = value;
                NotifyPropertyChanged("GravTran2Raw");
            }
        }

        private LinearAccelerationMeasure GravTran2RawField; 

        /// <summary>
        /// Uncorrected magnetic field strength measured in the axial direction.
        /// </summary>
		[Description("Uncorrected magnetic field strength measured in the axial direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagAxialRaw")]
        public MagneticFluxDensityMeasure MagAxialRaw {
            get {
                return MagAxialRawField;
            } 
            set {
                MagAxialRawField = value;
                NotifyPropertyChanged("MagAxialRaw");
            }
        }

        private MagneticFluxDensityMeasure MagAxialRawField; 

        /// <summary>
        /// Uncorrected magnetic field strength measured in the transverse direction.
        /// </summary>
		[Description("Uncorrected magnetic field strength measured in the transverse direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagTran1Raw")]
        public MagneticFluxDensityMeasure MagTran1Raw {
            get {
                return MagTran1RawField;
            } 
            set {
                MagTran1RawField = value;
                NotifyPropertyChanged("MagTran1Raw");
            }
        }

        private MagneticFluxDensityMeasure MagTran1RawField; 

        /// <summary>
        /// Uncorrected magnetic field strength measured in the transverse direction, approximately normal to tran1.
        /// </summary>
		[Description("Uncorrected magnetic field strength measured in the transverse direction, approximately normal to tran1.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagTran2Raw")]
        public MagneticFluxDensityMeasure MagTran2Raw {
            get {
                return MagTran2RawField;
            } 
            set {
                MagTran2RawField = value;
                NotifyPropertyChanged("MagTran2Raw");
            }
        }

        private MagneticFluxDensityMeasure MagTran2RawField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RefWellboreTrajectoryStation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RefWellboreTrajectoryStation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RefWellboreTrajectoryStation xsd type.")]
    public partial class RefWellboreTrajectoryStation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the trajectoryStation within the parent trajectory. StationReference is a special case where WITSML only uses a UID for the pointer.The natural identity of a station is its physical characteristics (e.g., md).
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the trajectoryStation within the parent trajectory. StationReference is a special case where WITSML only uses a UID for the pointer.The natural identity of a station is its physical characteristics (e.g., md).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StationReference")]
        public string StationReference {
            get {
                return StationReferenceField;
            } 
            set {
                StationReferenceField = value;
                NotifyPropertyChanged("StationReference");
            }
        }

        private string StationReferenceField; 

        /// <summary>
        /// A pointer to the trajectory within the parent wellbore. This trajectory contains the trajectoryStation.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the trajectory within the parent wellbore. This trajectory contains the trajectoryStation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TrajectoryParent")]
        public string TrajectoryParent {
            get {
                return TrajectoryParentField;
            } 
            set {
                TrajectoryParentField = value;
                NotifyPropertyChanged("TrajectoryParent");
            }
        }

        private string TrajectoryParentField; 

        /// <summary>
        /// A pointer to the wellbore that contains the trajectory. WellboreParent is not needed unless the trajectory is outside the context of a common parent wellbore.
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the wellbore that contains the trajectory. WellboreParent is not needed unless the trajectory is outside the context of a common parent wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WellboreParent")]
        public string WellboreParent {
            get {
                return WellboreParentField;
            } 
            set {
                WellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private string WellboreParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StnTrajMatrixCov xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StnTrajMatrixCov", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StnTrajMatrixCov xsd type.")]
    public partial class StnTrajMatrixCov : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Covariance north north.
        /// </summary>
		[Description("Covariance north north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaMeasure")]
		[XmlElement("VarianceNN")]
        public AreaMeasure VarianceNN {
            get {
                return VarianceNNField;
            } 
            set {
                VarianceNNField = value;
                NotifyPropertyChanged("VarianceNN");
            }
        }

        private AreaMeasure VarianceNNField; 

        /// <summary>
        /// Crossvariance north east.
        /// </summary>
		[Description("Crossvariance north east.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaMeasure")]
		[XmlElement("VarianceNE")]
        public AreaMeasure VarianceNE {
            get {
                return VarianceNEField;
            } 
            set {
                VarianceNEField = value;
                NotifyPropertyChanged("VarianceNE");
            }
        }

        private AreaMeasure VarianceNEField; 

        /// <summary>
        /// Crossvariance north vertical.
        /// </summary>
		[Description("Crossvariance north vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaMeasure")]
		[XmlElement("VarianceNVert")]
        public AreaMeasure VarianceNVert {
            get {
                return VarianceNVertField;
            } 
            set {
                VarianceNVertField = value;
                NotifyPropertyChanged("VarianceNVert");
            }
        }

        private AreaMeasure VarianceNVertField; 

        /// <summary>
        /// Covariance east east.
        /// </summary>
		[Description("Covariance east east.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaMeasure")]
		[XmlElement("VarianceEE")]
        public AreaMeasure VarianceEE {
            get {
                return VarianceEEField;
            } 
            set {
                VarianceEEField = value;
                NotifyPropertyChanged("VarianceEE");
            }
        }

        private AreaMeasure VarianceEEField; 

        /// <summary>
        /// Crossvariance east vertical.
        /// </summary>
		[Description("Crossvariance east vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaMeasure")]
		[XmlElement("VarianceEVert")]
        public AreaMeasure VarianceEVert {
            get {
                return VarianceEVertField;
            } 
            set {
                VarianceEVertField = value;
                NotifyPropertyChanged("VarianceEVert");
            }
        }

        private AreaMeasure VarianceEVertField; 

        /// <summary>
        /// Covariance vertical vertical.
        /// </summary>
		[Description("Covariance vertical vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaMeasure")]
		[XmlElement("VarianceVertVert")]
        public AreaMeasure VarianceVertVert {
            get {
                return VarianceVertVertField;
            } 
            set {
                VarianceVertVertField = value;
                NotifyPropertyChanged("VarianceVertVert");
            }
        }

        private AreaMeasure VarianceVertVertField; 

        /// <summary>
        /// Bias north.
        /// </summary>
		[Description("Bias north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("BiasN")]
        public LengthMeasure BiasN {
            get {
                return BiasNField;
            } 
            set {
                BiasNField = value;
                NotifyPropertyChanged("BiasN");
            }
        }

        private LengthMeasure BiasNField; 

        /// <summary>
        /// Bias east.
        /// </summary>
		[Description("Bias east.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("BiasE")]
        public LengthMeasure BiasE {
            get {
                return BiasEField;
            } 
            set {
                BiasEField = value;
                NotifyPropertyChanged("BiasE");
            }
        }

        private LengthMeasure BiasEField; 

        /// <summary>
        /// Bias vertical. The coordinate system is set up in a right-handed configuration, which makes the vertical direction increasing (i.e., positive) downwards.
        /// </summary>
		[Description("Bias vertical. The coordinate system is set up in a right-handed configuration, which makes the vertical direction increasing (i.e., positive) downwards.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("BiasVert")]
        public LengthMeasure BiasVert {
            get {
                return BiasVertField;
            } 
            set {
                BiasVertField = value;
                NotifyPropertyChanged("BiasVert");
            }
        }

        private LengthMeasure BiasVertField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StnTrajValid xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StnTrajValid", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StnTrajValid xsd type.")]
    public partial class StnTrajValid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Calculated total intensity of the geomagnetic field as sum of BGGM, IFR and local field.
        /// </summary>
		[Description("Calculated total intensity of the geomagnetic field as sum of BGGM,  IFR and local field.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagTotalFieldCalc")]
        public MagneticFluxDensityMeasure MagTotalFieldCalc {
            get {
                return MagTotalFieldCalcField;
            } 
            set {
                MagTotalFieldCalcField = value;
                NotifyPropertyChanged("MagTotalFieldCalc");
            }
        }

        private MagneticFluxDensityMeasure MagTotalFieldCalcField; 

        /// <summary>
        /// Calculated magnetic dip (inclination), the angle between the horizontal and the geomagnetic field (positive down, res .001).
        /// </summary>
		[Description("Calculated magnetic dip (inclination), the angle between the horizontal  and the geomagnetic field (positive down, res .001).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("MagDipAngleCalc")]
        public PlaneAngleMeasure MagDipAngleCalc {
            get {
                return MagDipAngleCalcField;
            } 
            set {
                MagDipAngleCalcField = value;
                NotifyPropertyChanged("MagDipAngleCalc");
            }
        }

        private PlaneAngleMeasure MagDipAngleCalcField; 

        /// <summary>
        /// Calculated total gravitational field.
        /// </summary>
		[Description("Calculated total gravitational field.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LinearAccelerationMeasure")]
		[XmlElement("GravTotalFieldCalc")]
        public LinearAccelerationMeasure GravTotalFieldCalc {
            get {
                return GravTotalFieldCalcField;
            } 
            set {
                GravTotalFieldCalcField = value;
                NotifyPropertyChanged("GravTotalFieldCalc");
            }
        }

        private LinearAccelerationMeasure GravTotalFieldCalcField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the TrajectoryStation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_TrajectoryStation", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the TrajectoryStation xsd type.")]
    public partial class TrajectoryStation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ManuallyEntered property
        /// </summary>
		[Description("Indicates whether the trajectory station information was manually entered by a human.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("ManuallyEntered")]
        public bool? ManuallyEntered {
            get {
                return ManuallyEnteredField;
            } 
            set {
                ManuallyEnteredField = value;
                 this.ManuallyEnteredSpecified = true;
                NotifyPropertyChanged("ManuallyEntered");
            }
        }

        private bool? ManuallyEnteredField; 

        /// <summary>
        /// ManuallyEnteredSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ManuallyEnteredSpecified {
            get {
                return ManuallyEnteredSpecifiedField;
            } 
            set {
                ManuallyEnteredSpecifiedField = value;
                NotifyPropertyChanged("ManuallyEnteredSpecified");
            }
        }

        private bool ManuallyEnteredSpecifiedField; 

        /// <summary>
        /// Target property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the intended target of this station.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Target")]
        public string Target {
            get {
                return TargetField;
            } 
            set {
                TargetField = value;
                NotifyPropertyChanged("Target");
            }
        }

        private string TargetField; 

        /// <summary>
        /// DTimStn property
        /// </summary>
		[Description("Date and time the station was measured or created.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStn")]
        public Timestamp? DateTimeStn {
            get {
                return DTimStnField;
            } 
            set {
                DTimStnField = value;
                 this.DateTimeStnSpecified = true;
                NotifyPropertyChanged("DateTimeStn");
            }
        }

        
        private bool DateTimeStnSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStnSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStnSpecified {
            get {
                return DateTimeStnSpecifiedField;
            } 
            set {
                DateTimeStnSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStnSpecified");
            }
        }
        
        private Timestamp? DTimStnField; 

        /// <summary>
        /// TypeTrajStation property
        /// </summary>
		[Required]
        [Description("Type of survey station.")]
        [EnergisticsDataTypeAttribute(DataType = "TrajStationType")]
		[XmlElement("TypeTrajStation")]
        public TrajStationType? TypeTrajStation {
            get {
                return TypeTrajStationField;
            } 
            set {
                TypeTrajStationField = value;
                 this.TypeTrajStationSpecified = true;
                NotifyPropertyChanged("TypeTrajStation");
            }
        }

        
        private bool TypeTrajStationSpecifiedField = false;
        
        /// <summary>
        /// TypeTrajStationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeTrajStationSpecified {
            get {
                return TypeTrajStationSpecifiedField;
            } 
            set {
                TypeTrajStationSpecifiedField = value;
                NotifyPropertyChanged("TypeTrajStationSpecified");
            }
        }
        
        private TrajStationType? TypeTrajStationField; 

        /// <summary>
        /// TypeSurveyTool property
        /// </summary>
		[Description("The type of tool used for the measurements.")]
        [EnergisticsDataTypeAttribute(DataType = "TypeSurveyTool")]
		[XmlElement("TypeSurveyTool")]
        public TypeSurveyTool? TypeSurveyTool {
            get {
                return TypeSurveyToolField;
            } 
            set {
                TypeSurveyToolField = value;
                 this.TypeSurveyToolSpecified = true;
                NotifyPropertyChanged("TypeSurveyTool");
            }
        }

        private TypeSurveyTool? TypeSurveyToolField; 

        /// <summary>
        /// TypeSurveyToolSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSurveyToolSpecified {
            get {
                return TypeSurveyToolSpecifiedField;
            } 
            set {
                TypeSurveyToolSpecifiedField = value;
                NotifyPropertyChanged("TypeSurveyToolSpecified");
            }
        }

        private bool TypeSurveyToolSpecifiedField; 

        /// <summary>
        /// CalcAlgorithm property
        /// </summary>
		[Description("The type of algorithm used in the position calculation.")]
        [EnergisticsDataTypeAttribute(DataType = "TrajStnCalcAlgorithm")]
		[XmlElement("CalcAlgorithm")]
        public TrajStnCalcAlgorithm? CalcAlgorithm {
            get {
                return CalcAlgorithmField;
            } 
            set {
                CalcAlgorithmField = value;
                 this.CalcAlgorithmSpecified = true;
                NotifyPropertyChanged("CalcAlgorithm");
            }
        }

        private TrajStnCalcAlgorithm? CalcAlgorithmField; 

        /// <summary>
        /// CalcAlgorithmSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CalcAlgorithmSpecified {
            get {
                return CalcAlgorithmSpecifiedField;
            } 
            set {
                CalcAlgorithmSpecifiedField = value;
                NotifyPropertyChanged("CalcAlgorithmSpecified");
            }
        }

        private bool CalcAlgorithmSpecifiedField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Required]
        [Description("Measured depth of measurement from the drill datum. This is an API \"node-index\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("Vertical depth of the measurements.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// Incl property
        /// </summary>
		[Description("Hole inclination, measured from vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Incl")]
        public PlaneAngleMeasure Incl {
            get {
                return InclField;
            } 
            set {
                InclField = value;
                NotifyPropertyChanged("Incl");
            }
        }

        private PlaneAngleMeasure InclField; 

        /// <summary>
        /// Azi property
        /// </summary>
		[Description("Hole azimuth. Corrected to wells azimuth reference.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Azi")]
        public PlaneAngleMeasure Azi {
            get {
                return AziField;
            } 
            set {
                AziField = value;
                NotifyPropertyChanged("Azi");
            }
        }

        private PlaneAngleMeasure AziField; 

        /// <summary>
        /// Mtf property
        /// </summary>
		[Description("Toolface angle (magnetic).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Mtf")]
        public PlaneAngleMeasure Mtf {
            get {
                return MtfField;
            } 
            set {
                MtfField = value;
                NotifyPropertyChanged("Mtf");
            }
        }

        private PlaneAngleMeasure MtfField; 

        /// <summary>
        /// Gtf property
        /// </summary>
		[Description("Toolface angle (gravity).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Gtf")]
        public PlaneAngleMeasure Gtf {
            get {
                return GtfField;
            } 
            set {
                GtfField = value;
                NotifyPropertyChanged("Gtf");
            }
        }

        private PlaneAngleMeasure GtfField; 

        /// <summary>
        /// DispNs property
        /// </summary>
		[Description("North-south offset, positive to the North.  This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DispNs")]
        public LengthMeasure DispNS {
            get {
                return DispNsField;
            } 
            set {
                DispNsField = value;
                NotifyPropertyChanged("DispNS");
            }
        }

        private LengthMeasure DispNsField; 

        /// <summary>
        /// DispEw property
        /// </summary>
		[Description("East-west offset, positive to the East. This is relative to wellLocation with a North axis orientation of aziRef.  If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DispEw")]
        public LengthMeasure DispEW {
            get {
                return DispEwField;
            } 
            set {
                DispEwField = value;
                NotifyPropertyChanged("DispEW");
            }
        }

        private LengthMeasure DispEwField; 

        /// <summary>
        /// VertSect property
        /// </summary>
		[Description("Distance along vertical section azimuth plane.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("VertSect")]
        public LengthMeasure VertSect {
            get {
                return VertSectField;
            } 
            set {
                VertSectField = value;
                NotifyPropertyChanged("VertSect");
            }
        }

        private LengthMeasure VertSectField; 

        /// <summary>
        /// Dls property
        /// </summary>
		[Description("Dogleg severity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerLengthMeasure")]
		[XmlElement("Dls")]
        public AnglePerLengthMeasure DoglegSeverity {
            get {
                return DlsField;
            } 
            set {
                DlsField = value;
                NotifyPropertyChanged("DoglegSeverity");
            }
        }

        private AnglePerLengthMeasure DlsField; 

        /// <summary>
        /// RateTurn property
        /// </summary>
		[Description("Turn rate, radius of curvature computation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerLengthMeasure")]
		[XmlElement("RateTurn")]
        public AnglePerLengthMeasure RateTurn {
            get {
                return RateTurnField;
            } 
            set {
                RateTurnField = value;
                NotifyPropertyChanged("RateTurn");
            }
        }

        private AnglePerLengthMeasure RateTurnField; 

        /// <summary>
        /// RateBuild property
        /// </summary>
		[Description("Build Rate, radius of curvature computation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerLengthMeasure")]
		[XmlElement("RateBuild")]
        public AnglePerLengthMeasure RateBuild {
            get {
                return RateBuildField;
            } 
            set {
                RateBuildField = value;
                NotifyPropertyChanged("RateBuild");
            }
        }

        private AnglePerLengthMeasure RateBuildField; 

        /// <summary>
        /// MdDelta property
        /// </summary>
		[Description("Delta measured depth from previous station.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MdDelta")]
        public LengthMeasure MDDelta {
            get {
                return MdDeltaField;
            } 
            set {
                MdDeltaField = value;
                NotifyPropertyChanged("MDDelta");
            }
        }

        private LengthMeasure MdDeltaField; 

        /// <summary>
        /// TvdDelta property
        /// </summary>
		[Description("Delta true vertical depth from previous station.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("TvdDelta")]
        public LengthMeasure TvdDelta {
            get {
                return TvdDeltaField;
            } 
            set {
                TvdDeltaField = value;
                NotifyPropertyChanged("TvdDelta");
            }
        }

        private LengthMeasure TvdDeltaField; 

        /// <summary>
        /// GravTotalUncert property
        /// </summary>
		[Description("Survey tool gravity uncertainty.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LinearAccelerationMeasure")]
		[XmlElement("GravTotalUncert")]
        public LinearAccelerationMeasure GravTotalUncert {
            get {
                return GravTotalUncertField;
            } 
            set {
                GravTotalUncertField = value;
                NotifyPropertyChanged("GravTotalUncert");
            }
        }

        private LinearAccelerationMeasure GravTotalUncertField; 

        /// <summary>
        /// DipAngleUncert property
        /// </summary>
		[Description("Survey tool dip uncertainty.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("DipAngleUncert")]
        public PlaneAngleMeasure DipAngleUncert {
            get {
                return DipAngleUncertField;
            } 
            set {
                DipAngleUncertField = value;
                NotifyPropertyChanged("DipAngleUncert");
            }
        }

        private PlaneAngleMeasure DipAngleUncertField; 

        /// <summary>
        /// MagTotalUncert property
        /// </summary>
		[Description("Survey tool magnetic uncertainty.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagTotalUncert")]
        public MagneticFluxDensityMeasure MagTotalUncert {
            get {
                return MagTotalUncertField;
            } 
            set {
                MagTotalUncertField = value;
                NotifyPropertyChanged("MagTotalUncert");
            }
        }

        private MagneticFluxDensityMeasure MagTotalUncertField; 

        /// <summary>
        /// GravAccelCorUsed property
        /// </summary>
		[Description("Was an accelerometer alignment correction applied to survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("GravAccelCorUsed")]
        public bool? GravAccelCorUsed {
            get {
                return GravAccelCorUsedField;
            } 
            set {
                GravAccelCorUsedField = value;
                 this.GravAccelCorUsedSpecified = true;
                NotifyPropertyChanged("GravAccelCorUsed");
            }
        }

        private bool? GravAccelCorUsedField; 

        /// <summary>
        /// GravAccelCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GravAccelCorUsedSpecified {
            get {
                return GravAccelCorUsedSpecifiedField;
            } 
            set {
                GravAccelCorUsedSpecifiedField = value;
                NotifyPropertyChanged("GravAccelCorUsedSpecified");
            }
        }

        private bool GravAccelCorUsedSpecifiedField; 

        /// <summary>
        /// MagXAxialCorUsed property
        /// </summary>
		[Description("Was a magnetometer alignment correction applied to survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("MagXAxialCorUsed")]
        public bool? MagXAxialCorUsed {
            get {
                return MagXAxialCorUsedField;
            } 
            set {
                MagXAxialCorUsedField = value;
                 this.MagXAxialCorUsedSpecified = true;
                NotifyPropertyChanged("MagXAxialCorUsed");
            }
        }

        private bool? MagXAxialCorUsedField; 

        /// <summary>
        /// MagXAxialCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MagXAxialCorUsedSpecified {
            get {
                return MagXAxialCorUsedSpecifiedField;
            } 
            set {
                MagXAxialCorUsedSpecifiedField = value;
                NotifyPropertyChanged("MagXAxialCorUsedSpecified");
            }
        }

        private bool MagXAxialCorUsedSpecifiedField; 

        /// <summary>
        /// SagCorUsed property
        /// </summary>
		[Description("Was a bottom hole assembly sag correction applied to the survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("SagCorUsed")]
        public bool? SagCorUsed {
            get {
                return SagCorUsedField;
            } 
            set {
                SagCorUsedField = value;
                 this.SagCorUsedSpecified = true;
                NotifyPropertyChanged("SagCorUsed");
            }
        }

        private bool? SagCorUsedField; 

        /// <summary>
        /// SagCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SagCorUsedSpecified {
            get {
                return SagCorUsedSpecifiedField;
            } 
            set {
                SagCorUsedSpecifiedField = value;
                NotifyPropertyChanged("SagCorUsedSpecified");
            }
        }

        private bool SagCorUsedSpecifiedField; 

        /// <summary>
        /// MagDrlstrCorUsed property
        /// </summary>
		[Description("Was a drillstring magnetism correction applied to survey computation?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("MagDrlstrCorUsed")]
        public bool? MagDrlstrCorUsed {
            get {
                return MagDrlstrCorUsedField;
            } 
            set {
                MagDrlstrCorUsedField = value;
                 this.MagDrlstrCorUsedSpecified = true;
                NotifyPropertyChanged("MagDrlstrCorUsed");
            }
        }

        private bool? MagDrlstrCorUsedField; 

        /// <summary>
        /// MagDrlstrCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MagDrlstrCorUsedSpecified {
            get {
                return MagDrlstrCorUsedSpecifiedField;
            } 
            set {
                MagDrlstrCorUsedSpecifiedField = value;
                NotifyPropertyChanged("MagDrlstrCorUsedSpecified");
            }
        }

        private bool MagDrlstrCorUsedSpecifiedField; 

        /// <summary>
        /// InfieldRefCorUsed property
        /// </summary>
		[Description("Was an In Field Referencing (IFR) correction applied to the azimuth value?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). An IFR survey measures the strength and direction of the Earth's magnetic field over the area of interest.  By taking a geomagnetic modelled values away  from these field survey results, we are left with a local crustal correction,  which since it is assumed geological in nature, only varies over geological timescales.   For MWD survey operations, these corrections are applied in addition to the geomagnetic model  to provide accurate knowledge of the local magnetic field and hence to improve the  accuracy of MWD magnetic azimuth measurements.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("InfieldRefCorUsed")]
        public bool? InfieldRefCorUsed {
            get {
                return InfieldRefCorUsedField;
            } 
            set {
                InfieldRefCorUsedField = value;
                 this.InfieldRefCorUsedSpecified = true;
                NotifyPropertyChanged("InfieldRefCorUsed");
            }
        }

        private bool? InfieldRefCorUsedField; 

        /// <summary>
        /// InfieldRefCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InfieldRefCorUsedSpecified {
            get {
                return InfieldRefCorUsedSpecifiedField;
            } 
            set {
                InfieldRefCorUsedSpecifiedField = value;
                NotifyPropertyChanged("InfieldRefCorUsedSpecified");
            }
        }

        private bool InfieldRefCorUsedSpecifiedField; 

        /// <summary>
        /// InterpolatedInfieldRefCorUsed property
        /// </summary>
		[Description("Was an Interpolated In Field Referencing (IIFR) correction applied to the azimuth value?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). Interpolated In Field Referencing measures the diurnal Earth magnetic field variations resulting from electrical  currents in the ionosphere and effects of magnetic storms hitting the Earth. It increases again the accuracy  of the magnetic azimuth measurement.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("InterpolatedInfieldRefCorUsed")]
        public bool? InterpolatedInfieldRefCorUsed {
            get {
                return InterpolatedInfieldRefCorUsedField;
            } 
            set {
                InterpolatedInfieldRefCorUsedField = value;
                 this.InterpolatedInfieldRefCorUsedSpecified = true;
                NotifyPropertyChanged("InterpolatedInfieldRefCorUsed");
            }
        }

        private bool? InterpolatedInfieldRefCorUsedField; 

        /// <summary>
        /// InterpolatedInfieldRefCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InterpolatedInfieldRefCorUsedSpecified {
            get {
                return InterpolatedInfieldRefCorUsedSpecifiedField;
            } 
            set {
                InterpolatedInfieldRefCorUsedSpecifiedField = value;
                NotifyPropertyChanged("InterpolatedInfieldRefCorUsedSpecified");
            }
        }

        private bool InterpolatedInfieldRefCorUsedSpecifiedField; 

        /// <summary>
        /// InHoleRefCorUsed property
        /// </summary>
		[Description("Was an In Hole Referencing (IHR) correction applied to the inclination and/or azimuth values?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). In-Hole Referencing essentially involves comparing gyro surveys to MWD surveys in a tangent  section of a well. Once a small part of a tangent section has been drilled and surveyed using an  MWD tool, then an open hole (OH) gyro is run. By comparing the Gyro surveys to the MWD  surveys a correction can be calculated for the MWD. This correction is then assumed as valid  for the rest of the tangent section allowing to have a near gyro accuracy for the whole section,  therefore reducing the ellipse of uncertainty (EOU) size.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("InHoleRefCorUsed")]
        public bool? InHoleRefCorUsed {
            get {
                return InHoleRefCorUsedField;
            } 
            set {
                InHoleRefCorUsedField = value;
                 this.InHoleRefCorUsedSpecified = true;
                NotifyPropertyChanged("InHoleRefCorUsed");
            }
        }

        private bool? InHoleRefCorUsedField; 

        /// <summary>
        /// InHoleRefCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InHoleRefCorUsedSpecified {
            get {
                return InHoleRefCorUsedSpecifiedField;
            } 
            set {
                InHoleRefCorUsedSpecifiedField = value;
                NotifyPropertyChanged("InHoleRefCorUsedSpecified");
            }
        }

        private bool InHoleRefCorUsedSpecifiedField; 

        /// <summary>
        /// AxialMagInterferenceCorUsed property
        /// </summary>
		[Description("Was an Axial Magnetic Interference (AMI) correction applied to the azimuth value?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). Most of the BHAs used to drill wells include an MWD tool. An MWD is a magnetic survey tool and as  such suffer from magnetic interferences from a wide variety of sources. Magnetic interferences can be  categorized into axial and radial type interferences.  Axial interferences are mainly the result of magnetic poles from the drill string steel components  located below and above the MWD tool. Radial interferences are numerous.  Therefore, there is a risk that magXAxialCorUsed includes both Axial and radial corrections.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("AxialMagInterferenceCorUsed")]
        public bool? AxialMagInterferenceCorUsed {
            get {
                return AxialMagInterferenceCorUsedField;
            } 
            set {
                AxialMagInterferenceCorUsedField = value;
                 this.AxialMagInterferenceCorUsedSpecified = true;
                NotifyPropertyChanged("AxialMagInterferenceCorUsed");
            }
        }

        private bool? AxialMagInterferenceCorUsedField; 

        /// <summary>
        /// AxialMagInterferenceCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AxialMagInterferenceCorUsedSpecified {
            get {
                return AxialMagInterferenceCorUsedSpecifiedField;
            } 
            set {
                AxialMagInterferenceCorUsedSpecifiedField = value;
                NotifyPropertyChanged("AxialMagInterferenceCorUsedSpecified");
            }
        }

        private bool AxialMagInterferenceCorUsedSpecifiedField; 

        /// <summary>
        /// CosagCorUsed property
        /// </summary>
		[Description("WWas a Cosag Correction applied to the azimuth values?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). The BHA Sag Correction is the same as the Sag Correction except it includes the horizontal  misalignment (Cosag).")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CosagCorUsed")]
        public bool? CosagCorUsed {
            get {
                return CosagCorUsedField;
            } 
            set {
                CosagCorUsedField = value;
                 this.CosagCorUsedSpecified = true;
                NotifyPropertyChanged("CosagCorUsed");
            }
        }

        private bool? CosagCorUsedField; 

        /// <summary>
        /// CosagCorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CosagCorUsedSpecified {
            get {
                return CosagCorUsedSpecifiedField;
            } 
            set {
                CosagCorUsedSpecifiedField = value;
                NotifyPropertyChanged("CosagCorUsedSpecified");
            }
        }

        private bool CosagCorUsedSpecifiedField; 

        /// <summary>
        /// MSACorUsed property
        /// </summary>
		[Description("Was a correction applied to the survey due to a  Multi-Station Analysis process?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("MSACorUsed")]
        public bool? MSACorUsed {
            get {
                return MSACorUsedField;
            } 
            set {
                MSACorUsedField = value;
                 this.MSACorUsedSpecified = true;
                NotifyPropertyChanged("MSACorUsed");
            }
        }

        private bool? MSACorUsedField; 

        /// <summary>
        /// MSACorUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MSACorUsedSpecified {
            get {
                return MSACorUsedSpecifiedField;
            } 
            set {
                MSACorUsedSpecifiedField = value;
                NotifyPropertyChanged("MSACorUsedSpecified");
            }
        }

        private bool MSACorUsedSpecifiedField; 

        /// <summary>
        /// GravTotalFieldReference property
        /// </summary>
		[Description("Gravitational field theoretical/reference value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LinearAccelerationMeasure")]
		[XmlElement("GravTotalFieldReference")]
        public LinearAccelerationMeasure GravTotalFieldReference {
            get {
                return GravTotalFieldReferenceField;
            } 
            set {
                GravTotalFieldReferenceField = value;
                NotifyPropertyChanged("GravTotalFieldReference");
            }
        }

        private LinearAccelerationMeasure GravTotalFieldReferenceField; 

        /// <summary>
        /// MagTotalFieldReference property
        /// </summary>
		[Description("Geomagnetic field theoretical/reference value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MagneticFluxDensityMeasure")]
		[XmlElement("MagTotalFieldReference")]
        public MagneticFluxDensityMeasure MagTotalFieldReference {
            get {
                return MagTotalFieldReferenceField;
            } 
            set {
                MagTotalFieldReferenceField = value;
                NotifyPropertyChanged("MagTotalFieldReference");
            }
        }

        private MagneticFluxDensityMeasure MagTotalFieldReferenceField; 

        /// <summary>
        /// MagDipAngleReference property
        /// </summary>
		[Description("Magnetic dip angle theoretical/reference value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("MagDipAngleReference")]
        public PlaneAngleMeasure MagDipAngleReference {
            get {
                return MagDipAngleReferenceField;
            } 
            set {
                MagDipAngleReferenceField = value;
                NotifyPropertyChanged("MagDipAngleReference");
            }
        }

        private PlaneAngleMeasure MagDipAngleReferenceField; 

        /// <summary>
        /// MagModelUsed property
        /// </summary>
		[StringLength(64)]
        [Description("Geomagnetic model used.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MagModelUsed")]
        public string MagModelUsed {
            get {
                return MagModelUsedField;
            } 
            set {
                MagModelUsedField = value;
                NotifyPropertyChanged("MagModelUsed");
            }
        }

        private string MagModelUsedField; 

        /// <summary>
        /// MagModelValid property
        /// </summary>
		[StringLength(64)]
        [Description("Current valid interval for the geomagnetic model used.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MagModelValid")]
        public string MagModelValid {
            get {
                return MagModelValidField;
            } 
            set {
                MagModelValidField = value;
                NotifyPropertyChanged("MagModelValid");
            }
        }

        private string MagModelValidField; 

        /// <summary>
        /// GeoModelUsed property
        /// </summary>
		[StringLength(64)]
        [Description("Gravitational model used.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("GeoModelUsed")]
        public string GeoModelUsed {
            get {
                return GeoModelUsedField;
            } 
            set {
                GeoModelUsedField = value;
                NotifyPropertyChanged("GeoModelUsed");
            }
        }

        private string GeoModelUsedField; 

        /// <summary>
        /// StatusTrajStation property
        /// </summary>
		[Description("Status of the station.")]
        [EnergisticsDataTypeAttribute(DataType = "TrajStationStatus")]
		[XmlElement("StatusTrajStation")]
        public TrajStationStatus? StatusTrajStation {
            get {
                return StatusTrajStationField;
            } 
            set {
                StatusTrajStationField = value;
                 this.StatusTrajStationSpecified = true;
                NotifyPropertyChanged("StatusTrajStation");
            }
        }

        private TrajStationStatus? StatusTrajStationField; 

        /// <summary>
        /// StatusTrajStationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusTrajStationSpecified {
            get {
                return StatusTrajStationSpecifiedField;
            } 
            set {
                StatusTrajStationSpecifiedField = value;
                NotifyPropertyChanged("StatusTrajStationSpecified");
            }
        }

        private bool StatusTrajStationSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Valid property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StnTrajValid")]
		[XmlElement("Valid")]
        public StnTrajValid Valid {
            get {
                return ValidField;
            } 
            set {
                ValidField = value;
                NotifyPropertyChanged("Valid");
            }
        }

        private StnTrajValid ValidField; 

        /// <summary>
        /// MatrixCov property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StnTrajMatrixCov")]
		[XmlElement("MatrixCov")]
        public StnTrajMatrixCov MatrixCov {
            get {
                return MatrixCovField;
            } 
            set {
                MatrixCovField = value;
                NotifyPropertyChanged("MatrixCov");
            }
        }

        private StnTrajMatrixCov MatrixCovField; 

        /// <summary>
        /// Location property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractWellLocation")]
		[XmlElement("Location")]
        public List<AbstractWellLocation> Location {
            get {
                return LocationField;
            } 
            set {
                LocationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         /// <summary>
         /// bool to indicate if Location has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LocationSpecified
         {
             get {
             if(LocationField!=null)
                 return LocationField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractWellLocation> LocationField; 

        /// <summary>
        /// SourceStation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RefWellboreTrajectoryStation")]
		[XmlElement("SourceStation")]
        public RefWellboreTrajectoryStation SourceStation {
            get {
                return SourceStationField;
            } 
            set {
                SourceStationField = value;
                NotifyPropertyChanged("SourceStation");
            }
        }

        private RefWellboreTrajectoryStation SourceStationField; 

        /// <summary>
        /// RawData property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StnTrajRawData")]
		[XmlElement("RawData")]
        public StnTrajRawData RawData {
            get {
                return RawDataField;
            } 
            set {
                RawDataField = value;
                NotifyPropertyChanged("RawData");
            }
        }

        private StnTrajRawData RawDataField; 

        /// <summary>
        /// CorUsed property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StnTrajCorUsed")]
		[XmlElement("CorUsed")]
        public StnTrajCorUsed CorUsed {
            get {
                return CorUsedField;
            } 
            set {
                CorUsedField = value;
                NotifyPropertyChanged("CorUsed");
            }
        }

        private StnTrajCorUsed CorUsedField; 

        /// <summary>
        /// IscwsaToolErrorModel property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("IscwsaToolErrorModel")]
        public DataObjectReference IscwsaToolErrorModel {
            get {
                return IscwsaToolErrorModelField;
            } 
            set {
                IscwsaToolErrorModelField = value;
                NotifyPropertyChanged("IscwsaToolErrorModel");
            }
        }

        private DataObjectReference IscwsaToolErrorModelField; 

		/// <summary>
        /// A unique identifier for an instance of a trajectory station.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for an instance of a trajectory station.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AnglePerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AnglePerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AnglePerLengthMeasure xsd type.")]
    public partial class AnglePerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AnglePerLengthMeasure class.
        /// </summary>
        public AnglePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AnglePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AnglePerLengthMeasure(double value, AnglePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerLengthUom")]
        [XmlAttribute("uom")]
		
        public AnglePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AnglePerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractWellLocation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedWellLocation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticWellLocation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractWellLocation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractWellLocation xsd type.")]
    public abstract partial class AbstractWellLocation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Flag indicating (if that Is this pair of values the original data given for the location? Values are "true" or "1". Or, if the pair of values was calculated from an original pair of values, set to "false" (or "0") or leave blank. 
        /// </summary>
		[Description("Flag indicating (if that Is this pair of values the original data given for the location? Values are \"true\" or \"1\". Or, if the pair of values was calculated from an original pair of values, set to \"false\" (or \"0\") or leave blank.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Original")]
        public bool? Original {
            get {
                return OriginalField;
            } 
            set {
                OriginalField = value;
                 this.OriginalSpecified = true;
                NotifyPropertyChanged("Original");
            }
        }

        private bool? OriginalField; 

        /// <summary>
        /// OriginalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OriginalSpecified {
            get {
                return OriginalSpecifiedField;
            } 
            set {
                OriginalSpecifiedField = value;
                NotifyPropertyChanged("OriginalSpecified");
            }
        }

        private bool OriginalSpecifiedField; 

        /// <summary>
        /// A comment, generally given to help the reader interpret the coordinates if the CRS and the chosen pair do not make them clear.
        /// </summary>
		[StringLength(2000)]
        [Description("A comment, generally given to help the reader interpret the coordinates if the CRS and the chosen pair do not make them clear.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// A unique identifier for a well location.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for a well location.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedWellLocation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedWellLocation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ProjectedWellLocation xsd type.")]
    public partial class ProjectedWellLocation : AbstractWellLocation, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Coordinate1 property
        /// </summary>
		[Required]
        [Description("The first coordinate based on a projected coordinate reference system.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Coordinate1")]
        public double? Coordinate1 {
            get {
                return Coordinate1Field;
            } 
            set {
                Coordinate1Field = value;
                NotifyPropertyChanged("Coordinate1");
            }
        }

        private double? Coordinate1Field; 

        /// <summary>
        /// Coordinate2 property
        /// </summary>
		[Required]
        [Description("The second coordinate based on a projected coordinate reference system.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Coordinate2")]
        public double? Coordinate2 {
            get {
                return Coordinate2Field;
            } 
            set {
                Coordinate2Field = value;
                NotifyPropertyChanged("Coordinate2");
            }
        }

        private double? Coordinate2Field; 

        /// <summary>
        /// Crs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProjectedCrs")]
		[XmlElement("Crs")]
        public AbstractProjectedCrs Crs {
            get {
                return CrsField;
            } 
            set {
                CrsField = value;
                NotifyPropertyChanged("Crs");
            }
        }

        private AbstractProjectedCrs CrsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractProjectedCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedEpsgCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractProjectedCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractProjectedCrs xsd type.")]
    public abstract partial class AbstractProjectedCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedLocalAuthorityCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedLocalAuthorityCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedLocalAuthorityCrs xsd type.")]
    public partial class ProjectedLocalAuthorityCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// LocalAuthorityCrsName property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AuthorityQualifiedName")]
		[XmlElement("LocalAuthorityCrsName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return LocalAuthorityCrsNameField;
            } 
            set {
                LocalAuthorityCrsNameField = value;
                NotifyPropertyChanged("LocalAuthorityCrsName");
            }
        }

        private AuthorityQualifiedName LocalAuthorityCrsNameField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AuthorityQualifiedName xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AuthorityQualifiedName", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AuthorityQualifiedName xsd type.")]
    public partial class AuthorityQualifiedName : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AuthorityQualifiedName class.
        /// </summary>
        public AuthorityQualifiedName() {}

        /// <summary>
        /// Initializes a new instance of the AuthorityQualifiedName class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public AuthorityQualifiedName(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// authority property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("authority")]
		
        public string Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string authorityField; 

		/// <summary>
        /// code property
        /// </summary>
		[StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("code")]
		
        public string Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private string codeField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedGmlCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedGmlCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedGmlCrs xsd type.")]
    public partial class ProjectedGmlCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlProjectedCrsDefinition property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ProjectedCRSType")]
		[XmlElement("GmlProjectedCrsDefinition")]
        public ProjectedCRSType GmlProjectedCrsDefinition {
            get {
                return GmlProjectedCrsDefinitionField;
            } 
            set {
                GmlProjectedCrsDefinitionField = value;
                NotifyPropertyChanged("GmlProjectedCrsDefinition");
            }
        }

        private ProjectedCRSType GmlProjectedCrsDefinitionField; 


    } //here
    }

    /// <summary>
    /// This class represents the ProjectedCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the ProjectedCRSType xsd type.")]
    public partial class ProjectedCRSType : AbstractGeneralDerivedCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// Item property
        /// </summary>
		[ComponentElement]
		[XmlElement("baseGeodeticCRS")]
        public GeodeticCRSPropertyType Item {
            get {
                return ItemField;
            } 
            set {
                ItemField = value;
                NotifyPropertyChanged("Item");
            }
        }

        private GeodeticCRSPropertyType ItemField; 

        /// <summary>
        /// cartesianCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("cartesianCS")]
        public CartesianCSPropertyType CartesianCS {
            get {
                return cartesianCSField;
            } 
            set {
                cartesianCSField = value;
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSPropertyType cartesianCSField; 


    } //here

    /// <summary>
    /// This class represents the GeodeticCRSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("baseGeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticCRSPropertyType xsd type.")]
    public partial class GeodeticCRSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GeodeticCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("GeodeticCRS")]
        public GeodeticCRSType GeodeticCRS {
            get {
                return GeodeticCRSField;
            } 
            set {
                GeodeticCRSField = value;
                NotifyPropertyChanged("GeodeticCRS");
            }
        }

        private GeodeticCRSType GeodeticCRSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the GeodeticCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticCRSType xsd type.")]
    public partial class GeodeticCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// cartesianCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("cartesianCS")]
        public CartesianCSPropertyType CartesianCS {
            get {
                return cartesianCSField;
            } 
            set {
                cartesianCSField = value;
                CartesianCSSpecified = (value!=null);
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSPropertyType cartesianCSField; 
        private bool cartesianCSSpecified = false; 

        /// <summary>
        /// bool to indicate if CartesianCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CartesianCSSpecified
        {
            get {
                return cartesianCSSpecified;
            }
            set {
                cartesianCSSpecified= value;
            }
        }

        /// <summary>
        /// ellipsoidalCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("ellipsoidalCS")]
        public EllipsoidalCSPropertyType EllipsoidalCS {
            get {
                return ellipsoidalCSField;
            } 
            set {
                ellipsoidalCSField = value;
                EllipsoidalCSSpecified = (value!=null);
                NotifyPropertyChanged("EllipsoidalCS");
            }
        }

        private EllipsoidalCSPropertyType ellipsoidalCSField; 
        private bool ellipsoidalCSSpecified = false; 

        /// <summary>
        /// bool to indicate if EllipsoidalCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool EllipsoidalCSSpecified
        {
            get {
                return ellipsoidalCSSpecified;
            }
            set {
                ellipsoidalCSSpecified= value;
            }
        }

        /// <summary>
        /// sphericalCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("sphericalCS")]
        public SphericalCSPropertyType SphericalCS {
            get {
                return sphericalCSField;
            } 
            set {
                sphericalCSField = value;
                SphericalCSSpecified = (value!=null);
                NotifyPropertyChanged("SphericalCS");
            }
        }

        private SphericalCSPropertyType sphericalCSField; 
        private bool sphericalCSSpecified = false; 

        /// <summary>
        /// bool to indicate if SphericalCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SphericalCSSpecified
        {
            get {
                return sphericalCSSpecified;
            }
            set {
                sphericalCSSpecified= value;
            }
        }


        /// <summary>
        /// geodeticDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("geodeticDatum")]
        public GeodeticDatumPropertyType GeodeticDatum {
            get {
                return geodeticDatumField;
            } 
            set {
                geodeticDatumField = value;
                NotifyPropertyChanged("GeodeticDatum");
            }
        }

        private GeodeticDatumPropertyType geodeticDatumField; 


    } //here

    /// <summary>
    /// This class represents the CartesianCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("cartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CartesianCSPropertyType xsd type.")]
    public partial class CartesianCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CartesianCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("CartesianCS")]
        public CartesianCSType CartesianCS {
            get {
                return CartesianCSField;
            } 
            set {
                CartesianCSField = value;
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSType CartesianCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CartesianCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CartesianCSType xsd type.")]
    public partial class CartesianCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractCoordinateSystemType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCoordinateSystem", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCoordinateSystemType xsd type.")]
    public abstract partial class AbstractCoordinateSystemType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// axis property
        /// </summary>
		[RecurringElement]
		[XmlElement("axis")]
        public List<CoordinateSystemAxisPropertyType> Axis {
            get {
                return axisField;
            } 
            set {
                axisField = value;
                NotifyPropertyChanged("Axis");
            }
        }

         /// <summary>
         /// bool to indicate if Axis has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AxisSpecified
         {
             get {
             if(axisField!=null)
                 return axisField.Count>0?true:false;
             else return false;
             }
         }
        private List<CoordinateSystemAxisPropertyType> axisField; 

		/// <summary>
        /// aggregationType property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AggregationType")]
        [XmlAttribute("aggregationType")]
		
        public AggregationType AggregationType {
            get {
                return aggregationTypeField;
            } 
            set {
                aggregationTypeField = value;
                 this.AggregationTypeSpecified = true;
                NotifyPropertyChanged("AggregationType");
            }
        }

        private AggregationType aggregationTypeField; 

        /// <summary>
        /// aggregationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AggregationTypeSpecified {
            get {
                return aggregationTypeSpecifiedField;
            } 
            set {
                aggregationTypeSpecifiedField = value;
                NotifyPropertyChanged("AggregationTypeSpecified");
            }
        }

        private bool aggregationTypeSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the CoordinateSystemAxisPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("axis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CoordinateSystemAxisPropertyType xsd type.")]
    public partial class CoordinateSystemAxisPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CoordinateSystemAxis property
        /// </summary>
		[ComponentElement]
		[XmlElement("CoordinateSystemAxis")]
        public CoordinateSystemAxisType CoordinateSystemAxis {
            get {
                return CoordinateSystemAxisField;
            } 
            set {
                CoordinateSystemAxisField = value;
                NotifyPropertyChanged("CoordinateSystemAxis");
            }
        }

        private CoordinateSystemAxisType CoordinateSystemAxisField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CoordinateSystemAxisType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CoordinateSystemAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CoordinateSystemAxisType xsd type.")]
    public partial class CoordinateSystemAxisType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// axisAbbrev property
        /// </summary>
		[ComponentElement]
		[XmlElement("axisAbbrev")]
        public CodeType AxisAbbrev {
            get {
                return axisAbbrevField;
            } 
            set {
                axisAbbrevField = value;
                NotifyPropertyChanged("AxisAbbrev");
            }
        }

        private CodeType axisAbbrevField; 

        /// <summary>
        /// axisDirection property
        /// </summary>
		[ComponentElement]
		[XmlElement("axisDirection")]
        public CodeWithAuthorityType AxisDirection {
            get {
                return axisDirectionField;
            } 
            set {
                axisDirectionField = value;
                NotifyPropertyChanged("AxisDirection");
            }
        }

        private CodeWithAuthorityType axisDirectionField; 

        /// <summary>
        /// minimumValue property
        /// </summary>
		
		[XmlElement("minimumValue")]
        public double? MinimumValue {
            get {
                return minimumValueField;
            } 
            set {
                minimumValueField = value;
                 this.MinimumValueSpecified = true;
                NotifyPropertyChanged("MinimumValue");
            }
        }

        private double? minimumValueField; 

        /// <summary>
        /// minimumValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MinimumValueSpecified {
            get {
                return minimumValueSpecifiedField;
            } 
            set {
                minimumValueSpecifiedField = value;
                NotifyPropertyChanged("MinimumValueSpecified");
            }
        }

        private bool minimumValueSpecifiedField; 

        /// <summary>
        /// maximumValue property
        /// </summary>
		
		[XmlElement("maximumValue")]
        public double? MaximumValue {
            get {
                return maximumValueField;
            } 
            set {
                maximumValueField = value;
                 this.MaximumValueSpecified = true;
                NotifyPropertyChanged("MaximumValue");
            }
        }

        private double? maximumValueField; 

        /// <summary>
        /// maximumValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaximumValueSpecified {
            get {
                return maximumValueSpecifiedField;
            } 
            set {
                maximumValueSpecifiedField = value;
                NotifyPropertyChanged("MaximumValueSpecified");
            }
        }

        private bool maximumValueSpecifiedField; 

        /// <summary>
        /// rangeMeaning property
        /// </summary>
		[ComponentElement]
		[XmlElement("rangeMeaning")]
        public CodeWithAuthorityType RangeMeaning {
            get {
                return rangeMeaningField;
            } 
            set {
                rangeMeaningField = value;
                NotifyPropertyChanged("RangeMeaning");
            }
        }

        private CodeWithAuthorityType rangeMeaningField; 


    } //here

    /// <summary>
    /// This class represents the CodeType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CodeWithAuthorityType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("name", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CodeType xsd type.")]
    public partial class CodeType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeType class.
        /// </summary>
        public CodeType() {}

        /// <summary>
        /// Initializes a new instance of the CodeType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// codeSpace property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeSpace")]
		
        public string CodeSpace {
            get {
                return codeSpaceField;
            } 
            set {
                codeSpaceField = value;
                NotifyPropertyChanged("CodeSpace");
            }
        }

        private string codeSpaceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CodeWithAuthorityType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("identifier", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CodeWithAuthorityType xsd type.")]
    public partial class CodeWithAuthorityType : CodeType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeWithAuthorityType class.
        /// </summary>
        public CodeWithAuthorityType() {}

        /// <summary>
        /// Initializes a new instance of the CodeWithAuthorityType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeWithAuthorityType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IdentifiedObjectType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IdentifiedObjectType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the IdentifiedObjectType xsd type.")]
    public abstract partial class IdentifiedObjectType : DefinitionType, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the DefinitionType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Definition", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the DefinitionType xsd type.")]
    public partial class DefinitionType : DefinitionBaseType, INotifyPropertyChanged
    {

        /// <summary>
        /// remarks property
        /// </summary>
		
		[XmlElement("remarks")]
        public string Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private string remarksField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DefinitionBaseType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DefinitionBaseType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the DefinitionBaseType xsd type.")]
    public partial class DefinitionBaseType : AbstractGMLType, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the AbstractGMLType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimeObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionBaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGML", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGMLType xsd type.")]
    public abstract partial class AbstractGMLType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
		[XmlElement("description")]
        public StringOrRefType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private StringOrRefType descriptionField; 

        /// <summary>
        /// descriptionReference property
        /// </summary>
		[ComponentElement]
		[XmlElement("descriptionReference")]
        public ReferenceType DescriptionReference {
            get {
                return descriptionReferenceField;
            } 
            set {
                descriptionReferenceField = value;
                NotifyPropertyChanged("DescriptionReference");
            }
        }

        private ReferenceType descriptionReferenceField; 

        /// <summary>
        /// identifier property
        /// </summary>
		[ComponentElement]
		[XmlElement("identifier")]
        public CodeWithAuthorityType Identifier {
            get {
                return identifierField;
            } 
            set {
                identifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

        private CodeWithAuthorityType identifierField; 

        /// <summary>
        /// name property
        /// </summary>
		[RecurringElement]
		[XmlElement("name")]
        public List<CodeType> Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

         /// <summary>
         /// bool to indicate if Name has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameSpecified
         {
             get {
             if(nameField!=null)
                 return nameField.Count>0?true:false;
             else return false;
             }
         }
        private List<CodeType> nameField; 

		/// <summary>
        /// id property
        /// </summary>
		
        [XmlAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private string idField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the StringOrRefType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("description", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the StringOrRefType xsd type.")]
    public partial class StringOrRefType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringOrRefType class.
        /// </summary>
        public StringOrRefType() {}

        /// <summary>
        /// Initializes a new instance of the StringOrRefType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public StringOrRefType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the ReferenceType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("descriptionReference", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the ReferenceType xsd type.")]
    public partial class ReferenceType : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// owns property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "boolean")]
        [XmlAttribute("owns")]
		
        public bool Owns {
            get {
                return ownsField;
            } 
            set {
                ownsField = value;
                NotifyPropertyChanged("Owns");
            }
        }

        private bool ownsField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractTimeObjectType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimeObject", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractTimeObjectType xsd type.")]
    public abstract partial class AbstractTimeObjectType : AbstractGMLType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractTimePrimitiveType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractTimePrimitiveType xsd type.")]
    public abstract partial class AbstractTimePrimitiveType : AbstractTimeObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// relatedTime property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "RelatedTimeType")]
		[XmlElement("relatedTime")]
        public List<RelatedTimeType> RelatedTime {
            get {
                return relatedTimeField;
            } 
            set {
                relatedTimeField = value;
                NotifyPropertyChanged("RelatedTime");
            }
        }

         /// <summary>
         /// bool to indicate if RelatedTime has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RelatedTimeSpecified
         {
             get {
             if(relatedTimeField!=null)
                 return relatedTimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<RelatedTimeType> relatedTimeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RelatedTimeType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RelatedTimeType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the RelatedTimeType xsd type.")]
    public partial class RelatedTimeType : TimePrimitivePropertyType, INotifyPropertyChanged
    {

		/// <summary>
        /// relativePosition property
        /// </summary>
		
        [XmlAttribute("relativePosition")]
		
        public RelatedTimeTypeRelativePosition RelativePosition {
            get {
                return relativePositionField;
            } 
            set {
                relativePositionField = value;
                 this.RelativePositionSpecified = true;
                NotifyPropertyChanged("RelativePosition");
            }
        }

        private RelatedTimeTypeRelativePosition relativePositionField; 

        /// <summary>
        /// relativePositionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RelativePositionSpecified {
            get {
                return relativePositionSpecifiedField;
            } 
            set {
                relativePositionSpecifiedField = value;
                NotifyPropertyChanged("RelativePositionSpecified");
            }
        }

        private bool relativePositionSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimePrimitivePropertyType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelatedTimeType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimePrimitivePropertyType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the TimePrimitivePropertyType xsd type.")]
    public partial class TimePrimitivePropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractTimePrimitive property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractTimePrimitive")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return AbstractTimePrimitiveField;
            } 
            set {
                AbstractTimePrimitiveField = value;
                NotifyPropertyChanged("AbstractTimePrimitive");
            }
        }

        private AbstractTimePrimitiveType AbstractTimePrimitiveField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 

		/// <summary>
        /// owns property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "boolean")]
        [XmlAttribute("owns")]
		
        public bool Owns {
            get {
                return ownsField;
            } 
            set {
                ownsField = value;
                NotifyPropertyChanged("Owns");
            }
        }

        private bool ownsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractCoordinateOperationType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractOperation", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCoordinateOperationType xsd type.")]
    public abstract partial class AbstractCoordinateOperationType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[ComponentElement]
		[XmlElement("domainOfValidity")]
        public DomainOfValidity DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

        private DomainOfValidity domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 

        /// <summary>
        /// operationVersion property
        /// </summary>
		
		[XmlElement("operationVersion")]
        public string OperationVersion {
            get {
                return operationVersionField;
            } 
            set {
                operationVersionField = value;
                NotifyPropertyChanged("OperationVersion");
            }
        }

        private string operationVersionField; 

        /// <summary>
        /// coordinateOperationAccuracy property
        /// </summary>
		[RecurringElement]
		[XmlElement("coordinateOperationAccuracy")]
        public List<CoordinateOperationAccuracy> CoordinateOperationAccuracy {
            get {
                return coordinateOperationAccuracyField;
            } 
            set {
                coordinateOperationAccuracyField = value;
                NotifyPropertyChanged("CoordinateOperationAccuracy");
            }
        }

         /// <summary>
         /// bool to indicate if CoordinateOperationAccuracy has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CoordinateOperationAccuracySpecified
         {
             get {
             if(coordinateOperationAccuracyField!=null)
                 return coordinateOperationAccuracyField.Count>0?true:false;
             else return false;
             }
         }
        private List<CoordinateOperationAccuracy> coordinateOperationAccuracyField; 

        /// <summary>
        /// sourceCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("sourceCRS")]
        public CRSPropertyType SourceCRS {
            get {
                return sourceCRSField;
            } 
            set {
                sourceCRSField = value;
                NotifyPropertyChanged("SourceCRS");
            }
        }

        private CRSPropertyType sourceCRSField; 

        /// <summary>
        /// targetCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("targetCRS")]
        public CRSPropertyType TargetCRS {
            get {
                return targetCRSField;
            } 
            set {
                targetCRSField = value;
                NotifyPropertyChanged("TargetCRS");
            }
        }

        private CRSPropertyType targetCRSField; 


    } //here

    /// <summary>
    /// This class represents the domainOfValidity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the domainOfValidity xsd type.")]
    public partial class DomainOfValidity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_Extent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd")]
        public EX_Extent_Type EX_Extent {
            get {
                return EX_ExtentField;
            } 
            set {
                EX_ExtentField = value;
                NotifyPropertyChanged("EX_Extent");
            }
        }

        private EX_Extent_Type EX_ExtentField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EX_Extent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_Extent_Type xsd type.")]
    public partial class EX_Extent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("description")]
        public CharacterString_PropertyType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private CharacterString_PropertyType descriptionField; 

        /// <summary>
        /// geographicElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_GeographicExtent_PropertyType")]
		[XmlElement("geographicElement")]
        public List<EX_GeographicExtent_PropertyType> GeographicElement {
            get {
                return geographicElementField;
            } 
            set {
                geographicElementField = value;
                NotifyPropertyChanged("GeographicElement");
            }
        }

         /// <summary>
         /// bool to indicate if GeographicElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeographicElementSpecified
         {
             get {
             if(geographicElementField!=null)
                 return geographicElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_GeographicExtent_PropertyType> geographicElementField; 

        /// <summary>
        /// temporalElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_TemporalExtent_PropertyType")]
		[XmlElement("temporalElement")]
        public List<EX_TemporalExtent_PropertyType> TemporalElement {
            get {
                return temporalElementField;
            } 
            set {
                temporalElementField = value;
                NotifyPropertyChanged("TemporalElement");
            }
        }

         /// <summary>
         /// bool to indicate if TemporalElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TemporalElementSpecified
         {
             get {
             if(temporalElementField!=null)
                 return temporalElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_TemporalExtent_PropertyType> temporalElementField; 

        /// <summary>
        /// verticalElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_VerticalExtent_PropertyType")]
		[XmlElement("verticalElement")]
        public List<EX_VerticalExtent_PropertyType> VerticalElement {
            get {
                return verticalElementField;
            } 
            set {
                verticalElementField = value;
                NotifyPropertyChanged("VerticalElement");
            }
        }

         /// <summary>
         /// bool to indicate if VerticalElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VerticalElementSpecified
         {
             get {
             if(verticalElementField!=null)
                 return verticalElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_VerticalExtent_PropertyType> verticalElementField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CharacterString_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CharacterString_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the CharacterString_PropertyType xsd type.")]
    public partial class CharacterString_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CharacterString property
        /// </summary>
		
		[XmlElement("CharacterString")]
        public string CharacterString {
            get {
                return CharacterStringField;
            } 
            set {
                CharacterStringField = value;
                NotifyPropertyChanged("CharacterString");
            }
        }

        private string CharacterStringField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_GeographicExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_GeographicExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_GeographicExtent_PropertyType xsd type.")]
    public partial class EX_GeographicExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractEX_GeographicExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractEX_GeographicExtent")]
        public AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtent {
            get {
                return AbstractEX_GeographicExtentField;
            } 
            set {
                AbstractEX_GeographicExtentField = value;
                NotifyPropertyChanged("AbstractEX_GeographicExtent");
            }
        }

        private AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractEX_GeographicExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractEX_GeographicExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractEX_GeographicExtent_Type xsd type.")]
    public abstract partial class AbstractEX_GeographicExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// extentTypeCode property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Boolean_PropertyType")]
		[XmlElement("extentTypeCode")]
        public Boolean_PropertyType ExtentTypeCode {
            get {
                return extentTypeCodeField;
            } 
            set {
                extentTypeCodeField = value;
                NotifyPropertyChanged("ExtentTypeCode");
            }
        }

        private Boolean_PropertyType extentTypeCodeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Boolean_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Boolean_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Boolean_PropertyType xsd type.")]
    public partial class Boolean_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Boolean property
        /// </summary>
		
		[XmlElement("Boolean")]
        public bool? Boolean {
            get {
                return BooleanField;
            } 
            set {
                BooleanField = value;
                NotifyPropertyChanged("Boolean");
            }
        }

        private bool? BooleanField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractObject_Type xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Result_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Series_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_OnlineResource_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Address_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Telephone_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Contact_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_ResponsibleParty_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Date_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Citation_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MD_Identifier_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Element_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_VerticalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_TemporalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractEX_GeographicExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_Extent_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractObject_Type", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the AbstractObject_Type xsd type.")]
    public abstract partial class AbstractObject_Type : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// id property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "ID")]
        [XmlAttribute("id")]
		
        public string Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private string idField; 

		/// <summary>
        /// uuid property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuid")]
		
        public string Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string uuidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_Result_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Result", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_Result_Type xsd type.")]
    public abstract partial class AbstractDQ_Result_Type : AbstractObject_Type, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the CI_Series_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Series", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Series_Type xsd type.")]
    public partial class CI_Series_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("name")]
        public CharacterString_PropertyType Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private CharacterString_PropertyType nameField; 

        /// <summary>
        /// issueIdentification property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("issueIdentification")]
        public CharacterString_PropertyType IssueIdentification {
            get {
                return issueIdentificationField;
            } 
            set {
                issueIdentificationField = value;
                NotifyPropertyChanged("IssueIdentification");
            }
        }

        private CharacterString_PropertyType issueIdentificationField; 

        /// <summary>
        /// page property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("page")]
        public CharacterString_PropertyType Page {
            get {
                return pageField;
            } 
            set {
                pageField = value;
                NotifyPropertyChanged("Page");
            }
        }

        private CharacterString_PropertyType pageField; 


    } //here

    /// <summary>
    /// This class represents the CI_OnlineResource_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_OnlineResource", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_OnlineResource_Type xsd type.")]
    public partial class CI_OnlineResource_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// linkage property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "URL_PropertyType")]
		[XmlElement("linkage")]
        public URL_PropertyType Linkage {
            get {
                return linkageField;
            } 
            set {
                linkageField = value;
                NotifyPropertyChanged("Linkage");
            }
        }

        private URL_PropertyType linkageField; 

        /// <summary>
        /// protocol property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("protocol")]
        public CharacterString_PropertyType Protocol {
            get {
                return protocolField;
            } 
            set {
                protocolField = value;
                NotifyPropertyChanged("Protocol");
            }
        }

        private CharacterString_PropertyType protocolField; 

        /// <summary>
        /// applicationProfile property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("applicationProfile")]
        public CharacterString_PropertyType ApplicationProfile {
            get {
                return applicationProfileField;
            } 
            set {
                applicationProfileField = value;
                NotifyPropertyChanged("ApplicationProfile");
            }
        }

        private CharacterString_PropertyType applicationProfileField; 

        /// <summary>
        /// name property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("name")]
        public CharacterString_PropertyType Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private CharacterString_PropertyType nameField; 

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("description")]
        public CharacterString_PropertyType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private CharacterString_PropertyType descriptionField; 

        /// <summary>
        /// function property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_OnLineFunctionCode_PropertyType")]
		[XmlElement("function")]
        public CI_OnLineFunctionCode_PropertyType Function {
            get {
                return functionField;
            } 
            set {
                functionField = value;
                NotifyPropertyChanged("Function");
            }
        }

        private CI_OnLineFunctionCode_PropertyType functionField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the URL_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="URL_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the URL_PropertyType xsd type.")]
    public partial class URL_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// URL property
        /// </summary>
		
		[XmlElement("URL", DataType="anyURI")]
        public string URL {
            get {
                return URLField;
            } 
            set {
                URLField = value;
                NotifyPropertyChanged("URL");
            }
        }

        private string URLField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_OnLineFunctionCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_OnLineFunctionCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_OnLineFunctionCode_PropertyType xsd type.")]
    public partial class CI_OnLineFunctionCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_OnLineFunctionCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_OnLineFunctionCode")]
        public CodeListValue_Type CI_OnLineFunctionCode {
            get {
                return CI_OnLineFunctionCodeField;
            } 
            set {
                CI_OnLineFunctionCodeField = value;
                NotifyPropertyChanged("CI_OnLineFunctionCode");
            }
        }

        private CodeListValue_Type CI_OnLineFunctionCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CodeListValue_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    [System.Xml.Serialization.XmlRootAttribute("CI_DateTypeCode", Namespace="http://www.isotc211.org/2005/gco", IsNullable=false)]
	[Description("This class represents the CodeListValue_Type xsd type.")]
    public partial class CodeListValue_Type : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeListValue_Type class.
        /// </summary>
        public CodeListValue_Type() {}

        /// <summary>
        /// Initializes a new instance of the CodeListValue_Type class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeListValue_Type(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// codeList property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeList")]
		
        public string CodeList {
            get {
                return codeListField;
            } 
            set {
                codeListField = value;
                NotifyPropertyChanged("CodeList");
            }
        }

        private string codeListField; 

		/// <summary>
        /// codeListValue property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeListValue")]
		
        public string CodeListValue {
            get {
                return codeListValueField;
            } 
            set {
                codeListValueField = value;
                NotifyPropertyChanged("CodeListValue");
            }
        }

        private string codeListValueField; 

		/// <summary>
        /// codeSpace property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeSpace")]
		
        public string CodeSpace {
            get {
                return codeSpaceField;
            } 
            set {
                codeSpaceField = value;
                NotifyPropertyChanged("CodeSpace");
            }
        }

        private string codeSpaceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CI_Address_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Address", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Address_Type xsd type.")]
    public partial class CI_Address_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// deliveryPoint property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("deliveryPoint")]
        public List<CharacterString_PropertyType> DeliveryPoint {
            get {
                return deliveryPointField;
            } 
            set {
                deliveryPointField = value;
                NotifyPropertyChanged("DeliveryPoint");
            }
        }

         /// <summary>
         /// bool to indicate if DeliveryPoint has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DeliveryPointSpecified
         {
             get {
             if(deliveryPointField!=null)
                 return deliveryPointField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> deliveryPointField; 

        /// <summary>
        /// city property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("city")]
        public CharacterString_PropertyType City {
            get {
                return cityField;
            } 
            set {
                cityField = value;
                NotifyPropertyChanged("City");
            }
        }

        private CharacterString_PropertyType cityField; 

        /// <summary>
        /// administrativeArea property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("administrativeArea")]
        public CharacterString_PropertyType AdministrativeArea {
            get {
                return administrativeAreaField;
            } 
            set {
                administrativeAreaField = value;
                NotifyPropertyChanged("AdministrativeArea");
            }
        }

        private CharacterString_PropertyType administrativeAreaField; 

        /// <summary>
        /// postalCode property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("postalCode")]
        public CharacterString_PropertyType PostalCode {
            get {
                return postalCodeField;
            } 
            set {
                postalCodeField = value;
                NotifyPropertyChanged("PostalCode");
            }
        }

        private CharacterString_PropertyType postalCodeField; 

        /// <summary>
        /// country property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("country")]
        public CharacterString_PropertyType Country {
            get {
                return countryField;
            } 
            set {
                countryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private CharacterString_PropertyType countryField; 

        /// <summary>
        /// electronicMailAddress property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("electronicMailAddress")]
        public List<CharacterString_PropertyType> ElectronicMailAddress {
            get {
                return electronicMailAddressField;
            } 
            set {
                electronicMailAddressField = value;
                NotifyPropertyChanged("ElectronicMailAddress");
            }
        }

         /// <summary>
         /// bool to indicate if ElectronicMailAddress has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ElectronicMailAddressSpecified
         {
             get {
             if(electronicMailAddressField!=null)
                 return electronicMailAddressField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> electronicMailAddressField; 


    } //here

    /// <summary>
    /// This class represents the CI_Telephone_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Telephone", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Telephone_Type xsd type.")]
    public partial class CI_Telephone_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// voice property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("voice")]
        public List<CharacterString_PropertyType> Voice {
            get {
                return voiceField;
            } 
            set {
                voiceField = value;
                NotifyPropertyChanged("Voice");
            }
        }

         /// <summary>
         /// bool to indicate if Voice has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VoiceSpecified
         {
             get {
             if(voiceField!=null)
                 return voiceField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> voiceField; 

        /// <summary>
        /// facsimile property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("facsimile")]
        public List<CharacterString_PropertyType> Facsimile {
            get {
                return facsimileField;
            } 
            set {
                facsimileField = value;
                NotifyPropertyChanged("Facsimile");
            }
        }

         /// <summary>
         /// bool to indicate if Facsimile has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacsimileSpecified
         {
             get {
             if(facsimileField!=null)
                 return facsimileField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> facsimileField; 


    } //here

    /// <summary>
    /// This class represents the CI_Contact_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Contact", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Contact_Type xsd type.")]
    public partial class CI_Contact_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// phone property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Telephone_PropertyType")]
		[XmlElement("phone")]
        public CI_Telephone_PropertyType Phone {
            get {
                return phoneField;
            } 
            set {
                phoneField = value;
                NotifyPropertyChanged("Phone");
            }
        }

        private CI_Telephone_PropertyType phoneField; 

        /// <summary>
        /// address property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Address_PropertyType")]
		[XmlElement("address")]
        public CI_Address_PropertyType Address {
            get {
                return addressField;
            } 
            set {
                addressField = value;
                NotifyPropertyChanged("Address");
            }
        }

        private CI_Address_PropertyType addressField; 

        /// <summary>
        /// onlineResource property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_OnlineResource_PropertyType")]
		[XmlElement("onlineResource")]
        public CI_OnlineResource_PropertyType OnlineResource {
            get {
                return onlineResourceField;
            } 
            set {
                onlineResourceField = value;
                NotifyPropertyChanged("OnlineResource");
            }
        }

        private CI_OnlineResource_PropertyType onlineResourceField; 

        /// <summary>
        /// hoursOfService property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("hoursOfService")]
        public CharacterString_PropertyType HoursOfService {
            get {
                return hoursOfServiceField;
            } 
            set {
                hoursOfServiceField = value;
                NotifyPropertyChanged("HoursOfService");
            }
        }

        private CharacterString_PropertyType hoursOfServiceField; 

        /// <summary>
        /// contactInstructions property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("contactInstructions")]
        public CharacterString_PropertyType ContactInstructions {
            get {
                return contactInstructionsField;
            } 
            set {
                contactInstructionsField = value;
                NotifyPropertyChanged("ContactInstructions");
            }
        }

        private CharacterString_PropertyType contactInstructionsField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Telephone_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Telephone_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Telephone_PropertyType xsd type.")]
    public partial class CI_Telephone_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Telephone property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Telephone")]
        public CI_Telephone_Type CI_Telephone {
            get {
                return CI_TelephoneField;
            } 
            set {
                CI_TelephoneField = value;
                NotifyPropertyChanged("CI_Telephone");
            }
        }

        private CI_Telephone_Type CI_TelephoneField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Address_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Address_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Address_PropertyType xsd type.")]
    public partial class CI_Address_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Address property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Address")]
        public CI_Address_Type CI_Address {
            get {
                return CI_AddressField;
            } 
            set {
                CI_AddressField = value;
                NotifyPropertyChanged("CI_Address");
            }
        }

        private CI_Address_Type CI_AddressField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_OnlineResource_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_OnlineResource_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_OnlineResource_PropertyType xsd type.")]
    public partial class CI_OnlineResource_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_OnlineResource property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_OnlineResource")]
        public CI_OnlineResource_Type CI_OnlineResource {
            get {
                return CI_OnlineResourceField;
            } 
            set {
                CI_OnlineResourceField = value;
                NotifyPropertyChanged("CI_OnlineResource");
            }
        }

        private CI_OnlineResource_Type CI_OnlineResourceField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_ResponsibleParty_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_ResponsibleParty", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_ResponsibleParty_Type xsd type.")]
    public partial class CI_ResponsibleParty_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// individualName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("individualName")]
        public CharacterString_PropertyType IndividualName {
            get {
                return individualNameField;
            } 
            set {
                individualNameField = value;
                NotifyPropertyChanged("IndividualName");
            }
        }

        private CharacterString_PropertyType individualNameField; 

        /// <summary>
        /// organisationName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("organisationName")]
        public CharacterString_PropertyType OrganisationName {
            get {
                return organisationNameField;
            } 
            set {
                organisationNameField = value;
                NotifyPropertyChanged("OrganisationName");
            }
        }

        private CharacterString_PropertyType organisationNameField; 

        /// <summary>
        /// positionName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("positionName")]
        public CharacterString_PropertyType PositionName {
            get {
                return positionNameField;
            } 
            set {
                positionNameField = value;
                NotifyPropertyChanged("PositionName");
            }
        }

        private CharacterString_PropertyType positionNameField; 

        /// <summary>
        /// contactInfo property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Contact_PropertyType")]
		[XmlElement("contactInfo")]
        public CI_Contact_PropertyType ContactInfo {
            get {
                return contactInfoField;
            } 
            set {
                contactInfoField = value;
                NotifyPropertyChanged("ContactInfo");
            }
        }

        private CI_Contact_PropertyType contactInfoField; 

        /// <summary>
        /// role property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_RoleCode_PropertyType")]
		[XmlElement("role")]
        public CI_RoleCode_PropertyType Role {
            get {
                return roleField;
            } 
            set {
                roleField = value;
                NotifyPropertyChanged("Role");
            }
        }

        private CI_RoleCode_PropertyType roleField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Contact_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Contact_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Contact_PropertyType xsd type.")]
    public partial class CI_Contact_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Contact property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Contact")]
        public CI_Contact_Type CI_Contact {
            get {
                return CI_ContactField;
            } 
            set {
                CI_ContactField = value;
                NotifyPropertyChanged("CI_Contact");
            }
        }

        private CI_Contact_Type CI_ContactField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_RoleCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_RoleCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_RoleCode_PropertyType xsd type.")]
    public partial class CI_RoleCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_RoleCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_RoleCode")]
        public CodeListValue_Type CI_RoleCode {
            get {
                return CI_RoleCodeField;
            } 
            set {
                CI_RoleCodeField = value;
                NotifyPropertyChanged("CI_RoleCode");
            }
        }

        private CodeListValue_Type CI_RoleCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_Date_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Date", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Date_Type xsd type.")]
    public partial class CI_Date_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// date property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Date_PropertyType")]
		[XmlElement("date")]
        public Date_PropertyType Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

        private Date_PropertyType dateField; 

        /// <summary>
        /// dateType property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_DateTypeCode_PropertyType")]
		[XmlElement("dateType")]
        public CI_DateTypeCode_PropertyType DateType {
            get {
                return dateTypeField;
            } 
            set {
                dateTypeField = value;
                NotifyPropertyChanged("DateType");
            }
        }

        private CI_DateTypeCode_PropertyType dateTypeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Date_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Date_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Date_PropertyType xsd type.")]
    public partial class Date_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Date property
        /// </summary>
        [XmlElement("Date")]
        public string Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                DateSpecified = (value!=null);
                NotifyPropertyChanged("Date");
            }
        }

        private string DateField; 
        private bool dateSpecified = false; 

        /// <summary>
        /// bool to indicate if Date has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateSpecified
        {
            get {
                return dateSpecified;
            }
            set {
                dateSpecified= value;
            }
        }

        /// <summary>
        /// DateTime property
        /// </summary>
        [XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                DateTimeSpecified = (value!=null);
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 
        private bool dateTimeSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTime has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeSpecified
        {
            get {
                return dateTimeSpecified;
            }
            set {
                dateTimeSpecified= value;
            }
        }


		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_DateTypeCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_DateTypeCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_DateTypeCode_PropertyType xsd type.")]
    public partial class CI_DateTypeCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_DateTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_DateTypeCode")]
        public CodeListValue_Type CI_DateTypeCode {
            get {
                return CI_DateTypeCodeField;
            } 
            set {
                CI_DateTypeCodeField = value;
                NotifyPropertyChanged("CI_DateTypeCode");
            }
        }

        private CodeListValue_Type CI_DateTypeCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_Citation_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Citation", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Citation_Type xsd type.")]
    public partial class CI_Citation_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// title property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("title")]
        public CharacterString_PropertyType Title {
            get {
                return titleField;
            } 
            set {
                titleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private CharacterString_PropertyType titleField; 

        /// <summary>
        /// alternateTitle property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("alternateTitle")]
        public List<CharacterString_PropertyType> AlternateTitle {
            get {
                return alternateTitleField;
            } 
            set {
                alternateTitleField = value;
                NotifyPropertyChanged("AlternateTitle");
            }
        }

         /// <summary>
         /// bool to indicate if AlternateTitle has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AlternateTitleSpecified
         {
             get {
             if(alternateTitleField!=null)
                 return alternateTitleField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> alternateTitleField; 

        /// <summary>
        /// date property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Date_PropertyType")]
		[XmlElement("date")]
        public List<CI_Date_PropertyType> Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

         /// <summary>
         /// bool to indicate if Date has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DateSpecified
         {
             get {
             if(dateField!=null)
                 return dateField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_Date_PropertyType> dateField; 

        /// <summary>
        /// edition property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("edition")]
        public CharacterString_PropertyType Edition {
            get {
                return editionField;
            } 
            set {
                editionField = value;
                NotifyPropertyChanged("Edition");
            }
        }

        private CharacterString_PropertyType editionField; 

        /// <summary>
        /// editionDate property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Date_PropertyType")]
		[XmlElement("editionDate")]
        public Date_PropertyType EditionDate {
            get {
                return editionDateField;
            } 
            set {
                editionDateField = value;
                NotifyPropertyChanged("EditionDate");
            }
        }

        private Date_PropertyType editionDateField; 

        /// <summary>
        /// identifier property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "MD_Identifier_PropertyType")]
		[XmlElement("identifier")]
        public List<MD_Identifier_PropertyType> Identifier {
            get {
                return identifierField;
            } 
            set {
                identifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

         /// <summary>
         /// bool to indicate if Identifier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IdentifierSpecified
         {
             get {
             if(identifierField!=null)
                 return identifierField.Count>0?true:false;
             else return false;
             }
         }
        private List<MD_Identifier_PropertyType> identifierField; 

        /// <summary>
        /// citedResponsibleParty property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_ResponsibleParty_PropertyType")]
		[XmlElement("citedResponsibleParty")]
        public List<CI_ResponsibleParty_PropertyType> CitedResponsibleParty {
            get {
                return citedResponsiblePartyField;
            } 
            set {
                citedResponsiblePartyField = value;
                NotifyPropertyChanged("CitedResponsibleParty");
            }
        }

         /// <summary>
         /// bool to indicate if CitedResponsibleParty has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CitedResponsiblePartySpecified
         {
             get {
             if(citedResponsiblePartyField!=null)
                 return citedResponsiblePartyField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_ResponsibleParty_PropertyType> citedResponsiblePartyField; 

        /// <summary>
        /// presentationForm property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_PresentationFormCode_PropertyType")]
		[XmlElement("presentationForm")]
        public List<CI_PresentationFormCode_PropertyType> PresentationForm {
            get {
                return presentationFormField;
            } 
            set {
                presentationFormField = value;
                NotifyPropertyChanged("PresentationForm");
            }
        }

         /// <summary>
         /// bool to indicate if PresentationForm has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PresentationFormSpecified
         {
             get {
             if(presentationFormField!=null)
                 return presentationFormField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_PresentationFormCode_PropertyType> presentationFormField; 

        /// <summary>
        /// series property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Series_PropertyType")]
		[XmlElement("series")]
        public CI_Series_PropertyType Series {
            get {
                return seriesField;
            } 
            set {
                seriesField = value;
                NotifyPropertyChanged("Series");
            }
        }

        private CI_Series_PropertyType seriesField; 

        /// <summary>
        /// otherCitationDetails property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("otherCitationDetails")]
        public CharacterString_PropertyType OtherCitationDetails {
            get {
                return otherCitationDetailsField;
            } 
            set {
                otherCitationDetailsField = value;
                NotifyPropertyChanged("OtherCitationDetails");
            }
        }

        private CharacterString_PropertyType otherCitationDetailsField; 

        /// <summary>
        /// collectiveTitle property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("collectiveTitle")]
        public CharacterString_PropertyType CollectiveTitle {
            get {
                return collectiveTitleField;
            } 
            set {
                collectiveTitleField = value;
                NotifyPropertyChanged("CollectiveTitle");
            }
        }

        private CharacterString_PropertyType collectiveTitleField; 

        /// <summary>
        /// ISBN property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("ISBN")]
        public CharacterString_PropertyType ISBN {
            get {
                return ISBNField;
            } 
            set {
                ISBNField = value;
                NotifyPropertyChanged("ISBN");
            }
        }

        private CharacterString_PropertyType ISBNField; 

        /// <summary>
        /// ISSN property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("ISSN")]
        public CharacterString_PropertyType ISSN {
            get {
                return ISSNField;
            } 
            set {
                ISSNField = value;
                NotifyPropertyChanged("ISSN");
            }
        }

        private CharacterString_PropertyType ISSNField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Date_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Date_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Date_PropertyType xsd type.")]
    public partial class CI_Date_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Date property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Date")]
        public CI_Date_Type CI_Date {
            get {
                return CI_DateField;
            } 
            set {
                CI_DateField = value;
                NotifyPropertyChanged("CI_Date");
            }
        }

        private CI_Date_Type CI_DateField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MD_Identifier_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MD_Identifier_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the MD_Identifier_PropertyType xsd type.")]
    public partial class MD_Identifier_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// MD_Identifier property
        /// </summary>
		[ComponentElement]
		[XmlElement("MD_Identifier")]
        public MD_Identifier_Type MD_Identifier {
            get {
                return MD_IdentifierField;
            } 
            set {
                MD_IdentifierField = value;
                NotifyPropertyChanged("MD_Identifier");
            }
        }

        private MD_Identifier_Type MD_IdentifierField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the MD_Identifier_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("MD_Identifier", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the MD_Identifier_Type xsd type.")]
    public partial class MD_Identifier_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// authority property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Citation_PropertyType")]
		[XmlElement("authority")]
        public CI_Citation_PropertyType Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private CI_Citation_PropertyType authorityField; 

        /// <summary>
        /// code property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("code")]
        public CharacterString_PropertyType Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private CharacterString_PropertyType codeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Citation_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Citation_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Citation_PropertyType xsd type.")]
    public partial class CI_Citation_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Citation property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Citation")]
        public CI_Citation_Type CI_Citation {
            get {
                return CI_CitationField;
            } 
            set {
                CI_CitationField = value;
                NotifyPropertyChanged("CI_Citation");
            }
        }

        private CI_Citation_Type CI_CitationField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_ResponsibleParty_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_ResponsibleParty_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_ResponsibleParty_PropertyType xsd type.")]
    public partial class CI_ResponsibleParty_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_ResponsibleParty property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_ResponsibleParty")]
        public CI_ResponsibleParty_Type CI_ResponsibleParty {
            get {
                return CI_ResponsiblePartyField;
            } 
            set {
                CI_ResponsiblePartyField = value;
                NotifyPropertyChanged("CI_ResponsibleParty");
            }
        }

        private CI_ResponsibleParty_Type CI_ResponsiblePartyField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_PresentationFormCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_PresentationFormCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_PresentationFormCode_PropertyType xsd type.")]
    public partial class CI_PresentationFormCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_PresentationFormCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_PresentationFormCode")]
        public CodeListValue_Type CI_PresentationFormCode {
            get {
                return CI_PresentationFormCodeField;
            } 
            set {
                CI_PresentationFormCodeField = value;
                NotifyPropertyChanged("CI_PresentationFormCode");
            }
        }

        private CodeListValue_Type CI_PresentationFormCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Series_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Series_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Series_PropertyType xsd type.")]
    public partial class CI_Series_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Series property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Series")]
        public CI_Series_Type CI_Series {
            get {
                return CI_SeriesField;
            } 
            set {
                CI_SeriesField = value;
                NotifyPropertyChanged("CI_Series");
            }
        }

        private CI_Series_Type CI_SeriesField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_Element_Type xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Element", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_Element_Type xsd type.")]
    public abstract partial class AbstractDQ_Element_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// nameOfMeasure property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("nameOfMeasure")]
        public List<CharacterString_PropertyType> NameOfMeasure {
            get {
                return nameOfMeasureField;
            } 
            set {
                nameOfMeasureField = value;
                NotifyPropertyChanged("NameOfMeasure");
            }
        }

         /// <summary>
         /// bool to indicate if NameOfMeasure has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameOfMeasureSpecified
         {
             get {
             if(nameOfMeasureField!=null)
                 return nameOfMeasureField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> nameOfMeasureField; 

        /// <summary>
        /// measureIdentification property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MD_Identifier_PropertyType")]
		[XmlElement("measureIdentification")]
        public MD_Identifier_PropertyType MeasureIdentification {
            get {
                return measureIdentificationField;
            } 
            set {
                measureIdentificationField = value;
                NotifyPropertyChanged("MeasureIdentification");
            }
        }

        private MD_Identifier_PropertyType measureIdentificationField; 

        /// <summary>
        /// measureDescription property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("measureDescription")]
        public CharacterString_PropertyType MeasureDescription {
            get {
                return measureDescriptionField;
            } 
            set {
                measureDescriptionField = value;
                NotifyPropertyChanged("MeasureDescription");
            }
        }

        private CharacterString_PropertyType measureDescriptionField; 

        /// <summary>
        /// evaluationMethodType property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DQ_EvaluationMethodTypeCode_PropertyType")]
		[XmlElement("evaluationMethodType")]
        public DQ_EvaluationMethodTypeCode_PropertyType EvaluationMethodType {
            get {
                return evaluationMethodTypeField;
            } 
            set {
                evaluationMethodTypeField = value;
                NotifyPropertyChanged("EvaluationMethodType");
            }
        }

        private DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodTypeField; 

        /// <summary>
        /// evaluationMethodDescription property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("evaluationMethodDescription")]
        public CharacterString_PropertyType EvaluationMethodDescription {
            get {
                return evaluationMethodDescriptionField;
            } 
            set {
                evaluationMethodDescriptionField = value;
                NotifyPropertyChanged("EvaluationMethodDescription");
            }
        }

        private CharacterString_PropertyType evaluationMethodDescriptionField; 

        /// <summary>
        /// evaluationProcedure property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Citation_PropertyType")]
		[XmlElement("evaluationProcedure")]
        public CI_Citation_PropertyType EvaluationProcedure {
            get {
                return evaluationProcedureField;
            } 
            set {
                evaluationProcedureField = value;
                NotifyPropertyChanged("EvaluationProcedure");
            }
        }

        private CI_Citation_PropertyType evaluationProcedureField; 

        /// <summary>
        /// dateTime property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DateTime_PropertyType")]
		[XmlElement("dateTime")]
        public List<DateTime_PropertyType> DateTime {
            get {
                return dateTimeField;
            } 
            set {
                dateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

         /// <summary>
         /// bool to indicate if DateTime has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DateTimeSpecified
         {
             get {
             if(dateTimeField!=null)
                 return dateTimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<DateTime_PropertyType> dateTimeField; 

        /// <summary>
        /// result property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DQ_Result_PropertyType")]
		[XmlElement("result")]
        public List<DQ_Result_PropertyType> Result {
            get {
                return resultField;
            } 
            set {
                resultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(resultField!=null)
                 return resultField.Count>0?true:false;
             else return false;
             }
         }
        private List<DQ_Result_PropertyType> resultField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DQ_EvaluationMethodTypeCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DQ_EvaluationMethodTypeCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the DQ_EvaluationMethodTypeCode_PropertyType xsd type.")]
    public partial class DQ_EvaluationMethodTypeCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DQ_EvaluationMethodTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("DQ_EvaluationMethodTypeCode")]
        public CodeListValue_Type DQ_EvaluationMethodTypeCode {
            get {
                return DQ_EvaluationMethodTypeCodeField;
            } 
            set {
                DQ_EvaluationMethodTypeCodeField = value;
                NotifyPropertyChanged("DQ_EvaluationMethodTypeCode");
            }
        }

        private CodeListValue_Type DQ_EvaluationMethodTypeCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DateTime_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DateTime_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the DateTime_PropertyType xsd type.")]
    public partial class DateTime_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DateTime property
        /// </summary>
		
		[XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DQ_Result_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DQ_Result_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the DQ_Result_PropertyType xsd type.")]
    public partial class DQ_Result_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractDQ_Result property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractDQ_Result")]
        public AbstractDQ_Result_Type AbstractDQ_Result {
            get {
                return AbstractDQ_ResultField;
            } 
            set {
                AbstractDQ_ResultField = value;
                NotifyPropertyChanged("AbstractDQ_Result");
            }
        }

        private AbstractDQ_Result_Type AbstractDQ_ResultField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_PositionalAccuracy_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_PositionalAccuracy_Type xsd type.")]
    public abstract partial class AbstractDQ_PositionalAccuracy_Type : AbstractDQ_Element_Type, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EX_VerticalExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_VerticalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_VerticalExtent_Type xsd type.")]
    public partial class EX_VerticalExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// minimumValue property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Real_PropertyType")]
		[XmlElement("minimumValue")]
        public Real_PropertyType MinimumValue {
            get {
                return minimumValueField;
            } 
            set {
                minimumValueField = value;
                NotifyPropertyChanged("MinimumValue");
            }
        }

        private Real_PropertyType minimumValueField; 

        /// <summary>
        /// maximumValue property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Real_PropertyType")]
		[XmlElement("maximumValue")]
        public Real_PropertyType MaximumValue {
            get {
                return maximumValueField;
            } 
            set {
                maximumValueField = value;
                NotifyPropertyChanged("MaximumValue");
            }
        }

        private Real_PropertyType maximumValueField; 

        /// <summary>
        /// verticalCRS property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SC_CRS_PropertyType")]
		[XmlElement("verticalCRS")]
        public SC_CRS_PropertyType VerticalCRS {
            get {
                return verticalCRSField;
            } 
            set {
                verticalCRSField = value;
                NotifyPropertyChanged("VerticalCRS");
            }
        }

        private SC_CRS_PropertyType verticalCRSField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Real_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Real_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Real_PropertyType xsd type.")]
    public partial class Real_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Real property
        /// </summary>
		
		[XmlElement("Real")]
        public double? Real {
            get {
                return RealField;
            } 
            set {
                RealField = value;
                NotifyPropertyChanged("Real");
            }
        }

        private double? RealField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SC_CRS_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SC_CRS_PropertyType", Namespace="http://www.isotc211.org/2005/gsr")]
	[Description("This class represents the SC_CRS_PropertyType xsd type.")]
    public partial class SC_CRS_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractCRSType AbstractCRS {
            get {
                return AbstractCRSField;
            } 
            set {
                AbstractCRSField = value;
                NotifyPropertyChanged("AbstractCRS");
            }
        }

        private AbstractCRSType AbstractCRSField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractCRSType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCRSType xsd type.")]
    public abstract partial class AbstractCRSType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[RecurringElement]
		[XmlElement("domainOfValidity")]
        public List<DomainOfValidity> DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

         /// <summary>
         /// bool to indicate if DomainOfValidity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DomainOfValiditySpecified
         {
             get {
             if(domainOfValidityField!=null)
                 return domainOfValidityField.Count>0?true:false;
             else return false;
             }
         }
        private List<DomainOfValidity> domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 


    } //here

    /// <summary>
    /// This class represents the VerticalCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCRSType xsd type.")]
    public partial class VerticalCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// verticalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("verticalCS")]
        public VerticalCSPropertyType VerticalCS {
            get {
                return verticalCSField;
            } 
            set {
                verticalCSField = value;
                NotifyPropertyChanged("VerticalCS");
            }
        }

        private VerticalCSPropertyType verticalCSField; 

        /// <summary>
        /// verticalDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("verticalDatum")]
        public VerticalDatumPropertyType VerticalDatum {
            get {
                return verticalDatumField;
            } 
            set {
                verticalDatumField = value;
                NotifyPropertyChanged("VerticalDatum");
            }
        }

        private VerticalDatumPropertyType verticalDatumField; 


    } //here

    /// <summary>
    /// This class represents the VerticalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCSPropertyType xsd type.")]
    public partial class VerticalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VerticalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("VerticalCS")]
        public VerticalCSType VerticalCS {
            get {
                return VerticalCSField;
            } 
            set {
                VerticalCSField = value;
                NotifyPropertyChanged("VerticalCS");
            }
        }

        private VerticalCSType VerticalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the VerticalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCSType xsd type.")]
    public partial class VerticalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the VerticalDatumPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalDatumPropertyType xsd type.")]
    public partial class VerticalDatumPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VerticalDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("VerticalDatum")]
        public VerticalDatumType VerticalDatum {
            get {
                return VerticalDatumField;
            } 
            set {
                VerticalDatumField = value;
                NotifyPropertyChanged("VerticalDatum");
            }
        }

        private VerticalDatumType VerticalDatumField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the VerticalDatumType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalDatumType xsd type.")]
    public partial class VerticalDatumType : AbstractDatumType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractDatumType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractDatumType xsd type.")]
    public abstract partial class AbstractDatumType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[ComponentElement]
		[XmlElement("domainOfValidity")]
        public DomainOfValidity DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

        private DomainOfValidity domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 

        /// <summary>
        /// anchorDefinition property
        /// </summary>
		[ComponentElement]
		[XmlElement("anchorDefinition")]
        public CodeType AnchorDefinition {
            get {
                return anchorDefinitionField;
            } 
            set {
                anchorDefinitionField = value;
                NotifyPropertyChanged("AnchorDefinition");
            }
        }

        private CodeType anchorDefinitionField; 

        /// <summary>
        /// realizationEpoch property
        /// </summary>
		
		[XmlElement("realizationEpoch", DataType="date")]
        public DateTime? RealizationEpoch {
            get {
                return realizationEpochField;
            } 
            set {
                realizationEpochField = value;
                 this.RealizationEpochSpecified = true;
                NotifyPropertyChanged("RealizationEpoch");
            }
        }

        private DateTime? realizationEpochField; 

        /// <summary>
        /// realizationEpochSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RealizationEpochSpecified {
            get {
                return realizationEpochSpecifiedField;
            } 
            set {
                realizationEpochSpecifiedField = value;
                NotifyPropertyChanged("RealizationEpochSpecified");
            }
        }

        private bool realizationEpochSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the GeodeticDatumType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticDatumType xsd type.")]
    public partial class GeodeticDatumType : AbstractDatumType, INotifyPropertyChanged
    {

        /// <summary>
        /// primeMeridian property
        /// </summary>
		[ComponentElement]
		[XmlElement("primeMeridian")]
        public PrimeMeridianPropertyType PrimeMeridian {
            get {
                return primeMeridianField;
            } 
            set {
                primeMeridianField = value;
                NotifyPropertyChanged("PrimeMeridian");
            }
        }

        private PrimeMeridianPropertyType primeMeridianField; 

        /// <summary>
        /// ellipsoid property
        /// </summary>
		[ComponentElement]
		[XmlElement("ellipsoid")]
        public EllipsoidPropertyType Ellipsoid {
            get {
                return ellipsoidField;
            } 
            set {
                ellipsoidField = value;
                NotifyPropertyChanged("Ellipsoid");
            }
        }

        private EllipsoidPropertyType ellipsoidField; 


    } //here

    /// <summary>
    /// This class represents the PrimeMeridianPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("primeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the PrimeMeridianPropertyType xsd type.")]
    public partial class PrimeMeridianPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PrimeMeridian property
        /// </summary>
		[ComponentElement]
		[XmlElement("PrimeMeridian")]
        public PrimeMeridianType PrimeMeridian {
            get {
                return PrimeMeridianField;
            } 
            set {
                PrimeMeridianField = value;
                NotifyPropertyChanged("PrimeMeridian");
            }
        }

        private PrimeMeridianType PrimeMeridianField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the PrimeMeridianType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("PrimeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the PrimeMeridianType xsd type.")]
    public partial class PrimeMeridianType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// greenwichLongitude property
        /// </summary>
		
		[XmlElement("greenwichLongitude")]
        public AngleType GreenwichLongitude {
            get {
                return greenwichLongitudeField;
            } 
            set {
                greenwichLongitudeField = value;
                NotifyPropertyChanged("GreenwichLongitude");
            }
        }

        private AngleType greenwichLongitudeField; 


    } //here

    /// <summary>
    /// This class represents the AngleType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("greenwichLongitude", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AngleType xsd type.")]
    public partial class AngleType : MeasureType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AngleType class.
        /// </summary>
        public AngleType() {}

        /// <summary>
        /// Initializes a new instance of the AngleType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public AngleType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here

    /// <summary>
    /// This class represents the MeasureType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AngleType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("semiMajorAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the MeasureType xsd type.")]
    public partial class MeasureType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureType class.
        /// </summary>
        public MeasureType() {}

        /// <summary>
        /// Initializes a new instance of the MeasureType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MeasureType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the LengthType xsd type.")]
    public partial class LengthType : MeasureType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthType class.
        /// </summary>
        public LengthType() {}

        /// <summary>
        /// Initializes a new instance of the LengthType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public LengthType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here
    }

    /// <summary>
    /// This class represents the EllipsoidPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidPropertyType xsd type.")]
    public partial class EllipsoidPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Ellipsoid property
        /// </summary>
		[ComponentElement]
		[XmlElement("Ellipsoid")]
        public EllipsoidType Ellipsoid {
            get {
                return EllipsoidField;
            } 
            set {
                EllipsoidField = value;
                NotifyPropertyChanged("Ellipsoid");
            }
        }

        private EllipsoidType EllipsoidField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EllipsoidType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidType xsd type.")]
    public partial class EllipsoidType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// semiMajorAxis property
        /// </summary>
		
		[XmlElement("semiMajorAxis")]
        public MeasureType SemiMajorAxis {
            get {
                return semiMajorAxisField;
            } 
            set {
                semiMajorAxisField = value;
                NotifyPropertyChanged("SemiMajorAxis");
            }
        }

        private MeasureType semiMajorAxisField; 

        /// <summary>
        /// secondDefiningParameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("secondDefiningParameter")]
        public SecondDefParameter SecondDefPara {
            get {
                return secondDefiningParameterField;
            } 
            set {
                secondDefiningParameterField = value;
                NotifyPropertyChanged("SecondDefPara");
            }
        }

        private SecondDefParameter secondDefiningParameterField; 


    } //here

    /// <summary>
    /// This class represents the secondDefiningParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the secondDefiningParameter xsd type.")]
    public partial class SecondDefParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SecondDefiningParameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("SecondDefiningParameter")]
        public SecondDefiningParameter SecondDefPara {
            get {
                return SecondDefiningParameterField;
            } 
            set {
                SecondDefiningParameterField = value;
                NotifyPropertyChanged("SecondDefPara");
            }
        }

        private SecondDefiningParameter SecondDefiningParameterField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SecondDefiningParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SecondDefiningParameter xsd type.")]
    public partial class SecondDefiningParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// inverseFlattening property
        /// </summary>
        [XmlElement("inverseFlattening")]
        public MeasureType InverseFlattening {
            get {
                return inverseFlatteningField;
            } 
            set {
                inverseFlatteningField = value;
                InverseFlatteningSpecified = (value!=null);
                NotifyPropertyChanged("InverseFlattening");
            }
        }

        private MeasureType inverseFlatteningField; 
        private bool inverseFlatteningSpecified = false; 

        /// <summary>
        /// bool to indicate if InverseFlattening has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool InverseFlatteningSpecified
        {
            get {
                return inverseFlatteningSpecified;
            }
            set {
                inverseFlatteningSpecified= value;
            }
        }

        /// <summary>
        /// isSphere property
        /// </summary>
        [XmlElement("isSphere")]
        public bool? IsSphere {
            get {
                return isSphereField;
            } 
            set {
                isSphereField = value;
                IsSphereSpecified = (value!=null);
                NotifyPropertyChanged("IsSphere");
            }
        }

        private bool? isSphereField; 
        private bool isSphereSpecified = false; 

        /// <summary>
        /// bool to indicate if IsSphere has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool IsSphereSpecified
        {
            get {
                return isSphereSpecified;
            }
            set {
                isSphereSpecified= value;
            }
        }

        /// <summary>
        /// semiMinorAxis property
        /// </summary>
        [XmlElement("semiMinorAxis")]
        public LengthType SemiMinorAxis {
            get {
                return semiMinorAxisField;
            } 
            set {
                semiMinorAxisField = value;
                SemiMinorAxisSpecified = (value!=null);
                NotifyPropertyChanged("SemiMinorAxis");
            }
        }

        private LengthType semiMinorAxisField; 
        private bool semiMinorAxisSpecified = false; 

        /// <summary>
        /// bool to indicate if SemiMinorAxis has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SemiMinorAxisSpecified
        {
            get {
                return semiMinorAxisSpecified;
            }
            set {
                semiMinorAxisSpecified= value;
            }
        }



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractGeneralDerivedCRSType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralDerivedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGeneralDerivedCRSType xsd type.")]
    public abstract partial class AbstractGeneralDerivedCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// conversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("conversion")]
        public GeneralConversionPropertyType Conversion {
            get {
                return conversionField;
            } 
            set {
                conversionField = value;
                NotifyPropertyChanged("Conversion");
            }
        }

        private GeneralConversionPropertyType conversionField; 


    } //here

    /// <summary>
    /// This class represents the GeneralConversionPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("conversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeneralConversionPropertyType xsd type.")]
    public partial class GeneralConversionPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractGeneralConversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractGeneralConversion")]
        public AbstractGeneralConversionType AbstractGeneralConversion {
            get {
                return AbstractGeneralConversionField;
            } 
            set {
                AbstractGeneralConversionField = value;
                NotifyPropertyChanged("AbstractGeneralConversion");
            }
        }

        private AbstractGeneralConversionType AbstractGeneralConversionField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractGeneralConversionType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralConversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGeneralConversionType xsd type.")]
    public abstract partial class AbstractGeneralConversionType : AbstractCoordinateOperationType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EX_TemporalExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_TemporalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_TemporalExtent_Type xsd type.")]
    public partial class EX_TemporalExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// extent property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TM_Primitive_PropertyType")]
		[XmlElement("extent")]
        public TM_Primitive_PropertyType Extent {
            get {
                return extentField;
            } 
            set {
                extentField = value;
                NotifyPropertyChanged("Extent");
            }
        }

        private TM_Primitive_PropertyType extentField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TM_Primitive_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TM_Primitive_PropertyType", Namespace="http://www.isotc211.org/2005/gts")]
	[Description("This class represents the TM_Primitive_PropertyType xsd type.")]
    public partial class TM_Primitive_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractTimePrimitive property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return AbstractTimePrimitiveField;
            } 
            set {
                AbstractTimePrimitiveField = value;
                NotifyPropertyChanged("AbstractTimePrimitive");
            }
        }

        private AbstractTimePrimitiveType AbstractTimePrimitiveField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_TemporalExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_TemporalExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_TemporalExtent_PropertyType xsd type.")]
    public partial class EX_TemporalExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_TemporalExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_TemporalExtent")]
        public EX_TemporalExtent_Type EX_TemporalExtent {
            get {
                return EX_TemporalExtentField;
            } 
            set {
                EX_TemporalExtentField = value;
                NotifyPropertyChanged("EX_TemporalExtent");
            }
        }

        private EX_TemporalExtent_Type EX_TemporalExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_VerticalExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_VerticalExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_VerticalExtent_PropertyType xsd type.")]
    public partial class EX_VerticalExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_VerticalExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_VerticalExtent")]
        public EX_VerticalExtent_Type EX_VerticalExtent {
            get {
                return EX_VerticalExtentField;
            } 
            set {
                EX_VerticalExtentField = value;
                NotifyPropertyChanged("EX_VerticalExtent");
            }
        }

        private EX_VerticalExtent_Type EX_VerticalExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the coordinateOperationAccuracy xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the coordinateOperationAccuracy xsd type.")]
    public partial class CoordinateOperationAccuracy : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractDQ_PositionalAccuracy property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracy {
            get {
                return AbstractDQ_PositionalAccuracyField;
            } 
            set {
                AbstractDQ_PositionalAccuracyField = value;
                NotifyPropertyChanged("AbstractDQ_PositionalAccuracy");
            }
        }

        private AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracyField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CRSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sourceCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CRSPropertyType xsd type.")]
    public partial class CRSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractCRS")]
        public AbstractCRSType AbstractCRS {
            get {
                return AbstractCRSField;
            } 
            set {
                AbstractCRSField = value;
                NotifyPropertyChanged("AbstractCRS");
            }
        }

        private AbstractCRSType AbstractCRSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SphericalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("SphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SphericalCSType xsd type.")]
    public partial class SphericalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EllipsoidalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("EllipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidalCSType xsd type.")]
    public partial class EllipsoidalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EllipsoidalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidalCSPropertyType xsd type.")]
    public partial class EllipsoidalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EllipsoidalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("EllipsoidalCS")]
        public EllipsoidalCSType EllipsoidalCS {
            get {
                return EllipsoidalCSField;
            } 
            set {
                EllipsoidalCSField = value;
                NotifyPropertyChanged("EllipsoidalCS");
            }
        }

        private EllipsoidalCSType EllipsoidalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SphericalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SphericalCSPropertyType xsd type.")]
    public partial class SphericalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SphericalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("SphericalCS")]
        public SphericalCSType SphericalCS {
            get {
                return SphericalCSField;
            } 
            set {
                SphericalCSField = value;
                NotifyPropertyChanged("SphericalCS");
            }
        }

        private SphericalCSType SphericalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the GeodeticDatumPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("geodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticDatumPropertyType xsd type.")]
    public partial class GeodeticDatumPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GeodeticDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("GeodeticDatum")]
        public GeodeticDatumType GeodeticDatum {
            get {
                return GeodeticDatumField;
            } 
            set {
                GeodeticDatumField = value;
                NotifyPropertyChanged("GeodeticDatum");
            }
        }

        private GeodeticDatumType GeodeticDatumField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedUnknownCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedUnknownCrs xsd type.")]
    public partial class ProjectedUnknownCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Unknown")]
        public string Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private string UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedWktCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedWktCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedWktCrs xsd type.")]
    public partial class ProjectedWktCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// WellKnownText property
        /// </summary>
		[Required]
        [Description("ISO 19162 compliant well known text of the CRS")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("WellKnownText")]
        public string WellKnownText {
            get {
                return WellKnownTextField;
            } 
            set {
                WellKnownTextField = value;
                NotifyPropertyChanged("WellKnownText");
            }
        }

        private string WellKnownTextField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedEpsgCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedEpsgCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedEpsgCrs xsd type.")]
    public partial class ProjectedEpsgCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("EpsgCode")]
        public long? EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private long? EpsgCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticWellLocation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticWellLocation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GeodeticWellLocation xsd type.")]
    public partial class GeodeticWellLocation : AbstractWellLocation, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Latitude property
        /// </summary>
		[Required]
        [Description("The latitude with north being positive.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Latitude")]
        public PlaneAngleMeasure Latitude {
            get {
                return LatitudeField;
            } 
            set {
                LatitudeField = value;
                NotifyPropertyChanged("Latitude");
            }
        }

        private PlaneAngleMeasure LatitudeField; 

        /// <summary>
        /// Longitude property
        /// </summary>
		[Required]
        [Description("The longitude with east being positive.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Longitude")]
        public PlaneAngleMeasure Longitude {
            get {
                return LongitudeField;
            } 
            set {
                LongitudeField = value;
                NotifyPropertyChanged("Longitude");
            }
        }

        private PlaneAngleMeasure LongitudeField; 

        /// <summary>
        /// Crs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractGeodeticCrs")]
		[XmlElement("Crs")]
        public AbstractGeodeticCrs Crs {
            get {
                return CrsField;
            } 
            set {
                CrsField = value;
                NotifyPropertyChanged("Crs");
            }
        }

        private AbstractGeodeticCrs CrsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractGeodeticCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticEpsgCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticUnknownCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractGeodeticCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractGeodeticCrs xsd type.")]
    public abstract partial class AbstractGeodeticCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticWktCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticWktCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticWktCrs xsd type.")]
    public partial class GeodeticWktCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// WellKnownText property
        /// </summary>
		[Required]
        [Description("ISO 19162 compliant well known text of the CRS")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("WellKnownText")]
        public string WellKnownText {
            get {
                return WellKnownTextField;
            } 
            set {
                WellKnownTextField = value;
                NotifyPropertyChanged("WellKnownText");
            }
        }

        private string WellKnownTextField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticGmlCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticGmlCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticGmlCrs xsd type.")]
    public partial class GeodeticGmlCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlProjectedCrsDefinition property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeodeticCRSType")]
		[XmlElement("GmlProjectedCrsDefinition")]
        public GeodeticCRSType GmlProjectedCrsDefinition {
            get {
                return GmlProjectedCrsDefinitionField;
            } 
            set {
                GmlProjectedCrsDefinitionField = value;
                NotifyPropertyChanged("GmlProjectedCrsDefinition");
            }
        }

        private GeodeticCRSType GmlProjectedCrsDefinitionField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticEpsgCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticEpsgCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticEpsgCrs xsd type.")]
    public partial class GeodeticEpsgCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("EpsgCode")]
        public long? EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private long? EpsgCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticLocalAuthorityCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticLocalAuthorityCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticLocalAuthorityCrs xsd type.")]
    public partial class GeodeticLocalAuthorityCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// LocalAuthorityCrsName property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AuthorityQualifiedName")]
		[XmlElement("LocalAuthorityCrsName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return LocalAuthorityCrsNameField;
            } 
            set {
                LocalAuthorityCrsNameField = value;
                NotifyPropertyChanged("LocalAuthorityCrsName");
            }
        }

        private AuthorityQualifiedName LocalAuthorityCrsNameField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticUnknownCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeodeticUnknownCrs xsd type.")]
    public partial class GeodeticUnknownCrs : AbstractGeodeticCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Unknown")]
        public string Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private string UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MeasureOrQuantity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MeasureOrQuantity", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MeasureOrQuantity xsd type.")]
    public partial class MeasureOrQuantity : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        public MeasureOrQuantity() {}

        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasureOrQuantity(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// A measure with a UOM or a quantity (without a UOM). This should not be used except in situations where the underlying class of data is captured elsewhere, e.g., in a measure class.
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("A measure with a UOM or a quantity (without a UOM). This should not be used except in situations where the underlying class of data is captured elsewhere, e.g., in a measure class.")]
        [EnergisticsDataTypeAttribute(DataType = "UomEnum")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaErrorTermValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaErrorTermValue", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaErrorTermValue xsd type.")]
    public partial class IscwsaErrorTermValue : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IscwsaErrorTermValue class.
        /// </summary>
        public IscwsaErrorTermValue() {}

        /// <summary>
        /// Initializes a new instance of the IscwsaErrorTermValue class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IscwsaErrorTermValue(MeasureOrQuantity value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Term property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the errorTerm represented by this value. This term must exist in the toolErrorTermSet referenced by the parent of this node. The same term may only be referenced once in the model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Term")]
        public string Term {
            get {
                return TermField;
            } 
            set {
                TermField = value;
                NotifyPropertyChanged("Term");
            }
        }

        private string TermField; 

        /// <summary>
        /// Prop property
        /// </summary>
		[Required]
        [Description("The propagation mode for this term in this model.")]
        [EnergisticsDataTypeAttribute(DataType = "ErrorPropagationMode")]
		[XmlElement("Prop")]
        public ErrorPropagationMode? Prop {
            get {
                return PropField;
            } 
            set {
                PropField = value;
                 this.PropSpecified = true;
                NotifyPropertyChanged("Prop");
            }
        }

        
        private bool PropSpecifiedField = false;
        
        /// <summary>
        /// PropSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PropSpecified {
            get {
                return PropSpecifiedField;
            } 
            set {
                PropSpecifiedField = value;
                NotifyPropertyChanged("PropSpecified");
            }
        }
        
        private ErrorPropagationMode? PropField; 

        /// <summary>
        /// Bias property
        /// </summary>
		[Description("The mean or expected value of the variance.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Bias")]
        public double? Bias {
            get {
                return BiasField;
            } 
            set {
                BiasField = value;
                 this.BiasSpecified = true;
                NotifyPropertyChanged("Bias");
            }
        }

        private double? BiasField; 

        /// <summary>
        /// BiasSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BiasSpecified {
            get {
                return BiasSpecifiedField;
            } 
            set {
                BiasSpecifiedField = value;
                NotifyPropertyChanged("BiasSpecified");
            }
        }

        private bool BiasSpecifiedField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A textual comment about this error term value.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasureOrQuantity")]
		[XmlElement("Value")]
        public MeasureOrQuantity Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private MeasureOrQuantity ValueField; 

		/// <summary>
        /// Unique identifier for this instance of IscwsaErrorTermValue.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaErrorTermValue.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaModelParameters xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaModelParameters", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaModelParameters xsd type.")]
    public partial class IscwsaModelParameters : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Choice of mathmatical modelling of misalignment.
        /// </summary>
		[Required]
        [Description("Choice of mathmatical modelling of misalignment.")]
        [EnergisticsDataTypeAttribute(DataType = "ErrorModelMisalignmentMode")]
		[XmlElement("MisalignmentMode")]
        public ErrorModelMisalignmentMode? MisalignmentMode {
            get {
                return MisalignmentModeField;
            } 
            set {
                MisalignmentModeField = value;
                 this.MisalignmentModeSpecified = true;
                NotifyPropertyChanged("MisalignmentMode");
            }
        }

        
        private bool MisalignmentModeSpecifiedField = false;
        
        /// <summary>
        /// MisalignmentModeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MisalignmentModeSpecified {
            get {
                return MisalignmentModeSpecifiedField;
            } 
            set {
                MisalignmentModeSpecifiedField = value;
                NotifyPropertyChanged("MisalignmentModeSpecified");
            }
        }
        
        private ErrorModelMisalignmentMode? MisalignmentModeField; 

        /// <summary>
        /// Inclination at which gyro initialization occurs.
        /// </summary>
		[Description("Inclination at which gyro initialization occurs.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("GyroInitialization")]
        public PlaneAngleMeasure GyroInitialization {
            get {
                return GyroInitializationField;
            } 
            set {
                GyroInitializationField = value;
                NotifyPropertyChanged("GyroInitialization");
            }
        }

        private PlaneAngleMeasure GyroInitializationField; 

        /// <summary>
        /// Maximum length of continuous survey before re-initialization.
        /// </summary>
		[Description("Maximum length of continuous survey before re-initialization.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("GyroReinitializationDistance")]
        public LengthMeasure GyroReinitializationDistance {
            get {
                return GyroReinitializationDistanceField;
            } 
            set {
                GyroReinitializationDistanceField = value;
                NotifyPropertyChanged("GyroReinitializationDistance");
            }
        }

        private LengthMeasure GyroReinitializationDistanceField; 

        /// <summary>
        /// True if the survey tool is rotated at inclinations greater than 90 degrees.
        /// </summary>
		[Description("True if the survey tool is rotated at inclinations greater than 90 degrees.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Switching")]
        public bool? Switching {
            get {
                return SwitchingField;
            } 
            set {
                SwitchingField = value;
                 this.SwitchingSpecified = true;
                NotifyPropertyChanged("Switching");
            }
        }

        private bool? SwitchingField; 

        /// <summary>
        /// SwitchingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SwitchingSpecified {
            get {
                return SwitchingSpecifiedField;
            } 
            set {
                SwitchingSpecifiedField = value;
                NotifyPropertyChanged("SwitchingSpecified");
            }
        }

        private bool SwitchingSpecifiedField; 

        /// <summary>
        /// Factor applied to random noise error terms, depending on the mode of gyro initialization. Values must be greater than zero and less than or equal to 1.
        /// </summary>
		[Description("Factor applied to random noise error terms, depending on the mode of gyro initialization. Values must be greater than zero and less than or equal to 1.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("NoiseReductionFactor")]
        public double? NoiseReductionFactor {
            get {
                return NoiseReductionFactorField;
            } 
            set {
                NoiseReductionFactorField = value;
                 this.NoiseReductionFactorSpecified = true;
                NotifyPropertyChanged("NoiseReductionFactor");
            }
        }

        private double? NoiseReductionFactorField; 

        /// <summary>
        /// NoiseReductionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NoiseReductionFactorSpecified {
            get {
                return NoiseReductionFactorSpecifiedField;
            } 
            set {
                NoiseReductionFactorSpecifiedField = value;
                NotifyPropertyChanged("NoiseReductionFactorSpecified");
            }
        }

        private bool NoiseReductionFactorSpecifiedField; 

        /// <summary>
        /// Speed at which the tool traverses the wellbore during a continuous survey.
        /// </summary>
		[Description("Speed at which the tool traverses the wellbore during a continuous survey.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("GyroRunningSpeed")]
        public LengthPerTimeMeasure GyroRunningSpeed {
            get {
                return GyroRunningSpeedField;
            } 
            set {
                GyroRunningSpeedField = value;
                NotifyPropertyChanged("GyroRunningSpeed");
            }
        }

        private LengthPerTimeMeasure GyroRunningSpeedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaSurveyToolOperatingInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaSurveyToolOperatingInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaSurveyToolOperatingInterval xsd type.")]
    public partial class IscwsaSurveyToolOperatingInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Tool operating mode over this interval.
        /// </summary>
		[Required]
        [Description("Tool operating mode over this interval.")]
        [EnergisticsDataTypeAttribute(DataType = "SurveyToolOperatingMode")]
		[XmlElement("Mode")]
        public SurveyToolOperatingMode? Mode {
            get {
                return ModeField;
            } 
            set {
                ModeField = value;
                 this.ModeSpecified = true;
                NotifyPropertyChanged("Mode");
            }
        }

        
        private bool ModeSpecifiedField = false;
        
        /// <summary>
        /// ModeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ModeSpecified {
            get {
                return ModeSpecifiedField;
            } 
            set {
                ModeSpecifiedField = value;
                NotifyPropertyChanged("ModeSpecified");
            }
        }
        
        private SurveyToolOperatingMode? ModeField; 

        /// <summary>
        /// Inclination at which the mode begins.
        /// </summary>
		[Required]
        [Description("Inclination at which the mode begins.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Start")]
        public PlaneAngleMeasure Start {
            get {
                return StartField;
            } 
            set {
                StartField = value;
                NotifyPropertyChanged("Start");
            }
        }

        private PlaneAngleMeasure StartField; 

        /// <summary>
        /// Inclination at which the mode terminates.
        /// </summary>
		[Required]
        [Description("Inclination at which the mode terminates.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("End")]
        public PlaneAngleMeasure End {
            get {
                return EndField;
            } 
            set {
                EndField = value;
                NotifyPropertyChanged("End");
            }
        }

        private PlaneAngleMeasure EndField; 

        /// <summary>
        /// Running speed for continuous surveys.
        /// </summary>
		[Description("Running speed for continuous surveys.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("Speed")]
        public LengthPerTimeMeasure Speed {
            get {
                return SpeedField;
            } 
            set {
                SpeedField = value;
                NotifyPropertyChanged("Speed");
            }
        }

        private LengthPerTimeMeasure SpeedField; 

        /// <summary>
        /// Time between survey samples for continuous surveys.
        /// </summary>
		[Description("Time between survey samples for continuous surveys.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("SampleRate")]
        public TimeMeasure SampleRate {
            get {
                return SampleRateField;
            } 
            set {
                SampleRateField = value;
                NotifyPropertyChanged("SampleRate");
            }
        }

        private TimeMeasure SampleRateField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of IscwsaSurveyToolOperatingInterval.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaSurveyToolOperatingInterval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaSurveyToolOperatingCondition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaSurveyToolOperatingCondition", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaSurveyToolOperatingCondition xsd type.")]
    public partial class IscwsaSurveyToolOperatingCondition : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IscwsaSurveyToolOperatingCondition class.
        /// </summary>
        public IscwsaSurveyToolOperatingCondition() {}

        /// <summary>
        /// Initializes a new instance of the IscwsaSurveyToolOperatingCondition class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IscwsaSurveyToolOperatingCondition(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// A particular constraint.
        /// </summary>
		[StringLength(64)]
        [Description("A particular constraint.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Parameter")]
        public string Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private string ParameterField; 

        /// <summary>
        /// The least value the constraint may take.
        /// </summary>
		[Description("The least value the constraint may take.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("Min")]
        public GenericMeasure Min {
            get {
                return MinField;
            } 
            set {
                MinField = value;
                NotifyPropertyChanged("Min");
            }
        }

        private GenericMeasure MinField; 

        /// <summary>
        /// The greatest value the constraint may take.
        /// </summary>
		[Description("The greatest value the constraint may take.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("Max")]
        public GenericMeasure Max {
            get {
                return MaxField;
            } 
            set {
                MaxField = value;
                NotifyPropertyChanged("Max");
            }
        }

        private GenericMeasure MaxField; 

        /// <summary>
        /// A fixed value that the constraint must take.
        /// </summary>
		[StringLength(64)]
        [Description("A fixed value that the constraint must take.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Value")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of IscwsaSurveyToolOperatingCondition.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of IscwsaSurveyToolOperatingCondition.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IscwsaAuthorizationData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IscwsaAuthorizationData", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IscwsaAuthorizationData xsd type.")]
    public partial class IscwsaAuthorizationData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Person responsible for the information.
        /// </summary>
		[StringLength(64)]
        [Description("Person responsible for the information.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Author")]
        public string Author {
            get {
                return AuthorField;
            } 
            set {
                AuthorField = value;
                NotifyPropertyChanged("Author");
            }
        }

        private string AuthorField; 

        /// <summary>
        /// Source from which the information is derived.
        /// </summary>
		[StringLength(64)]
        [Description("Source from which the information is derived.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Source")]
        public string Source {
            get {
                return SourceField;
            } 
            set {
                SourceField = value;
                NotifyPropertyChanged("Source");
            }
        }

        private string SourceField; 

        /// <summary>
        /// Person or collective body responsible for authorizing the information.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Person or collective body responsible for authorizing the information.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Authority")]
        public string Authority {
            get {
                return AuthorityField;
            } 
            set {
                AuthorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string AuthorityField; 

        /// <summary>
        /// Authorization state of the information.
        /// </summary>
		[Required]
        [Description("Authorization state of the information.")]
        [EnergisticsDataTypeAttribute(DataType = "AuthorizationStatus")]
		[XmlElement("Status")]
        public AuthorizationStatus? Status {
            get {
                return StatusField;
            } 
            set {
                StatusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        
        private bool StatusSpecifiedField = false;
        
        /// <summary>
        /// StatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return StatusSpecifiedField;
            } 
            set {
                StatusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }
        
        private AuthorizationStatus? StatusField; 

        /// <summary>
        /// Version name or number.
        /// </summary>
		[StringLength(64)]
        [Description("Version name or number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Version")]
        public string Version {
            get {
                return VersionField;
            } 
            set {
                VersionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string VersionField; 

        /// <summary>
        /// A comment about the object. This should include information regarding the derivation of the information.
        /// </summary>
		[StringLength(2000)]
        [Description("A comment about the object.  This should include information regarding the derivation of the information.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeologyFeature xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeologyFeature", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the GeologyFeature xsd type.")]
    public partial class GeologyFeature : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name of the feature.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the feature.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Aquifer or reservoir.
        /// </summary>
		[Description("Aquifer or reservoir.")]
        [EnergisticsDataTypeAttribute(DataType = "GeologyType")]
		[XmlElement("GeologyType")]
        public GeologyType? GeologyType {
            get {
                return GeologyTypeField;
            } 
            set {
                GeologyTypeField = value;
                 this.GeologyTypeSpecified = true;
                NotifyPropertyChanged("GeologyType");
            }
        }

        private GeologyType? GeologyTypeField; 

        /// <summary>
        /// GeologyTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GeologyTypeSpecified {
            get {
                return GeologyTypeSpecifiedField;
            } 
            set {
                GeologyTypeSpecifiedField = value;
                NotifyPropertyChanged("GeologyTypeSpecified");
            }
        }

        private bool GeologyTypeSpecifiedField; 

        /// <summary>
        /// Measured depth interval for this feature.
        /// </summary>
		[Description("Measured depth interval for this feature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("FeatureMdInterval")]
        public MdInterval FeatureMDInterval {
            get {
                return FeatureMdIntervalField;
            } 
            set {
                FeatureMdIntervalField = value;
                NotifyPropertyChanged("FeatureMDInterval");
            }
        }

        private MdInterval FeatureMdIntervalField; 

        /// <summary>
        /// True vertical depth interval for this feature.
        /// </summary>
		[Description("True vertical depth interval for this feature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("FeatureTvdInterval")]
        public TvdInterval FeatureTvdInterval {
            get {
                return FeatureTvdIntervalField;
            } 
            set {
                FeatureTvdIntervalField = value;
                NotifyPropertyChanged("FeatureTvdInterval");
            }
        }

        private TvdInterval FeatureTvdIntervalField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of GeologyFeature.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of GeologyFeature.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Borehole xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Borehole", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Borehole xsd type.")]
    public partial class Borehole : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the borehole.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// TypeBorehole property
        /// </summary>
		[Description("Type of borehole. etc. cavern, cavity, normal borehole, under ream, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "BoreholeType")]
		[XmlElement("TypeBorehole")]
        public BoreholeType? TypeBorehole {
            get {
                return TypeBoreholeField;
            } 
            set {
                TypeBoreholeField = value;
                 this.TypeBoreholeSpecified = true;
                NotifyPropertyChanged("TypeBorehole");
            }
        }

        private BoreholeType? TypeBoreholeField; 

        /// <summary>
        /// TypeBoreholeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeBoreholeSpecified {
            get {
                return TypeBoreholeSpecifiedField;
            } 
            set {
                TypeBoreholeSpecifiedField = value;
                NotifyPropertyChanged("TypeBoreholeSpecified");
            }
        }

        private bool TypeBoreholeSpecifiedField; 

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Description("Measured depth interval for the borehole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// TvdInterval property
        /// </summary>
		[Description("True vertical depth interval for the borehole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return TvdIntervalField;
            } 
            set {
                TvdIntervalField = value;
                NotifyPropertyChanged("TvdInterval");
            }
        }

        private TvdInterval TvdIntervalField; 

        /// <summary>
        /// BoreholeDiameter property
        /// </summary>
		[Description("Borehole diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("BoreholeDiameter")]
        public LengthMeasure BoreholeDiameter {
            get {
                return BoreholeDiameterField;
            } 
            set {
                BoreholeDiameterField = value;
                NotifyPropertyChanged("BoreholeDiameter");
            }
        }

        private LengthMeasure BoreholeDiameterField; 

        /// <summary>
        /// DescriptionPermanent property
        /// </summary>
		[StringLength(2000)]
        [Description("The description of this equipment to be permanently kept.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("DescriptionPermanent")]
        public string DescriptionPermanent {
            get {
                return DescriptionPermanentField;
            } 
            set {
                DescriptionPermanentField = value;
                NotifyPropertyChanged("DescriptionPermanent");
            }
        }

        private string DescriptionPermanentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// EquipmentEventHistory property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EventInfo")]
		[XmlElement("EquipmentEventHistory")]
        public EventInfo EquipmentEventHistory {
            get {
                return EquipmentEventHistoryField;
            } 
            set {
                EquipmentEventHistoryField = value;
                NotifyPropertyChanged("EquipmentEventHistory");
            }
        }

        private EventInfo EquipmentEventHistoryField; 

		/// <summary>
        /// Unique identifier for this instance of Borehole.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Borehole.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BoreholeString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BoreholeString", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BoreholeString xsd type.")]
    public partial class BoreholeString : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the borehole string.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Accessories property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StringAccessory")]
		[XmlArrayItem("Accessory")]
        [XmlArray("Accessories")]
        public List<StringEquipment> Accessories {
            get {
                return AccessoriesField;
            } 
            set {
                AccessoriesField = value;
                NotifyPropertyChanged("Accessories");
            }
        }

         /// <summary>
         /// bool to indicate if Accessories has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AccessoriesSpecified
         {
             get {
             if(AccessoriesField!=null)
                 return AccessoriesField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> AccessoriesField; 

        /// <summary>
        /// Borehole property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Borehole")]
		[XmlElement("Borehole")]
        public List<Borehole> Borehole {
            get {
                return BoreholeField;
            } 
            set {
                BoreholeField = value;
                NotifyPropertyChanged("Borehole");
            }
        }

         /// <summary>
         /// bool to indicate if Borehole has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeSpecified
         {
             get {
             if(BoreholeField!=null)
                 return BoreholeField.Count>0?true:false;
             else return false;
             }
         }
        private List<Borehole> BoreholeField; 

        /// <summary>
        /// GeologyFeature property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GeologyFeature")]
		[XmlElement("GeologyFeature")]
        public List<GeologyFeature> GeologyFeature {
            get {
                return GeologyFeatureField;
            } 
            set {
                GeologyFeatureField = value;
                NotifyPropertyChanged("GeologyFeature");
            }
        }

         /// <summary>
         /// bool to indicate if GeologyFeature has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologyFeatureSpecified
         {
             get {
             if(GeologyFeatureField!=null)
                 return GeologyFeatureField.Count>0?true:false;
             else return false;
             }
         }
        private List<GeologyFeature> GeologyFeatureField; 

        /// <summary>
        /// ReferenceWellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ReferenceWellbore")]
        public DataObjectReference ReferenceWellbore {
            get {
                return ReferenceWellboreField;
            } 
            set {
                ReferenceWellboreField = value;
                NotifyPropertyChanged("ReferenceWellbore");
            }
        }

        private DataObjectReference ReferenceWellboreField; 

		/// <summary>
        /// Unique identifier for this instance of BoreholeString.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of BoreholeString.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringEquipment xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringEquipment", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the StringEquipment xsd type.")]
    public partial class StringEquipment : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// EquipmentType property
        /// </summary>
		[Description("The type of the equipment. See enumerated values.")]
        [EnergisticsDataTypeAttribute(DataType = "EquipmentTypeExt")]
		[XmlElement("EquipmentType")]
        public ExtensibleEnum<EquipmentType>? EquipmentType {
            get {
                return EquipmentTypeField;
            } 
            set {
                EquipmentTypeField = value;
                NotifyPropertyChanged("EquipmentType");
            }
        }

        private ExtensibleEnum<EquipmentType>? EquipmentTypeField; 

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(2000)]
        [Description("The name of the equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// EquipmentEventHistory property
        /// </summary>
		[Description("History of events related to this equipment.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EventInfo")]
		[XmlElement("EquipmentEventHistory")]
        public List<EventInfo> EquipmentEventHistory {
            get {
                return EquipmentEventHistoryField;
            } 
            set {
                EquipmentEventHistoryField = value;
                NotifyPropertyChanged("EquipmentEventHistory");
            }
        }

         /// <summary>
         /// bool to indicate if EquipmentEventHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EquipmentEventHistorySpecified
         {
             get {
             if(EquipmentEventHistoryField!=null)
                 return EquipmentEventHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<EventInfo> EquipmentEventHistoryField; 

        /// <summary>
        /// Status property
        /// </summary>
		[StringLength(64)]
        [Description("The status of the piece of equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Status")]
        public string Status {
            get {
                return StatusField;
            } 
            set {
                StatusField = value;
                NotifyPropertyChanged("Status");
            }
        }

        private string StatusField; 

        /// <summary>
        /// RunNo property
        /// </summary>
		[StringLength(64)]
        [Description("The well run number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RunNo")]
        public string RunNo {
            get {
                return RunNoField;
            } 
            set {
                RunNoField = value;
                NotifyPropertyChanged("RunNo");
            }
        }

        private string RunNoField; 

        /// <summary>
        /// PreviousRunDays property
        /// </summary>
		[Description("The days that the equipment has run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("PreviousRunDays")]
        public TimeMeasure PreviousRunDays {
            get {
                return PreviousRunDaysField;
            } 
            set {
                PreviousRunDaysField = value;
                NotifyPropertyChanged("PreviousRunDays");
            }
        }

        private TimeMeasure PreviousRunDaysField; 

        /// <summary>
        /// ObjectCondition property
        /// </summary>
		[StringLength(64)]
        [Description("Object condition at installation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ObjectCondition")]
        public string ObjectCondition {
            get {
                return ObjectConditionField;
            } 
            set {
                ObjectConditionField = value;
                NotifyPropertyChanged("ObjectCondition");
            }
        }

        private string ObjectConditionField; 

        /// <summary>
        /// SurfaceCondition property
        /// </summary>
		[StringLength(64)]
        [Description("Object surface condition.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SurfaceCondition")]
        public string SurfaceCondition {
            get {
                return SurfaceConditionField;
            } 
            set {
                SurfaceConditionField = value;
                NotifyPropertyChanged("SurfaceCondition");
            }
        }

        private string SurfaceConditionField; 

        /// <summary>
        /// Count property
        /// </summary>
		[Description("The count number of the same equipment. The default is 1.  In some cases, multiple pieces group into one component.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Count")]
        public int? Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                 this.CountSpecified = true;
                NotifyPropertyChanged("Count");
            }
        }

        private int? CountField; 

        /// <summary>
        /// CountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CountSpecified {
            get {
                return CountSpecifiedField;
            } 
            set {
                CountSpecifiedField = value;
                NotifyPropertyChanged("CountSpecified");
            }
        }

        private bool CountSpecifiedField; 

        /// <summary>
        /// Length property
        /// </summary>
		[Description("The total length of the equipment.  This is NOT length per unit. This is the length of unit stored at equipmentset's equipment information section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Length")]
        public LengthMeasure Length {
            get {
                return LengthField;
            } 
            set {
                LengthField = value;
                NotifyPropertyChanged("Length");
            }
        }

        private LengthMeasure LengthField; 

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Description("Measured depth interval in which the equipment is installed in the string.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// TvdInterval property
        /// </summary>
		[Description("True vertical depth interval in which the equipment is installed in the string.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return TvdIntervalField;
            } 
            set {
                TvdIntervalField = value;
                NotifyPropertyChanged("TvdInterval");
            }
        }

        private TvdInterval TvdIntervalField; 

        /// <summary>
        /// OutsideString property
        /// </summary>
		[Description("Flag indicating whether this component is inside the string or not .")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("OutsideString")]
        public bool? OutsideString {
            get {
                return OutsideStringField;
            } 
            set {
                OutsideStringField = value;
                 this.OutsideStringSpecified = true;
                NotifyPropertyChanged("OutsideString");
            }
        }

        private bool? OutsideStringField; 

        /// <summary>
        /// OutsideStringSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OutsideStringSpecified {
            get {
                return OutsideStringSpecifiedField;
            } 
            set {
                OutsideStringSpecifiedField = value;
                NotifyPropertyChanged("OutsideStringSpecified");
            }
        }

        private bool OutsideStringSpecifiedField; 

        /// <summary>
        /// TensileMax property
        /// </summary>
		[Description("Max tensile strength.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("TensileMax")]
        public ForceMeasure TensileMax {
            get {
                return TensileMaxField;
            } 
            set {
                TensileMaxField = value;
                NotifyPropertyChanged("TensileMax");
            }
        }

        private ForceMeasure TensileMaxField; 

        /// <summary>
        /// PresRating property
        /// </summary>
		[Description("Pressure  rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresRating")]
        public PressureMeasure PresRating {
            get {
                return PresRatingField;
            } 
            set {
                PresRatingField = value;
                NotifyPropertyChanged("PresRating");
            }
        }

        private PressureMeasure PresRatingField; 

        /// <summary>
        /// PresCollapse property
        /// </summary>
		[Description("Collapse pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresCollapse")]
        public PressureMeasure PresCollapse {
            get {
                return PresCollapseField;
            } 
            set {
                PresCollapseField = value;
                NotifyPropertyChanged("PresCollapse");
            }
        }

        private PressureMeasure PresCollapseField; 

        /// <summary>
        /// PresBurst property
        /// </summary>
		[Description("Burst pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresBurst")]
        public PressureMeasure PresBurst {
            get {
                return PresBurstField;
            } 
            set {
                PresBurstField = value;
                NotifyPropertyChanged("PresBurst");
            }
        }

        private PressureMeasure PresBurstField; 

        /// <summary>
        /// HeatRating property
        /// </summary>
		[Description("Heat rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("HeatRating")]
        public ThermodynamicTemperatureMeasure HeatRating {
            get {
                return HeatRatingField;
            } 
            set {
                HeatRatingField = value;
                NotifyPropertyChanged("HeatRating");
            }
        }

        private ThermodynamicTemperatureMeasure HeatRatingField; 

        /// <summary>
        /// IsLinetoSurface property
        /// </summary>
		[Description("Flag indicating the equipment has a line connected to the surface.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsLinetoSurface")]
        public bool? IsLinetoSurface {
            get {
                return IsLinetoSurfaceField;
            } 
            set {
                IsLinetoSurfaceField = value;
                 this.IsLinetoSurfaceSpecified = true;
                NotifyPropertyChanged("IsLinetoSurface");
            }
        }

        private bool? IsLinetoSurfaceField; 

        /// <summary>
        /// IsLinetoSurfaceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsLinetoSurfaceSpecified {
            get {
                return IsLinetoSurfaceSpecifiedField;
            } 
            set {
                IsLinetoSurfaceSpecifiedField = value;
                NotifyPropertyChanged("IsLinetoSurfaceSpecified");
            }
        }

        private bool IsLinetoSurfaceSpecifiedField; 

        /// <summary>
        /// IsCentralized property
        /// </summary>
		[Description("Flag indicating equipment is centralized.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsCentralized")]
        public bool? IsCentralized {
            get {
                return IsCentralizedField;
            } 
            set {
                IsCentralizedField = value;
                 this.IsCentralizedSpecified = true;
                NotifyPropertyChanged("IsCentralized");
            }
        }

        private bool? IsCentralizedField; 

        /// <summary>
        /// IsCentralizedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsCentralizedSpecified {
            get {
                return IsCentralizedSpecifiedField;
            } 
            set {
                IsCentralizedSpecifiedField = value;
                NotifyPropertyChanged("IsCentralizedSpecified");
            }
        }

        private bool IsCentralizedSpecifiedField; 

        /// <summary>
        /// HasScratchers property
        /// </summary>
		[Description("Flag indicating scratchers have been added to the equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("HasScratchers")]
        public bool? HasScratchers {
            get {
                return HasScratchersField;
            } 
            set {
                HasScratchersField = value;
                 this.HasScratchersSpecified = true;
                NotifyPropertyChanged("HasScratchers");
            }
        }

        private bool? HasScratchersField; 

        /// <summary>
        /// HasScratchersSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool HasScratchersSpecified {
            get {
                return HasScratchersSpecifiedField;
            } 
            set {
                HasScratchersSpecifiedField = value;
                NotifyPropertyChanged("HasScratchersSpecified");
            }
        }

        private bool HasScratchersSpecifiedField; 

        /// <summary>
        /// PerforationSetRefId property
        /// </summary>
		[Description("Reference to the perforated hole in the equipment after a perforation event.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PerforationSetRefId")]
        public List<string> PerforationSetRefId {
            get {
                return PerforationSetRefIdField;
            } 
            set {
                PerforationSetRefIdField = value;
                NotifyPropertyChanged("PerforationSetRefId");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSetRefId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetRefIdSpecified
         {
             get {
             if(PerforationSetRefIdField!=null)
                 return PerforationSetRefIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> PerforationSetRefIdField; 

        /// <summary>
        /// PermanentRemarks property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks on the equipment stored permanently.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("PermanentRemarks")]
        public string PermanentRemarks {
            get {
                return PermanentRemarksField;
            } 
            set {
                PermanentRemarksField = value;
                NotifyPropertyChanged("PermanentRemarks");
            }
        }

        private string PermanentRemarksField; 

        /// <summary>
        /// UsageComment property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks on the usage of this equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("UsageComment")]
        public string UsageComment {
            get {
                return UsageCommentField;
            } 
            set {
                UsageCommentField = value;
                NotifyPropertyChanged("UsageComment");
            }
        }

        private string UsageCommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Assembly property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Assembly")]
		[XmlArrayItem("Part")]
        [XmlArray("Assembly")]
        public List<StringEquipment> Assembly {
            get {
                return AssemblyField;
            } 
            set {
                AssemblyField = value;
                NotifyPropertyChanged("Assembly");
            }
        }

         /// <summary>
         /// bool to indicate if Assembly has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AssemblySpecified
         {
             get {
             if(AssemblyField!=null)
                 return AssemblyField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> AssemblyField; 

        /// <summary>
        /// OrderOfObject property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectSequence")]
		[XmlElement("OrderOfObject")]
        public ObjectSequence OrderOfObject {
            get {
                return OrderOfObjectField;
            } 
            set {
                OrderOfObjectField = value;
                NotifyPropertyChanged("OrderOfObject");
            }
        }

        private ObjectSequence OrderOfObjectField; 

        /// <summary>
        /// InsideComponent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ReferenceContainer")]
		[XmlElement("InsideComponent")]
        public List<ReferenceContainer> InsideComponent {
            get {
                return InsideComponentField;
            } 
            set {
                InsideComponentField = value;
                NotifyPropertyChanged("InsideComponent");
            }
        }

         /// <summary>
         /// bool to indicate if InsideComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InsideComponentSpecified
         {
             get {
             if(InsideComponentField!=null)
                 return InsideComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ReferenceContainer> InsideComponentField; 

        /// <summary>
        /// OutsideComponent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ReferenceContainer")]
		[XmlElement("OutsideComponent")]
        public List<ReferenceContainer> OutsideComponent {
            get {
                return OutsideComponentField;
            } 
            set {
                OutsideComponentField = value;
                NotifyPropertyChanged("OutsideComponent");
            }
        }

         /// <summary>
         /// bool to indicate if OutsideComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OutsideComponentSpecified
         {
             get {
             if(OutsideComponentField!=null)
                 return OutsideComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ReferenceContainer> OutsideComponentField; 

        /// <summary>
        /// ConnectionNext property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EquipmentConnection")]
		[XmlElement("ConnectionNext")]
        public List<EquipmentConnection> ConnectionNext {
            get {
                return ConnectionNextField;
            } 
            set {
                ConnectionNextField = value;
                NotifyPropertyChanged("ConnectionNext");
            }
        }

         /// <summary>
         /// bool to indicate if ConnectionNext has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectionNextSpecified
         {
             get {
             if(ConnectionNextField!=null)
                 return ConnectionNextField.Count>0?true:false;
             else return false;
             }
         }
        private List<EquipmentConnection> ConnectionNextField; 

		/// <summary>
        /// Unique identifier for this instance of StringEquipment.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StringEquipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

		/// <summary>
        /// Reference to a piece of equipment.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to a piece of equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("equipmentReferenceUid")]
		
        public string EquipmentReferenceUid {
            get {
                return equipmentReferenceUidField;
            } 
            set {
                equipmentReferenceUidField = value;
                NotifyPropertyChanged("EquipmentReferenceUid");
            }
        }

        private string equipmentReferenceUidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReferenceContainer xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReferenceContainer", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ReferenceContainer xsd type.")]
    public partial class ReferenceContainer : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DownholeString reference ID.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("DownholeString reference ID.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("StringReferenceId")]
        public string StringReferenceId {
            get {
                return StringReferenceIdField;
            } 
            set {
                StringReferenceIdField = value;
                NotifyPropertyChanged("StringReferenceId");
            }
        }

        private string StringReferenceIdField; 

        /// <summary>
        /// Equipment reference ID.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Equipment reference ID.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("EquipmentReferenceId")]
        public string EquipmentReferenceId {
            get {
                return EquipmentReferenceIdField;
            } 
            set {
                EquipmentReferenceIdField = value;
                NotifyPropertyChanged("EquipmentReferenceId");
            }
        }

        private string EquipmentReferenceIdField; 

        /// <summary>
        /// Reference to the equipment for this accessory.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to the equipment for this accessory.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("AccesoryEquipmentReferenceId")]
        public string AccesoryEquipmentReferenceId {
            get {
                return AccesoryEquipmentReferenceIdField;
            } 
            set {
                AccesoryEquipmentReferenceIdField = value;
                NotifyPropertyChanged("AccesoryEquipmentReferenceId");
            }
        }

        private string AccesoryEquipmentReferenceIdField; 

        /// <summary>
        /// Comment or remarks on this container reference.
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Comment or remarks on this container reference.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

		/// <summary>
        /// Unique identifier for this instance of ReferenceContainer.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of ReferenceContainer.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EquipmentConnection xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EquipmentConnection", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the EquipmentConnection xsd type.")]
    public partial class EquipmentConnection : Connection, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// RadialOffset property
        /// </summary>
		[Description("Measurement of radial offset.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("RadialOffset")]
        public LengthMeasure RadialOffset {
            get {
                return RadialOffsetField;
            } 
            set {
                RadialOffsetField = value;
                NotifyPropertyChanged("RadialOffset");
            }
        }

        private LengthMeasure RadialOffsetField; 

        /// <summary>
        /// ConnectionForm property
        /// </summary>
		[Description("The form of connection: box or pin.")]
        [EnergisticsDataTypeAttribute(DataType = "ConnectionFormType")]
		[XmlElement("ConnectionForm")]
        public ConnectionFormType? ConnectionForm {
            get {
                return ConnectionFormField;
            } 
            set {
                ConnectionFormField = value;
                 this.ConnectionFormSpecified = true;
                NotifyPropertyChanged("ConnectionForm");
            }
        }

        private ConnectionFormType? ConnectionFormField; 

        /// <summary>
        /// ConnectionFormSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ConnectionFormSpecified {
            get {
                return ConnectionFormSpecifiedField;
            } 
            set {
                ConnectionFormSpecifiedField = value;
                NotifyPropertyChanged("ConnectionFormSpecified");
            }
        }

        private bool ConnectionFormSpecifiedField; 

        /// <summary>
        /// ConnectionUpset property
        /// </summary>
		[StringLength(64)]
        [Description("Connection upset.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ConnectionUpset")]
        public string ConnectionUpset {
            get {
                return ConnectionUpsetField;
            } 
            set {
                ConnectionUpsetField = value;
                NotifyPropertyChanged("ConnectionUpset");
            }
        }

        private string ConnectionUpsetField; 

        /// <summary>
        /// ConnectionType property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AbstractConnectionType")]
		[XmlElement("ConnectionType")]
        public AbstractConnectionType ConnectionType {
            get {
                return ConnectionTypeField;
            } 
            set {
                ConnectionTypeField = value;
                NotifyPropertyChanged("ConnectionType");
            }
        }

        private AbstractConnectionType ConnectionTypeField; 

		/// <summary>
        /// Reference to the string equipment. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to the string equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("stringEquipmentReferenceUid")]
		
        public string StringEquipmentReferenceUid {
            get {
                return stringEquipmentReferenceUidField;
            } 
            set {
                stringEquipmentReferenceUidField = value;
                NotifyPropertyChanged("StringEquipmentReferenceUid");
            }
        }

        private string stringEquipmentReferenceUidField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractConnectionType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OtherConnectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RodConnectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TubingConnectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CasingConnectionType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractConnectionType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractConnectionType xsd type.")]
    public abstract partial class AbstractConnectionType : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OtherConnectionType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OtherConnectionType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the OtherConnectionType xsd type.")]
    public partial class OtherConnectionType : AbstractConnectionType, INotifyPropertyChanged
    {

        /// <summary>
        /// OtherConnectionType1 property
        /// </summary>
		
		[XmlElement("OtherConnectionType")]
        public OtherConnectionTypes? OtherConnectionType1 {
            get {
                return OtherConnectionType1Field;
            } 
            set {
                OtherConnectionType1Field = value;
                 this.OtherConnectionType1Specified = true;
                NotifyPropertyChanged("OtherConnectionType1");
            }
        }

        
        private bool OtherConnectionType1SpecifiedField = false;
        
        /// <summary>
        /// OtherConnectionType1Specified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OtherConnectionType1Specified {
            get {
                return OtherConnectionType1SpecifiedField;
            } 
            set {
                OtherConnectionType1SpecifiedField = value;
                NotifyPropertyChanged("OtherConnectionType1Specified");
            }
        }
        
        private OtherConnectionTypes? OtherConnectionType1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RodConnectionType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RodConnectionType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RodConnectionType xsd type.")]
    public partial class RodConnectionType : AbstractConnectionType, INotifyPropertyChanged
    {

        /// <summary>
        /// RodConnectionType1 property
        /// </summary>
		
		[XmlElement("RodConnectionType")]
        public RodConnectionTypes? RodConnectionType1 {
            get {
                return RodConnectionType1Field;
            } 
            set {
                RodConnectionType1Field = value;
                 this.RodConnectionType1Specified = true;
                NotifyPropertyChanged("RodConnectionType1");
            }
        }

        
        private bool RodConnectionType1SpecifiedField = false;
        
        /// <summary>
        /// RodConnectionType1Specified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RodConnectionType1Specified {
            get {
                return RodConnectionType1SpecifiedField;
            } 
            set {
                RodConnectionType1SpecifiedField = value;
                NotifyPropertyChanged("RodConnectionType1Specified");
            }
        }
        
        private RodConnectionTypes? RodConnectionType1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TubingConnectionType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TubingConnectionType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TubingConnectionType xsd type.")]
    public partial class TubingConnectionType : AbstractConnectionType, INotifyPropertyChanged
    {

        /// <summary>
        /// TubingConnectionType1 property
        /// </summary>
		
		[XmlElement("TubingConnectionType")]
        public TubingConnectionTypes? TubingConnectionType1 {
            get {
                return TubingConnectionType1Field;
            } 
            set {
                TubingConnectionType1Field = value;
                 this.TubingConnectionType1Specified = true;
                NotifyPropertyChanged("TubingConnectionType1");
            }
        }

        
        private bool TubingConnectionType1SpecifiedField = false;
        
        /// <summary>
        /// TubingConnectionType1Specified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TubingConnectionType1Specified {
            get {
                return TubingConnectionType1SpecifiedField;
            } 
            set {
                TubingConnectionType1SpecifiedField = value;
                NotifyPropertyChanged("TubingConnectionType1Specified");
            }
        }
        
        private TubingConnectionTypes? TubingConnectionType1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CasingConnectionType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CasingConnectionType", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CasingConnectionType xsd type.")]
    public partial class CasingConnectionType : AbstractConnectionType, INotifyPropertyChanged
    {

        /// <summary>
        /// CasingConnectionType1 property
        /// </summary>
		
		[XmlElement("CasingConnectionType")]
        public CasingConnectionTypes? CasingConnectionType1 {
            get {
                return CasingConnectionType1Field;
            } 
            set {
                CasingConnectionType1Field = value;
                 this.CasingConnectionType1Specified = true;
                NotifyPropertyChanged("CasingConnectionType1");
            }
        }

        
        private bool CasingConnectionType1SpecifiedField = false;
        
        /// <summary>
        /// CasingConnectionType1Specified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CasingConnectionType1Specified {
            get {
                return CasingConnectionType1SpecifiedField;
            } 
            set {
                CasingConnectionType1SpecifiedField = value;
                NotifyPropertyChanged("CasingConnectionType1Specified");
            }
        }
        
        private CasingConnectionTypes? CasingConnectionType1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Connection xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquipmentConnection))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Connection", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Connection xsd type.")]
    public partial class Connection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Id property
        /// </summary>
		[Description("Inside diameter of the connection.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Id")]
        public LengthMeasure InnerDiameter {
            get {
                return IdField;
            } 
            set {
                IdField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure IdField; 

        /// <summary>
        /// Od property
        /// </summary>
		[Description("Outside diameter of the body of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Od")]
        public LengthMeasure OuterDiameter {
            get {
                return OdField;
            } 
            set {
                OdField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure OdField; 

        /// <summary>
        /// Len property
        /// </summary>
		[Description("Length of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Len")]
        public LengthMeasure Len {
            get {
                return LenField;
            } 
            set {
                LenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure LenField; 

        /// <summary>
        /// TypeThread property
        /// </summary>
		[StringLength(64)]
        [Description("Thread type from API RP7G, 5CT.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeThread")]
        public string TypeThread {
            get {
                return TypeThreadField;
            } 
            set {
                TypeThreadField = value;
                NotifyPropertyChanged("TypeThread");
            }
        }

        private string TypeThreadField; 

        /// <summary>
        /// SizeThread property
        /// </summary>
		[Description("Thread size.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SizeThread")]
        public LengthMeasure SizeThread {
            get {
                return SizeThreadField;
            } 
            set {
                SizeThreadField = value;
                NotifyPropertyChanged("SizeThread");
            }
        }

        private LengthMeasure SizeThreadField; 

        /// <summary>
        /// TensYield property
        /// </summary>
		[Description("Yield stress of steel: worn stress.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("TensYield")]
        public PressureMeasure TensYield {
            get {
                return TensYieldField;
            } 
            set {
                TensYieldField = value;
                NotifyPropertyChanged("TensYield");
            }
        }

        private PressureMeasure TensYieldField; 

        /// <summary>
        /// TqYield property
        /// </summary>
		[Description("Torque at which yield occurs.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqYield")]
        public MomentOfForceMeasure TorqueYield {
            get {
                return TqYieldField;
            } 
            set {
                TqYieldField = value;
                NotifyPropertyChanged("TorqueYield");
            }
        }

        private MomentOfForceMeasure TqYieldField; 

        /// <summary>
        /// Position property
        /// </summary>
		[Description("Where connected.")]
        [EnergisticsDataTypeAttribute(DataType = "ConnectionPosition")]
		[XmlElement("Position")]
        public ConnectionPosition? Position {
            get {
                return PositionField;
            } 
            set {
                PositionField = value;
                 this.PositionSpecified = true;
                NotifyPropertyChanged("Position");
            }
        }

        private ConnectionPosition? PositionField; 

        /// <summary>
        /// PositionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PositionSpecified {
            get {
                return PositionSpecifiedField;
            } 
            set {
                PositionSpecifiedField = value;
                NotifyPropertyChanged("PositionSpecified");
            }
        }

        private bool PositionSpecifiedField; 

        /// <summary>
        /// CriticalCrossSection property
        /// </summary>
		[Description("For bending stiffness ratio.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaMeasure")]
		[XmlElement("CriticalCrossSection")]
        public AreaMeasure CriticalCrossSection {
            get {
                return CriticalCrossSectionField;
            } 
            set {
                CriticalCrossSectionField = value;
                NotifyPropertyChanged("CriticalCrossSection");
            }
        }

        private AreaMeasure CriticalCrossSectionField; 

        /// <summary>
        /// PresLeak property
        /// </summary>
		[Description("Leak pressure rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresLeak")]
        public PressureMeasure PresLeak {
            get {
                return PresLeakField;
            } 
            set {
                PresLeakField = value;
                NotifyPropertyChanged("PresLeak");
            }
        }

        private PressureMeasure PresLeakField; 

        /// <summary>
        /// TqMakeup property
        /// </summary>
		[Description("Make-up torque.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqMakeup")]
        public MomentOfForceMeasure TorqueMakeup {
            get {
                return TqMakeupField;
            } 
            set {
                TqMakeupField = value;
                NotifyPropertyChanged("TorqueMakeup");
            }
        }

        private MomentOfForceMeasure TqMakeupField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// Unique identifier for this instance of Connection.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Connection.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerfHole xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerfHole", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerfHole xsd type.")]
    public partial class PerfHole : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Measured depth interval for the perforation hole.
        /// </summary>
		[Description("Measured depth interval for the perforation hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// The true vertical depth that describes the hole.
        /// </summary>
		[Description("The true vertical depth that describes the hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return TvdIntervalField;
            } 
            set {
                TvdIntervalField = value;
                NotifyPropertyChanged("TvdInterval");
            }
        }

        private TvdInterval TvdIntervalField; 

        /// <summary>
        /// The diameter of the hole.
        /// </summary>
		[Description("The diameter of the hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HoleDiameter")]
        public LengthMeasure HoleDiameter {
            get {
                return HoleDiameterField;
            } 
            set {
                HoleDiameterField = value;
                NotifyPropertyChanged("HoleDiameter");
            }
        }

        private LengthMeasure HoleDiameterField; 

        /// <summary>
        /// The angle of the holes.
        /// </summary>
		[Description("The angle of the holes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("HoleAngle")]
        public PlaneAngleMeasure HoleAngle {
            get {
                return HoleAngleField;
            } 
            set {
                HoleAngleField = value;
                NotifyPropertyChanged("HoleAngle");
            }
        }

        private PlaneAngleMeasure HoleAngleField; 

        /// <summary>
        /// The pattern of the holes.
        /// </summary>
		[StringLength(64)]
        [Description("The pattern of the holes.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("HolePattern")]
        public string HolePattern {
            get {
                return HolePatternField;
            } 
            set {
                HolePatternField = value;
                NotifyPropertyChanged("HolePattern");
            }
        }

        private string HolePatternField; 

        /// <summary>
        /// Remarks and comments about this perforated hole.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this perforated hole.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remarks")]
        public string Remarks {
            get {
                return RemarksField;
            } 
            set {
                RemarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private string RemarksField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// The density of the holes.
        /// </summary>
		[Description("The density of the holes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ReciprocalLengthMeasure")]
		[XmlElement("HoleDensity")]
        public ReciprocalLengthMeasure HoleDensity {
            get {
                return HoleDensityField;
            } 
            set {
                HoleDensityField = value;
                NotifyPropertyChanged("HoleDensity");
            }
        }

        private ReciprocalLengthMeasure HoleDensityField; 

        /// <summary>
        /// The number of holes.
        /// </summary>
		[Description("The number of holes.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("HoleCount")]
        public int? HoleCount {
            get {
                return HoleCountField;
            } 
            set {
                HoleCountField = value;
                 this.HoleCountSpecified = true;
                NotifyPropertyChanged("HoleCount");
            }
        }

        private int? HoleCountField; 

        /// <summary>
        /// HoleCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool HoleCountSpecified {
            get {
                return HoleCountSpecifiedField;
            } 
            set {
                HoleCountSpecifiedField = value;
                NotifyPropertyChanged("HoleCountSpecified");
            }
        }

        private bool HoleCountSpecifiedField; 

		/// <summary>
        /// Unique identifier for this instance of PerfHole.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PerfHole.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerfSlot xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerfSlot", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerfSlot xsd type.")]
    public partial class PerfSlot : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The height of slot.
        /// </summary>
		[Description("The height of slot.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SlotHeight")]
        public LengthMeasure SlotHeight {
            get {
                return SlotHeightField;
            } 
            set {
                SlotHeightField = value;
                NotifyPropertyChanged("SlotHeight");
            }
        }

        private LengthMeasure SlotHeightField; 

        /// <summary>
        /// The width of the slot.
        /// </summary>
		[Description("The width of the slot.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SlotWidth")]
        public LengthMeasure SlotWidth {
            get {
                return SlotWidthField;
            } 
            set {
                SlotWidthField = value;
                NotifyPropertyChanged("SlotWidth");
            }
        }

        private LengthMeasure SlotWidthField; 

        /// <summary>
        /// Distance from center point.
        /// </summary>
		[Description("Distance from center point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SlotCenterDistance")]
        public LengthMeasure SlotCenterDistance {
            get {
                return SlotCenterDistanceField;
            } 
            set {
                SlotCenterDistanceField = value;
                NotifyPropertyChanged("SlotCenterDistance");
            }
        }

        private LengthMeasure SlotCenterDistanceField; 

        /// <summary>
        /// The number of the slots.
        /// </summary>
		[Description("The number of the slots.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("SlotCount")]
        public int? SlotCount {
            get {
                return SlotCountField;
            } 
            set {
                SlotCountField = value;
                 this.SlotCountSpecified = true;
                NotifyPropertyChanged("SlotCount");
            }
        }

        private int? SlotCountField; 

        /// <summary>
        /// SlotCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SlotCountSpecified {
            get {
                return SlotCountSpecifiedField;
            } 
            set {
                SlotCountSpecifiedField = value;
                NotifyPropertyChanged("SlotCountSpecified");
            }
        }

        private bool SlotCountSpecifiedField; 

        /// <summary>
        /// Remarks and comments about this perforation slot.
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks and comments about this perforation slot.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remarks")]
        public string Remarks {
            get {
                return RemarksField;
            } 
            set {
                RemarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private string RemarksField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of PerfSlot.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PerfSlot.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ExtPropNameValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ExtPropNameValue", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ExtPropNameValue xsd type.")]
    public partial class ExtPropNameValue : Object, IUniqueId, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ExtPropNameValue class.
        /// </summary>
        public ExtPropNameValue() {}

        /// <summary>
        /// Initializes a new instance of the ExtPropNameValue class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public ExtPropNameValue(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// A string representing the name of property.
        /// </summary>
		[StringLength(64)]
        [Description("A string representing the name of property.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// A value string representing the units of measure of the value.
        /// </summary>
		[StringLength(2000)]
        [Description("A value string representing the units of measure of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Value")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 

		/// <summary>
        /// Unique identifier for this instance of ExtPropNameValue.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of ExtPropNameValue.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Equipment xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Equipment", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Equipment xsd type.")]
    public partial class Equipment : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// EquipmentName property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the piece of equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("EquipmentName")]
        public string EquipmentName {
            get {
                return EquipmentNameField;
            } 
            set {
                EquipmentNameField = value;
                NotifyPropertyChanged("EquipmentName");
            }
        }

        private string EquipmentNameField; 

        /// <summary>
        /// EquipmentType property
        /// </summary>
		[Required]
        [Description("The equipment type etc. bridge plug, bull plug. capillary tubing.")]
        [EnergisticsDataTypeAttribute(DataType = "EquipmentTypeExt")]
		[XmlElement("EquipmentType")]
        public ExtensibleEnum<EquipmentType>? EquipmentType {
            get {
                return EquipmentTypeField;
            } 
            set {
                EquipmentTypeField = value;
                NotifyPropertyChanged("EquipmentType");
            }
        }

        private ExtensibleEnum<EquipmentType>? EquipmentTypeField; 

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer of this equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("The model of the equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Model")]
        public string Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string ModelField; 

        /// <summary>
        /// CatalogId property
        /// </summary>
		[StringLength(64)]
        [Description("Catalog where equipment can be found.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CatalogId")]
        public string CatalogId {
            get {
                return CatalogIdField;
            } 
            set {
                CatalogIdField = value;
                NotifyPropertyChanged("CatalogId");
            }
        }

        private string CatalogIdField; 

        /// <summary>
        /// CatalogName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of equipment as found in the catalog.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CatalogName")]
        public string CatalogName {
            get {
                return CatalogNameField;
            } 
            set {
                CatalogNameField = value;
                NotifyPropertyChanged("CatalogName");
            }
        }

        private string CatalogNameField; 

        /// <summary>
        /// BrandName property
        /// </summary>
		[StringLength(64)]
        [Description("The equipment's brand name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("BrandName")]
        public string BrandName {
            get {
                return BrandNameField;
            } 
            set {
                BrandNameField = value;
                NotifyPropertyChanged("BrandName");
            }
        }

        private string BrandNameField; 

        /// <summary>
        /// ModelType property
        /// </summary>
		[StringLength(64)]
        [Description("The equipment's model type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ModelType")]
        public string ModelType {
            get {
                return ModelTypeField;
            } 
            set {
                ModelTypeField = value;
                NotifyPropertyChanged("ModelType");
            }
        }

        private string ModelTypeField; 

        /// <summary>
        /// Series property
        /// </summary>
		[StringLength(64)]
        [Description("Series number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Series")]
        public string Series {
            get {
                return SeriesField;
            } 
            set {
                SeriesField = value;
                NotifyPropertyChanged("Series");
            }
        }

        private string SeriesField; 

        /// <summary>
        /// IsSerialized property
        /// </summary>
		[Description("A flag that indicates the equipment has a serial number.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsSerialized")]
        public bool? IsSerialized {
            get {
                return IsSerializedField;
            } 
            set {
                IsSerializedField = value;
                 this.IsSerializedSpecified = true;
                NotifyPropertyChanged("IsSerialized");
            }
        }

        private bool? IsSerializedField; 

        /// <summary>
        /// IsSerializedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsSerializedSpecified {
            get {
                return IsSerializedSpecifiedField;
            } 
            set {
                IsSerializedSpecifiedField = value;
                NotifyPropertyChanged("IsSerializedSpecified");
            }
        }

        private bool IsSerializedSpecifiedField; 

        /// <summary>
        /// SerialNumber property
        /// </summary>
		[StringLength(64)]
        [Description("Serial number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SerialNumber")]
        public string SerialNumber {
            get {
                return SerialNumberField;
            } 
            set {
                SerialNumberField = value;
                NotifyPropertyChanged("SerialNumber");
            }
        }

        private string SerialNumberField; 

        /// <summary>
        /// PartNo property
        /// </summary>
		[StringLength(64)]
        [Description("Number that identifies this part.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PartNo")]
        public string PartNo {
            get {
                return PartNoField;
            } 
            set {
                PartNoField = value;
                NotifyPropertyChanged("PartNo");
            }
        }

        private string PartNoField; 

        /// <summary>
        /// SurfaceCondition property
        /// </summary>
		[StringLength(64)]
        [Description("Surface condition.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SurfaceCondition")]
        public string SurfaceCondition {
            get {
                return SurfaceConditionField;
            } 
            set {
                SurfaceConditionField = value;
                NotifyPropertyChanged("SurfaceCondition");
            }
        }

        private string SurfaceConditionField; 

        /// <summary>
        /// Material property
        /// </summary>
		[StringLength(64)]
        [Description("Material that the equipment is made from.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Material")]
        public string Material {
            get {
                return MaterialField;
            } 
            set {
                MaterialField = value;
                NotifyPropertyChanged("Material");
            }
        }

        private string MaterialField; 

        /// <summary>
        /// Grade property
        /// </summary>
		[Description("Grade level of this piece of material.")]
        [EnergisticsDataTypeAttribute(DataType = "GradeType")]
		[XmlElement("Grade")]
        public GradeType? Grade {
            get {
                return GradeField;
            } 
            set {
                GradeField = value;
                 this.GradeSpecified = true;
                NotifyPropertyChanged("Grade");
            }
        }

        private GradeType? GradeField; 

        /// <summary>
        /// GradeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GradeSpecified {
            get {
                return GradeSpecifiedField;
            } 
            set {
                GradeSpecifiedField = value;
                NotifyPropertyChanged("GradeSpecified");
            }
        }

        private bool GradeSpecifiedField; 

        /// <summary>
        /// UnitWeight property
        /// </summary>
		[Description("The weight per length of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerLengthMeasure")]
		[XmlElement("UnitWeight")]
        public MassPerLengthMeasure UnitWeight {
            get {
                return UnitWeightField;
            } 
            set {
                UnitWeightField = value;
                NotifyPropertyChanged("UnitWeight");
            }
        }

        private MassPerLengthMeasure UnitWeightField; 

        /// <summary>
        /// CoatingLinerApplied property
        /// </summary>
		[Description("Flag indicating whether equipment has a coating.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CoatingLinerApplied")]
        public bool? CoatingLinerApplied {
            get {
                return CoatingLinerAppliedField;
            } 
            set {
                CoatingLinerAppliedField = value;
                 this.CoatingLinerAppliedSpecified = true;
                NotifyPropertyChanged("CoatingLinerApplied");
            }
        }

        private bool? CoatingLinerAppliedField; 

        /// <summary>
        /// CoatingLinerAppliedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CoatingLinerAppliedSpecified {
            get {
                return CoatingLinerAppliedSpecifiedField;
            } 
            set {
                CoatingLinerAppliedSpecifiedField = value;
                NotifyPropertyChanged("CoatingLinerAppliedSpecified");
            }
        }

        private bool CoatingLinerAppliedSpecifiedField; 

        /// <summary>
        /// OutsideCoating property
        /// </summary>
		[Description("Equipment's outside coating based on enumeration value.")]
        [EnergisticsDataTypeAttribute(DataType = "Coating")]
		[XmlElement("OutsideCoating")]
        public Coating? OutsideCoating {
            get {
                return OutsideCoatingField;
            } 
            set {
                OutsideCoatingField = value;
                 this.OutsideCoatingSpecified = true;
                NotifyPropertyChanged("OutsideCoating");
            }
        }

        private Coating? OutsideCoatingField; 

        /// <summary>
        /// OutsideCoatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OutsideCoatingSpecified {
            get {
                return OutsideCoatingSpecifiedField;
            } 
            set {
                OutsideCoatingSpecifiedField = value;
                NotifyPropertyChanged("OutsideCoatingSpecified");
            }
        }

        private bool OutsideCoatingSpecifiedField; 

        /// <summary>
        /// InsideCoating property
        /// </summary>
		[Description("Equipment's inner coating based on enumeration value.")]
        [EnergisticsDataTypeAttribute(DataType = "Coating")]
		[XmlElement("InsideCoating")]
        public Coating? InsideCoating {
            get {
                return InsideCoatingField;
            } 
            set {
                InsideCoatingField = value;
                 this.InsideCoatingSpecified = true;
                NotifyPropertyChanged("InsideCoating");
            }
        }

        private Coating? InsideCoatingField; 

        /// <summary>
        /// InsideCoatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InsideCoatingSpecified {
            get {
                return InsideCoatingSpecifiedField;
            } 
            set {
                InsideCoatingSpecifiedField = value;
                NotifyPropertyChanged("InsideCoatingSpecified");
            }
        }

        private bool InsideCoatingSpecifiedField; 

        /// <summary>
        /// UnitLength property
        /// </summary>
		[Description("The length of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("UnitLength")]
        public LengthMeasure UnitLength {
            get {
                return UnitLengthField;
            } 
            set {
                UnitLengthField = value;
                NotifyPropertyChanged("UnitLength");
            }
        }

        private LengthMeasure UnitLengthField; 

        /// <summary>
        /// MajorOd property
        /// </summary>
		[Description("The major outside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MajorOd")]
        public LengthMeasure MajorOuterDiameter {
            get {
                return MajorOdField;
            } 
            set {
                MajorOdField = value;
                NotifyPropertyChanged("MajorOuterDiameter");
            }
        }

        private LengthMeasure MajorOdField; 

        /// <summary>
        /// MinorOd property
        /// </summary>
		[Description("The minor outside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MinorOd")]
        public LengthMeasure MinorOuterDiameter {
            get {
                return MinorOdField;
            } 
            set {
                MinorOdField = value;
                NotifyPropertyChanged("MinorOuterDiameter");
            }
        }

        private LengthMeasure MinorOdField; 

        /// <summary>
        /// Od property
        /// </summary>
		[Description("The outside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Od")]
        public LengthMeasure OuterDiameter {
            get {
                return OdField;
            } 
            set {
                OdField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure OdField; 

        /// <summary>
        /// MaxOd property
        /// </summary>
		[Description("The maximum outside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MaxOd")]
        public LengthMeasure MaxOuterDiameter {
            get {
                return MaxOdField;
            } 
            set {
                MaxOdField = value;
                NotifyPropertyChanged("MaxOuterDiameter");
            }
        }

        private LengthMeasure MaxOdField; 

        /// <summary>
        /// MinOd property
        /// </summary>
		[Description("The minimum outside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MinOd")]
        public LengthMeasure MinOuterDiameter {
            get {
                return MinOdField;
            } 
            set {
                MinOdField = value;
                NotifyPropertyChanged("MinOuterDiameter");
            }
        }

        private LengthMeasure MinOdField; 

        /// <summary>
        /// MajorId property
        /// </summary>
		[Description("The major inside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MajorId")]
        public LengthMeasure MajorId {
            get {
                return MajorIdField;
            } 
            set {
                MajorIdField = value;
                NotifyPropertyChanged("MajorId");
            }
        }

        private LengthMeasure MajorIdField; 

        /// <summary>
        /// MinorId property
        /// </summary>
		[Description("The minor inside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MinorId")]
        public LengthMeasure MinorId {
            get {
                return MinorIdField;
            } 
            set {
                MinorIdField = value;
                NotifyPropertyChanged("MinorId");
            }
        }

        private LengthMeasure MinorIdField; 

        /// <summary>
        /// Id property
        /// </summary>
		[Description("The inside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Id")]
        public LengthMeasure Id {
            get {
                return IdField;
            } 
            set {
                IdField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private LengthMeasure IdField; 

        /// <summary>
        /// MaxId property
        /// </summary>
		[Description("The maximum inside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MaxId")]
        public LengthMeasure MaxId {
            get {
                return MaxIdField;
            } 
            set {
                MaxIdField = value;
                NotifyPropertyChanged("MaxId");
            }
        }

        private LengthMeasure MaxIdField; 

        /// <summary>
        /// MinId property
        /// </summary>
		[Description("The minimum inside diameter of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MinId")]
        public LengthMeasure MinId {
            get {
                return MinIdField;
            } 
            set {
                MinIdField = value;
                NotifyPropertyChanged("MinId");
            }
        }

        private LengthMeasure MinIdField; 

        /// <summary>
        /// Drift property
        /// </summary>
		[Description("The drift diameter is the minimum inside diameter of pipe through which another tool or string can be pulled.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Drift")]
        public LengthMeasure Drift {
            get {
                return DriftField;
            } 
            set {
                DriftField = value;
                NotifyPropertyChanged("Drift");
            }
        }

        private LengthMeasure DriftField; 

        /// <summary>
        /// NominalSize property
        /// </summary>
		[Description("The nominal size of this equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("NominalSize")]
        public LengthMeasure NominalSize {
            get {
                return NominalSizeField;
            } 
            set {
                NominalSizeField = value;
                NotifyPropertyChanged("NominalSize");
            }
        }

        private LengthMeasure NominalSizeField; 

        /// <summary>
        /// NameService property
        /// </summary>
		[StringLength(64)]
        [Description("Sweet or sour service.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameService")]
        public string NameService {
            get {
                return NameServiceField;
            } 
            set {
                NameServiceField = value;
                NotifyPropertyChanged("NameService");
            }
        }

        private string NameServiceField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("The description of this equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// DescriptionPermanent property
        /// </summary>
		[StringLength(2000)]
        [Description("The description of this equipment to be permanently kept.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("DescriptionPermanent")]
        public string DescriptionPermanent {
            get {
                return DescriptionPermanentField;
            } 
            set {
                DescriptionPermanentField = value;
                NotifyPropertyChanged("DescriptionPermanent");
            }
        }

        private string DescriptionPermanentField; 

        /// <summary>
        /// Remark property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks about this equipment property.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Remark")]
        public string Remark {
            get {
                return RemarkField;
            } 
            set {
                RemarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string RemarkField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

        /// <summary>
        /// Property property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtPropNameValue")]
		[XmlElement("Property")]
        public List<ExtPropNameValue> Property {
            get {
                return PropertyField;
            } 
            set {
                PropertyField = value;
                NotifyPropertyChanged("Property");
            }
        }

         /// <summary>
         /// bool to indicate if Property has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PropertySpecified
         {
             get {
             if(PropertyField!=null)
                 return PropertyField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtPropNameValue> PropertyField; 

        /// <summary>
        /// SlotAsManufactured property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PerfSlot")]
		[XmlElement("SlotAsManufactured")]
        public List<PerfSlot> SlotAsManufactured {
            get {
                return SlotAsManufacturedField;
            } 
            set {
                SlotAsManufacturedField = value;
                NotifyPropertyChanged("SlotAsManufactured");
            }
        }

         /// <summary>
         /// bool to indicate if SlotAsManufactured has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SlotAsManufacturedSpecified
         {
             get {
             if(SlotAsManufacturedField!=null)
                 return SlotAsManufacturedField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerfSlot> SlotAsManufacturedField; 

        /// <summary>
        /// HoleAsManufactured property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PerfHole")]
		[XmlElement("HoleAsManufactured")]
        public List<PerfHole> HoleAsManufactured {
            get {
                return HoleAsManufacturedField;
            } 
            set {
                HoleAsManufacturedField = value;
                NotifyPropertyChanged("HoleAsManufactured");
            }
        }

         /// <summary>
         /// bool to indicate if HoleAsManufactured has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool HoleAsManufacturedSpecified
         {
             get {
             if(HoleAsManufacturedField!=null)
                 return HoleAsManufacturedField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerfHole> HoleAsManufacturedField; 

		/// <summary>
        /// Unique identifier for this instance of Equipment.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PerforationSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PerforationSet", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PerforationSet xsd type.")]
    public partial class PerforationSet : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// BoreholeStringReferenceId property
        /// </summary>
		[Description("Reference to the borehole that contains the perf set.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("BoreholeStringReferenceId")]
        public List<string> BoreholeStringReferenceId {
            get {
                return BoreholeStringReferenceIdField;
            } 
            set {
                BoreholeStringReferenceIdField = value;
                NotifyPropertyChanged("BoreholeStringReferenceId");
            }
        }

         /// <summary>
         /// bool to indicate if BoreholeStringReferenceId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeStringReferenceIdSpecified
         {
             get {
             if(BoreholeStringReferenceIdField!=null)
                 return BoreholeStringReferenceIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> BoreholeStringReferenceIdField; 

        /// <summary>
        /// DownholeStringReferenceId property
        /// </summary>
		[Description("Reference to the downhole string.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DownholeStringReferenceId")]
        public List<string> DownholeStringReferenceId {
            get {
                return DownholeStringReferenceIdField;
            } 
            set {
                DownholeStringReferenceIdField = value;
                NotifyPropertyChanged("DownholeStringReferenceId");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeStringReferenceId has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeStringReferenceIdSpecified
         {
             get {
             if(DownholeStringReferenceIdField!=null)
                 return DownholeStringReferenceIdField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> DownholeStringReferenceIdField; 

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Description("Measured depth interval for the entire perforation set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// TvdInterval property
        /// </summary>
		[Description("The true vertical depth of the entire perforation set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return TvdIntervalField;
            } 
            set {
                TvdIntervalField = value;
                NotifyPropertyChanged("TvdInterval");
            }
        }

        private TvdInterval TvdIntervalField; 

        /// <summary>
        /// HoleDiameter property
        /// </summary>
		[Description("The diameter of the perf holes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HoleDiameter")]
        public LengthMeasure HoleDiameter {
            get {
                return HoleDiameterField;
            } 
            set {
                HoleDiameterField = value;
                NotifyPropertyChanged("HoleDiameter");
            }
        }

        private LengthMeasure HoleDiameterField; 

        /// <summary>
        /// HoleAngle property
        /// </summary>
		[Description("The angle of the holes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("HoleAngle")]
        public PlaneAngleMeasure HoleAngle {
            get {
                return HoleAngleField;
            } 
            set {
                HoleAngleField = value;
                NotifyPropertyChanged("HoleAngle");
            }
        }

        private PlaneAngleMeasure HoleAngleField; 

        /// <summary>
        /// HolePattern property
        /// </summary>
		[StringLength(64)]
        [Description("The pattern of the holes.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("HolePattern")]
        public string HolePattern {
            get {
                return HolePatternField;
            } 
            set {
                HolePatternField = value;
                NotifyPropertyChanged("HolePattern");
            }
        }

        private string HolePatternField; 

        /// <summary>
        /// HoleDensity property
        /// </summary>
		[Description("The density of the holes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ReciprocalLengthMeasure")]
		[XmlElement("HoleDensity")]
        public ReciprocalLengthMeasure HoleDensity {
            get {
                return HoleDensityField;
            } 
            set {
                HoleDensityField = value;
                NotifyPropertyChanged("HoleDensity");
            }
        }

        private ReciprocalLengthMeasure HoleDensityField; 

        /// <summary>
        /// HoleCount property
        /// </summary>
		[Description("The number of holes.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("HoleCount")]
        public int? HoleCount {
            get {
                return HoleCountField;
            } 
            set {
                HoleCountField = value;
                 this.HoleCountSpecified = true;
                NotifyPropertyChanged("HoleCount");
            }
        }

        private int? HoleCountField; 

        /// <summary>
        /// HoleCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool HoleCountSpecified {
            get {
                return HoleCountSpecifiedField;
            } 
            set {
                HoleCountSpecifiedField = value;
                NotifyPropertyChanged("HoleCountSpecified");
            }
        }

        private bool HoleCountSpecifiedField; 

        /// <summary>
        /// FrictionFactor property
        /// </summary>
		[Description("The friction factor of each perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("FrictionFactor")]
        public double? FrictionFactor {
            get {
                return FrictionFactorField;
            } 
            set {
                FrictionFactorField = value;
                 this.FrictionFactorSpecified = true;
                NotifyPropertyChanged("FrictionFactor");
            }
        }

        private double? FrictionFactorField; 

        /// <summary>
        /// FrictionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FrictionFactorSpecified {
            get {
                return FrictionFactorSpecifiedField;
            } 
            set {
                FrictionFactorSpecifiedField = value;
                NotifyPropertyChanged("FrictionFactorSpecified");
            }
        }

        private bool FrictionFactorSpecifiedField; 

        /// <summary>
        /// FrictionPres property
        /// </summary>
		[Description("The friction pressure for the perforation set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FrictionPres")]
        public PressureMeasure FrictionPres {
            get {
                return FrictionPresField;
            } 
            set {
                FrictionPresField = value;
                NotifyPropertyChanged("FrictionPres");
            }
        }

        private PressureMeasure FrictionPresField; 

        /// <summary>
        /// DischargeCoefficient property
        /// </summary>
		[Description("A coefficient used in the equation for calculation of pressure drop  across a perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("DischargeCoefficient")]
        public double? DischargeCoefficient {
            get {
                return DischargeCoefficientField;
            } 
            set {
                DischargeCoefficientField = value;
                 this.DischargeCoefficientSpecified = true;
                NotifyPropertyChanged("DischargeCoefficient");
            }
        }

        private double? DischargeCoefficientField; 

        /// <summary>
        /// DischargeCoefficientSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DischargeCoefficientSpecified {
            get {
                return DischargeCoefficientSpecifiedField;
            } 
            set {
                DischargeCoefficientSpecifiedField = value;
                NotifyPropertyChanged("DischargeCoefficientSpecified");
            }
        }

        private bool DischargeCoefficientSpecifiedField; 

        /// <summary>
        /// PerforationTool property
        /// </summary>
		[Description("The type of perforation tool.")]
        [EnergisticsDataTypeAttribute(DataType = "PerforationToolType")]
		[XmlElement("PerforationTool")]
        public PerforationToolType? PerforationTool {
            get {
                return PerforationToolField;
            } 
            set {
                PerforationToolField = value;
                 this.PerforationToolSpecified = true;
                NotifyPropertyChanged("PerforationTool");
            }
        }

        private PerforationToolType? PerforationToolField; 

        /// <summary>
        /// PerforationToolSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerforationToolSpecified {
            get {
                return PerforationToolSpecifiedField;
            } 
            set {
                PerforationToolSpecifiedField = value;
                NotifyPropertyChanged("PerforationToolSpecified");
            }
        }

        private bool PerforationToolSpecifiedField; 

        /// <summary>
        /// PerforationPenetration property
        /// </summary>
		[Description("The penetration length of perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("PerforationPenetration")]
        public LengthMeasure PerforationPenetration {
            get {
                return PerforationPenetrationField;
            } 
            set {
                PerforationPenetrationField = value;
                NotifyPropertyChanged("PerforationPenetration");
            }
        }

        private LengthMeasure PerforationPenetrationField; 

        /// <summary>
        /// CrushZoneDiameter property
        /// </summary>
		[Description("The diameter of the crushed zone.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("CrushZoneDiameter")]
        public LengthMeasure CrushZoneDiameter {
            get {
                return CrushZoneDiameterField;
            } 
            set {
                CrushZoneDiameterField = value;
                NotifyPropertyChanged("CrushZoneDiameter");
            }
        }

        private LengthMeasure CrushZoneDiameterField; 

        /// <summary>
        /// CrushDamageRatio property
        /// </summary>
		[StringLength(64)]
        [Description("The ratio value of crash damage.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CrushDamageRatio")]
        public string CrushDamageRatio {
            get {
                return CrushDamageRatioField;
            } 
            set {
                CrushDamageRatioField = value;
                NotifyPropertyChanged("CrushDamageRatio");
            }
        }

        private string CrushDamageRatioField; 

        /// <summary>
        /// PerforationDate property
        /// </summary>
		[Description("The original perforation date.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("PerforationDate")]
        public Timestamp? PerforationDate {
            get {
                return PerforationDateField;
            } 
            set {
                PerforationDateField = value;
                 this.PerforationDateSpecified = true;
                NotifyPropertyChanged("PerforationDate");
            }
        }

        
        private bool PerforationDateSpecifiedField = false;
        
        /// <summary>
        /// PerforationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerforationDateSpecified {
            get {
                return PerforationDateSpecifiedField;
            } 
            set {
                PerforationDateSpecifiedField = value;
                NotifyPropertyChanged("PerforationDateSpecified");
            }
        }
        
        private Timestamp? PerforationDateField; 

        /// <summary>
        /// PermanentRemarks property
        /// </summary>
		[StringLength(2000)]
        [Description("Remarks regarding this perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("PermanentRemarks")]
        public string PermanentRemarks {
            get {
                return PermanentRemarksField;
            } 
            set {
                PermanentRemarksField = value;
                NotifyPropertyChanged("PermanentRemarks");
            }
        }

        private string PermanentRemarksField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EventInfo")]
		[XmlElement("EventHistory")]
        public EventInfo EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

        private EventInfo EventHistoryField; 

		/// <summary>
        /// Unique identifier for this instance of PerforationSet.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of PerforationSet.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DownholeString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DownholeString", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DownholeString xsd type.")]
    public partial class DownholeString : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// StringType property
        /// </summary>
		[Required]
        [Description("The type of string defined in the  enumeration DownholeStringType.")]
        [EnergisticsDataTypeAttribute(DataType = "DownholeStringType")]
		[XmlElement("StringType")]
        public DownholeStringType? StringType {
            get {
                return StringTypeField;
            } 
            set {
                StringTypeField = value;
                 this.StringTypeSpecified = true;
                NotifyPropertyChanged("StringType");
            }
        }

        
        private bool StringTypeSpecifiedField = false;
        
        /// <summary>
        /// StringTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StringTypeSpecified {
            get {
                return StringTypeSpecifiedField;
            } 
            set {
                StringTypeSpecifiedField = value;
                NotifyPropertyChanged("StringTypeSpecified");
            }
        }
        
        private DownholeStringType? StringTypeField; 

        /// <summary>
        /// SubStringType property
        /// </summary>
		[Description("The type of substring which can be SurfaceCasing, IntermediaCasing or ProductionCasing.")]
        [EnergisticsDataTypeAttribute(DataType = "SubStringType")]
		[XmlElement("SubStringType")]
        public SubStringType? SubStringType {
            get {
                return SubStringTypeField;
            } 
            set {
                SubStringTypeField = value;
                 this.SubStringTypeSpecified = true;
                NotifyPropertyChanged("SubStringType");
            }
        }

        private SubStringType? SubStringTypeField; 

        /// <summary>
        /// SubStringTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SubStringTypeSpecified {
            get {
                return SubStringTypeSpecifiedField;
            } 
            set {
                SubStringTypeSpecifiedField = value;
                NotifyPropertyChanged("SubStringTypeSpecified");
            }
        }

        private bool SubStringTypeSpecifiedField; 

        /// <summary>
        /// Name property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the downhole string.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// StringInstallDate property
        /// </summary>
		[Description("The install date of the downhole string.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("StringInstallDate")]
        public Timestamp? StringInstallDate {
            get {
                return StringInstallDateField;
            } 
            set {
                StringInstallDateField = value;
                 this.StringInstallDateSpecified = true;
                NotifyPropertyChanged("StringInstallDate");
            }
        }

        
        private bool StringInstallDateSpecifiedField = false;
        
        /// <summary>
        /// StringInstallDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StringInstallDateSpecified {
            get {
                return StringInstallDateSpecifiedField;
            } 
            set {
                StringInstallDateSpecifiedField = value;
                NotifyPropertyChanged("StringInstallDateSpecified");
            }
        }
        
        private Timestamp? StringInstallDateField; 

        /// <summary>
        /// ParentStringsName property
        /// </summary>
		[StringLength(64)]
        [Description("The name of parent string.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ParentStringsName")]
        public string ParentStringsName {
            get {
                return ParentStringsNameField;
            } 
            set {
                ParentStringsNameField = value;
                NotifyPropertyChanged("ParentStringsName");
            }
        }

        private string ParentStringsNameField; 

        /// <summary>
        /// StringMdInterval property
        /// </summary>
		[Description("Measured depth interval between the top and the base of the downhole string.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("StringMdInterval")]
        public MdInterval StringMDInterval {
            get {
                return StringMdIntervalField;
            } 
            set {
                StringMdIntervalField = value;
                NotifyPropertyChanged("StringMDInterval");
            }
        }

        private MdInterval StringMdIntervalField; 

        /// <summary>
        /// AxisOffset property
        /// </summary>
		[Description("The distance from a sibling string.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("AxisOffset")]
        public LengthMeasure AxisOffset {
            get {
                return AxisOffsetField;
            } 
            set {
                AxisOffsetField = value;
                NotifyPropertyChanged("AxisOffset");
            }
        }

        private LengthMeasure AxisOffsetField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Accessories property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StringAccessory")]
		[XmlArrayItem("Accessory")]
        [XmlArray("Accessories")]
        public List<StringEquipment> Accessories {
            get {
                return AccessoriesField;
            } 
            set {
                AccessoriesField = value;
                NotifyPropertyChanged("Accessories");
            }
        }

         /// <summary>
         /// bool to indicate if Accessories has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AccessoriesSpecified
         {
             get {
             if(AccessoriesField!=null)
                 return AccessoriesField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> AccessoriesField; 

        /// <summary>
        /// StringEquipmentSet property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StringEquipmentSet")]
		[XmlArrayItem("StringEquipment")]
        [XmlArray("StringEquipmentSet")]
        public List<StringEquipment> StringEquipmentSet {
            get {
                return StringEquipmentSetField;
            } 
            set {
                StringEquipmentSetField = value;
                NotifyPropertyChanged("StringEquipmentSet");
            }
        }

         /// <summary>
         /// bool to indicate if StringEquipmentSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StringEquipmentSetSpecified
         {
             get {
             if(StringEquipmentSetField!=null)
                 return StringEquipmentSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringEquipment> StringEquipmentSetField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

        /// <summary>
        /// ReferenceWellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ReferenceWellbore")]
        public DataObjectReference ReferenceWellbore {
            get {
                return ReferenceWellboreField;
            } 
            set {
                ReferenceWellboreField = value;
                NotifyPropertyChanged("ReferenceWellbore");
            }
        }

        private DataObjectReference ReferenceWellboreField; 

        /// <summary>
        /// ParentString property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DownholeString")]
		[XmlElement("ParentString")]
        public DownholeString ParentString {
            get {
                return ParentStringField;
            } 
            set {
                ParentStringField = value;
                NotifyPropertyChanged("ParentString");
            }
        }

        private DownholeString ParentStringField; 

		/// <summary>
        /// Unique identifier for this instance of DownholeString.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DownholeString.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementAdditive xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementAdditive", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementAdditive xsd type.")]
    public partial class CementAdditive : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Additive name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Additive name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameAdd")]
        public string NameAdd {
            get {
                return NameAddField;
            } 
            set {
                NameAddField = value;
                NotifyPropertyChanged("NameAdd");
            }
        }

        private string NameAddField; 

        /// <summary>
        /// Additive type or function (e.g., retarder, visosifier, weighting agent).
        /// </summary>
		[StringLength(64)]
        [Description("Additive type or function (e.g., retarder, visosifier, weighting agent).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeAdd")]
        public string TypeAdd {
            get {
                return TypeAddField;
            } 
            set {
                TypeAddField = value;
                NotifyPropertyChanged("TypeAdd");
            }
        }

        private string TypeAddField; 

        /// <summary>
        /// Wet or dry.
        /// </summary>
		[StringLength(64)]
        [Description("Wet or dry.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FormAdd")]
        public string FormAdd {
            get {
                return FormAddField;
            } 
            set {
                FormAddField = value;
                NotifyPropertyChanged("FormAdd");
            }
        }

        private string FormAddField; 

        /// <summary>
        /// Additive density.
        /// </summary>
		[Description("Additive density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensAdd")]
        public MassPerVolumeMeasure DensAdd {
            get {
                return DensAddField;
            } 
            set {
                DensAddField = value;
                NotifyPropertyChanged("DensAdd");
            }
        }

        private MassPerVolumeMeasure DensAddField; 

        /// <summary>
        /// Additive amount.
        /// </summary>
		[Required]
        [Description("Additive amount.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("Additive")]
        public MassMeasure Additive {
            get {
                return AdditiveField;
            } 
            set {
                AdditiveField = value;
                NotifyPropertyChanged("Additive");
            }
        }

        private MassMeasure AdditiveField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for the additive. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the additive.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumePerMassMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumePerMassMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VolumePerMassMeasure xsd type.")]
    public partial class VolumePerMassMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerMassMeasure class.
        /// </summary>
        public VolumePerMassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerMassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerMassMeasure(double value, VolumePerMassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerMassUom")]
        [XmlAttribute("uom")]
		
        public VolumePerMassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerMassUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementingFluid xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementingFluid", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementingFluid xsd type.")]
    public partial class CementingFluid : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// ETimTransitions property
        /// </summary>
		[Description("The elapsed time between the development of 100lbf/100sq ft gel strength and 500lbf/100 sq ft gel strength.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimTransitions")]
        public TimeMeasure ETimeTransitions {
            get {
                return ETimTransitionsField;
            } 
            set {
                ETimTransitionsField = value;
                NotifyPropertyChanged("ETimeTransitions");
            }
        }

        private TimeMeasure ETimTransitionsField; 

        /// <summary>
        /// ETimZeroGel property
        /// </summary>
		[Description("The elapsed time from initiation of the static portion of the test until the slurry attains a gel strength of 100lbf/100sq ft.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimZeroGel")]
        public TimeMeasure ETimeZeroGel {
            get {
                return ETimZeroGelField;
            } 
            set {
                ETimZeroGelField = value;
                NotifyPropertyChanged("ETimeZeroGel");
            }
        }

        private TimeMeasure ETimZeroGelField; 

        /// <summary>
        /// TypeFluid property
        /// </summary>
		[StringLength(64)]
        [Description("Fluid type: Mud, Wash, Spacer, Slurry.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeFluid")]
        public string TypeFluid {
            get {
                return TypeFluidField;
            } 
            set {
                TypeFluidField = value;
                NotifyPropertyChanged("TypeFluid");
            }
        }

        private string TypeFluidField; 

        /// <summary>
        /// FluidIndex property
        /// </summary>
		[Description("Fluid Index: 1: first fluid pumped (= original mud), last - 1 = tail cement, last = displacement mud.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("FluidIndex")]
        public long? FluidIndex {
            get {
                return FluidIndexField;
            } 
            set {
                FluidIndexField = value;
                 this.FluidIndexSpecified = true;
                NotifyPropertyChanged("FluidIndex");
            }
        }

        private long? FluidIndexField; 

        /// <summary>
        /// FluidIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidIndexSpecified {
            get {
                return FluidIndexSpecifiedField;
            } 
            set {
                FluidIndexSpecifiedField = value;
                NotifyPropertyChanged("FluidIndexSpecified");
            }
        }

        private bool FluidIndexSpecifiedField; 

        /// <summary>
        /// DescFluid property
        /// </summary>
		[StringLength(64)]
        [Description("Fluid description.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DescFluid")]
        public string DescFluid {
            get {
                return DescFluidField;
            } 
            set {
                DescFluidField = value;
                NotifyPropertyChanged("DescFluid");
            }
        }

        private string DescFluidField; 

        /// <summary>
        /// Purpose property
        /// </summary>
		[StringLength(64)]
        [Description("Purpose description.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Purpose")]
        public string Purpose {
            get {
                return PurposeField;
            } 
            set {
                PurposeField = value;
                NotifyPropertyChanged("Purpose");
            }
        }

        private string PurposeField; 

        /// <summary>
        /// ClassSlurryDryBlend property
        /// </summary>
		[StringLength(64)]
        [Description("Slurry class.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ClassSlurryDryBlend")]
        public string ClassSlurryDryBlend {
            get {
                return ClassSlurryDryBlendField;
            } 
            set {
                ClassSlurryDryBlendField = value;
                NotifyPropertyChanged("ClassSlurryDryBlend");
            }
        }

        private string ClassSlurryDryBlendField; 

        /// <summary>
        /// SlurryPlacementInterval property
        /// </summary>
		[Description("Measured depth interval between the top and base of the slurry placement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("SlurryPlacementInterval")]
        public MdInterval SlurryPlacementInterval {
            get {
                return SlurryPlacementIntervalField;
            } 
            set {
                SlurryPlacementIntervalField = value;
                NotifyPropertyChanged("SlurryPlacementInterval");
            }
        }

        private MdInterval SlurryPlacementIntervalField; 

        /// <summary>
        /// SourceWater property
        /// </summary>
		[StringLength(64)]
        [Description("Water source description.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SourceWater")]
        public string SourceWater {
            get {
                return SourceWaterField;
            } 
            set {
                SourceWaterField = value;
                NotifyPropertyChanged("SourceWater");
            }
        }

        private string SourceWaterField; 

        /// <summary>
        /// VolWater property
        /// </summary>
		[Description("Volume of water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolWater")]
        public VolumeMeasure VolWater {
            get {
                return VolWaterField;
            } 
            set {
                VolWaterField = value;
                NotifyPropertyChanged("VolWater");
            }
        }

        private VolumeMeasure VolWaterField; 

        /// <summary>
        /// VolCement property
        /// </summary>
		[Description("Volume of cement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolCement")]
        public VolumeMeasure VolCement {
            get {
                return VolCementField;
            } 
            set {
                VolCementField = value;
                NotifyPropertyChanged("VolCement");
            }
        }

        private VolumeMeasure VolCementField; 

        /// <summary>
        /// RatioMixWater property
        /// </summary>
		[Description("Mix-water ratio.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerMassMeasure")]
		[XmlElement("RatioMixWater")]
        public VolumePerMassMeasure RatioMixWater {
            get {
                return RatioMixWaterField;
            } 
            set {
                RatioMixWaterField = value;
                NotifyPropertyChanged("RatioMixWater");
            }
        }

        private VolumePerMassMeasure RatioMixWaterField; 

        /// <summary>
        /// VolFluid property
        /// </summary>
		[Description("Fluid/slurry volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolFluid")]
        public VolumeMeasure VolFluid {
            get {
                return VolFluidField;
            } 
            set {
                VolFluidField = value;
                NotifyPropertyChanged("VolFluid");
            }
        }

        private VolumeMeasure VolFluidField; 

        /// <summary>
        /// ExcessPc property
        /// </summary>
		[Description("Excess percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("ExcessPc")]
        public VolumePerVolumeMeasure ExcessPercent {
            get {
                return ExcessPcField;
            } 
            set {
                ExcessPcField = value;
                NotifyPropertyChanged("ExcessPercent");
            }
        }

        private VolumePerVolumeMeasure ExcessPcField; 

        /// <summary>
        /// VolYield property
        /// </summary>
		[Description("Slurry yield.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerMassMeasure")]
		[XmlElement("VolYield")]
        public VolumePerMassMeasure VolYield {
            get {
                return VolYieldField;
            } 
            set {
                VolYieldField = value;
                NotifyPropertyChanged("VolYield");
            }
        }

        private VolumePerMassMeasure VolYieldField; 

        /// <summary>
        /// Density property
        /// </summary>
		[Description("Fluid density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// SolidVolumeFraction property
        /// </summary>
		[Description("Equals 1 - Porosity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SolidVolumeFraction")]
        public VolumePerVolumeMeasure SolidVolumeFraction {
            get {
                return SolidVolumeFractionField;
            } 
            set {
                SolidVolumeFractionField = value;
                NotifyPropertyChanged("SolidVolumeFraction");
            }
        }

        private VolumePerVolumeMeasure SolidVolumeFractionField; 

        /// <summary>
        /// VolPumped property
        /// </summary>
		[Description("Volume pumped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolPumped")]
        public VolumeMeasure VolPumped {
            get {
                return VolPumpedField;
            } 
            set {
                VolPumpedField = value;
                NotifyPropertyChanged("VolPumped");
            }
        }

        private VolumeMeasure VolPumpedField; 

        /// <summary>
        /// VolOther property
        /// </summary>
		[Description("Other volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolOther")]
        public VolumeMeasure VolOther {
            get {
                return VolOtherField;
            } 
            set {
                VolOtherField = value;
                NotifyPropertyChanged("VolOther");
            }
        }

        private VolumeMeasure VolOtherField; 

        /// <summary>
        /// FluidRheologicalModel property
        /// </summary>
		[StringLength(64)]
        [Description("Specify one of these models: Newtonian, Bingham, Power Law, and Herschel Bulkley.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FluidRheologicalModel")]
        public string FluidRheologicalModel {
            get {
                return FluidRheologicalModelField;
            } 
            set {
                FluidRheologicalModelField = value;
                NotifyPropertyChanged("FluidRheologicalModel");
            }
        }

        private string FluidRheologicalModelField; 

        /// <summary>
        /// Viscosity property
        /// </summary>
		[Description("Viscosity (if Newtonian model) or plastic viscosity (if Bingham model).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("Viscosity")]
        public DynamicViscosityMeasure Viscosity {
            get {
                return ViscosityField;
            } 
            set {
                ViscosityField = value;
                NotifyPropertyChanged("Viscosity");
            }
        }

        private DynamicViscosityMeasure ViscosityField; 

        /// <summary>
        /// Yp property
        /// </summary>
		[Description("Yield point (Bingham and Herschel Bulkley models).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Yp")]
        public PressureMeasure YP {
            get {
                return YpField;
            } 
            set {
                YpField = value;
                NotifyPropertyChanged("YP");
            }
        }

        private PressureMeasure YpField; 

        /// <summary>
        /// N property
        /// </summary>
		[Description("Power Law index (Power Law and Herschel Bulkley models).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("N")]
        public DimensionlessMeasure N {
            get {
                return NField;
            } 
            set {
                NField = value;
                NotifyPropertyChanged("N");
            }
        }

        private DimensionlessMeasure NField; 

        /// <summary>
        /// K property
        /// </summary>
		[Description("Consistency index (Power Law and Herschel Bulkley models).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("K")]
        public DimensionlessMeasure K {
            get {
                return KField;
            } 
            set {
                KField = value;
                NotifyPropertyChanged("K");
            }
        }

        private DimensionlessMeasure KField; 

        /// <summary>
        /// Gel10SecReading property
        /// </summary>
		[Description("Gel reading after 10 seconds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Gel10SecReading")]
        public PlaneAngleMeasure Gel10SecReading {
            get {
                return Gel10SecReadingField;
            } 
            set {
                Gel10SecReadingField = value;
                NotifyPropertyChanged("Gel10SecReading");
            }
        }

        private PlaneAngleMeasure Gel10SecReadingField; 

        /// <summary>
        /// Gel10SecStrength property
        /// </summary>
		[Description("Gel strength after 10 seconds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Gel10SecStrength")]
        public PressureMeasure Gel10SecStrength {
            get {
                return Gel10SecStrengthField;
            } 
            set {
                Gel10SecStrengthField = value;
                NotifyPropertyChanged("Gel10SecStrength");
            }
        }

        private PressureMeasure Gel10SecStrengthField; 

        /// <summary>
        /// Gel1MinReading property
        /// </summary>
		[Description("Gel reading after 1 minute.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Gel1MinReading")]
        public PlaneAngleMeasure Gel1MinReading {
            get {
                return Gel1MinReadingField;
            } 
            set {
                Gel1MinReadingField = value;
                NotifyPropertyChanged("Gel1MinReading");
            }
        }

        private PlaneAngleMeasure Gel1MinReadingField; 

        /// <summary>
        /// Gel1MinStrength property
        /// </summary>
		[Description("Gel strength after 1 minute.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Gel1MinStrength")]
        public PressureMeasure Gel1MinStrength {
            get {
                return Gel1MinStrengthField;
            } 
            set {
                Gel1MinStrengthField = value;
                NotifyPropertyChanged("Gel1MinStrength");
            }
        }

        private PressureMeasure Gel1MinStrengthField; 

        /// <summary>
        /// Gel10MinReading property
        /// </summary>
		[Description("Gel reading after 10 minutes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Gel10MinReading")]
        public PlaneAngleMeasure Gel10MinReading {
            get {
                return Gel10MinReadingField;
            } 
            set {
                Gel10MinReadingField = value;
                NotifyPropertyChanged("Gel10MinReading");
            }
        }

        private PlaneAngleMeasure Gel10MinReadingField; 

        /// <summary>
        /// Gel10MinStrength property
        /// </summary>
		[Description("Gel strength after 10 minutes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Gel10MinStrength")]
        public PressureMeasure Gel10MinStrength {
            get {
                return Gel10MinStrengthField;
            } 
            set {
                Gel10MinStrengthField = value;
                NotifyPropertyChanged("Gel10MinStrength");
            }
        }

        private PressureMeasure Gel10MinStrengthField; 

        /// <summary>
        /// TypeBaseFluid property
        /// </summary>
		[StringLength(64)]
        [Description("Type of base fluid: fresh water, sea water, brine, brackish water.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeBaseFluid")]
        public string TypeBaseFluid {
            get {
                return TypeBaseFluidField;
            } 
            set {
                TypeBaseFluidField = value;
                NotifyPropertyChanged("TypeBaseFluid");
            }
        }

        private string TypeBaseFluidField; 

        /// <summary>
        /// DensBaseFluid property
        /// </summary>
		[Description("Density of base fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensBaseFluid")]
        public MassPerVolumeMeasure DensBaseFluid {
            get {
                return DensBaseFluidField;
            } 
            set {
                DensBaseFluidField = value;
                NotifyPropertyChanged("DensBaseFluid");
            }
        }

        private MassPerVolumeMeasure DensBaseFluidField; 

        /// <summary>
        /// DryBlendName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of dry blend.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DryBlendName")]
        public string DryBlendName {
            get {
                return DryBlendNameField;
            } 
            set {
                DryBlendNameField = value;
                NotifyPropertyChanged("DryBlendName");
            }
        }

        private string DryBlendNameField; 

        /// <summary>
        /// DryBlendDescription property
        /// </summary>
		[StringLength(64)]
        [Description("Description of dry blend.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DryBlendDescription")]
        public string DryBlendDescription {
            get {
                return DryBlendDescriptionField;
            } 
            set {
                DryBlendDescriptionField = value;
                NotifyPropertyChanged("DryBlendDescription");
            }
        }

        private string DryBlendDescriptionField; 

        /// <summary>
        /// MassDryBlend property
        /// </summary>
		[Description("Mass of dry blend: the blend is made of different solid additives: the volume is not constant.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("MassDryBlend")]
        public MassMeasure MassDryBlend {
            get {
                return MassDryBlendField;
            } 
            set {
                MassDryBlendField = value;
                NotifyPropertyChanged("MassDryBlend");
            }
        }

        private MassMeasure MassDryBlendField; 

        /// <summary>
        /// DensDryBlend property
        /// </summary>
		[Description("Density of dry blend.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensDryBlend")]
        public MassPerVolumeMeasure DensDryBlend {
            get {
                return DensDryBlendField;
            } 
            set {
                DensDryBlendField = value;
                NotifyPropertyChanged("DensDryBlend");
            }
        }

        private MassPerVolumeMeasure DensDryBlendField; 

        /// <summary>
        /// MassSackDryBlend property
        /// </summary>
		[Description("Weight of a sack of dry blend.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("MassSackDryBlend")]
        public MassMeasure MassSackDryBlend {
            get {
                return MassSackDryBlendField;
            } 
            set {
                MassSackDryBlendField = value;
                NotifyPropertyChanged("MassSackDryBlend");
            }
        }

        private MassMeasure MassSackDryBlendField; 

        /// <summary>
        /// FoamUsed property
        /// </summary>
		[Description("Foam used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("FoamUsed")]
        public bool? FoamUsed {
            get {
                return FoamUsedField;
            } 
            set {
                FoamUsedField = value;
                 this.FoamUsedSpecified = true;
                NotifyPropertyChanged("FoamUsed");
            }
        }

        private bool? FoamUsedField; 

        /// <summary>
        /// FoamUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FoamUsedSpecified {
            get {
                return FoamUsedSpecifiedField;
            } 
            set {
                FoamUsedSpecifiedField = value;
                NotifyPropertyChanged("FoamUsedSpecified");
            }
        }

        private bool FoamUsedSpecifiedField; 

        /// <summary>
        /// TypeGasFoam property
        /// </summary>
		[StringLength(64)]
        [Description("Gas type used for foam job.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeGasFoam")]
        public string TypeGasFoam {
            get {
                return TypeGasFoamField;
            } 
            set {
                TypeGasFoamField = value;
                NotifyPropertyChanged("TypeGasFoam");
            }
        }

        private string TypeGasFoamField; 

        /// <summary>
        /// VolGasFoam property
        /// </summary>
		[Description("Volume of gas used for foam job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolGasFoam")]
        public VolumeMeasure VolGasFoam {
            get {
                return VolGasFoamField;
            } 
            set {
                VolGasFoamField = value;
                NotifyPropertyChanged("VolGasFoam");
            }
        }

        private VolumeMeasure VolGasFoamField; 

        /// <summary>
        /// RatioConstGasMethodAv property
        /// </summary>
		[Description("Constant gas ratio method ratio.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("RatioConstGasMethodAv")]
        public VolumePerVolumeMeasure RatioConstGasMethodAverage {
            get {
                return RatioConstGasMethodAvField;
            } 
            set {
                RatioConstGasMethodAvField = value;
                NotifyPropertyChanged("RatioConstGasMethodAverage");
            }
        }

        private VolumePerVolumeMeasure RatioConstGasMethodAvField; 

        /// <summary>
        /// DensConstGasMethod property
        /// </summary>
		[Description("Constant gas ratio method: average density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensConstGasMethod")]
        public MassPerVolumeMeasure DensConstGasMethod {
            get {
                return DensConstGasMethodField;
            } 
            set {
                DensConstGasMethodField = value;
                NotifyPropertyChanged("DensConstGasMethod");
            }
        }

        private MassPerVolumeMeasure DensConstGasMethodField; 

        /// <summary>
        /// RatioConstGasMethodStart property
        /// </summary>
		[Description("Constant gas ratio method: initial method ratio.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("RatioConstGasMethodStart")]
        public VolumePerVolumeMeasure RatioConstGasMethodStart {
            get {
                return RatioConstGasMethodStartField;
            } 
            set {
                RatioConstGasMethodStartField = value;
                NotifyPropertyChanged("RatioConstGasMethodStart");
            }
        }

        private VolumePerVolumeMeasure RatioConstGasMethodStartField; 

        /// <summary>
        /// RatioConstGasMethodEnd property
        /// </summary>
		[Description("Constant gas ratio method: final method ratio.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("RatioConstGasMethodEnd")]
        public VolumePerVolumeMeasure RatioConstGasMethodEnd {
            get {
                return RatioConstGasMethodEndField;
            } 
            set {
                RatioConstGasMethodEndField = value;
                NotifyPropertyChanged("RatioConstGasMethodEnd");
            }
        }

        private VolumePerVolumeMeasure RatioConstGasMethodEndField; 

        /// <summary>
        /// DensConstGasFoam property
        /// </summary>
		[Description("Constant gas ratio method: average density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensConstGasFoam")]
        public MassPerVolumeMeasure DensConstGasFoam {
            get {
                return DensConstGasFoamField;
            } 
            set {
                DensConstGasFoamField = value;
                NotifyPropertyChanged("DensConstGasFoam");
            }
        }

        private MassPerVolumeMeasure DensConstGasFoamField; 

        /// <summary>
        /// ETimThickening property
        /// </summary>
		[Description("Test thickening time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimThickening")]
        public TimeMeasure ETimeThickening {
            get {
                return ETimThickeningField;
            } 
            set {
                ETimThickeningField = value;
                NotifyPropertyChanged("ETimeThickening");
            }
        }

        private TimeMeasure ETimThickeningField; 

        /// <summary>
        /// TempThickening property
        /// </summary>
		[Description("Test thickening temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempThickening")]
        public ThermodynamicTemperatureMeasure TempThickening {
            get {
                return TempThickeningField;
            } 
            set {
                TempThickeningField = value;
                NotifyPropertyChanged("TempThickening");
            }
        }

        private ThermodynamicTemperatureMeasure TempThickeningField; 

        /// <summary>
        /// PresTestThickening property
        /// </summary>
		[Description("Test thickening pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresTestThickening")]
        public PressureMeasure PresTestThickening {
            get {
                return PresTestThickeningField;
            } 
            set {
                PresTestThickeningField = value;
                NotifyPropertyChanged("PresTestThickening");
            }
        }

        private PressureMeasure PresTestThickeningField; 

        /// <summary>
        /// ConsTestThickening property
        /// </summary>
		[Description("Test thickening consistency/slurry viscosity: Bearden Consistency (Bc) 0 to 100.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("ConsTestThickening")]
        public DimensionlessMeasure ConsTestThickening {
            get {
                return ConsTestThickeningField;
            } 
            set {
                ConsTestThickeningField = value;
                NotifyPropertyChanged("ConsTestThickening");
            }
        }

        private DimensionlessMeasure ConsTestThickeningField; 

        /// <summary>
        /// PcFreeWater property
        /// </summary>
		[Description("Test free water na: = mL/250ML.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("PcFreeWater")]
        public VolumePerVolumeMeasure PercentFreeWater {
            get {
                return PcFreeWaterField;
            } 
            set {
                PcFreeWaterField = value;
                NotifyPropertyChanged("PercentFreeWater");
            }
        }

        private VolumePerVolumeMeasure PcFreeWaterField; 

        /// <summary>
        /// TempFreeWater property
        /// </summary>
		[Description("Test free water temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempFreeWater")]
        public ThermodynamicTemperatureMeasure TempFreeWater {
            get {
                return TempFreeWaterField;
            } 
            set {
                TempFreeWaterField = value;
                NotifyPropertyChanged("TempFreeWater");
            }
        }

        private ThermodynamicTemperatureMeasure TempFreeWaterField; 

        /// <summary>
        /// VolTestFluidLoss property
        /// </summary>
		[Description("Test fluid loss.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolTestFluidLoss")]
        public VolumeMeasure VolTestFluidLoss {
            get {
                return VolTestFluidLossField;
            } 
            set {
                VolTestFluidLossField = value;
                NotifyPropertyChanged("VolTestFluidLoss");
            }
        }

        private VolumeMeasure VolTestFluidLossField; 

        /// <summary>
        /// TempFluidLoss property
        /// </summary>
		[Description("Test fluid loss temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempFluidLoss")]
        public ThermodynamicTemperatureMeasure TempFluidLoss {
            get {
                return TempFluidLossField;
            } 
            set {
                TempFluidLossField = value;
                NotifyPropertyChanged("TempFluidLoss");
            }
        }

        private ThermodynamicTemperatureMeasure TempFluidLossField; 

        /// <summary>
        /// PresTestFluidLoss property
        /// </summary>
		[Description("Test fluid loss pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresTestFluidLoss")]
        public PressureMeasure PresTestFluidLoss {
            get {
                return PresTestFluidLossField;
            } 
            set {
                PresTestFluidLossField = value;
                NotifyPropertyChanged("PresTestFluidLoss");
            }
        }

        private PressureMeasure PresTestFluidLossField; 

        /// <summary>
        /// TimeFluidLoss property
        /// </summary>
		[Description("Test fluid loss: dehydrating test period, used to compute the API fluid loss.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("TimeFluidLoss")]
        public TimeMeasure TimeFluidLoss {
            get {
                return TimeFluidLossField;
            } 
            set {
                TimeFluidLossField = value;
                NotifyPropertyChanged("TimeFluidLoss");
            }
        }

        private TimeMeasure TimeFluidLossField; 

        /// <summary>
        /// VolAPIFluidLoss property
        /// </summary>
		[Description("API fluid loss = 2 * volTestFluidLoss * SQRT(30/timefluidloss).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolAPIFluidLoss")]
        public VolumeMeasure VolAPIFluidLoss {
            get {
                return VolAPIFluidLossField;
            } 
            set {
                VolAPIFluidLossField = value;
                NotifyPropertyChanged("VolAPIFluidLoss");
            }
        }

        private VolumeMeasure VolAPIFluidLossField; 

        /// <summary>
        /// ETimComprStren1 property
        /// </summary>
		[Description("Compressive strength time 1.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimComprStren1")]
        public TimeMeasure ETimeComprStren1 {
            get {
                return ETimComprStren1Field;
            } 
            set {
                ETimComprStren1Field = value;
                NotifyPropertyChanged("ETimeComprStren1");
            }
        }

        private TimeMeasure ETimComprStren1Field; 

        /// <summary>
        /// ETimComprStren2 property
        /// </summary>
		[Description("Compressive strength time 2.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimComprStren2")]
        public TimeMeasure ETimeComprStren2 {
            get {
                return ETimComprStren2Field;
            } 
            set {
                ETimComprStren2Field = value;
                NotifyPropertyChanged("ETimeComprStren2");
            }
        }

        private TimeMeasure ETimComprStren2Field; 

        /// <summary>
        /// PresComprStren1 property
        /// </summary>
		[Description("Compressive strength pressure 1.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresComprStren1")]
        public PressureMeasure PresComprStren1 {
            get {
                return PresComprStren1Field;
            } 
            set {
                PresComprStren1Field = value;
                NotifyPropertyChanged("PresComprStren1");
            }
        }

        private PressureMeasure PresComprStren1Field; 

        /// <summary>
        /// PresComprStren2 property
        /// </summary>
		[Description("Compressive strength pressure 2.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresComprStren2")]
        public PressureMeasure PresComprStren2 {
            get {
                return PresComprStren2Field;
            } 
            set {
                PresComprStren2Field = value;
                NotifyPropertyChanged("PresComprStren2");
            }
        }

        private PressureMeasure PresComprStren2Field; 

        /// <summary>
        /// TempComprStren1 property
        /// </summary>
		[Description("Compressive strength temperature 1.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempComprStren1")]
        public ThermodynamicTemperatureMeasure TempComprStren1 {
            get {
                return TempComprStren1Field;
            } 
            set {
                TempComprStren1Field = value;
                NotifyPropertyChanged("TempComprStren1");
            }
        }

        private ThermodynamicTemperatureMeasure TempComprStren1Field; 

        /// <summary>
        /// TempComprStren2 property
        /// </summary>
		[Description("Compressive strength temperature 2.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempComprStren2")]
        public ThermodynamicTemperatureMeasure TempComprStren2 {
            get {
                return TempComprStren2Field;
            } 
            set {
                TempComprStren2Field = value;
                NotifyPropertyChanged("TempComprStren2");
            }
        }

        private ThermodynamicTemperatureMeasure TempComprStren2Field; 

        /// <summary>
        /// DensAtPres property
        /// </summary>
		[Description("Slurry density at pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensAtPres")]
        public MassPerVolumeMeasure DensAtPres {
            get {
                return DensAtPresField;
            } 
            set {
                DensAtPresField = value;
                NotifyPropertyChanged("DensAtPres");
            }
        }

        private MassPerVolumeMeasure DensAtPresField; 

        /// <summary>
        /// VolReserved property
        /// </summary>
		[Description("Volume reserved.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolReserved")]
        public VolumeMeasure VolReserved {
            get {
                return VolReservedField;
            } 
            set {
                VolReservedField = value;
                NotifyPropertyChanged("VolReserved");
            }
        }

        private VolumeMeasure VolReservedField; 

        /// <summary>
        /// VolTotSlurry property
        /// </summary>
		[Description("Total Slurry Volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolTotSlurry")]
        public VolumeMeasure VolTotSlurry {
            get {
                return VolTotSlurryField;
            } 
            set {
                VolTotSlurryField = value;
                NotifyPropertyChanged("VolTotSlurry");
            }
        }

        private VolumeMeasure VolTotSlurryField; 

        /// <summary>
        /// CementAdditive property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CementAdditive")]
		[XmlElement("CementAdditive")]
        public List<CementAdditive> CementAdditive {
            get {
                return CementAdditiveField;
            } 
            set {
                CementAdditiveField = value;
                NotifyPropertyChanged("CementAdditive");
            }
        }

         /// <summary>
         /// bool to indicate if CementAdditive has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CementAdditiveSpecified
         {
             get {
             if(CementAdditiveField!=null)
                 return CementAdditiveField.Count>0?true:false;
             else return false;
             }
         }
        private List<CementAdditive> CementAdditiveField; 

        /// <summary>
        /// Rheometer property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Rheometer")]
		[XmlElement("Rheometer")]
        public List<Rheometer> Rheometer {
            get {
                return RheometerField;
            } 
            set {
                RheometerField = value;
                NotifyPropertyChanged("Rheometer");
            }
        }

         /// <summary>
         /// bool to indicate if Rheometer has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RheometerSpecified
         {
             get {
             if(RheometerField!=null)
                 return RheometerField.Count>0?true:false;
             else return false;
             }
         }
        private List<Rheometer> RheometerField; 

		/// <summary>
        /// Unique identifier for this cementing fluid.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this cementing fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Rheometer xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Rheometer", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Rheometer xsd type.")]
    public partial class Rheometer : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TempRheom property
        /// </summary>
		[Description("Rheometer temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempRheom")]
        public ThermodynamicTemperatureMeasure TempRheom {
            get {
                return TempRheomField;
            } 
            set {
                TempRheomField = value;
                NotifyPropertyChanged("TempRheom");
            }
        }

        private ThermodynamicTemperatureMeasure TempRheomField; 

        /// <summary>
        /// PresRheom property
        /// </summary>
		[Description("Rheometer pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresRheom")]
        public PressureMeasure PresRheom {
            get {
                return PresRheomField;
            } 
            set {
                PresRheomField = value;
                NotifyPropertyChanged("PresRheom");
            }
        }

        private PressureMeasure PresRheomField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Viscosity property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "RheometerViscosity")]
		[XmlElement("Viscosity")]
        public List<RheometerViscosity> Viscosity {
            get {
                return ViscosityField;
            } 
            set {
                ViscosityField = value;
                NotifyPropertyChanged("Viscosity");
            }
        }

         /// <summary>
         /// bool to indicate if Viscosity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ViscositySpecified
         {
             get {
             if(ViscosityField!=null)
                 return ViscosityField.Count>0?true:false;
             else return false;
             }
         }
        private List<RheometerViscosity> ViscosityField; 

		/// <summary>
        /// Unique identifier for this instance of Rheometer.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Rheometer.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RheometerViscosity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RheometerViscosity", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RheometerViscosity xsd type.")]
    public partial class RheometerViscosity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Rotational speed of the rheometer, typically in RPM.
        /// </summary>
		[Required]
        [Description("Rotational speed of the rheometer, typically in RPM.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("Speed")]
        public AngularVelocityMeasure Speed {
            get {
                return SpeedField;
            } 
            set {
                SpeedField = value;
                NotifyPropertyChanged("Speed");
            }
        }

        private AngularVelocityMeasure SpeedField; 

        /// <summary>
        /// The raw reading from a rheometer. This could be , but is not necessarily, a viscosity.
        /// </summary>
		[Required]
        [Description("The raw reading from a rheometer. This could be , but is not necessarily, a viscosity.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Viscosity")]
        public double? Viscosity {
            get {
                return ViscosityField;
            } 
            set {
                ViscosityField = value;
                NotifyPropertyChanged("Viscosity");
            }
        }

        private double? ViscosityField; 

		/// <summary>
        /// Unique identifier for this instance of RheometerViscosity.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of RheometerViscosity.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementPumpScheduleStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementPumpScheduleStep", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementPumpScheduleStep xsd type.")]
    public partial class CementPumpScheduleStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// UUID feference to a fluid used in CementJob.
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("UUID feference to a fluid used in CementJob.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("FluidReferenceId")]
        public string FluidReferenceId {
            get {
                return FluidReferenceIdField;
            } 
            set {
                FluidReferenceIdField = value;
                NotifyPropertyChanged("FluidReferenceId");
            }
        }

        private string FluidReferenceIdField; 

        /// <summary>
        /// The ratio of excess fluid to total fluid pumped during the step.
        /// </summary>
		[Description("The ratio of excess fluid to total fluid pumped during the step.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("RatioFluidExcess")]
        public VolumePerVolumeMeasure RatioFluidExcess {
            get {
                return RatioFluidExcessField;
            } 
            set {
                RatioFluidExcessField = value;
                NotifyPropertyChanged("RatioFluidExcess");
            }
        }

        private VolumePerVolumeMeasure RatioFluidExcessField; 

        /// <summary>
        /// The duration of the fluid pumping.
        /// </summary>
		[Description("The duration of the fluid pumping.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimPump")]
        public TimeMeasure ETimePump {
            get {
                return ETimPumpField;
            } 
            set {
                ETimPumpField = value;
                NotifyPropertyChanged("ETimePump");
            }
        }

        private TimeMeasure ETimPumpField; 

        /// <summary>
        /// Rate at which the fluid is pumped. 0 means it is a pause.
        /// </summary>
		[Description("Rate at which the fluid is pumped. 0 means it is a pause.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("RatePump")]
        public VolumePerTimeMeasure RatePump {
            get {
                return RatePumpField;
            } 
            set {
                RatePumpField = value;
                NotifyPropertyChanged("RatePump");
            }
        }

        private VolumePerTimeMeasure RatePumpField; 

        /// <summary>
        /// Volume pumped = eTimPump * ratePump.
        /// </summary>
		[Description("Volume pumped = eTimPump * ratePump.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolPump")]
        public VolumeMeasure VolPump {
            get {
                return VolPumpField;
            } 
            set {
                VolPumpField = value;
                NotifyPropertyChanged("VolPump");
            }
        }

        private VolumeMeasure VolPumpField; 

        /// <summary>
        /// Number of pump strokes for the fluid to be pumped (assumes the pump output is known).
        /// </summary>
		[Description("Number of pump strokes for the fluid to be pumped (assumes the pump output is known).")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("StrokePump")]
        public int? StrokePump {
            get {
                return StrokePumpField;
            } 
            set {
                StrokePumpField = value;
                 this.StrokePumpSpecified = true;
                NotifyPropertyChanged("StrokePump");
            }
        }

        private int? StrokePumpField; 

        /// <summary>
        /// StrokePumpSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StrokePumpSpecified {
            get {
                return StrokePumpSpecifiedField;
            } 
            set {
                StrokePumpSpecifiedField = value;
                NotifyPropertyChanged("StrokePumpSpecified");
            }
        }

        private bool StrokePumpSpecifiedField; 

        /// <summary>
        /// Back pressure applied during the pumping stage.
        /// </summary>
		[Description("Back pressure applied during the pumping stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresBack")]
        public PressureMeasure PresBack {
            get {
                return PresBackField;
            } 
            set {
                PresBackField = value;
                NotifyPropertyChanged("PresBack");
            }
        }

        private PressureMeasure PresBackField; 

        /// <summary>
        /// The duration of the shutdown event.
        /// </summary>
		[Description("The duration of the shutdown event.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimShutdown")]
        public TimeMeasure ETimeShutdown {
            get {
                return ETimShutdownField;
            } 
            set {
                ETimShutdownField = value;
                NotifyPropertyChanged("ETimeShutdown");
            }
        }

        private TimeMeasure ETimShutdownField; 

        /// <summary>
        /// Comments and remarks.
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

		/// <summary>
        /// Unique identifier for this pump schedule step.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this pump schedule step.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FluidLocation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FluidLocation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the FluidLocation xsd type.")]
    public partial class FluidLocation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// FluidReferenceId property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("Reference to fluid used in the CementJob.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("FluidReferenceId")]
        public string FluidReferenceId {
            get {
                return FluidReferenceIdField;
            } 
            set {
                FluidReferenceIdField = value;
                NotifyPropertyChanged("FluidReferenceId");
            }
        }

        private string FluidReferenceIdField; 

        /// <summary>
        /// MDFluidBase property
        /// </summary>
		[Required]
        [Description("Measured depth of the base of the cement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MDFluidBase")]
        public LengthMeasure MDFluidBase {
            get {
                return MDFluidBaseField;
            } 
            set {
                MDFluidBaseField = value;
                NotifyPropertyChanged("MDFluidBase");
            }
        }

        private LengthMeasure MDFluidBaseField; 

        /// <summary>
        /// MDFluidTop property
        /// </summary>
		[Required]
        [Description("Measured depth at the top of the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MDFluidTop")]
        public LengthMeasure MDFluidTop {
            get {
                return MDFluidTopField;
            } 
            set {
                MDFluidTopField = value;
                NotifyPropertyChanged("MDFluidTop");
            }
        }

        private LengthMeasure MDFluidTopField; 

        /// <summary>
        /// Volume property
        /// </summary>
		[Required]
        [Description("Volume of fluid at this location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Volume")]
        public VolumeMeasure Volume {
            get {
                return VolumeField;
            } 
            set {
                VolumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeMeasure VolumeField; 

        /// <summary>
        /// LocationType property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "WellboreFluidLocation")]
		[XmlElement("LocationType")]
        public WellboreFluidLocation? LocationType {
            get {
                return LocationTypeField;
            } 
            set {
                LocationTypeField = value;
                 this.LocationTypeSpecified = true;
                NotifyPropertyChanged("LocationType");
            }
        }

        
        private bool LocationTypeSpecifiedField = false;
        
        /// <summary>
        /// LocationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LocationTypeSpecified {
            get {
                return LocationTypeSpecifiedField;
            } 
            set {
                LocationTypeSpecifiedField = value;
                NotifyPropertyChanged("LocationTypeSpecified");
            }
        }
        
        private WellboreFluidLocation? LocationTypeField; 

		/// <summary>
        /// Unique identifier for this instance of FluidLocation.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of FluidLocation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCementStage xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementStageReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementDesignStage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementStageDesign))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCementStage", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractCementStage xsd type.")]
    public abstract partial class AbstractCementStage : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AnnularFlowAfter property
        /// </summary>
		[Description("Annular flow present after the stage was completed?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("AnnularFlowAfter")]
        public bool? AnnularFlowAfter {
            get {
                return AnnularFlowAfterField;
            } 
            set {
                AnnularFlowAfterField = value;
                 this.AnnularFlowAfterSpecified = true;
                NotifyPropertyChanged("AnnularFlowAfter");
            }
        }

        private bool? AnnularFlowAfterField; 

        /// <summary>
        /// AnnularFlowAfterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AnnularFlowAfterSpecified {
            get {
                return AnnularFlowAfterSpecifiedField;
            } 
            set {
                AnnularFlowAfterSpecifiedField = value;
                NotifyPropertyChanged("AnnularFlowAfterSpecified");
            }
        }

        private bool AnnularFlowAfterSpecifiedField; 

        /// <summary>
        /// ReciprocationSlackoff property
        /// </summary>
		[Description("Slackoff for reciprocation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("ReciprocationSlackoff")]
        public ForceMeasure ReciprocationSlackoff {
            get {
                return ReciprocationSlackoffField;
            } 
            set {
                ReciprocationSlackoffField = value;
                NotifyPropertyChanged("ReciprocationSlackoff");
            }
        }

        private ForceMeasure ReciprocationSlackoffField; 

        /// <summary>
        /// BotPlug property
        /// </summary>
		[Description("Bottom plug used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("BotPlug")]
        public bool? BotPlug {
            get {
                return BotPlugField;
            } 
            set {
                BotPlugField = value;
                 this.BotPlugSpecified = true;
                NotifyPropertyChanged("BotPlug");
            }
        }

        private bool? BotPlugField; 

        /// <summary>
        /// BotPlugSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BotPlugSpecified {
            get {
                return BotPlugSpecifiedField;
            } 
            set {
                BotPlugSpecifiedField = value;
                NotifyPropertyChanged("BotPlugSpecified");
            }
        }

        private bool BotPlugSpecifiedField; 

        /// <summary>
        /// BotPlugNumber property
        /// </summary>
		[Description("Amount of bottom plug used.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("BotPlugNumber")]
        public int? BotPlugNumber {
            get {
                return BotPlugNumberField;
            } 
            set {
                BotPlugNumberField = value;
                 this.BotPlugNumberSpecified = true;
                NotifyPropertyChanged("BotPlugNumber");
            }
        }

        private int? BotPlugNumberField; 

        /// <summary>
        /// BotPlugNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BotPlugNumberSpecified {
            get {
                return BotPlugNumberSpecifiedField;
            } 
            set {
                BotPlugNumberSpecifiedField = value;
                NotifyPropertyChanged("BotPlugNumberSpecified");
            }
        }

        private bool BotPlugNumberSpecifiedField; 

        /// <summary>
        /// DiaTailPipe property
        /// </summary>
		[Description("Tail pipe size (diameter).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaTailPipe")]
        public LengthMeasure DiaTailPipe {
            get {
                return DiaTailPipeField;
            } 
            set {
                DiaTailPipeField = value;
                NotifyPropertyChanged("DiaTailPipe");
            }
        }

        private LengthMeasure DiaTailPipeField; 

        /// <summary>
        /// DisplacementFluidRefId property
        /// </summary>
		[RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("Reference to displacement fluid properties.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("DisplacementFluidRefId")]
        public string DisplacementFluidRefId {
            get {
                return DisplacementFluidRefIdField;
            } 
            set {
                DisplacementFluidRefIdField = value;
                NotifyPropertyChanged("DisplacementFluidRefId");
            }
        }

        private string DisplacementFluidRefIdField; 

        /// <summary>
        /// ETimPresHeld property
        /// </summary>
		[Description("Time the pressure was held.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimPresHeld")]
        public TimeMeasure ETimePresHeld {
            get {
                return ETimPresHeldField;
            } 
            set {
                ETimPresHeldField = value;
                NotifyPropertyChanged("ETimePresHeld");
            }
        }

        private TimeMeasure ETimPresHeldField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// FlowrateMudCirc property
        /// </summary>
		[Description("Rate the mud was circulated during the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateMudCirc")]
        public VolumePerTimeMeasure FlowrateMudCirc {
            get {
                return FlowrateMudCircField;
            } 
            set {
                FlowrateMudCircField = value;
                NotifyPropertyChanged("FlowrateMudCirc");
            }
        }

        private VolumePerTimeMeasure FlowrateMudCircField; 

        /// <summary>
        /// Gel10Min property
        /// </summary>
		[Description("Gels-10Min (in hole at start of job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Gel10Min")]
        public PressureMeasure Gel10Min {
            get {
                return Gel10MinField;
            } 
            set {
                Gel10MinField = value;
                NotifyPropertyChanged("Gel10Min");
            }
        }

        private PressureMeasure Gel10MinField; 

        /// <summary>
        /// Gel10Sec property
        /// </summary>
		[Description("Gels-10Sec (in hole at start of job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Gel10Sec")]
        public PressureMeasure Gel10Sec {
            get {
                return Gel10SecField;
            } 
            set {
                Gel10SecField = value;
                NotifyPropertyChanged("Gel10Sec");
            }
        }

        private PressureMeasure Gel10SecField; 

        /// <summary>
        /// MdCircOut property
        /// </summary>
		[Description("Circulate out measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdCircOut")]
        public MeasuredDepthCoord MDCircOut {
            get {
                return MdCircOutField;
            } 
            set {
                MdCircOutField = value;
                NotifyPropertyChanged("MDCircOut");
            }
        }

        private MeasuredDepthCoord MdCircOutField; 

        /// <summary>
        /// MdCoilTbg property
        /// </summary>
		[Description("Measured depth of coil tubing (multi-stage cement job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdCoilTbg")]
        public MeasuredDepthCoord MDCoilTbg {
            get {
                return MdCoilTbgField;
            } 
            set {
                MdCoilTbgField = value;
                NotifyPropertyChanged("MDCoilTbg");
            }
        }

        private MeasuredDepthCoord MdCoilTbgField; 

        /// <summary>
        /// MdString property
        /// </summary>
		[Description("Measured depth of string (multi-stage cement job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdString")]
        public MeasuredDepthCoord MDString {
            get {
                return MdStringField;
            } 
            set {
                MdStringField = value;
                NotifyPropertyChanged("MDString");
            }
        }

        private MeasuredDepthCoord MdStringField; 

        /// <summary>
        /// MdTool property
        /// </summary>
		[Description("Measured depth of the tool (multi-stage cement job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdTool")]
        public MeasuredDepthCoord MDTool {
            get {
                return MdToolField;
            } 
            set {
                MdToolField = value;
                NotifyPropertyChanged("MDTool");
            }
        }

        private MeasuredDepthCoord MdToolField; 

        /// <summary>
        /// MixMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Mix method.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MixMethod")]
        public string MixMethod {
            get {
                return MixMethodField;
            } 
            set {
                MixMethodField = value;
                NotifyPropertyChanged("MixMethod");
            }
        }

        private string MixMethodField; 

        /// <summary>
        /// NumStage property
        /// </summary>
		[Required]
        [Description("Stage number.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumStage")]
        public int? NumStage {
            get {
                return NumStageField;
            } 
            set {
                NumStageField = value;
                NotifyPropertyChanged("NumStage");
            }
        }

        private int? NumStageField; 

        /// <summary>
        /// ReciprocationOverpull property
        /// </summary>
		[Description("Overpull amount for reciprocation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("ReciprocationOverpull")]
        public ForceMeasure ReciprocationOverpull {
            get {
                return ReciprocationOverpullField;
            } 
            set {
                ReciprocationOverpullField = value;
                NotifyPropertyChanged("ReciprocationOverpull");
            }
        }

        private ForceMeasure ReciprocationOverpullField; 

        /// <summary>
        /// PillBelowPlug property
        /// </summary>
		[Description("Pill below plug?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("PillBelowPlug")]
        public bool? PillBelowPlug {
            get {
                return PillBelowPlugField;
            } 
            set {
                PillBelowPlugField = value;
                 this.PillBelowPlugSpecified = true;
                NotifyPropertyChanged("PillBelowPlug");
            }
        }

        private bool? PillBelowPlugField; 

        /// <summary>
        /// PillBelowPlugSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PillBelowPlugSpecified {
            get {
                return PillBelowPlugSpecifiedField;
            } 
            set {
                PillBelowPlugSpecifiedField = value;
                NotifyPropertyChanged("PillBelowPlugSpecified");
            }
        }

        private bool PillBelowPlugSpecifiedField; 

        /// <summary>
        /// PlugCatcher property
        /// </summary>
		[Description("Plug catcher?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("PlugCatcher")]
        public bool? PlugCatcher {
            get {
                return PlugCatcherField;
            } 
            set {
                PlugCatcherField = value;
                 this.PlugCatcherSpecified = true;
                NotifyPropertyChanged("PlugCatcher");
            }
        }

        private bool? PlugCatcherField; 

        /// <summary>
        /// PlugCatcherSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PlugCatcherSpecified {
            get {
                return PlugCatcherSpecifiedField;
            } 
            set {
                PlugCatcherSpecifiedField = value;
                NotifyPropertyChanged("PlugCatcherSpecified");
            }
        }

        private bool PlugCatcherSpecifiedField; 

        /// <summary>
        /// PresBackPressure property
        /// </summary>
		[Description("Constant back pressure applied while pumping the job (can be superseded by a back pressure per pumping stage).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresBackPressure")]
        public PressureMeasure PresBackPressure {
            get {
                return PresBackPressureField;
            } 
            set {
                PresBackPressureField = value;
                NotifyPropertyChanged("PresBackPressure");
            }
        }

        private PressureMeasure PresBackPressureField; 

        /// <summary>
        /// PresBump property
        /// </summary>
		[Description("Pressure plug bumped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresBump")]
        public PressureMeasure PresBump {
            get {
                return PresBumpField;
            } 
            set {
                PresBumpField = value;
                NotifyPropertyChanged("PresBump");
            }
        }

        private PressureMeasure PresBumpField; 

        /// <summary>
        /// PresCoilTbgEnd property
        /// </summary>
		[Description("Pressure coiled tubing end.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresCoilTbgEnd")]
        public PressureMeasure PresCoilTbgEnd {
            get {
                return PresCoilTbgEndField;
            } 
            set {
                PresCoilTbgEndField = value;
                NotifyPropertyChanged("PresCoilTbgEnd");
            }
        }

        private PressureMeasure PresCoilTbgEndField; 

        /// <summary>
        /// PresCoilTbgStart property
        /// </summary>
		[Description("Pressure coiled tubing start")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresCoilTbgStart")]
        public PressureMeasure PresCoilTbgStart {
            get {
                return PresCoilTbgStartField;
            } 
            set {
                PresCoilTbgStartField = value;
                NotifyPropertyChanged("PresCoilTbgStart");
            }
        }

        private PressureMeasure PresCoilTbgStartField; 

        /// <summary>
        /// PresCsgEnd property
        /// </summary>
		[Description("Casing pressure at the end of the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresCsgEnd")]
        public PressureMeasure PresCsgEnd {
            get {
                return PresCsgEndField;
            } 
            set {
                PresCsgEndField = value;
                NotifyPropertyChanged("PresCsgEnd");
            }
        }

        private PressureMeasure PresCsgEndField; 

        /// <summary>
        /// PresCsgStart property
        /// </summary>
		[Description("Casing pressure at the start of the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresCsgStart")]
        public PressureMeasure PresCsgStart {
            get {
                return PresCsgStartField;
            } 
            set {
                PresCsgStartField = value;
                NotifyPropertyChanged("PresCsgStart");
            }
        }

        private PressureMeasure PresCsgStartField; 

        /// <summary>
        /// PresDisplace property
        /// </summary>
		[Description("Final displacement pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresDisplace")]
        public PressureMeasure PresDisplace {
            get {
                return PresDisplaceField;
            } 
            set {
                PresDisplaceField = value;
                NotifyPropertyChanged("PresDisplace");
            }
        }

        private PressureMeasure PresDisplaceField; 

        /// <summary>
        /// PresHeld property
        /// </summary>
		[Description("Pressure held to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresHeld")]
        public PressureMeasure PresHeld {
            get {
                return PresHeldField;
            } 
            set {
                PresHeldField = value;
                NotifyPropertyChanged("PresHeld");
            }
        }

        private PressureMeasure PresHeldField; 

        /// <summary>
        /// PresMudCirc property
        /// </summary>
		[Description("Mud circulation pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresMudCirc")]
        public PressureMeasure PresMudCirc {
            get {
                return PresMudCircField;
            } 
            set {
                PresMudCircField = value;
                NotifyPropertyChanged("PresMudCirc");
            }
        }

        private PressureMeasure PresMudCircField; 

        /// <summary>
        /// PresTbgEnd property
        /// </summary>
		[Description("Tubing pressure at the end of the job (not coiled tubing).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresTbgEnd")]
        public PressureMeasure PresTbgEnd {
            get {
                return PresTbgEndField;
            } 
            set {
                PresTbgEndField = value;
                NotifyPropertyChanged("PresTbgEnd");
            }
        }

        private PressureMeasure PresTbgEndField; 

        /// <summary>
        /// PresTbgStart property
        /// </summary>
		[Description("Tubing pressure at the start of the job (not coiled tubing).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresTbgStart")]
        public PressureMeasure PresTbgStart {
            get {
                return PresTbgStartField;
            } 
            set {
                PresTbgStartField = value;
                NotifyPropertyChanged("PresTbgStart");
            }
        }

        private PressureMeasure PresTbgStartField; 

        /// <summary>
        /// PvMud property
        /// </summary>
		[Description("Plastic viscosity (in the hole at the start of the job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("PvMud")]
        public DynamicViscosityMeasure PVMud {
            get {
                return PvMudField;
            } 
            set {
                PvMudField = value;
                NotifyPropertyChanged("PVMud");
            }
        }

        private DynamicViscosityMeasure PvMudField; 

        /// <summary>
        /// SqueezeObjective property
        /// </summary>
		[StringLength(64)]
        [Description("Squeeze objective.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SqueezeObjective")]
        public string SqueezeObjective {
            get {
                return SqueezeObjectiveField;
            } 
            set {
                SqueezeObjectiveField = value;
                NotifyPropertyChanged("SqueezeObjective");
            }
        }

        private string SqueezeObjectiveField; 

        /// <summary>
        /// StageMdInterval property
        /// </summary>
		[Description("Measured depth interval for the cement stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("StageMdInterval")]
        public MdInterval StageMDInterval {
            get {
                return StageMdIntervalField;
            } 
            set {
                StageMdIntervalField = value;
                NotifyPropertyChanged("StageMDInterval");
            }
        }

        private MdInterval StageMdIntervalField; 

        /// <summary>
        /// TailPipePerf property
        /// </summary>
		[Description("Tail pipe perforated?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("TailPipePerf")]
        public bool? TailPipePerf {
            get {
                return TailPipePerfField;
            } 
            set {
                TailPipePerfField = value;
                 this.TailPipePerfSpecified = true;
                NotifyPropertyChanged("TailPipePerf");
            }
        }

        private bool? TailPipePerfField; 

        /// <summary>
        /// TailPipePerfSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TailPipePerfSpecified {
            get {
                return TailPipePerfSpecifiedField;
            } 
            set {
                TailPipePerfSpecifiedField = value;
                NotifyPropertyChanged("TailPipePerfSpecified");
            }
        }

        private bool TailPipePerfSpecifiedField; 

        /// <summary>
        /// TailPipeUsed property
        /// </summary>
		[Description("Tail pipe used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("TailPipeUsed")]
        public bool? TailPipeUsed {
            get {
                return TailPipeUsedField;
            } 
            set {
                TailPipeUsedField = value;
                 this.TailPipeUsedSpecified = true;
                NotifyPropertyChanged("TailPipeUsed");
            }
        }

        private bool? TailPipeUsedField; 

        /// <summary>
        /// TailPipeUsedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TailPipeUsedSpecified {
            get {
                return TailPipeUsedSpecifiedField;
            } 
            set {
                TailPipeUsedSpecifiedField = value;
                NotifyPropertyChanged("TailPipeUsedSpecified");
            }
        }

        private bool TailPipeUsedSpecifiedField; 

        /// <summary>
        /// TempBHCT property
        /// </summary>
		[Description("Bottomhole temperature: circulating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempBHCT")]
        public ThermodynamicTemperatureMeasure TempBHCT {
            get {
                return TempBHCTField;
            } 
            set {
                TempBHCTField = value;
                NotifyPropertyChanged("TempBHCT");
            }
        }

        private ThermodynamicTemperatureMeasure TempBHCTField; 

        /// <summary>
        /// TempBHST property
        /// </summary>
		[Description("Bottomhole temperature: static.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempBHST")]
        public ThermodynamicTemperatureMeasure TempBHST {
            get {
                return TempBHSTField;
            } 
            set {
                TempBHSTField = value;
                NotifyPropertyChanged("TempBHST");
            }
        }

        private ThermodynamicTemperatureMeasure TempBHSTField; 

        /// <summary>
        /// TopPlug property
        /// </summary>
		[Description("Top plug used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("TopPlug")]
        public bool? TopPlug {
            get {
                return TopPlugField;
            } 
            set {
                TopPlugField = value;
                 this.TopPlugSpecified = true;
                NotifyPropertyChanged("TopPlug");
            }
        }

        private bool? TopPlugField; 

        /// <summary>
        /// TopPlugSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TopPlugSpecified {
            get {
                return TopPlugSpecifiedField;
            } 
            set {
                TopPlugSpecifiedField = value;
                NotifyPropertyChanged("TopPlugSpecified");
            }
        }

        private bool TopPlugSpecifiedField; 

        /// <summary>
        /// TypeOriginalMud property
        /// </summary>
		[StringLength(64)]
        [Description("Type of mud in the hole.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeOriginalMud")]
        public string TypeOriginalMud {
            get {
                return TypeOriginalMudField;
            } 
            set {
                TypeOriginalMudField = value;
                NotifyPropertyChanged("TypeOriginalMud");
            }
        }

        private string TypeOriginalMudField; 

        /// <summary>
        /// TypeStage property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Stage type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeStage")]
        public string TypeStage {
            get {
                return TypeStageField;
            } 
            set {
                TypeStageField = value;
                NotifyPropertyChanged("TypeStage");
            }
        }

        private string TypeStageField; 

        /// <summary>
        /// VolCircPrior property
        /// </summary>
		[Description("Total volume circulated before starting the job/stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolCircPrior")]
        public VolumeMeasure VolCircPrior {
            get {
                return VolCircPriorField;
            } 
            set {
                VolCircPriorField = value;
                NotifyPropertyChanged("VolCircPrior");
            }
        }

        private VolumeMeasure VolCircPriorField; 

        /// <summary>
        /// VolCsgIn property
        /// </summary>
		[Description("Total volume inside the casing for this stage placement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolCsgIn")]
        public VolumeMeasure VolCsgIn {
            get {
                return VolCsgInField;
            } 
            set {
                VolCsgInField = value;
                NotifyPropertyChanged("VolCsgIn");
            }
        }

        private VolumeMeasure VolCsgInField; 

        /// <summary>
        /// VolCsgOut property
        /// </summary>
		[Description("Total volume outside casing for this stage placement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolCsgOut")]
        public VolumeMeasure VolCsgOut {
            get {
                return VolCsgOutField;
            } 
            set {
                VolCsgOutField = value;
                NotifyPropertyChanged("VolCsgOut");
            }
        }

        private VolumeMeasure VolCsgOutField; 

        /// <summary>
        /// VolDisplaceFluid property
        /// </summary>
		[Description("Volume of displacement fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolDisplaceFluid")]
        public VolumeMeasure VolDisplaceFluid {
            get {
                return VolDisplaceFluidField;
            } 
            set {
                VolDisplaceFluidField = value;
                NotifyPropertyChanged("VolDisplaceFluid");
            }
        }

        private VolumeMeasure VolDisplaceFluidField; 

        /// <summary>
        /// VolExcess property
        /// </summary>
		[Description("Excess volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolExcess")]
        public VolumeMeasure VolExcess {
            get {
                return VolExcessField;
            } 
            set {
                VolExcessField = value;
                NotifyPropertyChanged("VolExcess");
            }
        }

        private VolumeMeasure VolExcessField; 

        /// <summary>
        /// VolExcessMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Method to estimate excess volume.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("VolExcessMethod")]
        public string VolExcessMethod {
            get {
                return VolExcessMethodField;
            } 
            set {
                VolExcessMethodField = value;
                NotifyPropertyChanged("VolExcessMethod");
            }
        }

        private string VolExcessMethodField; 

        /// <summary>
        /// VolMudLost property
        /// </summary>
		[Description("Total mud lost.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolMudLost")]
        public VolumeMeasure VolMudLost {
            get {
                return VolMudLostField;
            } 
            set {
                VolMudLostField = value;
                NotifyPropertyChanged("VolMudLost");
            }
        }

        private VolumeMeasure VolMudLostField; 

        /// <summary>
        /// VolReturns property
        /// </summary>
		[Description("Volume of returns.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolReturns")]
        public VolumeMeasure VolReturns {
            get {
                return VolReturnsField;
            } 
            set {
                VolReturnsField = value;
                NotifyPropertyChanged("VolReturns");
            }
        }

        private VolumeMeasure VolReturnsField; 

        /// <summary>
        /// WtMud property
        /// </summary>
		[Description("Mud density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("WtMud")]
        public MassPerVolumeMeasure WeightMud {
            get {
                return WtMudField;
            } 
            set {
                WtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private MassPerVolumeMeasure WtMudField; 

        /// <summary>
        /// YpMud property
        /// </summary>
		[Description("Yield point (in the hole at the start of the job).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("YpMud")]
        public PressureMeasure YPMud {
            get {
                return YpMudField;
            } 
            set {
                YpMudField = value;
                NotifyPropertyChanged("YPMud");
            }
        }

        private PressureMeasure YpMudField; 

        /// <summary>
        /// OriginalFluidLocation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidLocation")]
		[XmlElement("OriginalFluidLocation")]
        public List<FluidLocation> OriginalFluidLocation {
            get {
                return OriginalFluidLocationField;
            } 
            set {
                OriginalFluidLocationField = value;
                NotifyPropertyChanged("OriginalFluidLocation");
            }
        }

         /// <summary>
         /// bool to indicate if OriginalFluidLocation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OriginalFluidLocationSpecified
         {
             get {
             if(OriginalFluidLocationField!=null)
                 return OriginalFluidLocationField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidLocation> OriginalFluidLocationField; 

        /// <summary>
        /// EndingFluidLocation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FluidLocation")]
		[XmlElement("EndingFluidLocation")]
        public List<FluidLocation> EndingFluidLocation {
            get {
                return EndingFluidLocationField;
            } 
            set {
                EndingFluidLocationField = value;
                NotifyPropertyChanged("EndingFluidLocation");
            }
        }

         /// <summary>
         /// bool to indicate if EndingFluidLocation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EndingFluidLocationSpecified
         {
             get {
             if(EndingFluidLocationField!=null)
                 return EndingFluidLocationField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidLocation> EndingFluidLocationField; 

        /// <summary>
        /// Step property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CementPumpScheduleStep")]
		[XmlElement("Step")]
        public List<CementPumpScheduleStep> Step {
            get {
                return StepField;
            } 
            set {
                StepField = value;
                NotifyPropertyChanged("Step");
            }
        }

         /// <summary>
         /// bool to indicate if Step has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StepSpecified
         {
             get {
             if(StepField!=null)
                 return StepField.Count>0?true:false;
             else return false;
             }
         }
        private List<CementPumpScheduleStep> StepField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementStageReport xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementStageReport", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementStageReport xsd type.")]
    public partial class CementStageReport : AbstractCementStage, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time when mixing of cement started.
        /// </summary>
		[Description("Date and time when mixing of cement started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimMixStart")]
        public Timestamp? DateTimeMixStart {
            get {
                return DTimMixStartField;
            } 
            set {
                DTimMixStartField = value;
                 this.DateTimeMixStartSpecified = true;
                NotifyPropertyChanged("DateTimeMixStart");
            }
        }

        
        private bool DateTimeMixStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeMixStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeMixStartSpecified {
            get {
                return DateTimeMixStartSpecifiedField;
            } 
            set {
                DateTimeMixStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeMixStartSpecified");
            }
        }
        
        private Timestamp? DTimMixStartField; 

        /// <summary>
        /// Date and time when pumping cement started.
        /// </summary>
		[Description("Date and time when pumping cement started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimPumpStart")]
        public Timestamp? DateTimePumpStart {
            get {
                return DTimPumpStartField;
            } 
            set {
                DTimPumpStartField = value;
                 this.DateTimePumpStartSpecified = true;
                NotifyPropertyChanged("DateTimePumpStart");
            }
        }

        
        private bool DateTimePumpStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimePumpStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePumpStartSpecified {
            get {
                return DateTimePumpStartSpecifiedField;
            } 
            set {
                DateTimePumpStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimePumpStartSpecified");
            }
        }
        
        private Timestamp? DTimPumpStartField; 

        /// <summary>
        /// Date and time when pumping cement ended.
        /// </summary>
		[Description("Date and time when pumping cement ended.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimPumpEnd")]
        public Timestamp? DateTimePumpEnd {
            get {
                return DTimPumpEndField;
            } 
            set {
                DTimPumpEndField = value;
                 this.DateTimePumpEndSpecified = true;
                NotifyPropertyChanged("DateTimePumpEnd");
            }
        }

        
        private bool DateTimePumpEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimePumpEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePumpEndSpecified {
            get {
                return DateTimePumpEndSpecifiedField;
            } 
            set {
                DateTimePumpEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimePumpEndSpecified");
            }
        }
        
        private Timestamp? DTimPumpEndField; 

        /// <summary>
        /// Date and time when displacing of cement started.
        /// </summary>
		[Description("Date and time when displacing of cement started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimDisplaceStart")]
        public Timestamp? DateTimeDisplaceStart {
            get {
                return DTimDisplaceStartField;
            } 
            set {
                DTimDisplaceStartField = value;
                 this.DateTimeDisplaceStartSpecified = true;
                NotifyPropertyChanged("DateTimeDisplaceStart");
            }
        }

        
        private bool DateTimeDisplaceStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeDisplaceStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeDisplaceStartSpecified {
            get {
                return DateTimeDisplaceStartSpecifiedField;
            } 
            set {
                DateTimeDisplaceStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeDisplaceStartSpecified");
            }
        }
        
        private Timestamp? DTimDisplaceStartField; 

        /// <summary>
        /// Breakdown pressure.
        /// </summary>
		[Description("Breakdown pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresBreakDown")]
        public PressureMeasure PresBreakDown {
            get {
                return PresBreakDownField;
            } 
            set {
                PresBreakDownField = value;
                NotifyPropertyChanged("PresBreakDown");
            }
        }

        private PressureMeasure PresBreakDownField; 

        /// <summary>
        /// Breakdown rate.
        /// </summary>
		[Description("Breakdown rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateBreakDown")]
        public VolumePerTimeMeasure FlowrateBreakDown {
            get {
                return FlowrateBreakDownField;
            } 
            set {
                FlowrateBreakDownField = value;
                NotifyPropertyChanged("FlowrateBreakDown");
            }
        }

        private VolumePerTimeMeasure FlowrateBreakDownField; 

        /// <summary>
        /// Average displacement rate.
        /// </summary>
		[Description("Average displacement rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateDisplaceAv")]
        public VolumePerTimeMeasure FlowrateDisplaceAverage {
            get {
                return FlowrateDisplaceAvField;
            } 
            set {
                FlowrateDisplaceAvField = value;
                NotifyPropertyChanged("FlowrateDisplaceAverage");
            }
        }

        private VolumePerTimeMeasure FlowrateDisplaceAvField; 

        /// <summary>
        /// Maximum displacement rate.
        /// </summary>
		[Description("Maximum displacement rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateDisplaceMx")]
        public VolumePerTimeMeasure FlowrateDisplaceMax {
            get {
                return FlowrateDisplaceMxField;
            } 
            set {
                FlowrateDisplaceMxField = value;
                NotifyPropertyChanged("FlowrateDisplaceMax");
            }
        }

        private VolumePerTimeMeasure FlowrateDisplaceMxField; 

        /// <summary>
        /// Squeeze pressure average.
        /// </summary>
		[Description("Squeeze pressure average.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresSqueezeAv")]
        public PressureMeasure PresSqueezeAverage {
            get {
                return PresSqueezeAvField;
            } 
            set {
                PresSqueezeAvField = value;
                NotifyPropertyChanged("PresSqueezeAverage");
            }
        }

        private PressureMeasure PresSqueezeAvField; 

        /// <summary>
        /// Squeeze pressure final.
        /// </summary>
		[Description("Squeeze pressure final.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresSqueezeEnd")]
        public PressureMeasure PresSqueezeEnd {
            get {
                return PresSqueezeEndField;
            } 
            set {
                PresSqueezeEndField = value;
                NotifyPropertyChanged("PresSqueezeEnd");
            }
        }

        private PressureMeasure PresSqueezeEndField; 

        /// <summary>
        /// Squeeze pressure held. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Squeeze pressure held.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("PresSqueezeHeld")]
        public bool? PresSqueezeHeld {
            get {
                return PresSqueezeHeldField;
            } 
            set {
                PresSqueezeHeldField = value;
                 this.PresSqueezeHeldSpecified = true;
                NotifyPropertyChanged("PresSqueezeHeld");
            }
        }

        private bool? PresSqueezeHeldField; 

        /// <summary>
        /// PresSqueezeHeldSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PresSqueezeHeldSpecified {
            get {
                return PresSqueezeHeldSpecifiedField;
            } 
            set {
                PresSqueezeHeldSpecifiedField = value;
                NotifyPropertyChanged("PresSqueezeHeldSpecified");
            }
        }

        private bool PresSqueezeHeldSpecifiedField; 

        /// <summary>
        /// Elapsed time of mud circulation before the job/stage.
        /// </summary>
		[Description("Elapsed time of mud circulation before the job/stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimMudCirculation")]
        public TimeMeasure ETimeMudCirculation {
            get {
                return ETimMudCirculationField;
            } 
            set {
                ETimMudCirculationField = value;
                NotifyPropertyChanged("ETimeMudCirculation");
            }
        }

        private TimeMeasure ETimMudCirculationField; 

        /// <summary>
        /// Squeeze pressure left on pipe.
        /// </summary>
		[Description("Squeeze pressure left on pipe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresSqueeze")]
        public PressureMeasure PresSqueeze {
            get {
                return PresSqueezeField;
            } 
            set {
                PresSqueezeField = value;
                NotifyPropertyChanged("PresSqueeze");
            }
        }

        private PressureMeasure PresSqueezeField; 

        /// <summary>
        /// Squeeze job average rate.
        /// </summary>
		[Description("Squeeze job average rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateSqueezeAv")]
        public VolumePerTimeMeasure FlowrateSqueezeAverage {
            get {
                return FlowrateSqueezeAvField;
            } 
            set {
                FlowrateSqueezeAvField = value;
                NotifyPropertyChanged("FlowrateSqueezeAverage");
            }
        }

        private VolumePerTimeMeasure FlowrateSqueezeAvField; 

        /// <summary>
        /// Squeeze job maximum rate.
        /// </summary>
		[Description("Squeeze job maximum rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateSqueezeMx")]
        public VolumePerTimeMeasure FlowrateSqueezeMax {
            get {
                return FlowrateSqueezeMxField;
            } 
            set {
                FlowrateSqueezeMxField = value;
                NotifyPropertyChanged("FlowrateSqueezeMax");
            }
        }

        private VolumePerTimeMeasure FlowrateSqueezeMxField; 

        /// <summary>
        /// Final displacement pump rate.
        /// </summary>
		[Description("Final displacement pump rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateEnd")]
        public VolumePerTimeMeasure FlowrateEnd {
            get {
                return FlowrateEndField;
            } 
            set {
                FlowrateEndField = value;
                NotifyPropertyChanged("FlowrateEnd");
            }
        }

        private VolumePerTimeMeasure FlowrateEndField; 

        /// <summary>
        /// Pump rate at the start of the job.
        /// </summary>
		[Description("Pump rate at the start of the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowratePumpStart")]
        public VolumePerTimeMeasure FlowratePumpStart {
            get {
                return FlowratePumpStartField;
            } 
            set {
                FlowratePumpStartField = value;
                NotifyPropertyChanged("FlowratePumpStart");
            }
        }

        private VolumePerTimeMeasure FlowratePumpStartField; 

        /// <summary>
        /// Pump rate at the end of the job.
        /// </summary>
		[Description("Pump rate at the end of the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowratePumpEnd")]
        public VolumePerTimeMeasure FlowratePumpEnd {
            get {
                return FlowratePumpEndField;
            } 
            set {
                FlowratePumpEndField = value;
                NotifyPropertyChanged("FlowratePumpEnd");
            }
        }

        private VolumePerTimeMeasure FlowratePumpEndField; 

        /// <summary>
        /// Funnel viscosity in seconds (in hole at start of job/stage).
        /// </summary>
		[Description("Funnel viscosity in seconds (in hole at start of job/stage).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("VisFunnelMud")]
        public TimeMeasure VisFunnelMud {
            get {
                return VisFunnelMudField;
            } 
            set {
                VisFunnelMudField = value;
                NotifyPropertyChanged("VisFunnelMud");
            }
        }

        private TimeMeasure VisFunnelMudField; 

        /// <summary>
        /// Plug bumped? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Plug bumped? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("PlugBumped")]
        public bool? PlugBumped {
            get {
                return PlugBumpedField;
            } 
            set {
                PlugBumpedField = value;
                 this.PlugBumpedSpecified = true;
                NotifyPropertyChanged("PlugBumped");
            }
        }

        private bool? PlugBumpedField; 

        /// <summary>
        /// PlugBumpedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PlugBumpedSpecified {
            get {
                return PlugBumpedSpecifiedField;
            } 
            set {
                PlugBumpedSpecifiedField = value;
                NotifyPropertyChanged("PlugBumpedSpecified");
            }
        }

        private bool PlugBumpedSpecifiedField; 

        /// <summary>
        /// Squeeze obtained. Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Squeeze obtained.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("SqueezeObtained")]
        public bool? SqueezeObtained {
            get {
                return SqueezeObtainedField;
            } 
            set {
                SqueezeObtainedField = value;
                 this.SqueezeObtainedSpecified = true;
                NotifyPropertyChanged("SqueezeObtained");
            }
        }

        private bool? SqueezeObtainedField; 

        /// <summary>
        /// SqueezeObtainedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SqueezeObtainedSpecified {
            get {
                return SqueezeObtainedSpecifiedField;
            } 
            set {
                SqueezeObtainedSpecifiedField = value;
                NotifyPropertyChanged("SqueezeObtainedSpecified");
            }
        }

        private bool SqueezeObtainedSpecifiedField; 

        /// <summary>
        /// Pressure before bumping plug / pressure at the end of the displacement.
        /// </summary>
		[Description("Pressure before bumping plug / pressure at the end of  the displacement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresPriorBump")]
        public PressureMeasure PresPriorBump {
            get {
                return PresPriorBumpField;
            } 
            set {
                PresPriorBumpField = value;
                NotifyPropertyChanged("PresPriorBump");
            }
        }

        private PressureMeasure PresPriorBumpField; 

        /// <summary>
        /// Float held? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Float held?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("FloatHeld")]
        public bool? FloatHeld {
            get {
                return FloatHeldField;
            } 
            set {
                FloatHeldField = value;
                 this.FloatHeldSpecified = true;
                NotifyPropertyChanged("FloatHeld");
            }
        }

        private bool? FloatHeldField; 

        /// <summary>
        /// FloatHeldSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FloatHeldSpecified {
            get {
                return FloatHeldSpecifiedField;
            } 
            set {
                FloatHeldSpecifiedField = value;
                NotifyPropertyChanged("FloatHeldSpecified");
            }
        }

        private bool FloatHeldSpecifiedField; 

		/// <summary>
        /// Unique identifier for this instance of CementStageReport
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of CementStageReport")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementDesignStage xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementDesignStage", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementDesignStage xsd type.")]
    public partial class CementDesignStage : AbstractCementStage, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementStageDesign xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementStageDesign", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementStageDesign xsd type.")]
    public partial class CementStageDesign : AbstractCementStage, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCementJob xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobDesign))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobReport))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCementJob", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractCementJob xsd type.")]
    public abstract partial class AbstractCementJob : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Cementing engineer.
        /// </summary>
		[StringLength(64)]
        [Description("Cementing engineer.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CementEngr")]
        public string CementEngr {
            get {
                return CementEngrField;
            } 
            set {
                CementEngrField = value;
                NotifyPropertyChanged("CementEngr");
            }
        }

        private string CementEngrField; 

        /// <summary>
        /// Duration for waiting on cement to set.
        /// </summary>
		[Description("Duration for waiting on cement to set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimWaitingOnCement")]
        public TimeMeasure ETimeWaitingOnCement {
            get {
                return ETimWaitingOnCementField;
            } 
            set {
                ETimWaitingOnCementField = value;
                NotifyPropertyChanged("ETimeWaitingOnCement");
            }
        }

        private TimeMeasure ETimWaitingOnCementField; 

        /// <summary>
        /// If plug used, measured depth interval between the top and base of the plug.
        /// </summary>
		[Description("If plug used,  measured depth interval between the top and base of the plug.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("PlugInterval")]
        public MdInterval PlugInterval {
            get {
                return PlugIntervalField;
            } 
            set {
                PlugIntervalField = value;
                NotifyPropertyChanged("PlugInterval");
            }
        }

        private MdInterval PlugIntervalField; 

        /// <summary>
        /// Measured depth at the bottom of the hole.
        /// </summary>
		[Description("Measured depth at the bottom of  the hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdHole")]
        public MeasuredDepthCoord MDHole {
            get {
                return MdHoleField;
            } 
            set {
                MdHoleField = value;
                NotifyPropertyChanged("MDHole");
            }
        }

        private MeasuredDepthCoord MdHoleField; 

        /// <summary>
        /// Name of cementing contractor.
        /// </summary>
		[StringLength(64)]
        [Description("Name of cementing contractor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Contractor")]
        public string Contractor {
            get {
                return ContractorField;
            } 
            set {
                ContractorField = value;
                NotifyPropertyChanged("Contractor");
            }
        }

        private string ContractorField; 

        /// <summary>
        /// Pipe rotation rate (commonly in rotations per minute (RPM)).
        /// </summary>
		[Description("Pipe rotation rate (commonly in rotations per minute (RPM)).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("RpmPipe")]
        public AngularVelocityMeasure RpmPipe {
            get {
                return RpmPipeField;
            } 
            set {
                RpmPipeField = value;
                NotifyPropertyChanged("RpmPipe");
            }
        }

        private AngularVelocityMeasure RpmPipeField; 

        /// <summary>
        /// Pipe rotation: initial torque.
        /// </summary>
		[Description("Pipe rotation: initial torque.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqInitPipeRot")]
        public MomentOfForceMeasure TorqueInitPipeRot {
            get {
                return TqInitPipeRotField;
            } 
            set {
                TqInitPipeRotField = value;
                NotifyPropertyChanged("TorqueInitPipeRot");
            }
        }

        private MomentOfForceMeasure TqInitPipeRotField; 

        /// <summary>
        /// Pipe rotation: average torque.
        /// </summary>
		[Description("Pipe rotation: average torque.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqPipeAv")]
        public MomentOfForceMeasure TorquePipeAverage {
            get {
                return TqPipeAvField;
            } 
            set {
                TqPipeAvField = value;
                NotifyPropertyChanged("TorquePipeAverage");
            }
        }

        private MomentOfForceMeasure TqPipeAvField; 

        /// <summary>
        /// Pipe rotation: maximum torque.
        /// </summary>
		[Description("Pipe rotation: maximum torque.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqPipeMx")]
        public MomentOfForceMeasure TorquePipeMax {
            get {
                return TqPipeMxField;
            } 
            set {
                TqPipeMxField = value;
                NotifyPropertyChanged("TorquePipeMax");
            }
        }

        private MomentOfForceMeasure TqPipeMxField; 

        /// <summary>
        /// String-up weight during reciprocation.
        /// </summary>
		[Description("String-up weight during reciprocation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("OverPull")]
        public ForceMeasure OverPull {
            get {
                return OverPullField;
            } 
            set {
                OverPullField = value;
                NotifyPropertyChanged("OverPull");
            }
        }

        private ForceMeasure OverPullField; 

        /// <summary>
        /// String-down weight during reciprocation.
        /// </summary>
		[Description("String-down weight during reciprocation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("SlackOff")]
        public ForceMeasure SlackOff {
            get {
                return SlackOffField;
            } 
            set {
                SlackOffField = value;
                NotifyPropertyChanged("SlackOff");
            }
        }

        private ForceMeasure SlackOffField; 

        /// <summary>
        /// Pipe reciprocation (RPM).
        /// </summary>
		[Description("Pipe reciprocation (RPM).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("RpmPipeRecip")]
        public AngularVelocityMeasure RpmPipeRecip {
            get {
                return RpmPipeRecipField;
            } 
            set {
                RpmPipeRecipField = value;
                NotifyPropertyChanged("RpmPipeRecip");
            }
        }

        private AngularVelocityMeasure RpmPipeRecipField; 

        /// <summary>
        /// Pipe reciprocation: stroke length.
        /// </summary>
		[Description("Pipe reciprocation: stroke length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenPipeRecipStroke")]
        public LengthMeasure LenPipeRecipStroke {
            get {
                return LenPipeRecipStrokeField;
            } 
            set {
                LenPipeRecipStrokeField = value;
                NotifyPropertyChanged("LenPipeRecipStroke");
            }
        }

        private LengthMeasure LenPipeRecipStrokeField; 

        /// <summary>
        /// Is the pipe being reciprocated (raised and lowered)? Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Is the pipe being reciprocated (raised and lowered)?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Reciprocating")]
        public bool? Reciprocating {
            get {
                return ReciprocatingField;
            } 
            set {
                ReciprocatingField = value;
                 this.ReciprocatingSpecified = true;
                NotifyPropertyChanged("Reciprocating");
            }
        }

        private bool? ReciprocatingField; 

        /// <summary>
        /// ReciprocatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReciprocatingSpecified {
            get {
                return ReciprocatingSpecifiedField;
            } 
            set {
                ReciprocatingSpecifiedField = value;
                NotifyPropertyChanged("ReciprocatingSpecified");
            }
        }

        private bool ReciprocatingSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementJobDesign xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementJobDesign", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementJobDesign xsd type.")]
    public partial class CementJobDesign : AbstractCementJob, INotifyPropertyChanged
    {

        /// <summary>
        /// CementDesignStage property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CementStageDesign")]
		[XmlElement("CementDesignStage")]
        public List<CementStageDesign> CementDesignStage {
            get {
                return CementDesignStageField;
            } 
            set {
                CementDesignStageField = value;
                NotifyPropertyChanged("CementDesignStage");
            }
        }

         /// <summary>
         /// bool to indicate if CementDesignStage has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CementDesignStageSpecified
         {
             get {
             if(CementDesignStageField!=null)
                 return CementDesignStageField.Count>0?true:false;
             else return false;
             }
         }
        private List<CementStageDesign> CementDesignStageField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CementJobReport xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CementJobReport", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the CementJobReport xsd type.")]
    public partial class CementJobReport : AbstractCementJob, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimJobEnd property
        /// </summary>
		[Description("Date and time of the end of the cement job.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimJobEnd")]
        public Timestamp? DateTimeJobEnd {
            get {
                return DTimJobEndField;
            } 
            set {
                DTimJobEndField = value;
                 this.DateTimeJobEndSpecified = true;
                NotifyPropertyChanged("DateTimeJobEnd");
            }
        }

        
        private bool DateTimeJobEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeJobEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeJobEndSpecified {
            get {
                return DateTimeJobEndSpecifiedField;
            } 
            set {
                DateTimeJobEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeJobEndSpecified");
            }
        }
        
        private Timestamp? DTimJobEndField; 

        /// <summary>
        /// DTimJobStart property
        /// </summary>
		[Description("Date and time of the start of the cement job.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimJobStart")]
        public Timestamp? DateTimeJobStart {
            get {
                return DTimJobStartField;
            } 
            set {
                DTimJobStartField = value;
                 this.DateTimeJobStartSpecified = true;
                NotifyPropertyChanged("DateTimeJobStart");
            }
        }

        
        private bool DateTimeJobStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeJobStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeJobStartSpecified {
            get {
                return DateTimeJobStartSpecifiedField;
            } 
            set {
                DateTimeJobStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeJobStartSpecified");
            }
        }
        
        private Timestamp? DTimJobStartField; 

        /// <summary>
        /// DTimPlugSet property
        /// </summary>
		[Description("Date and time that cement plug was set.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimPlugSet")]
        public Timestamp? DateTimePlugSet {
            get {
                return DTimPlugSetField;
            } 
            set {
                DTimPlugSetField = value;
                 this.DateTimePlugSetSpecified = true;
                NotifyPropertyChanged("DateTimePlugSet");
            }
        }

        
        private bool DateTimePlugSetSpecifiedField = false;
        
        /// <summary>
        /// DateTimePlugSetSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePlugSetSpecified {
            get {
                return DateTimePlugSetSpecifiedField;
            } 
            set {
                DateTimePlugSetSpecifiedField = value;
                NotifyPropertyChanged("DateTimePlugSetSpecified");
            }
        }
        
        private Timestamp? DTimPlugSetField; 

        /// <summary>
        /// CementDrillOut property
        /// </summary>
		[Description("Was the cement drilled out? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CementDrillOut")]
        public bool? CementDrillOut {
            get {
                return CementDrillOutField;
            } 
            set {
                CementDrillOutField = value;
                 this.CementDrillOutSpecified = true;
                NotifyPropertyChanged("CementDrillOut");
            }
        }

        private bool? CementDrillOutField; 

        /// <summary>
        /// CementDrillOutSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CementDrillOutSpecified {
            get {
                return CementDrillOutSpecifiedField;
            } 
            set {
                CementDrillOutSpecifiedField = value;
                NotifyPropertyChanged("CementDrillOutSpecified");
            }
        }

        private bool CementDrillOutSpecifiedField; 

        /// <summary>
        /// DTimCementDrillOut property
        /// </summary>
		[Description("Date and time that the cement was drilled out.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimCementDrillOut")]
        public Timestamp? DateTimeCementDrillOut {
            get {
                return DTimCementDrillOutField;
            } 
            set {
                DTimCementDrillOutField = value;
                 this.DateTimeCementDrillOutSpecified = true;
                NotifyPropertyChanged("DateTimeCementDrillOut");
            }
        }

        
        private bool DateTimeCementDrillOutSpecifiedField = false;
        
        /// <summary>
        /// DateTimeCementDrillOutSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCementDrillOutSpecified {
            get {
                return DateTimeCementDrillOutSpecifiedField;
            } 
            set {
                DateTimeCementDrillOutSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCementDrillOutSpecified");
            }
        }
        
        private Timestamp? DTimCementDrillOutField; 

        /// <summary>
        /// DTimSqueeze property
        /// </summary>
		[Description("Date and time of a squeeze.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimSqueeze")]
        public Timestamp? DateTimeSqueeze {
            get {
                return DTimSqueezeField;
            } 
            set {
                DTimSqueezeField = value;
                 this.DateTimeSqueezeSpecified = true;
                NotifyPropertyChanged("DateTimeSqueeze");
            }
        }

        
        private bool DateTimeSqueezeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSqueezeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSqueezeSpecified {
            get {
                return DateTimeSqueezeSpecifiedField;
            } 
            set {
                DateTimeSqueezeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSqueezeSpecified");
            }
        }
        
        private Timestamp? DTimSqueezeField; 

        /// <summary>
        /// DTimPipeRotStart property
        /// </summary>
		[Description("Date and time that pipe rotation started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimPipeRotStart")]
        public Timestamp? DateTimePipeRotStart {
            get {
                return DTimPipeRotStartField;
            } 
            set {
                DTimPipeRotStartField = value;
                 this.DateTimePipeRotStartSpecified = true;
                NotifyPropertyChanged("DateTimePipeRotStart");
            }
        }

        
        private bool DateTimePipeRotStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimePipeRotStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePipeRotStartSpecified {
            get {
                return DateTimePipeRotStartSpecifiedField;
            } 
            set {
                DateTimePipeRotStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimePipeRotStartSpecified");
            }
        }
        
        private Timestamp? DTimPipeRotStartField; 

        /// <summary>
        /// DTimPipeRotEnd property
        /// </summary>
		[Description("Date and time that pipe rotation started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimPipeRotEnd")]
        public Timestamp? DateTimePipeRotEnd {
            get {
                return DTimPipeRotEndField;
            } 
            set {
                DTimPipeRotEndField = value;
                 this.DateTimePipeRotEndSpecified = true;
                NotifyPropertyChanged("DateTimePipeRotEnd");
            }
        }

        
        private bool DateTimePipeRotEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimePipeRotEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePipeRotEndSpecified {
            get {
                return DateTimePipeRotEndSpecifiedField;
            } 
            set {
                DateTimePipeRotEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimePipeRotEndSpecified");
            }
        }
        
        private Timestamp? DTimPipeRotEndField; 

        /// <summary>
        /// DTimRecipStart property
        /// </summary>
		[Description("Date and time that pipe reciprocation started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRecipStart")]
        public Timestamp? DateTimeRecipStart {
            get {
                return DTimRecipStartField;
            } 
            set {
                DTimRecipStartField = value;
                 this.DateTimeRecipStartSpecified = true;
                NotifyPropertyChanged("DateTimeRecipStart");
            }
        }

        
        private bool DateTimeRecipStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRecipStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRecipStartSpecified {
            get {
                return DateTimeRecipStartSpecifiedField;
            } 
            set {
                DateTimeRecipStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRecipStartSpecified");
            }
        }
        
        private Timestamp? DTimRecipStartField; 

        /// <summary>
        /// DTimRecipEnd property
        /// </summary>
		[Description("Date and time that pipe reciprocation ended.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRecipEnd")]
        public Timestamp? DateTimeRecipEnd {
            get {
                return DTimRecipEndField;
            } 
            set {
                DTimRecipEndField = value;
                 this.DateTimeRecipEndSpecified = true;
                NotifyPropertyChanged("DateTimeRecipEnd");
            }
        }

        
        private bool DateTimeRecipEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRecipEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRecipEndSpecified {
            get {
                return DateTimeRecipEndSpecifiedField;
            } 
            set {
                DateTimeRecipEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRecipEndSpecified");
            }
        }
        
        private Timestamp? DTimRecipEndField; 

        /// <summary>
        /// DensMeasBy property
        /// </summary>
		[StringLength(64)]
        [Description("Method by which density is measured.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DensMeasBy")]
        public string DensMeasBy {
            get {
                return DensMeasByField;
            } 
            set {
                DensMeasByField = value;
                NotifyPropertyChanged("DensMeasBy");
            }
        }

        private string DensMeasByField; 

        /// <summary>
        /// CementReportStage property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CementStageReport")]
		[XmlElement("CementReportStage")]
        public List<CementStageReport> CementReportStage {
            get {
                return CementReportStageField;
            } 
            set {
                CementReportStageField = value;
                NotifyPropertyChanged("CementReportStage");
            }
        }

         /// <summary>
         /// bool to indicate if CementReportStage has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CementReportStageSpecified
         {
             get {
             if(CementReportStageField!=null)
                 return CementReportStageField.Count>0?true:false;
             else return false;
             }
         }
        private List<CementStageReport> CementReportStageField; 


    } //here
    }

    /// <summary>
    /// This class represents the WellboreGeometrySection xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_WellboreGeometrySection", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[Description("This class represents the WellboreGeometrySection xsd type.")]
    public partial class WellboreGeometrySection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Citation property
        /// </summary>
		[Description("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the WellGeometrySection.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Citation")]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// TypeHoleCasing property
        /// </summary>
		[Description("Type of fixed component.")]
        [EnergisticsDataTypeAttribute(DataType = "HoleCasingType")]
		[XmlElement("TypeHoleCasing")]
        public HoleCasingType? TypeHoleCasing {
            get {
                return TypeHoleCasingField;
            } 
            set {
                TypeHoleCasingField = value;
                 this.TypeHoleCasingSpecified = true;
                NotifyPropertyChanged("TypeHoleCasing");
            }
        }

        private HoleCasingType? TypeHoleCasingField; 

        /// <summary>
        /// TypeHoleCasingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeHoleCasingSpecified {
            get {
                return TypeHoleCasingSpecifiedField;
            } 
            set {
                TypeHoleCasingSpecifiedField = value;
                NotifyPropertyChanged("TypeHoleCasingSpecified");
            }
        }

        private bool TypeHoleCasingSpecifiedField; 

        /// <summary>
        /// SectionMdInterval property
        /// </summary>
		[Description("Measured depth interval for this wellbore geometry section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("SectionMdInterval")]
        public MdInterval SectionMDInterval {
            get {
                return SectionMdIntervalField;
            } 
            set {
                SectionMdIntervalField = value;
                NotifyPropertyChanged("SectionMDInterval");
            }
        }

        private MdInterval SectionMdIntervalField; 

        /// <summary>
        /// SectionTvdInterval property
        /// </summary>
		[Description("True vertical depth interval for this wellbore geometry section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("SectionTvdInterval")]
        public TvdInterval SectionTvdInterval {
            get {
                return SectionTvdIntervalField;
            } 
            set {
                SectionTvdIntervalField = value;
                NotifyPropertyChanged("SectionTvdInterval");
            }
        }

        private TvdInterval SectionTvdIntervalField; 

        /// <summary>
        /// IdSection property
        /// </summary>
		[Description("Inner diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdSection")]
        public LengthMeasure InnerDiameterSection {
            get {
                return IdSectionField;
            } 
            set {
                IdSectionField = value;
                NotifyPropertyChanged("InnerDiameterSection");
            }
        }

        private LengthMeasure IdSectionField; 

        /// <summary>
        /// OdSection property
        /// </summary>
		[Description("Outer diameter. Only for casings and risers.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdSection")]
        public LengthMeasure OuterDiameterSection {
            get {
                return OdSectionField;
            } 
            set {
                OdSectionField = value;
                NotifyPropertyChanged("OuterDiameterSection");
            }
        }

        private LengthMeasure OdSectionField; 

        /// <summary>
        /// WtPerLen property
        /// </summary>
		[Description("Weight per unit length for casing sections.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerLengthMeasure")]
		[XmlElement("WtPerLen")]
        public MassPerLengthMeasure WeightPerLen {
            get {
                return WtPerLenField;
            } 
            set {
                WtPerLenField = value;
                NotifyPropertyChanged("WeightPerLen");
            }
        }

        private MassPerLengthMeasure WtPerLenField; 

        /// <summary>
        /// Grade property
        /// </summary>
		[StringLength(64)]
        [Description("Material grade for the tubular section.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Grade")]
        public string Grade {
            get {
                return GradeField;
            } 
            set {
                GradeField = value;
                NotifyPropertyChanged("Grade");
            }
        }

        private string GradeField; 

        /// <summary>
        /// CurveConductor property
        /// </summary>
		[Description("Curved conductor? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CurveConductor")]
        public bool? CurveConductor {
            get {
                return CurveConductorField;
            } 
            set {
                CurveConductorField = value;
                 this.CurveConductorSpecified = true;
                NotifyPropertyChanged("CurveConductor");
            }
        }

        private bool? CurveConductorField; 

        /// <summary>
        /// CurveConductorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurveConductorSpecified {
            get {
                return CurveConductorSpecifiedField;
            } 
            set {
                CurveConductorSpecifiedField = value;
                NotifyPropertyChanged("CurveConductorSpecified");
            }
        }

        private bool CurveConductorSpecifiedField; 

        /// <summary>
        /// DiaDrift property
        /// </summary>
		[Description("The drift diameter is the inside diameter (ID) that the pipe manufacturer guarantees per specifications. Note that the nominal inside diameter is not the same as the drift diameter, but is always slightly larger. The drift diameter is used by the well planner to determine what size tools or casing strings can later be run through the casing, whereas the nominal inside diameter is used for fluid volume calculations, such as mud circulating times and cement slurry placement calculations. Source: www.glossary.oilfield.slb.com")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaDrift")]
        public LengthMeasure DiaDrift {
            get {
                return DiaDriftField;
            } 
            set {
                DiaDriftField = value;
                NotifyPropertyChanged("DiaDrift");
            }
        }

        private LengthMeasure DiaDriftField; 

        /// <summary>
        /// FactFric property
        /// </summary>
		[Description("Friction factor.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("FactFric")]
        public double? FactFric {
            get {
                return FactFricField;
            } 
            set {
                FactFricField = value;
                 this.FactFricSpecified = true;
                NotifyPropertyChanged("FactFric");
            }
        }

        private double? FactFricField; 

        /// <summary>
        /// FactFricSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FactFricSpecified {
            get {
                return FactFricSpecifiedField;
            } 
            set {
                FactFricSpecifiedField = value;
                NotifyPropertyChanged("FactFricSpecified");
            }
        }

        private bool FactFricSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// BhaRun property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("BhaRun")]
        public List<DataObjectReference> BhaRun {
            get {
                return BhaRunField;
            } 
            set {
                BhaRunField = value;
                NotifyPropertyChanged("BhaRun");
            }
        }

         /// <summary>
         /// bool to indicate if BhaRun has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BhaRunSpecified
         {
             get {
             if(BhaRunField!=null)
                 return BhaRunField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> BhaRunField; 

		/// <summary>
        /// Unique identifier of this WbGeometrySection within the WbGeometry object.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier of this WbGeometrySection within the WbGeometry object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractLogDataContext xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChannelValueContext))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ObjectContext))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IndexRangeContext))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractLogDataContext", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractLogDataContext xsd type.")]
    public abstract partial class AbstractLogDataContext : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ChannelValueContext xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ChannelValueContext", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ChannelValueContext xsd type.")]
    public partial class ChannelValueContext : AbstractLogDataContext, INotifyPropertyChanged
    {

        /// <summary>
        /// The channel refers to another Energistics data object.
        /// </summary>
		[Required]
        [Description("The channel refers to another Energistics data object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChannelReference")]
        public DataObjectReference ChannelReference {
            get {
                return ChannelReferenceField;
            } 
            set {
                ChannelReferenceField = value;
                NotifyPropertyChanged("ChannelReference");
            }
        }

        private DataObjectReference ChannelReferenceField; 

        /// <summary>
        /// A free-form format to specify the data value.
        /// </summary>
		[Required]
        [Description("A free-form format to specify the data value.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("DataValue")]
        public string DataValue {
            get {
                return DataValueField;
            } 
            set {
                DataValueField = value;
                NotifyPropertyChanged("DataValue");
            }
        }

        private string DataValueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ObjectContext xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ObjectContext", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ObjectContext xsd type.")]
    public partial class ObjectContext : AbstractLogDataContext, INotifyPropertyChanged
    {

        /// <summary>
        /// The context object points to another Energistics data object.
        /// </summary>
		[Required]
        [Description("The context object points to another Energistics data object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ObjectReference")]
        public DataObjectReference ObjectReference {
            get {
                return ObjectReferenceField;
            } 
            set {
                ObjectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private DataObjectReference ObjectReferenceField; 

        /// <summary>
        /// If the reference is to a sub-object in a growing object (e.g., a WellboreGeometry section), then this must contain the UID of the growing part.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("If the reference is to a sub-object in a growing object  (e.g., a WellboreGeometry section), then this must contain the UID of the growing part.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SubObjectReference")]
        public string SubObjectReference {
            get {
                return SubObjectReferenceField;
            } 
            set {
                SubObjectReferenceField = value;
                NotifyPropertyChanged("SubObjectReference");
            }
        }

        private string SubObjectReferenceField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IndexRangeContext xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IndexRangeContext", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the IndexRangeContext xsd type.")]
    public partial class IndexRangeContext : AbstractLogDataContext, INotifyPropertyChanged
    {

        /// <summary>
        /// When the log header defines the direction as: - "Increasing", the endIndex is the ending (maximum) index value at which the last non-null data point is located. - “Decreasing”, the endIndex is the ending (minimum) index value at which the last non-null data point is located.
        /// </summary>
		[Required]
        [Description("When the log header defines the direction as:   - \"Increasing\", the endIndex is the ending (maximum) index value at which the last non-null data point is located.  -  “Decreasing”, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIndexValue")]
		[XmlElement("StartIndex")]
        public AbstractIndexValue StartIndex {
            get {
                return StartIndexField;
            } 
            set {
                StartIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private AbstractIndexValue StartIndexField; 

        /// <summary>
        /// When the log header defines the direction as: - "Increasing", the startIndex is the starting (minimum) index value at which the first non-null data point is located. - "Decreasing", the startIndex is the starting (maximum) index value at which the first non-null data point is located.
        /// </summary>
		[Required]
        [Description("When the log header defines the direction as:  - \"Increasing\", the startIndex is the starting (minimum) index value at which the first non-null data point is located.  - \"Decreasing\", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIndexValue")]
		[XmlElement("EndIndex")]
        public AbstractIndexValue EndIndex {
            get {
                return EndIndexField;
            } 
            set {
                EndIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private AbstractIndexValue EndIndexField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractIndexValue xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DepthIndexValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PassIndexedDepth))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractIndexValue", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractIndexValue xsd type.")]
    public abstract partial class AbstractIndexValue : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DepthIndexValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DepthIndexValue", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DepthIndexValue xsd type.")]
    public partial class DepthIndexValue : AbstractIndexValue, INotifyPropertyChanged
    {

        /// <summary>
        /// Used to specify the channel start and end index.
        /// </summary>
		[Required]
        [Description("Used to specify the channel start and end index.")]
        [EnergisticsDataTypeAttribute(DataType = "float")]
		[XmlElement("Depth")]
        public float? Depth {
            get {
                return DepthField;
            } 
            set {
                DepthField = value;
                NotifyPropertyChanged("Depth");
            }
        }

        private float? DepthField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeIndexValue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeIndexValue", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TimeIndexValue xsd type.")]
    public partial class TimeIndexValue : AbstractIndexValue, INotifyPropertyChanged
    {

        /// <summary>
        /// Used to specify the channel start and end index.
        /// </summary>
		[Required]
        [Description("Used to specify the channel start and end index.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("Time")]
        public Timestamp? Time {
            get {
                return TimeField;
            } 
            set {
                TimeField = value;
                 this.TimeSpecified = true;
                NotifyPropertyChanged("Time");
            }
        }

        
        private bool TimeSpecifiedField = false;
        
        /// <summary>
        /// TimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TimeSpecified {
            get {
                return TimeSpecifiedField;
            } 
            set {
                TimeSpecifiedField = value;
                NotifyPropertyChanged("TimeSpecified");
            }
        }
        
        private Timestamp? TimeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PassIndexedDepth xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PassIndexedDepth", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PassIndexedDepth xsd type.")]
    public partial class PassIndexedDepth : AbstractIndexValue, INotifyPropertyChanged
    {

        /// <summary>
        /// The pass number. Increase the pass number each time the tool direction changes twice.
        /// </summary>
		[Required]
        [Description("The pass number. Increase the pass number each time the tool direction changes twice.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Pass")]
        public int? Pass {
            get {
                return PassField;
            } 
            set {
                PassField = value;
                NotifyPropertyChanged("Pass");
            }
        }

        private int? PassField; 

        /// <summary>
        /// 0 = down (increasing depth) 1= up (decreasing depth) Changes each time the logging tool direction changes. When a log starts from the bottom, start with pass = 0, direction = 1. When you get to the top of the interval and start down again, change the pass.
        /// </summary>
		[Required]
        [Description("0 = down (increasing depth) 1= up (decreasing depth) Changes each time the logging tool direction changes.  When a log starts from the bottom, start with pass = 0, direction = 1.  When you get to the top of the interval and start down again, change the pass.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Direction")]
        public int? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                NotifyPropertyChanged("Direction");
            }
        }

        private int? DirectionField; 

        /// <summary>
        /// The measured depth of the point.
        /// </summary>
		[Required]
        [Description("The measured depth of the point.")]
        [EnergisticsDataTypeAttribute(DataType = "float")]
		[XmlElement("Depth")]
        public float? Depth {
            get {
                return DepthField;
            } 
            set {
                DepthField = value;
                NotifyPropertyChanged("Depth");
            }
        }

        private float? DepthField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ChannelData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ChannelData", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ChannelData xsd type.")]
    public partial class ChannelData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The data blob in JSON form. This attribute lets you embed the bulk data in a single file with the xml, to avoid the issues that arise when splitting data across multiple files. BUSINESS RULE: Either this element or the FileUri element must be present.
        /// </summary>
		[Description("The data blob in JSON form. This attribute lets you embed the bulk data in a single file with the xml, to avoid the issues that arise when splitting data across multiple files. BUSINESS RULE: Either this element or the FileUri element must be present.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("Data", Type=typeof(XmlCDataSection))]
        public XmlCDataSection Data {
            get {
                return DataField;
            } 
            set {
                DataField = value;
                NotifyPropertyChanged("Data");
            }
        }

        private XmlCDataSection DataField; 

        /// <summary>
        /// The URI of a file containing the bulk data. If this field is non-null, then the data field is ignored. For files written to disk, this should normally contain a simple file name in relative URI form. For example, if an application writes a log file to disk, it might write the xml as abc.xml, and the bulk data as abc.avro. In this case, the value of this element would be './abc.avro'. BUSINESS RULE: Either this element or the Data element must be present. 
        /// </summary>
		[Description("The URI of a file containing the bulk data. If this field is non-null, then the data field is ignored. For files written to disk, this should normally contain a simple file name in relative URI form. For example, if an application writes a log file to disk, it might write the xml as abc.xml, and the bulk data as abc.avro. In this case, the value of this element would be './abc.avro'.  BUSINESS RULE: Either this element or the Data element must be present.")]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
		[XmlElement("FileUri", DataType="anyURI")]
        public string FileUri {
            get {
                return FileUriField;
            } 
            set {
                FileUriField = value;
                NotifyPropertyChanged("FileUri");
            }
        }

        private string FileUriField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PointMetadata xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PointMetadata", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PointMetadata xsd type.")]
    public partial class PointMetadata : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the point metadata.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the point metadata.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// The underlying ETP data type of the point metadata.
        /// </summary>
		[Required]
        [Description("The underlying ETP data type of the point metadata.")]
        [EnergisticsDataTypeAttribute(DataType = "EtpDataType")]
		[XmlElement("EtpDataType")]
        public EtpDataType? EtpDataType {
            get {
                return EtpDataTypeField;
            } 
            set {
                EtpDataTypeField = value;
                 this.EtpDataTypeSpecified = true;
                NotifyPropertyChanged("EtpDataType");
            }
        }

        
        private bool EtpDataTypeSpecifiedField = false;
        
        /// <summary>
        /// EtpDataTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EtpDataTypeSpecified {
            get {
                return EtpDataTypeSpecifiedField;
            } 
            set {
                EtpDataTypeSpecifiedField = value;
                NotifyPropertyChanged("EtpDataTypeSpecified");
            }
        }
        
        private EtpDataType? EtpDataTypeField; 

        /// <summary>
        /// Free format description of the point metadata.
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Free format description of the point metadata.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthMeasureExt xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthMeasureExt", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthMeasureExt xsd type.")]
    public partial class LengthMeasureExt : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasureExt class.
        /// </summary>
        public LengthMeasureExt() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasureExt class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasureExt(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LogChannelAxis xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LogChannelAxis", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the LogChannelAxis xsd type.")]
    public partial class LogChannelAxis : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Value of the initial entry in the list of axis index values.
        /// </summary>
		[Required]
        [Description("Value of the initial entry in the list of axis index values.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("AxisStart")]
        public double? AxisStart {
            get {
                return AxisStartField;
            } 
            set {
                AxisStartField = value;
                NotifyPropertyChanged("AxisStart");
            }
        }

        private double? AxisStartField; 

        /// <summary>
        /// The increment to be used to fill out the list of the log channel axis index values.
        /// </summary>
		[Required]
        [Description("The increment to be used to fill out the list of the log channel axis index values.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("AxisSpacing")]
        public double? AxisSpacing {
            get {
                return AxisSpacingField;
            } 
            set {
                AxisSpacingField = value;
                NotifyPropertyChanged("AxisSpacing");
            }
        }

        private double? AxisSpacingField; 

        /// <summary>
        /// The count of elements along this axis of the array.
        /// </summary>
		[Required]
        [Description("The count of elements along this axis of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("AxisCount")]
        public long? AxisCount {
            get {
                return AxisCountField;
            } 
            set {
                AxisCountField = value;
                NotifyPropertyChanged("AxisCount");
            }
        }

        private long? AxisCountField; 

        /// <summary>
        /// The name of the array axis.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the array axis.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("AxisName")]
        public string AxisName {
            get {
                return AxisNameField;
            } 
            set {
                AxisNameField = value;
                NotifyPropertyChanged("AxisName");
            }
        }

        private string AxisNameField; 

        /// <summary>
        /// The property type by which the array axis is classified. Like "measured depth" or "elapsed time".
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The property type by which the array axis is classified. Like \"measured depth\" or \"elapsed time\".")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("AxisPropertyKind")]
        public string AxisPropertyKind {
            get {
                return AxisPropertyKindField;
            } 
            set {
                AxisPropertyKindField = value;
                NotifyPropertyChanged("AxisPropertyKind");
            }
        }

        private string AxisPropertyKindField; 

        /// <summary>
        /// A string representing the units of measure of the axis values.
        /// </summary>
		[Required]
        [Description("A string representing the units of measure of the axis values.")]
        [EnergisticsDataTypeAttribute(DataType = "UnitOfMeasureExt")]
		[XmlElement("AxisUom")]
        public ExtensibleEnum<UnitOfMeasure>? AxisUom {
            get {
                return AxisUomField;
            } 
            set {
                AxisUomField = value;
                NotifyPropertyChanged("AxisUom");
            }
        }

        private ExtensibleEnum<UnitOfMeasure>? AxisUomField; 

		/// <summary>
        /// A unique identifier for an instance of a log channel axis
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for an instance of a log channel axis")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ChannelIndex xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ChannelIndex", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ChannelIndex xsd type.")]
    public partial class ChannelIndex : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of index (time, depth, etc.).
        /// </summary>
		[Required]
        [Description("The type of index (time, depth, etc.).")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelIndexType")]
		[XmlElement("IndexType")]
        public ChannelIndexType? IndexType {
            get {
                return IndexTypeField;
            } 
            set {
                IndexTypeField = value;
                 this.IndexTypeSpecified = true;
                NotifyPropertyChanged("IndexType");
            }
        }

        
        private bool IndexTypeSpecifiedField = false;
        
        /// <summary>
        /// IndexTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexTypeSpecified {
            get {
                return IndexTypeSpecifiedField;
            } 
            set {
                IndexTypeSpecifiedField = value;
                NotifyPropertyChanged("IndexTypeSpecified");
            }
        }
        
        private ChannelIndexType? IndexTypeField; 

        /// <summary>
        /// The unit of measure of the index. Must be one of the units allowed for the specified IndexType (i.e., time or distance).
        /// </summary>
		[Required]
        [Description("The unit of measure of the index. Must be one of the units allowed for the specified IndexType (i.e., time or distance).")]
        [EnergisticsDataTypeAttribute(DataType = "UnitOfMeasureExt")]
		[XmlElement("Uom")]
        public ExtensibleEnum<UnitOfMeasure>? Uom {
            get {
                return UomField;
            } 
            set {
                UomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ExtensibleEnum<UnitOfMeasure>? UomField; 

        /// <summary>
        /// The direction of the index, either increasing or decreasing. Index direction may not change within the life of a channel.
        /// </summary>
		[Required]
        [Description("The direction of the index, either increasing or decreasing. Index direction may not change within the life of a channel.")]
        [EnergisticsDataTypeAttribute(DataType = "IndexDirection")]
		[XmlElement("Direction")]
        public IndexDirection? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        
        private bool DirectionSpecifiedField = false;
        
        /// <summary>
        /// DirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return DirectionSpecifiedField;
            } 
            set {
                DirectionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }
        
        private IndexDirection? DirectionField; 

        /// <summary>
        /// The mnemonic for the index.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The mnemonic for the index.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Mnemonic")]
        public string Mnemonic {
            get {
                return MnemonicField;
            } 
            set {
                MnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private string MnemonicField; 

        /// <summary>
        /// For depth indexes, this contains the UID of the datum, in a channel's Well object, to which all of the index values are referenced.
        /// </summary>
		[StringLength(64)]
        [Description("For depth indexes, this contains the UID of the datum, in a channel's Well object, to which all of the index values are referenced.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DatumReference")]
        public string DatumReference {
            get {
                return DatumReferenceField;
            } 
            set {
                DatumReferenceField = value;
                NotifyPropertyChanged("DatumReference");
            }
        }

        private string DatumReferenceField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillingParams xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillingParams", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillingParams xsd type.")]
    public partial class DrillingParams : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Operating time spent by bit for run. BUSINESS RULE: When reporting an actual as opposed to design, this is required.
        /// </summary>
		[Description("Operating time spent by bit for run.  BUSINESS RULE: When reporting an actual as opposed to design, this is required.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimOpBit")]
        public TimeMeasure ETimeOperatingBit {
            get {
                return ETimOpBitField;
            } 
            set {
                ETimOpBitField = value;
                NotifyPropertyChanged("ETimeOperatingBit");
            }
        }

        private TimeMeasure ETimOpBitField; 

        /// <summary>
        /// Measured depth at start of the run. 
        /// </summary>
		[Description("Measured depth at start of the run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdHoleStart")]
        public MeasuredDepthCoord MDHoleStart {
            get {
                return MdHoleStartField;
            } 
            set {
                MdHoleStartField = value;
                NotifyPropertyChanged("MDHoleStart");
            }
        }

        private MeasuredDepthCoord MdHoleStartField; 

        /// <summary>
        /// Measured depth at the end of the run.
        /// </summary>
		[Required]
        [Description("Measured depth at the end of the run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdHoleStop")]
        public MeasuredDepthCoord MDHoleStop {
            get {
                return MdHoleStopField;
            } 
            set {
                MdHoleStopField = value;
                NotifyPropertyChanged("MDHoleStop");
            }
        }

        private MeasuredDepthCoord MdHoleStopField; 

        /// <summary>
        /// A pointer to the tubular assembly.
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the tubular assembly.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Tubular")]
        public string Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private string TubularField; 

        /// <summary>
        /// Hookload: rotating.
        /// </summary>
		[Description("Hookload: rotating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("HkldRot")]
        public ForceMeasure HookloadRot {
            get {
                return HkldRotField;
            } 
            set {
                HkldRotField = value;
                NotifyPropertyChanged("HookloadRot");
            }
        }

        private ForceMeasure HkldRotField; 

        /// <summary>
        /// Overpull = HkldUp - HkldRot
        /// </summary>
		[Description("Overpull = HkldUp - HkldRot")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("OverPull")]
        public ForceMeasure OverPull {
            get {
                return OverPullField;
            } 
            set {
                OverPullField = value;
                NotifyPropertyChanged("OverPull");
            }
        }

        private ForceMeasure OverPullField; 

        /// <summary>
        /// Slackoff = HkldRot - HkdDown.
        /// </summary>
		[Description("Slackoff = HkldRot  - HkdDown.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("SlackOff")]
        public ForceMeasure SlackOff {
            get {
                return SlackOffField;
            } 
            set {
                SlackOffField = value;
                NotifyPropertyChanged("SlackOff");
            }
        }

        private ForceMeasure SlackOffField; 

        /// <summary>
        /// Hookload when the string is moving up.
        /// </summary>
		[Description("Hookload when the string is moving up.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("HkldUp")]
        public ForceMeasure HookloadUp {
            get {
                return HkldUpField;
            } 
            set {
                HkldUpField = value;
                NotifyPropertyChanged("HookloadUp");
            }
        }

        private ForceMeasure HkldUpField; 

        /// <summary>
        /// Hookload when the string is moving down.
        /// </summary>
		[Description("Hookload when the string is moving down.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("HkldDn")]
        public ForceMeasure HookloadDown {
            get {
                return HkldDnField;
            } 
            set {
                HkldDnField = value;
                NotifyPropertyChanged("HookloadDown");
            }
        }

        private ForceMeasure HkldDnField; 

        /// <summary>
        /// Average Torque: on bottom.
        /// </summary>
		[Description("Average Torque: on bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqOnBotAv")]
        public MomentOfForceMeasure TorqueOnBotAverage {
            get {
                return TqOnBotAvField;
            } 
            set {
                TqOnBotAvField = value;
                NotifyPropertyChanged("TorqueOnBotAverage");
            }
        }

        private MomentOfForceMeasure TqOnBotAvField; 

        /// <summary>
        /// Maximum torque: on bottom.
        /// </summary>
		[Description("Maximum torque: on bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqOnBotMx")]
        public MomentOfForceMeasure TorqueOnBotMax {
            get {
                return TqOnBotMxField;
            } 
            set {
                TqOnBotMxField = value;
                NotifyPropertyChanged("TorqueOnBotMax");
            }
        }

        private MomentOfForceMeasure TqOnBotMxField; 

        /// <summary>
        /// Minimum torque: on bottom.
        /// </summary>
		[Description("Minimum torque: on bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqOnBotMn")]
        public MomentOfForceMeasure TorqueOnBotMin {
            get {
                return TqOnBotMnField;
            } 
            set {
                TqOnBotMnField = value;
                NotifyPropertyChanged("TorqueOnBotMin");
            }
        }

        private MomentOfForceMeasure TqOnBotMnField; 

        /// <summary>
        /// Average torque: off bottom.
        /// </summary>
		[Description("Average torque: off bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqOffBotAv")]
        public MomentOfForceMeasure TorqueOffBotAverage {
            get {
                return TqOffBotAvField;
            } 
            set {
                TqOffBotAvField = value;
                NotifyPropertyChanged("TorqueOffBotAverage");
            }
        }

        private MomentOfForceMeasure TqOffBotAvField; 

        /// <summary>
        /// Average torque: downhole.
        /// </summary>
		[Description("Average torque: downhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqDhAv")]
        public MomentOfForceMeasure TorqueDownholeAverage {
            get {
                return TqDhAvField;
            } 
            set {
                TqDhAvField = value;
                NotifyPropertyChanged("TorqueDownholeAverage");
            }
        }

        private MomentOfForceMeasure TqDhAvField; 

        /// <summary>
        /// Weight of the string above the jars.
        /// </summary>
		[Description("Weight of the string above the jars.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("WtAboveJar")]
        public ForceMeasure WeightAboveJar {
            get {
                return WtAboveJarField;
            } 
            set {
                WtAboveJarField = value;
                NotifyPropertyChanged("WeightAboveJar");
            }
        }

        private ForceMeasure WtAboveJarField; 

        /// <summary>
        /// Weight of the string below the jars.
        /// </summary>
		[Description("Weight  of the string below the jars.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("WtBelowJar")]
        public ForceMeasure WeightBelowJar {
            get {
                return WtBelowJarField;
            } 
            set {
                WtBelowJarField = value;
                NotifyPropertyChanged("WeightBelowJar");
            }
        }

        private ForceMeasure WtBelowJarField; 

        /// <summary>
        /// Drilling fluid density.
        /// </summary>
		[Description("Drilling fluid density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("WtMud")]
        public MassPerVolumeMeasure WeightMud {
            get {
                return WtMudField;
            } 
            set {
                WtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private MassPerVolumeMeasure WtMudField; 

        /// <summary>
        /// Average mud pump flow rate.
        /// </summary>
		[Description("Average mud pump flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowratePumpAv")]
        public VolumePerTimeMeasure FlowratePumpAverage {
            get {
                return FlowratePumpAvField;
            } 
            set {
                FlowratePumpAvField = value;
                NotifyPropertyChanged("FlowratePumpAverage");
            }
        }

        private VolumePerTimeMeasure FlowratePumpAvField; 

        /// <summary>
        /// Maximum mud pump flow rate.
        /// </summary>
		[Description("Maximum mud pump flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowratePumpMx")]
        public VolumePerTimeMeasure FlowratePumpMax {
            get {
                return FlowratePumpMxField;
            } 
            set {
                FlowratePumpMxField = value;
                NotifyPropertyChanged("FlowratePumpMax");
            }
        }

        private VolumePerTimeMeasure FlowratePumpMxField; 

        /// <summary>
        /// Minimum mud pump flow rate.
        /// </summary>
		[Description("Minimum mud pump flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowratePumpMn")]
        public VolumePerTimeMeasure FlowratePumpMin {
            get {
                return FlowratePumpMnField;
            } 
            set {
                FlowratePumpMnField = value;
                NotifyPropertyChanged("FlowratePumpMin");
            }
        }

        private VolumePerTimeMeasure FlowratePumpMnField; 

        /// <summary>
        /// Bit nozzle average velocity.
        /// </summary>
		[Description("Bit nozzle average velocity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("VelNozzleAv")]
        public LengthPerTimeMeasure VelNozzleAverage {
            get {
                return VelNozzleAvField;
            } 
            set {
                VelNozzleAvField = value;
                NotifyPropertyChanged("VelNozzleAverage");
            }
        }

        private LengthPerTimeMeasure VelNozzleAvField; 

        /// <summary>
        /// Bit hydraulic.
        /// </summary>
		[Description("Bit hydraulic.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("PowBit")]
        public PowerMeasure PowBit {
            get {
                return PowBitField;
            } 
            set {
                PowBitField = value;
                NotifyPropertyChanged("PowBit");
            }
        }

        private PowerMeasure PowBitField; 

        /// <summary>
        /// Pressure drop in bit.
        /// </summary>
		[Description("Pressure drop in bit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresDropBit")]
        public PressureMeasure PresDropBit {
            get {
                return PresDropBitField;
            } 
            set {
                PresDropBitField = value;
                NotifyPropertyChanged("PresDropBit");
            }
        }

        private PressureMeasure PresDropBitField; 

        /// <summary>
        /// Time spent on hold from start of bit run.
        /// </summary>
		[Description("Time spent on hold from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("CTimHold")]
        public TimeMeasure CTimHold {
            get {
                return CTimHoldField;
            } 
            set {
                CTimHoldField = value;
                NotifyPropertyChanged("CTimHold");
            }
        }

        private TimeMeasure CTimHoldField; 

        /// <summary>
        /// Time spent steering from start of bit run.
        /// </summary>
		[Description("Time spent steering from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("CTimSteering")]
        public TimeMeasure CTimSteering {
            get {
                return CTimSteeringField;
            } 
            set {
                CTimSteeringField = value;
                NotifyPropertyChanged("CTimSteering");
            }
        }

        private TimeMeasure CTimSteeringField; 

        /// <summary>
        /// Time spent rotary drilling from start of bit run.
        /// </summary>
		[Description("Time spent rotary drilling from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("CTimDrillRot")]
        public TimeMeasure CTimDrillRot {
            get {
                return CTimDrillRotField;
            } 
            set {
                CTimDrillRotField = value;
                NotifyPropertyChanged("CTimDrillRot");
            }
        }

        private TimeMeasure CTimDrillRotField; 

        /// <summary>
        /// Time spent slide drilling from start of bit run.
        /// </summary>
		[Description("Time spent slide drilling from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("CTimDrillSlid")]
        public TimeMeasure CTimDrillSlid {
            get {
                return CTimDrillSlidField;
            } 
            set {
                CTimDrillSlidField = value;
                NotifyPropertyChanged("CTimDrillSlid");
            }
        }

        private TimeMeasure CTimDrillSlidField; 

        /// <summary>
        /// Time spent circulating from start of bit run.
        /// </summary>
		[Description("Time spent circulating from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("CTimCirc")]
        public TimeMeasure CTimCirc {
            get {
                return CTimCircField;
            } 
            set {
                CTimCircField = value;
                NotifyPropertyChanged("CTimCirc");
            }
        }

        private TimeMeasure CTimCircField; 

        /// <summary>
        /// Time spent reaming from start of bit run.
        /// </summary>
		[Description("Time spent reaming from start of bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("CTimReam")]
        public TimeMeasure CTimReam {
            get {
                return CTimReamField;
            } 
            set {
                CTimReamField = value;
                NotifyPropertyChanged("CTimReam");
            }
        }

        private TimeMeasure CTimReamField; 

        /// <summary>
        /// Distance drilled - rotating.
        /// </summary>
		[Description("Distance drilled - rotating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistDrillRot")]
        public LengthMeasure DistDrillRot {
            get {
                return DistDrillRotField;
            } 
            set {
                DistDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure DistDrillRotField; 

        /// <summary>
        /// Distance drilled - sliding
        /// </summary>
		[Description("Distance drilled - sliding")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistDrillSlid")]
        public LengthMeasure DistDrillSlid {
            get {
                return DistDrillSlidField;
            } 
            set {
                DistDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure DistDrillSlidField; 

        /// <summary>
        /// Distance reamed.
        /// </summary>
		[Description("Distance reamed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistReam")]
        public LengthMeasure DistReam {
            get {
                return DistReamField;
            } 
            set {
                DistReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure DistReamField; 

        /// <summary>
        /// Distance covered while holding angle with a steerable drilling assembly.
        /// </summary>
		[Description("Distance covered while holding angle with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistHold")]
        public LengthMeasure DistHold {
            get {
                return DistHoldField;
            } 
            set {
                DistHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure DistHoldField; 

        /// <summary>
        /// Distance covered while actively steering with a steerable drilling assembly.
        /// </summary>
		[Description("Distance covered while actively steering with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistSteering")]
        public LengthMeasure DistSteering {
            get {
                return DistSteeringField;
            } 
            set {
                DistSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure DistSteeringField; 

        /// <summary>
        /// Average turn rate (commonly in rpm) through Interval.
        /// </summary>
		[Description("Average turn rate (commonly in rpm) through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("RpmAv")]
        public AngularVelocityMeasure RpmAverage {
            get {
                return RpmAvField;
            } 
            set {
                RpmAvField = value;
                NotifyPropertyChanged("RpmAverage");
            }
        }

        private AngularVelocityMeasure RpmAvField; 

        /// <summary>
        /// Maximum turn rate (commonly in rpm).
        /// </summary>
		[Description("Maximum turn rate (commonly in rpm).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("RpmMx")]
        public AngularVelocityMeasure RpmMax {
            get {
                return RpmMxField;
            } 
            set {
                RpmMxField = value;
                NotifyPropertyChanged("RpmMax");
            }
        }

        private AngularVelocityMeasure RpmMxField; 

        /// <summary>
        /// Minimum turn rate (commonly in rpm).
        /// </summary>
		[Description("Minimum turn rate (commonly in rpm).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("RpmMn")]
        public AngularVelocityMeasure RpmMin {
            get {
                return RpmMnField;
            } 
            set {
                RpmMnField = value;
                NotifyPropertyChanged("RpmMin");
            }
        }

        private AngularVelocityMeasure RpmMnField; 

        /// <summary>
        /// Average turn rate (commonly in rpm) downhole.
        /// </summary>
		[Description("Average turn rate (commonly in rpm) downhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("RpmAvDh")]
        public AngularVelocityMeasure RpmAverageDownhole {
            get {
                return RpmAvDhField;
            } 
            set {
                RpmAvDhField = value;
                NotifyPropertyChanged("RpmAverageDownhole");
            }
        }

        private AngularVelocityMeasure RpmAvDhField; 

        /// <summary>
        /// Average rate of penetration through Interval.
        /// </summary>
		[Description("Average rate of penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("RopAv")]
        public LengthPerTimeMeasure RopAverage {
            get {
                return RopAvField;
            } 
            set {
                RopAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private LengthPerTimeMeasure RopAvField; 

        /// <summary>
        /// Maximum rate of penetration through Interval.
        /// </summary>
		[Description("Maximum rate of penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("RopMx")]
        public LengthPerTimeMeasure RopMax {
            get {
                return RopMxField;
            } 
            set {
                RopMxField = value;
                NotifyPropertyChanged("RopMax");
            }
        }

        private LengthPerTimeMeasure RopMxField; 

        /// <summary>
        /// Minimum rate of penetration through Interval.
        /// </summary>
		[Description("Minimum rate of penetration through Interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("RopMn")]
        public LengthPerTimeMeasure RopMin {
            get {
                return RopMnField;
            } 
            set {
                RopMnField = value;
                NotifyPropertyChanged("RopMin");
            }
        }

        private LengthPerTimeMeasure RopMnField; 

        /// <summary>
        /// Surface weight on bit - average through interval.
        /// </summary>
		[Description("Surface weight on bit - average through interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("WobAv")]
        public ForceMeasure WobAverage {
            get {
                return WobAvField;
            } 
            set {
                WobAvField = value;
                NotifyPropertyChanged("WobAverage");
            }
        }

        private ForceMeasure WobAvField; 

        /// <summary>
        /// Weight on bit - maximum.
        /// </summary>
		[Description("Weight on bit - maximum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("WobMx")]
        public ForceMeasure WobMax {
            get {
                return WobMxField;
            } 
            set {
                WobMxField = value;
                NotifyPropertyChanged("WobMax");
            }
        }

        private ForceMeasure WobMxField; 

        /// <summary>
        /// Weight on bit - minimum.
        /// </summary>
		[Description("Weight on bit - minimum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("WobMn")]
        public ForceMeasure WobMin {
            get {
                return WobMnField;
            } 
            set {
                WobMnField = value;
                NotifyPropertyChanged("WobMin");
            }
        }

        private ForceMeasure WobMnField; 

        /// <summary>
        /// Weight on bit - average downhole.
        /// </summary>
		[Description("Weight on bit - average downhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("WobAvDh")]
        public ForceMeasure WobAverageDownhole {
            get {
                return WobAvDhField;
            } 
            set {
                WobAvDhField = value;
                NotifyPropertyChanged("WobAverageDownhole");
            }
        }

        private ForceMeasure WobAvDhField; 

        /// <summary>
        /// Reason for trip.
        /// </summary>
		[StringLength(2000)]
        [Description("Reason for trip.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("ReasonTrip")]
        public string ReasonTrip {
            get {
                return ReasonTripField;
            } 
            set {
                ReasonTripField = value;
                NotifyPropertyChanged("ReasonTrip");
            }
        }

        private string ReasonTripField; 

        /// <summary>
        /// Objective of bottom hole assembly.
        /// </summary>
		[StringLength(2000)]
        [Description("Objective of bottom hole assembly.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("ObjectiveBha")]
        public string ObjectiveBha {
            get {
                return ObjectiveBhaField;
            } 
            set {
                ObjectiveBhaField = value;
                NotifyPropertyChanged("ObjectiveBha");
            }
        }

        private string ObjectiveBhaField; 

        /// <summary>
        /// Azimuth at start measured depth.
        /// </summary>
		[Description("Azimuth at start measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("AziTop")]
        public PlaneAngleMeasure AziTop {
            get {
                return AziTopField;
            } 
            set {
                AziTopField = value;
                NotifyPropertyChanged("AziTop");
            }
        }

        private PlaneAngleMeasure AziTopField; 

        /// <summary>
        /// Azimuth at stop measured depth.
        /// </summary>
		[Description("Azimuth at stop measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("AziBottom")]
        public PlaneAngleMeasure AziBottom {
            get {
                return AziBottomField;
            } 
            set {
                AziBottomField = value;
                NotifyPropertyChanged("AziBottom");
            }
        }

        private PlaneAngleMeasure AziBottomField; 

        /// <summary>
        /// Inclination at start measured depth.
        /// </summary>
		[Description("Inclination at start measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("InclStart")]
        public PlaneAngleMeasure InclStart {
            get {
                return InclStartField;
            } 
            set {
                InclStartField = value;
                NotifyPropertyChanged("InclStart");
            }
        }

        private PlaneAngleMeasure InclStartField; 

        /// <summary>
        /// Maximum inclination.
        /// </summary>
		[Description("Maximum inclination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("InclMx")]
        public PlaneAngleMeasure InclMax {
            get {
                return InclMxField;
            } 
            set {
                InclMxField = value;
                NotifyPropertyChanged("InclMax");
            }
        }

        private PlaneAngleMeasure InclMxField; 

        /// <summary>
        /// Minimum inclination.
        /// </summary>
		[Description("Minimum inclination.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("InclMn")]
        public PlaneAngleMeasure InclMin {
            get {
                return InclMnField;
            } 
            set {
                InclMnField = value;
                NotifyPropertyChanged("InclMin");
            }
        }

        private PlaneAngleMeasure InclMnField; 

        /// <summary>
        /// Inclination at stop measured depth.
        /// </summary>
		[Description("Inclination at stop measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("InclStop")]
        public PlaneAngleMeasure InclStop {
            get {
                return InclStopField;
            } 
            set {
                InclStopField = value;
                NotifyPropertyChanged("InclStop");
            }
        }

        private PlaneAngleMeasure InclStopField; 

        /// <summary>
        /// Maximum mud temperature downhole during run.
        /// </summary>
		[Description("Maximum mud temperature downhole during run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempMudDhMx")]
        public ThermodynamicTemperatureMeasure TempMudDownholeMax {
            get {
                return TempMudDhMxField;
            } 
            set {
                TempMudDhMxField = value;
                NotifyPropertyChanged("TempMudDownholeMax");
            }
        }

        private ThermodynamicTemperatureMeasure TempMudDhMxField; 

        /// <summary>
        /// Average pump pressure.
        /// </summary>
		[Description("Average pump pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresPumpAv")]
        public PressureMeasure PresPumpAverage {
            get {
                return PresPumpAvField;
            } 
            set {
                PresPumpAvField = value;
                NotifyPropertyChanged("PresPumpAverage");
            }
        }

        private PressureMeasure PresPumpAvField; 

        /// <summary>
        /// Flow rate at bit.
        /// </summary>
		[Description("Flow rate at bit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateBit")]
        public VolumePerTimeMeasure FlowrateBit {
            get {
                return FlowrateBitField;
            } 
            set {
                FlowrateBitField = value;
                NotifyPropertyChanged("FlowrateBit");
            }
        }

        private VolumePerTimeMeasure FlowrateBitField; 

        /// <summary>
        /// The class of the drilling fluid.
        /// </summary>
		[Description("The class of the drilling fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "MudClass")]
		[XmlElement("MudClass")]
        public MudClass? MudClass {
            get {
                return MudClassField;
            } 
            set {
                MudClassField = value;
                 this.MudClassSpecified = true;
                NotifyPropertyChanged("MudClass");
            }
        }

        private MudClass? MudClassField; 

        /// <summary>
        /// MudClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MudClassSpecified {
            get {
                return MudClassSpecifiedField;
            } 
            set {
                MudClassSpecifiedField = value;
                NotifyPropertyChanged("MudClassSpecified");
            }
        }

        private bool MudClassSpecifiedField; 

        /// <summary>
        /// Mud Subtype at event occurrence.
        /// </summary>
		[Description("Mud Subtype at event occurrence.")]
        [EnergisticsDataTypeAttribute(DataType = "MudSubClass")]
		[XmlElement("MudSubClass")]
        public MudSubClass? MudSubClass {
            get {
                return MudSubClassField;
            } 
            set {
                MudSubClassField = value;
                 this.MudSubClassSpecified = true;
                NotifyPropertyChanged("MudSubClass");
            }
        }

        private MudSubClass? MudSubClassField; 

        /// <summary>
        /// MudSubClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MudSubClassSpecified {
            get {
                return MudSubClassSpecifiedField;
            } 
            set {
                MudSubClassSpecifiedField = value;
                NotifyPropertyChanged("MudSubClassSpecified");
            }
        }

        private bool MudSubClassSpecifiedField; 

        /// <summary>
        /// Comments and remarks.
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for the parameters
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the parameters")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportSurveyStation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportSurveyStation", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportSurveyStation xsd type.")]
    public partial class DrillReportSurveyStation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Required]
        [Description("The date at which the directional survey took place.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Required]
        [Description("Measured depth of measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("True vertical depth of the measurements.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// Incl property
        /// </summary>
		[Description("Hole inclination, measured from vertical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Incl")]
        public PlaneAngleMeasure Incl {
            get {
                return InclField;
            } 
            set {
                InclField = value;
                NotifyPropertyChanged("Incl");
            }
        }

        private PlaneAngleMeasure InclField; 

        /// <summary>
        /// Azi property
        /// </summary>
		[Description("Hole azimuth, corrected to a well's azimuth reference.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Azi")]
        public PlaneAngleMeasure Azi {
            get {
                return AziField;
            } 
            set {
                AziField = value;
                NotifyPropertyChanged("Azi");
            }
        }

        private PlaneAngleMeasure AziField; 

        /// <summary>
        /// VertSect property
        /// </summary>
		[Description("Distance along the vertical section of an azimuth plane.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("VertSect")]
        public LengthMeasure VertSect {
            get {
                return VertSectField;
            } 
            set {
                VertSectField = value;
                NotifyPropertyChanged("VertSect");
            }
        }

        private LengthMeasure VertSectField; 

        /// <summary>
        /// Dls property
        /// </summary>
		[Description("Dogleg severity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerLengthMeasure")]
		[XmlElement("Dls")]
        public AnglePerLengthMeasure DoglegSeverity {
            get {
                return DlsField;
            } 
            set {
                DlsField = value;
                NotifyPropertyChanged("DoglegSeverity");
            }
        }

        private AnglePerLengthMeasure DlsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Location property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractWellLocation")]
		[XmlElement("Location")]
        public List<AbstractWellLocation> Location {
            get {
                return LocationField;
            } 
            set {
                LocationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         /// <summary>
         /// bool to indicate if Location has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LocationSpecified
         {
             get {
             if(LocationField!=null)
                 return LocationField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractWellLocation> LocationField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportSurveyStation.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportSurveyStation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimestampedCommentString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimestampedCommentString", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TimestampedCommentString xsd type.")]
    public partial class TimestampedCommentString : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimestampedCommentString class.
        /// </summary>
        public TimestampedCommentString() {}

        /// <summary>
        /// Initializes a new instance of the TimestampedCommentString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TimestampedCommentString(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The timestamp of the time-qualified comment.
        /// </summary>
		[Required]
        [Description("The timestamp of the time-qualified comment.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
        [XmlAttribute("dTim")]
		
        public DateTime DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private DateTime dTimField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportPorePressure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportPorePressure", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportPorePressure xsd type.")]
    public partial class DrillReportPorePressure : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Indicate if the reading was estimated or measured. 
        /// </summary>
		[Required]
        [Description("Indicate if the reading was estimated or measured.")]
        [EnergisticsDataTypeAttribute(DataType = "ReadingKind")]
		[XmlElement("ReadingKind")]
        public ReadingKind? ReadingKind {
            get {
                return ReadingKindField;
            } 
            set {
                ReadingKindField = value;
                 this.ReadingKindSpecified = true;
                NotifyPropertyChanged("ReadingKind");
            }
        }

        
        private bool ReadingKindSpecifiedField = false;
        
        /// <summary>
        /// ReadingKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReadingKindSpecified {
            get {
                return ReadingKindSpecifiedField;
            } 
            set {
                ReadingKindSpecifiedField = value;
                NotifyPropertyChanged("ReadingKindSpecified");
            }
        }
        
        private ReadingKind? ReadingKindField; 

        /// <summary>
        /// The equivalent mud weight value of the pore pressure reading.
        /// </summary>
		[Required]
        [Description("The equivalent mud weight value of the pore pressure reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("EquivalentMudWeight")]
        public MassPerVolumeMeasure EquivalentMudWeight {
            get {
                return EquivalentMudWeightField;
            } 
            set {
                EquivalentMudWeightField = value;
                NotifyPropertyChanged("EquivalentMudWeight");
            }
        }

        private MassPerVolumeMeasure EquivalentMudWeightField; 

        /// <summary>
        /// Date and time at the reading was recorded.
        /// </summary>
		[Description("Date and time at the reading was recorded.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Measured depth where the readings were recorded.
        /// </summary>
		[Description("Measured depth where the readings were recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// True vertical depth where the readings were recorded.
        /// </summary>
		[Description("True vertical depth where the readings were recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportPorePressure.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportPorePressure.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ElectricPotentialDifferenceMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ElectricPotentialDifferenceMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ElectricPotentialDifferenceMeasure xsd type.")]
    public partial class ElectricPotentialDifferenceMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricPotentialDifferenceMeasure class.
        /// </summary>
        public ElectricPotentialDifferenceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricPotentialDifferenceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricPotentialDifferenceMeasure(double value, ElectricPotentialDifferenceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ElectricPotentialDifferenceUom")]
        [XmlAttribute("uom")]
		
        public ElectricPotentialDifferenceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricPotentialDifferenceUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Fluid xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Fluid", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Fluid xsd type.")]
    public partial class Fluid : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Type property
        /// </summary>
		[StringLength(64)]
        [Description("Description for the type of fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// LocationSample property
        /// </summary>
		[StringLength(64)]
        [Description("Sample location.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LocationSample")]
        public string LocationSample {
            get {
                return LocationSampleField;
            } 
            set {
                LocationSampleField = value;
                NotifyPropertyChanged("LocationSample");
            }
        }

        private string LocationSampleField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[Description("The time when fluid readings were recorded.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("The measured depth where the fluid readings were recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("The true vertical depth where the fluid readings were recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// Ecd property
        /// </summary>
		[Description("Equivalent circulating density where fluid reading was recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Ecd")]
        public MassPerVolumeMeasure Ecd {
            get {
                return EcdField;
            } 
            set {
                EcdField = value;
                NotifyPropertyChanged("Ecd");
            }
        }

        private MassPerVolumeMeasure EcdField; 

        /// <summary>
        /// KickToleranceVolume property
        /// </summary>
		[Description("Assumed kick volume for calculation of kick tolerance based on the kick intensity where the fluid reading was recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("KickToleranceVolume")]
        public VolumeMeasure KickToleranceVolume {
            get {
                return KickToleranceVolumeField;
            } 
            set {
                KickToleranceVolumeField = value;
                NotifyPropertyChanged("KickToleranceVolume");
            }
        }

        private VolumeMeasure KickToleranceVolumeField; 

        /// <summary>
        /// KickToleranceIntensity property
        /// </summary>
		[Description("Assumed kick density for calculation of kick tolerance where the fluid reading was recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("KickToleranceIntensity")]
        public MassPerVolumeMeasure KickToleranceIntensity {
            get {
                return KickToleranceIntensityField;
            } 
            set {
                KickToleranceIntensityField = value;
                NotifyPropertyChanged("KickToleranceIntensity");
            }
        }

        private MassPerVolumeMeasure KickToleranceIntensityField; 

        /// <summary>
        /// TempFlowLine property
        /// </summary>
		[Description("Flow line temperature measurement where the fluid reading was recorded.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempFlowLine")]
        public ThermodynamicTemperatureMeasure TempFlowLine {
            get {
                return TempFlowLineField;
            } 
            set {
                TempFlowLineField = value;
                NotifyPropertyChanged("TempFlowLine");
            }
        }

        private ThermodynamicTemperatureMeasure TempFlowLineField; 

        /// <summary>
        /// PresBopRating property
        /// </summary>
		[Description("Maximum pressure rating of the blow out preventer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresBopRating")]
        public PressureMeasure PresBopRating {
            get {
                return PresBopRatingField;
            } 
            set {
                PresBopRatingField = value;
                NotifyPropertyChanged("PresBopRating");
            }
        }

        private PressureMeasure PresBopRatingField; 

        /// <summary>
        /// MudClass property
        /// </summary>
		[Description("The class of the drilling fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "MudClass")]
		[XmlElement("MudClass")]
        public MudClass? MudClass {
            get {
                return MudClassField;
            } 
            set {
                MudClassField = value;
                 this.MudClassSpecified = true;
                NotifyPropertyChanged("MudClass");
            }
        }

        private MudClass? MudClassField; 

        /// <summary>
        /// MudClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MudClassSpecified {
            get {
                return MudClassSpecifiedField;
            } 
            set {
                MudClassSpecifiedField = value;
                NotifyPropertyChanged("MudClassSpecified");
            }
        }

        private bool MudClassSpecifiedField; 

        /// <summary>
        /// Density property
        /// </summary>
		[Description("Fluid density.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Density")]
        public MassPerVolumeMeasure Density {
            get {
                return DensityField;
            } 
            set {
                DensityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private MassPerVolumeMeasure DensityField; 

        /// <summary>
        /// VisFunnel property
        /// </summary>
		[Description("Funnel viscosity in seconds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("VisFunnel")]
        public TimeMeasure VisFunnel {
            get {
                return VisFunnelField;
            } 
            set {
                VisFunnelField = value;
                NotifyPropertyChanged("VisFunnel");
            }
        }

        private TimeMeasure VisFunnelField; 

        /// <summary>
        /// TempVis property
        /// </summary>
		[Description("Funnel viscosity temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempVis")]
        public ThermodynamicTemperatureMeasure TempVis {
            get {
                return TempVisField;
            } 
            set {
                TempVisField = value;
                NotifyPropertyChanged("TempVis");
            }
        }

        private ThermodynamicTemperatureMeasure TempVisField; 

        /// <summary>
        /// Pv property
        /// </summary>
		[Description("Plastic viscosity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityMeasure")]
		[XmlElement("Pv")]
        public DynamicViscosityMeasure PV {
            get {
                return PvField;
            } 
            set {
                PvField = value;
                NotifyPropertyChanged("PV");
            }
        }

        private DynamicViscosityMeasure PvField; 

        /// <summary>
        /// Yp property
        /// </summary>
		[Description("Yield point (Bingham and Herschel Bulkley models).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Yp")]
        public PressureMeasure YP {
            get {
                return YpField;
            } 
            set {
                YpField = value;
                NotifyPropertyChanged("YP");
            }
        }

        private PressureMeasure YpField; 

        /// <summary>
        /// Gel10Sec property
        /// </summary>
		[Description("Ten-second gels.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Gel10Sec")]
        public PressureMeasure Gel10Sec {
            get {
                return Gel10SecField;
            } 
            set {
                Gel10SecField = value;
                NotifyPropertyChanged("Gel10Sec");
            }
        }

        private PressureMeasure Gel10SecField; 

        /// <summary>
        /// Gel10Min property
        /// </summary>
		[Description("Ten-minute gels.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Gel10Min")]
        public PressureMeasure Gel10Min {
            get {
                return Gel10MinField;
            } 
            set {
                Gel10MinField = value;
                NotifyPropertyChanged("Gel10Min");
            }
        }

        private PressureMeasure Gel10MinField; 

        /// <summary>
        /// Gel30Min property
        /// </summary>
		[Description("Thirty-minute gels.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Gel30Min")]
        public PressureMeasure Gel30Min {
            get {
                return Gel30MinField;
            } 
            set {
                Gel30MinField = value;
                NotifyPropertyChanged("Gel30Min");
            }
        }

        private PressureMeasure Gel30MinField; 

        /// <summary>
        /// FilterCakeLtlp property
        /// </summary>
		[Description("Filter cake thickness at low (normal) temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FilterCakeLtlp")]
        public LengthMeasure FilterCakeLtlp {
            get {
                return FilterCakeLtlpField;
            } 
            set {
                FilterCakeLtlpField = value;
                NotifyPropertyChanged("FilterCakeLtlp");
            }
        }

        private LengthMeasure FilterCakeLtlpField; 

        /// <summary>
        /// FiltrateLtlp property
        /// </summary>
		[Description("API water loss (low temperature and pressure mud filtrate measurement) (volume per 30 min).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FiltrateLtlp")]
        public VolumeMeasure FiltrateLtlp {
            get {
                return FiltrateLtlpField;
            } 
            set {
                FiltrateLtlpField = value;
                NotifyPropertyChanged("FiltrateLtlp");
            }
        }

        private VolumeMeasure FiltrateLtlpField; 

        /// <summary>
        /// TempHthp property
        /// </summary>
		[Description("High temperature high pressure (HTHP) temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempHthp")]
        public ThermodynamicTemperatureMeasure TempHthp {
            get {
                return TempHthpField;
            } 
            set {
                TempHthpField = value;
                NotifyPropertyChanged("TempHthp");
            }
        }

        private ThermodynamicTemperatureMeasure TempHthpField; 

        /// <summary>
        /// PresHthp property
        /// </summary>
		[Description("High temperature high pressure (HTHP) pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresHthp")]
        public PressureMeasure PresHthp {
            get {
                return PresHthpField;
            } 
            set {
                PresHthpField = value;
                NotifyPropertyChanged("PresHthp");
            }
        }

        private PressureMeasure PresHthpField; 

        /// <summary>
        /// FiltrateHthp property
        /// </summary>
		[Description("High temperature high pressure (HTHP) filtrate (volume per 30 min).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FiltrateHthp")]
        public VolumeMeasure FiltrateHthp {
            get {
                return FiltrateHthpField;
            } 
            set {
                FiltrateHthpField = value;
                NotifyPropertyChanged("FiltrateHthp");
            }
        }

        private VolumeMeasure FiltrateHthpField; 

        /// <summary>
        /// FilterCakeHthp property
        /// </summary>
		[Description("High temperature high pressure (HTHP) filter cake thickness.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FilterCakeHthp")]
        public LengthMeasure FilterCakeHthp {
            get {
                return FilterCakeHthpField;
            } 
            set {
                FilterCakeHthpField = value;
                NotifyPropertyChanged("FilterCakeHthp");
            }
        }

        private LengthMeasure FilterCakeHthpField; 

        /// <summary>
        /// SolidsPc property
        /// </summary>
		[Description("Solids percentage from retort.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SolidsPc")]
        public VolumePerVolumeMeasure SolidsPercent {
            get {
                return SolidsPcField;
            } 
            set {
                SolidsPcField = value;
                NotifyPropertyChanged("SolidsPercent");
            }
        }

        private VolumePerVolumeMeasure SolidsPcField; 

        /// <summary>
        /// WaterPc property
        /// </summary>
		[Description("Water content percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("WaterPc")]
        public VolumePerVolumeMeasure WaterPercent {
            get {
                return WaterPcField;
            } 
            set {
                WaterPcField = value;
                NotifyPropertyChanged("WaterPercent");
            }
        }

        private VolumePerVolumeMeasure WaterPcField; 

        /// <summary>
        /// OilPc property
        /// </summary>
		[Description("Percent oil content from retort.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("OilPc")]
        public VolumePerVolumeMeasure OilPercent {
            get {
                return OilPcField;
            } 
            set {
                OilPcField = value;
                NotifyPropertyChanged("OilPercent");
            }
        }

        private VolumePerVolumeMeasure OilPcField; 

        /// <summary>
        /// SandPc property
        /// </summary>
		[Description("Sand content percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SandPc")]
        public VolumePerVolumeMeasure SandPercent {
            get {
                return SandPcField;
            } 
            set {
                SandPcField = value;
                NotifyPropertyChanged("SandPercent");
            }
        }

        private VolumePerVolumeMeasure SandPcField; 

        /// <summary>
        /// SolidsLowGravPc property
        /// </summary>
		[Description("Low gravity solids percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SolidsLowGravPc")]
        public VolumePerVolumeMeasure SolidsLowGravPercent {
            get {
                return SolidsLowGravPcField;
            } 
            set {
                SolidsLowGravPcField = value;
                NotifyPropertyChanged("SolidsLowGravPercent");
            }
        }

        private VolumePerVolumeMeasure SolidsLowGravPcField; 

        /// <summary>
        /// SolidsLowGrav property
        /// </summary>
		[Description("Solids low gravity content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("SolidsLowGrav")]
        public MassPerVolumeMeasure SolidsLowGrav {
            get {
                return SolidsLowGravField;
            } 
            set {
                SolidsLowGravField = value;
                NotifyPropertyChanged("SolidsLowGrav");
            }
        }

        private MassPerVolumeMeasure SolidsLowGravField; 

        /// <summary>
        /// SolidsCalcPc property
        /// </summary>
		[Description("Percent calculated solids content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SolidsCalcPc")]
        public VolumePerVolumeMeasure SolidsCalcPercent {
            get {
                return SolidsCalcPcField;
            } 
            set {
                SolidsCalcPcField = value;
                NotifyPropertyChanged("SolidsCalcPercent");
            }
        }

        private VolumePerVolumeMeasure SolidsCalcPcField; 

        /// <summary>
        /// BaritePc property
        /// </summary>
		[Description("Barite content percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("BaritePc")]
        public VolumePerVolumeMeasure BaritePercent {
            get {
                return BaritePcField;
            } 
            set {
                BaritePcField = value;
                NotifyPropertyChanged("BaritePercent");
            }
        }

        private VolumePerVolumeMeasure BaritePcField; 

        /// <summary>
        /// Lcm property
        /// </summary>
		[Description("Lost circulation material.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Lcm")]
        public MassPerVolumeMeasure Lcm {
            get {
                return LcmField;
            } 
            set {
                LcmField = value;
                NotifyPropertyChanged("Lcm");
            }
        }

        private MassPerVolumeMeasure LcmField; 

        /// <summary>
        /// Mbt property
        /// </summary>
		[Description("Cation exchange capacity (CEC) of the mud sample as measured by methylene blue titration (MBT).  NOTE: This is temporarily set to be a GenericMeasure with no unit validation, pending addition of CEC units to the Energistics UoM spec.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GenericMeasure")]
		[XmlElement("Mbt")]
        public GenericMeasure Mbt {
            get {
                return MbtField;
            } 
            set {
                MbtField = value;
                NotifyPropertyChanged("Mbt");
            }
        }

        private GenericMeasure MbtField; 

        /// <summary>
        /// Ph property
        /// </summary>
		[Description("Mud pH.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Ph")]
        public double? PH {
            get {
                return PhField;
            } 
            set {
                PhField = value;
                 this.PHSpecified = true;
                NotifyPropertyChanged("PH");
            }
        }

        private double? PhField; 

        /// <summary>
        /// PhSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PHSpecified {
            get {
                return PhSpecifiedField;
            } 
            set {
                PhSpecifiedField = value;
                NotifyPropertyChanged("PHSpecified");
            }
        }

        private bool PhSpecifiedField; 

        /// <summary>
        /// TempPh property
        /// </summary>
		[Description("Mud pH measurement temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempPh")]
        public ThermodynamicTemperatureMeasure TempPH {
            get {
                return TempPhField;
            } 
            set {
                TempPhField = value;
                NotifyPropertyChanged("TempPH");
            }
        }

        private ThermodynamicTemperatureMeasure TempPhField; 

        /// <summary>
        /// Pm property
        /// </summary>
		[Description("Phenolphthalein alkalinity of whole mud.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Pm")]
        public VolumeMeasure Pm {
            get {
                return PmField;
            } 
            set {
                PmField = value;
                NotifyPropertyChanged("Pm");
            }
        }

        private VolumeMeasure PmField; 

        /// <summary>
        /// PmFiltrate property
        /// </summary>
		[Description("Phenolphthalein alkalinity of mud filtrate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("PmFiltrate")]
        public VolumeMeasure PmFiltrate {
            get {
                return PmFiltrateField;
            } 
            set {
                PmFiltrateField = value;
                NotifyPropertyChanged("PmFiltrate");
            }
        }

        private VolumeMeasure PmFiltrateField; 

        /// <summary>
        /// Mf property
        /// </summary>
		[Description("Methyl orange alkalinity of filtrate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Mf")]
        public VolumeMeasure Mf {
            get {
                return MfField;
            } 
            set {
                MfField = value;
                NotifyPropertyChanged("Mf");
            }
        }

        private VolumeMeasure MfField; 

        /// <summary>
        /// AlkalinityP1 property
        /// </summary>
		[Description("Mud alkalinity P1 from alternate alkalinity method (volume in ml of 0.02N acid  to reach the phenolphthalein endpoint).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("AlkalinityP1")]
        public VolumeMeasure AlkalinityP1 {
            get {
                return AlkalinityP1Field;
            } 
            set {
                AlkalinityP1Field = value;
                NotifyPropertyChanged("AlkalinityP1");
            }
        }

        private VolumeMeasure AlkalinityP1Field; 

        /// <summary>
        /// AlkalinityP2 property
        /// </summary>
		[Description("Mud alkalinity P2 from alternate alkalinity method (volume in ml of 0.02N acid to titrate, the reagent mixture to the phenolphthalein endpoint).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("AlkalinityP2")]
        public VolumeMeasure AlkalinityP2 {
            get {
                return AlkalinityP2Field;
            } 
            set {
                AlkalinityP2Field = value;
                NotifyPropertyChanged("AlkalinityP2");
            }
        }

        private VolumeMeasure AlkalinityP2Field; 

        /// <summary>
        /// Chloride property
        /// </summary>
		[Description("Chloride content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Chloride")]
        public MassPerVolumeMeasure Chloride {
            get {
                return ChlorideField;
            } 
            set {
                ChlorideField = value;
                NotifyPropertyChanged("Chloride");
            }
        }

        private MassPerVolumeMeasure ChlorideField; 

        /// <summary>
        /// Calcium property
        /// </summary>
		[Description("Calcium content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Calcium")]
        public MassPerVolumeMeasure Calcium {
            get {
                return CalciumField;
            } 
            set {
                CalciumField = value;
                NotifyPropertyChanged("Calcium");
            }
        }

        private MassPerVolumeMeasure CalciumField; 

        /// <summary>
        /// Magnesium property
        /// </summary>
		[Description("Magnesium content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Magnesium")]
        public MassPerVolumeMeasure Magnesium {
            get {
                return MagnesiumField;
            } 
            set {
                MagnesiumField = value;
                NotifyPropertyChanged("Magnesium");
            }
        }

        private MassPerVolumeMeasure MagnesiumField; 

        /// <summary>
        /// Potassium property
        /// </summary>
		[Description("Potassium content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Potassium")]
        public MassPerVolumeMeasure Potassium {
            get {
                return PotassiumField;
            } 
            set {
                PotassiumField = value;
                NotifyPropertyChanged("Potassium");
            }
        }

        private MassPerVolumeMeasure PotassiumField; 

        /// <summary>
        /// BrinePc property
        /// </summary>
		[Description("Percent brine content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("BrinePc")]
        public VolumePerVolumeMeasure BrinePercent {
            get {
                return BrinePcField;
            } 
            set {
                BrinePcField = value;
                NotifyPropertyChanged("BrinePercent");
            }
        }

        private VolumePerVolumeMeasure BrinePcField; 

        /// <summary>
        /// BrineDensity property
        /// </summary>
		[Description("Density of water phase of NAF.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("BrineDensity")]
        public MassPerVolumeMeasure BrineDensity {
            get {
                return BrineDensityField;
            } 
            set {
                BrineDensityField = value;
                NotifyPropertyChanged("BrineDensity");
            }
        }

        private MassPerVolumeMeasure BrineDensityField; 

        /// <summary>
        /// Lime property
        /// </summary>
		[Description("Lime content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Lime")]
        public MassPerVolumeMeasure Lime {
            get {
                return LimeField;
            } 
            set {
                LimeField = value;
                NotifyPropertyChanged("Lime");
            }
        }

        private MassPerVolumeMeasure LimeField; 

        /// <summary>
        /// ElectStab property
        /// </summary>
		[Description("Measurement of the emulsion stability and oil-wetting capability in oil-based muds.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ElectricPotentialDifferenceMeasure")]
		[XmlElement("ElectStab")]
        public ElectricPotentialDifferenceMeasure ElectStab {
            get {
                return ElectStabField;
            } 
            set {
                ElectStabField = value;
                NotifyPropertyChanged("ElectStab");
            }
        }

        private ElectricPotentialDifferenceMeasure ElectStabField; 

        /// <summary>
        /// CalciumChloridePc property
        /// </summary>
		[Description("Calcium chloride percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("CalciumChloridePc")]
        public VolumePerVolumeMeasure CalciumChloridePercent {
            get {
                return CalciumChloridePcField;
            } 
            set {
                CalciumChloridePcField = value;
                NotifyPropertyChanged("CalciumChloridePercent");
            }
        }

        private VolumePerVolumeMeasure CalciumChloridePcField; 

        /// <summary>
        /// CalciumChloride property
        /// </summary>
		[Description("Calcium chloride content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("CalciumChloride")]
        public MassPerVolumeMeasure CalciumChloride {
            get {
                return CalciumChlorideField;
            } 
            set {
                CalciumChlorideField = value;
                NotifyPropertyChanged("CalciumChloride");
            }
        }

        private MassPerVolumeMeasure CalciumChlorideField; 

        /// <summary>
        /// Company property
        /// </summary>
		[StringLength(64)]
        [Description("Name of company.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Company")]
        public string Company {
            get {
                return CompanyField;
            } 
            set {
                CompanyField = value;
                NotifyPropertyChanged("Company");
            }
        }

        private string CompanyField; 

        /// <summary>
        /// Engineer property
        /// </summary>
		[StringLength(64)]
        [Description("Engineer name")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Engineer")]
        public string Engineer {
            get {
                return EngineerField;
            } 
            set {
                EngineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private string EngineerField; 

        /// <summary>
        /// Asg property
        /// </summary>
		[Description("Average specific gravity of solids.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Asg")]
        public MassPerMassMeasure Asg {
            get {
                return AsgField;
            } 
            set {
                AsgField = value;
                NotifyPropertyChanged("Asg");
            }
        }

        private MassPerMassMeasure AsgField; 

        /// <summary>
        /// SolidsHiGravPc property
        /// </summary>
		[Description("Solids high gravity percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SolidsHiGravPc")]
        public VolumePerVolumeMeasure SolidsHiGravPercent {
            get {
                return SolidsHiGravPcField;
            } 
            set {
                SolidsHiGravPcField = value;
                NotifyPropertyChanged("SolidsHiGravPercent");
            }
        }

        private VolumePerVolumeMeasure SolidsHiGravPcField; 

        /// <summary>
        /// SolidsHiGrav property
        /// </summary>
		[Description("Solids high gravity content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("SolidsHiGrav")]
        public MassPerVolumeMeasure SolidsHiGrav {
            get {
                return SolidsHiGravField;
            } 
            set {
                SolidsHiGravField = value;
                NotifyPropertyChanged("SolidsHiGrav");
            }
        }

        private MassPerVolumeMeasure SolidsHiGravField; 

        /// <summary>
        /// Polymer property
        /// </summary>
		[Description("Polymers present in the mud system.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Polymer")]
        public VolumePerVolumeMeasure Polymer {
            get {
                return PolymerField;
            } 
            set {
                PolymerField = value;
                NotifyPropertyChanged("Polymer");
            }
        }

        private VolumePerVolumeMeasure PolymerField; 

        /// <summary>
        /// PolyType property
        /// </summary>
		[StringLength(64)]
        [Description("Type of polymers present in the mud system.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PolyType")]
        public string PolyType {
            get {
                return PolyTypeField;
            } 
            set {
                PolyTypeField = value;
                NotifyPropertyChanged("PolyType");
            }
        }

        private string PolyTypeField; 

        /// <summary>
        /// SolCorPc property
        /// </summary>
		[Description("Solids corrected for chloride content percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SolCorPc")]
        public VolumePerVolumeMeasure SolCorPercent {
            get {
                return SolCorPcField;
            } 
            set {
                SolCorPcField = value;
                NotifyPropertyChanged("SolCorPercent");
            }
        }

        private VolumePerVolumeMeasure SolCorPcField; 

        /// <summary>
        /// OilCtg property
        /// </summary>
		[Description("Oil on cuttings.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("OilCtg")]
        public MassPerMassMeasure OilCtg {
            get {
                return OilCtgField;
            } 
            set {
                OilCtgField = value;
                NotifyPropertyChanged("OilCtg");
            }
        }

        private MassPerMassMeasure OilCtgField; 

        /// <summary>
        /// OilCtgDry property
        /// </summary>
		[Description("Oil on dried cuttings.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("OilCtgDry")]
        public MassPerVolumeMeasure OilCtgDry {
            get {
                return OilCtgDryField;
            } 
            set {
                OilCtgDryField = value;
                NotifyPropertyChanged("OilCtgDry");
            }
        }

        private MassPerVolumeMeasure OilCtgDryField; 

        /// <summary>
        /// HardnessCa property
        /// </summary>
		[Description("Total calcium hardness.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("HardnessCa")]
        public MassPerMassMeasure HardnessCA {
            get {
                return HardnessCaField;
            } 
            set {
                HardnessCaField = value;
                NotifyPropertyChanged("HardnessCA");
            }
        }

        private MassPerMassMeasure HardnessCaField; 

        /// <summary>
        /// Sulfide property
        /// </summary>
		[Description("Sulfide content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Sulfide")]
        public MassPerVolumeMeasure Sulfide {
            get {
                return SulfideField;
            } 
            set {
                SulfideField = value;
                NotifyPropertyChanged("Sulfide");
            }
        }

        private MassPerVolumeMeasure SulfideField; 

        /// <summary>
        /// AverageCuttingSize property
        /// </summary>
		[Description("Average size of the drill cuttings.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("AverageCuttingSize")]
        public LengthMeasure AverageCuttingSize {
            get {
                return AverageCuttingSizeField;
            } 
            set {
                AverageCuttingSizeField = value;
                NotifyPropertyChanged("AverageCuttingSize");
            }
        }

        private LengthMeasure AverageCuttingSizeField; 

        /// <summary>
        /// Carbonate property
        /// </summary>
		[Description("Carbonate content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Carbonate")]
        public MassPerVolumeMeasure Carbonate {
            get {
                return CarbonateField;
            } 
            set {
                CarbonateField = value;
                NotifyPropertyChanged("Carbonate");
            }
        }

        private MassPerVolumeMeasure CarbonateField; 

        /// <summary>
        /// Iron property
        /// </summary>
		[Description("Iron content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Iron")]
        public MassPerVolumeMeasure Iron {
            get {
                return IronField;
            } 
            set {
                IronField = value;
                NotifyPropertyChanged("Iron");
            }
        }

        private MassPerVolumeMeasure IronField; 

        /// <summary>
        /// MetalRecovered property
        /// </summary>
		[Description("Metal recovered from the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("MetalRecovered")]
        public MassMeasure MetalRecovered {
            get {
                return MetalRecoveredField;
            } 
            set {
                MetalRecoveredField = value;
                NotifyPropertyChanged("MetalRecovered");
            }
        }

        private MassMeasure MetalRecoveredField; 

        /// <summary>
        /// Turbidity property
        /// </summary>
		[Description("Turbidity units to measure the cloudiness or haziness of a fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Turbidity")]
        public double? Turbidity {
            get {
                return TurbidityField;
            } 
            set {
                TurbidityField = value;
                 this.TurbiditySpecified = true;
                NotifyPropertyChanged("Turbidity");
            }
        }

        private double? TurbidityField; 

        /// <summary>
        /// TurbiditySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TurbiditySpecified {
            get {
                return TurbiditySpecifiedField;
            } 
            set {
                TurbiditySpecifiedField = value;
                NotifyPropertyChanged("TurbiditySpecified");
            }
        }

        private bool TurbiditySpecifiedField; 

        /// <summary>
        /// OilGrease property
        /// </summary>
		[Description("Oil and grease content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("OilGrease")]
        public MassPerVolumeMeasure OilGrease {
            get {
                return OilGreaseField;
            } 
            set {
                OilGreaseField = value;
                NotifyPropertyChanged("OilGrease");
            }
        }

        private MassPerVolumeMeasure OilGreaseField; 

        /// <summary>
        /// Salt property
        /// </summary>
		[Description("Salt content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("Salt")]
        public MassPerVolumeMeasure Salt {
            get {
                return SaltField;
            } 
            set {
                SaltField = value;
                NotifyPropertyChanged("Salt");
            }
        }

        private MassPerVolumeMeasure SaltField; 

        /// <summary>
        /// SaltPc property
        /// </summary>
		[Description("Salt percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SaltPc")]
        public VolumePerVolumeMeasure SaltPercent {
            get {
                return SaltPcField;
            } 
            set {
                SaltPcField = value;
                NotifyPropertyChanged("SaltPercent");
            }
        }

        private VolumePerVolumeMeasure SaltPcField; 

        /// <summary>
        /// Tct property
        /// </summary>
		[Description("True crystallization temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("Tct")]
        public ThermodynamicTemperatureMeasure Tct {
            get {
                return TctField;
            } 
            set {
                TctField = value;
                NotifyPropertyChanged("Tct");
            }
        }

        private ThermodynamicTemperatureMeasure TctField; 

        /// <summary>
        /// WaterPhaseSalinity property
        /// </summary>
		[Description("A factor showing the activity level of salt in oil-based mud.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("WaterPhaseSalinity")]
        public MassPerVolumeMeasure WaterPhaseSalinity {
            get {
                return WaterPhaseSalinityField;
            } 
            set {
                WaterPhaseSalinityField = value;
                NotifyPropertyChanged("WaterPhaseSalinity");
            }
        }

        private MassPerVolumeMeasure WaterPhaseSalinityField; 

        /// <summary>
        /// WholeMudCalcium property
        /// </summary>
		[Description("Calcium content in the whole mud sample, including oil and water phases.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("WholeMudCalcium")]
        public MassPerVolumeMeasure WholeMudCalcium {
            get {
                return WholeMudCalciumField;
            } 
            set {
                WholeMudCalciumField = value;
                NotifyPropertyChanged("WholeMudCalcium");
            }
        }

        private MassPerVolumeMeasure WholeMudCalciumField; 

        /// <summary>
        /// WholeMudChloride property
        /// </summary>
		[Description("Chloride content in the whole mud sample, including oil and water phases.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("WholeMudChloride")]
        public MassPerVolumeMeasure WholeMudChloride {
            get {
                return WholeMudChlorideField;
            } 
            set {
                WholeMudChlorideField = value;
                NotifyPropertyChanged("WholeMudChloride");
            }
        }

        private MassPerVolumeMeasure WholeMudChlorideField; 

        /// <summary>
        /// ZincOxide property
        /// </summary>
		[Description("Zinc oxide content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("ZincOxide")]
        public MassPerVolumeMeasure ZincOxide {
            get {
                return ZincOxideField;
            } 
            set {
                ZincOxideField = value;
                NotifyPropertyChanged("ZincOxide");
            }
        }

        private MassPerVolumeMeasure ZincOxideField; 

        /// <summary>
        /// SodiumChloride property
        /// </summary>
		[Description("Sodium chloride content.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("SodiumChloride")]
        public MassPerVolumeMeasure SodiumChloride {
            get {
                return SodiumChlorideField;
            } 
            set {
                SodiumChlorideField = value;
                NotifyPropertyChanged("SodiumChloride");
            }
        }

        private MassPerVolumeMeasure SodiumChlorideField; 

        /// <summary>
        /// SodiumChloridePc property
        /// </summary>
		[Description("Sodium chloride percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("SodiumChloridePc")]
        public VolumePerVolumeMeasure SodiumChloridePercent {
            get {
                return SodiumChloridePcField;
            } 
            set {
                SodiumChloridePcField = value;
                NotifyPropertyChanged("SodiumChloridePercent");
            }
        }

        private VolumePerVolumeMeasure SodiumChloridePcField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Rheometer property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Rheometer")]
		[XmlElement("Rheometer")]
        public List<Rheometer> Rheometer {
            get {
                return RheometerField;
            } 
            set {
                RheometerField = value;
                NotifyPropertyChanged("Rheometer");
            }
        }

         /// <summary>
         /// bool to indicate if Rheometer has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RheometerSpecified
         {
             get {
             if(RheometerField!=null)
                 return RheometerField.Count>0?true:false;
             else return false;
             }
         }
        private List<Rheometer> RheometerField; 

		/// <summary>
        /// Unique identifier for this instance of Fluid.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Fluid.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportStatusInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportStatusInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportStatusInfo xsd type.")]
    public partial class DrillReportStatusInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Description("The date and time for which the well status is reported.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("Wellbore measured depth at the end of the report period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("Wellbore true vertical depth at the end of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// MdPlugTop property
        /// </summary>
		[Description("The measured plug back depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdPlugTop")]
        public MeasuredDepthCoord MDPlugTop {
            get {
                return MdPlugTopField;
            } 
            set {
                MdPlugTopField = value;
                NotifyPropertyChanged("MDPlugTop");
            }
        }

        private MeasuredDepthCoord MdPlugTopField; 

        /// <summary>
        /// DiaHole property
        /// </summary>
		[Description("Hole nominal inside diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaHole")]
        public LengthMeasure DiaHole {
            get {
                return DiaHoleField;
            } 
            set {
                DiaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure DiaHoleField; 

        /// <summary>
        /// MdDiaHoleStart property
        /// </summary>
		[Description("Measured depth to the start of the current hole diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdDiaHoleStart")]
        public MeasuredDepthCoord MDDiaHoleStart {
            get {
                return MdDiaHoleStartField;
            } 
            set {
                MdDiaHoleStartField = value;
                NotifyPropertyChanged("MDDiaHoleStart");
            }
        }

        private MeasuredDepthCoord MdDiaHoleStartField; 

        /// <summary>
        /// DiaPilot property
        /// </summary>
		[Description("Pilot hole nominal inside diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaPilot")]
        public LengthMeasure DiaPilot {
            get {
                return DiaPilotField;
            } 
            set {
                DiaPilotField = value;
                NotifyPropertyChanged("DiaPilot");
            }
        }

        private LengthMeasure DiaPilotField; 

        /// <summary>
        /// MdDiaPilotPlan property
        /// </summary>
		[Description("The planned measured depth of the pilot hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdDiaPilotPlan")]
        public MeasuredDepthCoord MDDiaPilotPlan {
            get {
                return MdDiaPilotPlanField;
            } 
            set {
                MdDiaPilotPlanField = value;
                NotifyPropertyChanged("MDDiaPilotPlan");
            }
        }

        private MeasuredDepthCoord MdDiaPilotPlanField; 

        /// <summary>
        /// TvdDiaPilotPlan property
        /// </summary>
		[Description("The planned true vertical depth of the pilot hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdDiaPilotPlan")]
        public WellVerticalDepthCoord TvdDiaPilotPlan {
            get {
                return TvdDiaPilotPlanField;
            } 
            set {
                TvdDiaPilotPlanField = value;
                NotifyPropertyChanged("TvdDiaPilotPlan");
            }
        }

        private WellVerticalDepthCoord TvdDiaPilotPlanField; 

        /// <summary>
        /// TypeWellbore property
        /// </summary>
		[Description("Type of wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "WellboreType")]
		[XmlElement("TypeWellbore")]
        public WellboreType? TypeWellbore {
            get {
                return TypeWellboreField;
            } 
            set {
                TypeWellboreField = value;
                 this.TypeWellboreSpecified = true;
                NotifyPropertyChanged("TypeWellbore");
            }
        }

        private WellboreType? TypeWellboreField; 

        /// <summary>
        /// TypeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeWellboreSpecified {
            get {
                return TypeWellboreSpecifiedField;
            } 
            set {
                TypeWellboreSpecifiedField = value;
                NotifyPropertyChanged("TypeWellboreSpecified");
            }
        }

        private bool TypeWellboreSpecifiedField; 

        /// <summary>
        /// MdKickoff property
        /// </summary>
		[Description("Measured depth to the kickoff point of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdKickoff")]
        public MeasuredDepthCoord MDKickoff {
            get {
                return MdKickoffField;
            } 
            set {
                MdKickoffField = value;
                NotifyPropertyChanged("MDKickoff");
            }
        }

        private MeasuredDepthCoord MdKickoffField; 

        /// <summary>
        /// TvdKickoff property
        /// </summary>
		[Description("True vertical depth to the kickoff point of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("TvdKickoff")]
        public MeasuredDepthCoord TvdKickoff {
            get {
                return TvdKickoffField;
            } 
            set {
                TvdKickoffField = value;
                NotifyPropertyChanged("TvdKickoff");
            }
        }

        private MeasuredDepthCoord TvdKickoffField; 

        /// <summary>
        /// StrengthForm property
        /// </summary>
		[Description("The measured formation strength. This should be the final measurement before the end of the report period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("StrengthForm")]
        public MassPerVolumeMeasure StrengthForm {
            get {
                return StrengthFormField;
            } 
            set {
                StrengthFormField = value;
                NotifyPropertyChanged("StrengthForm");
            }
        }

        private MassPerVolumeMeasure StrengthFormField; 

        /// <summary>
        /// MdStrengthForm property
        /// </summary>
		[Description("The measured depth of the formation strength measurement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdStrengthForm")]
        public MeasuredDepthCoord MDStrengthForm {
            get {
                return MdStrengthFormField;
            } 
            set {
                MdStrengthFormField = value;
                NotifyPropertyChanged("MDStrengthForm");
            }
        }

        private MeasuredDepthCoord MdStrengthFormField; 

        /// <summary>
        /// TvdStrengthForm property
        /// </summary>
		[Description("The true vertical depth of the formation strength measurement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdStrengthForm")]
        public WellVerticalDepthCoord TvdStrengthForm {
            get {
                return TvdStrengthFormField;
            } 
            set {
                TvdStrengthFormField = value;
                NotifyPropertyChanged("TvdStrengthForm");
            }
        }

        private WellVerticalDepthCoord TvdStrengthFormField; 

        /// <summary>
        /// DiaCsgLast property
        /// </summary>
		[Description("Diameter of the last casing joint.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaCsgLast")]
        public LengthMeasure DiaCsgLast {
            get {
                return DiaCsgLastField;
            } 
            set {
                DiaCsgLastField = value;
                NotifyPropertyChanged("DiaCsgLast");
            }
        }

        private LengthMeasure DiaCsgLastField; 

        /// <summary>
        /// MdCsgLast property
        /// </summary>
		[Description("Measured depth of the last casing joint.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdCsgLast")]
        public MeasuredDepthCoord MDCsgLast {
            get {
                return MdCsgLastField;
            } 
            set {
                MdCsgLastField = value;
                NotifyPropertyChanged("MDCsgLast");
            }
        }

        private MeasuredDepthCoord MdCsgLastField; 

        /// <summary>
        /// TvdCsgLast property
        /// </summary>
		[Description("True vertical depth of last casing joint.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdCsgLast")]
        public WellVerticalDepthCoord TvdCsgLast {
            get {
                return TvdCsgLastField;
            } 
            set {
                TvdCsgLastField = value;
                NotifyPropertyChanged("TvdCsgLast");
            }
        }

        private WellVerticalDepthCoord TvdCsgLastField; 

        /// <summary>
        /// PresTestType property
        /// </summary>
		[Description("The type of pressure test that was run.")]
        [EnergisticsDataTypeAttribute(DataType = "PresTestType")]
		[XmlElement("PresTestType")]
        public PresTestType? PresTestType {
            get {
                return PresTestTypeField;
            } 
            set {
                PresTestTypeField = value;
                 this.PresTestTypeSpecified = true;
                NotifyPropertyChanged("PresTestType");
            }
        }

        private PresTestType? PresTestTypeField; 

        /// <summary>
        /// PresTestTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PresTestTypeSpecified {
            get {
                return PresTestTypeSpecifiedField;
            } 
            set {
                PresTestTypeSpecifiedField = value;
                NotifyPropertyChanged("PresTestTypeSpecified");
            }
        }

        private bool PresTestTypeSpecifiedField; 

        /// <summary>
        /// MdPlanned property
        /// </summary>
		[Description("The measured depth planned to be reached.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdPlanned")]
        public MeasuredDepthCoord MDPlanned {
            get {
                return MdPlannedField;
            } 
            set {
                MdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord MdPlannedField; 

        /// <summary>
        /// DistDrill property
        /// </summary>
		[Description("Distance drilled.  This should be measured along the centerline of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistDrill")]
        public LengthMeasure DistDrill {
            get {
                return DistDrillField;
            } 
            set {
                DistDrillField = value;
                NotifyPropertyChanged("DistDrill");
            }
        }

        private LengthMeasure DistDrillField; 

        /// <summary>
        /// Sum24Hr property
        /// </summary>
		[StringLength(2000)]
        [Description("A summary of the activities performed and the status of the ongoing activities.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Sum24Hr")]
        public string Sum24Hr {
            get {
                return Sum24HrField;
            } 
            set {
                Sum24HrField = value;
                NotifyPropertyChanged("Sum24Hr");
            }
        }

        private string Sum24HrField; 

        /// <summary>
        /// Forecast24Hr property
        /// </summary>
		[StringLength(2000)]
        [Description("A summary of  planned activities for the next reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Forecast24Hr")]
        public string Forecast24Hr {
            get {
                return Forecast24HrField;
            } 
            set {
                Forecast24HrField = value;
                NotifyPropertyChanged("Forecast24Hr");
            }
        }

        private string Forecast24HrField; 

        /// <summary>
        /// RopCurrent property
        /// </summary>
		[Description("Rate of penetration at the end of the reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("RopCurrent")]
        public LengthPerTimeMeasure RopCurrent {
            get {
                return RopCurrentField;
            } 
            set {
                RopCurrentField = value;
                NotifyPropertyChanged("RopCurrent");
            }
        }

        private LengthPerTimeMeasure RopCurrentField; 

        /// <summary>
        /// Rig property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the rig used.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Rig")]
        public string Rig {
            get {
                return RigField;
            } 
            set {
                RigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private string RigField; 

        /// <summary>
        /// ETimStart property
        /// </summary>
		[Description("Time from the start of operations (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimStart")]
        public TimeMeasure ETimeStart {
            get {
                return ETimStartField;
            } 
            set {
                ETimStartField = value;
                NotifyPropertyChanged("ETimeStart");
            }
        }

        private TimeMeasure ETimStartField; 

        /// <summary>
        /// ETimSpud property
        /// </summary>
		[Description("Time since the bit broke ground (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimSpud")]
        public TimeMeasure ETimeSpud {
            get {
                return ETimSpudField;
            } 
            set {
                ETimSpudField = value;
                NotifyPropertyChanged("ETimeSpud");
            }
        }

        private TimeMeasure ETimSpudField; 

        /// <summary>
        /// ETimLoc property
        /// </summary>
		[Description("Time the rig has been on location (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimLoc")]
        public TimeMeasure ETimeLoc {
            get {
                return ETimLocField;
            } 
            set {
                ETimLocField = value;
                NotifyPropertyChanged("ETimeLoc");
            }
        }

        private TimeMeasure ETimLocField; 

        /// <summary>
        /// ETimDrill property
        /// </summary>
		[Description("Drilling time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimDrill")]
        public TimeMeasure ETimeDrill {
            get {
                return ETimDrillField;
            } 
            set {
                ETimDrillField = value;
                NotifyPropertyChanged("ETimeDrill");
            }
        }

        private TimeMeasure ETimDrillField; 

        /// <summary>
        /// RopAv property
        /// </summary>
		[Description("Average rate of penetration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("RopAv")]
        public LengthPerTimeMeasure RopAverage {
            get {
                return RopAvField;
            } 
            set {
                RopAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private LengthPerTimeMeasure RopAvField; 

        /// <summary>
        /// Supervisor property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the operator's rig supervisor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Supervisor")]
        public string Supervisor {
            get {
                return SupervisorField;
            } 
            set {
                SupervisorField = value;
                NotifyPropertyChanged("Supervisor");
            }
        }

        private string SupervisorField; 

        /// <summary>
        /// Engineer property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the operator's drilling engineer.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Engineer")]
        public string Engineer {
            get {
                return EngineerField;
            } 
            set {
                EngineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private string EngineerField; 

        /// <summary>
        /// Geologist property
        /// </summary>
		[StringLength(64)]
        [Description("Name of operator's wellsite geologist.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Geologist")]
        public string Geologist {
            get {
                return GeologistField;
            } 
            set {
                GeologistField = value;
                NotifyPropertyChanged("Geologist");
            }
        }

        private string GeologistField; 

        /// <summary>
        /// ETimDrillRot property
        /// </summary>
		[Description("Time spent rotary drilling.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimDrillRot")]
        public TimeMeasure ETimeDrillRot {
            get {
                return ETimDrillRotField;
            } 
            set {
                ETimDrillRotField = value;
                NotifyPropertyChanged("ETimeDrillRot");
            }
        }

        private TimeMeasure ETimDrillRotField; 

        /// <summary>
        /// ETimDrillSlid property
        /// </summary>
		[Description("Time spent slide drilling from the start of the bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimDrillSlid")]
        public TimeMeasure ETimeDrillSlid {
            get {
                return ETimDrillSlidField;
            } 
            set {
                ETimDrillSlidField = value;
                NotifyPropertyChanged("ETimeDrillSlid");
            }
        }

        private TimeMeasure ETimDrillSlidField; 

        /// <summary>
        /// ETimCirc property
        /// </summary>
		[Description("Time spent circulating from the start of the bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimCirc")]
        public TimeMeasure ETimeCirc {
            get {
                return ETimCircField;
            } 
            set {
                ETimCircField = value;
                NotifyPropertyChanged("ETimeCirc");
            }
        }

        private TimeMeasure ETimCircField; 

        /// <summary>
        /// ETimReam property
        /// </summary>
		[Description("Time spent reaming from the start of the bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimReam")]
        public TimeMeasure ETimeReam {
            get {
                return ETimReamField;
            } 
            set {
                ETimReamField = value;
                NotifyPropertyChanged("ETimeReam");
            }
        }

        private TimeMeasure ETimReamField; 

        /// <summary>
        /// ETimHold property
        /// </summary>
		[Description("Time spent with no directional drilling work (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimHold")]
        public TimeMeasure ETimeHold {
            get {
                return ETimHoldField;
            } 
            set {
                ETimHoldField = value;
                NotifyPropertyChanged("ETimeHold");
            }
        }

        private TimeMeasure ETimHoldField; 

        /// <summary>
        /// ETimSteering property
        /// </summary>
		[Description("Time spent steering the bottomhole assembly (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimSteering")]
        public TimeMeasure ETimeSteering {
            get {
                return ETimSteeringField;
            } 
            set {
                ETimSteeringField = value;
                NotifyPropertyChanged("ETimeSteering");
            }
        }

        private TimeMeasure ETimSteeringField; 

        /// <summary>
        /// DistDrillRot property
        /// </summary>
		[Description("Distance drilled: rotating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistDrillRot")]
        public LengthMeasure DistDrillRot {
            get {
                return DistDrillRotField;
            } 
            set {
                DistDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure DistDrillRotField; 

        /// <summary>
        /// DistDrillSlid property
        /// </summary>
		[Description("Distance drilled: sliding.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistDrillSlid")]
        public LengthMeasure DistDrillSlid {
            get {
                return DistDrillSlidField;
            } 
            set {
                DistDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure DistDrillSlidField; 

        /// <summary>
        /// DistReam property
        /// </summary>
		[Description("Distance reamed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistReam")]
        public LengthMeasure DistReam {
            get {
                return DistReamField;
            } 
            set {
                DistReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure DistReamField; 

        /// <summary>
        /// DistHold property
        /// </summary>
		[Description("Distance covered while holding angle with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistHold")]
        public LengthMeasure DistHold {
            get {
                return DistHoldField;
            } 
            set {
                DistHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure DistHoldField; 

        /// <summary>
        /// DistSteering property
        /// </summary>
		[Description("Distance covered while actively steering with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistSteering")]
        public LengthMeasure DistSteering {
            get {
                return DistSteeringField;
            } 
            set {
                DistSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure DistSteeringField; 

        /// <summary>
        /// NumPob property
        /// </summary>
		[Description("Total number of personnel on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumPob")]
        public int? NumPob {
            get {
                return NumPobField;
            } 
            set {
                NumPobField = value;
                 this.NumPobSpecified = true;
                NotifyPropertyChanged("NumPob");
            }
        }

        private int? NumPobField; 

        /// <summary>
        /// NumPobSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumPobSpecified {
            get {
                return NumPobSpecifiedField;
            } 
            set {
                NumPobSpecifiedField = value;
                NotifyPropertyChanged("NumPobSpecified");
            }
        }

        private bool NumPobSpecifiedField; 

        /// <summary>
        /// NumContract property
        /// </summary>
		[Description("Number of contractor personnel on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumContract")]
        public int? NumContract {
            get {
                return NumContractField;
            } 
            set {
                NumContractField = value;
                 this.NumContractSpecified = true;
                NotifyPropertyChanged("NumContract");
            }
        }

        private int? NumContractField; 

        /// <summary>
        /// NumContractSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumContractSpecified {
            get {
                return NumContractSpecifiedField;
            } 
            set {
                NumContractSpecifiedField = value;
                NotifyPropertyChanged("NumContractSpecified");
            }
        }

        private bool NumContractSpecifiedField; 

        /// <summary>
        /// NumOperator property
        /// </summary>
		[Description("Number of operator personnel on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumOperator")]
        public int? NumOperator {
            get {
                return NumOperatorField;
            } 
            set {
                NumOperatorField = value;
                 this.NumOperatorSpecified = true;
                NotifyPropertyChanged("NumOperator");
            }
        }

        private int? NumOperatorField; 

        /// <summary>
        /// NumOperatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumOperatorSpecified {
            get {
                return NumOperatorSpecifiedField;
            } 
            set {
                NumOperatorSpecifiedField = value;
                NotifyPropertyChanged("NumOperatorSpecified");
            }
        }

        private bool NumOperatorSpecifiedField; 

        /// <summary>
        /// NumService property
        /// </summary>
		[Description("Number of service company personnel on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumService")]
        public int? NumService {
            get {
                return NumServiceField;
            } 
            set {
                NumServiceField = value;
                 this.NumServiceSpecified = true;
                NotifyPropertyChanged("NumService");
            }
        }

        private int? NumServiceField; 

        /// <summary>
        /// NumServiceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumServiceSpecified {
            get {
                return NumServiceSpecifiedField;
            } 
            set {
                NumServiceSpecifiedField = value;
                NotifyPropertyChanged("NumServiceSpecified");
            }
        }

        private bool NumServiceSpecifiedField; 

        /// <summary>
        /// NumAFE property
        /// </summary>
		[StringLength(64)]
        [Description("Authorization for expenditure (AFE) number that this cost item applies to.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumAFE")]
        public string NumAFE {
            get {
                return NumAFEField;
            } 
            set {
                NumAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private string NumAFEField; 

        /// <summary>
        /// ConditionHole property
        /// </summary>
		[StringLength(64)]
        [Description("Description of the hole condition.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ConditionHole")]
        public string ConditionHole {
            get {
                return ConditionHoleField;
            } 
            set {
                ConditionHoleField = value;
                NotifyPropertyChanged("ConditionHole");
            }
        }

        private string ConditionHoleField; 

        /// <summary>
        /// TvdLot property
        /// </summary>
		[Description("True vertical depth of a leak off test point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdLot")]
        public WellVerticalDepthCoord TvdLot {
            get {
                return TvdLotField;
            } 
            set {
                TvdLotField = value;
                NotifyPropertyChanged("TvdLot");
            }
        }

        private WellVerticalDepthCoord TvdLotField; 

        /// <summary>
        /// PresLotEmw property
        /// </summary>
		[Description("Leak off test equivalent mud weight.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("PresLotEmw")]
        public MassPerVolumeMeasure PresLotEmw {
            get {
                return PresLotEmwField;
            } 
            set {
                PresLotEmwField = value;
                NotifyPropertyChanged("PresLotEmw");
            }
        }

        private MassPerVolumeMeasure PresLotEmwField; 

        /// <summary>
        /// PresKickTol property
        /// </summary>
		[Description("Kick tolerance pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresKickTol")]
        public PressureMeasure PresKickTol {
            get {
                return PresKickTolField;
            } 
            set {
                PresKickTolField = value;
                NotifyPropertyChanged("PresKickTol");
            }
        }

        private PressureMeasure PresKickTolField; 

        /// <summary>
        /// VolKickTol property
        /// </summary>
		[Description("Kick tolerance volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolKickTol")]
        public VolumeMeasure VolKickTol {
            get {
                return VolKickTolField;
            } 
            set {
                VolKickTolField = value;
                NotifyPropertyChanged("VolKickTol");
            }
        }

        private VolumeMeasure VolKickTolField; 

        /// <summary>
        /// Maasp property
        /// </summary>
		[Description("Maximum allowable shut-in casing pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Maasp")]
        public PressureMeasure Maasp {
            get {
                return MaaspField;
            } 
            set {
                MaaspField = value;
                NotifyPropertyChanged("Maasp");
            }
        }

        private PressureMeasure MaaspField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the tubular (assembly) used in this report period.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Tubular")]
        public string Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private string TubularField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ParentWellbore property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("ParentWellbore")]
        public List<ObjectAlias> ParentWellbore {
            get {
                return ParentWellboreField;
            } 
            set {
                ParentWellboreField = value;
                NotifyPropertyChanged("ParentWellbore");
            }
        }

         /// <summary>
         /// bool to indicate if ParentWellbore has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParentWellboreSpecified
         {
             get {
             if(ParentWellboreField!=null)
                 return ParentWellboreField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> ParentWellboreField; 

        /// <summary>
        /// ElevKelly property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellElevationCoord")]
		[XmlElement("ElevKelly")]
        public WellElevationCoord ElevKelly {
            get {
                return ElevKellyField;
            } 
            set {
                ElevKellyField = value;
                NotifyPropertyChanged("ElevKelly");
            }
        }

        private WellElevationCoord ElevKellyField; 

        /// <summary>
        /// CostDay property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Cost")]
		[XmlElement("CostDay")]
        public Cost CostDay {
            get {
                return CostDayField;
            } 
            set {
                CostDayField = value;
                NotifyPropertyChanged("CostDay");
            }
        }

        private Cost CostDayField; 

        /// <summary>
        /// CostDayMud property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Cost")]
		[XmlElement("CostDayMud")]
        public Cost CostDayMud {
            get {
                return CostDayMudField;
            } 
            set {
                CostDayMudField = value;
                NotifyPropertyChanged("CostDayMud");
            }
        }

        private Cost CostDayMudField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportStatusInfo.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportStatusInfo.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellElevationCoord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellElevationCoord", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the WellElevationCoord xsd type.")]
    public partial class WellElevationCoord : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        public WellElevationCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellElevationCoord(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure by which the datum is expressed.
        /// </summary>
		[Required]
        [Description("The unit of measure by which the datum is expressed.")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

		/// <summary>
        /// Defines the vertical datums associated with elevation, vertical depth, and measured depth coordinates.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Defines the vertical datums associated with elevation, vertical depth, and measured depth coordinates.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("datum")]
		
        public string Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string datumField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportWellboreInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportWellboreInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportWellboreInfo xsd type.")]
    public partial class DrillReportWellboreInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimSpud property
        /// </summary>
		[Description("Date and time at which the well was spudded. This is when the well drilling equipment began to bore into the earth's surface for the purpose of drilling a well.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimSpud")]
        public Timestamp? DateTimeSpud {
            get {
                return DTimSpudField;
            } 
            set {
                DTimSpudField = value;
                 this.DateTimeSpudSpecified = true;
                NotifyPropertyChanged("DateTimeSpud");
            }
        }

        
        private bool DateTimeSpudSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpudSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpudSpecified {
            get {
                return DateTimeSpudSpecifiedField;
            } 
            set {
                DateTimeSpudSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpudSpecified");
            }
        }
        
        private Timestamp? DTimSpudField; 

        /// <summary>
        /// DTimPreSpud property
        /// </summary>
		[Description("Date and time at which the well was predrilled.  This is when the well drilling equipment begin to bore into  the earth's surface for the purpose of drilling a well.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimPreSpud")]
        public Timestamp? DateTimePreSpud {
            get {
                return DTimPreSpudField;
            } 
            set {
                DTimPreSpudField = value;
                 this.DateTimePreSpudSpecified = true;
                NotifyPropertyChanged("DateTimePreSpud");
            }
        }

        
        private bool DateTimePreSpudSpecifiedField = false;
        
        /// <summary>
        /// DateTimePreSpudSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePreSpudSpecified {
            get {
                return DateTimePreSpudSpecifiedField;
            } 
            set {
                DateTimePreSpudSpecifiedField = value;
                NotifyPropertyChanged("DateTimePreSpudSpecified");
            }
        }
        
        private Timestamp? DTimPreSpudField; 

        /// <summary>
        /// DateDrillComplete property
        /// </summary>
		[Description("The date when the drilling activity was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("DateDrillComplete", DataType="date")]
        public DateTime? DateDrillComplete {
            get {
                return DateDrillCompleteField;
            } 
            set {
                DateDrillCompleteField = value;
                 this.DateDrillCompleteSpecified = true;
                NotifyPropertyChanged("DateDrillComplete");
            }
        }

        private DateTime? DateDrillCompleteField; 

        /// <summary>
        /// DateDrillCompleteSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateDrillCompleteSpecified {
            get {
                return DateDrillCompleteSpecifiedField;
            } 
            set {
                DateDrillCompleteSpecifiedField = value;
                NotifyPropertyChanged("DateDrillCompleteSpecified");
            }
        }

        private bool DateDrillCompleteSpecifiedField; 

        /// <summary>
        /// Operator property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the drilling Operator company responsible for the well being drilled (the company for whom the well is being drilled).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Operator")]
        public string Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private string OperatorField; 

        /// <summary>
        /// DrillContractor property
        /// </summary>
		[StringLength(64)]
        [Description("The name of the drilling contractor company.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DrillContractor")]
        public string DrillContractor {
            get {
                return DrillContractorField;
            } 
            set {
                DrillContractorField = value;
                NotifyPropertyChanged("DrillContractor");
            }
        }

        private string DrillContractorField; 

        /// <summary>
        /// RigAlias property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("RigAlias")]
        public List<ObjectAlias> RigAlias {
            get {
                return RigAliasField;
            } 
            set {
                RigAliasField = value;
                NotifyPropertyChanged("RigAlias");
            }
        }

         /// <summary>
         /// bool to indicate if RigAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RigAliasSpecified
         {
             get {
             if(RigAliasField!=null)
                 return RigAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> RigAliasField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportGasReadingInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportGasReadingInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportGasReadingInfo xsd type.")]
    public partial class DrillReportGasReadingInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time of the gas reading.
        /// </summary>
		[Description("Date and time of the gas reading.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Type of gas reading.
        /// </summary>
		[Description("Type of gas reading.")]
        [EnergisticsDataTypeAttribute(DataType = "GasPeakType")]
		[XmlElement("ReadingType")]
        public GasPeakType? ReadingType {
            get {
                return ReadingTypeField;
            } 
            set {
                ReadingTypeField = value;
                 this.ReadingTypeSpecified = true;
                NotifyPropertyChanged("ReadingType");
            }
        }

        private GasPeakType? ReadingTypeField; 

        /// <summary>
        /// ReadingTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReadingTypeSpecified {
            get {
                return ReadingTypeSpecifiedField;
            } 
            set {
                ReadingTypeSpecifiedField = value;
                NotifyPropertyChanged("ReadingTypeSpecified");
            }
        }

        private bool ReadingTypeSpecifiedField; 

        /// <summary>
        /// Measured depth interval over which the gas reading was conducted.
        /// </summary>
		[Description("Measured depth interval over which the gas reading was conducted.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("GasReadingMdInterval")]
        public MdInterval GasReadingMDInterval {
            get {
                return GasReadingMdIntervalField;
            } 
            set {
                GasReadingMdIntervalField = value;
                NotifyPropertyChanged("GasReadingMDInterval");
            }
        }

        private MdInterval GasReadingMdIntervalField; 

        /// <summary>
        /// True vertical depth interval over which the gas reading was conducted.
        /// </summary>
		[Description("True vertical depth interval over which the gas reading was conducted.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("GasReadingTvdInterval")]
        public TvdInterval GasReadingTvdInterval {
            get {
                return GasReadingTvdIntervalField;
            } 
            set {
                GasReadingTvdIntervalField = value;
                NotifyPropertyChanged("GasReadingTvdInterval");
            }
        }

        private TvdInterval GasReadingTvdIntervalField; 

        /// <summary>
        /// The highest gas reading.
        /// </summary>
		[Description("The highest gas reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("GasHigh")]
        public VolumePerVolumeMeasure GasHigh {
            get {
                return GasHighField;
            } 
            set {
                GasHighField = value;
                NotifyPropertyChanged("GasHigh");
            }
        }

        private VolumePerVolumeMeasure GasHighField; 

        /// <summary>
        /// The lowest gas reading.
        /// </summary>
		[Description("The lowest gas reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("GasLow")]
        public VolumePerVolumeMeasure GasLow {
            get {
                return GasLowField;
            } 
            set {
                GasLowField = value;
                NotifyPropertyChanged("GasLow");
            }
        }

        private VolumePerVolumeMeasure GasLowField; 

        /// <summary>
        /// Methane (C1) concentration.
        /// </summary>
		[Description("Methane (C1) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Meth")]
        public VolumePerVolumeMeasure Meth {
            get {
                return MethField;
            } 
            set {
                MethField = value;
                NotifyPropertyChanged("Meth");
            }
        }

        private VolumePerVolumeMeasure MethField; 

        /// <summary>
        /// Ethane (C2) concentration.
        /// </summary>
		[Description("Ethane (C2) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Eth")]
        public VolumePerVolumeMeasure Eth {
            get {
                return EthField;
            } 
            set {
                EthField = value;
                NotifyPropertyChanged("Eth");
            }
        }

        private VolumePerVolumeMeasure EthField; 

        /// <summary>
        /// Propane (C3) concentration.
        /// </summary>
		[Description("Propane (C3) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Prop")]
        public VolumePerVolumeMeasure Prop {
            get {
                return PropField;
            } 
            set {
                PropField = value;
                NotifyPropertyChanged("Prop");
            }
        }

        private VolumePerVolumeMeasure PropField; 

        /// <summary>
        /// Iso-butane (iC4) concentration.
        /// </summary>
		[Description("Iso-butane (iC4) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Ibut")]
        public VolumePerVolumeMeasure Ibut {
            get {
                return IbutField;
            } 
            set {
                IbutField = value;
                NotifyPropertyChanged("Ibut");
            }
        }

        private VolumePerVolumeMeasure IbutField; 

        /// <summary>
        /// Nor-butane (nC4) concentration.
        /// </summary>
		[Description("Nor-butane (nC4) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Nbut")]
        public VolumePerVolumeMeasure Nbut {
            get {
                return NbutField;
            } 
            set {
                NbutField = value;
                NotifyPropertyChanged("Nbut");
            }
        }

        private VolumePerVolumeMeasure NbutField; 

        /// <summary>
        /// Iso-pentane (iC5) concentration.
        /// </summary>
		[Description("Iso-pentane (iC5) concentration.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Ipent")]
        public VolumePerVolumeMeasure Ipent {
            get {
                return IpentField;
            } 
            set {
                IpentField = value;
                NotifyPropertyChanged("Ipent");
            }
        }

        private VolumePerVolumeMeasure IpentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportGasReadingInfo. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportGasReadingInfo.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportPerfInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportPerfInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportPerfInfo xsd type.")]
    public partial class DrillReportPerfInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date and time at which the well perforation interval is opened.
        /// </summary>
		[Description("The date and time at which the well perforation interval is opened.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimOpen")]
        public Timestamp? DateTimeOpen {
            get {
                return DTimOpenField;
            } 
            set {
                DTimOpenField = value;
                 this.DateTimeOpenSpecified = true;
                NotifyPropertyChanged("DateTimeOpen");
            }
        }

        
        private bool DateTimeOpenSpecifiedField = false;
        
        /// <summary>
        /// DateTimeOpenSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeOpenSpecified {
            get {
                return DateTimeOpenSpecifiedField;
            } 
            set {
                DateTimeOpenSpecifiedField = value;
                NotifyPropertyChanged("DateTimeOpenSpecified");
            }
        }
        
        private Timestamp? DTimOpenField; 

        /// <summary>
        /// The date and time at which the well perforation interval is closed.
        /// </summary>
		[Description("The date and time at which the well perforation interval is closed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimClose")]
        public Timestamp? DateTimeClose {
            get {
                return DTimCloseField;
            } 
            set {
                DTimCloseField = value;
                 this.DateTimeCloseSpecified = true;
                NotifyPropertyChanged("DateTimeClose");
            }
        }

        
        private bool DateTimeCloseSpecifiedField = false;
        
        /// <summary>
        /// DateTimeCloseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCloseSpecified {
            get {
                return DateTimeCloseSpecifiedField;
            } 
            set {
                DateTimeCloseSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCloseSpecified");
            }
        }
        
        private Timestamp? DTimCloseField; 

        /// <summary>
        /// Measured depth interval between the top and the base of the perforations.
        /// </summary>
		[Description("Measured depth interval between the top and the base of the perforations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("PerforationMdInterval")]
        public MdInterval PerforationMDInterval {
            get {
                return PerforationMdIntervalField;
            } 
            set {
                PerforationMdIntervalField = value;
                NotifyPropertyChanged("PerforationMDInterval");
            }
        }

        private MdInterval PerforationMdIntervalField; 

        /// <summary>
        /// True vertical depth interval between the top and the base of the perforations.
        /// </summary>
		[Description("True vertical depth interval between the top and the base of the perforations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("PerforationTvdInterval")]
        public TvdInterval PerforationTvdInterval {
            get {
                return PerforationTvdIntervalField;
            } 
            set {
                PerforationTvdIntervalField = value;
                NotifyPropertyChanged("PerforationTvdInterval");
            }
        }

        private TvdInterval PerforationTvdIntervalField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportPerfInfo.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportPerfInfo.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportStratInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportStratInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportStratInfo xsd type.")]
    public partial class DrillReportStratInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time at which a preliminary zonation was established.
        /// </summary>
		[Description("Date and time at which a preliminary zonation was established.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Measured depth at the top of the formation. 
        /// </summary>
		[Description("Measured depth at the top of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return MdTopField;
            } 
            set {
                MdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord MdTopField; 

        /// <summary>
        /// True vertical depth at the top of the formation. 
        /// </summary>
		[Description("True vertical depth at the top of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdTop")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return TvdTopField;
            } 
            set {
                TvdTopField = value;
                NotifyPropertyChanged("TvdTop");
            }
        }

        private WellVerticalDepthCoord TvdTopField; 

        /// <summary>
        /// A lithological description of the geological formation at the given depth.
        /// </summary>
		[StringLength(2000)]
        [Description("A lithological description of the geological formation at the given depth.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportStratInfo.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportStratInfo.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportControlIncidentInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportControlIncidentInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportControlIncidentInfo xsd type.")]
    public partial class DrillReportControlIncidentInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Description("Date and time of the well control incident.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// MdInflow property
        /// </summary>
		[Description("The measured depth to the well inflow entry point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdInflow")]
        public MeasuredDepthCoord MDInflow {
            get {
                return MdInflowField;
            } 
            set {
                MdInflowField = value;
                NotifyPropertyChanged("MDInflow");
            }
        }

        private MeasuredDepthCoord MdInflowField; 

        /// <summary>
        /// TvdInflow property
        /// </summary>
		[Description("The true vertical depth to the well inflow entry point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdInflow")]
        public WellVerticalDepthCoord TvdInflow {
            get {
                return TvdInflowField;
            } 
            set {
                TvdInflowField = value;
                NotifyPropertyChanged("TvdInflow");
            }
        }

        private WellVerticalDepthCoord TvdInflowField; 

        /// <summary>
        /// Phase property
        /// </summary>
		[StringLength(64)]
        [Description("Phase is large activity classification, e.g. drill surface hole.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Phase")]
        public string Phase {
            get {
                return PhaseField;
            } 
            set {
                PhaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private string PhaseField; 

        /// <summary>
        /// ActivityCode property
        /// </summary>
		[Description("A code used to define rig activity.")]
        [EnergisticsDataTypeAttribute(DataType = "DrillActivityCode")]
		[XmlElement("ActivityCode")]
        public DrillActivityCode? ActivityCode {
            get {
                return ActivityCodeField;
            } 
            set {
                ActivityCodeField = value;
                 this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private DrillActivityCode? ActivityCodeField; 

        /// <summary>
        /// ActivityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ActivityCodeSpecified {
            get {
                return ActivityCodeSpecifiedField;
            } 
            set {
                ActivityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private bool ActivityCodeSpecifiedField; 

        /// <summary>
        /// DetailActivity property
        /// </summary>
		[StringLength(64)]
        [Description("Custom string to further define an activity.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DetailActivity")]
        public string DetailActivity {
            get {
                return DetailActivityField;
            } 
            set {
                DetailActivityField = value;
                NotifyPropertyChanged("DetailActivity");
            }
        }

        private string DetailActivityField; 

        /// <summary>
        /// ETimLost property
        /// </summary>
		[Description("The amount of time lost because of the well control incident. Commonly specified in hours.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimLost")]
        public TimeMeasure ETimeLost {
            get {
                return ETimLostField;
            } 
            set {
                ETimLostField = value;
                NotifyPropertyChanged("ETimeLost");
            }
        }

        private TimeMeasure ETimLostField; 

        /// <summary>
        /// DTimRegained property
        /// </summary>
		[Description("The date and time at which control of the well was regained.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRegained")]
        public Timestamp? DateTimeRegained {
            get {
                return DTimRegainedField;
            } 
            set {
                DTimRegainedField = value;
                 this.DateTimeRegainedSpecified = true;
                NotifyPropertyChanged("DateTimeRegained");
            }
        }

        
        private bool DateTimeRegainedSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRegainedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRegainedSpecified {
            get {
                return DateTimeRegainedSpecifiedField;
            } 
            set {
                DateTimeRegainedSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRegainedSpecified");
            }
        }
        
        private Timestamp? DTimRegainedField; 

        /// <summary>
        /// DiaBit property
        /// </summary>
		[Description("The drill bit nominal outside diameter at the time of the well control incident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaBit")]
        public LengthMeasure DiaBit {
            get {
                return DiaBitField;
            } 
            set {
                DiaBitField = value;
                NotifyPropertyChanged("DiaBit");
            }
        }

        private LengthMeasure DiaBitField; 

        /// <summary>
        /// MdBit property
        /// </summary>
		[Description("The measured depth of the bit at the time of the the well control incident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return MdBitField;
            } 
            set {
                MdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord MdBitField; 

        /// <summary>
        /// WtMud property
        /// </summary>
		[Description("The density of the drilling fluid at the time of the well control incident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("WtMud")]
        public MassPerVolumeMeasure WeightMud {
            get {
                return WtMudField;
            } 
            set {
                WtMudField = value;
                NotifyPropertyChanged("WeightMud");
            }
        }

        private MassPerVolumeMeasure WtMudField; 

        /// <summary>
        /// PorePressure property
        /// </summary>
		[Required]
        [Description("The equivalent mud weight value of the pore pressure reading.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("PorePressure")]
        public MassPerVolumeMeasure PorePressure {
            get {
                return PorePressureField;
            } 
            set {
                PorePressureField = value;
                NotifyPropertyChanged("PorePressure");
            }
        }

        private MassPerVolumeMeasure PorePressureField; 

        /// <summary>
        /// DiaCsgLast property
        /// </summary>
		[Description("Diameter of the last installed casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaCsgLast")]
        public LengthMeasure DiaCsgLast {
            get {
                return DiaCsgLastField;
            } 
            set {
                DiaCsgLastField = value;
                NotifyPropertyChanged("DiaCsgLast");
            }
        }

        private LengthMeasure DiaCsgLastField; 

        /// <summary>
        /// MdCsgLast property
        /// </summary>
		[Description("Measured depth of the last casing joint.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdCsgLast")]
        public MeasuredDepthCoord MDCsgLast {
            get {
                return MdCsgLastField;
            } 
            set {
                MdCsgLastField = value;
                NotifyPropertyChanged("MDCsgLast");
            }
        }

        private MeasuredDepthCoord MdCsgLastField; 

        /// <summary>
        /// VolMudGained property
        /// </summary>
		[Description("The gained volume of drilling fluid due to the well kick.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolMudGained")]
        public VolumeMeasure VolMudGained {
            get {
                return VolMudGainedField;
            } 
            set {
                VolMudGainedField = value;
                NotifyPropertyChanged("VolMudGained");
            }
        }

        private VolumeMeasure VolMudGainedField; 

        /// <summary>
        /// PresShutInCasing property
        /// </summary>
		[Description("The shut in casing pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresShutInCasing")]
        public PressureMeasure PresShutInCasing {
            get {
                return PresShutInCasingField;
            } 
            set {
                PresShutInCasingField = value;
                NotifyPropertyChanged("PresShutInCasing");
            }
        }

        private PressureMeasure PresShutInCasingField; 

        /// <summary>
        /// PresShutInDrill property
        /// </summary>
		[Description("The actual pressure in the drill pipe when the rams were closed around it.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresShutInDrill")]
        public PressureMeasure PresShutInDrill {
            get {
                return PresShutInDrillField;
            } 
            set {
                PresShutInDrillField = value;
                NotifyPropertyChanged("PresShutInDrill");
            }
        }

        private PressureMeasure PresShutInDrillField; 

        /// <summary>
        /// IncidentType property
        /// </summary>
		[Description("The type of well control incident.")]
        [EnergisticsDataTypeAttribute(DataType = "WellControlIncidentType")]
		[XmlElement("IncidentType")]
        public WellControlIncidentType? IncidentType {
            get {
                return IncidentTypeField;
            } 
            set {
                IncidentTypeField = value;
                 this.IncidentTypeSpecified = true;
                NotifyPropertyChanged("IncidentType");
            }
        }

        private WellControlIncidentType? IncidentTypeField; 

        /// <summary>
        /// IncidentTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IncidentTypeSpecified {
            get {
                return IncidentTypeSpecifiedField;
            } 
            set {
                IncidentTypeSpecifiedField = value;
                NotifyPropertyChanged("IncidentTypeSpecified");
            }
        }

        private bool IncidentTypeSpecifiedField; 

        /// <summary>
        /// KillingType property
        /// </summary>
		[Description("The type of procedure used to kill the well.")]
        [EnergisticsDataTypeAttribute(DataType = "WellKillingProcedureType")]
		[XmlElement("KillingType")]
        public WellKillingProcedureType? KillingType {
            get {
                return KillingTypeField;
            } 
            set {
                KillingTypeField = value;
                 this.KillingTypeSpecified = true;
                NotifyPropertyChanged("KillingType");
            }
        }

        private WellKillingProcedureType? KillingTypeField; 

        /// <summary>
        /// KillingTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KillingTypeSpecified {
            get {
                return KillingTypeSpecifiedField;
            } 
            set {
                KillingTypeSpecifiedField = value;
                NotifyPropertyChanged("KillingTypeSpecified");
            }
        }

        private bool KillingTypeSpecifiedField; 

        /// <summary>
        /// Formation property
        /// </summary>
		[StringLength(2000)]
        [Description("The lithological description of the geological formation at the incident depth.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Formation")]
        public string Formation {
            get {
                return FormationField;
            } 
            set {
                FormationField = value;
                NotifyPropertyChanged("Formation");
            }
        }

        private string FormationField; 

        /// <summary>
        /// TempBottom property
        /// </summary>
		[Description("The temperature at the bottom of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempBottom")]
        public ThermodynamicTemperatureMeasure TempBottom {
            get {
                return TempBottomField;
            } 
            set {
                TempBottomField = value;
                NotifyPropertyChanged("TempBottom");
            }
        }

        private ThermodynamicTemperatureMeasure TempBottomField; 

        /// <summary>
        /// PresMaxChoke property
        /// </summary>
		[Description("The maximum pressure that the choke valve can be exposed to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresMaxChoke")]
        public PressureMeasure PresMaxChoke {
            get {
                return PresMaxChokeField;
            } 
            set {
                PresMaxChokeField = value;
                NotifyPropertyChanged("PresMaxChoke");
            }
        }

        private PressureMeasure PresMaxChokeField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A description of the well control incident.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ProprietaryCode property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("ProprietaryCode")]
        public List<ObjectAlias> ProprietaryCode {
            get {
                return ProprietaryCodeField;
            } 
            set {
                ProprietaryCodeField = value;
                NotifyPropertyChanged("ProprietaryCode");
            }
        }

         /// <summary>
         /// bool to indicate if ProprietaryCode has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProprietaryCodeSpecified
         {
             get {
             if(ProprietaryCodeField!=null)
                 return ProprietaryCodeField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> ProprietaryCodeField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportControlIncidentInfo.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportControlIncidentInfo.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportEquipFailureInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportEquipFailureInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportEquipFailureInfo xsd type.")]
    public partial class DrillReportEquipFailureInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that the equipment failed.
        /// </summary>
		[Description("Date and time that the equipment failed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// The measured depth of the operation end point where the failure happened.
        /// </summary>
		[Description("The measured depth of the operation end point where the failure happened.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// The true vertical depth of the operation end point where failure the failure happened.
        /// </summary>
		[Description("The true vertical depth of the  operation end point where failure the failure happened.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// The classification of the equipment that failed.
        /// </summary>
		[StringLength(64)]
        [Description("The classification of the equipment that failed.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("EquipClass")]
        public string EquipClass {
            get {
                return EquipClassField;
            } 
            set {
                EquipClassField = value;
                NotifyPropertyChanged("EquipClass");
            }
        }

        private string EquipClassField; 

        /// <summary>
        /// The missed production time because of the equipment failure.
        /// </summary>
		[Description("The missed production time because of the equipment failure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimMissProduction")]
        public TimeMeasure ETimeMissProduction {
            get {
                return ETimMissProductionField;
            } 
            set {
                ETimMissProductionField = value;
                NotifyPropertyChanged("ETimeMissProduction");
            }
        }

        private TimeMeasure ETimMissProductionField; 

        /// <summary>
        /// The date and time at which the production equipment was repaired and ready for production.
        /// </summary>
		[Description("The date and time at which the production equipment was  repaired and ready for production.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimRepair")]
        public Timestamp? DateTimeRepair {
            get {
                return DTimRepairField;
            } 
            set {
                DTimRepairField = value;
                 this.DateTimeRepairSpecified = true;
                NotifyPropertyChanged("DateTimeRepair");
            }
        }

        
        private bool DateTimeRepairSpecifiedField = false;
        
        /// <summary>
        /// DateTimeRepairSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeRepairSpecified {
            get {
                return DateTimeRepairSpecifiedField;
            } 
            set {
                DateTimeRepairSpecifiedField = value;
                NotifyPropertyChanged("DateTimeRepairSpecified");
            }
        }
        
        private Timestamp? DTimRepairField; 

        /// <summary>
        /// A description of the equipment failure. 
        /// </summary>
		[StringLength(2000)]
        [Description("A description of the equipment failure.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportEquipFailureInfo.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportEquipFailureInfo.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportLithShowInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportLithShowInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportLithShowInfo xsd type.")]
    public partial class DrillReportLithShowInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that the well test was completed.
        /// </summary>
		[Description("Date and time that the well test was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Measured depth interval over which the show appears.
        /// </summary>
		[Description("Measured depth interval over which the show appears.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("ShowMdInterval")]
        public MdInterval ShowMDInterval {
            get {
                return ShowMdIntervalField;
            } 
            set {
                ShowMdIntervalField = value;
                NotifyPropertyChanged("ShowMDInterval");
            }
        }

        private MdInterval ShowMdIntervalField; 

        /// <summary>
        /// True vertical depth interval over which the show appears.
        /// </summary>
		[Description("True vertical depth interval over which the show appears.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("ShowTvdInterval")]
        public TvdInterval ShowTvdInterval {
            get {
                return ShowTvdIntervalField;
            } 
            set {
                ShowTvdIntervalField = value;
                NotifyPropertyChanged("ShowTvdInterval");
            }
        }

        private TvdInterval ShowTvdIntervalField; 

        /// <summary>
        /// A textual description of any shows in the interval.
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of any shows in the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Show")]
        public string Show {
            get {
                return ShowField;
            } 
            set {
                ShowField = value;
                NotifyPropertyChanged("Show");
            }
        }

        private string ShowField; 

        /// <summary>
        /// A geological/lithological description/evaluation of the interval.
        /// </summary>
		[StringLength(2000)]
        [Description("A geological/lithological description/evaluation of the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Lithology")]
        public string Lithology {
            get {
                return LithologyField;
            } 
            set {
                LithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

        private string LithologyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportLithShowInfo
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportLithShowInfo")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportFormTestInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportFormTestInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportFormTestInfo xsd type.")]
    public partial class DrillReportFormTestInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that the wireline formation test was completed.
        /// </summary>
		[Description("Date and time that the wireline formation test was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Measured depth at which the wireline formation test was conducted. 
        /// </summary>
		[Description("Measured depth at which the wireline formation test was conducted.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// True vertical depth at which the wireline formation test was conducted.
        /// </summary>
		[Description("True vertical depth at which the wireline formation test was conducted.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// The formation pore pressure. The pressure of fluids within the pores of a reservoir, usually hydrostatic pressure, or the pressure exerted by a column of water from the formation's depth to sea level.
        /// </summary>
		[Description("The formation pore pressure. The pressure of fluids within the pores of a reservoir, usually hydrostatic pressure,  or the pressure exerted by a column of water from the formation's depth to sea level.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresPore")]
        public PressureMeasure PresPore {
            get {
                return PresPoreField;
            } 
            set {
                PresPoreField = value;
                NotifyPropertyChanged("PresPore");
            }
        }

        private PressureMeasure PresPoreField; 

        /// <summary>
        /// Was there a good seal for the wireline formation test? Values are "true" or "1" or "false" or "0".
        /// </summary>
		[Description("Was there a good seal for the wireline formation test? Values are \"true\" or \"1\" or \"false\" or \"0\".")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("GoodSeal")]
        public bool? GoodSeal {
            get {
                return GoodSealField;
            } 
            set {
                GoodSealField = value;
                 this.GoodSealSpecified = true;
                NotifyPropertyChanged("GoodSeal");
            }
        }

        private bool? GoodSealField; 

        /// <summary>
        /// GoodSealSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GoodSealSpecified {
            get {
                return GoodSealSpecifiedField;
            } 
            set {
                GoodSealSpecifiedField = value;
                NotifyPropertyChanged("GoodSealSpecified");
            }
        }

        private bool GoodSealSpecifiedField; 

        /// <summary>
        /// Measured depth where the fluid sample was taken.
        /// </summary>
		[Description("Measured depth where the fluid sample was taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdSample")]
        public MeasuredDepthCoord MDSample {
            get {
                return MdSampleField;
            } 
            set {
                MdSampleField = value;
                NotifyPropertyChanged("MDSample");
            }
        }

        private MeasuredDepthCoord MdSampleField; 

        /// <summary>
        /// The dominate component in the fluid sample.
        /// </summary>
		[StringLength(64)]
        [Description("The dominate component in the fluid sample.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DominateComponent")]
        public string DominateComponent {
            get {
                return DominateComponentField;
            } 
            set {
                DominateComponentField = value;
                NotifyPropertyChanged("DominateComponent");
            }
        }

        private string DominateComponentField; 

        /// <summary>
        /// The density of the hydrocarbon component of the fluid sample.
        /// </summary>
		[Description("The density of the hydrocarbon component of the fluid sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensityHC")]
        public MassPerVolumeMeasure DensityHC {
            get {
                return DensityHCField;
            } 
            set {
                DensityHCField = value;
                NotifyPropertyChanged("DensityHC");
            }
        }

        private MassPerVolumeMeasure DensityHCField; 

        /// <summary>
        /// The volume of the fluid sample.
        /// </summary>
		[Description("The volume of the fluid sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolumeSample")]
        public VolumeMeasure VolumeSample {
            get {
                return VolumeSampleField;
            } 
            set {
                VolumeSampleField = value;
                NotifyPropertyChanged("VolumeSample");
            }
        }

        private VolumeMeasure VolumeSampleField; 

        /// <summary>
        /// A detailed description of the wireline formation test.
        /// </summary>
		[StringLength(2000)]
        [Description("A detailed description of the wireline formation test.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportFormTestInfo.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportFormTestInfo.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportWellTestInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportWellTestInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportWellTestInfo xsd type.")]
    public partial class DrillReportWellTestInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that the well test was completed.
        /// </summary>
		[Description("Date and time that the well test was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// The type of well test.
        /// </summary>
		[Description("The type of well test.")]
        [EnergisticsDataTypeAttribute(DataType = "WellTestType")]
		[XmlElement("TestType")]
        public WellTestType? TestType {
            get {
                return TestTypeField;
            } 
            set {
                TestTypeField = value;
                 this.TestTypeSpecified = true;
                NotifyPropertyChanged("TestType");
            }
        }

        private WellTestType? TestTypeField; 

        /// <summary>
        /// TestTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestTypeSpecified {
            get {
                return TestTypeSpecifiedField;
            } 
            set {
                TestTypeSpecifiedField = value;
                NotifyPropertyChanged("TestTypeSpecified");
            }
        }

        private bool TestTypeSpecifiedField; 

        /// <summary>
        /// The number of the well test.
        /// </summary>
		[Description("The number of the well test.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("TestNumber")]
        public int? TestNumber {
            get {
                return TestNumberField;
            } 
            set {
                TestNumberField = value;
                 this.TestNumberSpecified = true;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private int? TestNumberField; 

        /// <summary>
        /// TestNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestNumberSpecified {
            get {
                return TestNumberSpecifiedField;
            } 
            set {
                TestNumberSpecifiedField = value;
                NotifyPropertyChanged("TestNumberSpecified");
            }
        }

        private bool TestNumberSpecifiedField; 

        /// <summary>
        /// Test interval expressed as a measured depth.
        /// </summary>
		[Description("Test interval expressed as a measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("TestMdInterval")]
        public MdInterval TestMDInterval {
            get {
                return TestMdIntervalField;
            } 
            set {
                TestMdIntervalField = value;
                NotifyPropertyChanged("TestMDInterval");
            }
        }

        private MdInterval TestMdIntervalField; 

        /// <summary>
        /// Test interval expressed as a true vertical depth.
        /// </summary>
		[Description("Test interval expressed as a true vertical depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("TestTvdInterval")]
        public TvdInterval TestTvdInterval {
            get {
                return TestTvdIntervalField;
            } 
            set {
                TestTvdIntervalField = value;
                NotifyPropertyChanged("TestTvdInterval");
            }
        }

        private TvdInterval TestTvdIntervalField; 

        /// <summary>
        /// The diameter of the choke opening.
        /// </summary>
		[Description("The diameter of the choke opening.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ChokeOrificeSize")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return ChokeOrificeSizeField;
            } 
            set {
                ChokeOrificeSizeField = value;
                NotifyPropertyChanged("ChokeOrificeSize");
            }
        }

        private LengthMeasure ChokeOrificeSizeField; 

        /// <summary>
        /// The density of the produced oil.
        /// </summary>
		[Description("The density of the produced oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensityOil")]
        public MassPerVolumeMeasure DensityOil {
            get {
                return DensityOilField;
            } 
            set {
                DensityOilField = value;
                NotifyPropertyChanged("DensityOil");
            }
        }

        private MassPerVolumeMeasure DensityOilField; 

        /// <summary>
        /// The density of the produced water.
        /// </summary>
		[Description("The density of the produced water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensityWater")]
        public MassPerVolumeMeasure DensityWater {
            get {
                return DensityWaterField;
            } 
            set {
                DensityWaterField = value;
                NotifyPropertyChanged("DensityWater");
            }
        }

        private MassPerVolumeMeasure DensityWaterField; 

        /// <summary>
        /// The density of the produced gas.
        /// </summary>
		[Description("The density of the produced gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensityGas")]
        public MassPerVolumeMeasure DensityGas {
            get {
                return DensityGasField;
            } 
            set {
                DensityGasField = value;
                NotifyPropertyChanged("DensityGas");
            }
        }

        private MassPerVolumeMeasure DensityGasField; 

        /// <summary>
        /// The maximum rate at which oil was produced.
        /// </summary>
		[Description("The maximum rate at which oil was produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowRateOil")]
        public VolumePerTimeMeasure FlowRateOil {
            get {
                return FlowRateOilField;
            } 
            set {
                FlowRateOilField = value;
                NotifyPropertyChanged("FlowRateOil");
            }
        }

        private VolumePerTimeMeasure FlowRateOilField; 

        /// <summary>
        /// The maximum rate at which water was produced.
        /// </summary>
		[Description("The maximum rate at which water was produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowRateWater")]
        public VolumePerTimeMeasure FlowRateWater {
            get {
                return FlowRateWaterField;
            } 
            set {
                FlowRateWaterField = value;
                NotifyPropertyChanged("FlowRateWater");
            }
        }

        private VolumePerTimeMeasure FlowRateWaterField; 

        /// <summary>
        /// The maximum rate at which gas was produced.
        /// </summary>
		[Description("The maximum rate at which gas was produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowRateGas")]
        public VolumePerTimeMeasure FlowRateGas {
            get {
                return FlowRateGasField;
            } 
            set {
                FlowRateGasField = value;
                NotifyPropertyChanged("FlowRateGas");
            }
        }

        private VolumePerTimeMeasure FlowRateGasField; 

        /// <summary>
        /// The final shut-in pressure.
        /// </summary>
		[Description("The final shut-in pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresShutIn")]
        public PressureMeasure PresShutIn {
            get {
                return PresShutInField;
            } 
            set {
                PresShutInField = value;
                NotifyPropertyChanged("PresShutIn");
            }
        }

        private PressureMeasure PresShutInField; 

        /// <summary>
        /// The final flowing pressure.
        /// </summary>
		[Description("The final flowing pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresFlowing")]
        public PressureMeasure PresFlowing {
            get {
                return PresFlowingField;
            } 
            set {
                PresFlowingField = value;
                NotifyPropertyChanged("PresFlowing");
            }
        }

        private PressureMeasure PresFlowingField; 

        /// <summary>
        /// The final bottomhole pressure.
        /// </summary>
		[Description("The final bottomhole pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresBottom")]
        public PressureMeasure PresBottom {
            get {
                return PresBottomField;
            } 
            set {
                PresBottomField = value;
                NotifyPropertyChanged("PresBottom");
            }
        }

        private PressureMeasure PresBottomField; 

        /// <summary>
        /// The ratio of the volume of gas to the volume of oil.
        /// </summary>
		[Description("The ratio of the volume of gas to the volume of oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("GasOilRatio")]
        public VolumePerVolumeMeasure GasOilRatio {
            get {
                return GasOilRatioField;
            } 
            set {
                GasOilRatioField = value;
                NotifyPropertyChanged("GasOilRatio");
            }
        }

        private VolumePerVolumeMeasure GasOilRatioField; 

        /// <summary>
        /// The relative amount of water per amount of oil.
        /// </summary>
		[Description("The relative amount of water per amount of oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("WaterOilRatio")]
        public VolumePerVolumeMeasure WaterOilRatio {
            get {
                return WaterOilRatioField;
            } 
            set {
                WaterOilRatioField = value;
                NotifyPropertyChanged("WaterOilRatio");
            }
        }

        private VolumePerVolumeMeasure WaterOilRatioField; 

        /// <summary>
        /// The relative amount of chloride in the produced water.
        /// </summary>
		[Description("The relative amount of chloride in the produced water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("Chloride")]
        public MassPerMassMeasure Chloride {
            get {
                return ChlorideField;
            } 
            set {
                ChlorideField = value;
                NotifyPropertyChanged("Chloride");
            }
        }

        private MassPerMassMeasure ChlorideField; 

        /// <summary>
        /// The relative amount of CO2 gas.
        /// </summary>
		[Description("The relative amount of CO2 gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("CarbonDioxide")]
        public MassPerMassMeasure CarbonDioxide {
            get {
                return CarbonDioxideField;
            } 
            set {
                CarbonDioxideField = value;
                NotifyPropertyChanged("CarbonDioxide");
            }
        }

        private MassPerMassMeasure CarbonDioxideField; 

        /// <summary>
        /// The relative amount of H2S gas.
        /// </summary>
		[Description("The relative amount of H2S gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerMassMeasure")]
		[XmlElement("HydrogenSulfide")]
        public MassPerMassMeasure HydrogenSulfide {
            get {
                return HydrogenSulfideField;
            } 
            set {
                HydrogenSulfideField = value;
                NotifyPropertyChanged("HydrogenSulfide");
            }
        }

        private MassPerMassMeasure HydrogenSulfideField; 

        /// <summary>
        /// The total amount of oil produced. This includes oil that was disposed of (e.g., burned).
        /// </summary>
		[Description("The total amount of oil produced. This includes oil that was disposed of (e.g., burned).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolOilTotal")]
        public VolumeMeasure VolOilTotal {
            get {
                return VolOilTotalField;
            } 
            set {
                VolOilTotalField = value;
                NotifyPropertyChanged("VolOilTotal");
            }
        }

        private VolumeMeasure VolOilTotalField; 

        /// <summary>
        /// The total amount of gas produced. This includes gas that was disposed of (e.g., burned).
        /// </summary>
		[Description("The total amount of gas produced. This includes gas that was disposed of (e.g., burned).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolGasTotal")]
        public VolumeMeasure VolGasTotal {
            get {
                return VolGasTotalField;
            } 
            set {
                VolGasTotalField = value;
                NotifyPropertyChanged("VolGasTotal");
            }
        }

        private VolumeMeasure VolGasTotalField; 

        /// <summary>
        /// The total amount of water produced. This includes water that was disposed of.
        /// </summary>
		[Description("The total amount of water produced. This includes water that was disposed of.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolWaterTotal")]
        public VolumeMeasure VolWaterTotal {
            get {
                return VolWaterTotalField;
            } 
            set {
                VolWaterTotalField = value;
                NotifyPropertyChanged("VolWaterTotal");
            }
        }

        private VolumeMeasure VolWaterTotalField; 

        /// <summary>
        /// The total amount of produced oil that was stored.
        /// </summary>
		[Description("The total amount of produced oil that was stored.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolOilStored")]
        public VolumeMeasure VolOilStored {
            get {
                return VolOilStoredField;
            } 
            set {
                VolOilStoredField = value;
                NotifyPropertyChanged("VolOilStored");
            }
        }

        private VolumeMeasure VolOilStoredField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportWellTestInfo.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportWellTestInfo.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportCoreInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportCoreInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportCoreInfo xsd type.")]
    public partial class DrillReportCoreInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time that the core was completed.
        /// </summary>
		[Description("Date and time that the core was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Core identification number.
        /// </summary>
		[StringLength(64)]
        [Description("Core identification number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CoreNumber")]
        public string CoreNumber {
            get {
                return CoreNumberField;
            } 
            set {
                CoreNumberField = value;
                NotifyPropertyChanged("CoreNumber");
            }
        }

        private string CoreNumberField; 

        /// <summary>
        /// Cored interval expressed as measured depth.
        /// </summary>
		[Description("Cored interval expressed as measured depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("CoredMdInterval")]
        public MdInterval CoredMDInterval {
            get {
                return CoredMdIntervalField;
            } 
            set {
                CoredMdIntervalField = value;
                NotifyPropertyChanged("CoredMDInterval");
            }
        }

        private MdInterval CoredMdIntervalField; 

        /// <summary>
        /// Cored interval expressed as true vertical depth.
        /// </summary>
		[Description("Cored interval expressed as true vertical depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("CoredTvdInterval")]
        public TvdInterval CoredTvdInterval {
            get {
                return CoredTvdIntervalField;
            } 
            set {
                CoredTvdIntervalField = value;
                NotifyPropertyChanged("CoredTvdInterval");
            }
        }

        private TvdInterval CoredTvdIntervalField; 

        /// <summary>
        /// Length of the core recovered.
        /// </summary>
		[Description("Length of the core recovered.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenRecovered")]
        public LengthMeasure LenRecovered {
            get {
                return LenRecoveredField;
            } 
            set {
                LenRecoveredField = value;
                NotifyPropertyChanged("LenRecovered");
            }
        }

        private LengthMeasure LenRecoveredField; 

        /// <summary>
        /// The relative amount of core recovered.
        /// </summary>
		[Description("The relative amount of core recovered.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("RecoverPc")]
        public VolumePerVolumeMeasure RecoverPercent {
            get {
                return RecoverPcField;
            } 
            set {
                RecoverPcField = value;
                NotifyPropertyChanged("RecoverPercent");
            }
        }

        private VolumePerVolumeMeasure RecoverPcField; 

        /// <summary>
        /// Length of the core barrel.
        /// </summary>
		[Description("Length of  the core barrel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenBarrel")]
        public LengthMeasure LenBarrel {
            get {
                return LenBarrelField;
            } 
            set {
                LenBarrelField = value;
                NotifyPropertyChanged("LenBarrel");
            }
        }

        private LengthMeasure LenBarrelField; 

        /// <summary>
        /// Core inner barrel type.
        /// </summary>
		[Description("Core inner barrel type.")]
        [EnergisticsDataTypeAttribute(DataType = "InnerBarrelType")]
		[XmlElement("InnerBarrelType")]
        public InnerBarrelType? InnerBarrelType {
            get {
                return InnerBarrelTypeField;
            } 
            set {
                InnerBarrelTypeField = value;
                 this.InnerBarrelTypeSpecified = true;
                NotifyPropertyChanged("InnerBarrelType");
            }
        }

        private InnerBarrelType? InnerBarrelTypeField; 

        /// <summary>
        /// InnerBarrelTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InnerBarrelTypeSpecified {
            get {
                return InnerBarrelTypeSpecifiedField;
            } 
            set {
                InnerBarrelTypeSpecifiedField = value;
                NotifyPropertyChanged("InnerBarrelTypeSpecified");
            }
        }

        private bool InnerBarrelTypeSpecifiedField; 

        /// <summary>
        /// General core description.
        /// </summary>
		[StringLength(2000)]
        [Description("General core description.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("CoreDescription")]
        public string CoreDescription {
            get {
                return CoreDescriptionField;
            } 
            set {
                CoreDescriptionField = value;
                NotifyPropertyChanged("CoreDescription");
            }
        }

        private string CoreDescriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportCoreInfo.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportCoreInfo.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractBottomHoleTemperature xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BottomHoleStaticTemperature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BottomHoleCirculatingTemperature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractBottomHoleTemperature", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractBottomHoleTemperature xsd type.")]
    public abstract partial class AbstractBottomHoleTemperature : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Bottomhole temperature for the job or reporting period.
        /// </summary>
		[Description("Bottomhole temperature for the job or reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("BottomHoleTemperature")]
        public ThermodynamicTemperatureMeasure BottomHoleTemperature {
            get {
                return BottomHoleTemperatureField;
            } 
            set {
                BottomHoleTemperatureField = value;
                NotifyPropertyChanged("BottomHoleTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure BottomHoleTemperatureField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BottomHoleStaticTemperature xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BottomHoleStaticTemperature", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BottomHoleStaticTemperature xsd type.")]
    public partial class BottomHoleStaticTemperature : AbstractBottomHoleTemperature, INotifyPropertyChanged
    {

        /// <summary>
        /// Elapsed time since circulation stopped.
        /// </summary>
		[Description("Elapsed time since circulation stopped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("eTimStatic")]
        public TimeMeasure ETimeStatic {
            get {
                return eTimStaticField;
            } 
            set {
                eTimStaticField = value;
                NotifyPropertyChanged("ETimeStatic");
            }
        }

        private TimeMeasure eTimStaticField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BottomHoleCirculatingTemperature xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BottomHoleCirculatingTemperature", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BottomHoleCirculatingTemperature xsd type.")]
    public partial class BottomHoleCirculatingTemperature : AbstractBottomHoleTemperature, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillReportLogInfo xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillReportLogInfo", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillReportLogInfo xsd type.")]
    public partial class DrillReportLogInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Description("The date and time that the log was completed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// RunNumber property
        /// </summary>
		[StringLength(64)]
        [Description("Log run number.  For measurement while drilling, this should be the  bottom hole assembly number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RunNumber")]
        public string RunNumber {
            get {
                return RunNumberField;
            } 
            set {
                RunNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private string RunNumberField; 

        /// <summary>
        /// ServiceCompany property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the contractor who provided the service.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ServiceCompany")]
        public string ServiceCompany {
            get {
                return ServiceCompanyField;
            } 
            set {
                ServiceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string ServiceCompanyField; 

        /// <summary>
        /// LoggedMdInterval property
        /// </summary>
		[Description("Measured depth interval from the top to the base of the interval logged.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("LoggedMdInterval")]
        public MdInterval LoggedMDInterval {
            get {
                return LoggedMdIntervalField;
            } 
            set {
                LoggedMdIntervalField = value;
                NotifyPropertyChanged("LoggedMDInterval");
            }
        }

        private MdInterval LoggedMdIntervalField; 

        /// <summary>
        /// LoggedTvdInterval property
        /// </summary>
		[Description("True vertical depth interval from the top to the base of the interval logged.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("LoggedTvdInterval")]
        public TvdInterval LoggedTvdInterval {
            get {
                return LoggedTvdIntervalField;
            } 
            set {
                LoggedTvdIntervalField = value;
                NotifyPropertyChanged("LoggedTvdInterval");
            }
        }

        private TvdInterval LoggedTvdIntervalField; 

        /// <summary>
        /// Tool property
        /// </summary>
		[StringLength(64)]
        [Description("A description of the logging tool.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Tool")]
        public string Tool {
            get {
                return ToolField;
            } 
            set {
                ToolField = value;
                NotifyPropertyChanged("Tool");
            }
        }

        private string ToolField; 

        /// <summary>
        /// MdTempTool property
        /// </summary>
		[Description("Measured depth to the temperature measurement tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdTempTool")]
        public MeasuredDepthCoord MDTempTool {
            get {
                return MdTempToolField;
            } 
            set {
                MdTempToolField = value;
                NotifyPropertyChanged("MDTempTool");
            }
        }

        private MeasuredDepthCoord MdTempToolField; 

        /// <summary>
        /// TvdTempTool property
        /// </summary>
		[Description("True vertical depth to the temperature measurement tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdTempTool")]
        public WellVerticalDepthCoord TvdTempTool {
            get {
                return TvdTempToolField;
            } 
            set {
                TvdTempToolField = value;
                NotifyPropertyChanged("TvdTempTool");
            }
        }

        private WellVerticalDepthCoord TvdTempToolField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// BottomHoleTemperature property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBottomHoleTemperature")]
		[XmlElement("BottomHoleTemperature")]
        public AbstractBottomHoleTemperature BottomHoleTemperature {
            get {
                return BottomHoleTemperatureField;
            } 
            set {
                BottomHoleTemperatureField = value;
                NotifyPropertyChanged("BottomHoleTemperature");
            }
        }

        private AbstractBottomHoleTemperature BottomHoleTemperatureField; 

		/// <summary>
        /// Unique identifier for this instance of DrillReportLogInfo.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillReportLogInfo.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DrillActivity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DrillActivity", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DrillActivity xsd type.")]
    public partial class DrillActivity : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("Date and time that activities started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Description("Date and time that activities ended.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        
        private bool DateTimeEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DateTimeEndSpecifiedField;
            } 
            set {
                DateTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }
        
        private Timestamp? DTimEndField; 

        /// <summary>
        /// Duration property
        /// </summary>
		[Description("The activity duration (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("Duration")]
        public TimeMeasure Duration {
            get {
                return DurationField;
            } 
            set {
                DurationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure DurationField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("The measured depth to the drilling activity/operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("True vertical depth to the drilling activity/operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// Phase property
        /// </summary>
		[StringLength(64)]
        [Description("Phase refers to a large activity classification, e.g., drill surface hole.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Phase")]
        public string Phase {
            get {
                return PhaseField;
            } 
            set {
                PhaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private string PhaseField; 

        /// <summary>
        /// ActivityCode property
        /// </summary>
		[Description("A code used to define rig activity.")]
        [EnergisticsDataTypeAttribute(DataType = "DrillActivityCode")]
		[XmlElement("ActivityCode")]
        public DrillActivityCode? ActivityCode {
            get {
                return ActivityCodeField;
            } 
            set {
                ActivityCodeField = value;
                 this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private DrillActivityCode? ActivityCodeField; 

        /// <summary>
        /// ActivityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ActivityCodeSpecified {
            get {
                return ActivityCodeSpecifiedField;
            } 
            set {
                ActivityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private bool ActivityCodeSpecifiedField; 

        /// <summary>
        /// DetailActivity property
        /// </summary>
		[StringLength(64)]
        [Description("Custom string to further define an activity.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DetailActivity")]
        public string DetailActivity {
            get {
                return DetailActivityField;
            } 
            set {
                DetailActivityField = value;
                NotifyPropertyChanged("DetailActivity");
            }
        }

        private string DetailActivityField; 

        /// <summary>
        /// TypeActivityClass property
        /// </summary>
		[Description("Classifier (planned, unplanned, downtime).")]
        [EnergisticsDataTypeAttribute(DataType = "DrillActivityClassType")]
		[XmlElement("TypeActivityClass")]
        public DrillActivityClassType? TypeActivityClass {
            get {
                return TypeActivityClassField;
            } 
            set {
                TypeActivityClassField = value;
                 this.TypeActivityClassSpecified = true;
                NotifyPropertyChanged("TypeActivityClass");
            }
        }

        private DrillActivityClassType? TypeActivityClassField; 

        /// <summary>
        /// TypeActivityClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeActivityClassSpecified {
            get {
                return TypeActivityClassSpecifiedField;
            } 
            set {
                TypeActivityClassSpecifiedField = value;
                NotifyPropertyChanged("TypeActivityClassSpecified");
            }
        }

        private bool TypeActivityClassSpecifiedField; 

        /// <summary>
        /// ActivityMdInterval property
        /// </summary>
		[Description("Measured depth interval over which the activity was conducted.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("ActivityMdInterval")]
        public MdInterval ActivityMDInterval {
            get {
                return ActivityMdIntervalField;
            } 
            set {
                ActivityMdIntervalField = value;
                NotifyPropertyChanged("ActivityMDInterval");
            }
        }

        private MdInterval ActivityMdIntervalField; 

        /// <summary>
        /// ActivityTvdInterval property
        /// </summary>
		[Description("True vertical depth interval over which the activity was conducted.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("ActivityTvdInterval")]
        public TvdInterval ActivityTvdInterval {
            get {
                return ActivityTvdIntervalField;
            } 
            set {
                ActivityTvdIntervalField = value;
                NotifyPropertyChanged("ActivityTvdInterval");
            }
        }

        private TvdInterval ActivityTvdIntervalField; 

        /// <summary>
        /// BitMdInterval property
        /// </summary>
		[Description("Range of bit measured depths over which the activity occurred.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("BitMdInterval")]
        public MdInterval BitMDInterval {
            get {
                return BitMdIntervalField;
            } 
            set {
                BitMdIntervalField = value;
                NotifyPropertyChanged("BitMDInterval");
            }
        }

        private MdInterval BitMdIntervalField; 

        /// <summary>
        /// State property
        /// </summary>
		[StringLength(64)]
        [Description("Finish, interrupted, failed, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("State")]
        public string State {
            get {
                return StateField;
            } 
            set {
                StateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private string StateField; 

        /// <summary>
        /// StateDetailActivity property
        /// </summary>
		[Description("The outcome of the detailed activity.")]
        [EnergisticsDataTypeAttribute(DataType = "StateDetailActivity")]
		[XmlElement("StateDetailActivity")]
        public StateDetailActivity? StateDetailActivity {
            get {
                return StateDetailActivityField;
            } 
            set {
                StateDetailActivityField = value;
                 this.StateDetailActivitySpecified = true;
                NotifyPropertyChanged("StateDetailActivity");
            }
        }

        private StateDetailActivity? StateDetailActivityField; 

        /// <summary>
        /// StateDetailActivitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StateDetailActivitySpecified {
            get {
                return StateDetailActivitySpecifiedField;
            } 
            set {
                StateDetailActivitySpecifiedField = value;
                NotifyPropertyChanged("StateDetailActivitySpecified");
            }
        }

        private bool StateDetailActivitySpecifiedField; 

        /// <summary>
        /// Operator property
        /// </summary>
		[StringLength(64)]
        [Description("Operator company name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Operator")]
        public string Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private string OperatorField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the tubular object  related to this activity.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Tubular")]
        public string Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private string TubularField; 

        /// <summary>
        /// Optimum property
        /// </summary>
		[Description("Is the activity optimum.? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Optimum")]
        public bool? Optimum {
            get {
                return OptimumField;
            } 
            set {
                OptimumField = value;
                 this.OptimumSpecified = true;
                NotifyPropertyChanged("Optimum");
            }
        }

        private bool? OptimumField; 

        /// <summary>
        /// OptimumSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OptimumSpecified {
            get {
                return OptimumSpecifiedField;
            } 
            set {
                OptimumSpecifiedField = value;
                NotifyPropertyChanged("OptimumSpecified");
            }
        }

        private bool OptimumSpecifiedField; 

        /// <summary>
        /// Productive property
        /// </summary>
		[Description("Does activity bring closer to objective?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Productive")]
        public bool? Productive {
            get {
                return ProductiveField;
            } 
            set {
                ProductiveField = value;
                 this.ProductiveSpecified = true;
                NotifyPropertyChanged("Productive");
            }
        }

        private bool? ProductiveField; 

        /// <summary>
        /// ProductiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProductiveSpecified {
            get {
                return ProductiveSpecifiedField;
            } 
            set {
                ProductiveSpecifiedField = value;
                NotifyPropertyChanged("ProductiveSpecified");
            }
        }

        private bool ProductiveSpecifiedField; 

        /// <summary>
        /// ItemState property
        /// </summary>
		[Description("The item state for the data object.")]
        [EnergisticsDataTypeAttribute(DataType = "ItemState")]
		[XmlElement("ItemState")]
        public ItemState? ItemState {
            get {
                return ItemStateField;
            } 
            set {
                ItemStateField = value;
                 this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ItemState? ItemStateField; 

        /// <summary>
        /// ItemStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemStateSpecified {
            get {
                return ItemStateSpecifiedField;
            } 
            set {
                ItemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private bool ItemStateSpecifiedField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ProprietaryCode property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("ProprietaryCode")]
        public List<ObjectAlias> ProprietaryCode {
            get {
                return ProprietaryCodeField;
            } 
            set {
                ProprietaryCodeField = value;
                NotifyPropertyChanged("ProprietaryCode");
            }
        }

         /// <summary>
         /// bool to indicate if ProprietaryCode has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProprietaryCodeSpecified
         {
             get {
             if(ProprietaryCodeField!=null)
                 return ProprietaryCodeField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> ProprietaryCodeField; 

		/// <summary>
        /// Unique identifier for this instance of DrillActivity.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of DrillActivity.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Nozzle xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Nozzle", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Nozzle xsd type.")]
    public partial class Nozzle : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Description("Index if this is an indexed object.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Index")]
        public int? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private int? IndexField; 

        /// <summary>
        /// IndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexSpecified {
            get {
                return IndexSpecifiedField;
            } 
            set {
                IndexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private bool IndexSpecifiedField; 

        /// <summary>
        /// DiaNozzle property
        /// </summary>
		[Description("Nozzle diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaNozzle")]
        public LengthMeasure DiaNozzle {
            get {
                return DiaNozzleField;
            } 
            set {
                DiaNozzleField = value;
                NotifyPropertyChanged("DiaNozzle");
            }
        }

        private LengthMeasure DiaNozzleField; 

        /// <summary>
        /// TypeNozzle property
        /// </summary>
		[Description("Nozzle type.")]
        [EnergisticsDataTypeAttribute(DataType = "NozzleType")]
		[XmlElement("TypeNozzle")]
        public NozzleType? TypeNozzle {
            get {
                return TypeNozzleField;
            } 
            set {
                TypeNozzleField = value;
                 this.TypeNozzleSpecified = true;
                NotifyPropertyChanged("TypeNozzle");
            }
        }

        private NozzleType? TypeNozzleField; 

        /// <summary>
        /// TypeNozzleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeNozzleSpecified {
            get {
                return TypeNozzleSpecifiedField;
            } 
            set {
                TypeNozzleSpecifiedField = value;
                NotifyPropertyChanged("TypeNozzleSpecified");
            }
        }

        private bool TypeNozzleSpecifiedField; 

        /// <summary>
        /// Len property
        /// </summary>
		[Description("Length of the nozzle.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Len")]
        public LengthMeasure Len {
            get {
                return LenField;
            } 
            set {
                LenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure LenField; 

        /// <summary>
        /// Orientation property
        /// </summary>
		[StringLength(64)]
        [Description("Nozzle orientation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Orientation")]
        public string Orientation {
            get {
                return OrientationField;
            } 
            set {
                OrientationField = value;
                NotifyPropertyChanged("Orientation");
            }
        }

        private string OrientationField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// Unique identifier for this instance of Nozzle
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Nozzle")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractRotarySteerableTool xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BendOffset))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BendAngle))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractRotarySteerableTool", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the AbstractRotarySteerableTool xsd type.")]
    public abstract partial class AbstractRotarySteerableTool : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BendOffset xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BendOffset", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BendOffset xsd type.")]
    public partial class BendOffset : AbstractRotarySteerableTool, INotifyPropertyChanged
    {

        /// <summary>
        /// BendOffset1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("BendOffset")]
        public LengthMeasure BendOffset1 {
            get {
                return BendOffset1Field;
            } 
            set {
                BendOffset1Field = value;
                NotifyPropertyChanged("BendOffset1");
            }
        }

        private LengthMeasure BendOffset1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BendAngle xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BendAngle", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BendAngle xsd type.")]
    public partial class BendAngle : AbstractRotarySteerableTool, INotifyPropertyChanged
    {

        /// <summary>
        /// BendAngle1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("BendAngle")]
        public PlaneAngleMeasure BendAngle1 {
            get {
                return BendAngle1Field;
            } 
            set {
                BendAngle1Field = value;
                NotifyPropertyChanged("BendAngle1");
            }
        }

        private PlaneAngleMeasure BendAngle1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RotarySteerableTool xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RotarySteerableTool", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RotarySteerableTool xsd type.")]
    public partial class RotarySteerableTool : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DeflectionMethod property
        /// </summary>
		[Required]
        [Description("Method used to direct the deviation of the trajectory: point bit or push bit.")]
        [EnergisticsDataTypeAttribute(DataType = "DeflectionMethod")]
		[XmlElement("DeflectionMethod")]
        public DeflectionMethod? DeflectionMethod {
            get {
                return DeflectionMethodField;
            } 
            set {
                DeflectionMethodField = value;
                 this.DeflectionMethodSpecified = true;
                NotifyPropertyChanged("DeflectionMethod");
            }
        }

        
        private bool DeflectionMethodSpecifiedField = false;
        
        /// <summary>
        /// DeflectionMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DeflectionMethodSpecified {
            get {
                return DeflectionMethodSpecifiedField;
            } 
            set {
                DeflectionMethodSpecifiedField = value;
                NotifyPropertyChanged("DeflectionMethodSpecified");
            }
        }
        
        private DeflectionMethod? DeflectionMethodField; 

        /// <summary>
        /// HoleSizeMn property
        /// </summary>
		[Description("Minimum size of the hole in which the tool can operate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HoleSizeMn")]
        public LengthMeasure HoleSizeMin {
            get {
                return HoleSizeMnField;
            } 
            set {
                HoleSizeMnField = value;
                NotifyPropertyChanged("HoleSizeMin");
            }
        }

        private LengthMeasure HoleSizeMnField; 

        /// <summary>
        /// HoleSizeMx property
        /// </summary>
		[Description("Maximum size of the hole in which the tool can operate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HoleSizeMx")]
        public LengthMeasure HoleSizeMax {
            get {
                return HoleSizeMxField;
            } 
            set {
                HoleSizeMxField = value;
                NotifyPropertyChanged("HoleSizeMax");
            }
        }

        private LengthMeasure HoleSizeMxField; 

        /// <summary>
        /// WobMx property
        /// </summary>
		[Description("Maximum weight on the bit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("WobMx")]
        public ForceMeasure WobMax {
            get {
                return WobMxField;
            } 
            set {
                WobMxField = value;
                NotifyPropertyChanged("WobMax");
            }
        }

        private ForceMeasure WobMxField; 

        /// <summary>
        /// OperatingSpeed property
        /// </summary>
		[Description("Suggested operating speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("OperatingSpeed")]
        public AngularVelocityMeasure OperatingSpeed {
            get {
                return OperatingSpeedField;
            } 
            set {
                OperatingSpeedField = value;
                NotifyPropertyChanged("OperatingSpeed");
            }
        }

        private AngularVelocityMeasure OperatingSpeedField; 

        /// <summary>
        /// SpeedMx property
        /// </summary>
		[Description("Maximum rotation speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AngularVelocityMeasure")]
		[XmlElement("SpeedMx")]
        public AngularVelocityMeasure SpeedMax {
            get {
                return SpeedMxField;
            } 
            set {
                SpeedMxField = value;
                NotifyPropertyChanged("SpeedMax");
            }
        }

        private AngularVelocityMeasure SpeedMxField; 

        /// <summary>
        /// FlowRateMn property
        /// </summary>
		[Description("Minimum flow rate for tool operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowRateMn")]
        public VolumePerTimeMeasure FlowRateMin {
            get {
                return FlowRateMnField;
            } 
            set {
                FlowRateMnField = value;
                NotifyPropertyChanged("FlowRateMin");
            }
        }

        private VolumePerTimeMeasure FlowRateMnField; 

        /// <summary>
        /// FlowRateMx property
        /// </summary>
		[Description("Maximum flow rate for tool operation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowRateMx")]
        public VolumePerTimeMeasure FlowRateMax {
            get {
                return FlowRateMxField;
            } 
            set {
                FlowRateMxField = value;
                NotifyPropertyChanged("FlowRateMax");
            }
        }

        private VolumePerTimeMeasure FlowRateMxField; 

        /// <summary>
        /// DownLinkFlowRateMn property
        /// </summary>
		[Description("Minimum flow rate for programming the tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("DownLinkFlowRateMn")]
        public VolumePerTimeMeasure DownLinkFlowRateMin {
            get {
                return DownLinkFlowRateMnField;
            } 
            set {
                DownLinkFlowRateMnField = value;
                NotifyPropertyChanged("DownLinkFlowRateMin");
            }
        }

        private VolumePerTimeMeasure DownLinkFlowRateMnField; 

        /// <summary>
        /// DownLinkFlowRateMx property
        /// </summary>
		[Description("Maximum flow rate for programming the tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("DownLinkFlowRateMx")]
        public VolumePerTimeMeasure DownLinkFlowRateMax {
            get {
                return DownLinkFlowRateMxField;
            } 
            set {
                DownLinkFlowRateMxField = value;
                NotifyPropertyChanged("DownLinkFlowRateMax");
            }
        }

        private VolumePerTimeMeasure DownLinkFlowRateMxField; 

        /// <summary>
        /// PressLossFact property
        /// </summary>
		[Description("Pressure drop across the tool.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("PressLossFact")]
        public double? PressLossFact {
            get {
                return PressLossFactField;
            } 
            set {
                PressLossFactField = value;
                 this.PressLossFactSpecified = true;
                NotifyPropertyChanged("PressLossFact");
            }
        }

        private double? PressLossFactField; 

        /// <summary>
        /// PressLossFactSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PressLossFactSpecified {
            get {
                return PressLossFactSpecifiedField;
            } 
            set {
                PressLossFactSpecifiedField = value;
                NotifyPropertyChanged("PressLossFactSpecified");
            }
        }

        private bool PressLossFactSpecifiedField; 

        /// <summary>
        /// PadCount property
        /// </summary>
		[Description("The number of contact pads.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("PadCount")]
        public int? PadCount {
            get {
                return PadCountField;
            } 
            set {
                PadCountField = value;
                 this.PadCountSpecified = true;
                NotifyPropertyChanged("PadCount");
            }
        }

        private int? PadCountField; 

        /// <summary>
        /// PadCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PadCountSpecified {
            get {
                return PadCountSpecifiedField;
            } 
            set {
                PadCountSpecifiedField = value;
                NotifyPropertyChanged("PadCountSpecified");
            }
        }

        private bool PadCountSpecifiedField; 

        /// <summary>
        /// PadLen property
        /// </summary>
		[Description("Length of the contact pad.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("PadLen")]
        public LengthMeasure PadLen {
            get {
                return PadLenField;
            } 
            set {
                PadLenField = value;
                NotifyPropertyChanged("PadLen");
            }
        }

        private LengthMeasure PadLenField; 

        /// <summary>
        /// PadWidth property
        /// </summary>
		[Description("Width of the contact pad.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("PadWidth")]
        public LengthMeasure PadWidth {
            get {
                return PadWidthField;
            } 
            set {
                PadWidthField = value;
                NotifyPropertyChanged("PadWidth");
            }
        }

        private LengthMeasure PadWidthField; 

        /// <summary>
        /// PadOffset property
        /// </summary>
		[Description("Offset from the bottom of the pad to the bottom connector.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("PadOffset")]
        public LengthMeasure PadOffset {
            get {
                return PadOffsetField;
            } 
            set {
                PadOffsetField = value;
                NotifyPropertyChanged("PadOffset");
            }
        }

        private LengthMeasure PadOffsetField; 

        /// <summary>
        /// OpenPadOd property
        /// </summary>
		[Description("Outside diameter of the tool when the pads are activated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OpenPadOd")]
        public LengthMeasure OpenPadOuterDiameter {
            get {
                return OpenPadOdField;
            } 
            set {
                OpenPadOdField = value;
                NotifyPropertyChanged("OpenPadOuterDiameter");
            }
        }

        private LengthMeasure OpenPadOdField; 

        /// <summary>
        /// ClosePadOd property
        /// </summary>
		[Description("Outside diameter of the tool when the pads are closed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ClosePadOd")]
        public LengthMeasure ClosePadOuterDiameter {
            get {
                return ClosePadOdField;
            } 
            set {
                ClosePadOdField = value;
                NotifyPropertyChanged("ClosePadOuterDiameter");
            }
        }

        private LengthMeasure ClosePadOdField; 

        /// <summary>
        /// AbstractRotarySteerableTool property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractRotarySteerableTool")]
		[XmlElement("AbstractRotarySteerableTool")]
        public AbstractRotarySteerableTool AbstractRotarySteerableTool {
            get {
                return AbstractRotarySteerableToolField;
            } 
            set {
                AbstractRotarySteerableToolField = value;
                NotifyPropertyChanged("AbstractRotarySteerableTool");
            }
        }

        private AbstractRotarySteerableTool AbstractRotarySteerableToolField; 

        /// <summary>
        /// Sensor property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Sensor")]
		[XmlElement("Sensor")]
        public List<Sensor> Sensor {
            get {
                return SensorField;
            } 
            set {
                SensorField = value;
                NotifyPropertyChanged("Sensor");
            }
        }

         /// <summary>
         /// bool to indicate if Sensor has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SensorSpecified
         {
             get {
             if(SensorField!=null)
                 return SensorField.Count>0?true:false;
             else return false;
             }
         }
        private List<Sensor> SensorField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Sensor xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Sensor", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Sensor xsd type.")]
    public partial class Sensor : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeMeasurement property
        /// </summary>
		[Description("Type from POSC.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasurementType")]
		[XmlElement("TypeMeasurement")]
        public MeasurementType? TypeMeasurement {
            get {
                return TypeMeasurementField;
            } 
            set {
                TypeMeasurementField = value;
                 this.TypeMeasurementSpecified = true;
                NotifyPropertyChanged("TypeMeasurement");
            }
        }

        private MeasurementType? TypeMeasurementField; 

        /// <summary>
        /// TypeMeasurementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeMeasurementSpecified {
            get {
                return TypeMeasurementSpecifiedField;
            } 
            set {
                TypeMeasurementSpecifiedField = value;
                NotifyPropertyChanged("TypeMeasurementSpecified");
            }
        }

        private bool TypeMeasurementSpecifiedField; 

        /// <summary>
        /// OffsetBot property
        /// </summary>
		[Description("Offset from the bottom of the MWD tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OffsetBot")]
        public LengthMeasure OffsetBot {
            get {
                return OffsetBotField;
            } 
            set {
                OffsetBotField = value;
                NotifyPropertyChanged("OffsetBot");
            }
        }

        private LengthMeasure OffsetBotField; 

        /// <summary>
        /// Comments property
        /// </summary>
		[StringLength(2000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comments")]
        public string Comments {
            get {
                return CommentsField;
            } 
            set {
                CommentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string CommentsField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// Unique identifier for this instance of Sensor.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Sensor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the HoleOpener xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="HoleOpener", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the HoleOpener xsd type.")]
    public partial class HoleOpener : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeHoleOpener property
        /// </summary>
		[Description("Under reamer or fixed blade.")]
        [EnergisticsDataTypeAttribute(DataType = "HoleOpenerType")]
		[XmlElement("TypeHoleOpener")]
        public HoleOpenerType? TypeHoleOpener {
            get {
                return TypeHoleOpenerField;
            } 
            set {
                TypeHoleOpenerField = value;
                 this.TypeHoleOpenerSpecified = true;
                NotifyPropertyChanged("TypeHoleOpener");
            }
        }

        private HoleOpenerType? TypeHoleOpenerField; 

        /// <summary>
        /// TypeHoleOpenerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeHoleOpenerSpecified {
            get {
                return TypeHoleOpenerSpecifiedField;
            } 
            set {
                TypeHoleOpenerSpecifiedField = value;
                NotifyPropertyChanged("TypeHoleOpenerSpecified");
            }
        }

        private bool TypeHoleOpenerSpecifiedField; 

        /// <summary>
        /// NumCutter property
        /// </summary>
		[Description("Number of cutters on the tool.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumCutter")]
        public int? NumCutter {
            get {
                return NumCutterField;
            } 
            set {
                NumCutterField = value;
                 this.NumCutterSpecified = true;
                NotifyPropertyChanged("NumCutter");
            }
        }

        private int? NumCutterField; 

        /// <summary>
        /// NumCutterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumCutterSpecified {
            get {
                return NumCutterSpecifiedField;
            } 
            set {
                NumCutterSpecifiedField = value;
                NotifyPropertyChanged("NumCutterSpecified");
            }
        }

        private bool NumCutterSpecifiedField; 

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer or supplier of the tool.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// DiaHoleOpener property
        /// </summary>
		[Description("Diameter of the reamer.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaHoleOpener")]
        public LengthMeasure DiaHoleOpener {
            get {
                return DiaHoleOpenerField;
            } 
            set {
                DiaHoleOpenerField = value;
                NotifyPropertyChanged("DiaHoleOpener");
            }
        }

        private LengthMeasure DiaHoleOpenerField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Bend xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Bend", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Bend xsd type.")]
    public partial class Bend : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Angle property
        /// </summary>
		[Description("Angle of the bend.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("Angle")]
        public PlaneAngleMeasure Angle {
            get {
                return AngleField;
            } 
            set {
                AngleField = value;
                NotifyPropertyChanged("Angle");
            }
        }

        private PlaneAngleMeasure AngleField; 

        /// <summary>
        /// DistBendBot property
        /// </summary>
		[Description("Distance of the bend from the bottom of the component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistBendBot")]
        public LengthMeasure DistBendBot {
            get {
                return DistBendBotField;
            } 
            set {
                DistBendBotField = value;
                NotifyPropertyChanged("DistBendBot");
            }
        }

        private LengthMeasure DistBendBotField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// Unique identifier for this instance of Bend.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Bend.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Stabilizer xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Stabilizer", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Stabilizer xsd type.")]
    public partial class Stabilizer : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// LenBlade property
        /// </summary>
		[Description("Length of the blade.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenBlade")]
        public LengthMeasure LenBlade {
            get {
                return LenBladeField;
            } 
            set {
                LenBladeField = value;
                NotifyPropertyChanged("LenBlade");
            }
        }

        private LengthMeasure LenBladeField; 

        /// <summary>
        /// LenBladeGauge property
        /// </summary>
		[Description("Gauge Length of the blade. That is, the length of the blade measured at the OdBladeMx.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenBladeGauge")]
        public LengthMeasure LenBladeGauge {
            get {
                return LenBladeGaugeField;
            } 
            set {
                LenBladeGaugeField = value;
                NotifyPropertyChanged("LenBladeGauge");
            }
        }

        private LengthMeasure LenBladeGaugeField; 

        /// <summary>
        /// OdBladeMx property
        /// </summary>
		[Description("Maximum outer diameter of the blade.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdBladeMx")]
        public LengthMeasure OuterDiameterBladeMax {
            get {
                return OdBladeMxField;
            } 
            set {
                OdBladeMxField = value;
                NotifyPropertyChanged("OuterDiameterBladeMax");
            }
        }

        private LengthMeasure OdBladeMxField; 

        /// <summary>
        /// OdBladeMn property
        /// </summary>
		[Description("Minimum outer diameter of the blade.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdBladeMn")]
        public LengthMeasure OuterDiameterBladeMin {
            get {
                return OdBladeMnField;
            } 
            set {
                OdBladeMnField = value;
                NotifyPropertyChanged("OuterDiameterBladeMin");
            }
        }

        private LengthMeasure OdBladeMnField; 

        /// <summary>
        /// DistBladeBot property
        /// </summary>
		[Description("Distance of the blade bottom from the bottom of the component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistBladeBot")]
        public LengthMeasure DistBladeBot {
            get {
                return DistBladeBotField;
            } 
            set {
                DistBladeBotField = value;
                NotifyPropertyChanged("DistBladeBot");
            }
        }

        private LengthMeasure DistBladeBotField; 

        /// <summary>
        /// ShapeBlade property
        /// </summary>
		[Description("Blade shape.")]
        [EnergisticsDataTypeAttribute(DataType = "BladeShapeType")]
		[XmlElement("ShapeBlade")]
        public BladeShapeType? ShapeBlade {
            get {
                return ShapeBladeField;
            } 
            set {
                ShapeBladeField = value;
                 this.ShapeBladeSpecified = true;
                NotifyPropertyChanged("ShapeBlade");
            }
        }

        private BladeShapeType? ShapeBladeField; 

        /// <summary>
        /// ShapeBladeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShapeBladeSpecified {
            get {
                return ShapeBladeSpecifiedField;
            } 
            set {
                ShapeBladeSpecifiedField = value;
                NotifyPropertyChanged("ShapeBladeSpecified");
            }
        }

        private bool ShapeBladeSpecifiedField; 

        /// <summary>
        /// FactFric property
        /// </summary>
		[Description("Friction factor.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("FactFric")]
        public double? FactFric {
            get {
                return FactFricField;
            } 
            set {
                FactFricField = value;
                 this.FactFricSpecified = true;
                NotifyPropertyChanged("FactFric");
            }
        }

        private double? FactFricField; 

        /// <summary>
        /// FactFricSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FactFricSpecified {
            get {
                return FactFricSpecifiedField;
            } 
            set {
                FactFricSpecifiedField = value;
                NotifyPropertyChanged("FactFricSpecified");
            }
        }

        private bool FactFricSpecifiedField; 

        /// <summary>
        /// TypeBlade property
        /// </summary>
		[Description("Blade type.")]
        [EnergisticsDataTypeAttribute(DataType = "BladeType")]
		[XmlElement("TypeBlade")]
        public BladeType? TypeBlade {
            get {
                return TypeBladeField;
            } 
            set {
                TypeBladeField = value;
                 this.TypeBladeSpecified = true;
                NotifyPropertyChanged("TypeBlade");
            }
        }

        private BladeType? TypeBladeField; 

        /// <summary>
        /// TypeBladeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeBladeSpecified {
            get {
                return TypeBladeSpecifiedField;
            } 
            set {
                TypeBladeSpecifiedField = value;
                NotifyPropertyChanged("TypeBladeSpecified");
            }
        }

        private bool TypeBladeSpecifiedField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// Unique identifier for this instance of Stabilizer.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of Stabilizer.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Motor xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Motor", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Motor xsd type.")]
    public partial class Motor : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// OffsetTool property
        /// </summary>
		[Description("Tool offset from bottom.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OffsetTool")]
        public LengthMeasure OffsetTool {
            get {
                return OffsetToolField;
            } 
            set {
                OffsetToolField = value;
                NotifyPropertyChanged("OffsetTool");
            }
        }

        private LengthMeasure OffsetToolField; 

        /// <summary>
        /// PresLossFact property
        /// </summary>
		[Description("Pressure loss factor.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("PresLossFact")]
        public double? PresLossFact {
            get {
                return PresLossFactField;
            } 
            set {
                PresLossFactField = value;
                 this.PresLossFactSpecified = true;
                NotifyPropertyChanged("PresLossFact");
            }
        }

        private double? PresLossFactField; 

        /// <summary>
        /// PresLossFactSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PresLossFactSpecified {
            get {
                return PresLossFactSpecifiedField;
            } 
            set {
                PresLossFactSpecifiedField = value;
                NotifyPropertyChanged("PresLossFactSpecified");
            }
        }

        private bool PresLossFactSpecifiedField; 

        /// <summary>
        /// FlowrateMn property
        /// </summary>
		[Description("Minimum flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateMn")]
        public VolumePerTimeMeasure FlowrateMin {
            get {
                return FlowrateMnField;
            } 
            set {
                FlowrateMnField = value;
                NotifyPropertyChanged("FlowrateMin");
            }
        }

        private VolumePerTimeMeasure FlowrateMnField; 

        /// <summary>
        /// FlowrateMx property
        /// </summary>
		[Description("Maximum flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateMx")]
        public VolumePerTimeMeasure FlowrateMax {
            get {
                return FlowrateMxField;
            } 
            set {
                FlowrateMxField = value;
                NotifyPropertyChanged("FlowrateMax");
            }
        }

        private VolumePerTimeMeasure FlowrateMxField; 

        /// <summary>
        /// DiaRotorNozzle property
        /// </summary>
		[Description("Diameter of rotor at nozzle.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaRotorNozzle")]
        public LengthMeasure DiaRotorNozzle {
            get {
                return DiaRotorNozzleField;
            } 
            set {
                DiaRotorNozzleField = value;
                NotifyPropertyChanged("DiaRotorNozzle");
            }
        }

        private LengthMeasure DiaRotorNozzleField; 

        /// <summary>
        /// ClearanceBearBox property
        /// </summary>
		[Description("Clearance inside bearing box.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ClearanceBearBox")]
        public LengthMeasure ClearanceBearBox {
            get {
                return ClearanceBearBoxField;
            } 
            set {
                ClearanceBearBoxField = value;
                NotifyPropertyChanged("ClearanceBearBox");
            }
        }

        private LengthMeasure ClearanceBearBoxField; 

        /// <summary>
        /// LobesRotor property
        /// </summary>
		[Description("Number of rotor lobes.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("LobesRotor")]
        public int? LobesRotor {
            get {
                return LobesRotorField;
            } 
            set {
                LobesRotorField = value;
                 this.LobesRotorSpecified = true;
                NotifyPropertyChanged("LobesRotor");
            }
        }

        private int? LobesRotorField; 

        /// <summary>
        /// LobesRotorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LobesRotorSpecified {
            get {
                return LobesRotorSpecifiedField;
            } 
            set {
                LobesRotorSpecifiedField = value;
                NotifyPropertyChanged("LobesRotorSpecified");
            }
        }

        private bool LobesRotorSpecifiedField; 

        /// <summary>
        /// LobesStator property
        /// </summary>
		[Description("Number of stator lobes.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("LobesStator")]
        public int? LobesStator {
            get {
                return LobesStatorField;
            } 
            set {
                LobesStatorField = value;
                 this.LobesStatorSpecified = true;
                NotifyPropertyChanged("LobesStator");
            }
        }

        private int? LobesStatorField; 

        /// <summary>
        /// LobesStatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LobesStatorSpecified {
            get {
                return LobesStatorSpecifiedField;
            } 
            set {
                LobesStatorSpecifiedField = value;
                NotifyPropertyChanged("LobesStatorSpecified");
            }
        }

        private bool LobesStatorSpecifiedField; 

        /// <summary>
        /// TypeBearing property
        /// </summary>
		[Description("Type of bearing.")]
        [EnergisticsDataTypeAttribute(DataType = "BearingType")]
		[XmlElement("TypeBearing")]
        public BearingType? TypeBearing {
            get {
                return TypeBearingField;
            } 
            set {
                TypeBearingField = value;
                 this.TypeBearingSpecified = true;
                NotifyPropertyChanged("TypeBearing");
            }
        }

        private BearingType? TypeBearingField; 

        /// <summary>
        /// TypeBearingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeBearingSpecified {
            get {
                return TypeBearingSpecifiedField;
            } 
            set {
                TypeBearingSpecifiedField = value;
                NotifyPropertyChanged("TypeBearingSpecified");
            }
        }

        private bool TypeBearingSpecifiedField; 

        /// <summary>
        /// TempOpMx property
        /// </summary>
		[Description("Maximum operating temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempOpMx")]
        public ThermodynamicTemperatureMeasure TempOperatingMax {
            get {
                return TempOpMxField;
            } 
            set {
                TempOpMxField = value;
                NotifyPropertyChanged("TempOperatingMax");
            }
        }

        private ThermodynamicTemperatureMeasure TempOpMxField; 

        /// <summary>
        /// RotorCatcher property
        /// </summary>
		[Description("Is rotor catcher present?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("RotorCatcher")]
        public bool? RotorCatcher {
            get {
                return RotorCatcherField;
            } 
            set {
                RotorCatcherField = value;
                 this.RotorCatcherSpecified = true;
                NotifyPropertyChanged("RotorCatcher");
            }
        }

        private bool? RotorCatcherField; 

        /// <summary>
        /// RotorCatcherSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RotorCatcherSpecified {
            get {
                return RotorCatcherSpecifiedField;
            } 
            set {
                RotorCatcherSpecifiedField = value;
                NotifyPropertyChanged("RotorCatcherSpecified");
            }
        }

        private bool RotorCatcherSpecifiedField; 

        /// <summary>
        /// DumpValve property
        /// </summary>
		[Description("Is dump valve present?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("DumpValve")]
        public bool? DumpValve {
            get {
                return DumpValveField;
            } 
            set {
                DumpValveField = value;
                 this.DumpValveSpecified = true;
                NotifyPropertyChanged("DumpValve");
            }
        }

        private bool? DumpValveField; 

        /// <summary>
        /// DumpValveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DumpValveSpecified {
            get {
                return DumpValveSpecifiedField;
            } 
            set {
                DumpValveSpecifiedField = value;
                NotifyPropertyChanged("DumpValveSpecified");
            }
        }

        private bool DumpValveSpecifiedField; 

        /// <summary>
        /// DiaNozzle property
        /// </summary>
		[Description("Nozzle diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaNozzle")]
        public LengthMeasure DiaNozzle {
            get {
                return DiaNozzleField;
            } 
            set {
                DiaNozzleField = value;
                NotifyPropertyChanged("DiaNozzle");
            }
        }

        private LengthMeasure DiaNozzleField; 

        /// <summary>
        /// Rotatable property
        /// </summary>
		[Description("Is motor rotatable?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Rotatable")]
        public bool? Rotatable {
            get {
                return RotatableField;
            } 
            set {
                RotatableField = value;
                 this.RotatableSpecified = true;
                NotifyPropertyChanged("Rotatable");
            }
        }

        private bool? RotatableField; 

        /// <summary>
        /// RotatableSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RotatableSpecified {
            get {
                return RotatableSpecifiedField;
            } 
            set {
                RotatableSpecifiedField = value;
                NotifyPropertyChanged("RotatableSpecified");
            }
        }

        private bool RotatableSpecifiedField; 

        /// <summary>
        /// BendSettingsMn property
        /// </summary>
		[Description("Minimum bend angle setting.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("BendSettingsMn")]
        public PlaneAngleMeasure BendSettingsMin {
            get {
                return BendSettingsMnField;
            } 
            set {
                BendSettingsMnField = value;
                NotifyPropertyChanged("BendSettingsMin");
            }
        }

        private PlaneAngleMeasure BendSettingsMnField; 

        /// <summary>
        /// BendSettingsMx property
        /// </summary>
		[Description("Maximum bend angle setting.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("BendSettingsMx")]
        public PlaneAngleMeasure BendSettingsMax {
            get {
                return BendSettingsMxField;
            } 
            set {
                BendSettingsMxField = value;
                NotifyPropertyChanged("BendSettingsMax");
            }
        }

        private PlaneAngleMeasure BendSettingsMxField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BitRecord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BitRecord", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the BitRecord xsd type.")]
    public partial class BitRecord : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// NumBit property
        /// </summary>
		[StringLength(64)]
        [Description("Bit number and rerun number, e.g., \"4.1\" for the first rerun of bit 4.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumBit")]
        public string NumBit {
            get {
                return NumBitField;
            } 
            set {
                NumBitField = value;
                NotifyPropertyChanged("NumBit");
            }
        }

        private string NumBitField; 

        /// <summary>
        /// DiaBit property
        /// </summary>
		[Required]
        [Description("Diameter of the drilled hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaBit")]
        public LengthMeasure DiaBit {
            get {
                return DiaBitField;
            } 
            set {
                DiaBitField = value;
                NotifyPropertyChanged("DiaBit");
            }
        }

        private LengthMeasure DiaBitField; 

        /// <summary>
        /// DiaPassThru property
        /// </summary>
		[Description("Minimum hole or tubing diameter that the bit will pass through (for bi-center bits).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaPassThru")]
        public LengthMeasure DiaPassThru {
            get {
                return DiaPassThruField;
            } 
            set {
                DiaPassThruField = value;
                NotifyPropertyChanged("DiaPassThru");
            }
        }

        private LengthMeasure DiaPassThruField; 

        /// <summary>
        /// DiaPilot property
        /// </summary>
		[Description("Diameter of the pilot bit (for bi-center bits).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaPilot")]
        public LengthMeasure DiaPilot {
            get {
                return DiaPilotField;
            } 
            set {
                DiaPilotField = value;
                NotifyPropertyChanged("DiaPilot");
            }
        }

        private LengthMeasure DiaPilotField; 

        /// <summary>
        /// Manufacturer property
        /// </summary>
		[StringLength(64)]
        [Description("Manufacturer or supplier of the item.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// TypeBit property
        /// </summary>
		[Description("Type of bit.")]
        [EnergisticsDataTypeAttribute(DataType = "BitType")]
		[XmlElement("TypeBit")]
        public BitType? TypeBit {
            get {
                return TypeBitField;
            } 
            set {
                TypeBitField = value;
                 this.TypeBitSpecified = true;
                NotifyPropertyChanged("TypeBit");
            }
        }

        private BitType? TypeBitField; 

        /// <summary>
        /// TypeBitSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeBitSpecified {
            get {
                return TypeBitSpecifiedField;
            } 
            set {
                TypeBitSpecifiedField = value;
                NotifyPropertyChanged("TypeBitSpecified");
            }
        }

        private bool TypeBitSpecifiedField; 

        /// <summary>
        /// CodeMfg property
        /// </summary>
		[StringLength(64)]
        [Description("The manufacturer's code for the bit.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CodeMfg")]
        public string CodeMfg {
            get {
                return CodeMfgField;
            } 
            set {
                CodeMfgField = value;
                NotifyPropertyChanged("CodeMfg");
            }
        }

        private string CodeMfgField; 

        /// <summary>
        /// CodeIADC property
        /// </summary>
		[StringLength(64)]
        [Description("IADC bit code.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CodeIADC")]
        public string CodeIADC {
            get {
                return CodeIADCField;
            } 
            set {
                CodeIADCField = value;
                NotifyPropertyChanged("CodeIADC");
            }
        }

        private string CodeIADCField; 

        /// <summary>
        /// CondInitInner property
        /// </summary>
		[Description("Initial condition of the inner tooth rows (inner 2/3 of the bit) (0-8).")]
        [EnergisticsDataTypeAttribute(DataType = "IadcIntegerCode")]
		[XmlElement("CondInitInner")]
        public IadcIntegerCode? CondInitInner {
            get {
                return CondInitInnerField;
            } 
            set {
                CondInitInnerField = value;
                 this.CondInitInnerSpecified = true;
                NotifyPropertyChanged("CondInitInner");
            }
        }

        private IadcIntegerCode? CondInitInnerField; 

        /// <summary>
        /// CondInitInnerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondInitInnerSpecified {
            get {
                return CondInitInnerSpecifiedField;
            } 
            set {
                CondInitInnerSpecifiedField = value;
                NotifyPropertyChanged("CondInitInnerSpecified");
            }
        }

        private bool CondInitInnerSpecifiedField; 

        /// <summary>
        /// CondInitOuter property
        /// </summary>
		[Description("Initial condition of the outer tooth rows (outer 1/3 of bit) (0-8).")]
        [EnergisticsDataTypeAttribute(DataType = "IadcIntegerCode")]
		[XmlElement("CondInitOuter")]
        public IadcIntegerCode? CondInitOuter {
            get {
                return CondInitOuterField;
            } 
            set {
                CondInitOuterField = value;
                 this.CondInitOuterSpecified = true;
                NotifyPropertyChanged("CondInitOuter");
            }
        }

        private IadcIntegerCode? CondInitOuterField; 

        /// <summary>
        /// CondInitOuterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondInitOuterSpecified {
            get {
                return CondInitOuterSpecifiedField;
            } 
            set {
                CondInitOuterSpecifiedField = value;
                NotifyPropertyChanged("CondInitOuterSpecified");
            }
        }

        private bool CondInitOuterSpecifiedField; 

        /// <summary>
        /// CondInitDull property
        /// </summary>
		[Description("Initial dull condition from the IADC bit-wear 2-character codes.")]
        [EnergisticsDataTypeAttribute(DataType = "BitDullCode")]
		[XmlElement("CondInitDull")]
        public BitDullCode? CondInitDull {
            get {
                return CondInitDullField;
            } 
            set {
                CondInitDullField = value;
                 this.CondInitDullSpecified = true;
                NotifyPropertyChanged("CondInitDull");
            }
        }

        private BitDullCode? CondInitDullField; 

        /// <summary>
        /// CondInitDullSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondInitDullSpecified {
            get {
                return CondInitDullSpecifiedField;
            } 
            set {
                CondInitDullSpecifiedField = value;
                NotifyPropertyChanged("CondInitDullSpecified");
            }
        }

        private bool CondInitDullSpecifiedField; 

        /// <summary>
        /// CondInitLocation property
        /// </summary>
		[StringLength(64)]
        [Description("Initial row and cone numbers for items that need location information (e.g., cracked cone, lost cone, etc).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CondInitLocation")]
        public string CondInitLocation {
            get {
                return CondInitLocationField;
            } 
            set {
                CondInitLocationField = value;
                NotifyPropertyChanged("CondInitLocation");
            }
        }

        private string CondInitLocationField; 

        /// <summary>
        /// CondInitBearing property
        /// </summary>
		[Description("Initial condition of the bit bearings (integer 0-8 or E, F, N or X).")]
        [EnergisticsDataTypeAttribute(DataType = "IadcBearingWearCode")]
		[XmlElement("CondInitBearing")]
        public IadcBearingWearCode? CondInitBearing {
            get {
                return CondInitBearingField;
            } 
            set {
                CondInitBearingField = value;
                 this.CondInitBearingSpecified = true;
                NotifyPropertyChanged("CondInitBearing");
            }
        }

        private IadcBearingWearCode? CondInitBearingField; 

        /// <summary>
        /// CondInitBearingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondInitBearingSpecified {
            get {
                return CondInitBearingSpecifiedField;
            } 
            set {
                CondInitBearingSpecifiedField = value;
                NotifyPropertyChanged("CondInitBearingSpecified");
            }
        }

        private bool CondInitBearingSpecifiedField; 

        /// <summary>
        /// CondInitGauge property
        /// </summary>
		[StringLength(64)]
        [Description("Initial condition of the bit gauge in 1/16 of an inch. I = in gauge, else the number of 16ths out of gauge.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CondInitGauge")]
        public string CondInitGauge {
            get {
                return CondInitGaugeField;
            } 
            set {
                CondInitGaugeField = value;
                NotifyPropertyChanged("CondInitGauge");
            }
        }

        private string CondInitGaugeField; 

        /// <summary>
        /// CondInitOther property
        /// </summary>
		[StringLength(64)]
        [Description("Other comments on initial bit condition from the IADC list (BitDullCode enumerated list).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CondInitOther")]
        public string CondInitOther {
            get {
                return CondInitOtherField;
            } 
            set {
                CondInitOtherField = value;
                NotifyPropertyChanged("CondInitOther");
            }
        }

        private string CondInitOtherField; 

        /// <summary>
        /// CondInitReason property
        /// </summary>
		[Description("Initial reason the bit was pulled from IADC codes (BitReasonPulled enumerated list).")]
        [EnergisticsDataTypeAttribute(DataType = "BitReasonPulled")]
		[XmlElement("CondInitReason")]
        public BitReasonPulled? CondInitReason {
            get {
                return CondInitReasonField;
            } 
            set {
                CondInitReasonField = value;
                 this.CondInitReasonSpecified = true;
                NotifyPropertyChanged("CondInitReason");
            }
        }

        private BitReasonPulled? CondInitReasonField; 

        /// <summary>
        /// CondInitReasonSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondInitReasonSpecified {
            get {
                return CondInitReasonSpecifiedField;
            } 
            set {
                CondInitReasonSpecifiedField = value;
                NotifyPropertyChanged("CondInitReasonSpecified");
            }
        }

        private bool CondInitReasonSpecifiedField; 

        /// <summary>
        /// CondFinalInner property
        /// </summary>
		[Description("Final condition of the inner tooth rows (inner 2/3 of bit) (0-8).")]
        [EnergisticsDataTypeAttribute(DataType = "IadcIntegerCode")]
		[XmlElement("CondFinalInner")]
        public IadcIntegerCode? CondFinalInner {
            get {
                return CondFinalInnerField;
            } 
            set {
                CondFinalInnerField = value;
                 this.CondFinalInnerSpecified = true;
                NotifyPropertyChanged("CondFinalInner");
            }
        }

        private IadcIntegerCode? CondFinalInnerField; 

        /// <summary>
        /// CondFinalInnerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondFinalInnerSpecified {
            get {
                return CondFinalInnerSpecifiedField;
            } 
            set {
                CondFinalInnerSpecifiedField = value;
                NotifyPropertyChanged("CondFinalInnerSpecified");
            }
        }

        private bool CondFinalInnerSpecifiedField; 

        /// <summary>
        /// CondFinalOuter property
        /// </summary>
		[Description("Final condition of the outer tooth rows (outer 1/3 of bit) (0-8).")]
        [EnergisticsDataTypeAttribute(DataType = "IadcIntegerCode")]
		[XmlElement("CondFinalOuter")]
        public IadcIntegerCode? CondFinalOuter {
            get {
                return CondFinalOuterField;
            } 
            set {
                CondFinalOuterField = value;
                 this.CondFinalOuterSpecified = true;
                NotifyPropertyChanged("CondFinalOuter");
            }
        }

        private IadcIntegerCode? CondFinalOuterField; 

        /// <summary>
        /// CondFinalOuterSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondFinalOuterSpecified {
            get {
                return CondFinalOuterSpecifiedField;
            } 
            set {
                CondFinalOuterSpecifiedField = value;
                NotifyPropertyChanged("CondFinalOuterSpecified");
            }
        }

        private bool CondFinalOuterSpecifiedField; 

        /// <summary>
        /// CondFinalDull property
        /// </summary>
		[Description("Final dull condition from the IADC bit-wear 2-character codes.")]
        [EnergisticsDataTypeAttribute(DataType = "BitDullCode")]
		[XmlElement("CondFinalDull")]
        public BitDullCode? CondFinalDull {
            get {
                return CondFinalDullField;
            } 
            set {
                CondFinalDullField = value;
                 this.CondFinalDullSpecified = true;
                NotifyPropertyChanged("CondFinalDull");
            }
        }

        private BitDullCode? CondFinalDullField; 

        /// <summary>
        /// CondFinalDullSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondFinalDullSpecified {
            get {
                return CondFinalDullSpecifiedField;
            } 
            set {
                CondFinalDullSpecifiedField = value;
                NotifyPropertyChanged("CondFinalDullSpecified");
            }
        }

        private bool CondFinalDullSpecifiedField; 

        /// <summary>
        /// CondFinalLocation property
        /// </summary>
		[StringLength(64)]
        [Description("Final conditions for row and cone numbers for items that need location information (e.g., cracked cone, lost cone, etc).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CondFinalLocation")]
        public string CondFinalLocation {
            get {
                return CondFinalLocationField;
            } 
            set {
                CondFinalLocationField = value;
                NotifyPropertyChanged("CondFinalLocation");
            }
        }

        private string CondFinalLocationField; 

        /// <summary>
        /// CondFinalBearing property
        /// </summary>
		[Description("Final condition of the bit bearings (integer 0-8 or E, F, N or X).")]
        [EnergisticsDataTypeAttribute(DataType = "IadcBearingWearCode")]
		[XmlElement("CondFinalBearing")]
        public IadcBearingWearCode? CondFinalBearing {
            get {
                return CondFinalBearingField;
            } 
            set {
                CondFinalBearingField = value;
                 this.CondFinalBearingSpecified = true;
                NotifyPropertyChanged("CondFinalBearing");
            }
        }

        private IadcBearingWearCode? CondFinalBearingField; 

        /// <summary>
        /// CondFinalBearingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondFinalBearingSpecified {
            get {
                return CondFinalBearingSpecifiedField;
            } 
            set {
                CondFinalBearingSpecifiedField = value;
                NotifyPropertyChanged("CondFinalBearingSpecified");
            }
        }

        private bool CondFinalBearingSpecifiedField; 

        /// <summary>
        /// CondFinalGauge property
        /// </summary>
		[StringLength(64)]
        [Description("Final condition of the bit gauge in 1/16 of a inch. I = in gauge, else number of 16ths out of gauge.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CondFinalGauge")]
        public string CondFinalGauge {
            get {
                return CondFinalGaugeField;
            } 
            set {
                CondFinalGaugeField = value;
                NotifyPropertyChanged("CondFinalGauge");
            }
        }

        private string CondFinalGaugeField; 

        /// <summary>
        /// CondFinalOther property
        /// </summary>
		[StringLength(64)]
        [Description("Other final comments on bit condition from the IADC list (BitDullCode enumerated list).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CondFinalOther")]
        public string CondFinalOther {
            get {
                return CondFinalOtherField;
            } 
            set {
                CondFinalOtherField = value;
                NotifyPropertyChanged("CondFinalOther");
            }
        }

        private string CondFinalOtherField; 

        /// <summary>
        /// CondFinalReason property
        /// </summary>
		[Description("Final reason the bit was pulled from IADC codes (BitReasonPulled enumerated list).")]
        [EnergisticsDataTypeAttribute(DataType = "BitReasonPulled")]
		[XmlElement("CondFinalReason")]
        public BitReasonPulled? CondFinalReason {
            get {
                return CondFinalReasonField;
            } 
            set {
                CondFinalReasonField = value;
                 this.CondFinalReasonSpecified = true;
                NotifyPropertyChanged("CondFinalReason");
            }
        }

        private BitReasonPulled? CondFinalReasonField; 

        /// <summary>
        /// CondFinalReasonSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CondFinalReasonSpecified {
            get {
                return CondFinalReasonSpecifiedField;
            } 
            set {
                CondFinalReasonSpecifiedField = value;
                NotifyPropertyChanged("CondFinalReasonSpecified");
            }
        }

        private bool CondFinalReasonSpecifiedField; 

        /// <summary>
        /// Drive property
        /// </summary>
		[StringLength(64)]
        [Description("Bit drive type (motor, rotary table, etc.).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Drive")]
        public string Drive {
            get {
                return DriveField;
            } 
            set {
                DriveField = value;
                NotifyPropertyChanged("Drive");
            }
        }

        private string DriveField; 

        /// <summary>
        /// BitClass property
        /// </summary>
		[StringLength(64)]
        [Description("N = new, U = used.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("BitClass")]
        public string BitClass {
            get {
                return BitClassField;
            } 
            set {
                BitClassField = value;
                NotifyPropertyChanged("BitClass");
            }
        }

        private string BitClassField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Cost property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Cost")]
		[XmlElement("Cost")]
        public Cost Cost {
            get {
                return CostField;
            } 
            set {
                CostField = value;
                NotifyPropertyChanged("Cost");
            }
        }

        private Cost CostField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

		/// <summary>
        /// Unique identifier for this instance of BitRecord.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of BitRecord.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MwdTool xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MwdTool", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the MwdTool xsd type.")]
    public partial class MwdTool : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// FlowrateMn property
        /// </summary>
		[Description("Minimum flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateMn")]
        public VolumePerTimeMeasure FlowrateMin {
            get {
                return FlowrateMnField;
            } 
            set {
                FlowrateMnField = value;
                NotifyPropertyChanged("FlowrateMin");
            }
        }

        private VolumePerTimeMeasure FlowrateMnField; 

        /// <summary>
        /// FlowrateMx property
        /// </summary>
		[Description("Maximum flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowrateMx")]
        public VolumePerTimeMeasure FlowrateMax {
            get {
                return FlowrateMxField;
            } 
            set {
                FlowrateMxField = value;
                NotifyPropertyChanged("FlowrateMax");
            }
        }

        private VolumePerTimeMeasure FlowrateMxField; 

        /// <summary>
        /// TempMx property
        /// </summary>
		[Description("Maximum Temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TempMx")]
        public ThermodynamicTemperatureMeasure TempMax {
            get {
                return TempMxField;
            } 
            set {
                TempMxField = value;
                NotifyPropertyChanged("TempMax");
            }
        }

        private ThermodynamicTemperatureMeasure TempMxField; 

        /// <summary>
        /// IdEquv property
        /// </summary>
		[Description("Equivalent inner diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdEquv")]
        public LengthMeasure IdEquv {
            get {
                return IdEquvField;
            } 
            set {
                IdEquvField = value;
                NotifyPropertyChanged("IdEquv");
            }
        }

        private LengthMeasure IdEquvField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

        /// <summary>
        /// Sensor property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Sensor")]
		[XmlElement("Sensor")]
        public List<Sensor> Sensor {
            get {
                return SensorField;
            } 
            set {
                SensorField = value;
                NotifyPropertyChanged("Sensor");
            }
        }

         /// <summary>
         /// bool to indicate if Sensor has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SensorSpecified
         {
             get {
             if(SensorField!=null)
                 return SensorField.Count>0?true:false;
             else return false;
             }
         }
        private List<Sensor> SensorField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Jar xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Jar", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the Jar xsd type.")]
    public partial class Jar : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ForUpSet property
        /// </summary>
		[Description("Up set force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("ForUpSet")]
        public ForceMeasure ForUpSet {
            get {
                return ForUpSetField;
            } 
            set {
                ForUpSetField = value;
                NotifyPropertyChanged("ForUpSet");
            }
        }

        private ForceMeasure ForUpSetField; 

        /// <summary>
        /// ForDownSet property
        /// </summary>
		[Description("Down set force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("ForDownSet")]
        public ForceMeasure ForDownSet {
            get {
                return ForDownSetField;
            } 
            set {
                ForDownSetField = value;
                NotifyPropertyChanged("ForDownSet");
            }
        }

        private ForceMeasure ForDownSetField; 

        /// <summary>
        /// ForUpTrip property
        /// </summary>
		[Description("Up trip force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("ForUpTrip")]
        public ForceMeasure ForUpTrip {
            get {
                return ForUpTripField;
            } 
            set {
                ForUpTripField = value;
                NotifyPropertyChanged("ForUpTrip");
            }
        }

        private ForceMeasure ForUpTripField; 

        /// <summary>
        /// ForDownTrip property
        /// </summary>
		[Description("Down trip force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("ForDownTrip")]
        public ForceMeasure ForDownTrip {
            get {
                return ForDownTripField;
            } 
            set {
                ForDownTripField = value;
                NotifyPropertyChanged("ForDownTrip");
            }
        }

        private ForceMeasure ForDownTripField; 

        /// <summary>
        /// ForPmpOpen property
        /// </summary>
		[Description("Pump open force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("ForPmpOpen")]
        public ForceMeasure ForPmpOpen {
            get {
                return ForPmpOpenField;
            } 
            set {
                ForPmpOpenField = value;
                NotifyPropertyChanged("ForPmpOpen");
            }
        }

        private ForceMeasure ForPmpOpenField; 

        /// <summary>
        /// ForSealFric property
        /// </summary>
		[Description("Seal friction force.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("ForSealFric")]
        public ForceMeasure ForSealFric {
            get {
                return ForSealFricField;
            } 
            set {
                ForSealFricField = value;
                NotifyPropertyChanged("ForSealFric");
            }
        }

        private ForceMeasure ForSealFricField; 

        /// <summary>
        /// TypeJar property
        /// </summary>
		[Description("The kind of jar.")]
        [EnergisticsDataTypeAttribute(DataType = "JarType")]
		[XmlElement("TypeJar")]
        public JarType? TypeJar {
            get {
                return TypeJarField;
            } 
            set {
                TypeJarField = value;
                 this.TypeJarSpecified = true;
                NotifyPropertyChanged("TypeJar");
            }
        }

        private JarType? TypeJarField; 

        /// <summary>
        /// TypeJarSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeJarSpecified {
            get {
                return TypeJarSpecifiedField;
            } 
            set {
                TypeJarSpecifiedField = value;
                NotifyPropertyChanged("TypeJarSpecified");
            }
        }

        private bool TypeJarSpecifiedField; 

        /// <summary>
        /// JarAction property
        /// </summary>
		[Description("The jar action.")]
        [EnergisticsDataTypeAttribute(DataType = "JarAction")]
		[XmlElement("JarAction")]
        public JarAction? JarAction {
            get {
                return JarActionField;
            } 
            set {
                JarActionField = value;
                 this.JarActionSpecified = true;
                NotifyPropertyChanged("JarAction");
            }
        }

        private JarAction? JarActionField; 

        /// <summary>
        /// JarActionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool JarActionSpecified {
            get {
                return JarActionSpecifiedField;
            } 
            set {
                JarActionSpecifiedField = value;
                NotifyPropertyChanged("JarActionSpecified");
            }
        }

        private bool JarActionSpecifiedField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ForcePerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ForcePerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ForcePerLengthMeasure xsd type.")]
    public partial class ForcePerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        public ForcePerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ForcePerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ForcePerLengthMeasure(double value, ForcePerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerLengthUom")]
        [XmlAttribute("uom")]
		
        public ForcePerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ForcePerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthPerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthPerLengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthPerLengthMeasure xsd type.")]
    public partial class LengthPerLengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        public LengthPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthPerLengthMeasure(double value, LengthPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerLengthUom")]
        [XmlAttribute("uom")]
		
        public LengthPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthPerLengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TubularComponent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TubularComponent", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the TubularComponent xsd type.")]
    public partial class TubularComponent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeTubularComponent property
        /// </summary>
		[Required]
        [Description("Connection whose type is tubular")]
        [EnergisticsDataTypeAttribute(DataType = "TubularComponentType")]
		[XmlElement("TypeTubularComponent")]
        public TubularComponentType? TypeTubularComponent {
            get {
                return TypeTubularComponentField;
            } 
            set {
                TypeTubularComponentField = value;
                 this.TypeTubularComponentSpecified = true;
                NotifyPropertyChanged("TypeTubularComponent");
            }
        }

        
        private bool TypeTubularComponentSpecifiedField = false;
        
        /// <summary>
        /// TypeTubularComponentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeTubularComponentSpecified {
            get {
                return TypeTubularComponentSpecifiedField;
            } 
            set {
                TypeTubularComponentSpecifiedField = value;
                NotifyPropertyChanged("TypeTubularComponentSpecified");
            }
        }
        
        private TubularComponentType? TypeTubularComponentField; 

        /// <summary>
        /// Sequence property
        /// </summary>
		[Required]
        [Description("The sequence within which the components entered the hole. That is, a sequence number of 1 entered first, 2 entered next, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Sequence")]
        public int? Sequence {
            get {
                return SequenceField;
            } 
            set {
                SequenceField = value;
                NotifyPropertyChanged("Sequence");
            }
        }

        private int? SequenceField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of item and details.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Id property
        /// </summary>
		[Required]
        [Description("Internal diameter of object.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Id")]
        public LengthMeasure InnerDiameter {
            get {
                return IdField;
            } 
            set {
                IdField = value;
                NotifyPropertyChanged("InnerDiameter");
            }
        }

        private LengthMeasure IdField; 

        /// <summary>
        /// Od property
        /// </summary>
		[Required]
        [Description("Outside diameter of the body of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Od")]
        public LengthMeasure OuterDiameter {
            get {
                return OdField;
            } 
            set {
                OdField = value;
                NotifyPropertyChanged("OuterDiameter");
            }
        }

        private LengthMeasure OdField; 

        /// <summary>
        /// OdMx property
        /// </summary>
		[Description("Maximum outside diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdMx")]
        public LengthMeasure OuterDiameterMax {
            get {
                return OdMxField;
            } 
            set {
                OdMxField = value;
                NotifyPropertyChanged("OuterDiameterMax");
            }
        }

        private LengthMeasure OdMxField; 

        /// <summary>
        /// Len property
        /// </summary>
		[Required]
        [Description("Length of the item.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Len")]
        public LengthMeasure Len {
            get {
                return LenField;
            } 
            set {
                LenField = value;
                NotifyPropertyChanged("Len");
            }
        }

        private LengthMeasure LenField; 

        /// <summary>
        /// LenJointAv property
        /// </summary>
		[Description("Average length of the joint for this string.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenJointAv")]
        public LengthMeasure LenJointAverage {
            get {
                return LenJointAvField;
            } 
            set {
                LenJointAvField = value;
                NotifyPropertyChanged("LenJointAverage");
            }
        }

        private LengthMeasure LenJointAvField; 

        /// <summary>
        /// NumJointStand property
        /// </summary>
		[Description("Number of joints per stand of tubulars.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumJointStand")]
        public int? NumJointStand {
            get {
                return NumJointStandField;
            } 
            set {
                NumJointStandField = value;
                 this.NumJointStandSpecified = true;
                NotifyPropertyChanged("NumJointStand");
            }
        }

        private int? NumJointStandField; 

        /// <summary>
        /// NumJointStandSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumJointStandSpecified {
            get {
                return NumJointStandSpecifiedField;
            } 
            set {
                NumJointStandSpecifiedField = value;
                NotifyPropertyChanged("NumJointStandSpecified");
            }
        }

        private bool NumJointStandSpecifiedField; 

        /// <summary>
        /// WtPerLen property
        /// </summary>
		[Description("Weight per unit length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerLengthMeasure")]
		[XmlElement("WtPerLen")]
        public MassPerLengthMeasure WeightPerLen {
            get {
                return WtPerLenField;
            } 
            set {
                WtPerLenField = value;
                NotifyPropertyChanged("WeightPerLen");
            }
        }

        private MassPerLengthMeasure WtPerLenField; 

        /// <summary>
        /// Grade property
        /// </summary>
		[StringLength(64)]
        [Description("Material grade for the tubular section.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Grade")]
        public string Grade {
            get {
                return GradeField;
            } 
            set {
                GradeField = value;
                NotifyPropertyChanged("Grade");
            }
        }

        private string GradeField; 

        /// <summary>
        /// OdDrift property
        /// </summary>
		[Description("Minimum pass through diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdDrift")]
        public LengthMeasure OuterDiameterDrift {
            get {
                return OdDriftField;
            } 
            set {
                OdDriftField = value;
                NotifyPropertyChanged("OuterDiameterDrift");
            }
        }

        private LengthMeasure OdDriftField; 

        /// <summary>
        /// TensYield property
        /// </summary>
		[Description("Yield stress of steel - worn stress.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("TensYield")]
        public PressureMeasure TensYield {
            get {
                return TensYieldField;
            } 
            set {
                TensYieldField = value;
                NotifyPropertyChanged("TensYield");
            }
        }

        private PressureMeasure TensYieldField; 

        /// <summary>
        /// TqYield property
        /// </summary>
		[Description("Torque at which yield occurs.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("TqYield")]
        public MomentOfForceMeasure TorqueYield {
            get {
                return TqYieldField;
            } 
            set {
                TqYieldField = value;
                NotifyPropertyChanged("TorqueYield");
            }
        }

        private MomentOfForceMeasure TqYieldField; 

        /// <summary>
        /// StressFatigue property
        /// </summary>
		[Description("Fatigue endurance limit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("StressFatigue")]
        public PressureMeasure StressFatigue {
            get {
                return StressFatigueField;
            } 
            set {
                StressFatigueField = value;
                NotifyPropertyChanged("StressFatigue");
            }
        }

        private PressureMeasure StressFatigueField; 

        /// <summary>
        /// LenFishneck property
        /// </summary>
		[Description("Fish neck length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LenFishneck")]
        public LengthMeasure LenFishneck {
            get {
                return LenFishneckField;
            } 
            set {
                LenFishneckField = value;
                NotifyPropertyChanged("LenFishneck");
            }
        }

        private LengthMeasure LenFishneckField; 

        /// <summary>
        /// IdFishneck property
        /// </summary>
		[Description("Fish neck inside diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("IdFishneck")]
        public LengthMeasure InnerDiameterFishneck {
            get {
                return IdFishneckField;
            } 
            set {
                IdFishneckField = value;
                NotifyPropertyChanged("InnerDiameterFishneck");
            }
        }

        private LengthMeasure IdFishneckField; 

        /// <summary>
        /// OdFishneck property
        /// </summary>
		[Description("Fish neck outside diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OdFishneck")]
        public LengthMeasure OuterDiameterFishneck {
            get {
                return OdFishneckField;
            } 
            set {
                OdFishneckField = value;
                NotifyPropertyChanged("OuterDiameterFishneck");
            }
        }

        private LengthMeasure OdFishneckField; 

        /// <summary>
        /// Disp property
        /// </summary>
		[Description("Closed end displacement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("Disp")]
        public VolumeMeasure Disp {
            get {
                return DispField;
            } 
            set {
                DispField = value;
                NotifyPropertyChanged("Disp");
            }
        }

        private VolumeMeasure DispField; 

        /// <summary>
        /// PresBurst property
        /// </summary>
		[Description("Burst pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresBurst")]
        public PressureMeasure PresBurst {
            get {
                return PresBurstField;
            } 
            set {
                PresBurstField = value;
                NotifyPropertyChanged("PresBurst");
            }
        }

        private PressureMeasure PresBurstField; 

        /// <summary>
        /// PresCollapse property
        /// </summary>
		[Description("Collapse pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresCollapse")]
        public PressureMeasure PresCollapse {
            get {
                return PresCollapseField;
            } 
            set {
                PresCollapseField = value;
                NotifyPropertyChanged("PresCollapse");
            }
        }

        private PressureMeasure PresCollapseField; 

        /// <summary>
        /// ClassService property
        /// </summary>
		[StringLength(64)]
        [Description("Service class.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ClassService")]
        public string ClassService {
            get {
                return ClassServiceField;
            } 
            set {
                ClassServiceField = value;
                NotifyPropertyChanged("ClassService");
            }
        }

        private string ClassServiceField; 

        /// <summary>
        /// WearWall property
        /// </summary>
		[Description("Wall thickness wear (commonly in percent).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerLengthMeasure")]
		[XmlElement("WearWall")]
        public LengthPerLengthMeasure WearWall {
            get {
                return WearWallField;
            } 
            set {
                WearWallField = value;
                NotifyPropertyChanged("WearWall");
            }
        }

        private LengthPerLengthMeasure WearWallField; 

        /// <summary>
        /// ThickWall property
        /// </summary>
		[Description("Wall thickness.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ThickWall")]
        public LengthMeasure ThickWall {
            get {
                return ThickWallField;
            } 
            set {
                ThickWallField = value;
                NotifyPropertyChanged("ThickWall");
            }
        }

        private LengthMeasure ThickWallField; 

        /// <summary>
        /// ConfigCon property
        /// </summary>
		[Description("Box/Pin configuration.")]
        [EnergisticsDataTypeAttribute(DataType = "BoxPinConfig")]
		[XmlElement("ConfigCon")]
        public BoxPinConfig? ConfigCon {
            get {
                return ConfigConField;
            } 
            set {
                ConfigConField = value;
                 this.ConfigConSpecified = true;
                NotifyPropertyChanged("ConfigCon");
            }
        }

        private BoxPinConfig? ConfigConField; 

        /// <summary>
        /// ConfigConSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ConfigConSpecified {
            get {
                return ConfigConSpecifiedField;
            } 
            set {
                ConfigConSpecifiedField = value;
                NotifyPropertyChanged("ConfigConSpecified");
            }
        }

        private bool ConfigConSpecifiedField; 

        /// <summary>
        /// BendStiffness property
        /// </summary>
		[Description("Bending stiffness of tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerLengthMeasure")]
		[XmlElement("BendStiffness")]
        public ForcePerLengthMeasure BendStiffness {
            get {
                return BendStiffnessField;
            } 
            set {
                BendStiffnessField = value;
                NotifyPropertyChanged("BendStiffness");
            }
        }

        private ForcePerLengthMeasure BendStiffnessField; 

        /// <summary>
        /// AxialStiffness property
        /// </summary>
		[Description("Axial stiffness of tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerLengthMeasure")]
		[XmlElement("AxialStiffness")]
        public ForcePerLengthMeasure AxialStiffness {
            get {
                return AxialStiffnessField;
            } 
            set {
                AxialStiffnessField = value;
                NotifyPropertyChanged("AxialStiffness");
            }
        }

        private ForcePerLengthMeasure AxialStiffnessField; 

        /// <summary>
        /// TorsionalStiffness property
        /// </summary>
		[Description("Torsional stiffness of tubular.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerLengthMeasure")]
		[XmlElement("TorsionalStiffness")]
        public ForcePerLengthMeasure TorsionalStiffness {
            get {
                return TorsionalStiffnessField;
            } 
            set {
                TorsionalStiffnessField = value;
                NotifyPropertyChanged("TorsionalStiffness");
            }
        }

        private ForcePerLengthMeasure TorsionalStiffnessField; 

        /// <summary>
        /// TypeMaterial property
        /// </summary>
		[Description("Type of material.")]
        [EnergisticsDataTypeAttribute(DataType = "MaterialType")]
		[XmlElement("TypeMaterial")]
        public MaterialType? TypeMaterial {
            get {
                return TypeMaterialField;
            } 
            set {
                TypeMaterialField = value;
                 this.TypeMaterialSpecified = true;
                NotifyPropertyChanged("TypeMaterial");
            }
        }

        private MaterialType? TypeMaterialField; 

        /// <summary>
        /// TypeMaterialSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeMaterialSpecified {
            get {
                return TypeMaterialSpecifiedField;
            } 
            set {
                TypeMaterialSpecifiedField = value;
                NotifyPropertyChanged("TypeMaterialSpecified");
            }
        }

        private bool TypeMaterialSpecifiedField; 

        /// <summary>
        /// DoglegMx property
        /// </summary>
		[Description("Maximum dogleg severity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerLengthMeasure")]
		[XmlElement("DoglegMx")]
        public AnglePerLengthMeasure DoglegMax {
            get {
                return DoglegMxField;
            } 
            set {
                DoglegMxField = value;
                NotifyPropertyChanged("DoglegMax");
            }
        }

        private AnglePerLengthMeasure DoglegMxField; 

        /// <summary>
        /// Vendor property
        /// </summary>
		[StringLength(64)]
        [Description("Name of vendor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Vendor")]
        public string Vendor {
            get {
                return VendorField;
            } 
            set {
                VendorField = value;
                NotifyPropertyChanged("Vendor");
            }
        }

        private string VendorField; 

        /// <summary>
        /// Model property
        /// </summary>
		[StringLength(64)]
        [Description("Component name from manufacturer.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Model")]
        public string Model {
            get {
                return ModelField;
            } 
            set {
                ModelField = value;
                NotifyPropertyChanged("Model");
            }
        }

        private string ModelField; 

        /// <summary>
        /// NameTag property
        /// </summary>
		[Description("An identification tag for the component tool. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag; it does not describe the contents.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameTag")]
		[XmlElement("NameTag")]
        public List<NameTag> NameTag {
            get {
                return NameTagField;
            } 
            set {
                NameTagField = value;
                NotifyPropertyChanged("NameTag");
            }
        }

         /// <summary>
         /// bool to indicate if NameTag has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameTagSpecified
         {
             get {
             if(NameTagField!=null)
                 return NameTagField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameTag> NameTagField; 

        /// <summary>
        /// AreaNozzleFlow property
        /// </summary>
		[Description("Total area of nozzles.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AreaMeasure")]
		[XmlElement("AreaNozzleFlow")]
        public AreaMeasure AreaNozzleFlow {
            get {
                return AreaNozzleFlowField;
            } 
            set {
                AreaNozzleFlowField = value;
                NotifyPropertyChanged("AreaNozzleFlow");
            }
        }

        private AreaMeasure AreaNozzleFlowField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Connection property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Connection")]
		[XmlElement("Connection")]
        public List<Connection> Connection {
            get {
                return ConnectionField;
            } 
            set {
                ConnectionField = value;
                NotifyPropertyChanged("Connection");
            }
        }

         /// <summary>
         /// bool to indicate if Connection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectionSpecified
         {
             get {
             if(ConnectionField!=null)
                 return ConnectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<Connection> ConnectionField; 

        /// <summary>
        /// Jar property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Jar")]
		[XmlElement("Jar")]
        public Jar Jar {
            get {
                return JarField;
            } 
            set {
                JarField = value;
                NotifyPropertyChanged("Jar");
            }
        }

        private Jar JarField; 

        /// <summary>
        /// MwdTool property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MwdTool")]
		[XmlElement("MwdTool")]
        public MwdTool MwdTool {
            get {
                return MwdToolField;
            } 
            set {
                MwdToolField = value;
                NotifyPropertyChanged("MwdTool");
            }
        }

        private MwdTool MwdToolField; 

        /// <summary>
        /// BitRecord property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "BitRecord")]
		[XmlElement("BitRecord")]
        public BitRecord BitRecord {
            get {
                return BitRecordField;
            } 
            set {
                BitRecordField = value;
                NotifyPropertyChanged("BitRecord");
            }
        }

        private BitRecord BitRecordField; 

        /// <summary>
        /// Motor property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Motor")]
		[XmlElement("Motor")]
        public Motor Motor {
            get {
                return MotorField;
            } 
            set {
                MotorField = value;
                NotifyPropertyChanged("Motor");
            }
        }

        private Motor MotorField; 

        /// <summary>
        /// Stabilizer property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Stabilizer")]
		[XmlElement("Stabilizer")]
        public List<Stabilizer> Stabilizer {
            get {
                return StabilizerField;
            } 
            set {
                StabilizerField = value;
                NotifyPropertyChanged("Stabilizer");
            }
        }

         /// <summary>
         /// bool to indicate if Stabilizer has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StabilizerSpecified
         {
             get {
             if(StabilizerField!=null)
                 return StabilizerField.Count>0?true:false;
             else return false;
             }
         }
        private List<Stabilizer> StabilizerField; 

        /// <summary>
        /// Bend property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Bend")]
		[XmlElement("Bend")]
        public List<Bend> Bend {
            get {
                return BendField;
            } 
            set {
                BendField = value;
                NotifyPropertyChanged("Bend");
            }
        }

         /// <summary>
         /// bool to indicate if Bend has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BendSpecified
         {
             get {
             if(BendField!=null)
                 return BendField.Count>0?true:false;
             else return false;
             }
         }
        private List<Bend> BendField; 

        /// <summary>
        /// HoleOpener property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "HoleOpener")]
		[XmlElement("HoleOpener")]
        public HoleOpener HoleOpener {
            get {
                return HoleOpenerField;
            } 
            set {
                HoleOpenerField = value;
                NotifyPropertyChanged("HoleOpener");
            }
        }

        private HoleOpener HoleOpenerField; 

        /// <summary>
        /// RotarySteerableTool property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RotarySteerableTool")]
		[XmlElement("RotarySteerableTool")]
        public RotarySteerableTool RotarySteerableTool {
            get {
                return RotarySteerableToolField;
            } 
            set {
                RotarySteerableToolField = value;
                NotifyPropertyChanged("RotarySteerableTool");
            }
        }

        private RotarySteerableTool RotarySteerableToolField; 

        /// <summary>
        /// ExtensionAny property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("ExtensionAny")]
        public CustomData ExtensionAny {
            get {
                return ExtensionAnyField;
            } 
            set {
                ExtensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private CustomData ExtensionAnyField; 

        /// <summary>
        /// Nozzle property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Nozzle")]
		[XmlElement("Nozzle")]
        public List<Nozzle> Nozzle {
            get {
                return NozzleField;
            } 
            set {
                NozzleField = value;
                NotifyPropertyChanged("Nozzle");
            }
        }

         /// <summary>
         /// bool to indicate if Nozzle has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NozzleSpecified
         {
             get {
             if(NozzleField!=null)
                 return NozzleField.Count>0?true:false;
             else return false;
             }
         }
        private List<Nozzle> NozzleField; 

		/// <summary>
        /// Unique identifier for this instance of TubularComponent
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of TubularComponent")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RefWellboreRig xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RefWellboreRig", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RefWellboreRig xsd type.")]
    public partial class RefWellboreRig : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the rig with which there is a relationship.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer to the rig with which there is a relationship.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RigReference")]
        public string RigReference {
            get {
                return RigReferenceField;
            } 
            set {
                RigReferenceField = value;
                NotifyPropertyChanged("RigReference");
            }
        }

        private string RigReferenceField; 

        /// <summary>
        /// A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the context of a common parent wellbore.
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the  context of a common parent wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WellboreParent")]
        public string WellboreParent {
            get {
                return WellboreParentField;
            } 
            set {
                WellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private string WellboreParentField; 

        /// <summary>
        /// A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the  context of a common parent well.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WellParent")]
        public string WellParent {
            get {
                return WellParentField;
            } 
            set {
                WellParentField = value;
                NotifyPropertyChanged("WellParent");
            }
        }

        private string WellParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RefWellbore xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RefWellbore", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the RefWellbore xsd type.")]
    public partial class RefWellbore : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer the wellbore with which there is a relationship.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A pointer the wellbore with which there is a relationship.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WellboreReference")]
        public string WellboreReference {
            get {
                return WellboreReferenceField;
            } 
            set {
                WellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private string WellboreReferenceField; 

        /// <summary>
        /// A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the  context of a common parent well.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WellParent")]
        public string WellParent {
            get {
                return WellParentField;
            } 
            set {
                WellParentField = value;
                NotifyPropertyChanged("WellParent");
            }
        }

        private string WellParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellDatum xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellDatum", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the WellDatum xsd type.")]
    public partial class WellDatum : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The human-understandable contextual name of the reference datum.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Code property
        /// </summary>
		[Description("The code value that represents the type of reference datum. This may represent a point on a device (e.g., kelly bushing) or it may represent a vertical reference datum (e.g., mean sea level).")]
        [EnergisticsDataTypeAttribute(DataType = "WellboreDatumReference")]
		[XmlElement("Code")]
        public WellboreDatumReference? Code {
            get {
                return CodeField;
            } 
            set {
                CodeField = value;
                 this.CodeSpecified = true;
                NotifyPropertyChanged("Code");
            }
        }

        private WellboreDatumReference? CodeField; 

        /// <summary>
        /// CodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CodeSpecified {
            get {
                return CodeSpecifiedField;
            } 
            set {
                CodeSpecifiedField = value;
                NotifyPropertyChanged("CodeSpecified");
            }
        }

        private bool CodeSpecifiedField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[Description("Because various activities may use different points as measurement datums, it is useful to characterize the point based on its usage. A well reference datum may have more than one such characterization. For example, it may be the datum used by the driller and logger for measuring their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Kind")]
        public List<string> Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

         /// <summary>
         /// bool to indicate if Kind has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KindSpecified
         {
             get {
             if(KindField!=null)
                 return KindField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> KindField; 

        /// <summary>
        /// MeasuredDepth property
        /// </summary>
		[Description("The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is \"downhole\", such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a depth is given, then an elevation should also be given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MeasuredDepth")]
        public MeasuredDepthCoord MeasuredDepth {
            get {
                return MeasuredDepthField;
            } 
            set {
                MeasuredDepthField = value;
                NotifyPropertyChanged("MeasuredDepth");
            }
        }

        private MeasuredDepthCoord MeasuredDepthField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("A contextual description of the well reference datum.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RefWellbore")]
		[XmlElement("Wellbore")]
        public RefWellbore Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private RefWellbore WellboreField; 

        /// <summary>
        /// Rig property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RefWellboreRig")]
		[XmlElement("Rig")]
        public RefWellboreRig Rig {
            get {
                return RigField;
            } 
            set {
                RigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private RefWellboreRig RigField; 

        /// <summary>
        /// Elevation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellElevationCoord")]
		[XmlElement("Elevation")]
        public WellElevationCoord Elevation {
            get {
                return ElevationField;
            } 
            set {
                ElevationField = value;
                NotifyPropertyChanged("Elevation");
            }
        }

        private WellElevationCoord ElevationField; 

        /// <summary>
        /// HorizontalLocation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractWellLocation")]
		[XmlElement("HorizontalLocation")]
        public AbstractWellLocation HorizontalLocation {
            get {
                return HorizontalLocationField;
            } 
            set {
                HorizontalLocationField = value;
                NotifyPropertyChanged("HorizontalLocation");
            }
        }

        private AbstractWellLocation HorizontalLocationField; 

        /// <summary>
        /// Points to one of the optional for a geodetic vertical CRS, Allows the datum to be positioned in real-world space.l
        /// </summary>
		[Required]
        [Description("Points to one of the optional for a geodetic vertical CRS, Allows the datum to be positioned in real-world space.l")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractVerticalCrs")]
		[XmlElement("Crs")]
        public AbstractVerticalCrs Crs {
            get {
                return CrsField;
            } 
            set {
                CrsField = value;
                NotifyPropertyChanged("Crs");
            }
        }

        private AbstractVerticalCrs CrsField; 

		/// <summary>
        /// A unique identifier for an instance of a well datum.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for an instance of a well datum.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractVerticalCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalEpsgCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalUnknownCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractVerticalCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractVerticalCrs xsd type.")]
    public abstract partial class AbstractVerticalCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalWktCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalWktCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalWktCrs xsd type.")]
    public partial class VerticalWktCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// WellKnownText property
        /// </summary>
		[Required]
        [Description("ISO 19162 compliant well known text of the CRS")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("WellKnownText")]
        public string WellKnownText {
            get {
                return WellKnownTextField;
            } 
            set {
                WellKnownTextField = value;
                NotifyPropertyChanged("WellKnownText");
            }
        }

        private string WellKnownTextField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalGmlCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalGmlCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalGmlCrs xsd type.")]
    public partial class VerticalGmlCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlVerticalCrsDefinition property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VerticalCRSType")]
		[XmlElement("GmlVerticalCrsDefinition")]
        public VerticalCRSType GmlVerticalCrsDefinition {
            get {
                return GmlVerticalCrsDefinitionField;
            } 
            set {
                GmlVerticalCrsDefinitionField = value;
                NotifyPropertyChanged("GmlVerticalCrsDefinition");
            }
        }

        private VerticalCRSType GmlVerticalCrsDefinitionField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalLocalAuthorityCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalLocalAuthorityCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalLocalAuthorityCrs xsd type.")]
    public partial class VerticalLocalAuthorityCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// LocalAuthorityCrsName property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AuthorityQualifiedName")]
		[XmlElement("LocalAuthorityCrsName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return LocalAuthorityCrsNameField;
            } 
            set {
                LocalAuthorityCrsNameField = value;
                NotifyPropertyChanged("LocalAuthorityCrsName");
            }
        }

        private AuthorityQualifiedName LocalAuthorityCrsNameField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalEpsgCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalEpsgCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalEpsgCrs xsd type.")]
    public partial class VerticalEpsgCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("EpsgCode")]
        public long? EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private long? EpsgCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalUnknownCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalUnknownCrs xsd type.")]
    public partial class VerticalUnknownCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Unknown")]
        public string Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private string UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ReferencePoint xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ReferencePoint", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the ReferencePoint xsd type.")]
    public partial class ReferencePoint : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human-recognizable context for the point.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Type property
        /// </summary>
		[StringLength(64)]
        [Description("The kind of point. For example,  'well reference point', 'platform reference point', 'sea surface', 'sea bottom'.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// MeasuredDepth property
        /// </summary>
		[Description("The measured depth coordinate of this reference point. Value is positive when moving toward the bottomhole from the measured depth datum. Provide a value for this when the reference is \"downhole\", such as an ocean-bottom template, or when the reference point is also used as a vertical well datum. The measured depth value can be used to determine if the reference pointand a vertical well datum are at the same point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MeasuredDepth")]
        public MeasuredDepthCoord MeasuredDepth {
            get {
                return MeasuredDepthField;
            } 
            set {
                MeasuredDepthField = value;
                NotifyPropertyChanged("MeasuredDepth");
            }
        }

        private MeasuredDepthCoord MeasuredDepthField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("A textual description of the point.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// ExtensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("ExtensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return ExtensionNameValueField;
            } 
            set {
                ExtensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(ExtensionNameValueField!=null)
                 return ExtensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ExtensionNameValueField; 

        /// <summary>
        /// Elevation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellElevationCoord")]
		[XmlElement("Elevation")]
        public WellElevationCoord Elevation {
            get {
                return ElevationField;
            } 
            set {
                ElevationField = value;
                NotifyPropertyChanged("Elevation");
            }
        }

        private WellElevationCoord ElevationField; 

        /// <summary>
        /// Location property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractWellLocation")]
		[XmlElement("Location")]
        public List<AbstractWellLocation> Location {
            get {
                return LocationField;
            } 
            set {
                LocationField = value;
                NotifyPropertyChanged("Location");
            }
        }

         /// <summary>
         /// bool to indicate if Location has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LocationSpecified
         {
             get {
             if(LocationField!=null)
                 return LocationField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractWellLocation> LocationField; 

		/// <summary>
        /// A unique identifier for an instance of a ReferencePoint.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A unique identifier for an instance of a ReferencePoint.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DistanceEastWest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DistanceEastWest", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DistanceEastWest xsd type.")]
    public partial class DistanceEastWest : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DistanceEastWest class.
        /// </summary>
        public DistanceEastWest() {}

        /// <summary>
        /// Initializes a new instance of the DistanceEastWest class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DistanceEastWest(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the east-west distance.
        /// </summary>
		[Required]
        [Description("The unit of measure of the east-west distance.")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

		/// <summary>
        /// East or west direction.
        /// </summary>
		[Required]
        [Description("East or west direction.")]
        [EnergisticsDataTypeAttribute(DataType = "EastOrWest")]
        [XmlAttribute("reference")]
		
        public EastOrWest Reference {
            get {
                return referenceField;
            } 
            set {
                referenceField = value;
                NotifyPropertyChanged("Reference");
            }
        }

        private EastOrWest referenceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DistanceNorthSouth xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DistanceNorthSouth", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the DistanceNorthSouth xsd type.")]
    public partial class DistanceNorthSouth : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DistanceNorthSouth class.
        /// </summary>
        public DistanceNorthSouth() {}

        /// <summary>
        /// Initializes a new instance of the DistanceNorthSouth class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DistanceNorthSouth(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the north-south distance.
        /// </summary>
		[Required]
        [Description("The unit of measure of the north-south distance.")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

		/// <summary>
        /// North or south direction.
        /// </summary>
		[Required]
        [Description("North or south direction.")]
        [EnergisticsDataTypeAttribute(DataType = "NorthOrSouth")]
        [XmlAttribute("reference")]
		
        public NorthOrSouth Reference {
            get {
                return referenceField;
            } 
            set {
                referenceField = value;
                NotifyPropertyChanged("Reference");
            }
        }

        private NorthOrSouth referenceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PublicLandSurveySystem xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PublicLandSurveySystem", Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
	[Description("This class represents the PublicLandSurveySystem xsd type.")]
    public partial class PublicLandSurveySystem : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PrincipalMeridian property
        /// </summary>
		[Description("Principal meridian for this location.")]
        [EnergisticsDataTypeAttribute(DataType = "PrincipalMeridian")]
		[XmlElement("PrincipalMeridian")]
        public PrincipalMeridian? PrincipalMeridian {
            get {
                return PrincipalMeridianField;
            } 
            set {
                PrincipalMeridianField = value;
                 this.PrincipalMeridianSpecified = true;
                NotifyPropertyChanged("PrincipalMeridian");
            }
        }

        private PrincipalMeridian? PrincipalMeridianField; 

        /// <summary>
        /// PrincipalMeridianSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PrincipalMeridianSpecified {
            get {
                return PrincipalMeridianSpecifiedField;
            } 
            set {
                PrincipalMeridianSpecifiedField = value;
                NotifyPropertyChanged("PrincipalMeridianSpecified");
            }
        }

        private bool PrincipalMeridianSpecifiedField; 

        /// <summary>
        /// Range property
        /// </summary>
		[Description("Range number.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Range")]
        public int? Range {
            get {
                return RangeField;
            } 
            set {
                RangeField = value;
                 this.RangeSpecified = true;
                NotifyPropertyChanged("Range");
            }
        }

        private int? RangeField; 

        /// <summary>
        /// RangeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RangeSpecified {
            get {
                return RangeSpecifiedField;
            } 
            set {
                RangeSpecifiedField = value;
                NotifyPropertyChanged("RangeSpecified");
            }
        }

        private bool RangeSpecifiedField; 

        /// <summary>
        /// RangeDir property
        /// </summary>
		[Description("Range direction.")]
        [EnergisticsDataTypeAttribute(DataType = "EastOrWest")]
		[XmlElement("RangeDir")]
        public EastOrWest? RangeDir {
            get {
                return RangeDirField;
            } 
            set {
                RangeDirField = value;
                 this.RangeDirSpecified = true;
                NotifyPropertyChanged("RangeDir");
            }
        }

        private EastOrWest? RangeDirField; 

        /// <summary>
        /// RangeDirSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RangeDirSpecified {
            get {
                return RangeDirSpecifiedField;
            } 
            set {
                RangeDirSpecifiedField = value;
                NotifyPropertyChanged("RangeDirSpecified");
            }
        }

        private bool RangeDirSpecifiedField; 

        /// <summary>
        /// Township property
        /// </summary>
		[Description("Township number.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("Township")]
        public int? Township {
            get {
                return TownshipField;
            } 
            set {
                TownshipField = value;
                 this.TownshipSpecified = true;
                NotifyPropertyChanged("Township");
            }
        }

        private int? TownshipField; 

        /// <summary>
        /// TownshipSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TownshipSpecified {
            get {
                return TownshipSpecifiedField;
            } 
            set {
                TownshipSpecifiedField = value;
                NotifyPropertyChanged("TownshipSpecified");
            }
        }

        private bool TownshipSpecifiedField; 

        /// <summary>
        /// TownshipDir property
        /// </summary>
		[Description("Township direction.")]
        [EnergisticsDataTypeAttribute(DataType = "NorthOrSouth")]
		[XmlElement("TownshipDir")]
        public NorthOrSouth? TownshipDir {
            get {
                return TownshipDirField;
            } 
            set {
                TownshipDirField = value;
                 this.TownshipDirSpecified = true;
                NotifyPropertyChanged("TownshipDir");
            }
        }

        private NorthOrSouth? TownshipDirField; 

        /// <summary>
        /// TownshipDirSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TownshipDirSpecified {
            get {
                return TownshipDirSpecifiedField;
            } 
            set {
                TownshipDirSpecifiedField = value;
                NotifyPropertyChanged("TownshipDirSpecified");
            }
        }

        private bool TownshipDirSpecifiedField; 

        /// <summary>
        /// Section property
        /// </summary>
		[RegularExpression("[+]?([1-9]|[1-2][0-9]|3[0-6])\\.?[0-9]?")]
        [StringLength(64)]
        [Description("Section number.")]
        [EnergisticsDataTypeAttribute(DataType = "SectionNumber")]
		[XmlElement("Section")]
        public string Section {
            get {
                return SectionField;
            } 
            set {
                SectionField = value;
                NotifyPropertyChanged("Section");
            }
        }

        private string SectionField; 

        /// <summary>
        /// QuarterSection property
        /// </summary>
		[RegularExpression("(NE|NW|SW|SE|N2|S2|E2|W2|C|LT[0-9]{2,2}|TR[a-zA-Z0-9]{1,2}){1,3}")]
        [StringLength(64)]
        [Description("The location of the well within the section, with the primary component listed first. Spot location will be made from a combinationof the following codes: NE, NW, SW, SE, N2, S2, E2, W2, C (center quarter), LTxx (where xx represents a two digit lot designation), TRzz (where zz represents a one or two character trac designation).  Free format allows for entries such as NESW (southwest quarter of northeast quarter), E2NESE (southeast quarter of northeast quarter of east half), CNE (northeast quarter of center quarter), etc.")]
        [EnergisticsDataTypeAttribute(DataType = "PublicLandSurveySystemQuarterSection")]
		[XmlElement("QuarterSection")]
        public string QuarterSection {
            get {
                return QuarterSectionField;
            } 
            set {
                QuarterSectionField = value;
                NotifyPropertyChanged("QuarterSection");
            }
        }

        private string QuarterSectionField; 

        /// <summary>
        /// QuarterTownship property
        /// </summary>
		[RegularExpression("NE|NW|SW|SE")]
        [StringLength(64)]
        [Description("Quarter township.")]
        [EnergisticsDataTypeAttribute(DataType = "PublicLandSurveySystemQuarterTownship")]
		[XmlElement("QuarterTownship")]
        public string QuarterTownship {
            get {
                return QuarterTownshipField;
            } 
            set {
                QuarterTownshipField = value;
                NotifyPropertyChanged("QuarterTownship");
            }
        }

        private string QuarterTownshipField; 

        /// <summary>
        /// FootageNS property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DistanceNorthSouth")]
		[XmlElement("FootageNS")]
        public DistanceNorthSouth FootageNS {
            get {
                return FootageNSField;
            } 
            set {
                FootageNSField = value;
                NotifyPropertyChanged("FootageNS");
            }
        }

        private DistanceNorthSouth FootageNSField; 

        /// <summary>
        /// FootageEW property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DistanceEastWest")]
		[XmlElement("FootageEW")]
        public DistanceEastWest FootageEW {
            get {
                return FootageEWField;
            } 
            set {
                FootageEWField = value;
                NotifyPropertyChanged("FootageEW");
            }
        }

        private DistanceEastWest FootageEWField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractGraphicalInformation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractGraphicalInformation", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractGraphicalInformation xsd type.")]
    public abstract partial class AbstractGraphicalInformation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// TargetObject property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TargetObject")]
        public DataObjectReference TargetObject {
            get {
                return TargetObjectField;
            } 
            set {
                TargetObjectField = value;
                NotifyPropertyChanged("TargetObject");
            }
        }

        private DataObjectReference TargetObjectField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IndexRange xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IndexRange", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IndexRange xsd type.")]
    public partial class IndexRange : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// IndexMinimum property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The minimum index for the range over which the referenced data's conformance with the policy is being assessed.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("IndexMinimum")]
        public string IndexMinimum {
            get {
                return IndexMinimumField;
            } 
            set {
                IndexMinimumField = value;
                NotifyPropertyChanged("IndexMinimum");
            }
        }

        private string IndexMinimumField; 

        /// <summary>
        /// IndexMaximum property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The maximum index for the range over which the referenced data's conformance with the policy is being assessed.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("IndexMaximum")]
        public string IndexMaximum {
            get {
                return IndexMaximumField;
            } 
            set {
                IndexMaximumField = value;
                NotifyPropertyChanged("IndexMaximum");
            }
        }

        private string IndexMaximumField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FailingRule xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FailingRule", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the FailingRule xsd type.")]
    public partial class FailingRule : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// RuleId property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Identifier of the atomic rule being checked against the data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RuleId")]
        public string RuleId {
            get {
                return RuleIdField;
            } 
            set {
                RuleIdField = value;
                NotifyPropertyChanged("RuleId");
            }
        }

        private string RuleIdField; 

        /// <summary>
        /// RuleName property
        /// </summary>
		[StringLength(2000)]
        [Description("Human-readable name of the atomic rule being checked against the data.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("RuleName")]
        public string RuleName {
            get {
                return RuleNameField;
            } 
            set {
                RuleNameField = value;
                NotifyPropertyChanged("RuleName");
            }
        }

        private string RuleNameField; 

        /// <summary>
        /// Severity property
        /// </summary>
		[StringLength(64)]
        [Description("Severity of the failure. This could be used to indicate that a rule is a high-priority rule whose failure is considered as severe or could be used to indicate just how badly a rule was contravened.  The meaning of this field should be standardized within a company to maximize its utility.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Severity")]
        public string Severity {
            get {
                return SeverityField;
            } 
            set {
                SeverityField = value;
                NotifyPropertyChanged("Severity");
            }
        }

        private string SeverityField; 

        /// <summary>
        /// FailingRuleExtensions property
        /// </summary>
		[Description("This allows extending the FailingRule class with as many arbitrary name-value pairs as is required at run-time.  Uses for this might include why the rule failed or by how much.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("FailingRuleExtensions")]
        public List<ExtensionNameValue> FailingRuleExtensions {
            get {
                return FailingRuleExtensionsField;
            } 
            set {
                FailingRuleExtensionsField = value;
                NotifyPropertyChanged("FailingRuleExtensions");
            }
        }

         /// <summary>
         /// bool to indicate if FailingRuleExtensions has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FailingRuleExtensionsSpecified
         {
             get {
             if(FailingRuleExtensionsField!=null)
                 return FailingRuleExtensionsField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> FailingRuleExtensionsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ParameterTemplate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ParameterTemplate", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ParameterTemplate xsd type.")]
    public partial class ParameterTemplate : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AllowedKind property
        /// </summary>
		[Description("If no allowed type is given, then all kind of datatypes is allowed.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ParameterKind")]
		[XmlElement("AllowedKind")]
        public List<ParameterKind> AllowedKind {
            get {
                return AllowedKindField;
            } 
            set {
                AllowedKindField = value;
                NotifyPropertyChanged("AllowedKind");
            }
        }

         /// <summary>
         /// bool to indicate if AllowedKind has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AllowedKindSpecified
         {
             get {
             if(AllowedKindField!=null)
                 return AllowedKindField.Count>0?true:false;
             else return false;
             }
         }
        private List<ParameterKind> AllowedKindField; 

        /// <summary>
        /// IsInput property
        /// </summary>
		[Required]
        [Description("Indicates if the parameter is an input of the activity. If the parameter is a data object and is also an output of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsInput")]
        public bool? IsInput {
            get {
                return IsInputField;
            } 
            set {
                IsInputField = value;
                NotifyPropertyChanged("IsInput");
            }
        }

        private bool? IsInputField; 

        /// <summary>
        /// KeyConstraint property
        /// </summary>
		[Description("Allows to indicate that, in the same activity, this parameter template must be associated to another parameter template identified by its title.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("KeyConstraint")]
        public List<string> KeyConstraint {
            get {
                return KeyConstraintField;
            } 
            set {
                KeyConstraintField = value;
                NotifyPropertyChanged("KeyConstraint");
            }
        }

         /// <summary>
         /// bool to indicate if KeyConstraint has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KeyConstraintSpecified
         {
             get {
             if(KeyConstraintField!=null)
                 return KeyConstraintField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> KeyConstraintField; 

        /// <summary>
        /// IsOutput property
        /// </summary>
		[Required]
        [Description("Indicates if the parameter is an output of the activity. If the parameter is a data object and is also an input of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsOutput")]
        public bool? IsOutput {
            get {
                return IsOutputField;
            } 
            set {
                IsOutputField = value;
                NotifyPropertyChanged("IsOutput");
            }
        }

        private bool? IsOutputField; 

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Name of the parameter in the activity. Key to identify parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Title")]
        public string Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private string TitleField; 

        /// <summary>
        /// DataObjectContentType property
        /// </summary>
		[StringLength(2000)]
        [Description("When parameter is limited to data object of given types, describe the allowed types. Used only when ParameterType is dataObject")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("DataObjectContentType")]
        public string DataObjectContentType {
            get {
                return DataObjectContentTypeField;
            } 
            set {
                DataObjectContentTypeField = value;
                NotifyPropertyChanged("DataObjectContentType");
            }
        }

        private string DataObjectContentTypeField; 

        /// <summary>
        /// MaxOccurs property
        /// </summary>
		[Required]
        [Description("Maximum number of parameters of this type allowed in the activity. If the maximum number of parameters is infinite, use -1 value.")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("MaxOccurs")]
        public long? MaxOccurs {
            get {
                return MaxOccursField;
            } 
            set {
                MaxOccursField = value;
                NotifyPropertyChanged("MaxOccurs");
            }
        }

        private long? MaxOccursField; 

        /// <summary>
        /// MinOccurs property
        /// </summary>
		[Required]
        [Description("Minimum number of parameter of this type required by the activity. If the minimum number of parameters is infinite, use -1 value.")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("MinOccurs")]
        public long? MinOccurs {
            get {
                return MinOccursField;
            } 
            set {
                MinOccursField = value;
                NotifyPropertyChanged("MinOccurs");
            }
        }

        private long? MinOccursField; 

        /// <summary>
        /// Constraint property
        /// </summary>
		[StringLength(2000)]
        [Description("Textual description of additional constraint associated with the parameter. (note that it will be better to have a formal description of the constraint)")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Constraint")]
        public string Constraint {
            get {
                return ConstraintField;
            } 
            set {
                ConstraintField = value;
                NotifyPropertyChanged("Constraint");
            }
        }

        private string ConstraintField; 

        /// <summary>
        /// DefaultValue property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractActivityParameter")]
		[XmlElement("DefaultValue")]
        public List<AbstractActivityParameter> DefaultValue {
            get {
                return DefaultValueField;
            } 
            set {
                DefaultValueField = value;
                NotifyPropertyChanged("DefaultValue");
            }
        }

         /// <summary>
         /// bool to indicate if DefaultValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DefaultValueSpecified
         {
             get {
             if(DefaultValueField!=null)
                 return DefaultValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractActivityParameter> DefaultValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractActivityParameter xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataObjectParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerQuantityParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleQuantityParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexParameter))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractActivityParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractActivityParameter xsd type.")]
    public abstract partial class AbstractActivityParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Name of the parameter, used to identify it in the activity. Must have an equivalent in the activity descriptor parameters.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Title")]
        public string Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private string TitleField; 

        /// <summary>
        /// Index property
        /// </summary>
		[Description("When parameter is an array, used to indicate the index in the array")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("Index")]
        public long? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private long? IndexField; 

        /// <summary>
        /// IndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexSpecified {
            get {
                return IndexSpecifiedField;
            } 
            set {
                IndexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private bool IndexSpecifiedField; 

        /// <summary>
        /// Selection property
        /// </summary>
		[StringLength(2000)]
        [Description("Textual description about how this parameter was selected.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Selection")]
        public string Selection {
            get {
                return SelectionField;
            } 
            set {
                SelectionField = value;
                NotifyPropertyChanged("Selection");
            }
        }

        private string SelectionField; 

        /// <summary>
        /// Key property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractParameterKey")]
		[XmlElement("Key")]
        public List<AbstractParameterKey> Key {
            get {
                return KeyField;
            } 
            set {
                KeyField = value;
                NotifyPropertyChanged("Key");
            }
        }

         /// <summary>
         /// bool to indicate if Key has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KeySpecified
         {
             get {
             if(KeyField!=null)
                 return KeyField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractParameterKey> KeyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractParameterKey xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ObjectParameterKey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexParameterKey))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractParameterKey", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractParameterKey xsd type.")]
    public abstract partial class AbstractParameterKey : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ObjectParameterKey xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ObjectParameterKey", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ObjectParameterKey xsd type.")]
    public partial class ObjectParameterKey : AbstractParameterKey, INotifyPropertyChanged
    {

        /// <summary>
        /// DataObject property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("DataObject")]
        public DataObjectReference DataObject {
            get {
                return DataObjectField;
            } 
            set {
                DataObjectField = value;
                NotifyPropertyChanged("DataObject");
            }
        }

        private DataObjectReference DataObjectField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeIndexParameterKey xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeIndexParameterKey", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeIndexParameterKey xsd type.")]
    public partial class TimeIndexParameterKey : AbstractParameterKey, INotifyPropertyChanged
    {

        /// <summary>
        /// TimeIndex property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return TimeIndexField;
            } 
            set {
                TimeIndexField = value;
                NotifyPropertyChanged("TimeIndex");
            }
        }

        private TimeIndex TimeIndexField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeIndex xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeIndex", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeIndex xsd type.")]
    public partial class TimeIndex : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("The index of the time in the time series.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("Index")]
        public long? Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private long? IndexField; 

        /// <summary>
        /// TimeSeries property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TimeSeries")]
        public DataObjectReference TimeSeries {
            get {
                return TimeSeriesField;
            } 
            set {
                TimeSeriesField = value;
                NotifyPropertyChanged("TimeSeries");
            }
        }

        private DataObjectReference TimeSeriesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DataObjectParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DataObjectParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DataObjectParameter xsd type.")]
    public partial class DataObjectParameter : AbstractActivityParameter, INotifyPropertyChanged
    {

        /// <summary>
        /// DataObject property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("DataObject")]
        public DataObjectReference DataObject {
            get {
                return DataObjectField;
            } 
            set {
                DataObjectField = value;
                NotifyPropertyChanged("DataObject");
            }
        }

        private DataObjectReference DataObjectField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the StringParameter xsd type.")]
    public partial class StringParameter : AbstractActivityParameter, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringParameter class.
        /// </summary>
        public StringParameter() {}

        /// <summary>
        /// Initializes a new instance of the StringParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public StringParameter(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("String value")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Value")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerQuantityParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerQuantityParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the IntegerQuantityParameter xsd type.")]
    public partial class IntegerQuantityParameter : AbstractActivityParameter, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IntegerQuantityParameter class.
        /// </summary>
        public IntegerQuantityParameter() {}

        /// <summary>
        /// Initializes a new instance of the IntegerQuantityParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IntegerQuantityParameter(long value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("Integer value")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("Value")]
        public long? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private long? ValueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DoubleQuantityParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DoubleQuantityParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DoubleQuantityParameter xsd type.")]
    public partial class DoubleQuantityParameter : AbstractActivityParameter, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DoubleQuantityParameter class.
        /// </summary>
        public DoubleQuantityParameter() {}

        /// <summary>
        /// Initializes a new instance of the DoubleQuantityParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public DoubleQuantityParameter(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("Double value")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Value")]
        public double? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double? ValueField; 

        /// <summary>
        /// Uom property
        /// </summary>
		[Required]
        [Description("Unit of measure associated with the value")]
        [EnergisticsDataTypeAttribute(DataType = "UnitOfMeasureExt")]
		[XmlElement("Uom")]
        public ExtensibleEnum<UnitOfMeasure>? Uom {
            get {
                return UomField;
            } 
            set {
                UomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ExtensibleEnum<UnitOfMeasure>? UomField; 

        /// <summary>
        /// CustomUnitDictionary property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("CustomUnitDictionary")]
        public DataObjectReference CustomUnitDictionary {
            get {
                return CustomUnitDictionaryField;
            } 
            set {
                CustomUnitDictionaryField = value;
                NotifyPropertyChanged("CustomUnitDictionary");
            }
        }

        private DataObjectReference CustomUnitDictionaryField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeIndexParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeIndexParameter", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeIndexParameter xsd type.")]
    public partial class TimeIndexParameter : AbstractActivityParameter, INotifyPropertyChanged
    {

        /// <summary>
        /// TimeIndex property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return TimeIndexField;
            } 
            set {
                TimeIndexField = value;
                NotifyPropertyChanged("TimeIndex");
            }
        }

        private TimeIndex TimeIndexField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeSeriesParentage xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeSeriesParentage", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the TimeSeriesParentage xsd type.")]
    public partial class TimeSeriesParentage : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// HasOverlap property
        /// </summary>
		[Required]
        [Description("Used to indicate that a time series overlaps with its parent time series, e.g., as may be done for simulation studies, where the end state of one calculation is the initial state of the next.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("HasOverlap")]
        public bool? HasOverlap {
            get {
                return HasOverlapField;
            } 
            set {
                HasOverlapField = value;
                NotifyPropertyChanged("HasOverlap");
            }
        }

        private bool? HasOverlapField; 

        /// <summary>
        /// ParentTimeIndex property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("ParentTimeIndex")]
        public TimeIndex ParentTimeIndex {
            get {
                return ParentTimeIndexField;
            } 
            set {
                ParentTimeIndexField = value;
                NotifyPropertyChanged("ParentTimeIndex");
            }
        }

        private TimeIndex ParentTimeIndexField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeologicTime xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeologicTime", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GeologicTime xsd type.")]
    public partial class GeologicTime : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AgeOffsetAttribute property
        /// </summary>
		[Description("A Value in Years of the Age Offset between the DateTime Attribute value and the DateTime of a GeologicalEvent Occurrence. This value must be POSITIVE when it represents a Geological Event in The past.")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("AgeOffsetAttribute")]
        public long? AgeOffsetAttribute {
            get {
                return AgeOffsetAttributeField;
            } 
            set {
                AgeOffsetAttributeField = value;
                 this.AgeOffsetAttributeSpecified = true;
                NotifyPropertyChanged("AgeOffsetAttribute");
            }
        }

        private long? AgeOffsetAttributeField; 

        /// <summary>
        /// AgeOffsetAttributeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AgeOffsetAttributeSpecified {
            get {
                return AgeOffsetAttributeSpecifiedField;
            } 
            set {
                AgeOffsetAttributeSpecifiedField = value;
                NotifyPropertyChanged("AgeOffsetAttributeSpecified");
            }
        }

        private bool AgeOffsetAttributeSpecifiedField; 

        /// <summary>
        /// DateTime property
        /// </summary>
		[Required]
        [Description("A date, which can be represented according to the W3CDTF format.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the WellboreMarkerSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellboreMarkerSet xsd type.")]
    public partial class WellboreMarkerSet : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MarkerSetInterval property
        /// </summary>
		[Required]
        [Description("Measured depth interval that contains the shallowest and deepest formation markers. This is computed by the server and is read only.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MarkerSetInterval")]
        public MdInterval MarkerSetInterval {
            get {
                return MarkerSetIntervalField;
            } 
            set {
                MarkerSetIntervalField = value;
                NotifyPropertyChanged("MarkerSetInterval");
            }
        }

        private MdInterval MarkerSetIntervalField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// FormationMarker property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WellboreMarker")]
		[XmlElement("FormationMarker")]
        public List<WellboreMarker> FormationMarker {
            get {
                return FormationMarkerField;
            } 
            set {
                FormationMarkerField = value;
                NotifyPropertyChanged("FormationMarker");
            }
        }

         /// <summary>
         /// bool to indicate if FormationMarker has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FormationMarkerSpecified
         {
             get {
             if(FormationMarkerField!=null)
                 return FormationMarkerField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellboreMarker> FormationMarkerField; 


    } //here

    /// <summary>
    /// This class represents the WellboreMarker xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellboreMarker xsd type.")]
    public partial class WellboreMarker : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ChronostratigraphicTop property
        /// </summary>
		[Description("The name of a geochronology for this marker, with the \"kind\" attribute specifying the geochronological time span.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeochronologicalUnit")]
		[XmlElement("ChronostratigraphicTop")]
        public GeochronologicalUnit ChronostratigraphicTop {
            get {
                return ChronostratigraphicTopField;
            } 
            set {
                ChronostratigraphicTopField = value;
                NotifyPropertyChanged("ChronostratigraphicTop");
            }
        }

        private GeochronologicalUnit ChronostratigraphicTopField; 

        /// <summary>
        /// LithostratigraphicTop property
        /// </summary>
		[Description("Specifies the unit of lithostratigraphy.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LithostratigraphicUnit")]
		[XmlElement("LithostratigraphicTop")]
        public LithostratigraphicUnit LithostratigraphicTop {
            get {
                return LithostratigraphicTopField;
            } 
            set {
                LithostratigraphicTopField = value;
                NotifyPropertyChanged("LithostratigraphicTop");
            }
        }

        private LithostratigraphicUnit LithostratigraphicTopField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Required]
        [Description("Logged measured depth at the top of marker.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("Logged true vertical depth at top of marker.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// DipAngle property
        /// </summary>
		[Description("Angle of dip with respect to horizontal.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("DipAngle")]
        public PlaneAngleMeasure DipAngle {
            get {
                return DipAngleField;
            } 
            set {
                DipAngleField = value;
                NotifyPropertyChanged("DipAngle");
            }
        }

        private PlaneAngleMeasure DipAngleField; 

        /// <summary>
        /// DipDirection property
        /// </summary>
		[Description("Interpreted downdip direction.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("DipDirection")]
        public PlaneAngleMeasure DipDirection {
            get {
                return DipDirectionField;
            } 
            set {
                DipDirectionField = value;
                NotifyPropertyChanged("DipDirection");
            }
        }

        private PlaneAngleMeasure DipDirectionField; 

        /// <summary>
        /// Trajectory property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Trajectory")]
        public DataObjectReference Trajectory {
            get {
                return TrajectoryField;
            } 
            set {
                TrajectoryField = value;
                NotifyPropertyChanged("Trajectory");
            }
        }

        private DataObjectReference TrajectoryField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the WellboreCompletion xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellboreCompletion xsd type.")]
    public partial class WellboreCompletion : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// NameWellCompletion property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human-recognizable context for the well completion that contains the completion.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameWellCompletion")]
        public string NameWellCompletion {
            get {
                return NameWellCompletionField;
            } 
            set {
                NameWellCompletionField = value;
                NotifyPropertyChanged("NameWellCompletion");
            }
        }

        private string NameWellCompletionField; 

        /// <summary>
        /// WellboreCompletionNo property
        /// </summary>
		[StringLength(64)]
        [Description("CompletionNo, etc. API14.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WellboreCompletionNo")]
        public string WellboreCompletionNo {
            get {
                return WellboreCompletionNoField;
            } 
            set {
                WellboreCompletionNoField = value;
                NotifyPropertyChanged("WellboreCompletionNo");
            }
        }

        private string WellboreCompletionNoField; 

        /// <summary>
        /// WellboreCompletionAlias property
        /// </summary>
		[StringLength(64)]
        [Description("Preferred alias name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WellboreCompletionAlias")]
        public string WellboreCompletionAlias {
            get {
                return WellboreCompletionAliasField;
            } 
            set {
                WellboreCompletionAliasField = value;
                NotifyPropertyChanged("WellboreCompletionAlias");
            }
        }

        private string WellboreCompletionAliasField; 

        /// <summary>
        /// EventHistory property
        /// </summary>
		[Description("The WellboreCompletion event information.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EventInfo")]
		[XmlElement("EventHistory")]
        public List<EventInfo> EventHistory {
            get {
                return EventHistoryField;
            } 
            set {
                EventHistoryField = value;
                NotifyPropertyChanged("EventHistory");
            }
        }

         /// <summary>
         /// bool to indicate if EventHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EventHistorySpecified
         {
             get {
             if(EventHistoryField!=null)
                 return EventHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<EventInfo> EventHistoryField; 

        /// <summary>
        /// WellboreCompletionDate property
        /// </summary>
		[Description("Completion date.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("WellboreCompletionDate")]
        public Timestamp? WellboreCompletionDate {
            get {
                return WellboreCompletionDateField;
            } 
            set {
                WellboreCompletionDateField = value;
                 this.WellboreCompletionDateSpecified = true;
                NotifyPropertyChanged("WellboreCompletionDate");
            }
        }

        
        private bool WellboreCompletionDateSpecifiedField = false;
        
        /// <summary>
        /// WellboreCompletionDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WellboreCompletionDateSpecified {
            get {
                return WellboreCompletionDateSpecifiedField;
            } 
            set {
                WellboreCompletionDateSpecifiedField = value;
                NotifyPropertyChanged("WellboreCompletionDateSpecified");
            }
        }
        
        private Timestamp? WellboreCompletionDateField; 

        /// <summary>
        /// SuffixAPI property
        /// </summary>
		[StringLength(64)]
        [Description("API suffix.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SuffixAPI")]
        public string SuffixAPI {
            get {
                return SuffixAPIField;
            } 
            set {
                SuffixAPIField = value;
                NotifyPropertyChanged("SuffixAPI");
            }
        }

        private string SuffixAPIField; 

        /// <summary>
        /// CompletionMdInterval property
        /// </summary>
		[Description("Overall measured depth interval for this wellbore completion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("CompletionMdInterval")]
        public MdInterval CompletionMDInterval {
            get {
                return CompletionMdIntervalField;
            } 
            set {
                CompletionMdIntervalField = value;
                NotifyPropertyChanged("CompletionMDInterval");
            }
        }

        private MdInterval CompletionMdIntervalField; 

        /// <summary>
        /// CompletionTvdInterval property
        /// </summary>
		[Description("Overall true vertical depth interval for this wellbore completion.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("CompletionTvdInterval")]
        public TvdInterval CompletionTvdInterval {
            get {
                return CompletionTvdIntervalField;
            } 
            set {
                CompletionTvdIntervalField = value;
                NotifyPropertyChanged("CompletionTvdInterval");
            }
        }

        private TvdInterval CompletionTvdIntervalField; 

        /// <summary>
        /// CurrentStatus property
        /// </summary>
		[Description("Status (active, planned, suspended, testing, etc.) of the wellbore completion")]
        [EnergisticsDataTypeAttribute(DataType = "CompletionStatus")]
		[XmlElement("CurrentStatus")]
        public CompletionStatus? CurrentStatus {
            get {
                return CurrentStatusField;
            } 
            set {
                CurrentStatusField = value;
                 this.CurrentStatusSpecified = true;
                NotifyPropertyChanged("CurrentStatus");
            }
        }

        private CompletionStatus? CurrentStatusField; 

        /// <summary>
        /// CurrentStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurrentStatusSpecified {
            get {
                return CurrentStatusSpecifiedField;
            } 
            set {
                CurrentStatusSpecifiedField = value;
                NotifyPropertyChanged("CurrentStatusSpecified");
            }
        }

        private bool CurrentStatusSpecifiedField; 

        /// <summary>
        /// StatusDate property
        /// </summary>
		[Description("Date for when the status was established.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("StatusDate")]
        public Timestamp? StatusDate {
            get {
                return StatusDateField;
            } 
            set {
                StatusDateField = value;
                 this.StatusDateSpecified = true;
                NotifyPropertyChanged("StatusDate");
            }
        }

        
        private bool StatusDateSpecifiedField = false;
        
        /// <summary>
        /// StatusDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusDateSpecified {
            get {
                return StatusDateSpecifiedField;
            } 
            set {
                StatusDateSpecifiedField = value;
                NotifyPropertyChanged("StatusDateSpecified");
            }
        }
        
        private Timestamp? StatusDateField; 

        /// <summary>
        /// StatusHistory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CompletionStatusHistory")]
		[XmlElement("StatusHistory")]
        public List<CompletionStatusHistory> StatusHistory {
            get {
                return StatusHistoryField;
            } 
            set {
                StatusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if StatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusHistorySpecified
         {
             get {
             if(StatusHistoryField!=null)
                 return StatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<CompletionStatusHistory> StatusHistoryField; 

        /// <summary>
        /// ContactIntervalSet property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ContactIntervalSet")]
		[XmlElement("ContactIntervalSet")]
        public ContactIntervalSet ContactIntervalSet {
            get {
                return ContactIntervalSetField;
            } 
            set {
                ContactIntervalSetField = value;
                NotifyPropertyChanged("ContactIntervalSet");
            }
        }

        private ContactIntervalSet ContactIntervalSetField; 

        /// <summary>
        /// ReferenceWellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ReferenceWellbore")]
        public DataObjectReference ReferenceWellbore {
            get {
                return ReferenceWellboreField;
            } 
            set {
                ReferenceWellboreField = value;
                NotifyPropertyChanged("ReferenceWellbore");
            }
        }

        private DataObjectReference ReferenceWellboreField; 

        /// <summary>
        /// WellCompletion property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellCompletion")]
        public DataObjectReference WellCompletion {
            get {
                return WellCompletionField;
            } 
            set {
                WellCompletionField = value;
                NotifyPropertyChanged("WellCompletion");
            }
        }

        private DataObjectReference WellCompletionField; 


    } //here

    /// <summary>
    /// This class represents the WellCompletion xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellCompletion xsd type.")]
    public partial class WellCompletion : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// FieldID property
        /// </summary>
		[StringLength(64)]
        [Description("Field ID.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FieldID")]
        public string FieldID {
            get {
                return FieldIDField;
            } 
            set {
                FieldIDField = value;
                NotifyPropertyChanged("FieldID");
            }
        }

        private string FieldIDField; 

        /// <summary>
        /// FieldCode property
        /// </summary>
		[StringLength(64)]
        [Description("Field code.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FieldCode")]
        public string FieldCode {
            get {
                return FieldCodeField;
            } 
            set {
                FieldCodeField = value;
                NotifyPropertyChanged("FieldCode");
            }
        }

        private string FieldCodeField; 

        /// <summary>
        /// FieldType property
        /// </summary>
		[StringLength(64)]
        [Description("Field type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FieldType")]
        public string FieldType {
            get {
                return FieldTypeField;
            } 
            set {
                FieldTypeField = value;
                NotifyPropertyChanged("FieldType");
            }
        }

        private string FieldTypeField; 

        /// <summary>
        /// EffectiveDate property
        /// </summary>
		[Description("Field date.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("EffectiveDate")]
        public Timestamp? EffectiveDate {
            get {
                return EffectiveDateField;
            } 
            set {
                EffectiveDateField = value;
                 this.EffectiveDateSpecified = true;
                NotifyPropertyChanged("EffectiveDate");
            }
        }

        
        private bool EffectiveDateSpecifiedField = false;
        
        /// <summary>
        /// EffectiveDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EffectiveDateSpecified {
            get {
                return EffectiveDateSpecifiedField;
            } 
            set {
                EffectiveDateSpecifiedField = value;
                NotifyPropertyChanged("EffectiveDateSpecified");
            }
        }
        
        private Timestamp? EffectiveDateField; 

        /// <summary>
        /// ExpiredDate property
        /// </summary>
		[Description("Expiration date.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("ExpiredDate")]
        public Timestamp? ExpiredDate {
            get {
                return ExpiredDateField;
            } 
            set {
                ExpiredDateField = value;
                 this.ExpiredDateSpecified = true;
                NotifyPropertyChanged("ExpiredDate");
            }
        }

        
        private bool ExpiredDateSpecifiedField = false;
        
        /// <summary>
        /// ExpiredDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ExpiredDateSpecified {
            get {
                return ExpiredDateSpecifiedField;
            } 
            set {
                ExpiredDateSpecifiedField = value;
                NotifyPropertyChanged("ExpiredDateSpecified");
            }
        }
        
        private Timestamp? ExpiredDateField; 

        /// <summary>
        /// E_P_RightsID property
        /// </summary>
		[StringLength(64)]
        [Description("Documents exploration and production rights.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("E_P_RightsID")]
        public string E_P_RightsID {
            get {
                return E_P_RightsIDField;
            } 
            set {
                E_P_RightsIDField = value;
                NotifyPropertyChanged("E_P_RightsID");
            }
        }

        private string E_P_RightsIDField; 

        /// <summary>
        /// CurrentStatus property
        /// </summary>
		[Description("Status (active, planned, suspended, testing, etc.) of the well completion.")]
        [EnergisticsDataTypeAttribute(DataType = "CompletionStatus")]
		[XmlElement("CurrentStatus")]
        public CompletionStatus? CurrentStatus {
            get {
                return CurrentStatusField;
            } 
            set {
                CurrentStatusField = value;
                 this.CurrentStatusSpecified = true;
                NotifyPropertyChanged("CurrentStatus");
            }
        }

        private CompletionStatus? CurrentStatusField; 

        /// <summary>
        /// CurrentStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CurrentStatusSpecified {
            get {
                return CurrentStatusSpecifiedField;
            } 
            set {
                CurrentStatusSpecifiedField = value;
                NotifyPropertyChanged("CurrentStatusSpecified");
            }
        }

        private bool CurrentStatusSpecifiedField; 

        /// <summary>
        /// StatusDate property
        /// </summary>
		[Description("Timestamp for when this status was established.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("StatusDate")]
        public Timestamp? StatusDate {
            get {
                return StatusDateField;
            } 
            set {
                StatusDateField = value;
                 this.StatusDateSpecified = true;
                NotifyPropertyChanged("StatusDate");
            }
        }

        
        private bool StatusDateSpecifiedField = false;
        
        /// <summary>
        /// StatusDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusDateSpecified {
            get {
                return StatusDateSpecifiedField;
            } 
            set {
                StatusDateSpecifiedField = value;
                NotifyPropertyChanged("StatusDateSpecified");
            }
        }
        
        private Timestamp? StatusDateField; 

        /// <summary>
        /// StatusHistory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CompletionStatusHistory")]
		[XmlElement("StatusHistory")]
        public List<CompletionStatusHistory> StatusHistory {
            get {
                return StatusHistoryField;
            } 
            set {
                StatusHistoryField = value;
                NotifyPropertyChanged("StatusHistory");
            }
        }

         /// <summary>
         /// bool to indicate if StatusHistory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusHistorySpecified
         {
             get {
             if(StatusHistoryField!=null)
                 return StatusHistoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<CompletionStatusHistory> StatusHistoryField; 

        /// <summary>
        /// Well property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Well")]
        public DataObjectReference Well {
            get {
                return WellField;
            } 
            set {
                WellField = value;
                NotifyPropertyChanged("Well");
            }
        }

        private DataObjectReference WellField; 


    } //here

    /// <summary>
    /// This class represents the ToolErrorTermSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the ToolErrorTermSet xsd type.")]
    public partial class ToolErrorTermSet : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Authorization property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaAuthorizationData")]
		[XmlElement("Authorization")]
        public IscwsaAuthorizationData Authorization {
            get {
                return AuthorizationField;
            } 
            set {
                AuthorizationField = value;
                NotifyPropertyChanged("Authorization");
            }
        }

        private IscwsaAuthorizationData AuthorizationField; 

        /// <summary>
        /// Nomenclature property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaNomenclature")]
		[XmlElement("Nomenclature")]
        public IscwsaNomenclature Nomenclature {
            get {
                return NomenclatureField;
            } 
            set {
                NomenclatureField = value;
                NotifyPropertyChanged("Nomenclature");
            }
        }

        private IscwsaNomenclature NomenclatureField; 

        /// <summary>
        /// ErrorTerm property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaErrorTerm")]
		[XmlElement("ErrorTerm")]
        public List<IscwsaErrorTerm> ErrorTerm {
            get {
                return ErrorTermField;
            } 
            set {
                ErrorTermField = value;
                NotifyPropertyChanged("ErrorTerm");
            }
        }

         /// <summary>
         /// bool to indicate if ErrorTerm has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ErrorTermSpecified
         {
             get {
             if(ErrorTermField!=null)
                 return ErrorTermField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaErrorTerm> ErrorTermField; 


    } //here

    /// <summary>
    /// This class represents the SurveyProgram xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the SurveyProgram xsd type.")]
    public partial class SurveyProgram : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// SurveyVer property
        /// </summary>
		[Required]
        [Description("Survey version number, incremented every time the program is modified.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("SurveyVer")]
        public long? SurveyVer {
            get {
                return SurveyVerField;
            } 
            set {
                SurveyVerField = value;
                NotifyPropertyChanged("SurveyVer");
            }
        }

        private long? SurveyVerField; 

        /// <summary>
        /// Engineer property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the engineer.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Engineer")]
        public string Engineer {
            get {
                return EngineerField;
            } 
            set {
                EngineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private string EngineerField; 

        /// <summary>
        /// Final property
        /// </summary>
		[StringLength(64)]
        [Description("Is program  final or intermediate/preliminary?")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Final")]
        public string Final {
            get {
                return FinalField;
            } 
            set {
                FinalField = value;
                NotifyPropertyChanged("Final");
            }
        }

        private string FinalField; 

        /// <summary>
        /// SurveySection property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SurveySection")]
		[XmlElement("SurveySection")]
        public List<SurveySection> SurveySection {
            get {
                return SurveySectionField;
            } 
            set {
                SurveySectionField = value;
                NotifyPropertyChanged("SurveySection");
            }
        }

         /// <summary>
         /// bool to indicate if SurveySection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SurveySectionSpecified
         {
             get {
             if(SurveySectionField!=null)
                 return SurveySectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<SurveySection> SurveySectionField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the StimJobStage xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the StimJobStage xsd type.")]
    public partial class StimJobStage : AbstractObject, IWitsmlDataObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Number property
        /// </summary>
		[Description("The number associated with the stage.")]
        [EnergisticsDataTypeAttribute(DataType = "PositiveLong")]
		[XmlElement("Number")]
        public long? Number {
            get {
                return NumberField;
            } 
            set {
                NumberField = value;
                 this.NumberSpecified = true;
                NotifyPropertyChanged("Number");
            }
        }

        private long? NumberField; 

        /// <summary>
        /// NumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumberSpecified {
            get {
                return NumberSpecifiedField;
            } 
            set {
                NumberSpecifiedField = value;
                NotifyPropertyChanged("NumberSpecified");
            }
        }

        private bool NumberSpecifiedField; 

        /// <summary>
        /// FractureHeight property
        /// </summary>
		[Description("The height of the fracture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FractureHeight")]
        public LengthMeasure FractureHeight {
            get {
                return FractureHeightField;
            } 
            set {
                FractureHeightField = value;
                NotifyPropertyChanged("FractureHeight");
            }
        }

        private LengthMeasure FractureHeightField; 

        /// <summary>
        /// PercentPad property
        /// </summary>
		[Description("The percentage of volume pumped used for the pad.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("PercentPad")]
        public VolumePerVolumeMeasure PercentPad {
            get {
                return PercentPadField;
            } 
            set {
                PercentPadField = value;
                NotifyPropertyChanged("PercentPad");
            }
        }

        private VolumePerVolumeMeasure PercentPadField; 

        /// <summary>
        /// StagePerforationClusters property
        /// </summary>
		[Description("Perforations added just before treating the stage.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimPerforationClusterSet")]
		[XmlArrayItem("StimPerforationCluster")]
        [XmlArray("StagePerforationClusters")]
        public List<StimPerforationCluster> StagePerforationClusters {
            get {
                return StagePerforationClustersField;
            } 
            set {
                StagePerforationClustersField = value;
                NotifyPropertyChanged("StagePerforationClusters");
            }
        }

         /// <summary>
         /// bool to indicate if StagePerforationClusters has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StagePerforationClustersSpecified
         {
             get {
             if(StagePerforationClustersField!=null)
                 return StagePerforationClustersField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimPerforationCluster> StagePerforationClustersField; 

        /// <summary>
        /// AvgBaseFluidReturnVolumeRate property
        /// </summary>
		[Description("Average base fluid pumping rate of all steps for stage treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("AvgBaseFluidReturnVolumeRate")]
        public VolumePerTimeMeasure AvgBaseFluidReturnVolumeRate {
            get {
                return AvgBaseFluidReturnVolumeRateField;
            } 
            set {
                AvgBaseFluidReturnVolumeRateField = value;
                NotifyPropertyChanged("AvgBaseFluidReturnVolumeRate");
            }
        }

        private VolumePerTimeMeasure AvgBaseFluidReturnVolumeRateField; 

        /// <summary>
        /// AvgBHStaticTemperature property
        /// </summary>
		[Description("The average static temperature of the wellbore injection point(s) or formation at equilibrium (steady state) with no fluid or tool movement, allowing for equilibrium conditions at the wellbore injection point; (BHST: bottom hole static temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("AvgBHStaticTemperature")]
        public ThermodynamicTemperatureMeasure AvgBHStaticTemperature {
            get {
                return AvgBHStaticTemperatureField;
            } 
            set {
                AvgBHStaticTemperatureField = value;
                NotifyPropertyChanged("AvgBHStaticTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure AvgBHStaticTemperatureField; 

        /// <summary>
        /// AvgBHTreatingTemperature property
        /// </summary>
		[Description("The average measured or calculated temperature of the wellbore during the treating with well fluid injection or circulation of the wellbore at the point of interest. Point of interest is generally the injection point or region of interest for the test or treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("AvgBHTreatingTemperature")]
        public ThermodynamicTemperatureMeasure AvgBHTreatingTemperature {
            get {
                return AvgBHTreatingTemperatureField;
            } 
            set {
                AvgBHTreatingTemperatureField = value;
                NotifyPropertyChanged("AvgBHTreatingTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure AvgBHTreatingTemperatureField; 

        /// <summary>
        /// AvgBottomholePumpedVolumeRate property
        /// </summary>
		[Description("Average bottomhole treatment flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("AvgBottomholePumpedVolumeRate")]
        public VolumePerTimeMeasure AvgBottomholePumpedVolumeRate {
            get {
                return AvgBottomholePumpedVolumeRateField;
            } 
            set {
                AvgBottomholePumpedVolumeRateField = value;
                NotifyPropertyChanged("AvgBottomholePumpedVolumeRate");
            }
        }

        private VolumePerTimeMeasure AvgBottomholePumpedVolumeRateField; 

        /// <summary>
        /// AvgConductivity property
        /// </summary>
		[Description("Average conductivity of a fracture created during the treatment supported by proppant during the stimulation services Hydraulic conductivity, symbolically represented as K, is a property of vascular plants, soil or rock, that describes the ease with which water can move through pore spaces or fractures. It depends on the intrinsic permeability of the material and on the degree of saturation. Saturated hydraulic conductivity, Ksat, describes water movement through saturated media.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("AvgConductivity")]
        public LengthPerTimeMeasure AvgConductivity {
            get {
                return AvgConductivityField;
            } 
            set {
                AvgConductivityField = value;
                NotifyPropertyChanged("AvgConductivity");
            }
        }

        private LengthPerTimeMeasure AvgConductivityField; 

        /// <summary>
        /// AvgFractureWidth property
        /// </summary>
		[Description("Average fracture width created during the treatment of the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("AvgFractureWidth")]
        public LengthMeasure AvgFractureWidth {
            get {
                return AvgFractureWidthField;
            } 
            set {
                AvgFractureWidthField = value;
                NotifyPropertyChanged("AvgFractureWidth");
            }
        }

        private LengthMeasure AvgFractureWidthField; 

        /// <summary>
        /// AvgHydraulicPower property
        /// </summary>
		[Description("Average hydraulic horse power used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("AvgHydraulicPower")]
        public PowerMeasure AvgHydraulicPower {
            get {
                return AvgHydraulicPowerField;
            } 
            set {
                AvgHydraulicPowerField = value;
                NotifyPropertyChanged("AvgHydraulicPower");
            }
        }

        private PowerMeasure AvgHydraulicPowerField; 

        /// <summary>
        /// AvgPresAnnulus property
        /// </summary>
		[Description("The average annulus pressure for any step for the stage treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AvgPresAnnulus")]
        public PressureMeasure AvgPresAnnulus {
            get {
                return AvgPresAnnulusField;
            } 
            set {
                AvgPresAnnulusField = value;
                NotifyPropertyChanged("AvgPresAnnulus");
            }
        }

        private PressureMeasure AvgPresAnnulusField; 

        /// <summary>
        /// AvgPresCasing property
        /// </summary>
		[Description("The average casing pressure of any step for the stage treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AvgPresCasing")]
        public PressureMeasure AvgPresCasing {
            get {
                return AvgPresCasingField;
            } 
            set {
                AvgPresCasingField = value;
                NotifyPropertyChanged("AvgPresCasing");
            }
        }

        private PressureMeasure AvgPresCasingField; 

        /// <summary>
        /// AvgPresSurface property
        /// </summary>
		[Description("The average pressure for treating the stage across all steps.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AvgPresSurface")]
        public PressureMeasure AvgPresSurface {
            get {
                return AvgPresSurfaceField;
            } 
            set {
                AvgPresSurfaceField = value;
                NotifyPropertyChanged("AvgPresSurface");
            }
        }

        private PressureMeasure AvgPresSurfaceField; 

        /// <summary>
        /// AvgPresTubing property
        /// </summary>
		[Description("The average tubing pressure of any step for the stage treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AvgPresTubing")]
        public PressureMeasure AvgPresTubing {
            get {
                return AvgPresTubingField;
            } 
            set {
                AvgPresTubingField = value;
                NotifyPropertyChanged("AvgPresTubing");
            }
        }

        private PressureMeasure AvgPresTubingField; 

        /// <summary>
        /// AvgProppantConcBottomhole property
        /// </summary>
		[Description("The average proppant concentration at the bottom of the hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("AvgProppantConcBottomhole")]
        public MassPerVolumeMeasure AvgProppantConcBottomhole {
            get {
                return AvgProppantConcBottomholeField;
            } 
            set {
                AvgProppantConcBottomholeField = value;
                NotifyPropertyChanged("AvgProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure AvgProppantConcBottomholeField; 

        /// <summary>
        /// AvgProppantConcSurface property
        /// </summary>
		[Description("The average proppant concentration on the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("AvgProppantConcSurface")]
        public MassPerVolumeMeasure AvgProppantConcSurface {
            get {
                return AvgProppantConcSurfaceField;
            } 
            set {
                AvgProppantConcSurfaceField = value;
                NotifyPropertyChanged("AvgProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure AvgProppantConcSurfaceField; 

        /// <summary>
        /// AvgSlurryReturnVolumeRate property
        /// </summary>
		[Description("The average slurry return rate of all steps for the stage treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("AvgSlurryReturnVolumeRate")]
        public VolumePerTimeMeasure AvgSlurryReturnVolumeRate {
            get {
                return AvgSlurryReturnVolumeRateField;
            } 
            set {
                AvgSlurryReturnVolumeRateField = value;
                NotifyPropertyChanged("AvgSlurryReturnVolumeRate");
            }
        }

        private VolumePerTimeMeasure AvgSlurryReturnVolumeRateField; 

        /// <summary>
        /// BreakDownPres property
        /// </summary>
		[Description("The pressure at which the formation fractures and accepts injected fluid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("BreakDownPres")]
        public PressureMeasure BreakDownPres {
            get {
                return BreakDownPresField;
            } 
            set {
                BreakDownPresField = value;
                NotifyPropertyChanged("BreakDownPres");
            }
        }

        private PressureMeasure BreakDownPresField; 

        /// <summary>
        /// ClosureDuration property
        /// </summary>
		[Description("Delta time recorded for the closure of the fracture to occur during the stage treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ClosureDuration")]
        public TimeMeasure ClosureDuration {
            get {
                return ClosureDurationField;
            } 
            set {
                ClosureDurationField = value;
                NotifyPropertyChanged("ClosureDuration");
            }
        }

        private TimeMeasure ClosureDurationField; 

        /// <summary>
        /// ClosurePres property
        /// </summary>
		[Description("An analysis parameter used in hydraulic fracture design to indicate the pressure at which the fracture effectively closes without proppant in place.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("ClosurePres")]
        public PressureMeasure ClosurePres {
            get {
                return ClosurePresField;
            } 
            set {
                ClosurePresField = value;
                NotifyPropertyChanged("ClosurePres");
            }
        }

        private PressureMeasure ClosurePresField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Description("Ending date and time for the stage treatment.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        
        private bool DateTimeEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DateTimeEndSpecifiedField;
            } 
            set {
                DateTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }
        
        private Timestamp? DTimEndField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("Starting date and time for the stage treatment.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// FormationBreakLengthPerDay property
        /// </summary>
		[Description("The length of formation broken per day.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FormationBreakLengthPerDay")]
        public LengthMeasure FormationBreakLengthPerDay {
            get {
                return FormationBreakLengthPerDayField;
            } 
            set {
                FormationBreakLengthPerDayField = value;
                NotifyPropertyChanged("FormationBreakLengthPerDay");
            }
        }

        private LengthMeasure FormationBreakLengthPerDayField; 

        /// <summary>
        /// FormationName property
        /// </summary>
		[StringLength(2000)]
        [Description("The name of the formation being stimulated.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("FormationName")]
        public string FormationName {
            get {
                return FormationNameField;
            } 
            set {
                FormationNameField = value;
                NotifyPropertyChanged("FormationName");
            }
        }

        private string FormationNameField; 

        /// <summary>
        /// FormationProppantMass property
        /// </summary>
		[Description("The weight of proppant placed in the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("FormationProppantMass")]
        public MassMeasure FormationProppantMass {
            get {
                return FormationProppantMassField;
            } 
            set {
                FormationProppantMassField = value;
                NotifyPropertyChanged("FormationProppantMass");
            }
        }

        private MassMeasure FormationProppantMassField; 

        /// <summary>
        /// FractureGradientFinal property
        /// </summary>
		[Description("The formation fracture gradient for the stage after treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeMeasure")]
		[XmlElement("FractureGradientFinal")]
        public ForcePerVolumeMeasure FractureGradientFinal {
            get {
                return FractureGradientFinalField;
            } 
            set {
                FractureGradientFinalField = value;
                NotifyPropertyChanged("FractureGradientFinal");
            }
        }

        private ForcePerVolumeMeasure FractureGradientFinalField; 

        /// <summary>
        /// FractureGradientInitial property
        /// </summary>
		[Description("The formation fracture gradient for stage before treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeMeasure")]
		[XmlElement("FractureGradientInitial")]
        public ForcePerVolumeMeasure FractureGradientInitial {
            get {
                return FractureGradientInitialField;
            } 
            set {
                FractureGradientInitialField = value;
                NotifyPropertyChanged("FractureGradientInitial");
            }
        }

        private ForcePerVolumeMeasure FractureGradientInitialField; 

        /// <summary>
        /// FractureLength property
        /// </summary>
		[Description("The length of the fracture created after treating the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("FractureLength")]
        public LengthMeasure FractureLength {
            get {
                return FractureLengthField;
            } 
            set {
                FractureLengthField = value;
                NotifyPropertyChanged("FractureLength");
            }
        }

        private LengthMeasure FractureLengthField; 

        /// <summary>
        /// FrictionPressure property
        /// </summary>
		[Description("Friction pressure loss.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FrictionPressure")]
        public PressureMeasure FrictionPressure {
            get {
                return FrictionPressureField;
            } 
            set {
                FrictionPressureField = value;
                NotifyPropertyChanged("FrictionPressure");
            }
        }

        private PressureMeasure FrictionPressureField; 

        /// <summary>
        /// HhpOrderedCO2 property
        /// </summary>
		[Description("Carbon dioxide hydraulic horsepower ordered for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("HhpOrderedCO2")]
        public PowerMeasure HhpOrderedCO2 {
            get {
                return HhpOrderedCO2Field;
            } 
            set {
                HhpOrderedCO2Field = value;
                NotifyPropertyChanged("HhpOrderedCO2");
            }
        }

        private PowerMeasure HhpOrderedCO2Field; 

        /// <summary>
        /// HhpOrderedFluid property
        /// </summary>
		[Description("Fluid hydraulic horsepower ordered for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("HhpOrderedFluid")]
        public PowerMeasure HhpOrderedFluid {
            get {
                return HhpOrderedFluidField;
            } 
            set {
                HhpOrderedFluidField = value;
                NotifyPropertyChanged("HhpOrderedFluid");
            }
        }

        private PowerMeasure HhpOrderedFluidField; 

        /// <summary>
        /// HhpUsedCO2 property
        /// </summary>
		[Description("Carbon dioxide hydraulic horsepower actually used for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("HhpUsedCO2")]
        public PowerMeasure HhpUsedCO2 {
            get {
                return HhpUsedCO2Field;
            } 
            set {
                HhpUsedCO2Field = value;
                NotifyPropertyChanged("HhpUsedCO2");
            }
        }

        private PowerMeasure HhpUsedCO2Field; 

        /// <summary>
        /// HhpUsedFluid property
        /// </summary>
		[Description("Fluid hydraulic horsepower actually used for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("HhpUsedFluid")]
        public PowerMeasure HhpUsedFluid {
            get {
                return HhpUsedFluidField;
            } 
            set {
                HhpUsedFluidField = value;
                NotifyPropertyChanged("HhpUsedFluid");
            }
        }

        private PowerMeasure HhpUsedFluidField; 

        /// <summary>
        /// InitialShutinPres property
        /// </summary>
		[Description("The initial shut-in pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("InitialShutinPres")]
        public PowerMeasure InitialShutinPres {
            get {
                return InitialShutinPresField;
            } 
            set {
                InitialShutinPresField = value;
                NotifyPropertyChanged("InitialShutinPres");
            }
        }

        private PowerMeasure InitialShutinPresField; 

        /// <summary>
        /// MaxFluidVolumeRateAnnulus property
        /// </summary>
		[Description("Maximum annulus fluid pumping rate of any step while treating the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("MaxFluidVolumeRateAnnulus")]
        public VolumePerTimeMeasure MaxFluidVolumeRateAnnulus {
            get {
                return MaxFluidVolumeRateAnnulusField;
            } 
            set {
                MaxFluidVolumeRateAnnulusField = value;
                NotifyPropertyChanged("MaxFluidVolumeRateAnnulus");
            }
        }

        private VolumePerTimeMeasure MaxFluidVolumeRateAnnulusField; 

        /// <summary>
        /// MaxFluidVolumeRateCasing property
        /// </summary>
		[Description("Maximum casing fluid pumping rate of any step while treating the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("MaxFluidVolumeRateCasing")]
        public VolumePerTimeMeasure MaxFluidVolumeRateCasing {
            get {
                return MaxFluidVolumeRateCasingField;
            } 
            set {
                MaxFluidVolumeRateCasingField = value;
                NotifyPropertyChanged("MaxFluidVolumeRateCasing");
            }
        }

        private VolumePerTimeMeasure MaxFluidVolumeRateCasingField; 

        /// <summary>
        /// MaxFluidVolumeRateTubing property
        /// </summary>
		[Description("Maximum tubing fluid pumping rate of any step while treating the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("MaxFluidVolumeRateTubing")]
        public VolumePerTimeMeasure MaxFluidVolumeRateTubing {
            get {
                return MaxFluidVolumeRateTubingField;
            } 
            set {
                MaxFluidVolumeRateTubingField = value;
                NotifyPropertyChanged("MaxFluidVolumeRateTubing");
            }
        }

        private VolumePerTimeMeasure MaxFluidVolumeRateTubingField; 

        /// <summary>
        /// MaxHydraulicPower property
        /// </summary>
		[Description("Maximum hydraulic horse power used for the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("MaxHydraulicPower")]
        public PowerMeasure MaxHydraulicPower {
            get {
                return MaxHydraulicPowerField;
            } 
            set {
                MaxHydraulicPowerField = value;
                NotifyPropertyChanged("MaxHydraulicPower");
            }
        }

        private PowerMeasure MaxHydraulicPowerField; 

        /// <summary>
        /// MaxPresAnnulus property
        /// </summary>
		[Description("The highest annulus pressure of any step while treating the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("MaxPresAnnulus")]
        public PressureMeasure MaxPresAnnulus {
            get {
                return MaxPresAnnulusField;
            } 
            set {
                MaxPresAnnulusField = value;
                NotifyPropertyChanged("MaxPresAnnulus");
            }
        }

        private PressureMeasure MaxPresAnnulusField; 

        /// <summary>
        /// MaxPresCasing property
        /// </summary>
		[Description("The highest casing pressure of any step while treating the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("MaxPresCasing")]
        public PressureMeasure MaxPresCasing {
            get {
                return MaxPresCasingField;
            } 
            set {
                MaxPresCasingField = value;
                NotifyPropertyChanged("MaxPresCasing");
            }
        }

        private PressureMeasure MaxPresCasingField; 

        /// <summary>
        /// MaxPresSurface property
        /// </summary>
		[Description("Maximum surface pressure during treatment of the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("MaxPresSurface")]
        public PressureMeasure MaxPresSurface {
            get {
                return MaxPresSurfaceField;
            } 
            set {
                MaxPresSurfaceField = value;
                NotifyPropertyChanged("MaxPresSurface");
            }
        }

        private PressureMeasure MaxPresSurfaceField; 

        /// <summary>
        /// MaxPresTubing property
        /// </summary>
		[Description("The highest tubing pressure of any step while treating the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("MaxPresTubing")]
        public PressureMeasure MaxPresTubing {
            get {
                return MaxPresTubingField;
            } 
            set {
                MaxPresTubingField = value;
                NotifyPropertyChanged("MaxPresTubing");
            }
        }

        private PressureMeasure MaxPresTubingField; 

        /// <summary>
        /// MaxProppantConcBottomhole property
        /// </summary>
		[Description("The maximum proppant concentration at the bottom of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("MaxProppantConcBottomhole")]
        public MassPerVolumeMeasure MaxProppantConcBottomhole {
            get {
                return MaxProppantConcBottomholeField;
            } 
            set {
                MaxProppantConcBottomholeField = value;
                NotifyPropertyChanged("MaxProppantConcBottomhole");
            }
        }

        private MassPerVolumeMeasure MaxProppantConcBottomholeField; 

        /// <summary>
        /// MaxProppantConcSurface property
        /// </summary>
		[Description("The maximum proppant concentration on the surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("MaxProppantConcSurface")]
        public MassPerVolumeMeasure MaxProppantConcSurface {
            get {
                return MaxProppantConcSurfaceField;
            } 
            set {
                MaxProppantConcSurfaceField = value;
                NotifyPropertyChanged("MaxProppantConcSurface");
            }
        }

        private MassPerVolumeMeasure MaxProppantConcSurfaceField; 

        /// <summary>
        /// MdFormationBottom property
        /// </summary>
		[Description("Measured depth of the bottom of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdFormationBottom")]
        public MeasuredDepthCoord MDFormationBottom {
            get {
                return MdFormationBottomField;
            } 
            set {
                MdFormationBottomField = value;
                NotifyPropertyChanged("MDFormationBottom");
            }
        }

        private MeasuredDepthCoord MdFormationBottomField; 

        /// <summary>
        /// MdFormationTop property
        /// </summary>
		[Description("Measured depth of the top of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdFormationTop")]
        public MeasuredDepthCoord MDFormationTop {
            get {
                return MdFormationTopField;
            } 
            set {
                MdFormationTopField = value;
                NotifyPropertyChanged("MDFormationTop");
            }
        }

        private MeasuredDepthCoord MdFormationTopField; 

        /// <summary>
        /// MdOpenHoleBottom property
        /// </summary>
		[Description("Measured depth of the bottom open hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdOpenHoleBottom")]
        public MeasuredDepthCoord MDOpenHoleBottom {
            get {
                return MdOpenHoleBottomField;
            } 
            set {
                MdOpenHoleBottomField = value;
                NotifyPropertyChanged("MDOpenHoleBottom");
            }
        }

        private MeasuredDepthCoord MdOpenHoleBottomField; 

        /// <summary>
        /// MdOpenHoleTop property
        /// </summary>
		[Description("Measured depth of the top open hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdOpenHoleTop")]
        public MeasuredDepthCoord MDOpenHoleTop {
            get {
                return MdOpenHoleTopField;
            } 
            set {
                MdOpenHoleTopField = value;
                NotifyPropertyChanged("MDOpenHoleTop");
            }
        }

        private MeasuredDepthCoord MdOpenHoleTopField; 

        /// <summary>
        /// NetPres property
        /// </summary>
		[Description("The difference between the pressure which holds a fracture closed (minimal principal stress) and that pressure which is necessary to open the fracture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("NetPres")]
        public PressureMeasure NetPres {
            get {
                return NetPresField;
            } 
            set {
                NetPresField = value;
                NotifyPropertyChanged("NetPres");
            }
        }

        private PressureMeasure NetPresField; 

        /// <summary>
        /// OpenHoleDiameter property
        /// </summary>
		[Description("The diameter of the open hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("OpenHoleDiameter")]
        public LengthMeasure OpenHoleDiameter {
            get {
                return OpenHoleDiameterField;
            } 
            set {
                OpenHoleDiameterField = value;
                NotifyPropertyChanged("OpenHoleDiameter");
            }
        }

        private LengthMeasure OpenHoleDiameterField; 

        /// <summary>
        /// OpenHoleName property
        /// </summary>
		[StringLength(2000)]
        [Description("A name for the open hole. To be used for open hole completions.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("OpenHoleName")]
        public string OpenHoleName {
            get {
                return OpenHoleNameField;
            } 
            set {
                OpenHoleNameField = value;
                NotifyPropertyChanged("OpenHoleName");
            }
        }

        private string OpenHoleNameField; 

        /// <summary>
        /// PercentProppantPumped property
        /// </summary>
		[Description("Total proppant mass used as a percent of the design mass.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("PercentProppantPumped")]
        public VolumePerVolumeMeasure PercentProppantPumped {
            get {
                return PercentProppantPumpedField;
            } 
            set {
                PercentProppantPumpedField = value;
                NotifyPropertyChanged("PercentProppantPumped");
            }
        }

        private VolumePerVolumeMeasure PercentProppantPumpedField; 

        /// <summary>
        /// PerfBallCount property
        /// </summary>
		[Description("Total number of perforation balls used while treating the stage.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("PerfBallCount")]
        public long? PerfBallCount {
            get {
                return PerfBallCountField;
            } 
            set {
                PerfBallCountField = value;
                 this.PerfBallCountSpecified = true;
                NotifyPropertyChanged("PerfBallCount");
            }
        }

        private long? PerfBallCountField; 

        /// <summary>
        /// PerfBallCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerfBallCountSpecified {
            get {
                return PerfBallCountSpecifiedField;
            } 
            set {
                PerfBallCountSpecifiedField = value;
                NotifyPropertyChanged("PerfBallCountSpecified");
            }
        }

        private bool PerfBallCountSpecifiedField; 

        /// <summary>
        /// PerfBallSize property
        /// </summary>
		[Description("The size of the perforation balls used while treating the stage")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("PerfBallSize")]
        public LengthMeasure PerfBallSize {
            get {
                return PerfBallSizeField;
            } 
            set {
                PerfBallSizeField = value;
                NotifyPropertyChanged("PerfBallSize");
            }
        }

        private LengthMeasure PerfBallSizeField; 

        /// <summary>
        /// PerfProppantConc property
        /// </summary>
		[Description("The proppant concentration at the perforations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("PerfProppantConc")]
        public MassPerVolumeMeasure PerfProppantConc {
            get {
                return PerfProppantConcField;
            } 
            set {
                PerfProppantConcField = value;
                NotifyPropertyChanged("PerfProppantConc");
            }
        }

        private MassPerVolumeMeasure PerfProppantConcField; 

        /// <summary>
        /// ProppantHeight property
        /// </summary>
		[Description("The proppant height.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("ProppantHeight")]
        public LengthMeasure ProppantHeight {
            get {
                return ProppantHeightField;
            } 
            set {
                ProppantHeightField = value;
                NotifyPropertyChanged("ProppantHeight");
            }
        }

        private LengthMeasure ProppantHeightField; 

        /// <summary>
        /// ScreenedOut property
        /// </summary>
		[Description("Did screen out occur? True (\"true\" or \"1\") indicates that screen out occurred. False (\"false\" or \"0\") or not given indicates otherwise.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("ScreenedOut")]
        public bool? ScreenedOut {
            get {
                return ScreenedOutField;
            } 
            set {
                ScreenedOutField = value;
                 this.ScreenedOutSpecified = true;
                NotifyPropertyChanged("ScreenedOut");
            }
        }

        private bool? ScreenedOutField; 

        /// <summary>
        /// ScreenedOutSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ScreenedOutSpecified {
            get {
                return ScreenedOutSpecifiedField;
            } 
            set {
                ScreenedOutSpecifiedField = value;
                NotifyPropertyChanged("ScreenedOutSpecified");
            }
        }

        private bool ScreenedOutSpecifiedField; 

        /// <summary>
        /// ScreenOutPres property
        /// </summary>
		[Description("The screen out pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("ScreenOutPres")]
        public PressureMeasure ScreenOutPres {
            get {
                return ScreenOutPresField;
            } 
            set {
                ScreenOutPresField = value;
                NotifyPropertyChanged("ScreenOutPres");
            }
        }

        private PressureMeasure ScreenOutPresField; 

        /// <summary>
        /// TechnologyType property
        /// </summary>
		[StringLength(64)]
        [Description("Text describing the technology used while pumping the stage.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TechnologyType")]
        public string TechnologyType {
            get {
                return TechnologyTypeField;
            } 
            set {
                TechnologyTypeField = value;
                NotifyPropertyChanged("TechnologyType");
            }
        }

        private string TechnologyTypeField; 

        /// <summary>
        /// TotalProppantInFormation property
        /// </summary>
		[Description("The total amount of proppant in the formation relative to the current stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("TotalProppantInFormation")]
        public MassMeasure TotalProppantInFormation {
            get {
                return TotalProppantInFormationField;
            } 
            set {
                TotalProppantInFormationField = value;
                NotifyPropertyChanged("TotalProppantInFormation");
            }
        }

        private MassMeasure TotalProppantInFormationField; 

        /// <summary>
        /// TotalPumpTime property
        /// </summary>
		[Description("The total pumping time for the treatment of the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("TotalPumpTime")]
        public TimeMeasure TotalPumpTime {
            get {
                return TotalPumpTimeField;
            } 
            set {
                TotalPumpTimeField = value;
                NotifyPropertyChanged("TotalPumpTime");
            }
        }

        private TimeMeasure TotalPumpTimeField; 

        /// <summary>
        /// TotalVolume property
        /// </summary>
		[Description("The total volume pumped for all steps while treating the stage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("TotalVolume")]
        public VolumeMeasure TotalVolume {
            get {
                return TotalVolumeField;
            } 
            set {
                TotalVolumeField = value;
                NotifyPropertyChanged("TotalVolume");
            }
        }

        private VolumeMeasure TotalVolumeField; 

        /// <summary>
        /// TvdFormationBottom property
        /// </summary>
		[Description("True vertical depth of the bottom of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdFormationBottom")]
        public WellVerticalDepthCoord TvdFormationBottom {
            get {
                return TvdFormationBottomField;
            } 
            set {
                TvdFormationBottomField = value;
                NotifyPropertyChanged("TvdFormationBottom");
            }
        }

        private WellVerticalDepthCoord TvdFormationBottomField; 

        /// <summary>
        /// TvdFormationTop property
        /// </summary>
		[Description("True vertical depth of the top of the formation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdFormationTop")]
        public WellVerticalDepthCoord TvdFormationTop {
            get {
                return TvdFormationTopField;
            } 
            set {
                TvdFormationTopField = value;
                NotifyPropertyChanged("TvdFormationTop");
            }
        }

        private WellVerticalDepthCoord TvdFormationTopField; 

        /// <summary>
        /// TvdOpenHoleBottom property
        /// </summary>
		[Description("True vertical depth of the bottom open hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdOpenHoleBottom")]
        public WellVerticalDepthCoord TvdOpenHoleBottom {
            get {
                return TvdOpenHoleBottomField;
            } 
            set {
                TvdOpenHoleBottomField = value;
                NotifyPropertyChanged("TvdOpenHoleBottom");
            }
        }

        private WellVerticalDepthCoord TvdOpenHoleBottomField; 

        /// <summary>
        /// TvdOpenHoleTop property
        /// </summary>
		[Description("True vertical depth of the top open hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdOpenHoleTop")]
        public WellVerticalDepthCoord TvdOpenHoleTop {
            get {
                return TvdOpenHoleTopField;
            } 
            set {
                TvdOpenHoleTopField = value;
                NotifyPropertyChanged("TvdOpenHoleTop");
            }
        }

        private WellVerticalDepthCoord TvdOpenHoleTopField; 

        /// <summary>
        /// VolumeBody property
        /// </summary>
		[Description("The volume pumped for the body portion of the stage treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolumeBody")]
        public VolumeMeasure VolumeBody {
            get {
                return VolumeBodyField;
            } 
            set {
                VolumeBodyField = value;
                NotifyPropertyChanged("VolumeBody");
            }
        }

        private VolumeMeasure VolumeBodyField; 

        /// <summary>
        /// VolumeFlush property
        /// </summary>
		[Description("Volume pumped during flush portion of stage treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolumeFlush")]
        public VolumeMeasure VolumeFlush {
            get {
                return VolumeFlushField;
            } 
            set {
                VolumeFlushField = value;
                NotifyPropertyChanged("VolumeFlush");
            }
        }

        private VolumeMeasure VolumeFlushField; 

        /// <summary>
        /// VolumePad property
        /// </summary>
		[Description("Volume pumped for pad portion of stage treatment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolumePad")]
        public VolumeMeasure VolumePad {
            get {
                return VolumePadField;
            } 
            set {
                VolumePadField = value;
                NotifyPropertyChanged("VolumePad");
            }
        }

        private VolumeMeasure VolumePadField; 

        /// <summary>
        /// WaterSource property
        /// </summary>
		[StringLength(2000)]
        [Description("Water source for fluid pumped during stage.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("WaterSource")]
        public string WaterSource {
            get {
                return WaterSourceField;
            } 
            set {
                WaterSourceField = value;
                NotifyPropertyChanged("WaterSource");
            }
        }

        private string WaterSourceField; 

        /// <summary>
        /// WellboreProppantMass property
        /// </summary>
		[Description("The weight of proppant left in the wellbore after pumping has stopped.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("WellboreProppantMass")]
        public MassMeasure WellboreProppantMass {
            get {
                return WellboreProppantMassField;
            } 
            set {
                WellboreProppantMassField = value;
                NotifyPropertyChanged("WellboreProppantMass");
            }
        }

        private MassMeasure WellboreProppantMassField; 

        /// <summary>
        /// PdatSession property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimJobDiagnosticSession")]
		[XmlElement("PdatSession")]
        public List<StimJobDiagnosticSession> PdatSession {
            get {
                return PdatSessionField;
            } 
            set {
                PdatSessionField = value;
                NotifyPropertyChanged("PdatSession");
            }
        }

         /// <summary>
         /// bool to indicate if PdatSession has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PdatSessionSpecified
         {
             get {
             if(PdatSessionField!=null)
                 return PdatSessionField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimJobDiagnosticSession> PdatSessionField; 

        /// <summary>
        /// ShutInPres property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimShutInPressure")]
		[XmlElement("ShutInPres")]
        public List<StimShutInPressure> ShutInPres {
            get {
                return ShutInPresField;
            } 
            set {
                ShutInPresField = value;
                NotifyPropertyChanged("ShutInPres");
            }
        }

         /// <summary>
         /// bool to indicate if ShutInPres has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ShutInPresSpecified
         {
             get {
             if(ShutInPresField!=null)
                 return ShutInPresField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimShutInPressure> ShutInPresField; 

        /// <summary>
        /// JobEvent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimEvent")]
		[XmlElement("JobEvent")]
        public List<StimEvent> JobEvent {
            get {
                return JobEventField;
            } 
            set {
                JobEventField = value;
                NotifyPropertyChanged("JobEvent");
            }
        }

         /// <summary>
         /// bool to indicate if JobEvent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool JobEventSpecified
         {
             get {
             if(JobEventField!=null)
                 return JobEventField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimEvent> JobEventField; 

        /// <summary>
        /// JobStep property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimJobStep")]
		[XmlElement("JobStep")]
        public List<StimJobStep> JobStep {
            get {
                return JobStepField;
            } 
            set {
                JobStepField = value;
                NotifyPropertyChanged("JobStep");
            }
        }

         /// <summary>
         /// bool to indicate if JobStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool JobStepSpecified
         {
             get {
             if(JobStepField!=null)
                 return JobStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimJobStep> JobStepField; 

        /// <summary>
        /// MaxMaterialUsageRate property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("MaxMaterialUsageRate")]
        public List<StimMaterialQuantity> MaxMaterialUsageRate {
            get {
                return MaxMaterialUsageRateField;
            } 
            set {
                MaxMaterialUsageRateField = value;
                NotifyPropertyChanged("MaxMaterialUsageRate");
            }
        }

         /// <summary>
         /// bool to indicate if MaxMaterialUsageRate has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MaxMaterialUsageRateSpecified
         {
             get {
             if(MaxMaterialUsageRateField!=null)
                 return MaxMaterialUsageRateField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> MaxMaterialUsageRateField; 

        /// <summary>
        /// MaterialUsed property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("MaterialUsed")]
        public List<StimMaterialQuantity> MaterialUsed {
            get {
                return MaterialUsedField;
            } 
            set {
                MaterialUsedField = value;
                NotifyPropertyChanged("MaterialUsed");
            }
        }

         /// <summary>
         /// bool to indicate if MaterialUsed has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MaterialUsedSpecified
         {
             get {
             if(MaterialUsedField!=null)
                 return MaterialUsedField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> MaterialUsedField; 

        /// <summary>
        /// FlowPath property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StimFlowPath")]
		[XmlElement("FlowPath")]
        public StimFlowPath FlowPath {
            get {
                return FlowPathField;
            } 
            set {
                FlowPathField = value;
                NotifyPropertyChanged("FlowPath");
            }
        }

        private StimFlowPath FlowPathField; 

        /// <summary>
        /// StimStageLog property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("StimStageLog")]
        public List<DataObjectReference> StimStageLog {
            get {
                return StimStageLogField;
            } 
            set {
                StimStageLogField = value;
                NotifyPropertyChanged("StimStageLog");
            }
        }

         /// <summary>
         /// bool to indicate if StimStageLog has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StimStageLogSpecified
         {
             get {
             if(StimStageLogField!=null)
                 return StimStageLogField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> StimStageLogField; 

        /// <summary>
        /// ReservoirInterval property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimReservoirInterval")]
		[XmlElement("ReservoirInterval")]
        public List<StimReservoirInterval> ReservoirInterval {
            get {
                return ReservoirIntervalField;
            } 
            set {
                ReservoirIntervalField = value;
                NotifyPropertyChanged("ReservoirInterval");
            }
        }

         /// <summary>
         /// bool to indicate if ReservoirInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ReservoirIntervalSpecified
         {
             get {
             if(ReservoirIntervalField!=null)
                 return ReservoirIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimReservoirInterval> ReservoirIntervalField; 

        /// <summary>
        /// Diversion property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StimJobDiversion")]
		[XmlElement("Diversion")]
        public StimJobDiversion Diversion {
            get {
                return DiversionField;
            } 
            set {
                DiversionField = value;
                NotifyPropertyChanged("Diversion");
            }
        }

        private StimJobDiversion DiversionField; 

		/// <summary>
        /// Unique identifier for this instance of StimJobStage.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of StimJobStage.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


    } //here

    /// <summary>
    /// This class represents the StimPerforationCluster xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the StimPerforationCluster xsd type.")]
    public partial class StimPerforationCluster : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Measured depths of the top and base perforation.
        /// </summary>
		[Description("Measured depths of the top and base perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdPerforatedInterval")]
        public MdInterval MDPerforatedInterval {
            get {
                return MdPerforatedIntervalField;
            } 
            set {
                MdPerforatedIntervalField = value;
                NotifyPropertyChanged("MDPerforatedInterval");
            }
        }

        private MdInterval MdPerforatedIntervalField; 

        /// <summary>
        /// True vertical depth of the top and base perforation.
        /// </summary>
		[Description("True vertical depth of the top and base perforation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TvdInterval")]
		[XmlElement("TvdPerforatedInterval")]
        public TvdInterval TvdPerforatedInterval {
            get {
                return TvdPerforatedIntervalField;
            } 
            set {
                TvdPerforatedIntervalField = value;
                NotifyPropertyChanged("TvdPerforatedInterval");
            }
        }

        private TvdInterval TvdPerforatedIntervalField; 

        /// <summary>
        /// The type of perforation and/or how the perforation was created.
        /// </summary>
		[StringLength(64)]
        [Description("The type of perforation and/or how the perforation was created.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Type")]
        public string Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string TypeField; 

        /// <summary>
        /// The number of perforations in this interval.
        /// </summary>
		[Description("The number of perforations in this interval.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("PerforationCount")]
        public long? PerforationCount {
            get {
                return PerforationCountField;
            } 
            set {
                PerforationCountField = value;
                 this.PerforationCountSpecified = true;
                NotifyPropertyChanged("PerforationCount");
            }
        }

        private long? PerforationCountField; 

        /// <summary>
        /// PerforationCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PerforationCountSpecified {
            get {
                return PerforationCountSpecifiedField;
            } 
            set {
                PerforationCountSpecifiedField = value;
                NotifyPropertyChanged("PerforationCountSpecified");
            }
        }

        private bool PerforationCountSpecifiedField; 

        /// <summary>
        /// The size of the perforations.
        /// </summary>
		[Description("The size of the perforations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("Size")]
        public LengthMeasure Size {
            get {
                return SizeField;
            } 
            set {
                SizeField = value;
                NotifyPropertyChanged("Size");
            }
        }

        private LengthMeasure SizeField; 

        /// <summary>
        /// The number of perforation holes per length across the treatment interval. Used to describe but not limited to the configuration of perforating guns or the placement of perforations (holes, slots, openings, etc.) in the wellbore, and is often abbreviated to spf (shots per foot).
        /// </summary>
		[Description("The number of perforation holes per length across the treatment interval.  Used to describe but not limited to the configuration of perforating guns or the placement of perforations (holes, slots, openings, etc.) in the wellbore, and is often abbreviated to spf (shots per foot).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ReciprocalLengthMeasure")]
		[XmlElement("DensityPerforation")]
        public ReciprocalLengthMeasure DensityPerforation {
            get {
                return DensityPerforationField;
            } 
            set {
                DensityPerforationField = value;
                NotifyPropertyChanged("DensityPerforation");
            }
        }

        private ReciprocalLengthMeasure DensityPerforationField; 

        /// <summary>
        /// The radial distribution of successive perforations around the wellbore axis. Radial distribution is commonly available in 0, 180 120, 90 and 60 degree phasing.
        /// </summary>
		[Description("The radial distribution of successive perforations around the wellbore axis.  Radial distribution is commonly available in 0, 180 120, 90 and 60 degree phasing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("PhasingPerforation")]
        public PlaneAngleMeasure PhasingPerforation {
            get {
                return PhasingPerforationField;
            } 
            set {
                PhasingPerforationField = value;
                NotifyPropertyChanged("PhasingPerforation");
            }
        }

        private PlaneAngleMeasure PhasingPerforationField; 

        /// <summary>
        /// The friction factor of each perforation set.
        /// </summary>
		[Description("The friction factor of each perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("FrictionFactor")]
        public double? FrictionFactor {
            get {
                return FrictionFactorField;
            } 
            set {
                FrictionFactorField = value;
                 this.FrictionFactorSpecified = true;
                NotifyPropertyChanged("FrictionFactor");
            }
        }

        private double? FrictionFactorField; 

        /// <summary>
        /// FrictionFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FrictionFactorSpecified {
            get {
                return FrictionFactorSpecifiedField;
            } 
            set {
                FrictionFactorSpecifiedField = value;
                NotifyPropertyChanged("FrictionFactorSpecified");
            }
        }

        private bool FrictionFactorSpecifiedField; 

        /// <summary>
        /// The friction pressure for the perforation set.
        /// </summary>
		[Description("The friction pressure for the perforation set.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FrictionPres")]
        public PressureMeasure FrictionPres {
            get {
                return FrictionPresField;
            } 
            set {
                FrictionPresField = value;
                NotifyPropertyChanged("FrictionPres");
            }
        }

        private PressureMeasure FrictionPresField; 

        /// <summary>
        /// A coefficient used in the equation for calculation of pressure drop across a perforation set.
        /// </summary>
		[Description("A coefficient used in the equation for calculation of pressure drop across a perforation set.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("DischargeCoefficient")]
        public double? DischargeCoefficient {
            get {
                return DischargeCoefficientField;
            } 
            set {
                DischargeCoefficientField = value;
                 this.DischargeCoefficientSpecified = true;
                NotifyPropertyChanged("DischargeCoefficient");
            }
        }

        private double? DischargeCoefficientField; 

        /// <summary>
        /// DischargeCoefficientSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DischargeCoefficientSpecified {
            get {
                return DischargeCoefficientSpecifiedField;
            } 
            set {
                DischargeCoefficientSpecifiedField = value;
                NotifyPropertyChanged("DischargeCoefficientSpecified");
            }
        }

        private bool DischargeCoefficientSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the StimJob xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the StimJob xsd type.")]
    public partial class StimJob : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AvgJobPres property
        /// </summary>
		[Description("Average pressure encountered during treatment of all stages.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("AvgJobPres")]
        public PressureMeasure AvgJobPres {
            get {
                return AvgJobPresField;
            } 
            set {
                AvgJobPresField = value;
                NotifyPropertyChanged("AvgJobPres");
            }
        }

        private PressureMeasure AvgJobPresField; 

        /// <summary>
        /// BottomholeStaticTemperature property
        /// </summary>
		[Description("Bottomhole static temperature for the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("BottomholeStaticTemperature")]
        public ThermodynamicTemperatureMeasure BottomholeStaticTemperature {
            get {
                return BottomholeStaticTemperatureField;
            } 
            set {
                BottomholeStaticTemperatureField = value;
                NotifyPropertyChanged("BottomholeStaticTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure BottomholeStaticTemperatureField; 

        /// <summary>
        /// CustomerName property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Customer or company name.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("CustomerName")]
        public string CustomerName {
            get {
                return CustomerNameField;
            } 
            set {
                CustomerNameField = value;
                NotifyPropertyChanged("CustomerName");
            }
        }

        private string CustomerNameField; 

        /// <summary>
        /// DTimArrival property
        /// </summary>
		[Description("Date and time at which the stimulation contractor arrives on location.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimArrival")]
        public Timestamp? DateTimeArrival {
            get {
                return DTimArrivalField;
            } 
            set {
                DTimArrivalField = value;
                 this.DateTimeArrivalSpecified = true;
                NotifyPropertyChanged("DateTimeArrival");
            }
        }

        
        private bool DateTimeArrivalSpecifiedField = false;
        
        /// <summary>
        /// DateTimeArrivalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeArrivalSpecified {
            get {
                return DateTimeArrivalSpecifiedField;
            } 
            set {
                DateTimeArrivalSpecifiedField = value;
                NotifyPropertyChanged("DateTimeArrivalSpecified");
            }
        }
        
        private Timestamp? DTimArrivalField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Description("Ending date and time of the stimulation job.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        
        private bool DateTimeEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DateTimeEndSpecifiedField;
            } 
            set {
                DateTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }
        
        private Timestamp? DTimEndField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("Start date and time of the stimulation job.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// FlowBackPres property
        /// </summary>
		[Description("Pressure recorded on fluid returning to surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("FlowBackPres")]
        public PressureMeasure FlowBackPres {
            get {
                return FlowBackPresField;
            } 
            set {
                FlowBackPresField = value;
                NotifyPropertyChanged("FlowBackPres");
            }
        }

        private PressureMeasure FlowBackPresField; 

        /// <summary>
        /// FlowBackRate property
        /// </summary>
		[Description("Rate recorded on fluid returning to surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("FlowBackRate")]
        public VolumePerTimeMeasure FlowBackRate {
            get {
                return FlowBackRateField;
            } 
            set {
                FlowBackRateField = value;
                NotifyPropertyChanged("FlowBackRate");
            }
        }

        private VolumePerTimeMeasure FlowBackRateField; 

        /// <summary>
        /// FlowBackVolume property
        /// </summary>
		[Description("Volume recorded on fluid returning to surface.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("FlowBackVolume")]
        public VolumeMeasure FlowBackVolume {
            get {
                return FlowBackVolumeField;
            } 
            set {
                FlowBackVolumeField = value;
                NotifyPropertyChanged("FlowBackVolume");
            }
        }

        private VolumeMeasure FlowBackVolumeField; 

        /// <summary>
        /// FluidEfficiency property
        /// </summary>
		[Description("Percentage of fluid volume in the fracture at the end of pumping.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("FluidEfficiency")]
        public VolumePerVolumeMeasure FluidEfficiency {
            get {
                return FluidEfficiencyField;
            } 
            set {
                FluidEfficiencyField = value;
                NotifyPropertyChanged("FluidEfficiency");
            }
        }

        private VolumePerVolumeMeasure FluidEfficiencyField; 

        /// <summary>
        /// HhpOrdered property
        /// </summary>
		[Description("Hydraulic horsepower ordered for the stimulation job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("HhpOrdered")]
        public PowerMeasure HhpOrdered {
            get {
                return HhpOrderedField;
            } 
            set {
                HhpOrderedField = value;
                NotifyPropertyChanged("HhpOrdered");
            }
        }

        private PowerMeasure HhpOrderedField; 

        /// <summary>
        /// HhpUsed property
        /// </summary>
		[Description("Hydraulic horsepower actually used for the stimulation job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("HhpUsed")]
        public PowerMeasure HhpUsed {
            get {
                return HhpUsedField;
            } 
            set {
                HhpUsedField = value;
                NotifyPropertyChanged("HhpUsed");
            }
        }

        private PowerMeasure HhpUsedField; 

        /// <summary>
        /// JobPerforationClusters property
        /// </summary>
		[Description("Perforation clusters existing before starting the job.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimPerforationClusterSet")]
		[XmlArrayItem("StimPerforationCluster")]
        [XmlArray("JobPerforationClusters")]
        public List<StimPerforationCluster> JobPerforationClusters {
            get {
                return JobPerforationClustersField;
            } 
            set {
                JobPerforationClustersField = value;
                NotifyPropertyChanged("JobPerforationClusters");
            }
        }

         /// <summary>
         /// bool to indicate if JobPerforationClusters has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool JobPerforationClustersSpecified
         {
             get {
             if(JobPerforationClustersField!=null)
                 return JobPerforationClustersField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimPerforationCluster> JobPerforationClustersField; 

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Type of well stimulation job.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Kind")]
        public string Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string KindField; 

        /// <summary>
        /// MaxFluidRate property
        /// </summary>
		[Description("Maximum job fluid pumping rate encountered during treatment of all stages.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerTimeMeasure")]
		[XmlElement("MaxFluidRate")]
        public VolumePerTimeMeasure MaxFluidRate {
            get {
                return MaxFluidRateField;
            } 
            set {
                MaxFluidRateField = value;
                NotifyPropertyChanged("MaxFluidRate");
            }
        }

        private VolumePerTimeMeasure MaxFluidRateField; 

        /// <summary>
        /// MaxJobPres property
        /// </summary>
		[Description("Maximum pressure encountered during the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("MaxJobPres")]
        public PressureMeasure MaxJobPres {
            get {
                return MaxJobPresField;
            } 
            set {
                MaxJobPresField = value;
                NotifyPropertyChanged("MaxJobPres");
            }
        }

        private PressureMeasure MaxJobPresField; 

        /// <summary>
        /// PIDXCommodityCode property
        /// </summary>
		[Description("UNSPSC (Segment 71) commodity code from the oil and gas extraction and production enhancement services family.")]
        [EnergisticsDataTypeAttribute(DataType = "PIDXCommodityCode")]
		[XmlElement("PIDXCommodityCode")]
        public PIDXCommodityCode? PIDXCommodityCode {
            get {
                return PIDXCommodityCodeField;
            } 
            set {
                PIDXCommodityCodeField = value;
                 this.PIDXCommodityCodeSpecified = true;
                NotifyPropertyChanged("PIDXCommodityCode");
            }
        }

        private PIDXCommodityCode? PIDXCommodityCodeField; 

        /// <summary>
        /// PIDXCommodityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PIDXCommodityCodeSpecified {
            get {
                return PIDXCommodityCodeSpecifiedField;
            } 
            set {
                PIDXCommodityCodeSpecifiedField = value;
                NotifyPropertyChanged("PIDXCommodityCodeSpecified");
            }
        }

        private bool PIDXCommodityCodeSpecifiedField; 

        /// <summary>
        /// ServiceCompany property
        /// </summary>
		[Required]
        [StringLength(2000)]
        [Description("Name of the well stimulation contractor.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("ServiceCompany")]
        public string ServiceCompany {
            get {
                return ServiceCompanyField;
            } 
            set {
                ServiceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string ServiceCompanyField; 

        /// <summary>
        /// StageCount property
        /// </summary>
		[Description("Number of stages treated during the stimulation service.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("StageCount")]
        public long? StageCount {
            get {
                return StageCountField;
            } 
            set {
                StageCountField = value;
                 this.StageCountSpecified = true;
                NotifyPropertyChanged("StageCount");
            }
        }

        private long? StageCountField; 

        /// <summary>
        /// StageCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StageCountSpecified {
            get {
                return StageCountSpecifiedField;
            } 
            set {
                StageCountSpecifiedField = value;
                NotifyPropertyChanged("StageCountSpecified");
            }
        }

        private bool StageCountSpecifiedField; 

        /// <summary>
        /// Supervisor property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the service company supervisor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Supervisor")]
        public string Supervisor {
            get {
                return SupervisorField;
            } 
            set {
                SupervisorField = value;
                NotifyPropertyChanged("Supervisor");
            }
        }

        private string SupervisorField; 

        /// <summary>
        /// TotalJobVolume property
        /// </summary>
		[Description("Total volume pumped for all stages.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("TotalJobVolume")]
        public VolumeMeasure TotalJobVolume {
            get {
                return TotalJobVolumeField;
            } 
            set {
                TotalJobVolumeField = value;
                NotifyPropertyChanged("TotalJobVolume");
            }
        }

        private VolumeMeasure TotalJobVolumeField; 

        /// <summary>
        /// TotalProppantInFormation property
        /// </summary>
		[Description("The total mass of proppant placed in the formation for the entire job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("TotalProppantInFormation")]
        public MassMeasure TotalProppantInFormation {
            get {
                return TotalProppantInFormationField;
            } 
            set {
                TotalProppantInFormationField = value;
                NotifyPropertyChanged("TotalProppantInFormation");
            }
        }

        private MassMeasure TotalProppantInFormationField; 

        /// <summary>
        /// TotalProppantUsed property
        /// </summary>
		[Description("The name and amount of a proppant used during some time period in a performance enhancement job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassMeasure")]
		[XmlElement("TotalProppantUsed")]
        public MassMeasure TotalProppantUsed {
            get {
                return TotalProppantUsedField;
            } 
            set {
                TotalProppantUsedField = value;
                NotifyPropertyChanged("TotalProppantUsed");
            }
        }

        private MassMeasure TotalProppantUsedField; 

        /// <summary>
        /// TotalPumpTime property
        /// </summary>
		[Description("The total pumping time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("TotalPumpTime")]
        public TimeMeasure TotalPumpTime {
            get {
                return TotalPumpTimeField;
            } 
            set {
                TotalPumpTimeField = value;
                NotifyPropertyChanged("TotalPumpTime");
            }
        }

        private TimeMeasure TotalPumpTimeField; 

        /// <summary>
        /// TreatingBottomholeTemperature property
        /// </summary>
		[Description("Expected or calculated bottomhole treating temperature for the job.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureMeasure")]
		[XmlElement("TreatingBottomholeTemperature")]
        public ThermodynamicTemperatureMeasure TreatingBottomholeTemperature {
            get {
                return TreatingBottomholeTemperatureField;
            } 
            set {
                TreatingBottomholeTemperatureField = value;
                NotifyPropertyChanged("TreatingBottomholeTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure TreatingBottomholeTemperatureField; 

        /// <summary>
        /// JobStage property
        /// </summary>
		[Description("A stage treated during the stimulation job.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimJobStage")]
		[XmlElement("JobStage")]
        public List<StimJobStage> JobStage {
            get {
                return JobStageField;
            } 
            set {
                JobStageField = value;
                NotifyPropertyChanged("JobStage");
            }
        }

         /// <summary>
         /// bool to indicate if JobStage has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool JobStageSpecified
         {
             get {
             if(JobStageField!=null)
                 return JobStageField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimJobStage> JobStageField; 

        /// <summary>
        /// MaterialUsed property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimMaterialQuantity")]
		[XmlElement("MaterialUsed")]
        public List<StimMaterialQuantity> MaterialUsed {
            get {
                return MaterialUsedField;
            } 
            set {
                MaterialUsedField = value;
                NotifyPropertyChanged("MaterialUsed");
            }
        }

         /// <summary>
         /// bool to indicate if MaterialUsed has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MaterialUsedSpecified
         {
             get {
             if(MaterialUsedField!=null)
                 return MaterialUsedField.Count>0?true:false;
             else return false;
             }
         }
        private List<StimMaterialQuantity> MaterialUsedField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// MaterialCatalog property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "StimJobMaterialCatalog")]
		[XmlElement("MaterialCatalog")]
        public StimJobMaterialCatalog MaterialCatalog {
            get {
                return MaterialCatalogField;
            } 
            set {
                MaterialCatalogField = value;
                NotifyPropertyChanged("MaterialCatalog");
            }
        }

        private StimJobMaterialCatalog MaterialCatalogField; 

        /// <summary>
        /// LogCatalog property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StimJobLogCatalog")]
		[XmlArrayItem("JobLog")]
        [XmlArray("LogCatalog")]
        public List<List<DataObjectReference>> LogCatalog {
            get {
                return LogCatalogField;
            } 
            set {
                LogCatalogField = value;
                NotifyPropertyChanged("LogCatalog");
            }
        }

         /// <summary>
         /// bool to indicate if LogCatalog has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogCatalogSpecified
         {
             get {
             if(LogCatalogField!=null)
                 return LogCatalogField.Count>0?true:false;
             else return false;
             }
         }
        private List<List<DataObjectReference>> LogCatalogField; 


    } //here

    /// <summary>
    /// This class represents the Risk xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Risk xsd type.")]
    public partial class Risk : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Type property
        /// </summary>
		[Required]
        [Description("The type of risk.")]
        [EnergisticsDataTypeAttribute(DataType = "RiskType")]
		[XmlElement("Type")]
        public RiskType? Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        
        private bool TypeSpecifiedField = false;
        
        /// <summary>
        /// TypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return TypeSpecifiedField;
            } 
            set {
                TypeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }
        
        private RiskType? TypeField; 

        /// <summary>
        /// Category property
        /// </summary>
		[Required]
        [Description("The category of risk.")]
        [EnergisticsDataTypeAttribute(DataType = "RiskCategory")]
		[XmlElement("Category")]
        public RiskCategory? Category {
            get {
                return CategoryField;
            } 
            set {
                CategoryField = value;
                 this.CategorySpecified = true;
                NotifyPropertyChanged("Category");
            }
        }

        
        private bool CategorySpecifiedField = false;
        
        /// <summary>
        /// CategorySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CategorySpecified {
            get {
                return CategorySpecifiedField;
            } 
            set {
                CategorySpecifiedField = value;
                NotifyPropertyChanged("CategorySpecified");
            }
        }
        
        private RiskCategory? CategoryField; 

        /// <summary>
        /// SubCategory property
        /// </summary>
		[Description("The sub category of risk.")]
        [EnergisticsDataTypeAttribute(DataType = "RiskSubCategory")]
		[XmlElement("SubCategory")]
        public RiskSubCategory? SubCategory {
            get {
                return SubCategoryField;
            } 
            set {
                SubCategoryField = value;
                 this.SubCategorySpecified = true;
                NotifyPropertyChanged("SubCategory");
            }
        }

        private RiskSubCategory? SubCategoryField; 

        /// <summary>
        /// SubCategorySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SubCategorySpecified {
            get {
                return SubCategorySpecifiedField;
            } 
            set {
                SubCategorySpecifiedField = value;
                NotifyPropertyChanged("SubCategorySpecified");
            }
        }

        private bool SubCategorySpecifiedField; 

        /// <summary>
        /// ExtendCategory property
        /// </summary>
		[StringLength(64)]
        [Description("Custom string to further categorize the risk.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ExtendCategory")]
        public string ExtendCategory {
            get {
                return ExtendCategoryField;
            } 
            set {
                ExtendCategoryField = value;
                NotifyPropertyChanged("ExtendCategory");
            }
        }

        private string ExtendCategoryField; 

        /// <summary>
        /// AffectedPersonnel property
        /// </summary>
		[Description("The personnel affected by the risk.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "RiskAffectedPersonnel")]
		[XmlElement("AffectedPersonnel")]
        public List<RiskAffectedPersonnel> AffectedPersonnel {
            get {
                return AffectedPersonnelField;
            } 
            set {
                AffectedPersonnelField = value;
                NotifyPropertyChanged("AffectedPersonnel");
            }
        }

         /// <summary>
         /// bool to indicate if AffectedPersonnel has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AffectedPersonnelSpecified
         {
             get {
             if(AffectedPersonnelField!=null)
                 return AffectedPersonnelField.Count>0?true:false;
             else return false;
             }
         }
        private List<RiskAffectedPersonnel> AffectedPersonnelField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("Date and time that activities (related to the risk) started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Description("Date and time that activities (related to the risk) were completed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        
        private bool DateTimeEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DateTimeEndSpecifiedField;
            } 
            set {
                DateTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }
        
        private Timestamp? DTimEndField; 

        /// <summary>
        /// MdHoleStart property
        /// </summary>
		[Description("Measured Depth at the start of the activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdHoleStart")]
        public MeasuredDepthCoord MDHoleStart {
            get {
                return MdHoleStartField;
            } 
            set {
                MdHoleStartField = value;
                NotifyPropertyChanged("MDHoleStart");
            }
        }

        private MeasuredDepthCoord MdHoleStartField; 

        /// <summary>
        /// MdHoleEnd property
        /// </summary>
		[Description("Measured Depth at the end of the activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdHoleEnd")]
        public MeasuredDepthCoord MDHoleEnd {
            get {
                return MdHoleEndField;
            } 
            set {
                MdHoleEndField = value;
                NotifyPropertyChanged("MDHoleEnd");
            }
        }

        private MeasuredDepthCoord MdHoleEndField; 

        /// <summary>
        /// TvdHoleStart property
        /// </summary>
		[Description("True vertical depth at the start of the activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdHoleStart")]
        public WellVerticalDepthCoord TvdHoleStart {
            get {
                return TvdHoleStartField;
            } 
            set {
                TvdHoleStartField = value;
                NotifyPropertyChanged("TvdHoleStart");
            }
        }

        private WellVerticalDepthCoord TvdHoleStartField; 

        /// <summary>
        /// TvdHoleEnd property
        /// </summary>
		[Description("True vertical depth at the end of the activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdHoleEnd")]
        public WellVerticalDepthCoord TvdHoleEnd {
            get {
                return TvdHoleEndField;
            } 
            set {
                TvdHoleEndField = value;
                NotifyPropertyChanged("TvdHoleEnd");
            }
        }

        private WellVerticalDepthCoord TvdHoleEndField; 

        /// <summary>
        /// MdBitStart property
        /// </summary>
		[Description("Measured depth of the bit at the start of the activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBitStart")]
        public MeasuredDepthCoord MDBitStart {
            get {
                return MdBitStartField;
            } 
            set {
                MdBitStartField = value;
                NotifyPropertyChanged("MDBitStart");
            }
        }

        private MeasuredDepthCoord MdBitStartField; 

        /// <summary>
        /// MdBitEnd property
        /// </summary>
		[Description("Measured depth of the bit at the end of the activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBitEnd")]
        public MeasuredDepthCoord MDBitEnd {
            get {
                return MdBitEndField;
            } 
            set {
                MdBitEndField = value;
                NotifyPropertyChanged("MDBitEnd");
            }
        }

        private MeasuredDepthCoord MdBitEndField; 

        /// <summary>
        /// DiaHole property
        /// </summary>
		[Description("Hole diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaHole")]
        public LengthMeasure DiaHole {
            get {
                return DiaHoleField;
            } 
            set {
                DiaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure DiaHoleField; 

        /// <summary>
        /// SeverityLevel property
        /// </summary>
		[Range(0, 8)]
        [Description("Severity level of the risk. Values of 1 through 5, with 1 being the lowest risk level.")]
        [EnergisticsDataTypeAttribute(DataType = "LevelIntegerCode")]
		[XmlElement("SeverityLevel")]
        public short? SeverityLevel {
            get {
                return SeverityLevelField;
            } 
            set {
                SeverityLevelField = value;
                 this.SeverityLevelSpecified = true;
                NotifyPropertyChanged("SeverityLevel");
            }
        }

        private short? SeverityLevelField; 

        /// <summary>
        /// SeverityLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SeverityLevelSpecified {
            get {
                return SeverityLevelSpecifiedField;
            } 
            set {
                SeverityLevelSpecifiedField = value;
                NotifyPropertyChanged("SeverityLevelSpecified");
            }
        }

        private bool SeverityLevelSpecifiedField; 

        /// <summary>
        /// ProbabilityLevel property
        /// </summary>
		[Range(0, 8)]
        [Description("Probability level of the risk occurring. Values of 1 through 5, with 1 being the lowest probability.")]
        [EnergisticsDataTypeAttribute(DataType = "LevelIntegerCode")]
		[XmlElement("ProbabilityLevel")]
        public short? ProbabilityLevel {
            get {
                return ProbabilityLevelField;
            } 
            set {
                ProbabilityLevelField = value;
                 this.ProbabilityLevelSpecified = true;
                NotifyPropertyChanged("ProbabilityLevel");
            }
        }

        private short? ProbabilityLevelField; 

        /// <summary>
        /// ProbabilityLevelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProbabilityLevelSpecified {
            get {
                return ProbabilityLevelSpecifiedField;
            } 
            set {
                ProbabilityLevelSpecifiedField = value;
                NotifyPropertyChanged("ProbabilityLevelSpecified");
            }
        }

        private bool ProbabilityLevelSpecifiedField; 

        /// <summary>
        /// Summary property
        /// </summary>
		[StringLength(2000)]
        [Description("Summary description of the risk.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Summary")]
        public string Summary {
            get {
                return SummaryField;
            } 
            set {
                SummaryField = value;
                NotifyPropertyChanged("Summary");
            }
        }

        private string SummaryField; 

        /// <summary>
        /// Details property
        /// </summary>
		[StringLength(2000)]
        [Description("Complete description of the risk.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Details")]
        public string Details {
            get {
                return DetailsField;
            } 
            set {
                DetailsField = value;
                NotifyPropertyChanged("Details");
            }
        }

        private string DetailsField; 

        /// <summary>
        /// Identification property
        /// </summary>
		[StringLength(2000)]
        [Description("Details for identifying the risk.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Identification")]
        public string Identification {
            get {
                return IdentificationField;
            } 
            set {
                IdentificationField = value;
                NotifyPropertyChanged("Identification");
            }
        }

        private string IdentificationField; 

        /// <summary>
        /// Contingency property
        /// </summary>
		[StringLength(2000)]
        [Description("Plan of action if the risk materializes.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Contingency")]
        public string Contingency {
            get {
                return ContingencyField;
            } 
            set {
                ContingencyField = value;
                NotifyPropertyChanged("Contingency");
            }
        }

        private string ContingencyField; 

        /// <summary>
        /// Mitigation property
        /// </summary>
		[Description("Plan of action to ensure the risk does not materialize.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Mitigation")]
        public List<string> Mitigation {
            get {
                return MitigationField;
            } 
            set {
                MitigationField = value;
                NotifyPropertyChanged("Mitigation");
            }
        }

         /// <summary>
         /// bool to indicate if Mitigation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MitigationSpecified
         {
             get {
             if(MitigationField!=null)
                 return MitigationField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> MitigationField; 

        /// <summary>
        /// ObjectReference property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ObjectReference")]
        public List<DataObjectReference> ObjectReference {
            get {
                return ObjectReferenceField;
            } 
            set {
                ObjectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

         /// <summary>
         /// bool to indicate if ObjectReference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ObjectReferenceSpecified
         {
             get {
             if(ObjectReferenceField!=null)
                 return ObjectReferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> ObjectReferenceField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the Rig xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Rig xsd type.")]
    public partial class Rig : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the company that owns the rig.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the company that owns the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Owner")]
        public string Owner {
            get {
                return OwnerField;
            } 
            set {
                OwnerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string OwnerField; 

        /// <summary>
        /// The type of rig (e.g., semi-submersible, jack-up, etc.) 
        /// </summary>
		[Description("The type of rig (e.g., semi-submersible, jack-up, etc.)")]
        [EnergisticsDataTypeAttribute(DataType = "RigType")]
		[XmlElement("TypeRig")]
        public RigType? TypeRig {
            get {
                return TypeRigField;
            } 
            set {
                TypeRigField = value;
                 this.TypeRigSpecified = true;
                NotifyPropertyChanged("TypeRig");
            }
        }

        private RigType? TypeRigField; 

        /// <summary>
        /// TypeRigSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeRigSpecified {
            get {
                return TypeRigSpecifiedField;
            } 
            set {
                TypeRigSpecifiedField = value;
                NotifyPropertyChanged("TypeRigSpecified");
            }
        }

        private bool TypeRigSpecifiedField; 

        /// <summary>
        /// The company that manufactured the rig.
        /// </summary>
		[StringLength(64)]
        [Description("The company that manufactured the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Manufacturer")]
        public string Manufacturer {
            get {
                return ManufacturerField;
            } 
            set {
                ManufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string ManufacturerField; 

        /// <summary>
        /// The year the rig entered service. 
        /// </summary>
		[Description("The year the rig entered service.")]
        [EnergisticsDataTypeAttribute(DataType = "gYear")]
		[XmlElement("YearEntService", DataType="gYear")]
        public string YearEntService {
            get {
                return YearEntServiceField;
            } 
            set {
                YearEntServiceField = value;
                NotifyPropertyChanged("YearEntService");
            }
        }

        private string YearEntServiceField; 

        /// <summary>
        /// Classification of the rig. 
        /// </summary>
		[StringLength(64)]
        [Description("Classification of the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ClassRig")]
        public string ClassRig {
            get {
                return ClassRigField;
            } 
            set {
                ClassRigField = value;
                NotifyPropertyChanged("ClassRig");
            }
        }

        private string ClassRigField; 

        /// <summary>
        /// Rig approvals/certification.
        /// </summary>
		[StringLength(64)]
        [Description("Rig approvals/certification.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Approvals")]
        public string Approvals {
            get {
                return ApprovalsField;
            } 
            set {
                ApprovalsField = value;
                NotifyPropertyChanged("Approvals");
            }
        }

        private string ApprovalsField; 

        /// <summary>
        /// Rig registration location.
        /// </summary>
		[StringLength(64)]
        [Description("Rig registration location.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Registration")]
        public string Registration {
            get {
                return RegistrationField;
            } 
            set {
                RegistrationField = value;
                NotifyPropertyChanged("Registration");
            }
        }

        private string RegistrationField; 

        /// <summary>
        /// Telephone number on the rig.
        /// </summary>
		[StringLength(64)]
        [Description("Telephone number on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TelNumber")]
        public string TelNumber {
            get {
                return TelNumberField;
            } 
            set {
                TelNumberField = value;
                NotifyPropertyChanged("TelNumber");
            }
        }

        private string TelNumberField; 

        /// <summary>
        /// Fax number on the rig. 
        /// </summary>
		[StringLength(64)]
        [Description("Fax number on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FaxNumber")]
        public string FaxNumber {
            get {
                return FaxNumberField;
            } 
            set {
                FaxNumberField = value;
                NotifyPropertyChanged("FaxNumber");
            }
        }

        private string FaxNumberField; 

        /// <summary>
        /// Email address of the contact person. 
        /// </summary>
		[StringLength(64)]
        [Description("Email address of the contact person.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("EmailAddress")]
        public string EmailAddress {
            get {
                return EmailAddressField;
            } 
            set {
                EmailAddressField = value;
                NotifyPropertyChanged("EmailAddress");
            }
        }

        private string EmailAddressField; 

        /// <summary>
        /// Name of the contact person. 
        /// </summary>
		[StringLength(64)]
        [Description("Name of the contact person.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameContact")]
        public string NameContact {
            get {
                return NameContactField;
            } 
            set {
                NameContactField = value;
                NotifyPropertyChanged("NameContact");
            }
        }

        private string NameContactField; 

        /// <summary>
        /// Maximum hole depth rating for the rig.
        /// </summary>
		[Description("Maximum hole depth rating for the rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("RatingDrillDepth")]
        public LengthMeasure RatingDrillDepth {
            get {
                return RatingDrillDepthField;
            } 
            set {
                RatingDrillDepthField = value;
                NotifyPropertyChanged("RatingDrillDepth");
            }
        }

        private LengthMeasure RatingDrillDepthField; 

        /// <summary>
        /// Maximum water depth rating for the rig.
        /// </summary>
		[Description("Maximum water depth rating for the rig.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("RatingWaterDepth")]
        public LengthMeasure RatingWaterDepth {
            get {
                return RatingWaterDepthField;
            } 
            set {
                RatingWaterDepthField = value;
                NotifyPropertyChanged("RatingWaterDepth");
            }
        }

        private LengthMeasure RatingWaterDepthField; 

        /// <summary>
        /// Flag to indicate that the rig is an offshore rig (drill ship, semi-submersible, jack-up, platform, TADU). Values are "true" (or "1") and "false" (or "0").
        /// </summary>
		[Description("Flag to indicate that the rig is an offshore rig (drill ship, semi-submersible, jack-up, platform, TADU).  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsOffshore")]
        public bool? IsOffshore {
            get {
                return IsOffshoreField;
            } 
            set {
                IsOffshoreField = value;
                 this.IsOffshoreSpecified = true;
                NotifyPropertyChanged("IsOffshore");
            }
        }

        private bool? IsOffshoreField; 

        /// <summary>
        /// IsOffshoreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsOffshoreSpecified {
            get {
                return IsOffshoreSpecifiedField;
            } 
            set {
                IsOffshoreSpecifiedField = value;
                NotifyPropertyChanged("IsOffshoreSpecified");
            }
        }

        private bool IsOffshoreSpecifiedField; 

        /// <summary>
        /// Derrick type.
        /// </summary>
		[Description("Derrick type.")]
        [EnergisticsDataTypeAttribute(DataType = "DerrickType")]
		[XmlElement("TypeDerrick")]
        public DerrickType? TypeDerrick {
            get {
                return TypeDerrickField;
            } 
            set {
                TypeDerrickField = value;
                 this.TypeDerrickSpecified = true;
                NotifyPropertyChanged("TypeDerrick");
            }
        }

        private DerrickType? TypeDerrickField; 

        /// <summary>
        /// TypeDerrickSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeDerrickSpecified {
            get {
                return TypeDerrickSpecifiedField;
            } 
            set {
                TypeDerrickSpecifiedField = value;
                NotifyPropertyChanged("TypeDerrickSpecified");
            }
        }

        private bool TypeDerrickSpecifiedField; 

        /// <summary>
        /// Derrick rating. 
        /// </summary>
		[Description("Derrick rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("RatingDerrick")]
        public ForceMeasure RatingDerrick {
            get {
                return RatingDerrickField;
            } 
            set {
                RatingDerrickField = value;
                NotifyPropertyChanged("RatingDerrick");
            }
        }

        private ForceMeasure RatingDerrickField; 

        /// <summary>
        /// Height of the derrick.
        /// </summary>
		[Description("Height of the derrick.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HtDerrick")]
        public LengthMeasure HeightDerrick {
            get {
                return HtDerrickField;
            } 
            set {
                HtDerrickField = value;
                NotifyPropertyChanged("HeightDerrick");
            }
        }

        private LengthMeasure HtDerrickField; 

        /// <summary>
        /// Derrick wind capacity.
        /// </summary>
		[Description("Derrick wind capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("CapWindDerrick")]
        public LengthPerTimeMeasure CapWindDerrick {
            get {
                return CapWindDerrickField;
            } 
            set {
                CapWindDerrickField = value;
                NotifyPropertyChanged("CapWindDerrick");
            }
        }

        private LengthPerTimeMeasure CapWindDerrickField; 

        /// <summary>
        /// Number of cranes on the rig. 
        /// </summary>
		[Description("Number of cranes on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumCranes")]
        public int? NumCranes {
            get {
                return NumCranesField;
            } 
            set {
                NumCranesField = value;
                 this.NumCranesSpecified = true;
                NotifyPropertyChanged("NumCranes");
            }
        }

        private int? NumCranesField; 

        /// <summary>
        /// NumCranesSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumCranesSpecified {
            get {
                return NumCranesSpecifiedField;
            } 
            set {
                NumCranesSpecifiedField = value;
                NotifyPropertyChanged("NumCranesSpecified");
            }
        }

        private bool NumCranesSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the RigUtilization xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the RigUtilization xsd type.")]
    public partial class RigUtilization : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// StartOperationTime property
        /// </summary>
		[Description("Start time of the operation in which the rig was used.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("StartOperationTime")]
        public Timestamp? StartOperationTime {
            get {
                return StartOperationTimeField;
            } 
            set {
                StartOperationTimeField = value;
                 this.StartOperationTimeSpecified = true;
                NotifyPropertyChanged("StartOperationTime");
            }
        }

        
        private bool StartOperationTimeSpecifiedField = false;
        
        /// <summary>
        /// StartOperationTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartOperationTimeSpecified {
            get {
                return StartOperationTimeSpecifiedField;
            } 
            set {
                StartOperationTimeSpecifiedField = value;
                NotifyPropertyChanged("StartOperationTimeSpecified");
            }
        }
        
        private Timestamp? StartOperationTimeField; 

        /// <summary>
        /// EndOperationTime property
        /// </summary>
		[Description("End time of the operation in which the rig was used.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("EndOperationTime")]
        public Timestamp? EndOperationTime {
            get {
                return EndOperationTimeField;
            } 
            set {
                EndOperationTimeField = value;
                 this.EndOperationTimeSpecified = true;
                NotifyPropertyChanged("EndOperationTime");
            }
        }

        
        private bool EndOperationTimeSpecifiedField = false;
        
        /// <summary>
        /// EndOperationTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndOperationTimeSpecified {
            get {
                return EndOperationTimeSpecifiedField;
            } 
            set {
                EndOperationTimeSpecifiedField = value;
                NotifyPropertyChanged("EndOperationTimeSpecified");
            }
        }
        
        private Timestamp? EndOperationTimeField; 

        /// <summary>
        /// StartHoleDepth property
        /// </summary>
		[Description("Measured depth of the wellbore when operations performed with this rig started.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("StartHoleDepth")]
        public LengthMeasure StartHoleDepth {
            get {
                return StartHoleDepthField;
            } 
            set {
                StartHoleDepthField = value;
                NotifyPropertyChanged("StartHoleDepth");
            }
        }

        private LengthMeasure StartHoleDepthField; 

        /// <summary>
        /// EndHoleDepth property
        /// </summary>
		[Description("Measured depth of the wellbore when operations performed with this rig ended.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("EndHoleDepth")]
        public LengthMeasure EndHoleDepth {
            get {
                return EndHoleDepthField;
            } 
            set {
                EndHoleDepthField = value;
                NotifyPropertyChanged("EndHoleDepth");
            }
        }

        private LengthMeasure EndHoleDepthField; 

        /// <summary>
        /// Datum property
        /// </summary>
		[StringLength(64)]
        [Description("Datum for location reference.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Datum")]
        public string Datum {
            get {
                return DatumField;
            } 
            set {
                DatumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string DatumField; 

        /// <summary>
        /// AirGap property
        /// </summary>
		[Description("Air gap from the rig floor to the ground or mean sea level, depending on the rig location.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("AirGap")]
        public LengthMeasure AirGap {
            get {
                return AirGapField;
            } 
            set {
                AirGapField = value;
                NotifyPropertyChanged("AirGap");
            }
        }

        private LengthMeasure AirGapField; 

        /// <summary>
        /// WtBlock property
        /// </summary>
		[Description("Weight of the block.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("WtBlock")]
        public ForceMeasure WeightBlock {
            get {
                return WtBlockField;
            } 
            set {
                WtBlockField = value;
                NotifyPropertyChanged("WeightBlock");
            }
        }

        private ForceMeasure WtBlockField; 

        /// <summary>
        /// RatingBlock property
        /// </summary>
		[Description("Rating for the block.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("RatingBlock")]
        public ForceMeasure RatingBlock {
            get {
                return RatingBlockField;
            } 
            set {
                RatingBlockField = value;
                NotifyPropertyChanged("RatingBlock");
            }
        }

        private ForceMeasure RatingBlockField; 

        /// <summary>
        /// NumBlockLines property
        /// </summary>
		[Description("Number of block lines.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumBlockLines")]
        public int? NumBlockLines {
            get {
                return NumBlockLinesField;
            } 
            set {
                NumBlockLinesField = value;
                 this.NumBlockLinesSpecified = true;
                NotifyPropertyChanged("NumBlockLines");
            }
        }

        private int? NumBlockLinesField; 

        /// <summary>
        /// NumBlockLinesSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumBlockLinesSpecified {
            get {
                return NumBlockLinesSpecifiedField;
            } 
            set {
                NumBlockLinesSpecifiedField = value;
                NotifyPropertyChanged("NumBlockLinesSpecified");
            }
        }

        private bool NumBlockLinesSpecifiedField; 

        /// <summary>
        /// TypeHook property
        /// </summary>
		[StringLength(64)]
        [Description("Type of hook installed for this rig usage.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeHook")]
        public string TypeHook {
            get {
                return TypeHookField;
            } 
            set {
                TypeHookField = value;
                NotifyPropertyChanged("TypeHook");
            }
        }

        private string TypeHookField; 

        /// <summary>
        /// RatingHkld property
        /// </summary>
		[Description("Maximum weight rating of the hook as configured for this rig usage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("RatingHkld")]
        public ForceMeasure RatingHookload {
            get {
                return RatingHkldField;
            } 
            set {
                RatingHkldField = value;
                NotifyPropertyChanged("RatingHookload");
            }
        }

        private ForceMeasure RatingHkldField; 

        /// <summary>
        /// SizeDrillLine property
        /// </summary>
		[Description("Drill line diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SizeDrillLine")]
        public LengthMeasure SizeDrillLine {
            get {
                return SizeDrillLineField;
            } 
            set {
                SizeDrillLineField = value;
                NotifyPropertyChanged("SizeDrillLine");
            }
        }

        private LengthMeasure SizeDrillLineField; 

        /// <summary>
        /// TypeDrawWorks property
        /// </summary>
		[Description("Draw works type.")]
        [EnergisticsDataTypeAttribute(DataType = "DrawWorksType")]
		[XmlElement("TypeDrawWorks")]
        public DrawWorksType? TypeDrawWorks {
            get {
                return TypeDrawWorksField;
            } 
            set {
                TypeDrawWorksField = value;
                 this.TypeDrawWorksSpecified = true;
                NotifyPropertyChanged("TypeDrawWorks");
            }
        }

        private DrawWorksType? TypeDrawWorksField; 

        /// <summary>
        /// TypeDrawWorksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeDrawWorksSpecified {
            get {
                return TypeDrawWorksSpecifiedField;
            } 
            set {
                TypeDrawWorksSpecifiedField = value;
                NotifyPropertyChanged("TypeDrawWorksSpecified");
            }
        }

        private bool TypeDrawWorksSpecifiedField; 

        /// <summary>
        /// PowerDrawWorks property
        /// </summary>
		[Description("Draw works horse power.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PowerMeasure")]
		[XmlElement("PowerDrawWorks")]
        public PowerMeasure PowerDrawWorks {
            get {
                return PowerDrawWorksField;
            } 
            set {
                PowerDrawWorksField = value;
                NotifyPropertyChanged("PowerDrawWorks");
            }
        }

        private PowerMeasure PowerDrawWorksField; 

        /// <summary>
        /// RatingDrawWorks property
        /// </summary>
		[Description("Weight rating of the draw works.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("RatingDrawWorks")]
        public ForceMeasure RatingDrawWorks {
            get {
                return RatingDrawWorksField;
            } 
            set {
                RatingDrawWorksField = value;
                NotifyPropertyChanged("RatingDrawWorks");
            }
        }

        private ForceMeasure RatingDrawWorksField; 

        /// <summary>
        /// MotorDrawWorks property
        /// </summary>
		[StringLength(64)]
        [Description("Description of the draw works motor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MotorDrawWorks")]
        public string MotorDrawWorks {
            get {
                return MotorDrawWorksField;
            } 
            set {
                MotorDrawWorksField = value;
                NotifyPropertyChanged("MotorDrawWorks");
            }
        }

        private string MotorDrawWorksField; 

        /// <summary>
        /// DescBrake property
        /// </summary>
		[StringLength(64)]
        [Description("Rig brake description.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DescBrake")]
        public string DescBrake {
            get {
                return DescBrakeField;
            } 
            set {
                DescBrakeField = value;
                NotifyPropertyChanged("DescBrake");
            }
        }

        private string DescBrakeField; 

        /// <summary>
        /// TypeSwivel property
        /// </summary>
		[StringLength(64)]
        [Description("Type of swivel.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeSwivel")]
        public string TypeSwivel {
            get {
                return TypeSwivelField;
            } 
            set {
                TypeSwivelField = value;
                NotifyPropertyChanged("TypeSwivel");
            }
        }

        private string TypeSwivelField; 

        /// <summary>
        /// RatingSwivel property
        /// </summary>
		[Description("Maximum swivel rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("RatingSwivel")]
        public ForceMeasure RatingSwivel {
            get {
                return RatingSwivelField;
            } 
            set {
                RatingSwivelField = value;
                NotifyPropertyChanged("RatingSwivel");
            }
        }

        private ForceMeasure RatingSwivelField; 

        /// <summary>
        /// RotSystem property
        /// </summary>
		[Description("Work string drive type.")]
        [EnergisticsDataTypeAttribute(DataType = "DriveType")]
		[XmlElement("RotSystem")]
        public DriveType? RotSystem {
            get {
                return RotSystemField;
            } 
            set {
                RotSystemField = value;
                 this.RotSystemSpecified = true;
                NotifyPropertyChanged("RotSystem");
            }
        }

        private DriveType? RotSystemField; 

        /// <summary>
        /// RotSystemSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RotSystemSpecified {
            get {
                return RotSystemSpecifiedField;
            } 
            set {
                RotSystemSpecifiedField = value;
                NotifyPropertyChanged("RotSystemSpecified");
            }
        }

        private bool RotSystemSpecifiedField; 

        /// <summary>
        /// DescRotSystem property
        /// </summary>
		[StringLength(64)]
        [Description("Description of rotating system.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DescRotSystem")]
        public string DescRotSystem {
            get {
                return DescRotSystemField;
            } 
            set {
                DescRotSystemField = value;
                NotifyPropertyChanged("DescRotSystem");
            }
        }

        private string DescRotSystemField; 

        /// <summary>
        /// RatingTqRotSys property
        /// </summary>
		[Description("Work string rotational torque rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MomentOfForceMeasure")]
		[XmlElement("RatingTqRotSys")]
        public MomentOfForceMeasure RatingTorqueRotSys {
            get {
                return RatingTqRotSysField;
            } 
            set {
                RatingTqRotSysField = value;
                NotifyPropertyChanged("RatingTorqueRotSys");
            }
        }

        private MomentOfForceMeasure RatingTqRotSysField; 

        /// <summary>
        /// RotSizeOpening property
        /// </summary>
		[Description("Rotary size opening.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("RotSizeOpening")]
        public LengthMeasure RotSizeOpening {
            get {
                return RotSizeOpeningField;
            } 
            set {
                RotSizeOpeningField = value;
                NotifyPropertyChanged("RotSizeOpening");
            }
        }

        private LengthMeasure RotSizeOpeningField; 

        /// <summary>
        /// RatingRotSystem property
        /// </summary>
		[Description("Work string rotational torque rating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("RatingRotSystem")]
        public ForceMeasure RatingRotSystem {
            get {
                return RatingRotSystemField;
            } 
            set {
                RatingRotSystemField = value;
                NotifyPropertyChanged("RatingRotSystem");
            }
        }

        private ForceMeasure RatingRotSystemField; 

        /// <summary>
        /// ScrSystem property
        /// </summary>
		[StringLength(64)]
        [Description("Description of slow circulation rates (SCR) system.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ScrSystem")]
        public string ScrSystem {
            get {
                return ScrSystemField;
            } 
            set {
                ScrSystemField = value;
                NotifyPropertyChanged("ScrSystem");
            }
        }

        private string ScrSystemField; 

        /// <summary>
        /// PipeHandlingSystem property
        /// </summary>
		[StringLength(64)]
        [Description("Name of pipe-handling system.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PipeHandlingSystem")]
        public string PipeHandlingSystem {
            get {
                return PipeHandlingSystemField;
            } 
            set {
                PipeHandlingSystemField = value;
                NotifyPropertyChanged("PipeHandlingSystem");
            }
        }

        private string PipeHandlingSystemField; 

        /// <summary>
        /// CapBulkMud property
        /// </summary>
		[Description("Bulk/dry mud storage capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CapBulkMud")]
        public VolumeMeasure CapBulkMud {
            get {
                return CapBulkMudField;
            } 
            set {
                CapBulkMudField = value;
                NotifyPropertyChanged("CapBulkMud");
            }
        }

        private VolumeMeasure CapBulkMudField; 

        /// <summary>
        /// CapLiquidMud property
        /// </summary>
		[Description("Liquid mud storage capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CapLiquidMud")]
        public VolumeMeasure CapLiquidMud {
            get {
                return CapLiquidMudField;
            } 
            set {
                CapLiquidMudField = value;
                NotifyPropertyChanged("CapLiquidMud");
            }
        }

        private VolumeMeasure CapLiquidMudField; 

        /// <summary>
        /// CapDrillWater property
        /// </summary>
		[Description("Drill water capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CapDrillWater")]
        public VolumeMeasure CapDrillWater {
            get {
                return CapDrillWaterField;
            } 
            set {
                CapDrillWaterField = value;
                NotifyPropertyChanged("CapDrillWater");
            }
        }

        private VolumeMeasure CapDrillWaterField; 

        /// <summary>
        /// CapPotableWater property
        /// </summary>
		[Description("Potable water capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CapPotableWater")]
        public VolumeMeasure CapPotableWater {
            get {
                return CapPotableWaterField;
            } 
            set {
                CapPotableWaterField = value;
                NotifyPropertyChanged("CapPotableWater");
            }
        }

        private VolumeMeasure CapPotableWaterField; 

        /// <summary>
        /// CapFuel property
        /// </summary>
		[Description("Fuel capacity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CapFuel")]
        public VolumeMeasure CapFuel {
            get {
                return CapFuelField;
            } 
            set {
                CapFuelField = value;
                NotifyPropertyChanged("CapFuel");
            }
        }

        private VolumeMeasure CapFuelField; 

        /// <summary>
        /// CapBulkCement property
        /// </summary>
		[Description("Capacity of bulk cement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("CapBulkCement")]
        public VolumeMeasure CapBulkCement {
            get {
                return CapBulkCementField;
            } 
            set {
                CapBulkCementField = value;
                NotifyPropertyChanged("CapBulkCement");
            }
        }

        private VolumeMeasure CapBulkCementField; 

        /// <summary>
        /// MainEngine property
        /// </summary>
		[StringLength(64)]
        [Description("Power system.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MainEngine")]
        public string MainEngine {
            get {
                return MainEngineField;
            } 
            set {
                MainEngineField = value;
                NotifyPropertyChanged("MainEngine");
            }
        }

        private string MainEngineField; 

        /// <summary>
        /// Generator property
        /// </summary>
		[StringLength(64)]
        [Description("Description of the electrical power generating system.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Generator")]
        public string Generator {
            get {
                return GeneratorField;
            } 
            set {
                GeneratorField = value;
                NotifyPropertyChanged("Generator");
            }
        }

        private string GeneratorField; 

        /// <summary>
        /// CementUnit property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the cement unit on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CementUnit")]
        public string CementUnit {
            get {
                return CementUnitField;
            } 
            set {
                CementUnitField = value;
                NotifyPropertyChanged("CementUnit");
            }
        }

        private string CementUnitField; 

        /// <summary>
        /// NumBunks property
        /// </summary>
		[Description("Number of beds available on the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumBunks")]
        public int? NumBunks {
            get {
                return NumBunksField;
            } 
            set {
                NumBunksField = value;
                 this.NumBunksSpecified = true;
                NotifyPropertyChanged("NumBunks");
            }
        }

        private int? NumBunksField; 

        /// <summary>
        /// NumBunksSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumBunksSpecified {
            get {
                return NumBunksSpecifiedField;
            } 
            set {
                NumBunksSpecifiedField = value;
                NotifyPropertyChanged("NumBunksSpecified");
            }
        }

        private bool NumBunksSpecifiedField; 

        /// <summary>
        /// BunksPerRoom property
        /// </summary>
		[Description("Number of bunks per room.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("BunksPerRoom")]
        public int? BunksPerRoom {
            get {
                return BunksPerRoomField;
            } 
            set {
                BunksPerRoomField = value;
                 this.BunksPerRoomSpecified = true;
                NotifyPropertyChanged("BunksPerRoom");
            }
        }

        private int? BunksPerRoomField; 

        /// <summary>
        /// BunksPerRoomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BunksPerRoomSpecified {
            get {
                return BunksPerRoomSpecifiedField;
            } 
            set {
                BunksPerRoomSpecifiedField = value;
                NotifyPropertyChanged("BunksPerRoomSpecified");
            }
        }

        private bool BunksPerRoomSpecifiedField; 

        /// <summary>
        /// NumAnch property
        /// </summary>
		[Description("Number of anchors.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumAnch")]
        public int? NumAnch {
            get {
                return NumAnchField;
            } 
            set {
                NumAnchField = value;
                 this.NumAnchSpecified = true;
                NotifyPropertyChanged("NumAnch");
            }
        }

        private int? NumAnchField; 

        /// <summary>
        /// NumAnchSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumAnchSpecified {
            get {
                return NumAnchSpecifiedField;
            } 
            set {
                NumAnchSpecifiedField = value;
                NotifyPropertyChanged("NumAnchSpecified");
            }
        }

        private bool NumAnchSpecifiedField; 

        /// <summary>
        /// MoorType property
        /// </summary>
		[StringLength(64)]
        [Description("Mooring type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MoorType")]
        public string MoorType {
            get {
                return MoorTypeField;
            } 
            set {
                MoorTypeField = value;
                NotifyPropertyChanged("MoorType");
            }
        }

        private string MoorTypeField; 

        /// <summary>
        /// NumGuideTens property
        /// </summary>
		[Description("Number of guideline tensioners.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumGuideTens")]
        public int? NumGuideTens {
            get {
                return NumGuideTensField;
            } 
            set {
                NumGuideTensField = value;
                 this.NumGuideTensSpecified = true;
                NotifyPropertyChanged("NumGuideTens");
            }
        }

        private int? NumGuideTensField; 

        /// <summary>
        /// NumGuideTensSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumGuideTensSpecified {
            get {
                return NumGuideTensSpecifiedField;
            } 
            set {
                NumGuideTensSpecifiedField = value;
                NotifyPropertyChanged("NumGuideTensSpecified");
            }
        }

        private bool NumGuideTensSpecifiedField; 

        /// <summary>
        /// NumRiserTens property
        /// </summary>
		[Description("Number of riser tensioners.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumRiserTens")]
        public int? NumRiserTens {
            get {
                return NumRiserTensField;
            } 
            set {
                NumRiserTensField = value;
                 this.NumRiserTensSpecified = true;
                NotifyPropertyChanged("NumRiserTens");
            }
        }

        private int? NumRiserTensField; 

        /// <summary>
        /// NumRiserTensSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumRiserTensSpecified {
            get {
                return NumRiserTensSpecifiedField;
            } 
            set {
                NumRiserTensSpecifiedField = value;
                NotifyPropertyChanged("NumRiserTensSpecified");
            }
        }

        private bool NumRiserTensSpecifiedField; 

        /// <summary>
        /// VarDeckLdMx property
        /// </summary>
		[Description("Variable deck load maximum (offshore rigs only).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("VarDeckLdMx")]
        public ForceMeasure VarDeckLoadMax {
            get {
                return VarDeckLdMxField;
            } 
            set {
                VarDeckLdMxField = value;
                NotifyPropertyChanged("VarDeckLoadMax");
            }
        }

        private ForceMeasure VarDeckLdMxField; 

        /// <summary>
        /// VdlStorm property
        /// </summary>
		[Description("Variable deck load storm rating (offshore rigs only).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("VdlStorm")]
        public ForceMeasure VdlStorm {
            get {
                return VdlStormField;
            } 
            set {
                VdlStormField = value;
                NotifyPropertyChanged("VdlStorm");
            }
        }

        private ForceMeasure VdlStormField; 

        /// <summary>
        /// NumThrusters property
        /// </summary>
		[Description("Number of thrusters.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumThrusters")]
        public int? NumThrusters {
            get {
                return NumThrustersField;
            } 
            set {
                NumThrustersField = value;
                 this.NumThrustersSpecified = true;
                NotifyPropertyChanged("NumThrusters");
            }
        }

        private int? NumThrustersField; 

        /// <summary>
        /// NumThrustersSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumThrustersSpecified {
            get {
                return NumThrustersSpecifiedField;
            } 
            set {
                NumThrustersSpecifiedField = value;
                NotifyPropertyChanged("NumThrustersSpecified");
            }
        }

        private bool NumThrustersSpecifiedField; 

        /// <summary>
        /// Azimuthing property
        /// </summary>
		[Description("Are the thrusters azimuth?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Azimuthing")]
        public bool? Azimuthing {
            get {
                return AzimuthingField;
            } 
            set {
                AzimuthingField = value;
                 this.AzimuthingSpecified = true;
                NotifyPropertyChanged("Azimuthing");
            }
        }

        private bool? AzimuthingField; 

        /// <summary>
        /// AzimuthingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AzimuthingSpecified {
            get {
                return AzimuthingSpecifiedField;
            } 
            set {
                AzimuthingSpecifiedField = value;
                NotifyPropertyChanged("AzimuthingSpecified");
            }
        }

        private bool AzimuthingSpecifiedField; 

        /// <summary>
        /// MotionCompensationMn property
        /// </summary>
		[Description("Minimum motion compensation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("MotionCompensationMn")]
        public ForceMeasure MotionCompensationMin {
            get {
                return MotionCompensationMnField;
            } 
            set {
                MotionCompensationMnField = value;
                NotifyPropertyChanged("MotionCompensationMin");
            }
        }

        private ForceMeasure MotionCompensationMnField; 

        /// <summary>
        /// MotionCompensationMx property
        /// </summary>
		[Description("Maximum motion compensation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForceMeasure")]
		[XmlElement("MotionCompensationMx")]
        public ForceMeasure MotionCompensationMax {
            get {
                return MotionCompensationMxField;
            } 
            set {
                MotionCompensationMxField = value;
                NotifyPropertyChanged("MotionCompensationMax");
            }
        }

        private ForceMeasure MotionCompensationMxField; 

        /// <summary>
        /// StrokeMotionCompensation property
        /// </summary>
		[Description("Length of motion compensation provided by equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("StrokeMotionCompensation")]
        public LengthMeasure StrokeMotionCompensation {
            get {
                return StrokeMotionCompensationField;
            } 
            set {
                StrokeMotionCompensationField = value;
                NotifyPropertyChanged("StrokeMotionCompensation");
            }
        }

        private LengthMeasure StrokeMotionCompensationField; 

        /// <summary>
        /// RiserAngleLimit property
        /// </summary>
		[Description("Riser angle limit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("RiserAngleLimit")]
        public PlaneAngleMeasure RiserAngleLimit {
            get {
                return RiserAngleLimitField;
            } 
            set {
                RiserAngleLimitField = value;
                NotifyPropertyChanged("RiserAngleLimit");
            }
        }

        private PlaneAngleMeasure RiserAngleLimitField; 

        /// <summary>
        /// HeaveMx property
        /// </summary>
		[Description("Maximum allowable heave.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("HeaveMx")]
        public LengthMeasure HeaveMax {
            get {
                return HeaveMxField;
            } 
            set {
                HeaveMxField = value;
                NotifyPropertyChanged("HeaveMax");
            }
        }

        private LengthMeasure HeaveMxField; 

        /// <summary>
        /// Gantry property
        /// </summary>
		[StringLength(64)]
        [Description("Description of the gantry.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Gantry")]
        public string Gantry {
            get {
                return GantryField;
            } 
            set {
                GantryField = value;
                NotifyPropertyChanged("Gantry");
            }
        }

        private string GantryField; 

        /// <summary>
        /// Flares property
        /// </summary>
		[StringLength(64)]
        [Description("Description of flare(s).")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Flares")]
        public string Flares {
            get {
                return FlaresField;
            } 
            set {
                FlaresField = value;
                NotifyPropertyChanged("Flares");
            }
        }

        private string FlaresField; 

        /// <summary>
        /// Shaker property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Shaker")]
		[XmlElement("Shaker")]
        public List<Shaker> Shaker {
            get {
                return ShakerField;
            } 
            set {
                ShakerField = value;
                NotifyPropertyChanged("Shaker");
            }
        }

         /// <summary>
         /// bool to indicate if Shaker has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ShakerSpecified
         {
             get {
             if(ShakerField!=null)
                 return ShakerField.Count>0?true:false;
             else return false;
             }
         }
        private List<Shaker> ShakerField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// Bop property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Bop")]
		[XmlElement("Bop")]
        public Bop Bop {
            get {
                return BopField;
            } 
            set {
                BopField = value;
                NotifyPropertyChanged("Bop");
            }
        }

        private Bop BopField; 

        /// <summary>
        /// Pit property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Pit")]
		[XmlElement("Pit")]
        public List<Pit> Pit {
            get {
                return PitField;
            } 
            set {
                PitField = value;
                NotifyPropertyChanged("Pit");
            }
        }

         /// <summary>
         /// bool to indicate if Pit has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PitSpecified
         {
             get {
             if(PitField!=null)
                 return PitField.Count>0?true:false;
             else return false;
             }
         }
        private List<Pit> PitField; 

        /// <summary>
        /// Pump property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "MudPump")]
		[XmlElement("Pump")]
        public List<MudPump> Pump {
            get {
                return PumpField;
            } 
            set {
                PumpField = value;
                NotifyPropertyChanged("Pump");
            }
        }

         /// <summary>
         /// bool to indicate if Pump has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PumpSpecified
         {
             get {
             if(PumpField!=null)
                 return PumpField.Count>0?true:false;
             else return false;
             }
         }
        private List<MudPump> PumpField; 

        /// <summary>
        /// Centrifuge property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Centrifuge")]
		[XmlElement("Centrifuge")]
        public List<Centrifuge> Centrifuge {
            get {
                return CentrifugeField;
            } 
            set {
                CentrifugeField = value;
                NotifyPropertyChanged("Centrifuge");
            }
        }

         /// <summary>
         /// bool to indicate if Centrifuge has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CentrifugeSpecified
         {
             get {
             if(CentrifugeField!=null)
                 return CentrifugeField.Count>0?true:false;
             else return false;
             }
         }
        private List<Centrifuge> CentrifugeField; 

        /// <summary>
        /// Hydrocyclone property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Hydrocyclone")]
		[XmlElement("Hydrocyclone")]
        public List<Hydrocyclone> Hydrocyclone {
            get {
                return HydrocycloneField;
            } 
            set {
                HydrocycloneField = value;
                NotifyPropertyChanged("Hydrocyclone");
            }
        }

         /// <summary>
         /// bool to indicate if Hydrocyclone has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool HydrocycloneSpecified
         {
             get {
             if(HydrocycloneField!=null)
                 return HydrocycloneField.Count>0?true:false;
             else return false;
             }
         }
        private List<Hydrocyclone> HydrocycloneField; 

        /// <summary>
        /// Degasser property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Degasser")]
		[XmlElement("Degasser")]
        public List<Degasser> Degasser {
            get {
                return DegasserField;
            } 
            set {
                DegasserField = value;
                NotifyPropertyChanged("Degasser");
            }
        }

         /// <summary>
         /// bool to indicate if Degasser has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DegasserSpecified
         {
             get {
             if(DegasserField!=null)
                 return DegasserField.Count>0?true:false;
             else return false;
             }
         }
        private List<Degasser> DegasserField; 

        /// <summary>
        /// SurfaceEquipment property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SurfaceEquipment")]
		[XmlElement("SurfaceEquipment")]
        public SurfaceEquipment SurfaceEquipment {
            get {
                return SurfaceEquipmentField;
            } 
            set {
                SurfaceEquipmentField = value;
                NotifyPropertyChanged("SurfaceEquipment");
            }
        }

        private SurfaceEquipment SurfaceEquipmentField; 

        /// <summary>
        /// BhaRun property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("BhaRun")]
        public List<DataObjectReference> BhaRun {
            get {
                return BhaRunField;
            } 
            set {
                BhaRunField = value;
                NotifyPropertyChanged("BhaRun");
            }
        }

         /// <summary>
         /// bool to indicate if BhaRun has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BhaRunSpecified
         {
             get {
             if(BhaRunField!=null)
                 return BhaRunField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> BhaRunField; 

        /// <summary>
        /// Rig property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Rig")]
        public DataObjectReference Rig {
            get {
                return RigField;
            } 
            set {
                RigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private DataObjectReference RigField; 


    } //here

    /// <summary>
    /// This class represents the MudLogReport xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the MudLogReport xsd type.")]
    public partial class MudLogReport : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MudLogCompany property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the company recording the information.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("MudLogCompany")]
        public string MudLogCompany {
            get {
                return MudLogCompanyField;
            } 
            set {
                MudLogCompanyField = value;
                NotifyPropertyChanged("MudLogCompany");
            }
        }

        private string MudLogCompanyField; 

        /// <summary>
        /// MudLogEngineers property
        /// </summary>
		[StringLength(2000)]
        [Description("Concatenated names of the mudloggers constructing the log.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("MudLogEngineers")]
        public string MudLogEngineers {
            get {
                return MudLogEngineersField;
            } 
            set {
                MudLogEngineersField = value;
                NotifyPropertyChanged("MudLogEngineers");
            }
        }

        private string MudLogEngineersField; 

        /// <summary>
        /// MudLogGeologists property
        /// </summary>
		[StringLength(2000)]
        [Description("Concatenated names of the geologists constructing the log.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("MudLogGeologists")]
        public string MudLogGeologists {
            get {
                return MudLogGeologistsField;
            } 
            set {
                MudLogGeologistsField = value;
                NotifyPropertyChanged("MudLogGeologists");
            }
        }

        private string MudLogGeologistsField; 

        /// <summary>
        /// ReportMdInterval property
        /// </summary>
		[Description("[maintained by the server] The interval between the minimum and maximum measured depths contained in this MudLog report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("ReportMdInterval")]
        public MdInterval ReportMDInterval {
            get {
                return ReportMdIntervalField;
            } 
            set {
                ReportMdIntervalField = value;
                NotifyPropertyChanged("ReportMDInterval");
            }
        }

        private MdInterval ReportMdIntervalField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("The growing state of the mudlog,. Valid Values: active, inactive or closed.")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelStatus")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                 this.GrowingStatusSpecified = true;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        
        private bool GrowingStatusSpecifiedField = false;
        
        /// <summary>
        /// GrowingStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GrowingStatusSpecified {
            get {
                return GrowingStatusSpecifiedField;
            } 
            set {
                GrowingStatusSpecifiedField = value;
                NotifyPropertyChanged("GrowingStatusSpecified");
            }
        }
        
        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// WellboreGeology property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WellboreGeology")]
        public DataObjectReference WellboreGeology {
            get {
                return WellboreGeologyField;
            } 
            set {
                WellboreGeologyField = value;
                NotifyPropertyChanged("WellboreGeology");
            }
        }

        private DataObjectReference WellboreGeologyField; 

        /// <summary>
        /// MudlogIntervals property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "MudlogReportInterval")]
		[XmlElement("MudlogIntervals")]
        public List<MudlogReportInterval> MudlogIntervals {
            get {
                return MudlogIntervalsField;
            } 
            set {
                MudlogIntervalsField = value;
                NotifyPropertyChanged("MudlogIntervals");
            }
        }

         /// <summary>
         /// bool to indicate if MudlogIntervals has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MudlogIntervalsSpecified
         {
             get {
             if(MudlogIntervalsField!=null)
                 return MudlogIntervalsField.Count>0?true:false;
             else return false;
             }
         }
        private List<MudlogReportInterval> MudlogIntervalsField; 

        /// <summary>
        /// RelatedLogs property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("RelatedLogs")]
        public List<DataObjectReference> RelatedLogs {
            get {
                return RelatedLogsField;
            } 
            set {
                RelatedLogsField = value;
                NotifyPropertyChanged("RelatedLogs");
            }
        }

         /// <summary>
         /// bool to indicate if RelatedLogs has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RelatedLogsSpecified
         {
             get {
             if(RelatedLogsField!=null)
                 return RelatedLogsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> RelatedLogsField; 

        /// <summary>
        /// Parameter property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "MudLogParameter")]
		[XmlElement("Parameter")]
        public List<MudLogParameter> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<MudLogParameter> ParameterField; 


    } //here

    /// <summary>
    /// This class represents the CuttingsGeologyInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the CuttingsGeologyInterval xsd type.")]
    public partial class CuttingsGeologyInterval : AbstractObject, IWitsmlDataObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("The measured depth interval that is represented by the cuttings described in this instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// Citation1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation1 {
            get {
                return Citation1Field;
            } 
            set {
                Citation1Field = value;
                NotifyPropertyChanged("Citation1");
            }
        }

        private Citation Citation1Field; 

        /// <summary>
        /// DensBulk property
        /// </summary>
		[Description("Sample bulk density for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensBulk")]
        public MassPerVolumeMeasure DensBulk {
            get {
                return DensBulkField;
            } 
            set {
                DensBulkField = value;
                NotifyPropertyChanged("DensBulk");
            }
        }

        private MassPerVolumeMeasure DensBulkField; 

        /// <summary>
        /// DensShale property
        /// </summary>
		[Description("Shale density for the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("DensShale")]
        public MassPerVolumeMeasure DensShale {
            get {
                return DensShaleField;
            } 
            set {
                DensShaleField = value;
                NotifyPropertyChanged("DensShale");
            }
        }

        private MassPerVolumeMeasure DensShaleField; 

        /// <summary>
        /// Calcite property
        /// </summary>
		[Description("Calcimetry calcite percentage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Calcite")]
        public VolumePerVolumeMeasure Calcite {
            get {
                return CalciteField;
            } 
            set {
                CalciteField = value;
                NotifyPropertyChanged("Calcite");
            }
        }

        private VolumePerVolumeMeasure CalciteField; 

        /// <summary>
        /// CalcStab property
        /// </summary>
		[Description("Calcimetry stabilized percentage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("CalcStab")]
        public VolumePerVolumeMeasure CalcStab {
            get {
                return CalcStabField;
            } 
            set {
                CalcStabField = value;
                NotifyPropertyChanged("CalcStab");
            }
        }

        private VolumePerVolumeMeasure CalcStabField; 

        /// <summary>
        /// Cec property
        /// </summary>
		[Description("Cuttings cationic exchange capacity. Temporarily calling this a DimensionlessMeasure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("Cec")]
        public DimensionlessMeasure Cec {
            get {
                return CecField;
            } 
            set {
                CecField = value;
                NotifyPropertyChanged("Cec");
            }
        }

        private DimensionlessMeasure CecField; 

        /// <summary>
        /// Dolomite property
        /// </summary>
		[Description("Calcimetry dolomite percentage.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeMeasure")]
		[XmlElement("Dolomite")]
        public VolumePerVolumeMeasure Dolomite {
            get {
                return DolomiteField;
            } 
            set {
                DolomiteField = value;
                NotifyPropertyChanged("Dolomite");
            }
        }

        private VolumePerVolumeMeasure DolomiteField; 

        /// <summary>
        /// SizeMin property
        /// </summary>
		[Description("Minimum size.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SizeMin")]
        public LengthMeasure SizeMin {
            get {
                return SizeMinField;
            } 
            set {
                SizeMinField = value;
                NotifyPropertyChanged("SizeMin");
            }
        }

        private LengthMeasure SizeMinField; 

        /// <summary>
        /// SizeMax property
        /// </summary>
		[Description("Maximum size.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("SizeMax")]
        public LengthMeasure SizeMax {
            get {
                return SizeMaxField;
            } 
            set {
                SizeMaxField = value;
                NotifyPropertyChanged("SizeMax");
            }
        }

        private LengthMeasure SizeMaxField; 

        /// <summary>
        /// Qft property
        /// </summary>
		[Description("Fluorescence as measured using a device licensed for the Quantitative Fluorescence Technique.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IlluminanceMeasure")]
		[XmlElement("Qft")]
        public IlluminanceMeasure Qft {
            get {
                return QftField;
            } 
            set {
                QftField = value;
                NotifyPropertyChanged("Qft");
            }
        }

        private IlluminanceMeasure QftField; 

        /// <summary>
        /// CleaningMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Sample treatment: cleaning method.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("CleaningMethod")]
        public string CleaningMethod {
            get {
                return CleaningMethodField;
            } 
            set {
                CleaningMethodField = value;
                NotifyPropertyChanged("CleaningMethod");
            }
        }

        private string CleaningMethodField; 

        /// <summary>
        /// DryingMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Sample treatment: drying method.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("DryingMethod")]
        public string DryingMethod {
            get {
                return DryingMethodField;
            } 
            set {
                DryingMethodField = value;
                NotifyPropertyChanged("DryingMethod");
            }
        }

        private string DryingMethodField; 

        /// <summary>
        /// CuttingsIntervalLithology property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CuttingsIntervalLithology")]
		[XmlElement("CuttingsIntervalLithology")]
        public List<CuttingsIntervalLithology> CuttingsIntervalLithology {
            get {
                return CuttingsIntervalLithologyField;
            } 
            set {
                CuttingsIntervalLithologyField = value;
                NotifyPropertyChanged("CuttingsIntervalLithology");
            }
        }

         /// <summary>
         /// bool to indicate if CuttingsIntervalLithology has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CuttingsIntervalLithologySpecified
         {
             get {
             if(CuttingsIntervalLithologyField!=null)
                 return CuttingsIntervalLithologyField.Count>0?true:false;
             else return false;
             }
         }
        private List<CuttingsIntervalLithology> CuttingsIntervalLithologyField; 

		/// <summary>
        /// Unique identifier for this instance of CuttingsGeologyInterval.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of CuttingsGeologyInterval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


    } //here

    /// <summary>
    /// This class represents the CuttingsGeology xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the CuttingsGeology xsd type.")]
    public partial class CuttingsGeology : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("[maintained by the server] The interval which contains the minimum and maximum measured depths for all cuttings intervals in this cuttings geology.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the cuttings, whether active, inactive or closed")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelStatus")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                 this.GrowingStatusSpecified = true;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        
        private bool GrowingStatusSpecifiedField = false;
        
        /// <summary>
        /// GrowingStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GrowingStatusSpecified {
            get {
                return GrowingStatusSpecifiedField;
            } 
            set {
                GrowingStatusSpecifiedField = value;
                NotifyPropertyChanged("GrowingStatusSpecified");
            }
        }
        
        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// CuttingsInterval property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CuttingsGeologyInterval")]
		[XmlElement("CuttingsInterval")]
        public List<CuttingsGeologyInterval> CuttingsInterval {
            get {
                return CuttingsIntervalField;
            } 
            set {
                CuttingsIntervalField = value;
                NotifyPropertyChanged("CuttingsInterval");
            }
        }

         /// <summary>
         /// bool to indicate if CuttingsInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CuttingsIntervalSpecified
         {
             get {
             if(CuttingsIntervalField!=null)
                 return CuttingsIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<CuttingsGeologyInterval> CuttingsIntervalField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the InterpretedGeologyInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the InterpretedGeologyInterval xsd type.")]
    public partial class InterpretedGeologyInterval : AbstractObject, IWitsmlDataObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("The measured depth interval which is described by this interpreted geology.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// Citation1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation1 {
            get {
                return Citation1Field;
            } 
            set {
                Citation1Field = value;
                NotifyPropertyChanged("Citation1");
            }
        }

        private Citation Citation1Field; 

        /// <summary>
        /// GeochronologicalUnit property
        /// </summary>
		[Description("The name of a Geochronology, with the \"kind\" attribute specifying the geochronological time span.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GeochronologicalUnit")]
		[XmlElement("GeochronologicalUnit")]
        public List<GeochronologicalUnit> GeochronologicalUnit {
            get {
                return GeochronologicalUnitField;
            } 
            set {
                GeochronologicalUnitField = value;
                NotifyPropertyChanged("GeochronologicalUnit");
            }
        }

         /// <summary>
         /// bool to indicate if GeochronologicalUnit has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeochronologicalUnitSpecified
         {
             get {
             if(GeochronologicalUnitField!=null)
                 return GeochronologicalUnitField.Count>0?true:false;
             else return false;
             }
         }
        private List<GeochronologicalUnit> GeochronologicalUnitField; 

        /// <summary>
        /// LithostratigraphicUnit property
        /// </summary>
		[Description("Specifies the unit of lithostratigraphy.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "LithostratigraphicUnit")]
		[XmlElement("LithostratigraphicUnit")]
        public List<LithostratigraphicUnit> LithostratigraphicUnit {
            get {
                return LithostratigraphicUnitField;
            } 
            set {
                LithostratigraphicUnitField = value;
                NotifyPropertyChanged("LithostratigraphicUnit");
            }
        }

         /// <summary>
         /// bool to indicate if LithostratigraphicUnit has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LithostratigraphicUnitSpecified
         {
             get {
             if(LithostratigraphicUnitField!=null)
                 return LithostratigraphicUnitField.Count>0?true:false;
             else return false;
             }
         }
        private List<LithostratigraphicUnit> LithostratigraphicUnitField; 

        /// <summary>
        /// InterpretedLithology property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "InterpretedIntervalLithology")]
		[XmlElement("InterpretedLithology")]
        public InterpretedIntervalLithology InterpretedLithology {
            get {
                return InterpretedLithologyField;
            } 
            set {
                InterpretedLithologyField = value;
                NotifyPropertyChanged("InterpretedLithology");
            }
        }

        private InterpretedIntervalLithology InterpretedLithologyField; 

		/// <summary>
        /// Unique identifier for this instance of InterpretedGeologyInterval.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of InterpretedGeologyInterval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


    } //here

    /// <summary>
    /// This class represents the InterpretedGeology xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the InterpretedGeology xsd type.")]
    public partial class InterpretedGeology : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("[maintained by the server] The interval that contains the minimum and maximum measured depths for all interpreted intervals in this interpreted geology.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the interpreted geology. Valid values: active, inactive or closed.")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelStatus")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                 this.GrowingStatusSpecified = true;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        
        private bool GrowingStatusSpecifiedField = false;
        
        /// <summary>
        /// GrowingStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GrowingStatusSpecified {
            get {
                return GrowingStatusSpecifiedField;
            } 
            set {
                GrowingStatusSpecifiedField = value;
                NotifyPropertyChanged("GrowingStatusSpecified");
            }
        }
        
        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// GeologicIntervalInterpreted property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "InterpretedGeologyInterval")]
		[XmlElement("GeologicIntervalInterpreted")]
        public List<InterpretedGeologyInterval> GeologicIntervalInterpreted {
            get {
                return GeologicIntervalInterpretedField;
            } 
            set {
                GeologicIntervalInterpretedField = value;
                NotifyPropertyChanged("GeologicIntervalInterpreted");
            }
        }

         /// <summary>
         /// bool to indicate if GeologicIntervalInterpreted has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologicIntervalInterpretedSpecified
         {
             get {
             if(GeologicIntervalInterpretedField!=null)
                 return GeologicIntervalInterpretedField.Count>0?true:false;
             else return false;
             }
         }
        private List<InterpretedGeologyInterval> GeologicIntervalInterpretedField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the ShowEvaluationInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the ShowEvaluationInterval xsd type.")]
    public partial class ShowEvaluationInterval : AbstractObject, IWitsmlDataObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The measured depth interval over which the show is evaluated.
        /// </summary>
		[Required]
        [Description("The measured depth interval over which the show is evaluated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// Citation1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("Citation")]
        public Citation Citation1 {
            get {
                return Citation1Field;
            } 
            set {
                Citation1Field = value;
                NotifyPropertyChanged("Citation1");
            }
        }

        private Citation Citation1Field; 

        /// <summary>
        /// Gas or oil exhibited at the show interval.
        /// </summary>
		[Required]
        [Description("Gas or oil exhibited at the show interval.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowFluid")]
		[XmlElement("ShowFluid")]
        public ShowFluid? ShowFluid {
            get {
                return ShowFluidField;
            } 
            set {
                ShowFluidField = value;
                 this.ShowFluidSpecified = true;
                NotifyPropertyChanged("ShowFluid");
            }
        }

        
        private bool ShowFluidSpecifiedField = false;
        
        /// <summary>
        /// ShowFluidSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShowFluidSpecified {
            get {
                return ShowFluidSpecifiedField;
            } 
            set {
                ShowFluidSpecifiedField = value;
                NotifyPropertyChanged("ShowFluidSpecified");
            }
        }
        
        private ShowFluid? ShowFluidField; 

        /// <summary>
        /// Quality of the fluid showing at this interval.
        /// </summary>
		[Description("Quality of the fluid showing at this interval.")]
        [EnergisticsDataTypeAttribute(DataType = "ShowRating")]
		[XmlElement("ShowRating")]
        public ShowRating? ShowRating {
            get {
                return ShowRatingField;
            } 
            set {
                ShowRatingField = value;
                 this.ShowRatingSpecified = true;
                NotifyPropertyChanged("ShowRating");
            }
        }

        private ShowRating? ShowRatingField; 

        /// <summary>
        /// ShowRatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShowRatingSpecified {
            get {
                return ShowRatingSpecifiedField;
            } 
            set {
                ShowRatingSpecifiedField = value;
                NotifyPropertyChanged("ShowRatingSpecified");
            }
        }

        private bool ShowRatingSpecifiedField; 

		/// <summary>
        /// Unique identifier for this instance of ShowEvaluationInterval.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for this instance of ShowEvaluationInterval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


    } //here

    /// <summary>
    /// This class represents the ShowEvaluation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the ShowEvaluation xsd type.")]
    public partial class ShowEvaluation : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("[maintained by the server] The interval that contains the minimum and maximum measured depths for all show intervals in this show evaluation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the show evaluation intervals. Valid values: active, inactive or closed.")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelStatus")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                 this.GrowingStatusSpecified = true;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        
        private bool GrowingStatusSpecifiedField = false;
        
        /// <summary>
        /// GrowingStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GrowingStatusSpecified {
            get {
                return GrowingStatusSpecifiedField;
            } 
            set {
                GrowingStatusSpecifiedField = value;
                NotifyPropertyChanged("GrowingStatusSpecified");
            }
        }
        
        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// EvaluatedIntervalShow property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ShowEvaluationInterval")]
		[XmlElement("EvaluatedIntervalShow")]
        public List<ShowEvaluationInterval> EvaluatedIntervalShow {
            get {
                return EvaluatedIntervalShowField;
            } 
            set {
                EvaluatedIntervalShowField = value;
                NotifyPropertyChanged("EvaluatedIntervalShow");
            }
        }

         /// <summary>
         /// bool to indicate if EvaluatedIntervalShow has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EvaluatedIntervalShowSpecified
         {
             get {
             if(EvaluatedIntervalShowField!=null)
                 return EvaluatedIntervalShowField.Count>0?true:false;
             else return false;
             }
         }
        private List<ShowEvaluationInterval> EvaluatedIntervalShowField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the WellboreGeology xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellboreGeology xsd type.")]
    public partial class WellboreGeology : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Required]
        [Description("[maintained by the server] The interval that contains the minimum and maximum measured depths for all wellbore geology types under this wellbore geology entry.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// ShowIntervalSet property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ShowEvaluation")]
		[XmlElement("ShowIntervalSet")]
        public ShowEvaluation ShowIntervalSet {
            get {
                return ShowIntervalSetField;
            } 
            set {
                ShowIntervalSetField = value;
                NotifyPropertyChanged("ShowIntervalSet");
            }
        }

        private ShowEvaluation ShowIntervalSetField; 

        /// <summary>
        /// InterpretedGeologyIntervalSet property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "InterpretedGeology")]
		[XmlElement("InterpretedGeologyIntervalSet")]
        public InterpretedGeology InterpretedGeologyIntervalSet {
            get {
                return InterpretedGeologyIntervalSetField;
            } 
            set {
                InterpretedGeologyIntervalSetField = value;
                NotifyPropertyChanged("InterpretedGeologyIntervalSet");
            }
        }

        private InterpretedGeology InterpretedGeologyIntervalSetField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// CuttingsIntervalSet property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CuttingsGeology")]
		[XmlElement("CuttingsIntervalSet")]
        public CuttingsGeology CuttingsIntervalSet {
            get {
                return CuttingsIntervalSetField;
            } 
            set {
                CuttingsIntervalSetField = value;
                NotifyPropertyChanged("CuttingsIntervalSet");
            }
        }

        private CuttingsGeology CuttingsIntervalSetField; 


    } //here

    /// <summary>
    /// This class represents the DepthRegImage xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the DepthRegImage xsd type.")]
    public partial class DepthRegImage : AbstractObject, IWitsmlDataObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// FileNameType property
        /// </summary>
		[Description("Mimetype of image file content.")]
        [EnergisticsDataTypeAttribute(DataType = "FileNameType")]
		[XmlElement("FileNameType")]
        public FileNameType? FileNameType {
            get {
                return FileNameTypeField;
            } 
            set {
                FileNameTypeField = value;
                 this.FileNameTypeSpecified = true;
                NotifyPropertyChanged("FileNameType");
            }
        }

        private FileNameType? FileNameTypeField; 

        /// <summary>
        /// FileNameTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FileNameTypeSpecified {
            get {
                return FileNameTypeSpecifiedField;
            } 
            set {
                FileNameTypeSpecifiedField = value;
                NotifyPropertyChanged("FileNameTypeSpecified");
            }
        }

        private bool FileNameTypeSpecifiedField; 

        /// <summary>
        /// Mimetype property
        /// </summary>
		[Description("Mimetype of image file content.")]
        [EnergisticsDataTypeAttribute(DataType = "MimeType")]
		[XmlElement("Mimetype")]
        public MimeType? Mimetype {
            get {
                return MimetypeField;
            } 
            set {
                MimetypeField = value;
                 this.MimetypeSpecified = true;
                NotifyPropertyChanged("Mimetype");
            }
        }

        private MimeType? MimetypeField; 

        /// <summary>
        /// MimetypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MimetypeSpecified {
            get {
                return MimetypeSpecifiedField;
            } 
            set {
                MimetypeSpecifiedField = value;
                NotifyPropertyChanged("MimetypeSpecified");
            }
        }

        private bool MimetypeSpecifiedField; 

        /// <summary>
        /// FileName property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Reference to the file containing the image content.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FileName")]
        public string FileName {
            get {
                return FileNameField;
            } 
            set {
                FileNameField = value;
                NotifyPropertyChanged("FileName");
            }
        }

        private string FileNameField; 

        /// <summary>
        /// FileSize property
        /// </summary>
		[Description("Size of image file, in bytes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DigitalStorageMeasure")]
		[XmlElement("FileSize")]
        public DigitalStorageMeasure FileSize {
            get {
                return FileSizeField;
            } 
            set {
                FileSizeField = value;
                NotifyPropertyChanged("FileSize");
            }
        }

        private DigitalStorageMeasure FileSizeField; 

        /// <summary>
        /// Checksum property
        /// </summary>
		[Description("Image file checksum.")]
        [EnergisticsDataTypeAttribute(DataType = "MessageDigestType")]
		[XmlElement("Checksum")]
        public MessageDigestType? Checksum {
            get {
                return ChecksumField;
            } 
            set {
                ChecksumField = value;
                 this.ChecksumSpecified = true;
                NotifyPropertyChanged("Checksum");
            }
        }

        private MessageDigestType? ChecksumField; 

        /// <summary>
        /// ChecksumSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ChecksumSpecified {
            get {
                return ChecksumSpecifiedField;
            } 
            set {
                ChecksumSpecifiedField = value;
                NotifyPropertyChanged("ChecksumSpecified");
            }
        }

        private bool ChecksumSpecifiedField; 

        /// <summary>
        /// ImagePixelWidth property
        /// </summary>
		[Description("Image file width, in pixels.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("ImagePixelWidth")]
        public long? ImagePixelWidth {
            get {
                return ImagePixelWidthField;
            } 
            set {
                ImagePixelWidthField = value;
                 this.ImagePixelWidthSpecified = true;
                NotifyPropertyChanged("ImagePixelWidth");
            }
        }

        private long? ImagePixelWidthField; 

        /// <summary>
        /// ImagePixelWidthSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ImagePixelWidthSpecified {
            get {
                return ImagePixelWidthSpecifiedField;
            } 
            set {
                ImagePixelWidthSpecifiedField = value;
                NotifyPropertyChanged("ImagePixelWidthSpecified");
            }
        }

        private bool ImagePixelWidthSpecifiedField; 

        /// <summary>
        /// ImagePixelHeight property
        /// </summary>
		[Description("Image file height, in pixels.")]
        [EnergisticsDataTypeAttribute(DataType = "NonNegativeLong")]
		[XmlElement("ImagePixelHeight")]
        public long? ImagePixelHeight {
            get {
                return ImagePixelHeightField;
            } 
            set {
                ImagePixelHeightField = value;
                 this.ImagePixelHeightSpecified = true;
                NotifyPropertyChanged("ImagePixelHeight");
            }
        }

        private long? ImagePixelHeightField; 

        /// <summary>
        /// ImagePixelHeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ImagePixelHeightSpecified {
            get {
                return ImagePixelHeightSpecifiedField;
            } 
            set {
                ImagePixelHeightSpecifiedField = value;
                NotifyPropertyChanged("ImagePixelHeightSpecified");
            }
        }

        private bool ImagePixelHeightSpecifiedField; 

        /// <summary>
        /// Version property
        /// </summary>
		[StringLength(64)]
        [Description("File version.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Version")]
        public string Version {
            get {
                return VersionField;
            } 
            set {
                VersionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string VersionField; 

        /// <summary>
        /// ImageBoundary property
        /// </summary>
		[Required]
        [Description("The bounding rectangle of the image")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegRectangle")]
		[XmlElement("ImageBoundary")]
        public DepthRegRectangle ImageBoundary {
            get {
                return ImageBoundaryField;
            } 
            set {
                ImageBoundaryField = value;
                NotifyPropertyChanged("ImageBoundary");
            }
        }

        private DepthRegRectangle ImageBoundaryField; 

        /// <summary>
        /// HeaderSection property
        /// </summary>
		[Description("Log header information extracted from the well log image header section. Also contains X, Y coordinates and positional data with respect to the header section location within the log image file.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegLogRect")]
		[XmlElement("HeaderSection")]
        public DepthRegLogRect HeaderSection {
            get {
                return HeaderSectionField;
            } 
            set {
                HeaderSectionField = value;
                NotifyPropertyChanged("HeaderSection");
            }
        }

        private DepthRegLogRect HeaderSectionField; 

        /// <summary>
        /// LogSection property
        /// </summary>
		[Description("Provides log name, log type, curve scale and other information about each log section of the image file. Most importantly, this section contains the depth registration elements (CalibrationPoint) necessary for depth calibrating well log sections.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegLogSection")]
		[XmlElement("LogSection")]
        public List<DepthRegLogSection> LogSection {
            get {
                return LogSectionField;
            } 
            set {
                LogSectionField = value;
                NotifyPropertyChanged("LogSection");
            }
        }

         /// <summary>
         /// bool to indicate if LogSection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogSectionSpecified
         {
             get {
             if(LogSectionField!=null)
                 return LogSectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegLogSection> LogSectionField; 

        /// <summary>
        /// AlternateSection property
        /// </summary>
		[Description("Provides a positional reference for sections of the image file not included in other elements of this object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DepthRegLogRect")]
		[XmlElement("AlternateSection")]
        public List<DepthRegLogRect> AlternateSection {
            get {
                return AlternateSectionField;
            } 
            set {
                AlternateSectionField = value;
                NotifyPropertyChanged("AlternateSection");
            }
        }

         /// <summary>
         /// bool to indicate if AlternateSection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AlternateSectionSpecified
         {
             get {
             if(AlternateSectionField!=null)
                 return AlternateSectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<DepthRegLogRect> AlternateSectionField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

		/// <summary>
        /// Unique identifier for the registration image.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Unique identifier for the registration image.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


    } //here

    /// <summary>
    /// This class represents the WellCMLedger xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellCMLedger xsd type.")]
    public partial class WellCMLedger : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ParentEventID property
        /// </summary>
		[StringLength(64)]
        [Description("Parent event reference id.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ParentEventID")]
        public string ParentEventID {
            get {
                return ParentEventIDField;
            } 
            set {
                ParentEventIDField = value;
                NotifyPropertyChanged("ParentEventID");
            }
        }

        private string ParentEventIDField; 

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("Date and time that activities started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Description("Date and time that activities were completed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        
        private bool DateTimeEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DateTimeEndSpecifiedField;
            } 
            set {
                DateTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }
        
        private Timestamp? DTimEndField; 

        /// <summary>
        /// Duration property
        /// </summary>
		[Description("The activity duration (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("Duration")]
        public TimeMeasure Duration {
            get {
                return DurationField;
            } 
            set {
                DurationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure DurationField; 

        /// <summary>
        /// MdInterval property
        /// </summary>
		[Description("Measured depth interval for this activity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MdInterval")]
		[XmlElement("MdInterval")]
        public MdInterval MDInterval {
            get {
                return MdIntervalField;
            } 
            set {
                MdIntervalField = value;
                NotifyPropertyChanged("MDInterval");
            }
        }

        private MdInterval MdIntervalField; 

        /// <summary>
        /// EventOrder property
        /// </summary>
		[Description("Order number of event.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("EventOrder")]
        public int? EventOrder {
            get {
                return EventOrderField;
            } 
            set {
                EventOrderField = value;
                 this.EventOrderSpecified = true;
                NotifyPropertyChanged("EventOrder");
            }
        }

        private int? EventOrderField; 

        /// <summary>
        /// EventOrderSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EventOrderSpecified {
            get {
                return EventOrderSpecifiedField;
            } 
            set {
                EventOrderSpecifiedField = value;
                NotifyPropertyChanged("EventOrderSpecified");
            }
        }

        private bool EventOrderSpecifiedField; 

        /// <summary>
        /// RigID property
        /// </summary>
		[Description("Rig reference id.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RigID")]
        public List<string> RigID {
            get {
                return RigIDField;
            } 
            set {
                RigIDField = value;
                NotifyPropertyChanged("RigID");
            }
        }

         /// <summary>
         /// bool to indicate if RigID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RigIDSpecified
         {
             get {
             if(RigIDField!=null)
                 return RigIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> RigIDField; 

        /// <summary>
        /// ActivityCode property
        /// </summary>
		[Description("Activity code")]
        [EnergisticsDataTypeAttribute(DataType = "DrillActivityCode")]
		[XmlElement("ActivityCode")]
        public DrillActivityCode? ActivityCode {
            get {
                return ActivityCodeField;
            } 
            set {
                ActivityCodeField = value;
                 this.ActivityCodeSpecified = true;
                NotifyPropertyChanged("ActivityCode");
            }
        }

        private DrillActivityCode? ActivityCodeField; 

        /// <summary>
        /// ActivityCodeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ActivityCodeSpecified {
            get {
                return ActivityCodeSpecifiedField;
            } 
            set {
                ActivityCodeSpecifiedField = value;
                NotifyPropertyChanged("ActivityCodeSpecified");
            }
        }

        private bool ActivityCodeSpecifiedField; 

        /// <summary>
        /// Type property
        /// </summary>
		[Description("Comment on type of this event, either referring to a job type or an  activity type e.g. a safety meeting.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EventType")]
		[XmlElement("Type")]
        public EventType Type {
            get {
                return TypeField;
            } 
            set {
                TypeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private EventType TypeField; 

        /// <summary>
        /// IsPlan property
        /// </summary>
		[Description("True if planned.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsPlan")]
        public bool? IsPlan {
            get {
                return IsPlanField;
            } 
            set {
                IsPlanField = value;
                 this.IsPlanSpecified = true;
                NotifyPropertyChanged("IsPlan");
            }
        }

        private bool? IsPlanField; 

        /// <summary>
        /// IsPlanSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsPlanSpecified {
            get {
                return IsPlanSpecifiedField;
            } 
            set {
                IsPlanSpecifiedField = value;
                NotifyPropertyChanged("IsPlanSpecified");
            }
        }

        private bool IsPlanSpecifiedField; 

        /// <summary>
        /// WorkOrderID property
        /// </summary>
		[StringLength(64)]
        [Description("Extension event for work order id.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("WorkOrderID")]
        public string WorkOrderID {
            get {
                return WorkOrderIDField;
            } 
            set {
                WorkOrderIDField = value;
                NotifyPropertyChanged("WorkOrderID");
            }
        }

        private string WorkOrderIDField; 

        /// <summary>
        /// BusinessAssociate property
        /// </summary>
		[StringLength(64)]
        [Description("Service company or business")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("BusinessAssociate")]
        public string BusinessAssociate {
            get {
                return BusinessAssociateField;
            } 
            set {
                BusinessAssociateField = value;
                NotifyPropertyChanged("BusinessAssociate");
            }
        }

        private string BusinessAssociateField; 

        /// <summary>
        /// ResponsiblePerson property
        /// </summary>
		[StringLength(64)]
        [Description("Name or information about person responsible who is implementing the service or job.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ResponsiblePerson")]
        public string ResponsiblePerson {
            get {
                return ResponsiblePersonField;
            } 
            set {
                ResponsiblePersonField = value;
                NotifyPropertyChanged("ResponsiblePerson");
            }
        }

        private string ResponsiblePersonField; 

        /// <summary>
        /// Contact property
        /// </summary>
		[StringLength(64)]
        [Description("Contact name or person to get in touch with. Might not necessarily be the person responsible.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Contact")]
        public string Contact {
            get {
                return ContactField;
            } 
            set {
                ContactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

        private string ContactField; 

        /// <summary>
        /// Nonproductive property
        /// </summary>
		[Description("True if event is not productive.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Nonproductive")]
        public bool? Nonproductive {
            get {
                return NonproductiveField;
            } 
            set {
                NonproductiveField = value;
                 this.NonproductiveSpecified = true;
                NotifyPropertyChanged("Nonproductive");
            }
        }

        private bool? NonproductiveField; 

        /// <summary>
        /// NonproductiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NonproductiveSpecified {
            get {
                return NonproductiveSpecifiedField;
            } 
            set {
                NonproductiveSpecifiedField = value;
                NotifyPropertyChanged("NonproductiveSpecified");
            }
        }

        private bool NonproductiveSpecifiedField; 

        /// <summary>
        /// Trouble property
        /// </summary>
		[Description("True if event implies is in-trouble")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Trouble")]
        public bool? Trouble {
            get {
                return TroubleField;
            } 
            set {
                TroubleField = value;
                 this.TroubleSpecified = true;
                NotifyPropertyChanged("Trouble");
            }
        }

        private bool? TroubleField; 

        /// <summary>
        /// TroubleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TroubleSpecified {
            get {
                return TroubleSpecifiedField;
            } 
            set {
                TroubleSpecifiedField = value;
                NotifyPropertyChanged("TroubleSpecified");
            }
        }

        private bool TroubleSpecifiedField; 

        /// <summary>
        /// PreventiveMaintenance property
        /// </summary>
		[Description("True of event is for preventive maintenance")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("PreventiveMaintenance")]
        public bool? PreventiveMaintenance {
            get {
                return PreventiveMaintenanceField;
            } 
            set {
                PreventiveMaintenanceField = value;
                 this.PreventiveMaintenanceSpecified = true;
                NotifyPropertyChanged("PreventiveMaintenance");
            }
        }

        private bool? PreventiveMaintenanceField; 

        /// <summary>
        /// PreventiveMaintenanceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PreventiveMaintenanceSpecified {
            get {
                return PreventiveMaintenanceSpecifiedField;
            } 
            set {
                PreventiveMaintenanceSpecifiedField = value;
                NotifyPropertyChanged("PreventiveMaintenanceSpecified");
            }
        }

        private bool PreventiveMaintenanceSpecifiedField; 

        /// <summary>
        /// Unplanned property
        /// </summary>
		[Description("True if there is no planning infomation for this activity.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Unplanned")]
        public bool? Unplanned {
            get {
                return UnplannedField;
            } 
            set {
                UnplannedField = value;
                 this.UnplannedSpecified = true;
                NotifyPropertyChanged("Unplanned");
            }
        }

        private bool? UnplannedField; 

        /// <summary>
        /// UnplannedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UnplannedSpecified {
            get {
                return UnplannedSpecifiedField;
            } 
            set {
                UnplannedSpecifiedField = value;
                NotifyPropertyChanged("UnplannedSpecified");
            }
        }

        private bool UnplannedSpecifiedField; 

        /// <summary>
        /// Phase property
        /// </summary>
		[StringLength(64)]
        [Description("Phase (large activity classification) e.g. Drill Surface Hole.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Phase")]
        public string Phase {
            get {
                return PhaseField;
            } 
            set {
                PhaseField = value;
                NotifyPropertyChanged("Phase");
            }
        }

        private string PhaseField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[StringLength(2000)]
        [Description("Comment on this ledger")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(2000)]
        [Description("Description of this ledger")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// EventExtension property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractEventExtension")]
		[XmlElement("EventExtension")]
        public List<AbstractEventExtension> EventExtension {
            get {
                return EventExtensionField;
            } 
            set {
                EventExtensionField = value;
                NotifyPropertyChanged("EventExtension");
            }
        }

         /// <summary>
         /// bool to indicate if EventExtension has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EventExtensionSpecified
         {
             get {
             if(EventExtensionField!=null)
                 return EventExtensionField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractEventExtension> EventExtensionField; 

        /// <summary>
        /// Cost property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DayCost")]
		[XmlElement("Cost")]
        public List<DayCost> Cost {
            get {
                return CostField;
            } 
            set {
                CostField = value;
                NotifyPropertyChanged("Cost");
            }
        }

         /// <summary>
         /// bool to indicate if Cost has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CostSpecified
         {
             get {
             if(CostField!=null)
                 return CostField.Count>0?true:false;
             else return false;
             }
         }
        private List<DayCost> CostField; 

        /// <summary>
        /// EventType property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "EventType")]
		[XmlElement("EventType")]
        public EventType EventType {
            get {
                return EventTypeField;
            } 
            set {
                EventTypeField = value;
                NotifyPropertyChanged("EventType");
            }
        }

        private EventType EventTypeField; 

        /// <summary>
        /// DownholeComponentReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DownholeComponentReference")]
		[XmlElement("DownholeComponentReference")]
        public DownholeComponentReference DownholeComponentReference {
            get {
                return DownholeComponentReferenceField;
            } 
            set {
                DownholeComponentReferenceField = value;
                NotifyPropertyChanged("DownholeComponentReference");
            }
        }

        private DownholeComponentReference DownholeComponentReferenceField; 

        /// <summary>
        /// Participant property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Participant")]
		[XmlElement("Participant")]
        public Participant Participants {
            get {
                return ParticipantField;
            } 
            set {
                ParticipantField = value;
                NotifyPropertyChanged("Participants");
            }
        }

        private Participant ParticipantField; 


    } //here

    /// <summary>
    /// This class represents the OpsReport xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the OpsReport xsd type.")]
    public partial class OpsReport : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ConditionHole property
        /// </summary>
		[StringLength(64)]
        [Description("Hole condition description.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ConditionHole")]
        public string ConditionHole {
            get {
                return ConditionHoleField;
            } 
            set {
                ConditionHoleField = value;
                NotifyPropertyChanged("ConditionHole");
            }
        }

        private string ConditionHoleField; 

        /// <summary>
        /// CostDay property
        /// </summary>
		[Description("Daily cost.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Cost")]
		[XmlElement("CostDay")]
        public Cost CostDay {
            get {
                return CostDayField;
            } 
            set {
                CostDayField = value;
                NotifyPropertyChanged("CostDay");
            }
        }

        private Cost CostDayField; 

        /// <summary>
        /// CostDayMud property
        /// </summary>
		[Description("Daily mud cost.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Cost")]
		[XmlElement("CostDayMud")]
        public Cost CostDayMud {
            get {
                return CostDayMudField;
            } 
            set {
                CostDayMudField = value;
                NotifyPropertyChanged("CostDayMud");
            }
        }

        private Cost CostDayMudField; 

        /// <summary>
        /// DiaCsgLast property
        /// </summary>
		[Description("Diameter of the last casing installed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaCsgLast")]
        public LengthMeasure DiaCsgLast {
            get {
                return DiaCsgLastField;
            } 
            set {
                DiaCsgLastField = value;
                NotifyPropertyChanged("DiaCsgLast");
            }
        }

        private LengthMeasure DiaCsgLastField; 

        /// <summary>
        /// DiaHole property
        /// </summary>
		[Description("Hole diameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaHole")]
        public LengthMeasure DiaHole {
            get {
                return DiaHoleField;
            } 
            set {
                DiaHoleField = value;
                NotifyPropertyChanged("DiaHole");
            }
        }

        private LengthMeasure DiaHoleField; 

        /// <summary>
        /// DistDrill property
        /// </summary>
		[Description("Distance drilled since the previous report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistDrill")]
        public LengthMeasure DistDrill {
            get {
                return DistDrillField;
            } 
            set {
                DistDrillField = value;
                NotifyPropertyChanged("DistDrill");
            }
        }

        private LengthMeasure DistDrillField; 

        /// <summary>
        /// DistDrillRot property
        /// </summary>
		[Description("Distance drilled: rotating.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistDrillRot")]
        public LengthMeasure DistDrillRot {
            get {
                return DistDrillRotField;
            } 
            set {
                DistDrillRotField = value;
                NotifyPropertyChanged("DistDrillRot");
            }
        }

        private LengthMeasure DistDrillRotField; 

        /// <summary>
        /// DistDrillSlid property
        /// </summary>
		[Description("Distance drilled: sliding.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistDrillSlid")]
        public LengthMeasure DistDrillSlid {
            get {
                return DistDrillSlidField;
            } 
            set {
                DistDrillSlidField = value;
                NotifyPropertyChanged("DistDrillSlid");
            }
        }

        private LengthMeasure DistDrillSlidField; 

        /// <summary>
        /// DistHold property
        /// </summary>
		[Description("Distance covered while holding angle with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistHold")]
        public LengthMeasure DistHold {
            get {
                return DistHoldField;
            } 
            set {
                DistHoldField = value;
                NotifyPropertyChanged("DistHold");
            }
        }

        private LengthMeasure DistHoldField; 

        /// <summary>
        /// DistReam property
        /// </summary>
		[Description("Distance reamed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistReam")]
        public LengthMeasure DistReam {
            get {
                return DistReamField;
            } 
            set {
                DistReamField = value;
                NotifyPropertyChanged("DistReam");
            }
        }

        private LengthMeasure DistReamField; 

        /// <summary>
        /// DistSteering property
        /// </summary>
		[Description("Distance covered while actively steering with a steerable drilling assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DistSteering")]
        public LengthMeasure DistSteering {
            get {
                return DistSteeringField;
            } 
            set {
                DistSteeringField = value;
                NotifyPropertyChanged("DistSteering");
            }
        }

        private LengthMeasure DistSteeringField; 

        /// <summary>
        /// DTim property
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Engineer property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the engineer.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Engineer")]
        public string Engineer {
            get {
                return EngineerField;
            } 
            set {
                EngineerField = value;
                NotifyPropertyChanged("Engineer");
            }
        }

        private string EngineerField; 

        /// <summary>
        /// ETimCirc property
        /// </summary>
		[Description("Time spent circulating from start of the bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimCirc")]
        public TimeMeasure ETimeCirc {
            get {
                return ETimCircField;
            } 
            set {
                ETimCircField = value;
                NotifyPropertyChanged("ETimeCirc");
            }
        }

        private TimeMeasure ETimCircField; 

        /// <summary>
        /// ETimDrill property
        /// </summary>
		[Description("Drilling time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimDrill")]
        public TimeMeasure ETimeDrill {
            get {
                return ETimDrillField;
            } 
            set {
                ETimDrillField = value;
                NotifyPropertyChanged("ETimeDrill");
            }
        }

        private TimeMeasure ETimDrillField; 

        /// <summary>
        /// ETimDrillRot property
        /// </summary>
		[Description("Time spent rotary drilling for the report interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimDrillRot")]
        public TimeMeasure ETimeDrillRot {
            get {
                return ETimDrillRotField;
            } 
            set {
                ETimDrillRotField = value;
                NotifyPropertyChanged("ETimeDrillRot");
            }
        }

        private TimeMeasure ETimDrillRotField; 

        /// <summary>
        /// ETimDrillSlid property
        /// </summary>
		[Description("Time spent slide drilling from start of the bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimDrillSlid")]
        public TimeMeasure ETimeDrillSlid {
            get {
                return ETimDrillSlidField;
            } 
            set {
                ETimDrillSlidField = value;
                NotifyPropertyChanged("ETimeDrillSlid");
            }
        }

        private TimeMeasure ETimDrillSlidField; 

        /// <summary>
        /// ETimHold property
        /// </summary>
		[Description("Time spent with no directional drilling work (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimHold")]
        public TimeMeasure ETimeHold {
            get {
                return ETimHoldField;
            } 
            set {
                ETimHoldField = value;
                NotifyPropertyChanged("ETimeHold");
            }
        }

        private TimeMeasure ETimHoldField; 

        /// <summary>
        /// ETimLoc property
        /// </summary>
		[Description("Time the rig has been on location (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimLoc")]
        public TimeMeasure ETimeLoc {
            get {
                return ETimLocField;
            } 
            set {
                ETimLocField = value;
                NotifyPropertyChanged("ETimeLoc");
            }
        }

        private TimeMeasure ETimLocField; 

        /// <summary>
        /// ETimReam property
        /// </summary>
		[Description("Time spent reaming from start of the bit run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimReam")]
        public TimeMeasure ETimeReam {
            get {
                return ETimReamField;
            } 
            set {
                ETimReamField = value;
                NotifyPropertyChanged("ETimeReam");
            }
        }

        private TimeMeasure ETimReamField; 

        /// <summary>
        /// ETimSpud property
        /// </summary>
		[Description("Time since the bit broke ground (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimSpud")]
        public TimeMeasure ETimeSpud {
            get {
                return ETimSpudField;
            } 
            set {
                ETimSpudField = value;
                NotifyPropertyChanged("ETimeSpud");
            }
        }

        private TimeMeasure ETimSpudField; 

        /// <summary>
        /// ETimStart property
        /// </summary>
		[Description("Time from the start of operations (commonly in days).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimStart")]
        public TimeMeasure ETimeStart {
            get {
                return ETimStartField;
            } 
            set {
                ETimStartField = value;
                NotifyPropertyChanged("ETimeStart");
            }
        }

        private TimeMeasure ETimStartField; 

        /// <summary>
        /// ETimSteering property
        /// </summary>
		[Description("Time spent steering the bottomhole assembly (commonly in hours).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimSteering")]
        public TimeMeasure ETimeSteering {
            get {
                return ETimSteeringField;
            } 
            set {
                ETimSteeringField = value;
                NotifyPropertyChanged("ETimeSteering");
            }
        }

        private TimeMeasure ETimSteeringField; 

        /// <summary>
        /// Forecast24Hr property
        /// </summary>
		[StringLength(2000)]
        [Description("Forecast of activities for the next 24 hrs.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Forecast24Hr")]
        public string Forecast24Hr {
            get {
                return Forecast24HrField;
            } 
            set {
                Forecast24HrField = value;
                NotifyPropertyChanged("Forecast24Hr");
            }
        }

        private string Forecast24HrField; 

        /// <summary>
        /// Geologist property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the operator's wellsite geologist.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Geologist")]
        public string Geologist {
            get {
                return GeologistField;
            } 
            set {
                GeologistField = value;
                NotifyPropertyChanged("Geologist");
            }
        }

        private string GeologistField; 

        /// <summary>
        /// Lithology property
        /// </summary>
		[StringLength(64)]
        [Description("Description of the lithology for the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Lithology")]
        public string Lithology {
            get {
                return LithologyField;
            } 
            set {
                LithologyField = value;
                NotifyPropertyChanged("Lithology");
            }
        }

        private string LithologyField; 

        /// <summary>
        /// Maasp property
        /// </summary>
		[Description("Maximum allowable shut-in casing pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("Maasp")]
        public PressureMeasure Maasp {
            get {
                return MaaspField;
            } 
            set {
                MaaspField = value;
                NotifyPropertyChanged("Maasp");
            }
        }

        private PressureMeasure MaaspField; 

        /// <summary>
        /// MdCsgLast property
        /// </summary>
		[Description("Measured depth of last casing.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdCsgLast")]
        public MeasuredDepthCoord MDCsgLast {
            get {
                return MdCsgLastField;
            } 
            set {
                MdCsgLastField = value;
                NotifyPropertyChanged("MDCsgLast");
            }
        }

        private MeasuredDepthCoord MdCsgLastField; 

        /// <summary>
        /// MdPlanned property
        /// </summary>
		[Description("Measured depth of plan for this day number.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdPlanned")]
        public MeasuredDepthCoord MDPlanned {
            get {
                return MdPlannedField;
            } 
            set {
                MdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord MdPlannedField; 

        /// <summary>
        /// MdReport property
        /// </summary>
		[Description("The measured depth of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdReport")]
        public MeasuredDepthCoord MDReport {
            get {
                return MdReportField;
            } 
            set {
                MdReportField = value;
                NotifyPropertyChanged("MDReport");
            }
        }

        private MeasuredDepthCoord MdReportField; 

        /// <summary>
        /// NameFormation property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the formation.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameFormation")]
        public string NameFormation {
            get {
                return NameFormationField;
            } 
            set {
                NameFormationField = value;
                NotifyPropertyChanged("NameFormation");
            }
        }

        private string NameFormationField; 

        /// <summary>
        /// NumAFE property
        /// </summary>
		[StringLength(64)]
        [Description("Authorization for expenditure (AFE) number that this cost item applies to.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumAFE")]
        public string NumAFE {
            get {
                return NumAFEField;
            } 
            set {
                NumAFEField = value;
                NotifyPropertyChanged("NumAFE");
            }
        }

        private string NumAFEField; 

        /// <summary>
        /// NumContract property
        /// </summary>
		[Description("Number of contractor personnel on board the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumContract")]
        public int? NumContract {
            get {
                return NumContractField;
            } 
            set {
                NumContractField = value;
                 this.NumContractSpecified = true;
                NotifyPropertyChanged("NumContract");
            }
        }

        private int? NumContractField; 

        /// <summary>
        /// NumContractSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumContractSpecified {
            get {
                return NumContractSpecifiedField;
            } 
            set {
                NumContractSpecifiedField = value;
                NotifyPropertyChanged("NumContractSpecified");
            }
        }

        private bool NumContractSpecifiedField; 

        /// <summary>
        /// NumOperator property
        /// </summary>
		[Description("Number of operator personnel on board the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumOperator")]
        public int? NumOperator {
            get {
                return NumOperatorField;
            } 
            set {
                NumOperatorField = value;
                 this.NumOperatorSpecified = true;
                NotifyPropertyChanged("NumOperator");
            }
        }

        private int? NumOperatorField; 

        /// <summary>
        /// NumOperatorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumOperatorSpecified {
            get {
                return NumOperatorSpecifiedField;
            } 
            set {
                NumOperatorSpecifiedField = value;
                NotifyPropertyChanged("NumOperatorSpecified");
            }
        }

        private bool NumOperatorSpecifiedField; 

        /// <summary>
        /// NumPob property
        /// </summary>
		[Description("Total number of personnel on board the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumPob")]
        public int? NumPob {
            get {
                return NumPobField;
            } 
            set {
                NumPobField = value;
                 this.NumPobSpecified = true;
                NotifyPropertyChanged("NumPob");
            }
        }

        private int? NumPobField; 

        /// <summary>
        /// NumPobSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumPobSpecified {
            get {
                return NumPobSpecifiedField;
            } 
            set {
                NumPobSpecifiedField = value;
                NotifyPropertyChanged("NumPobSpecified");
            }
        }

        private bool NumPobSpecifiedField; 

        /// <summary>
        /// NumService property
        /// </summary>
		[Description("Number of service company personnel on board the rig.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumService")]
        public int? NumService {
            get {
                return NumServiceField;
            } 
            set {
                NumServiceField = value;
                 this.NumServiceSpecified = true;
                NotifyPropertyChanged("NumService");
            }
        }

        private int? NumServiceField; 

        /// <summary>
        /// NumServiceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumServiceSpecified {
            get {
                return NumServiceSpecifiedField;
            } 
            set {
                NumServiceSpecifiedField = value;
                NotifyPropertyChanged("NumServiceSpecified");
            }
        }

        private bool NumServiceSpecifiedField; 

        /// <summary>
        /// PresKickTol property
        /// </summary>
		[Description("Kick tolerance pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresKickTol")]
        public PressureMeasure PresKickTol {
            get {
                return PresKickTolField;
            } 
            set {
                PresKickTolField = value;
                NotifyPropertyChanged("PresKickTol");
            }
        }

        private PressureMeasure PresKickTolField; 

        /// <summary>
        /// PresLotEmw property
        /// </summary>
		[Description("Leak off test equivalent mud weight.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("PresLotEmw")]
        public MassPerVolumeMeasure PresLotEmw {
            get {
                return PresLotEmwField;
            } 
            set {
                PresLotEmwField = value;
                NotifyPropertyChanged("PresLotEmw");
            }
        }

        private MassPerVolumeMeasure PresLotEmwField; 

        /// <summary>
        /// Rig property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the rig used in this reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Rig")]
        public string Rig {
            get {
                return RigField;
            } 
            set {
                RigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private string RigField; 

        /// <summary>
        /// RopAv property
        /// </summary>
		[Description("Average rate of penetration through the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("RopAv")]
        public LengthPerTimeMeasure RopAverage {
            get {
                return RopAvField;
            } 
            set {
                RopAvField = value;
                NotifyPropertyChanged("RopAverage");
            }
        }

        private LengthPerTimeMeasure RopAvField; 

        /// <summary>
        /// RopCurrent property
        /// </summary>
		[Description("Rate of penetration at report time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerTimeMeasure")]
		[XmlElement("RopCurrent")]
        public LengthPerTimeMeasure RopCurrent {
            get {
                return RopCurrentField;
            } 
            set {
                RopCurrentField = value;
                NotifyPropertyChanged("RopCurrent");
            }
        }

        private LengthPerTimeMeasure RopCurrentField; 

        /// <summary>
        /// StatusCurrent property
        /// </summary>
		[StringLength(2000)]
        [Description("Current status description.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("StatusCurrent")]
        public string StatusCurrent {
            get {
                return StatusCurrentField;
            } 
            set {
                StatusCurrentField = value;
                NotifyPropertyChanged("StatusCurrent");
            }
        }

        private string StatusCurrentField; 

        /// <summary>
        /// Sum24Hr property
        /// </summary>
		[StringLength(2000)]
        [Description("Summary of the operations and events for the reporting period (the previous 24 hours).")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Sum24Hr")]
        public string Sum24Hr {
            get {
                return Sum24HrField;
            } 
            set {
                Sum24HrField = value;
                NotifyPropertyChanged("Sum24Hr");
            }
        }

        private string Sum24HrField; 

        /// <summary>
        /// Supervisor property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the operator's rig supervisor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Supervisor")]
        public string Supervisor {
            get {
                return SupervisorField;
            } 
            set {
                SupervisorField = value;
                NotifyPropertyChanged("Supervisor");
            }
        }

        private string SupervisorField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[StringLength(64)]
        [Description("A pointer to the tubular assembly (as specified in the Tubular object) used in this report period.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Tubular")]
        public string Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private string TubularField; 

        /// <summary>
        /// TvdCsgLast property
        /// </summary>
		[Description("True vertical depth of the last casing installed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdCsgLast")]
        public WellVerticalDepthCoord TvdCsgLast {
            get {
                return TvdCsgLastField;
            } 
            set {
                TvdCsgLastField = value;
                NotifyPropertyChanged("TvdCsgLast");
            }
        }

        private WellVerticalDepthCoord TvdCsgLastField; 

        /// <summary>
        /// TvdLot property
        /// </summary>
		[Description("True vertical depth of the leak-off test point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdLot")]
        public WellVerticalDepthCoord TvdLot {
            get {
                return TvdLotField;
            } 
            set {
                TvdLotField = value;
                NotifyPropertyChanged("TvdLot");
            }
        }

        private WellVerticalDepthCoord TvdLotField; 

        /// <summary>
        /// TvdReport property
        /// </summary>
		[Description("True vertical depth of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdReport")]
        public WellVerticalDepthCoord TvdReport {
            get {
                return TvdReportField;
            } 
            set {
                TvdReportField = value;
                NotifyPropertyChanged("TvdReport");
            }
        }

        private WellVerticalDepthCoord TvdReportField; 

        /// <summary>
        /// VolKickTol property
        /// </summary>
		[Description("Kick tolerance volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeMeasure")]
		[XmlElement("VolKickTol")]
        public VolumeMeasure VolKickTol {
            get {
                return VolKickTolField;
            } 
            set {
                VolKickTolField = value;
                NotifyPropertyChanged("VolKickTol");
            }
        }

        private VolumeMeasure VolKickTolField; 

        /// <summary>
        /// RigResponse property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RigResponse")]
		[XmlElement("RigResponse")]
        public RigResponse RigResponse {
            get {
                return RigResponseField;
            } 
            set {
                RigResponseField = value;
                NotifyPropertyChanged("RigResponse");
            }
        }

        private RigResponse RigResponseField; 

        /// <summary>
        /// ShakerOp property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ShakerOp")]
		[XmlElement("ShakerOp")]
        public List<ShakerOp> ShakerOperating {
            get {
                return ShakerOpField;
            } 
            set {
                ShakerOpField = value;
                NotifyPropertyChanged("ShakerOperating");
            }
        }

         /// <summary>
         /// bool to indicate if ShakerOperating has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ShakerOperatingSpecified
         {
             get {
             if(ShakerOpField!=null)
                 return ShakerOpField.Count>0?true:false;
             else return false;
             }
         }
        private List<ShakerOp> ShakerOpField; 

        /// <summary>
        /// Hse property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Hse")]
		[XmlElement("Hse")]
        public Hse Hse {
            get {
                return HseField;
            } 
            set {
                HseField = value;
                NotifyPropertyChanged("Hse");
            }
        }

        private Hse HseField; 

        /// <summary>
        /// SupportCraft property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SupportCraft")]
		[XmlElement("SupportCraft")]
        public List<SupportCraft> SupportCraft {
            get {
                return SupportCraftField;
            } 
            set {
                SupportCraftField = value;
                NotifyPropertyChanged("SupportCraft");
            }
        }

         /// <summary>
         /// bool to indicate if SupportCraft has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SupportCraftSpecified
         {
             get {
             if(SupportCraftField!=null)
                 return SupportCraftField.Count>0?true:false;
             else return false;
             }
         }
        private List<SupportCraft> SupportCraftField; 

        /// <summary>
        /// Weather property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Weather")]
		[XmlElement("Weather")]
        public List<Weather> Weather {
            get {
                return WeatherField;
            } 
            set {
                WeatherField = value;
                NotifyPropertyChanged("Weather");
            }
        }

         /// <summary>
         /// bool to indicate if Weather has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WeatherSpecified
         {
             get {
             if(WeatherField!=null)
                 return WeatherField.Count>0?true:false;
             else return false;
             }
         }
        private List<Weather> WeatherField; 

        /// <summary>
        /// MudInventory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Inventory")]
		[XmlElement("MudInventory")]
        public List<Inventory> MudInventory {
            get {
                return MudInventoryField;
            } 
            set {
                MudInventoryField = value;
                NotifyPropertyChanged("MudInventory");
            }
        }

         /// <summary>
         /// bool to indicate if MudInventory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MudInventorySpecified
         {
             get {
             if(MudInventoryField!=null)
                 return MudInventoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<Inventory> MudInventoryField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// MudVolume property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MudVolume")]
		[XmlElement("MudVolume")]
        public MudVolume MudVolume {
            get {
                return MudVolumeField;
            } 
            set {
                MudVolumeField = value;
                NotifyPropertyChanged("MudVolume");
            }
        }

        private MudVolume MudVolumeField; 

        /// <summary>
        /// Personnel property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Personnel")]
		[XmlElement("Personnel")]
        public List<Personnel> Personnel {
            get {
                return PersonnelField;
            } 
            set {
                PersonnelField = value;
                NotifyPropertyChanged("Personnel");
            }
        }

         /// <summary>
         /// bool to indicate if Personnel has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PersonnelSpecified
         {
             get {
             if(PersonnelField!=null)
                 return PersonnelField.Count>0?true:false;
             else return false;
             }
         }
        private List<Personnel> PersonnelField; 

        /// <summary>
        /// Activity property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillActivity")]
		[XmlElement("Activity")]
        public List<DrillActivity> Activity {
            get {
                return ActivityField;
            } 
            set {
                ActivityField = value;
                NotifyPropertyChanged("Activity");
            }
        }

         /// <summary>
         /// bool to indicate if Activity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ActivitySpecified
         {
             get {
             if(ActivityField!=null)
                 return ActivityField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillActivity> ActivityField; 

        /// <summary>
        /// DrillingParams property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillingParams")]
		[XmlElement("DrillingParams")]
        public List<DrillingParams> DrillingParams {
            get {
                return DrillingParamsField;
            } 
            set {
                DrillingParamsField = value;
                NotifyPropertyChanged("DrillingParams");
            }
        }

         /// <summary>
         /// bool to indicate if DrillingParams has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DrillingParamsSpecified
         {
             get {
             if(DrillingParamsField!=null)
                 return DrillingParamsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillingParams> DrillingParamsField; 

        /// <summary>
        /// WbGeometry property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WbGeometry")]
        public DataObjectReference WellboreGeometry {
            get {
                return WbGeometryField;
            } 
            set {
                WbGeometryField = value;
                NotifyPropertyChanged("WellboreGeometry");
            }
        }

        private DataObjectReference WbGeometryField; 

        /// <summary>
        /// DayCost property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DayCost")]
		[XmlElement("DayCost")]
        public List<DayCost> DayCost {
            get {
                return DayCostField;
            } 
            set {
                DayCostField = value;
                NotifyPropertyChanged("DayCost");
            }
        }

         /// <summary>
         /// bool to indicate if DayCost has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DayCostSpecified
         {
             get {
             if(DayCostField!=null)
                 return DayCostField.Count>0?true:false;
             else return false;
             }
         }
        private List<DayCost> DayCostField; 

        /// <summary>
        /// TrajectoryStation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "TrajectoryStation")]
		[XmlElement("TrajectoryStation")]
        public List<TrajectoryStation> TrajectoryStation {
            get {
                return TrajectoryStationField;
            } 
            set {
                TrajectoryStationField = value;
                NotifyPropertyChanged("TrajectoryStation");
            }
        }

         /// <summary>
         /// bool to indicate if TrajectoryStation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TrajectoryStationSpecified
         {
             get {
             if(TrajectoryStationField!=null)
                 return TrajectoryStationField.Count>0?true:false;
             else return false;
             }
         }
        private List<TrajectoryStation> TrajectoryStationField; 

        /// <summary>
        /// Fluid property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Fluid")]
		[XmlElement("Fluid")]
        public List<Fluid> Fluid {
            get {
                return FluidField;
            } 
            set {
                FluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

         /// <summary>
         /// bool to indicate if Fluid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSpecified
         {
             get {
             if(FluidField!=null)
                 return FluidField.Count>0?true:false;
             else return false;
             }
         }
        private List<Fluid> FluidField; 

        /// <summary>
        /// Scr property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Scr")]
		[XmlElement("Scr")]
        public List<Scr> Scr {
            get {
                return ScrField;
            } 
            set {
                ScrField = value;
                NotifyPropertyChanged("Scr");
            }
        }

         /// <summary>
         /// bool to indicate if Scr has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScrSpecified
         {
             get {
             if(ScrField!=null)
                 return ScrField.Count>0?true:false;
             else return false;
             }
         }
        private List<Scr> ScrField; 

        /// <summary>
        /// BulkInventory property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Inventory")]
		[XmlElement("BulkInventory")]
        public List<Inventory> BulkInventory {
            get {
                return BulkInventoryField;
            } 
            set {
                BulkInventoryField = value;
                NotifyPropertyChanged("BulkInventory");
            }
        }

         /// <summary>
         /// bool to indicate if BulkInventory has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BulkInventorySpecified
         {
             get {
             if(BulkInventoryField!=null)
                 return BulkInventoryField.Count>0?true:false;
             else return false;
             }
         }
        private List<Inventory> BulkInventoryField; 

        /// <summary>
        /// PitVolume property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PitVolume")]
		[XmlElement("PitVolume")]
        public List<PitVolume> PitVolume {
            get {
                return PitVolumeField;
            } 
            set {
                PitVolumeField = value;
                NotifyPropertyChanged("PitVolume");
            }
        }

         /// <summary>
         /// bool to indicate if PitVolume has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PitVolumeSpecified
         {
             get {
             if(PitVolumeField!=null)
                 return PitVolumeField.Count>0?true:false;
             else return false;
             }
         }
        private List<PitVolume> PitVolumeField; 

        /// <summary>
        /// PumpOp property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PumpOp")]
		[XmlElement("PumpOp")]
        public List<PumpOp> PumpOperating {
            get {
                return PumpOpField;
            } 
            set {
                PumpOpField = value;
                NotifyPropertyChanged("PumpOperating");
            }
        }

         /// <summary>
         /// bool to indicate if PumpOperating has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PumpOperatingSpecified
         {
             get {
             if(PumpOpField!=null)
                 return PumpOpField.Count>0?true:false;
             else return false;
             }
         }
        private List<PumpOp> PumpOpField; 


    } //here

    /// <summary>
    /// This class represents the Trajectory xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Trajectory xsd type.")]
    public partial class Trajectory : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the trajectory, whether active, inactive or closed")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelStatus")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                 this.GrowingStatusSpecified = true;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        
        private bool GrowingStatusSpecifiedField = false;
        
        /// <summary>
        /// GrowingStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GrowingStatusSpecified {
            get {
                return GrowingStatusSpecifiedField;
            } 
            set {
                GrowingStatusSpecifiedField = value;
                NotifyPropertyChanged("GrowingStatusSpecified");
            }
        }
        
        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// DTimTrajStart property
        /// </summary>
		[Description("Start date and time of trajectory station measurements. Note that this is NOT a server query parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimTrajStart")]
        public Timestamp? DateTimeTrajStart {
            get {
                return DTimTrajStartField;
            } 
            set {
                DTimTrajStartField = value;
                 this.DateTimeTrajStartSpecified = true;
                NotifyPropertyChanged("DateTimeTrajStart");
            }
        }

        
        private bool DateTimeTrajStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeTrajStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeTrajStartSpecified {
            get {
                return DateTimeTrajStartSpecifiedField;
            } 
            set {
                DateTimeTrajStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeTrajStartSpecified");
            }
        }
        
        private Timestamp? DTimTrajStartField; 

        /// <summary>
        /// DTimTrajEnd property
        /// </summary>
		[Description("End date and time of trajectory station measurements. Note that this is NOT a server query parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimTrajEnd")]
        public Timestamp? DateTimeTrajEnd {
            get {
                return DTimTrajEndField;
            } 
            set {
                DTimTrajEndField = value;
                 this.DateTimeTrajEndSpecified = true;
                NotifyPropertyChanged("DateTimeTrajEnd");
            }
        }

        
        private bool DateTimeTrajEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeTrajEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeTrajEndSpecified {
            get {
                return DateTimeTrajEndSpecifiedField;
            } 
            set {
                DateTimeTrajEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeTrajEndSpecified");
            }
        }
        
        private Timestamp? DTimTrajEndField; 

        /// <summary>
        /// MdMn property
        /// </summary>
		[Description("Minimum measured depth of this object. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdMn")]
        public MeasuredDepthCoord MDMin {
            get {
                return MdMnField;
            } 
            set {
                MdMnField = value;
                NotifyPropertyChanged("MDMin");
            }
        }

        private MeasuredDepthCoord MdMnField; 

        /// <summary>
        /// MdMx property
        /// </summary>
		[Description("Maximum measured depth of this object. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdMx")]
        public MeasuredDepthCoord MDMax {
            get {
                return MdMxField;
            } 
            set {
                MdMxField = value;
                NotifyPropertyChanged("MDMax");
            }
        }

        private MeasuredDepthCoord MdMxField; 

        /// <summary>
        /// ServiceCompany property
        /// </summary>
		[StringLength(64)]
        [Description("Name of contractor who provided the service.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ServiceCompany")]
        public string ServiceCompany {
            get {
                return ServiceCompanyField;
            } 
            set {
                ServiceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string ServiceCompanyField; 

        /// <summary>
        /// MagDeclUsed property
        /// </summary>
		[Description("Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.  Starting value if stations have individual values.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("MagDeclUsed")]
        public PlaneAngleMeasure MagDeclUsed {
            get {
                return MagDeclUsedField;
            } 
            set {
                MagDeclUsedField = value;
                NotifyPropertyChanged("MagDeclUsed");
            }
        }

        private PlaneAngleMeasure MagDeclUsedField; 

        /// <summary>
        /// GridConUsed property
        /// </summary>
		[Description("Magnetic declination (convergence) used to correct a Magnetic North referenced azimuth to a True North azimuth.  Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added. Starting value if stations have individual values.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("GridConUsed")]
        public PlaneAngleMeasure GridConUsed {
            get {
                return GridConUsedField;
            } 
            set {
                GridConUsedField = value;
                NotifyPropertyChanged("GridConUsed");
            }
        }

        private PlaneAngleMeasure GridConUsedField; 

        /// <summary>
        /// AziVertSect property
        /// </summary>
		[Description("Azimuth used for vertical section plot/computations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("AziVertSect")]
        public PlaneAngleMeasure AziVertSect {
            get {
                return AziVertSectField;
            } 
            set {
                AziVertSectField = value;
                NotifyPropertyChanged("AziVertSect");
            }
        }

        private PlaneAngleMeasure AziVertSectField; 

        /// <summary>
        /// DispNsVertSectOrig property
        /// </summary>
		[Description("Origin north-south used for vertical section plot/computations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DispNsVertSectOrig")]
        public LengthMeasure DispNSVertSectOrig {
            get {
                return DispNsVertSectOrigField;
            } 
            set {
                DispNsVertSectOrigField = value;
                NotifyPropertyChanged("DispNSVertSectOrig");
            }
        }

        private LengthMeasure DispNsVertSectOrigField; 

        /// <summary>
        /// DispEwVertSectOrig property
        /// </summary>
		[Description("Origin east-west used for vertical section plot/computations.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DispEwVertSectOrig")]
        public LengthMeasure DispEWVertSectOrig {
            get {
                return DispEwVertSectOrigField;
            } 
            set {
                DispEwVertSectOrigField = value;
                NotifyPropertyChanged("DispEWVertSectOrig");
            }
        }

        private LengthMeasure DispEwVertSectOrigField; 

        /// <summary>
        /// Definitive property
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that this trajectory is definitive for  this wellbore. False (\"false\" or \"0\") or not given indicates otherwise. There can only be one trajectory per wellbore with definitive=true and it must define the geometry of the whole wellbore (surface to bottom). The definitive trajectory may represent a composite of information in many other trajectories. A query requesting a subset of the possible information can provide a simplistic view of the geometry of the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Definitive")]
        public bool? Definitive {
            get {
                return DefinitiveField;
            } 
            set {
                DefinitiveField = value;
                 this.DefinitiveSpecified = true;
                NotifyPropertyChanged("Definitive");
            }
        }

        private bool? DefinitiveField; 

        /// <summary>
        /// DefinitiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DefinitiveSpecified {
            get {
                return DefinitiveSpecifiedField;
            } 
            set {
                DefinitiveSpecifiedField = value;
                NotifyPropertyChanged("DefinitiveSpecified");
            }
        }

        private bool DefinitiveSpecifiedField; 

        /// <summary>
        /// Memory property
        /// </summary>
		[Description("Is trajectory a result of a memory dump from a tool?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Memory")]
        public bool? Memory {
            get {
                return MemoryField;
            } 
            set {
                MemoryField = value;
                 this.MemorySpecified = true;
                NotifyPropertyChanged("Memory");
            }
        }

        private bool? MemoryField; 

        /// <summary>
        /// MemorySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MemorySpecified {
            get {
                return MemorySpecifiedField;
            } 
            set {
                MemorySpecifiedField = value;
                NotifyPropertyChanged("MemorySpecified");
            }
        }

        private bool MemorySpecifiedField; 

        /// <summary>
        /// FinalTraj property
        /// </summary>
		[Description("Is trajectory a final or intermediate/preliminary?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("FinalTraj")]
        public bool? FinalTraj {
            get {
                return FinalTrajField;
            } 
            set {
                FinalTrajField = value;
                 this.FinalTrajSpecified = true;
                NotifyPropertyChanged("FinalTraj");
            }
        }

        private bool? FinalTrajField; 

        /// <summary>
        /// FinalTrajSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FinalTrajSpecified {
            get {
                return FinalTrajSpecifiedField;
            } 
            set {
                FinalTrajSpecifiedField = value;
                NotifyPropertyChanged("FinalTrajSpecified");
            }
        }

        private bool FinalTrajSpecifiedField; 

        /// <summary>
        /// AziRef property
        /// </summary>
		[Description("Specifies the definition of north. While this is optional because of legacy data, it is strongly recommended  that this always be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "AziRef")]
		[XmlElement("AziRef")]
        public AziRef? AziRef {
            get {
                return AziRefField;
            } 
            set {
                AziRefField = value;
                 this.AziRefSpecified = true;
                NotifyPropertyChanged("AziRef");
            }
        }

        private AziRef? AziRefField; 

        /// <summary>
        /// AziRefSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AziRefSpecified {
            get {
                return AziRefSpecifiedField;
            } 
            set {
                AziRefSpecifiedField = value;
                NotifyPropertyChanged("AziRefSpecified");
            }
        }

        private bool AziRefSpecifiedField; 

        /// <summary>
        /// TrajectoryStation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "TrajectoryStation")]
		[XmlElement("TrajectoryStation")]
        public List<TrajectoryStation> TrajectoryStation {
            get {
                return TrajectoryStationField;
            } 
            set {
                TrajectoryStationField = value;
                NotifyPropertyChanged("TrajectoryStation");
            }
        }

         /// <summary>
         /// bool to indicate if TrajectoryStation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TrajectoryStationSpecified
         {
             get {
             if(TrajectoryStationField!=null)
                 return TrajectoryStationField.Count>0?true:false;
             else return false;
             }
         }
        private List<TrajectoryStation> TrajectoryStationField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// ParentTrajectory property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ParentTrajectory")]
        public DataObjectReference ParentTrajectory {
            get {
                return ParentTrajectoryField;
            } 
            set {
                ParentTrajectoryField = value;
                NotifyPropertyChanged("ParentTrajectory");
            }
        }

        private DataObjectReference ParentTrajectoryField; 


    } //here

    /// <summary>
    /// This class represents the ToolErrorModel xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the ToolErrorModel xsd type.")]
    public partial class ToolErrorModel : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeSurveyTool property
        /// </summary>
		[Description("The type of tool used for the measurements. This is the same list as defined for a trajectoryStation.")]
        [EnergisticsDataTypeAttribute(DataType = "TypeSurveyTool")]
		[XmlElement("TypeSurveyTool")]
        public TypeSurveyTool? TypeSurveyTool {
            get {
                return TypeSurveyToolField;
            } 
            set {
                TypeSurveyToolField = value;
                 this.TypeSurveyToolSpecified = true;
                NotifyPropertyChanged("TypeSurveyTool");
            }
        }

        private TypeSurveyTool? TypeSurveyToolField; 

        /// <summary>
        /// TypeSurveyToolSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSurveyToolSpecified {
            get {
                return TypeSurveyToolSpecifiedField;
            } 
            set {
                TypeSurveyToolSpecifiedField = value;
                NotifyPropertyChanged("TypeSurveyToolSpecified");
            }
        }

        private bool TypeSurveyToolSpecifiedField; 

        /// <summary>
        /// UseErrorTermSet property
        /// </summary>
		[StringLength(64)]
        [Description("Reference to the toolErrorTermSet object that  contains the error terms used in this model.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("UseErrorTermSet")]
        public string UseErrorTermSet {
            get {
                return UseErrorTermSetField;
            } 
            set {
                UseErrorTermSetField = value;
                NotifyPropertyChanged("UseErrorTermSet");
            }
        }

        private string UseErrorTermSetField; 

        /// <summary>
        /// Authorization property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaAuthorizationData")]
		[XmlElement("Authorization")]
        public IscwsaAuthorizationData Authorization {
            get {
                return AuthorizationField;
            } 
            set {
                AuthorizationField = value;
                NotifyPropertyChanged("Authorization");
            }
        }

        private IscwsaAuthorizationData AuthorizationField; 

        /// <summary>
        /// OperatingCondition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaSurveyToolOperatingCondition")]
		[XmlElement("OperatingCondition")]
        public List<IscwsaSurveyToolOperatingCondition> OperatingCondition {
            get {
                return OperatingConditionField;
            } 
            set {
                OperatingConditionField = value;
                NotifyPropertyChanged("OperatingCondition");
            }
        }

         /// <summary>
         /// bool to indicate if OperatingCondition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OperatingConditionSpecified
         {
             get {
             if(OperatingConditionField!=null)
                 return OperatingConditionField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaSurveyToolOperatingCondition> OperatingConditionField; 

        /// <summary>
        /// OperatingInterval property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaSurveyToolOperatingInterval")]
		[XmlElement("OperatingInterval")]
        public List<IscwsaSurveyToolOperatingInterval> OperatingInterval {
            get {
                return OperatingIntervalField;
            } 
            set {
                OperatingIntervalField = value;
                NotifyPropertyChanged("OperatingInterval");
            }
        }

         /// <summary>
         /// bool to indicate if OperatingInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OperatingIntervalSpecified
         {
             get {
             if(OperatingIntervalField!=null)
                 return OperatingIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaSurveyToolOperatingInterval> OperatingIntervalField; 

        /// <summary>
        /// ModelParameters property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaModelParameters")]
		[XmlElement("ModelParameters")]
        public IscwsaModelParameters ModelParameters {
            get {
                return ModelParametersField;
            } 
            set {
                ModelParametersField = value;
                NotifyPropertyChanged("ModelParameters");
            }
        }

        private IscwsaModelParameters ModelParametersField; 

        /// <summary>
        /// ErrorTermValue property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IscwsaErrorTermValue")]
		[XmlElement("ErrorTermValue")]
        public List<IscwsaErrorTermValue> ErrorTermValue {
            get {
                return ErrorTermValueField;
            } 
            set {
                ErrorTermValueField = value;
                NotifyPropertyChanged("ErrorTermValue");
            }
        }

         /// <summary>
         /// bool to indicate if ErrorTermValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ErrorTermValueSpecified
         {
             get {
             if(ErrorTermValueField!=null)
                 return ErrorTermValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<IscwsaErrorTermValue> ErrorTermValueField; 


    } //here

    /// <summary>
    /// This class represents the DownholeComponent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the DownholeComponent xsd type.")]
    public partial class DownholeComponent : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// StartDate property
        /// </summary>
		[Description("The date this equipment was installed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("StartDate")]
        public Timestamp? StartDate {
            get {
                return StartDateField;
            } 
            set {
                StartDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        
        private bool StartDateSpecifiedField = false;
        
        /// <summary>
        /// StartDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return StartDateSpecifiedField;
            } 
            set {
                StartDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }
        
        private Timestamp? StartDateField; 

        /// <summary>
        /// EndDate property
        /// </summary>
		[Description("The date the equipment was removed.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("EndDate")]
        public Timestamp? EndDate {
            get {
                return EndDateField;
            } 
            set {
                EndDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        
        private bool EndDateSpecifiedField = false;
        
        /// <summary>
        /// EndDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return EndDateSpecifiedField;
            } 
            set {
                EndDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }
        
        private Timestamp? EndDateField; 

        /// <summary>
        /// DownholeStringSet property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DownholeStringSet")]
		[XmlArrayItem("DownholeString")]
        [XmlArray("DownholeStringSet")]
        public List<DownholeString> DownholeStringSet {
            get {
                return DownholeStringSetField;
            } 
            set {
                DownholeStringSetField = value;
                NotifyPropertyChanged("DownholeStringSet");
            }
        }

         /// <summary>
         /// bool to indicate if DownholeStringSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DownholeStringSetSpecified
         {
             get {
             if(DownholeStringSetField!=null)
                 return DownholeStringSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<DownholeString> DownholeStringSetField; 

        /// <summary>
        /// PerforationSets property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PerforationSets")]
		[XmlArrayItem("PerforationSet")]
        [XmlArray("PerforationSets")]
        public List<PerforationSet> PerforationSets {
            get {
                return PerforationSetsField;
            } 
            set {
                PerforationSetsField = value;
                NotifyPropertyChanged("PerforationSets");
            }
        }

         /// <summary>
         /// bool to indicate if PerforationSets has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerforationSetsSpecified
         {
             get {
             if(PerforationSetsField!=null)
                 return PerforationSetsField.Count>0?true:false;
             else return false;
             }
         }
        private List<PerforationSet> PerforationSetsField; 

        /// <summary>
        /// EquipmentSet property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EquipmentSet")]
		[XmlArrayItem("Equipment")]
        [XmlArray("EquipmentSet")]
        public List<Equipment> EquipmentSet {
            get {
                return EquipmentSetField;
            } 
            set {
                EquipmentSetField = value;
                NotifyPropertyChanged("EquipmentSet");
            }
        }

         /// <summary>
         /// bool to indicate if EquipmentSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EquipmentSetSpecified
         {
             get {
             if(EquipmentSetField!=null)
                 return EquipmentSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<Equipment> EquipmentSetField; 

        /// <summary>
        /// Well property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Well")]
        public DataObjectReference Well {
            get {
                return WellField;
            } 
            set {
                WellField = value;
                NotifyPropertyChanged("Well");
            }
        }

        private DataObjectReference WellField; 

        /// <summary>
        /// WellHead property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DownholeString")]
		[XmlElement("WellHead")]
        public DownholeString WellHead {
            get {
                return WellHeadField;
            } 
            set {
                WellHeadField = value;
                NotifyPropertyChanged("WellHead");
            }
        }

        private DownholeString WellHeadField; 

        /// <summary>
        /// BoreholeStringSet property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "BoreholeStringSet")]
		[XmlArrayItem("BoreholeString")]
        [XmlArray("BoreholeStringSet")]
        public List<BoreholeString> BoreholeStringSet {
            get {
                return BoreholeStringSetField;
            } 
            set {
                BoreholeStringSetField = value;
                NotifyPropertyChanged("BoreholeStringSet");
            }
        }

         /// <summary>
         /// bool to indicate if BoreholeStringSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoreholeStringSetSpecified
         {
             get {
             if(BoreholeStringSetField!=null)
                 return BoreholeStringSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<BoreholeString> BoreholeStringSetField; 


    } //here

    /// <summary>
    /// This class represents the CementJob xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the CementJob xsd type.")]
    public partial class CementJob : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// JobType property
        /// </summary>
		[Description("Type of cement job.")]
        [EnergisticsDataTypeAttribute(DataType = "CementJobType")]
		[XmlElement("JobType")]
        public CementJobType? JobType {
            get {
                return JobTypeField;
            } 
            set {
                JobTypeField = value;
                 this.JobTypeSpecified = true;
                NotifyPropertyChanged("JobType");
            }
        }

        private CementJobType? JobTypeField; 

        /// <summary>
        /// JobTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool JobTypeSpecified {
            get {
                return JobTypeSpecifiedField;
            } 
            set {
                JobTypeSpecifiedField = value;
                NotifyPropertyChanged("JobTypeSpecified");
            }
        }

        private bool JobTypeSpecifiedField; 

        /// <summary>
        /// JobConfig property
        /// </summary>
		[StringLength(2000)]
        [Description("Job configuration.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("JobConfig")]
        public string JobConfig {
            get {
                return JobConfigField;
            } 
            set {
                JobConfigField = value;
                NotifyPropertyChanged("JobConfig");
            }
        }

        private string JobConfigField; 

        /// <summary>
        /// NameCementedString property
        /// </summary>
		[StringLength(64)]
        [Description("Name for the cemented string")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameCementedString")]
        public string NameCementedString {
            get {
                return NameCementedStringField;
            } 
            set {
                NameCementedStringField = value;
                NotifyPropertyChanged("NameCementedString");
            }
        }

        private string NameCementedStringField; 

        /// <summary>
        /// NameWorkString property
        /// </summary>
		[StringLength(64)]
        [Description("Name for the cement work string")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameWorkString")]
        public string NameWorkString {
            get {
                return NameWorkStringField;
            } 
            set {
                NameWorkStringField = value;
                NotifyPropertyChanged("NameWorkString");
            }
        }

        private string NameWorkStringField; 

        /// <summary>
        /// OffshoreJob property
        /// </summary>
		[Description("Offshore job? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("OffshoreJob")]
        public bool? OffshoreJob {
            get {
                return OffshoreJobField;
            } 
            set {
                OffshoreJobField = value;
                 this.OffshoreJobSpecified = true;
                NotifyPropertyChanged("OffshoreJob");
            }
        }

        private bool? OffshoreJobField; 

        /// <summary>
        /// OffshoreJobSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OffshoreJobSpecified {
            get {
                return OffshoreJobSpecifiedField;
            } 
            set {
                OffshoreJobSpecifiedField = value;
                NotifyPropertyChanged("OffshoreJobSpecified");
            }
        }

        private bool OffshoreJobSpecifiedField; 

        /// <summary>
        /// MdWater property
        /// </summary>
		[Description("Water depth if offshore. The distance from mean sea level to water bottom (seabed floor).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MdWater")]
        public LengthMeasure MDWater {
            get {
                return MdWaterField;
            } 
            set {
                MdWaterField = value;
                NotifyPropertyChanged("MDWater");
            }
        }

        private LengthMeasure MdWaterField; 

        /// <summary>
        /// ReturnsToSeabed property
        /// </summary>
		[Description("Returns to seabed? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("ReturnsToSeabed")]
        public bool? ReturnsToSeabed {
            get {
                return ReturnsToSeabedField;
            } 
            set {
                ReturnsToSeabedField = value;
                 this.ReturnsToSeabedSpecified = true;
                NotifyPropertyChanged("ReturnsToSeabed");
            }
        }

        private bool? ReturnsToSeabedField; 

        /// <summary>
        /// ReturnsToSeabedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReturnsToSeabedSpecified {
            get {
                return ReturnsToSeabedSpecifiedField;
            } 
            set {
                ReturnsToSeabedSpecifiedField = value;
                NotifyPropertyChanged("ReturnsToSeabedSpecified");
            }
        }

        private bool ReturnsToSeabedSpecifiedField; 

        /// <summary>
        /// MdPrevShoe property
        /// </summary>
		[Description("Measured depth of previous shoe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdPrevShoe")]
        public MeasuredDepthCoord MDPrevShoe {
            get {
                return MdPrevShoeField;
            } 
            set {
                MdPrevShoeField = value;
                NotifyPropertyChanged("MDPrevShoe");
            }
        }

        private MeasuredDepthCoord MdPrevShoeField; 

        /// <summary>
        /// MdHole property
        /// </summary>
		[Description("Measured depth at bottom of hole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdHole")]
        public MeasuredDepthCoord MDHole {
            get {
                return MdHoleField;
            } 
            set {
                MdHoleField = value;
                NotifyPropertyChanged("MDHole");
            }
        }

        private MeasuredDepthCoord MdHoleField; 

        /// <summary>
        /// TvdPrevShoe property
        /// </summary>
		[Description("True vertical depth of previous shoe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdPrevShoe")]
        public WellVerticalDepthCoord TvdPrevShoe {
            get {
                return TvdPrevShoeField;
            } 
            set {
                TvdPrevShoeField = value;
                NotifyPropertyChanged("TvdPrevShoe");
            }
        }

        private WellVerticalDepthCoord TvdPrevShoeField; 

        /// <summary>
        /// MdStringSet property
        /// </summary>
		[Description("Measured depth of cement string shoe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdStringSet")]
        public MeasuredDepthCoord MDStringSet {
            get {
                return MdStringSetField;
            } 
            set {
                MdStringSetField = value;
                NotifyPropertyChanged("MDStringSet");
            }
        }

        private MeasuredDepthCoord MdStringSetField; 

        /// <summary>
        /// TvdStringSet property
        /// </summary>
		[Description("True vertical depth of cement string shoe.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdStringSet")]
        public WellVerticalDepthCoord TvdStringSet {
            get {
                return TvdStringSetField;
            } 
            set {
                TvdStringSetField = value;
                NotifyPropertyChanged("TvdStringSet");
            }
        }

        private WellVerticalDepthCoord TvdStringSetField; 

        /// <summary>
        /// TypePlug property
        /// </summary>
		[StringLength(64)]
        [Description("Plug type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypePlug")]
        public string TypePlug {
            get {
                return TypePlugField;
            } 
            set {
                TypePlugField = value;
                NotifyPropertyChanged("TypePlug");
            }
        }

        private string TypePlugField; 

        /// <summary>
        /// NameCementString property
        /// </summary>
		[StringLength(64)]
        [Description("Name for the cementing string")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameCementString")]
        public string NameCementString {
            get {
                return NameCementStringField;
            } 
            set {
                NameCementStringField = value;
                NotifyPropertyChanged("NameCementString");
            }
        }

        private string NameCementStringField; 

        /// <summary>
        /// TypeSqueeze property
        /// </summary>
		[StringLength(64)]
        [Description("Type of squeeze.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeSqueeze")]
        public string TypeSqueeze {
            get {
                return TypeSqueezeField;
            } 
            set {
                TypeSqueezeField = value;
                NotifyPropertyChanged("TypeSqueeze");
            }
        }

        private string TypeSqueezeField; 

        /// <summary>
        /// MdSqueeze property
        /// </summary>
		[Description("Measured depth of squeeze.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdSqueeze")]
        public MeasuredDepthCoord MDSqueeze {
            get {
                return MdSqueezeField;
            } 
            set {
                MdSqueezeField = value;
                NotifyPropertyChanged("MDSqueeze");
            }
        }

        private MeasuredDepthCoord MdSqueezeField; 

        /// <summary>
        /// ToolCompany property
        /// </summary>
		[StringLength(64)]
        [Description("Company providing the cementing tool.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ToolCompany")]
        public string ToolCompany {
            get {
                return ToolCompanyField;
            } 
            set {
                ToolCompanyField = value;
                NotifyPropertyChanged("ToolCompany");
            }
        }

        private string ToolCompanyField; 

        /// <summary>
        /// TypeTool property
        /// </summary>
		[StringLength(64)]
        [Description("Cement tool type.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TypeTool")]
        public string TypeTool {
            get {
                return TypeToolField;
            } 
            set {
                TypeToolField = value;
                NotifyPropertyChanged("TypeTool");
            }
        }

        private string TypeToolField; 

        /// <summary>
        /// CoilTubing property
        /// </summary>
		[Description("Is coiled tubing used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CoilTubing")]
        public bool? CoilTubing {
            get {
                return CoilTubingField;
            } 
            set {
                CoilTubingField = value;
                 this.CoilTubingSpecified = true;
                NotifyPropertyChanged("CoilTubing");
            }
        }

        private bool? CoilTubingField; 

        /// <summary>
        /// CoilTubingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CoilTubingSpecified {
            get {
                return CoilTubingSpecifiedField;
            } 
            set {
                CoilTubingSpecifiedField = value;
                NotifyPropertyChanged("CoilTubingSpecified");
            }
        }

        private bool CoilTubingSpecifiedField; 

        /// <summary>
        /// JobReport property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CementJobReport")]
		[XmlElement("JobReport")]
        public CementJobReport JobReport {
            get {
                return JobReportField;
            } 
            set {
                JobReportField = value;
                NotifyPropertyChanged("JobReport");
            }
        }

        private CementJobReport JobReportField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// HoleConfig property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("HoleConfig")]
        public DataObjectReference HoleConfig {
            get {
                return HoleConfigField;
            } 
            set {
                HoleConfigField = value;
                NotifyPropertyChanged("HoleConfig");
            }
        }

        private DataObjectReference HoleConfigField; 

        /// <summary>
        /// Design property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CementJobDesign")]
		[XmlElement("Design")]
        public CementJobDesign Design {
            get {
                return DesignField;
            } 
            set {
                DesignField = value;
                NotifyPropertyChanged("Design");
            }
        }

        private CementJobDesign DesignField; 

        /// <summary>
        /// CementingFluid property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CementingFluid")]
		[XmlElement("CementingFluid")]
        public List<CementingFluid> CementingFluid {
            get {
                return CementingFluidField;
            } 
            set {
                CementingFluidField = value;
                NotifyPropertyChanged("CementingFluid");
            }
        }

         /// <summary>
         /// bool to indicate if CementingFluid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CementingFluidSpecified
         {
             get {
             if(CementingFluidField!=null)
                 return CementingFluidField.Count>0?true:false;
             else return false;
             }
         }
        private List<CementingFluid> CementingFluidField; 


    } //here

    /// <summary>
    /// This class represents the CementJobEvaluation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the CementJobEvaluation xsd type.")]
    public partial class CementJobEvaluation : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// PresTest property
        /// </summary>
		[Description("Test pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("PresTest")]
        public PressureMeasure PresTest {
            get {
                return PresTestField;
            } 
            set {
                PresTestField = value;
                NotifyPropertyChanged("PresTest");
            }
        }

        private PressureMeasure PresTestField; 

        /// <summary>
        /// ETimTest property
        /// </summary>
		[Description("Elapsed tome to perform the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimTest")]
        public TimeMeasure ETimeTest {
            get {
                return ETimTestField;
            } 
            set {
                ETimTestField = value;
                NotifyPropertyChanged("ETimeTest");
            }
        }

        private TimeMeasure ETimTestField; 

        /// <summary>
        /// CementShoeCollar property
        /// </summary>
		[Description("Cement found between shoe and collar?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CementShoeCollar")]
        public bool? CementShoeCollar {
            get {
                return CementShoeCollarField;
            } 
            set {
                CementShoeCollarField = value;
                 this.CementShoeCollarSpecified = true;
                NotifyPropertyChanged("CementShoeCollar");
            }
        }

        private bool? CementShoeCollarField; 

        /// <summary>
        /// CementShoeCollarSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CementShoeCollarSpecified {
            get {
                return CementShoeCollarSpecifiedField;
            } 
            set {
                CementShoeCollarSpecifiedField = value;
                NotifyPropertyChanged("CementShoeCollarSpecified");
            }
        }

        private bool CementShoeCollarSpecifiedField; 

        /// <summary>
        /// CetRun property
        /// </summary>
		[Description("Cement evaluation tool run?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CetRun")]
        public bool? CetRun {
            get {
                return CetRunField;
            } 
            set {
                CetRunField = value;
                 this.CetRunSpecified = true;
                NotifyPropertyChanged("CetRun");
            }
        }

        private bool? CetRunField; 

        /// <summary>
        /// CetRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CetRunSpecified {
            get {
                return CetRunSpecifiedField;
            } 
            set {
                CetRunSpecifiedField = value;
                NotifyPropertyChanged("CetRunSpecified");
            }
        }

        private bool CetRunSpecifiedField; 

        /// <summary>
        /// CetBondQual property
        /// </summary>
		[Description("Cement evaluation tool bond quality?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CetBondQual")]
        public bool? CetBondQual {
            get {
                return CetBondQualField;
            } 
            set {
                CetBondQualField = value;
                 this.CetBondQualSpecified = true;
                NotifyPropertyChanged("CetBondQual");
            }
        }

        private bool? CetBondQualField; 

        /// <summary>
        /// CetBondQualSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CetBondQualSpecified {
            get {
                return CetBondQualSpecifiedField;
            } 
            set {
                CetBondQualSpecifiedField = value;
                NotifyPropertyChanged("CetBondQualSpecified");
            }
        }

        private bool CetBondQualSpecifiedField; 

        /// <summary>
        /// CblRun property
        /// </summary>
		[Description("Cement bond log run?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CblRun")]
        public bool? CblRun {
            get {
                return CblRunField;
            } 
            set {
                CblRunField = value;
                 this.CblRunSpecified = true;
                NotifyPropertyChanged("CblRun");
            }
        }

        private bool? CblRunField; 

        /// <summary>
        /// CblRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CblRunSpecified {
            get {
                return CblRunSpecifiedField;
            } 
            set {
                CblRunSpecifiedField = value;
                NotifyPropertyChanged("CblRunSpecified");
            }
        }

        private bool CblRunSpecifiedField; 

        /// <summary>
        /// CblBondQual property
        /// </summary>
		[Description("Cement bond log quality indication?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CblBondQual")]
        public bool? CblBondQual {
            get {
                return CblBondQualField;
            } 
            set {
                CblBondQualField = value;
                 this.CblBondQualSpecified = true;
                NotifyPropertyChanged("CblBondQual");
            }
        }

        private bool? CblBondQualField; 

        /// <summary>
        /// CblBondQualSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CblBondQualSpecified {
            get {
                return CblBondQualSpecifiedField;
            } 
            set {
                CblBondQualSpecifiedField = value;
                NotifyPropertyChanged("CblBondQualSpecified");
            }
        }

        private bool CblBondQualSpecifiedField; 

        /// <summary>
        /// CblPres property
        /// </summary>
		[Description("Cement bond log under pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PressureMeasure")]
		[XmlElement("CblPres")]
        public PressureMeasure CblPres {
            get {
                return CblPresField;
            } 
            set {
                CblPresField = value;
                NotifyPropertyChanged("CblPres");
            }
        }

        private PressureMeasure CblPresField; 

        /// <summary>
        /// TempSurvey property
        /// </summary>
		[Description("Temperature survey run?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("TempSurvey")]
        public bool? TempSurvey {
            get {
                return TempSurveyField;
            } 
            set {
                TempSurveyField = value;
                 this.TempSurveySpecified = true;
                NotifyPropertyChanged("TempSurvey");
            }
        }

        private bool? TempSurveyField; 

        /// <summary>
        /// TempSurveySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TempSurveySpecified {
            get {
                return TempSurveySpecifiedField;
            } 
            set {
                TempSurveySpecifiedField = value;
                NotifyPropertyChanged("TempSurveySpecified");
            }
        }

        private bool TempSurveySpecifiedField; 

        /// <summary>
        /// ETimCementLog property
        /// </summary>
		[Description("Hours before logging run after cement run.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimCementLog")]
        public TimeMeasure ETimeCementLog {
            get {
                return ETimCementLogField;
            } 
            set {
                ETimCementLogField = value;
                NotifyPropertyChanged("ETimeCementLog");
            }
        }

        private TimeMeasure ETimCementLogField; 

        /// <summary>
        /// FormPit property
        /// </summary>
		[Description("Pressure integrity test/leak-off test formation breakdown gradient or absolute pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ForcePerVolumeMeasure")]
		[XmlElement("FormPit")]
        public ForcePerVolumeMeasure FormPit {
            get {
                return FormPitField;
            } 
            set {
                FormPitField = value;
                NotifyPropertyChanged("FormPit");
            }
        }

        private ForcePerVolumeMeasure FormPitField; 

        /// <summary>
        /// ToolCompanyPit property
        /// </summary>
		[StringLength(64)]
        [Description("Tool name for the pressure integrity test.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ToolCompanyPit")]
        public string ToolCompanyPit {
            get {
                return ToolCompanyPitField;
            } 
            set {
                ToolCompanyPitField = value;
                NotifyPropertyChanged("ToolCompanyPit");
            }
        }

        private string ToolCompanyPitField; 

        /// <summary>
        /// ETimPitStart property
        /// </summary>
		[Description("Hours between end of cement job and the start of the pressure integrity test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimPitStart")]
        public TimeMeasure ETimePitStart {
            get {
                return ETimPitStartField;
            } 
            set {
                ETimPitStartField = value;
                NotifyPropertyChanged("ETimePitStart");
            }
        }

        private TimeMeasure ETimPitStartField; 

        /// <summary>
        /// MdCementTop property
        /// </summary>
		[Description("Measured depth at top of cement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdCementTop")]
        public MeasuredDepthCoord MDCementTop {
            get {
                return MdCementTopField;
            } 
            set {
                MdCementTopField = value;
                NotifyPropertyChanged("MDCementTop");
            }
        }

        private MeasuredDepthCoord MdCementTopField; 

        /// <summary>
        /// TopCementMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Method to determine cement top.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TopCementMethod")]
        public string TopCementMethod {
            get {
                return TopCementMethodField;
            } 
            set {
                TopCementMethodField = value;
                NotifyPropertyChanged("TopCementMethod");
            }
        }

        private string TopCementMethodField; 

        /// <summary>
        /// TocOK property
        /// </summary>
		[Description("Is the top of cement sufficient?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("TocOK")]
        public bool? TocOK {
            get {
                return TocOKField;
            } 
            set {
                TocOKField = value;
                 this.TocOKSpecified = true;
                NotifyPropertyChanged("TocOK");
            }
        }

        private bool? TocOKField; 

        /// <summary>
        /// TocOKSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TocOKSpecified {
            get {
                return TocOKSpecifiedField;
            } 
            set {
                TocOKSpecifiedField = value;
                NotifyPropertyChanged("TocOKSpecified");
            }
        }

        private bool TocOKSpecifiedField; 

        /// <summary>
        /// JobRating property
        /// </summary>
		[StringLength(64)]
        [Description("Job rating.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("JobRating")]
        public string JobRating {
            get {
                return JobRatingField;
            } 
            set {
                JobRatingField = value;
                NotifyPropertyChanged("JobRating");
            }
        }

        private string JobRatingField; 

        /// <summary>
        /// RemedialCement property
        /// </summary>
		[Description("Remedial cement required?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("RemedialCement")]
        public bool? RemedialCement {
            get {
                return RemedialCementField;
            } 
            set {
                RemedialCementField = value;
                 this.RemedialCementSpecified = true;
                NotifyPropertyChanged("RemedialCement");
            }
        }

        private bool? RemedialCementField; 

        /// <summary>
        /// RemedialCementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RemedialCementSpecified {
            get {
                return RemedialCementSpecifiedField;
            } 
            set {
                RemedialCementSpecifiedField = value;
                NotifyPropertyChanged("RemedialCementSpecified");
            }
        }

        private bool RemedialCementSpecifiedField; 

        /// <summary>
        /// NumRemedial property
        /// </summary>
		[Description("Number of remedials.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumRemedial")]
        public int? NumRemedial {
            get {
                return NumRemedialField;
            } 
            set {
                NumRemedialField = value;
                 this.NumRemedialSpecified = true;
                NotifyPropertyChanged("NumRemedial");
            }
        }

        private int? NumRemedialField; 

        /// <summary>
        /// NumRemedialSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumRemedialSpecified {
            get {
                return NumRemedialSpecifiedField;
            } 
            set {
                NumRemedialSpecifiedField = value;
                NotifyPropertyChanged("NumRemedialSpecified");
            }
        }

        private bool NumRemedialSpecifiedField; 

        /// <summary>
        /// FailureMethod property
        /// </summary>
		[StringLength(64)]
        [Description("Method used to determine that a cement job was unsuccessful.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FailureMethod")]
        public string FailureMethod {
            get {
                return FailureMethodField;
            } 
            set {
                FailureMethodField = value;
                NotifyPropertyChanged("FailureMethod");
            }
        }

        private string FailureMethodField; 

        /// <summary>
        /// LinerTop property
        /// </summary>
		[Description("The distance to the top of the liner.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LinerTop")]
        public LengthMeasure LinerTop {
            get {
                return LinerTopField;
            } 
            set {
                LinerTopField = value;
                NotifyPropertyChanged("LinerTop");
            }
        }

        private LengthMeasure LinerTopField; 

        /// <summary>
        /// LinerLap property
        /// </summary>
		[Description("Liner overlap length.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("LinerLap")]
        public LengthMeasure LinerLap {
            get {
                return LinerLapField;
            } 
            set {
                LinerLapField = value;
                NotifyPropertyChanged("LinerLap");
            }
        }

        private LengthMeasure LinerLapField; 

        /// <summary>
        /// ETimBeforeTest property
        /// </summary>
		[Description("Hours before the liner top test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("ETimBeforeTest")]
        public TimeMeasure ETimeBeforeTest {
            get {
                return ETimBeforeTestField;
            } 
            set {
                ETimBeforeTestField = value;
                NotifyPropertyChanged("ETimeBeforeTest");
            }
        }

        private TimeMeasure ETimBeforeTestField; 

        /// <summary>
        /// TestNegativeTool property
        /// </summary>
		[StringLength(64)]
        [Description("Test negative tool used for the liner top seal.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TestNegativeTool")]
        public string TestNegativeTool {
            get {
                return TestNegativeToolField;
            } 
            set {
                TestNegativeToolField = value;
                NotifyPropertyChanged("TestNegativeTool");
            }
        }

        private string TestNegativeToolField; 

        /// <summary>
        /// TestNegativeEmw property
        /// </summary>
		[Description("Equivalent mud weight. Negative test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("TestNegativeEmw")]
        public MassPerVolumeMeasure TestNegativeEmw {
            get {
                return TestNegativeEmwField;
            } 
            set {
                TestNegativeEmwField = value;
                NotifyPropertyChanged("TestNegativeEmw");
            }
        }

        private MassPerVolumeMeasure TestNegativeEmwField; 

        /// <summary>
        /// TestPositiveTool property
        /// </summary>
		[StringLength(64)]
        [Description("Test positive tool for liner top seal.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TestPositiveTool")]
        public string TestPositiveTool {
            get {
                return TestPositiveToolField;
            } 
            set {
                TestPositiveToolField = value;
                NotifyPropertyChanged("TestPositiveTool");
            }
        }

        private string TestPositiveToolField; 

        /// <summary>
        /// TestPositiveEmw property
        /// </summary>
		[Description("Equivalent mud weight. Positive test or absolute pressure .")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MassPerVolumeMeasure")]
		[XmlElement("TestPositiveEmw")]
        public MassPerVolumeMeasure TestPositiveEmw {
            get {
                return TestPositiveEmwField;
            } 
            set {
                TestPositiveEmwField = value;
                NotifyPropertyChanged("TestPositiveEmw");
            }
        }

        private MassPerVolumeMeasure TestPositiveEmwField; 

        /// <summary>
        /// CementFoundOnTool property
        /// </summary>
		[Description("Cement found on tool?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("CementFoundOnTool")]
        public bool? CementFoundOnTool {
            get {
                return CementFoundOnToolField;
            } 
            set {
                CementFoundOnToolField = value;
                 this.CementFoundOnToolSpecified = true;
                NotifyPropertyChanged("CementFoundOnTool");
            }
        }

        private bool? CementFoundOnToolField; 

        /// <summary>
        /// CementFoundOnToolSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CementFoundOnToolSpecified {
            get {
                return CementFoundOnToolSpecifiedField;
            } 
            set {
                CementFoundOnToolSpecifiedField = value;
                NotifyPropertyChanged("CementFoundOnToolSpecified");
            }
        }

        private bool CementFoundOnToolSpecifiedField; 

        /// <summary>
        /// MdDVTool property
        /// </summary>
		[Description("Measured depth to the diverter tool.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdDVTool")]
        public MeasuredDepthCoord MDDVTool {
            get {
                return MdDVToolField;
            } 
            set {
                MdDVToolField = value;
                NotifyPropertyChanged("MDDVTool");
            }
        }

        private MeasuredDepthCoord MdDVToolField; 

        /// <summary>
        /// CementJob property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("CementJob")]
        public DataObjectReference CementJob {
            get {
                return CementJobField;
            } 
            set {
                CementJobField = value;
                NotifyPropertyChanged("CementJob");
            }
        }

        private DataObjectReference CementJobField; 


    } //here

    /// <summary>
    /// This class represents the WellboreGeometry xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the WellboreGeometry xsd type.")]
    public partial class WellboreGeometry : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MdBase property
        /// </summary>
		[Description("Measured depth at bottom, at the time this report was made.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBase")]
        public MeasuredDepthCoord MDBase {
            get {
                return MdBaseField;
            } 
            set {
                MdBaseField = value;
                NotifyPropertyChanged("MDBase");
            }
        }

        private MeasuredDepthCoord MdBaseField; 

        /// <summary>
        /// GapAir property
        /// </summary>
		[Description("Air gap.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("GapAir")]
        public LengthMeasure GapAir {
            get {
                return GapAirField;
            } 
            set {
                GapAirField = value;
                NotifyPropertyChanged("GapAir");
            }
        }

        private LengthMeasure GapAirField; 

        /// <summary>
        /// DepthWaterMean property
        /// </summary>
		[Description("Water depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DepthWaterMean")]
        public LengthMeasure DepthWaterMean {
            get {
                return DepthWaterMeanField;
            } 
            set {
                DepthWaterMeanField = value;
                NotifyPropertyChanged("DepthWaterMean");
            }
        }

        private LengthMeasure DepthWaterMeanField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("Describes the growing status of the wellbore geometry, whether active, inactive or closed.")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelStatus")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                 this.GrowingStatusSpecified = true;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        
        private bool GrowingStatusSpecifiedField = false;
        
        /// <summary>
        /// GrowingStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GrowingStatusSpecified {
            get {
                return GrowingStatusSpecifiedField;
            } 
            set {
                GrowingStatusSpecifiedField = value;
                NotifyPropertyChanged("GrowingStatusSpecified");
            }
        }
        
        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// WellboreGeometrySection property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WellboreGeometrySection")]
		[XmlElement("WellboreGeometrySection")]
        public List<WellboreGeometrySection> WellboreGeometrySection {
            get {
                return WellboreGeometrySectionField;
            } 
            set {
                WellboreGeometrySectionField = value;
                NotifyPropertyChanged("WellboreGeometrySection");
            }
        }

         /// <summary>
         /// bool to indicate if WellboreGeometrySection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellboreGeometrySectionSpecified
         {
             get {
             if(WellboreGeometrySectionField!=null)
                 return WellboreGeometrySectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellboreGeometrySection> WellboreGeometrySectionField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// BhaRun property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("BhaRun")]
        public List<DataObjectReference> BhaRun {
            get {
                return BhaRunField;
            } 
            set {
                BhaRunField = value;
                NotifyPropertyChanged("BhaRun");
            }
        }

         /// <summary>
         /// bool to indicate if BhaRun has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BhaRunSpecified
         {
             get {
             if(BhaRunField!=null)
                 return BhaRunField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> BhaRunField; 


    } //here

    /// <summary>
    /// This class represents the Log xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Log xsd type.")]
    public partial class Log : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ChannelState property
        /// </summary>
		[Description("Defines where the channel gets its data from, e.g., calculated from another source, or from archive, or raw real-time, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelState")]
		[XmlElement("ChannelState")]
        public ChannelState? ChannelState {
            get {
                return ChannelStateField;
            } 
            set {
                ChannelStateField = value;
                 this.ChannelStateSpecified = true;
                NotifyPropertyChanged("ChannelState");
            }
        }

        private ChannelState? ChannelStateField; 

        /// <summary>
        /// ChannelStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ChannelStateSpecified {
            get {
                return ChannelStateSpecifiedField;
            } 
            set {
                ChannelStateSpecifiedField = value;
                NotifyPropertyChanged("ChannelStateSpecified");
            }
        }

        private bool ChannelStateSpecifiedField; 

        /// <summary>
        /// TimeDepth property
        /// </summary>
		[StringLength(64)]
        [Description("Use to indicate if this is a time or depth log.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TimeDepth")]
        public string TimeDepth {
            get {
                return TimeDepthField;
            } 
            set {
                TimeDepthField = value;
                NotifyPropertyChanged("TimeDepth");
            }
        }

        private string TimeDepthField; 

        /// <summary>
        /// ChannelClass property
        /// </summary>
		[Description("A mandatory value categorizing a log channel. The classification system used in WITSML is the one from the PWLS group.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChannelClass")]
        public DataObjectReference ChannelClass {
            get {
                return ChannelClassField;
            } 
            set {
                ChannelClassField = value;
                NotifyPropertyChanged("ChannelClass");
            }
        }

        private DataObjectReference ChannelClassField; 

        /// <summary>
        /// RunNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal run number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a bit run number for LWD data and a wireline run number for logging data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RunNumber")]
        public string RunNumber {
            get {
                return RunNumberField;
            } 
            set {
                RunNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private string RunNumberField; 

        /// <summary>
        /// PassNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal pass number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a wireline pass number for logging data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PassNumber")]
        public string PassNumber {
            get {
                return PassNumberField;
            } 
            set {
                PassNumberField = value;
                NotifyPropertyChanged("PassNumber");
            }
        }

        private string PassNumberField; 

        /// <summary>
        /// StartIndex property
        /// </summary>
		[Description("When the log header defines the direction as:  - \"Increasing\", the startIndex is the starting (minimum) index value at which the first non-null data point is located.  - \"Decreasing\", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIndexValue")]
		[XmlElement("StartIndex")]
        public AbstractIndexValue StartIndex {
            get {
                return StartIndexField;
            } 
            set {
                StartIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private AbstractIndexValue StartIndexField; 

        /// <summary>
        /// EndIndex property
        /// </summary>
		[Description("When the log header defines the direction as:  - \"Increasing\", the endIndex is the ending (maximum) index value at which the last non-null data point is located.  - “Decreasing”, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIndexValue")]
		[XmlElement("EndIndex")]
        public AbstractIndexValue EndIndex {
            get {
                return EndIndexField;
            } 
            set {
                EndIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private AbstractIndexValue EndIndexField; 

        /// <summary>
        /// LoggingCompanyName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the logging company.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LoggingCompanyName")]
        public string LoggingCompanyName {
            get {
                return LoggingCompanyNameField;
            } 
            set {
                LoggingCompanyNameField = value;
                NotifyPropertyChanged("LoggingCompanyName");
            }
        }

        private string LoggingCompanyNameField; 

        /// <summary>
        /// LoggingCompanyCode property
        /// </summary>
		[StringLength(64)]
        [Description("The RP66 organization code assigned to a logging company. The list is available at http://www.energistics.org/geosciences/geology-standards/rp66-organization-codes")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LoggingCompanyCode")]
        public string LoggingCompanyCode {
            get {
                return LoggingCompanyCodeField;
            } 
            set {
                LoggingCompanyCodeField = value;
                NotifyPropertyChanged("LoggingCompanyCode");
            }
        }

        private string LoggingCompanyCodeField; 

        /// <summary>
        /// ToolName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the logging tool as given by the logging contractor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ToolName")]
        public string ToolName {
            get {
                return ToolNameField;
            } 
            set {
                ToolNameField = value;
                NotifyPropertyChanged("ToolName");
            }
        }

        private string ToolNameField; 

        /// <summary>
        /// ToolClass property
        /// </summary>
		[StringLength(64)]
        [Description("A value categorizing a logging tool. The classification system used in WITSML is the one from the PWLS group.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ToolClass")]
        public string ToolClass {
            get {
                return ToolClassField;
            } 
            set {
                ToolClassField = value;
                NotifyPropertyChanged("ToolClass");
            }
        }

        private string ToolClassField; 

        /// <summary>
        /// Derivation property
        /// </summary>
		[Description("Indicates that the channel is derived from one or more other channels.")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelDerivation")]
		[XmlElement("Derivation")]
        public ChannelDerivation? Derivation {
            get {
                return DerivationField;
            } 
            set {
                DerivationField = value;
                 this.DerivationSpecified = true;
                NotifyPropertyChanged("Derivation");
            }
        }

        private ChannelDerivation? DerivationField; 

        /// <summary>
        /// DerivationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DerivationSpecified {
            get {
                return DerivationSpecifiedField;
            } 
            set {
                DerivationSpecifiedField = value;
                NotifyPropertyChanged("DerivationSpecified");
            }
        }

        private bool DerivationSpecifiedField; 

        /// <summary>
        /// LoggingMethod property
        /// </summary>
		[Description("Defines where the log channel gets its data from: LWD, MWD, wireline; or whether it is computed, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "LoggingMethod")]
		[XmlElement("LoggingMethod")]
        public LoggingMethod? LoggingMethod {
            get {
                return LoggingMethodField;
            } 
            set {
                LoggingMethodField = value;
                 this.LoggingMethodSpecified = true;
                NotifyPropertyChanged("LoggingMethod");
            }
        }

        private LoggingMethod? LoggingMethodField; 

        /// <summary>
        /// LoggingMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LoggingMethodSpecified {
            get {
                return LoggingMethodSpecifiedField;
            } 
            set {
                LoggingMethodSpecifiedField = value;
                NotifyPropertyChanged("LoggingMethodSpecified");
            }
        }

        private bool LoggingMethodSpecifiedField; 

        /// <summary>
        /// NominalHoleSize property
        /// </summary>
		[Description("The nominal hole size (typically the bit size) at the time the measurement tool was in the hole. The size is \"nominal\" to indicate that this is not the result of a caliper reading or other direct measurement of the hole size, but is just a name used to refer to the diameter. When more than one diameter holes are being drilled at the same time (e.g., where a reamer is behind the bit), this diameter is the one that was seen by the sensor that produced a particular log channel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasureExt")]
		[XmlElement("NominalHoleSize")]
        public LengthMeasureExt NominalHoleSize {
            get {
                return NominalHoleSizeField;
            } 
            set {
                NominalHoleSizeField = value;
                NotifyPropertyChanged("NominalHoleSize");
            }
        }

        private LengthMeasureExt NominalHoleSizeField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// ChannelSet property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ChannelSet")]
		[XmlElement("ChannelSet")]
        public List<ChannelSet> ChannelSet {
            get {
                return ChannelSetField;
            } 
            set {
                ChannelSetField = value;
                NotifyPropertyChanged("ChannelSet");
            }
        }

         /// <summary>
         /// bool to indicate if ChannelSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChannelSetSpecified
         {
             get {
             if(ChannelSetField!=null)
                 return ChannelSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<ChannelSet> ChannelSetField; 


    } //here

    /// <summary>
    /// This class represents the ChannelSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the ChannelSet xsd type.")]
    public partial class ChannelSet : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ChannelIndex")]
		[XmlElement("Index")]
        public List<ChannelIndex> Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

         /// <summary>
         /// bool to indicate if Index has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IndexSpecified
         {
             get {
             if(IndexField!=null)
                 return IndexField.Count>0?true:false;
             else return false;
             }
         }
        private List<ChannelIndex> IndexField; 

        /// <summary>
        /// Channel property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Channel")]
		[XmlElement("Channel")]
        public List<Channel> Channel {
            get {
                return ChannelField;
            } 
            set {
                ChannelField = value;
                NotifyPropertyChanged("Channel");
            }
        }

         /// <summary>
         /// bool to indicate if Channel has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChannelSpecified
         {
             get {
             if(ChannelField!=null)
                 return ChannelField.Count>0?true:false;
             else return false;
             }
         }
        private List<Channel> ChannelField; 

        /// <summary>
        /// Data property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ChannelData")]
		[XmlElement("Data")]
        public ChannelData Data {
            get {
                return DataField;
            } 
            set {
                DataField = value;
                NotifyPropertyChanged("Data");
            }
        }

        private ChannelData DataField; 

        /// <summary>
        /// ChannelState property
        /// </summary>
		[Description("Defines where the channel gets its data from, e.g., calculated from another source, or from archive, or raw real-time, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelState")]
		[XmlElement("ChannelState")]
        public ChannelState? ChannelState {
            get {
                return ChannelStateField;
            } 
            set {
                ChannelStateField = value;
                 this.ChannelStateSpecified = true;
                NotifyPropertyChanged("ChannelState");
            }
        }

        private ChannelState? ChannelStateField; 

        /// <summary>
        /// ChannelStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ChannelStateSpecified {
            get {
                return ChannelStateSpecifiedField;
            } 
            set {
                ChannelStateSpecifiedField = value;
                NotifyPropertyChanged("ChannelStateSpecified");
            }
        }

        private bool ChannelStateSpecifiedField; 

        /// <summary>
        /// TimeDepth property
        /// </summary>
		[StringLength(64)]
        [Description("Use to indicate if this is a time or depth log.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TimeDepth")]
        public string TimeDepth {
            get {
                return TimeDepthField;
            } 
            set {
                TimeDepthField = value;
                NotifyPropertyChanged("TimeDepth");
            }
        }

        private string TimeDepthField; 

        /// <summary>
        /// ChannelClass property
        /// </summary>
		[Description("A mandatory value categorizing a log channel. The classification system used in WITSML is the one from the PWLS group.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChannelClass")]
        public DataObjectReference ChannelClass {
            get {
                return ChannelClassField;
            } 
            set {
                ChannelClassField = value;
                NotifyPropertyChanged("ChannelClass");
            }
        }

        private DataObjectReference ChannelClassField; 

        /// <summary>
        /// RunNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal run number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a bit run number for LWD data and a wireline run number for logging data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RunNumber")]
        public string RunNumber {
            get {
                return RunNumberField;
            } 
            set {
                RunNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private string RunNumberField; 

        /// <summary>
        /// PassNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal pass number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a wireline pass number for logging data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PassNumber")]
        public string PassNumber {
            get {
                return PassNumberField;
            } 
            set {
                PassNumberField = value;
                NotifyPropertyChanged("PassNumber");
            }
        }

        private string PassNumberField; 

        /// <summary>
        /// StartIndex property
        /// </summary>
		[Description("When the log header defines the direction as:  - \"Increasing\", the startIndex is the starting (minimum) index value at which the first non-null data point is located.  - \"Decreasing\", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIndexValue")]
		[XmlElement("StartIndex")]
        public AbstractIndexValue StartIndex {
            get {
                return StartIndexField;
            } 
            set {
                StartIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private AbstractIndexValue StartIndexField; 

        /// <summary>
        /// EndIndex property
        /// </summary>
		[Description("When the log header defines the direction as:  - \"Increasing\", the endIndex is the ending (maximum) index value at which the last non-null data point is located.  - “Decreasing”, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIndexValue")]
		[XmlElement("EndIndex")]
        public AbstractIndexValue EndIndex {
            get {
                return EndIndexField;
            } 
            set {
                EndIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private AbstractIndexValue EndIndexField; 

        /// <summary>
        /// LoggingCompanyName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the logging company.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LoggingCompanyName")]
        public string LoggingCompanyName {
            get {
                return LoggingCompanyNameField;
            } 
            set {
                LoggingCompanyNameField = value;
                NotifyPropertyChanged("LoggingCompanyName");
            }
        }

        private string LoggingCompanyNameField; 

        /// <summary>
        /// LoggingCompanyCode property
        /// </summary>
		[StringLength(64)]
        [Description("The RP66 organization code assigned to a logging company. The list is available at http://www.energistics.org/geosciences/geology-standards/rp66-organization-codes")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LoggingCompanyCode")]
        public string LoggingCompanyCode {
            get {
                return LoggingCompanyCodeField;
            } 
            set {
                LoggingCompanyCodeField = value;
                NotifyPropertyChanged("LoggingCompanyCode");
            }
        }

        private string LoggingCompanyCodeField; 

        /// <summary>
        /// ToolName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the logging tool as given by the logging contractor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ToolName")]
        public string ToolName {
            get {
                return ToolNameField;
            } 
            set {
                ToolNameField = value;
                NotifyPropertyChanged("ToolName");
            }
        }

        private string ToolNameField; 

        /// <summary>
        /// ToolClass property
        /// </summary>
		[StringLength(64)]
        [Description("A value categorizing a logging tool. The classification system used in WITSML is the one from the PWLS group.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ToolClass")]
        public string ToolClass {
            get {
                return ToolClassField;
            } 
            set {
                ToolClassField = value;
                NotifyPropertyChanged("ToolClass");
            }
        }

        private string ToolClassField; 

        /// <summary>
        /// Derivation property
        /// </summary>
		[Description("Indicates that the channel is derived from one or more other channels.")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelDerivation")]
		[XmlElement("Derivation")]
        public ChannelDerivation? Derivation {
            get {
                return DerivationField;
            } 
            set {
                DerivationField = value;
                 this.DerivationSpecified = true;
                NotifyPropertyChanged("Derivation");
            }
        }

        private ChannelDerivation? DerivationField; 

        /// <summary>
        /// DerivationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DerivationSpecified {
            get {
                return DerivationSpecifiedField;
            } 
            set {
                DerivationSpecifiedField = value;
                NotifyPropertyChanged("DerivationSpecified");
            }
        }

        private bool DerivationSpecifiedField; 

        /// <summary>
        /// LoggingMethod property
        /// </summary>
		[Description("Defines where the log channel gets its data from: LWD, MWD, wireline; or whether it is computed, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "LoggingMethod")]
		[XmlElement("LoggingMethod")]
        public LoggingMethod? LoggingMethod {
            get {
                return LoggingMethodField;
            } 
            set {
                LoggingMethodField = value;
                 this.LoggingMethodSpecified = true;
                NotifyPropertyChanged("LoggingMethod");
            }
        }

        private LoggingMethod? LoggingMethodField; 

        /// <summary>
        /// LoggingMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LoggingMethodSpecified {
            get {
                return LoggingMethodSpecifiedField;
            } 
            set {
                LoggingMethodSpecifiedField = value;
                NotifyPropertyChanged("LoggingMethodSpecified");
            }
        }

        private bool LoggingMethodSpecifiedField; 

        /// <summary>
        /// NominalHoleSize property
        /// </summary>
		[Description("The nominal hole size (typically the bit size) at the time the measurement tool was in the hole. The size is \"nominal\" to indicate that this is not the result of a caliper reading or other direct measurement of the hole size, but is just a name used to refer to the diameter. When more than one diameter holes are being drilled at the same time (e.g., where a reamer is behind the bit), this diameter is the one that was seen by the sensor that produced a particular log channel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasureExt")]
		[XmlElement("NominalHoleSize")]
        public LengthMeasureExt NominalHoleSize {
            get {
                return NominalHoleSizeField;
            } 
            set {
                NominalHoleSizeField = value;
                NotifyPropertyChanged("NominalHoleSize");
            }
        }

        private LengthMeasureExt NominalHoleSizeField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// DataContext property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AbstractLogDataContext")]
		[XmlElement("DataContext")]
        public AbstractLogDataContext DataContext {
            get {
                return DataContextField;
            } 
            set {
                DataContextField = value;
                NotifyPropertyChanged("DataContext");
            }
        }

        private AbstractLogDataContext DataContextField; 


    } //here

    /// <summary>
    /// This class represents the Channel xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Channel xsd type.")]
    public partial class Channel : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Mnemonic property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The mnemonic name for this channel. Mnemonics are not unique within a store.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Mnemonic")]
        public string Mnemonic {
            get {
                return MnemonicField;
            } 
            set {
                MnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private string MnemonicField; 

        /// <summary>
        /// DataType property
        /// </summary>
		[Required]
        [Description("The underlying ETP data type of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "EtpDataType")]
		[XmlElement("DataType")]
        public EtpDataType? DataType {
            get {
                return DataTypeField;
            } 
            set {
                DataTypeField = value;
                 this.DataTypeSpecified = true;
                NotifyPropertyChanged("DataType");
            }
        }

        
        private bool DataTypeSpecifiedField = false;
        
        /// <summary>
        /// DataTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DataTypeSpecified {
            get {
                return DataTypeSpecifiedField;
            } 
            set {
                DataTypeSpecifiedField = value;
                NotifyPropertyChanged("DataTypeSpecified");
            }
        }
        
        private EtpDataType? DataTypeField; 

        /// <summary>
        /// Uom property
        /// </summary>
		[Required]
        [Description("The underlying unit of measure of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "UnitOfMeasureExt")]
		[XmlElement("Uom")]
        public ExtensibleEnum<UnitOfMeasure>? Uom {
            get {
                return UomField;
            } 
            set {
                UomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ExtensibleEnum<UnitOfMeasure>? UomField; 

        /// <summary>
        /// GrowingStatus property
        /// </summary>
		[Required]
        [Description("The status of a channel with respect to creating new measurements. Statuses include:  Active: A channel is actively producing data points.  Inactive: A channel is offline or not currently producing, but may begin producing again in the future.  Closed: A channel will never produce points again. The rules for when a channel is to be closed will vary some for different kinds of channels. For example, time-based surface channels may remain open for the entire life of the drilling operation, whereas depth-based wireline channels are closed at the end of the wireline job")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelStatus")]
		[XmlElement("GrowingStatus")]
        public ChannelStatus? GrowingStatus {
            get {
                return GrowingStatusField;
            } 
            set {
                GrowingStatusField = value;
                 this.GrowingStatusSpecified = true;
                NotifyPropertyChanged("GrowingStatus");
            }
        }

        
        private bool GrowingStatusSpecifiedField = false;
        
        /// <summary>
        /// GrowingStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GrowingStatusSpecified {
            get {
                return GrowingStatusSpecifiedField;
            } 
            set {
                GrowingStatusSpecifiedField = value;
                NotifyPropertyChanged("GrowingStatusSpecified");
            }
        }
        
        private ChannelStatus? GrowingStatusField; 

        /// <summary>
        /// Source property
        /// </summary>
		[StringLength(64)]
        [Description("Source of the data in the channel. Enter the contractor name who conducted the log.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Source")]
        public string Source {
            get {
                return SourceField;
            } 
            set {
                SourceField = value;
                NotifyPropertyChanged("Source");
            }
        }

        private string SourceField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// AxisDefinition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "LogChannelAxis")]
		[XmlElement("AxisDefinition")]
        public List<LogChannelAxis> AxisDefinition {
            get {
                return AxisDefinitionField;
            } 
            set {
                AxisDefinitionField = value;
                NotifyPropertyChanged("AxisDefinition");
            }
        }

         /// <summary>
         /// bool to indicate if AxisDefinition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AxisDefinitionSpecified
         {
             get {
             if(AxisDefinitionField!=null)
                 return AxisDefinitionField.Count>0?true:false;
             else return false;
             }
         }
        private List<LogChannelAxis> AxisDefinitionField; 

        /// <summary>
        /// ChannelState property
        /// </summary>
		[Description("Defines where the channel gets its data from, e.g., calculated from another source, or from archive, or raw real-time, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelState")]
		[XmlElement("ChannelState")]
        public ChannelState? ChannelState {
            get {
                return ChannelStateField;
            } 
            set {
                ChannelStateField = value;
                 this.ChannelStateSpecified = true;
                NotifyPropertyChanged("ChannelState");
            }
        }

        private ChannelState? ChannelStateField; 

        /// <summary>
        /// ChannelStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ChannelStateSpecified {
            get {
                return ChannelStateSpecifiedField;
            } 
            set {
                ChannelStateSpecifiedField = value;
                NotifyPropertyChanged("ChannelStateSpecified");
            }
        }

        private bool ChannelStateSpecifiedField; 

        /// <summary>
        /// TimeDepth property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Is this a time or depth log?")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("TimeDepth")]
        public string TimeDepth {
            get {
                return TimeDepthField;
            } 
            set {
                TimeDepthField = value;
                NotifyPropertyChanged("TimeDepth");
            }
        }

        private string TimeDepthField; 

        /// <summary>
        /// ChannelClass property
        /// </summary>
		[Required]
        [Description("A mandatory value categorizing a log channel. The classification system used in WITSML is the one from the PWLS group.  NOTE: This should turn into an extensible enumeration before WITSML is released.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChannelClass")]
        public DataObjectReference ChannelClass {
            get {
                return ChannelClassField;
            } 
            set {
                ChannelClassField = value;
                NotifyPropertyChanged("ChannelClass");
            }
        }

        private DataObjectReference ChannelClassField; 

        /// <summary>
        /// RunNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal run number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a bit run number for LWD data and a wireline run number for logging data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("RunNumber")]
        public string RunNumber {
            get {
                return RunNumberField;
            } 
            set {
                RunNumberField = value;
                NotifyPropertyChanged("RunNumber");
            }
        }

        private string RunNumberField; 

        /// <summary>
        /// PassNumber property
        /// </summary>
		[StringLength(64)]
        [Description("The nominal pass number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a wireline pass number for logging data.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PassNumber")]
        public string PassNumber {
            get {
                return PassNumberField;
            } 
            set {
                PassNumberField = value;
                NotifyPropertyChanged("PassNumber");
            }
        }

        private string PassNumberField; 

        /// <summary>
        /// StartIndex property
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\", the startIndex is the starting (minimum) index value at which the first non-null data point is located. When the log header defines the direction as \"Decreasing\", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIndexValue")]
		[XmlElement("StartIndex")]
        public AbstractIndexValue StartIndex {
            get {
                return StartIndexField;
            } 
            set {
                StartIndexField = value;
                NotifyPropertyChanged("StartIndex");
            }
        }

        private AbstractIndexValue StartIndexField; 

        /// <summary>
        /// EndIndex property
        /// </summary>
		[Description("When the log header defines the direction as \"Increasing\", the endIndex is the ending (maximum) index value at which the last non-null data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIndexValue")]
		[XmlElement("EndIndex")]
        public AbstractIndexValue EndIndex {
            get {
                return EndIndexField;
            } 
            set {
                EndIndexField = value;
                NotifyPropertyChanged("EndIndex");
            }
        }

        private AbstractIndexValue EndIndexField; 

        /// <summary>
        /// LoggingCompanyName property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name of the logging company.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LoggingCompanyName")]
        public string LoggingCompanyName {
            get {
                return LoggingCompanyNameField;
            } 
            set {
                LoggingCompanyNameField = value;
                NotifyPropertyChanged("LoggingCompanyName");
            }
        }

        private string LoggingCompanyNameField; 

        /// <summary>
        /// LoggingCompanyCode property
        /// </summary>
		[StringLength(64)]
        [Description("The RP66 organization code assigned to a logging company. The list is available at http://www.energistics.org/geosciences/geology-standards/rp66-organization-codes")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("LoggingCompanyCode")]
        public string LoggingCompanyCode {
            get {
                return LoggingCompanyCodeField;
            } 
            set {
                LoggingCompanyCodeField = value;
                NotifyPropertyChanged("LoggingCompanyCode");
            }
        }

        private string LoggingCompanyCodeField; 

        /// <summary>
        /// ToolName property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the logging tool as given by the logging contractor.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ToolName")]
        public string ToolName {
            get {
                return ToolNameField;
            } 
            set {
                ToolNameField = value;
                NotifyPropertyChanged("ToolName");
            }
        }

        private string ToolNameField; 

        /// <summary>
        /// ToolClass property
        /// </summary>
		[StringLength(64)]
        [Description("A value categorizing a logging tool. The classification system used in WITSML is the one from the PWLS group.  NOTE: This should turn into an extensible enumeration before WITSML is released")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ToolClass")]
        public string ToolClass {
            get {
                return ToolClassField;
            } 
            set {
                ToolClassField = value;
                NotifyPropertyChanged("ToolClass");
            }
        }

        private string ToolClassField; 

        /// <summary>
        /// Derivation property
        /// </summary>
		[Description("Indicates that the channel is derived from one or more other channels")]
        [EnergisticsDataTypeAttribute(DataType = "ChannelDerivation")]
		[XmlElement("Derivation")]
        public ChannelDerivation? Derivation {
            get {
                return DerivationField;
            } 
            set {
                DerivationField = value;
                 this.DerivationSpecified = true;
                NotifyPropertyChanged("Derivation");
            }
        }

        private ChannelDerivation? DerivationField; 

        /// <summary>
        /// DerivationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DerivationSpecified {
            get {
                return DerivationSpecifiedField;
            } 
            set {
                DerivationSpecifiedField = value;
                NotifyPropertyChanged("DerivationSpecified");
            }
        }

        private bool DerivationSpecifiedField; 

        /// <summary>
        /// LoggingMethod property
        /// </summary>
		[Description("Defines where the log channel gets its data from: LWD, MWD, wireline; or whether it is computed, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "LoggingMethod")]
		[XmlElement("LoggingMethod")]
        public LoggingMethod? LoggingMethod {
            get {
                return LoggingMethodField;
            } 
            set {
                LoggingMethodField = value;
                 this.LoggingMethodSpecified = true;
                NotifyPropertyChanged("LoggingMethod");
            }
        }

        private LoggingMethod? LoggingMethodField; 

        /// <summary>
        /// LoggingMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LoggingMethodSpecified {
            get {
                return LoggingMethodSpecifiedField;
            } 
            set {
                LoggingMethodSpecifiedField = value;
                NotifyPropertyChanged("LoggingMethodSpecified");
            }
        }

        private bool LoggingMethodSpecifiedField; 

        /// <summary>
        /// NominalHoleSize property
        /// </summary>
		[Description("The nominal hole size at the time the measurement tool was in the hole. The size is \"nominal\" to indicate that this is not the result of a caliper reading or other direct measurement of the hoe size, but is just a name used to refer to the diameter. This is normally the bit size.  In a case where there are more than one diameter hole being drilled at the same time (like where a reamer is behind the bit) this diameter is the one which was seen by the sensor which produced a particular log channel.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasureExt")]
		[XmlElement("NominalHoleSize")]
        public LengthMeasureExt NominalHoleSize {
            get {
                return NominalHoleSizeField;
            } 
            set {
                NominalHoleSizeField = value;
                NotifyPropertyChanged("NominalHoleSize");
            }
        }

        private LengthMeasureExt NominalHoleSizeField; 

        /// <summary>
        /// PointMetadata property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PointMetadata")]
		[XmlElement("PointMetadata")]
        public List<PointMetadata> PointMetadata {
            get {
                return PointMetadataField;
            } 
            set {
                PointMetadataField = value;
                NotifyPropertyChanged("PointMetadata");
            }
        }

         /// <summary>
         /// bool to indicate if PointMetadata has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PointMetadataSpecified
         {
             get {
             if(PointMetadataField!=null)
                 return PointMetadataField.Count>0?true:false;
             else return false;
             }
         }
        private List<PointMetadata> PointMetadataField; 

        /// <summary>
        /// DerivedFrom property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("DerivedFrom")]
        public List<DataObjectReference> DerivedFrom {
            get {
                return DerivedFromField;
            } 
            set {
                DerivedFromField = value;
                NotifyPropertyChanged("DerivedFrom");
            }
        }

         /// <summary>
         /// bool to indicate if DerivedFrom has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DerivedFromSpecified
         {
             get {
             if(DerivedFromField!=null)
                 return DerivedFromField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> DerivedFromField; 

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ChannelIndex")]
		[XmlElement("Index")]
        public List<ChannelIndex> Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

         /// <summary>
         /// bool to indicate if Index has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IndexSpecified
         {
             get {
             if(IndexField!=null)
                 return IndexField.Count>0?true:false;
             else return false;
             }
         }
        private List<ChannelIndex> IndexField; 

        /// <summary>
        /// Parent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Parent")]
        public DataObjectReference Parent {
            get {
                return ParentField;
            } 
            set {
                ParentField = value;
                NotifyPropertyChanged("Parent");
            }
        }

        private DataObjectReference ParentField; 


    } //here

    /// <summary>
    /// This class represents the BhaRun xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the BhaRun xsd type.")]
    public partial class BhaRun : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Description("Date and time that activities for this run started.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// DTimStop property
        /// </summary>
		[Description("Date and time that activities for this run stopped.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStop")]
        public Timestamp? DateTimeStop {
            get {
                return DTimStopField;
            } 
            set {
                DTimStopField = value;
                 this.DateTimeStopSpecified = true;
                NotifyPropertyChanged("DateTimeStop");
            }
        }

        
        private bool DateTimeStopSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStopSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStopSpecified {
            get {
                return DateTimeStopSpecifiedField;
            } 
            set {
                DateTimeStopSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStopSpecified");
            }
        }
        
        private Timestamp? DTimStopField; 

        /// <summary>
        /// DTimStartDrilling property
        /// </summary>
		[Description("Start on bottom: date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStartDrilling")]
        public Timestamp? DateTimeStartDrilling {
            get {
                return DTimStartDrillingField;
            } 
            set {
                DTimStartDrillingField = value;
                 this.DateTimeStartDrillingSpecified = true;
                NotifyPropertyChanged("DateTimeStartDrilling");
            }
        }

        
        private bool DateTimeStartDrillingSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartDrillingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartDrillingSpecified {
            get {
                return DateTimeStartDrillingSpecifiedField;
            } 
            set {
                DateTimeStartDrillingSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartDrillingSpecified");
            }
        }
        
        private Timestamp? DTimStartDrillingField; 

        /// <summary>
        /// DTimStopDrilling property
        /// </summary>
		[Description("Stop off bottom: date and time.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStopDrilling")]
        public Timestamp? DateTimeStopDrilling {
            get {
                return DTimStopDrillingField;
            } 
            set {
                DTimStopDrillingField = value;
                 this.DateTimeStopDrillingSpecified = true;
                NotifyPropertyChanged("DateTimeStopDrilling");
            }
        }

        
        private bool DateTimeStopDrillingSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStopDrillingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStopDrillingSpecified {
            get {
                return DateTimeStopDrillingSpecifiedField;
            } 
            set {
                DateTimeStopDrillingSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStopDrillingSpecified");
            }
        }
        
        private Timestamp? DTimStopDrillingField; 

        /// <summary>
        /// PlanDogleg property
        /// </summary>
		[Description("Planned dogleg severity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerLengthMeasure")]
		[XmlElement("PlanDogleg")]
        public AnglePerLengthMeasure PlanDogleg {
            get {
                return PlanDoglegField;
            } 
            set {
                PlanDoglegField = value;
                NotifyPropertyChanged("PlanDogleg");
            }
        }

        private AnglePerLengthMeasure PlanDoglegField; 

        /// <summary>
        /// ActDogleg property
        /// </summary>
		[Description("Actual dogleg severity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerLengthMeasure")]
		[XmlElement("ActDogleg")]
        public AnglePerLengthMeasure ActDogleg {
            get {
                return ActDoglegField;
            } 
            set {
                ActDoglegField = value;
                NotifyPropertyChanged("ActDogleg");
            }
        }

        private AnglePerLengthMeasure ActDoglegField; 

        /// <summary>
        /// ActDoglegMx property
        /// </summary>
		[Description("Actual dogleg severity: maximum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AnglePerLengthMeasure")]
		[XmlElement("ActDoglegMx")]
        public AnglePerLengthMeasure ActDoglegMax {
            get {
                return ActDoglegMxField;
            } 
            set {
                ActDoglegMxField = value;
                NotifyPropertyChanged("ActDoglegMax");
            }
        }

        private AnglePerLengthMeasure ActDoglegMxField; 

        /// <summary>
        /// StatusBha property
        /// </summary>
		[Description("Bottomhole assembly status.")]
        [EnergisticsDataTypeAttribute(DataType = "BhaStatus")]
		[XmlElement("StatusBha")]
        public BhaStatus? StatusBha {
            get {
                return StatusBhaField;
            } 
            set {
                StatusBhaField = value;
                 this.StatusBhaSpecified = true;
                NotifyPropertyChanged("StatusBha");
            }
        }

        private BhaStatus? StatusBhaField; 

        /// <summary>
        /// StatusBhaSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusBhaSpecified {
            get {
                return StatusBhaSpecifiedField;
            } 
            set {
                StatusBhaSpecifiedField = value;
                NotifyPropertyChanged("StatusBhaSpecified");
            }
        }

        private bool StatusBhaSpecifiedField; 

        /// <summary>
        /// NumBitRun property
        /// </summary>
		[Description("Bit run number.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumBitRun")]
        public int? NumBitRun {
            get {
                return NumBitRunField;
            } 
            set {
                NumBitRunField = value;
                 this.NumBitRunSpecified = true;
                NotifyPropertyChanged("NumBitRun");
            }
        }

        private int? NumBitRunField; 

        /// <summary>
        /// NumBitRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumBitRunSpecified {
            get {
                return NumBitRunSpecifiedField;
            } 
            set {
                NumBitRunSpecifiedField = value;
                NotifyPropertyChanged("NumBitRunSpecified");
            }
        }

        private bool NumBitRunSpecifiedField; 

        /// <summary>
        /// NumStringRun property
        /// </summary>
		[Description("The BHA (drilling string) run number.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumStringRun")]
        public int? NumStringRun {
            get {
                return NumStringRunField;
            } 
            set {
                NumStringRunField = value;
                 this.NumStringRunSpecified = true;
                NotifyPropertyChanged("NumStringRun");
            }
        }

        private int? NumStringRunField; 

        /// <summary>
        /// NumStringRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumStringRunSpecified {
            get {
                return NumStringRunSpecifiedField;
            } 
            set {
                NumStringRunSpecifiedField = value;
                NotifyPropertyChanged("NumStringRunSpecified");
            }
        }

        private bool NumStringRunSpecifiedField; 

        /// <summary>
        /// ReasonTrip property
        /// </summary>
		[StringLength(2000)]
        [Description("Reason for a trip.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("ReasonTrip")]
        public string ReasonTrip {
            get {
                return ReasonTripField;
            } 
            set {
                ReasonTripField = value;
                NotifyPropertyChanged("ReasonTrip");
            }
        }

        private string ReasonTripField; 

        /// <summary>
        /// ObjectiveBha property
        /// </summary>
		[StringLength(2000)]
        [Description("Objective of the bottomhole assembly.")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("ObjectiveBha")]
        public string ObjectiveBha {
            get {
                return ObjectiveBhaField;
            } 
            set {
                ObjectiveBhaField = value;
                NotifyPropertyChanged("ObjectiveBha");
            }
        }

        private string ObjectiveBhaField; 

        /// <summary>
        /// DrillingParams property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillingParams")]
		[XmlElement("DrillingParams")]
        public List<DrillingParams> DrillingParams {
            get {
                return DrillingParamsField;
            } 
            set {
                DrillingParamsField = value;
                NotifyPropertyChanged("DrillingParams");
            }
        }

         /// <summary>
         /// bool to indicate if DrillingParams has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DrillingParamsSpecified
         {
             get {
             if(DrillingParamsField!=null)
                 return DrillingParamsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillingParams> DrillingParamsField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// Tubular property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Tubular")]
        public DataObjectReference Tubular {
            get {
                return TubularField;
            } 
            set {
                TubularField = value;
                NotifyPropertyChanged("Tubular");
            }
        }

        private DataObjectReference TubularField; 


    } //here

    /// <summary>
    /// This class represents the FluidsReport xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the FluidsReport xsd type.")]
    public partial class FluidsReport : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// DTim property
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTim")]
        public Timestamp? DateTime {
            get {
                return DTimField;
            } 
            set {
                DTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        
        private bool DateTimeSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return DateTimeSpecifiedField;
            } 
            set {
                DateTimeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }
        
        private Timestamp? DTimField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Required]
        [Description("Along-hole measured depth of measurement from the drill datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("Vertical depth of the measurements.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// NumReport property
        /// </summary>
		[Description("Fluids report number.")]
        [EnergisticsDataTypeAttribute(DataType = "int")]
		[XmlElement("NumReport")]
        public int? NumReport {
            get {
                return NumReportField;
            } 
            set {
                NumReportField = value;
                 this.NumReportSpecified = true;
                NotifyPropertyChanged("NumReport");
            }
        }

        private int? NumReportField; 

        /// <summary>
        /// NumReportSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool NumReportSpecified {
            get {
                return NumReportSpecifiedField;
            } 
            set {
                NumReportSpecifiedField = value;
                NotifyPropertyChanged("NumReportSpecified");
            }
        }

        private bool NumReportSpecifiedField; 

        /// <summary>
        /// Fluid property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Fluid")]
		[XmlElement("Fluid")]
        public List<Fluid> Fluid {
            get {
                return FluidField;
            } 
            set {
                FluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

         /// <summary>
         /// bool to indicate if Fluid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSpecified
         {
             get {
             if(FluidField!=null)
                 return FluidField.Count>0?true:false;
             else return false;
             }
         }
        private List<Fluid> FluidField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the DrillReport xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the DrillReport xsd type.")]
    public partial class DrillReport : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// DTimStart property
        /// </summary>
		[Required]
        [Description("Date and time that the reporting period started. A report period is commonly 24 hours.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return DTimStartField;
            } 
            set {
                DTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        
        private bool DateTimeStartSpecifiedField = false;
        
        /// <summary>
        /// DateTimeStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return DateTimeStartSpecifiedField;
            } 
            set {
                DateTimeStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }
        
        private Timestamp? DTimStartField; 

        /// <summary>
        /// DTimEnd property
        /// </summary>
		[Required]
        [Description("Date and time that the reporting period ended. A report period is commonly 24 hours.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return DTimEndField;
            } 
            set {
                DTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        
        private bool DateTimeEndSpecifiedField = false;
        
        /// <summary>
        /// DateTimeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return DateTimeEndSpecifiedField;
            } 
            set {
                DateTimeEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }
        
        private Timestamp? DTimEndField; 

        /// <summary>
        /// VersionKind property
        /// </summary>
		[Description("The kind of report version. For example, a  preliminary version.")]
        [EnergisticsDataTypeAttribute(DataType = "OpsReportVersion")]
		[XmlElement("VersionKind")]
        public OpsReportVersion? VersionKind {
            get {
                return VersionKindField;
            } 
            set {
                VersionKindField = value;
                 this.VersionKindSpecified = true;
                NotifyPropertyChanged("VersionKind");
            }
        }

        private OpsReportVersion? VersionKindField; 

        /// <summary>
        /// VersionKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool VersionKindSpecified {
            get {
                return VersionKindSpecifiedField;
            } 
            set {
                VersionKindSpecifiedField = value;
                NotifyPropertyChanged("VersionKindSpecified");
            }
        }

        private bool VersionKindSpecifiedField; 

        /// <summary>
        /// CreateDate property
        /// </summary>
		[Description("The date and time the report was created. A later timestamp indicates a newer version of the report. To update values in a report, a full updated copy of the original report should be submitted.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("CreateDate")]
        public Timestamp? CreateDate {
            get {
                return CreateDateField;
            } 
            set {
                CreateDateField = value;
                 this.CreateDateSpecified = true;
                NotifyPropertyChanged("CreateDate");
            }
        }

        
        private bool CreateDateSpecifiedField = false;
        
        /// <summary>
        /// CreateDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CreateDateSpecified {
            get {
                return CreateDateSpecifiedField;
            } 
            set {
                CreateDateSpecifiedField = value;
                NotifyPropertyChanged("CreateDateSpecified");
            }
        }
        
        private Timestamp? CreateDateField; 

        /// <summary>
        /// WellDatum property
        /// </summary>
		[Description("Defines a vertical datum used for measured depths, vertical depths, or elevations. If one of these coordinate values is included in the report, then you must specify a well datum.  This requirement only applies to this report, which is generally a copy of the same information from the well object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WellDatum")]
		[XmlElement("WellDatum")]
        public List<WellDatum> WellDatum {
            get {
                return WellDatumField;
            } 
            set {
                WellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

         /// <summary>
         /// bool to indicate if WellDatum has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellDatumSpecified
         {
             get {
             if(WellDatumField!=null)
                 return WellDatumField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellDatum> WellDatumField; 

        /// <summary>
        /// BitRecord property
        /// </summary>
		[Description("Information about a bit.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "BitRecord")]
		[XmlElement("BitRecord")]
        public List<BitRecord> BitRecord {
            get {
                return BitRecordField;
            } 
            set {
                BitRecordField = value;
                NotifyPropertyChanged("BitRecord");
            }
        }

         /// <summary>
         /// bool to indicate if BitRecord has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BitRecordSpecified
         {
             get {
             if(BitRecordField!=null)
                 return BitRecordField.Count>0?true:false;
             else return false;
             }
         }
        private List<BitRecord> BitRecordField; 

        /// <summary>
        /// DrillActivity property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillActivity")]
		[XmlElement("DrillActivity")]
        public List<DrillActivity> DrillActivity {
            get {
                return DrillActivityField;
            } 
            set {
                DrillActivityField = value;
                NotifyPropertyChanged("DrillActivity");
            }
        }

         /// <summary>
         /// bool to indicate if DrillActivity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DrillActivitySpecified
         {
             get {
             if(DrillActivityField!=null)
                 return DrillActivityField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillActivity> DrillActivityField; 

        /// <summary>
        /// LogInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportLogInfo")]
		[XmlElement("LogInfo")]
        public List<DrillReportLogInfo> LogInfo {
            get {
                return LogInfoField;
            } 
            set {
                LogInfoField = value;
                NotifyPropertyChanged("LogInfo");
            }
        }

         /// <summary>
         /// bool to indicate if LogInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogInfoSpecified
         {
             get {
             if(LogInfoField!=null)
                 return LogInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportLogInfo> LogInfoField; 

        /// <summary>
        /// CoreInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportCoreInfo")]
		[XmlElement("CoreInfo")]
        public List<DrillReportCoreInfo> CoreInfo {
            get {
                return CoreInfoField;
            } 
            set {
                CoreInfoField = value;
                NotifyPropertyChanged("CoreInfo");
            }
        }

         /// <summary>
         /// bool to indicate if CoreInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CoreInfoSpecified
         {
             get {
             if(CoreInfoField!=null)
                 return CoreInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportCoreInfo> CoreInfoField; 

        /// <summary>
        /// WellTestInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportWellTestInfo")]
		[XmlElement("WellTestInfo")]
        public List<DrillReportWellTestInfo> WellTestInfo {
            get {
                return WellTestInfoField;
            } 
            set {
                WellTestInfoField = value;
                NotifyPropertyChanged("WellTestInfo");
            }
        }

         /// <summary>
         /// bool to indicate if WellTestInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellTestInfoSpecified
         {
             get {
             if(WellTestInfoField!=null)
                 return WellTestInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportWellTestInfo> WellTestInfoField; 

        /// <summary>
        /// FormTestInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportFormTestInfo")]
		[XmlElement("FormTestInfo")]
        public List<DrillReportFormTestInfo> FormTestInfo {
            get {
                return FormTestInfoField;
            } 
            set {
                FormTestInfoField = value;
                NotifyPropertyChanged("FormTestInfo");
            }
        }

         /// <summary>
         /// bool to indicate if FormTestInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FormTestInfoSpecified
         {
             get {
             if(FormTestInfoField!=null)
                 return FormTestInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportFormTestInfo> FormTestInfoField; 

        /// <summary>
        /// LithShowInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportLithShowInfo")]
		[XmlElement("LithShowInfo")]
        public List<DrillReportLithShowInfo> LithShowInfo {
            get {
                return LithShowInfoField;
            } 
            set {
                LithShowInfoField = value;
                NotifyPropertyChanged("LithShowInfo");
            }
        }

         /// <summary>
         /// bool to indicate if LithShowInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LithShowInfoSpecified
         {
             get {
             if(LithShowInfoField!=null)
                 return LithShowInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportLithShowInfo> LithShowInfoField; 

        /// <summary>
        /// EquipFailureInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportEquipFailureInfo")]
		[XmlElement("EquipFailureInfo")]
        public List<DrillReportEquipFailureInfo> EquipFailureInfo {
            get {
                return EquipFailureInfoField;
            } 
            set {
                EquipFailureInfoField = value;
                NotifyPropertyChanged("EquipFailureInfo");
            }
        }

         /// <summary>
         /// bool to indicate if EquipFailureInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EquipFailureInfoSpecified
         {
             get {
             if(EquipFailureInfoField!=null)
                 return EquipFailureInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportEquipFailureInfo> EquipFailureInfoField; 

        /// <summary>
        /// ControlIncidentInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportControlIncidentInfo")]
		[XmlElement("ControlIncidentInfo")]
        public List<DrillReportControlIncidentInfo> ControlIncidentInfo {
            get {
                return ControlIncidentInfoField;
            } 
            set {
                ControlIncidentInfoField = value;
                NotifyPropertyChanged("ControlIncidentInfo");
            }
        }

         /// <summary>
         /// bool to indicate if ControlIncidentInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ControlIncidentInfoSpecified
         {
             get {
             if(ControlIncidentInfoField!=null)
                 return ControlIncidentInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportControlIncidentInfo> ControlIncidentInfoField; 

        /// <summary>
        /// StratInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportStratInfo")]
		[XmlElement("StratInfo")]
        public List<DrillReportStratInfo> StratInfo {
            get {
                return StratInfoField;
            } 
            set {
                StratInfoField = value;
                NotifyPropertyChanged("StratInfo");
            }
        }

         /// <summary>
         /// bool to indicate if StratInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StratInfoSpecified
         {
             get {
             if(StratInfoField!=null)
                 return StratInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportStratInfo> StratInfoField; 

        /// <summary>
        /// PerfInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportPerfInfo")]
		[XmlElement("PerfInfo")]
        public List<DrillReportPerfInfo> PerfInfo {
            get {
                return PerfInfoField;
            } 
            set {
                PerfInfoField = value;
                NotifyPropertyChanged("PerfInfo");
            }
        }

         /// <summary>
         /// bool to indicate if PerfInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PerfInfoSpecified
         {
             get {
             if(PerfInfoField!=null)
                 return PerfInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportPerfInfo> PerfInfoField; 

        /// <summary>
        /// GasReadingInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportGasReadingInfo")]
		[XmlElement("GasReadingInfo")]
        public List<DrillReportGasReadingInfo> GasReadingInfo {
            get {
                return GasReadingInfoField;
            } 
            set {
                GasReadingInfoField = value;
                NotifyPropertyChanged("GasReadingInfo");
            }
        }

         /// <summary>
         /// bool to indicate if GasReadingInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GasReadingInfoSpecified
         {
             get {
             if(GasReadingInfoField!=null)
                 return GasReadingInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportGasReadingInfo> GasReadingInfoField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 

        /// <summary>
        /// WellAlias property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("WellAlias")]
        public ObjectAlias WellAlias {
            get {
                return WellAliasField;
            } 
            set {
                WellAliasField = value;
                NotifyPropertyChanged("WellAlias");
            }
        }

        private ObjectAlias WellAliasField; 

        /// <summary>
        /// WellboreAlias property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("WellboreAlias")]
        public List<ObjectAlias> WellboreAlias {
            get {
                return WellboreAliasField;
            } 
            set {
                WellboreAliasField = value;
                NotifyPropertyChanged("WellboreAlias");
            }
        }

         /// <summary>
         /// bool to indicate if WellboreAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellboreAliasSpecified
         {
             get {
             if(WellboreAliasField!=null)
                 return WellboreAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> WellboreAliasField; 

        /// <summary>
        /// WellboreInfo property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportWellboreInfo")]
		[XmlElement("WellboreInfo")]
        public DrillReportWellboreInfo WellboreInfo {
            get {
                return WellboreInfoField;
            } 
            set {
                WellboreInfoField = value;
                NotifyPropertyChanged("WellboreInfo");
            }
        }

        private DrillReportWellboreInfo WellboreInfoField; 

        /// <summary>
        /// StatusInfo property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportStatusInfo")]
		[XmlElement("StatusInfo")]
        public List<DrillReportStatusInfo> StatusInfo {
            get {
                return StatusInfoField;
            } 
            set {
                StatusInfoField = value;
                NotifyPropertyChanged("StatusInfo");
            }
        }

         /// <summary>
         /// bool to indicate if StatusInfo has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StatusInfoSpecified
         {
             get {
             if(StatusInfoField!=null)
                 return StatusInfoField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportStatusInfo> StatusInfoField; 

        /// <summary>
        /// Fluid property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Fluid")]
		[XmlElement("Fluid")]
        public List<Fluid> Fluid {
            get {
                return FluidField;
            } 
            set {
                FluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

         /// <summary>
         /// bool to indicate if Fluid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSpecified
         {
             get {
             if(FluidField!=null)
                 return FluidField.Count>0?true:false;
             else return false;
             }
         }
        private List<Fluid> FluidField; 

        /// <summary>
        /// PorePressure property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportPorePressure")]
		[XmlElement("PorePressure")]
        public List<DrillReportPorePressure> PorePressure {
            get {
                return PorePressureField;
            } 
            set {
                PorePressureField = value;
                NotifyPropertyChanged("PorePressure");
            }
        }

         /// <summary>
         /// bool to indicate if PorePressure has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PorePressureSpecified
         {
             get {
             if(PorePressureField!=null)
                 return PorePressureField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportPorePressure> PorePressureField; 

        /// <summary>
        /// ExtendedReport property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimestampedCommentString")]
		[XmlElement("ExtendedReport")]
        public TimestampedCommentString ExtendedReport {
            get {
                return ExtendedReportField;
            } 
            set {
                ExtendedReportField = value;
                NotifyPropertyChanged("ExtendedReport");
            }
        }

        private TimestampedCommentString ExtendedReportField; 

        /// <summary>
        /// SurveyStation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DrillReportSurveyStation")]
		[XmlElement("SurveyStation")]
        public List<DrillReportSurveyStation> SurveyStation {
            get {
                return SurveyStationField;
            } 
            set {
                SurveyStationField = value;
                NotifyPropertyChanged("SurveyStation");
            }
        }

         /// <summary>
         /// bool to indicate if SurveyStation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SurveyStationSpecified
         {
             get {
             if(SurveyStationField!=null)
                 return SurveyStationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DrillReportSurveyStation> SurveyStationField; 


    } //here

    /// <summary>
    /// This class represents the Tubular xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Tubular xsd type.")]
    public partial class Tubular : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// TypeTubularAssy property
        /// </summary>
		[Required]
        [Description("Type of tubular assembly.")]
        [EnergisticsDataTypeAttribute(DataType = "TubularAssembly")]
		[XmlElement("TypeTubularAssy")]
        public TubularAssembly? TypeTubularAssy {
            get {
                return TypeTubularAssyField;
            } 
            set {
                TypeTubularAssyField = value;
                 this.TypeTubularAssySpecified = true;
                NotifyPropertyChanged("TypeTubularAssy");
            }
        }

        
        private bool TypeTubularAssySpecifiedField = false;
        
        /// <summary>
        /// TypeTubularAssySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeTubularAssySpecified {
            get {
                return TypeTubularAssySpecifiedField;
            } 
            set {
                TypeTubularAssySpecifiedField = value;
                NotifyPropertyChanged("TypeTubularAssySpecified");
            }
        }
        
        private TubularAssembly? TypeTubularAssyField; 

        /// <summary>
        /// ValveFloat property
        /// </summary>
		[Description("Is float valve present?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("ValveFloat")]
        public bool? ValveFloat {
            get {
                return ValveFloatField;
            } 
            set {
                ValveFloatField = value;
                 this.ValveFloatSpecified = true;
                NotifyPropertyChanged("ValveFloat");
            }
        }

        private bool? ValveFloatField; 

        /// <summary>
        /// ValveFloatSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ValveFloatSpecified {
            get {
                return ValveFloatSpecifiedField;
            } 
            set {
                ValveFloatSpecifiedField = value;
                NotifyPropertyChanged("ValveFloatSpecified");
            }
        }

        private bool ValveFloatSpecifiedField; 

        /// <summary>
        /// SourceNuclear property
        /// </summary>
		[Description("Is nuclear tool present?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("SourceNuclear")]
        public bool? SourceNuclear {
            get {
                return SourceNuclearField;
            } 
            set {
                SourceNuclearField = value;
                 this.SourceNuclearSpecified = true;
                NotifyPropertyChanged("SourceNuclear");
            }
        }

        private bool? SourceNuclearField; 

        /// <summary>
        /// SourceNuclearSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SourceNuclearSpecified {
            get {
                return SourceNuclearSpecifiedField;
            } 
            set {
                SourceNuclearSpecifiedField = value;
                NotifyPropertyChanged("SourceNuclearSpecified");
            }
        }

        private bool SourceNuclearSpecifiedField; 

        /// <summary>
        /// DiaHoleAssy property
        /// </summary>
		[Description("Maximum hole size generated by the assembly.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("DiaHoleAssy")]
        public LengthMeasure DiaHoleAssy {
            get {
                return DiaHoleAssyField;
            } 
            set {
                DiaHoleAssyField = value;
                NotifyPropertyChanged("DiaHoleAssy");
            }
        }

        private LengthMeasure DiaHoleAssyField; 

        /// <summary>
        /// TubularComponent property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "TubularComponent")]
		[XmlElement("TubularComponent")]
        public List<TubularComponent> TubularComponent {
            get {
                return TubularComponentField;
            } 
            set {
                TubularComponentField = value;
                NotifyPropertyChanged("TubularComponent");
            }
        }

         /// <summary>
         /// bool to indicate if TubularComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TubularComponentSpecified
         {
             get {
             if(TubularComponentField!=null)
                 return TubularComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<TubularComponent> TubularComponentField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the Attachment xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Attachment xsd type.")]
    public partial class Attachment : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Category property
        /// </summary>
		[StringLength(64)]
        [Description("Used to tell what the object is when you have multiple attachments of the same file type. E.g., if you have attached a picture of cuttings on a specific depth, you can tag it with Category=\"CuttingsPicture\".")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Category")]
        public string Category {
            get {
                return CategoryField;
            } 
            set {
                CategoryField = value;
                NotifyPropertyChanged("Category");
            }
        }

        private string CategoryField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("The along-hole measured depth represented by the attachment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Param property
        /// </summary>
		[Description("Any extra numeric data. For this usage, the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionNameValue")]
		[XmlElement("Param")]
        public List<ExtensionNameValue> Param {
            get {
                return ParamField;
            } 
            set {
                ParamField = value;
                NotifyPropertyChanged("Param");
            }
        }

         /// <summary>
         /// bool to indicate if Param has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParamSpecified
         {
             get {
             if(ParamField!=null)
                 return ParamField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> ParamField; 

        /// <summary>
        /// MdBit property
        /// </summary>
		[Description("The along-hole measured depth of the bit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return MdBitField;
            } 
            set {
                MdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord MdBitField; 

        /// <summary>
        /// FileName property
        /// </summary>
		[StringLength(64)]
        [Description("A file name associated with the attachment. Note this is NOT a file path and should contain a name only.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FileName")]
        public string FileName {
            get {
                return FileNameField;
            } 
            set {
                FileNameField = value;
                NotifyPropertyChanged("FileName");
            }
        }

        private string FileNameField; 

        /// <summary>
        /// FileType property
        /// </summary>
		[StringLength(64)]
        [Description("The file type. This field SHOULD be a registered mime type as cataloged at http://www.iana.org/assignments/media-types/media-types.xhtml.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("FileType")]
        public string FileType {
            get {
                return FileTypeField;
            } 
            set {
                FileTypeField = value;
                NotifyPropertyChanged("FileType");
            }
        }

        private string FileTypeField; 

        /// <summary>
        /// Content property
        /// </summary>
		[Required]
        [Description("The actual attachment content.")]
        [EnergisticsDataTypeAttribute(DataType = "base64Binary")]
		[XmlElement("Content", DataType="base64Binary")]
        public Byte[] Content {
            get {
                return ContentField;
            } 
            set {
                ContentField = value;
                NotifyPropertyChanged("Content");
            }
        }

         /// <summary>
         /// bool to indicate if Content has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContentSpecified
         {
             get {
             if(ContentField!=null)
                 return ContentField.Length>0?true:false;
             else return false;
             }
         }
        private Byte[] ContentField; 

        /// <summary>
        /// ObjectReference property
        /// </summary>
		[Description("A reference to an object that is defined within the context of the specified wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ObjectReference")]
        public DataObjectReference ObjectReference {
            get {
                return ObjectReferenceField;
            } 
            set {
                ObjectReferenceField = value;
                NotifyPropertyChanged("ObjectReference");
            }
        }

        private DataObjectReference ObjectReferenceField; 

        /// <summary>
        /// SubObjectReference property
        /// </summary>
		[StringLength(64)]
        [Description("A reference to a sub-object that is defined within the context of the object referenced by objectReference. This should only refer to recurring components of a growing object. The content is the UID of the sub-object.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SubObjectReference")]
        public string SubObjectReference {
            get {
                return SubObjectReferenceField;
            } 
            set {
                SubObjectReferenceField = value;
                NotifyPropertyChanged("SubObjectReference");
            }
        }

        private string SubObjectReferenceField; 

        /// <summary>
        /// Wellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Wellbore")]
        public DataObjectReference Wellbore {
            get {
                return WellboreField;
            } 
            set {
                WellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private DataObjectReference WellboreField; 


    } //here

    /// <summary>
    /// This class represents the Wellbore xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Wellbore xsd type.")]
    public partial class Wellbore : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Number property
        /// </summary>
		[StringLength(64)]
        [Description("Operator borehole number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Number")]
        public string Number {
            get {
                return NumberField;
            } 
            set {
                NumberField = value;
                NotifyPropertyChanged("Number");
            }
        }

        private string NumberField; 

        /// <summary>
        /// SuffixAPI property
        /// </summary>
		[StringLength(64)]
        [Description("API suffix.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("SuffixAPI")]
        public string SuffixAPI {
            get {
                return SuffixAPIField;
            } 
            set {
                SuffixAPIField = value;
                NotifyPropertyChanged("SuffixAPI");
            }
        }

        private string SuffixAPIField; 

        /// <summary>
        /// NumGovt property
        /// </summary>
		[StringLength(64)]
        [Description("Government assigned number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumGovt")]
        public string NumGovt {
            get {
                return NumGovtField;
            } 
            set {
                NumGovtField = value;
                NotifyPropertyChanged("NumGovt");
            }
        }

        private string NumGovtField; 

        /// <summary>
        /// StatusWellbore property
        /// </summary>
		[Description("POSC wellbore status.")]
        [EnergisticsDataTypeAttribute(DataType = "WellStatus")]
		[XmlElement("StatusWellbore")]
        public WellStatus? StatusWellbore {
            get {
                return StatusWellboreField;
            } 
            set {
                StatusWellboreField = value;
                 this.StatusWellboreSpecified = true;
                NotifyPropertyChanged("StatusWellbore");
            }
        }

        private WellStatus? StatusWellboreField; 

        /// <summary>
        /// StatusWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusWellboreSpecified {
            get {
                return StatusWellboreSpecifiedField;
            } 
            set {
                StatusWellboreSpecifiedField = value;
                NotifyPropertyChanged("StatusWellboreSpecified");
            }
        }

        private bool StatusWellboreSpecifiedField; 

        /// <summary>
        /// IsActive property
        /// </summary>
		[Description("True (=\"1\" or \"true\") indicates that the wellbore is active. False (=\"0\" or \"false\") indicates otherwise. It is the servers responsibility to  set this value based on its available internal data (e.g., what objects are changing).")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsActive")]
        public bool? IsActive {
            get {
                return IsActiveField;
            } 
            set {
                IsActiveField = value;
                 this.IsActiveSpecified = true;
                NotifyPropertyChanged("IsActive");
            }
        }

        private bool? IsActiveField; 

        /// <summary>
        /// IsActiveSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsActiveSpecified {
            get {
                return IsActiveSpecifiedField;
            } 
            set {
                IsActiveSpecifiedField = value;
                NotifyPropertyChanged("IsActiveSpecified");
            }
        }

        private bool IsActiveSpecifiedField; 

        /// <summary>
        /// PurposeWellbore property
        /// </summary>
		[Description("POSC wellbore purpose.")]
        [EnergisticsDataTypeAttribute(DataType = "WellPurpose")]
		[XmlElement("PurposeWellbore")]
        public WellPurpose? PurposeWellbore {
            get {
                return PurposeWellboreField;
            } 
            set {
                PurposeWellboreField = value;
                 this.PurposeWellboreSpecified = true;
                NotifyPropertyChanged("PurposeWellbore");
            }
        }

        private WellPurpose? PurposeWellboreField; 

        /// <summary>
        /// PurposeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PurposeWellboreSpecified {
            get {
                return PurposeWellboreSpecifiedField;
            } 
            set {
                PurposeWellboreSpecifiedField = value;
                NotifyPropertyChanged("PurposeWellboreSpecified");
            }
        }

        private bool PurposeWellboreSpecifiedField; 

        /// <summary>
        /// TypeWellbore property
        /// </summary>
		[Description("Type of wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "WellboreType")]
		[XmlElement("TypeWellbore")]
        public WellboreType? TypeWellbore {
            get {
                return TypeWellboreField;
            } 
            set {
                TypeWellboreField = value;
                 this.TypeWellboreSpecified = true;
                NotifyPropertyChanged("TypeWellbore");
            }
        }

        private WellboreType? TypeWellboreField; 

        /// <summary>
        /// TypeWellboreSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeWellboreSpecified {
            get {
                return TypeWellboreSpecifiedField;
            } 
            set {
                TypeWellboreSpecifiedField = value;
                NotifyPropertyChanged("TypeWellboreSpecified");
            }
        }

        private bool TypeWellboreSpecifiedField; 

        /// <summary>
        /// Shape property
        /// </summary>
		[Description("POSC wellbore trajectory shape.")]
        [EnergisticsDataTypeAttribute(DataType = "WellboreShape")]
		[XmlElement("Shape")]
        public WellboreShape? Shape {
            get {
                return ShapeField;
            } 
            set {
                ShapeField = value;
                 this.ShapeSpecified = true;
                NotifyPropertyChanged("Shape");
            }
        }

        private WellboreShape? ShapeField; 

        /// <summary>
        /// ShapeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ShapeSpecified {
            get {
                return ShapeSpecifiedField;
            } 
            set {
                ShapeSpecifiedField = value;
                NotifyPropertyChanged("ShapeSpecified");
            }
        }

        private bool ShapeSpecifiedField; 

        /// <summary>
        /// DTimKickoff property
        /// </summary>
		[Description("Date and time of wellbore kickoff.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimKickoff")]
        public Timestamp? DateTimeKickoff {
            get {
                return DTimKickoffField;
            } 
            set {
                DTimKickoffField = value;
                 this.DateTimeKickoffSpecified = true;
                NotifyPropertyChanged("DateTimeKickoff");
            }
        }

        
        private bool DateTimeKickoffSpecifiedField = false;
        
        /// <summary>
        /// DateTimeKickoffSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeKickoffSpecified {
            get {
                return DateTimeKickoffSpecifiedField;
            } 
            set {
                DateTimeKickoffSpecifiedField = value;
                NotifyPropertyChanged("DateTimeKickoffSpecified");
            }
        }
        
        private Timestamp? DTimKickoffField; 

        /// <summary>
        /// AchievedTD property
        /// </summary>
		[Description("True (\"true\" of \"1\") indicates that the wellbore has  acheieved total depth. That is, drilling has completed. False (\"false\" or \"0\") indicates otherwise.  Not given indicates that it is not known whether total depth has been reached.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("AchievedTD")]
        public bool? AchievedTD {
            get {
                return AchievedTDField;
            } 
            set {
                AchievedTDField = value;
                 this.AchievedTDSpecified = true;
                NotifyPropertyChanged("AchievedTD");
            }
        }

        private bool? AchievedTDField; 

        /// <summary>
        /// AchievedTDSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AchievedTDSpecified {
            get {
                return AchievedTDSpecifiedField;
            } 
            set {
                AchievedTDSpecifiedField = value;
                NotifyPropertyChanged("AchievedTDSpecified");
            }
        }

        private bool AchievedTDSpecifiedField; 

        /// <summary>
        /// Md property
        /// </summary>
		[Description("The measured depth of the borehole.  If status is plugged, indicates the maximum depth reached before plugging. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("Md")]
        public MeasuredDepthCoord MD {
            get {
                return MdField;
            } 
            set {
                MdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord MdField; 

        /// <summary>
        /// Tvd property
        /// </summary>
		[Description("The  true vertical depth of the borehole.   If status is plugged, indicates the maximum depth reached before plugging.  It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("Tvd")]
        public WellVerticalDepthCoord Tvd {
            get {
                return TvdField;
            } 
            set {
                TvdField = value;
                NotifyPropertyChanged("Tvd");
            }
        }

        private WellVerticalDepthCoord TvdField; 

        /// <summary>
        /// MdBit property
        /// </summary>
		[Description("The measured depth of the bit.  If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdBit")]
        public MeasuredDepthCoord MDBit {
            get {
                return MdBitField;
            } 
            set {
                MdBitField = value;
                NotifyPropertyChanged("MDBit");
            }
        }

        private MeasuredDepthCoord MdBitField; 

        /// <summary>
        /// TvdBit property
        /// </summary>
		[Description("The true vertical depth of the bit. If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdBit")]
        public WellVerticalDepthCoord TvdBit {
            get {
                return TvdBitField;
            } 
            set {
                TvdBitField = value;
                NotifyPropertyChanged("TvdBit");
            }
        }

        private WellVerticalDepthCoord TvdBitField; 

        /// <summary>
        /// MdKickoff property
        /// </summary>
		[Description("Kickoff measured depth of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdKickoff")]
        public MeasuredDepthCoord MDKickoff {
            get {
                return MdKickoffField;
            } 
            set {
                MdKickoffField = value;
                NotifyPropertyChanged("MDKickoff");
            }
        }

        private MeasuredDepthCoord MdKickoffField; 

        /// <summary>
        /// TvdKickoff property
        /// </summary>
		[Description("Kickoff true vertical depth of the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdKickoff")]
        public WellVerticalDepthCoord TvdKickoff {
            get {
                return TvdKickoffField;
            } 
            set {
                TvdKickoffField = value;
                NotifyPropertyChanged("TvdKickoff");
            }
        }

        private WellVerticalDepthCoord TvdKickoffField; 

        /// <summary>
        /// MdPlanned property
        /// </summary>
		[Description("Planned measured depth for the wellbore total depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdPlanned")]
        public MeasuredDepthCoord MDPlanned {
            get {
                return MdPlannedField;
            } 
            set {
                MdPlannedField = value;
                NotifyPropertyChanged("MDPlanned");
            }
        }

        private MeasuredDepthCoord MdPlannedField; 

        /// <summary>
        /// TvdPlanned property
        /// </summary>
		[Description("Planned true vertical depth for the wellbore total depth.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdPlanned")]
        public WellVerticalDepthCoord TvdPlanned {
            get {
                return TvdPlannedField;
            } 
            set {
                TvdPlannedField = value;
                NotifyPropertyChanged("TvdPlanned");
            }
        }

        private WellVerticalDepthCoord TvdPlannedField; 

        /// <summary>
        /// MdSubSeaPlanned property
        /// </summary>
		[Description("Planned measured for the wellbore total depth - with respect to seabed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthCoord")]
		[XmlElement("MdSubSeaPlanned")]
        public MeasuredDepthCoord MDSubSeaPlanned {
            get {
                return MdSubSeaPlannedField;
            } 
            set {
                MdSubSeaPlannedField = value;
                NotifyPropertyChanged("MDSubSeaPlanned");
            }
        }

        private MeasuredDepthCoord MdSubSeaPlannedField; 

        /// <summary>
        /// TvdSubSeaPlanned property
        /// </summary>
		[Description("Planned true vertical depth for the wellbore total depth - with respect to seabed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalDepthCoord")]
		[XmlElement("TvdSubSeaPlanned")]
        public WellVerticalDepthCoord TvdSubSeaPlanned {
            get {
                return TvdSubSeaPlannedField;
            } 
            set {
                TvdSubSeaPlannedField = value;
                NotifyPropertyChanged("TvdSubSeaPlanned");
            }
        }

        private WellVerticalDepthCoord TvdSubSeaPlannedField; 

        /// <summary>
        /// DayTarget property
        /// </summary>
		[Description("Target days for drilling wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeMeasure")]
		[XmlElement("DayTarget")]
        public TimeMeasure DayTarget {
            get {
                return DayTargetField;
            } 
            set {
                DayTargetField = value;
                NotifyPropertyChanged("DayTarget");
            }
        }

        private TimeMeasure DayTargetField; 

        /// <summary>
        /// Well property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Well")]
        public DataObjectReference Well {
            get {
                return WellField;
            } 
            set {
                WellField = value;
                NotifyPropertyChanged("Well");
            }
        }

        private DataObjectReference WellField; 

        /// <summary>
        /// ParentWellbore property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ParentWellbore")]
        public DataObjectReference ParentWellbore {
            get {
                return ParentWellboreField;
            } 
            set {
                ParentWellboreField = value;
                NotifyPropertyChanged("ParentWellbore");
            }
        }

        private DataObjectReference ParentWellboreField; 


    } //here

    /// <summary>
    /// This class represents the Well xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Well xsd type.")]
    public partial class Well : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// NameLegal property
        /// </summary>
		[StringLength(64)]
        [Description("Legal name of the well.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NameLegal")]
        public string NameLegal {
            get {
                return NameLegalField;
            } 
            set {
                NameLegalField = value;
                NotifyPropertyChanged("NameLegal");
            }
        }

        private string NameLegalField; 

        /// <summary>
        /// NumLicense property
        /// </summary>
		[StringLength(64)]
        [Description("License number of the well.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumLicense")]
        public string NumLicense {
            get {
                return NumLicenseField;
            } 
            set {
                NumLicenseField = value;
                NotifyPropertyChanged("NumLicense");
            }
        }

        private string NumLicenseField; 

        /// <summary>
        /// NumGovt property
        /// </summary>
		[StringLength(64)]
        [Description("Government assigned well number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumGovt")]
        public string NumGovt {
            get {
                return NumGovtField;
            } 
            set {
                NumGovtField = value;
                NotifyPropertyChanged("NumGovt");
            }
        }

        private string NumGovtField; 

        /// <summary>
        /// DTimLicense property
        /// </summary>
		[Description("Date and time the license  was issued.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimLicense")]
        public Timestamp? DateTimeLicense {
            get {
                return DTimLicenseField;
            } 
            set {
                DTimLicenseField = value;
                 this.DateTimeLicenseSpecified = true;
                NotifyPropertyChanged("DateTimeLicense");
            }
        }

        
        private bool DateTimeLicenseSpecifiedField = false;
        
        /// <summary>
        /// DateTimeLicenseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeLicenseSpecified {
            get {
                return DateTimeLicenseSpecifiedField;
            } 
            set {
                DateTimeLicenseSpecifiedField = value;
                NotifyPropertyChanged("DateTimeLicenseSpecified");
            }
        }
        
        private Timestamp? DTimLicenseField; 

        /// <summary>
        /// Field property
        /// </summary>
		[StringLength(64)]
        [Description("Name of the field in which the well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Field")]
        public string Field {
            get {
                return FieldField;
            } 
            set {
                FieldField = value;
                NotifyPropertyChanged("Field");
            }
        }

        private string FieldField; 

        /// <summary>
        /// Country property
        /// </summary>
		[StringLength(64)]
        [Description("Country in which the well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Country")]
        public string Country {
            get {
                return CountryField;
            } 
            set {
                CountryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private string CountryField; 

        /// <summary>
        /// State property
        /// </summary>
		[StringLength(64)]
        [Description("State or province in which the well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("State")]
        public string State {
            get {
                return StateField;
            } 
            set {
                StateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private string StateField; 

        /// <summary>
        /// County property
        /// </summary>
		[StringLength(64)]
        [Description("County in which the well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("County")]
        public string County {
            get {
                return CountyField;
            } 
            set {
                CountyField = value;
                NotifyPropertyChanged("County");
            }
        }

        private string CountyField; 

        /// <summary>
        /// Region property
        /// </summary>
		[StringLength(64)]
        [Description("Geo-political region in which the well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Region")]
        public string Region {
            get {
                return RegionField;
            } 
            set {
                RegionField = value;
                NotifyPropertyChanged("Region");
            }
        }

        private string RegionField; 

        /// <summary>
        /// District property
        /// </summary>
		[StringLength(64)]
        [Description("Geo-political district name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("District")]
        public string District {
            get {
                return DistrictField;
            } 
            set {
                DistrictField = value;
                NotifyPropertyChanged("District");
            }
        }

        private string DistrictField; 

        /// <summary>
        /// Block property
        /// </summary>
		[StringLength(64)]
        [Description("Block name in which the  well is located.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Block")]
        public string Block {
            get {
                return BlockField;
            } 
            set {
                BlockField = value;
                NotifyPropertyChanged("Block");
            }
        }

        private string BlockField; 

        /// <summary>
        /// TimeZone property
        /// </summary>
		[RegularExpression("[Z]|([\\-+](([01][0-9])|(2[0-3])):[0-5][0-9])")]
        [StringLength(64)]
        [Description("The time zone in which the well is located. It is the deviation in hours and minutes from UTC. This should be the normal time zone at the well and not a seasonally-adjusted value, such as daylight savings time.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeZone")]
		[XmlElement("TimeZone")]
        public string TimeZone {
            get {
                return TimeZoneField;
            } 
            set {
                TimeZoneField = value;
                NotifyPropertyChanged("TimeZone");
            }
        }

        private string TimeZoneField; 

        /// <summary>
        /// Operator property
        /// </summary>
		[StringLength(64)]
        [Description("Operator company name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("Operator")]
        public string Operator {
            get {
                return OperatorField;
            } 
            set {
                OperatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private string OperatorField; 

        /// <summary>
        /// OperatorDiv property
        /// </summary>
		[StringLength(64)]
        [Description("Division of the operator company.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("OperatorDiv")]
        public string OperatorDivision {
            get {
                return OperatorDivField;
            } 
            set {
                OperatorDivField = value;
                NotifyPropertyChanged("OperatorDivision");
            }
        }

        private string OperatorDivField; 

        /// <summary>
        /// OriginalOperator property
        /// </summary>
		[StringLength(64)]
        [Description("Original operator of the well. This may be different than the current operator.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("OriginalOperator")]
        public string OriginalOperator {
            get {
                return OriginalOperatorField;
            } 
            set {
                OriginalOperatorField = value;
                NotifyPropertyChanged("OriginalOperator");
            }
        }

        private string OriginalOperatorField; 

        /// <summary>
        /// PcInterest property
        /// </summary>
		[Description("Interest for operator. Commonly in percent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessMeasure")]
		[XmlElement("PcInterest")]
        public DimensionlessMeasure PercentInterest {
            get {
                return PcInterestField;
            } 
            set {
                PcInterestField = value;
                NotifyPropertyChanged("PercentInterest");
            }
        }

        private DimensionlessMeasure PcInterestField; 

        /// <summary>
        /// NumAPI property
        /// </summary>
		[StringLength(64)]
        [Description("American Petroleum Institute well number.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("NumAPI")]
        public string NumAPI {
            get {
                return NumAPIField;
            } 
            set {
                NumAPIField = value;
                NotifyPropertyChanged("NumAPI");
            }
        }

        private string NumAPIField; 

        /// <summary>
        /// StatusWell property
        /// </summary>
		[Description("POSC well status.")]
        [EnergisticsDataTypeAttribute(DataType = "WellStatus")]
		[XmlElement("StatusWell")]
        public WellStatus? StatusWell {
            get {
                return StatusWellField;
            } 
            set {
                StatusWellField = value;
                 this.StatusWellSpecified = true;
                NotifyPropertyChanged("StatusWell");
            }
        }

        private WellStatus? StatusWellField; 

        /// <summary>
        /// StatusWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusWellSpecified {
            get {
                return StatusWellSpecifiedField;
            } 
            set {
                StatusWellSpecifiedField = value;
                NotifyPropertyChanged("StatusWellSpecified");
            }
        }

        private bool StatusWellSpecifiedField; 

        /// <summary>
        /// PurposeWell property
        /// </summary>
		[Description("POSC well purpose.")]
        [EnergisticsDataTypeAttribute(DataType = "WellPurpose")]
		[XmlElement("PurposeWell")]
        public WellPurpose? PurposeWell {
            get {
                return PurposeWellField;
            } 
            set {
                PurposeWellField = value;
                 this.PurposeWellSpecified = true;
                NotifyPropertyChanged("PurposeWell");
            }
        }

        private WellPurpose? PurposeWellField; 

        /// <summary>
        /// PurposeWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PurposeWellSpecified {
            get {
                return PurposeWellSpecifiedField;
            } 
            set {
                PurposeWellSpecifiedField = value;
                NotifyPropertyChanged("PurposeWellSpecified");
            }
        }

        private bool PurposeWellSpecifiedField; 

        /// <summary>
        /// FluidWell property
        /// </summary>
		[Description("POSC well fluid. The type of fluid being produced from or injected  into a well facility.")]
        [EnergisticsDataTypeAttribute(DataType = "WellFluid")]
		[XmlElement("FluidWell")]
        public WellFluid? FluidWell {
            get {
                return FluidWellField;
            } 
            set {
                FluidWellField = value;
                 this.FluidWellSpecified = true;
                NotifyPropertyChanged("FluidWell");
            }
        }

        private WellFluid? FluidWellField; 

        /// <summary>
        /// FluidWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidWellSpecified {
            get {
                return FluidWellSpecifiedField;
            } 
            set {
                FluidWellSpecifiedField = value;
                NotifyPropertyChanged("FluidWellSpecified");
            }
        }

        private bool FluidWellSpecifiedField; 

        /// <summary>
        /// DirectionWell property
        /// </summary>
		[Description("POSC well direction. The direction of the flow of the fluids in a well facility (generally, injected or produced, or some combination).")]
        [EnergisticsDataTypeAttribute(DataType = "WellDirection")]
		[XmlElement("DirectionWell")]
        public WellDirection? DirectionWell {
            get {
                return DirectionWellField;
            } 
            set {
                DirectionWellField = value;
                 this.DirectionWellSpecified = true;
                NotifyPropertyChanged("DirectionWell");
            }
        }

        private WellDirection? DirectionWellField; 

        /// <summary>
        /// DirectionWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionWellSpecified {
            get {
                return DirectionWellSpecifiedField;
            } 
            set {
                DirectionWellSpecifiedField = value;
                NotifyPropertyChanged("DirectionWellSpecified");
            }
        }

        private bool DirectionWellSpecifiedField; 

        /// <summary>
        /// DTimSpud property
        /// </summary>
		[Description("Date and time at which the well was spudded.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimSpud")]
        public Timestamp? DateTimeSpud {
            get {
                return DTimSpudField;
            } 
            set {
                DTimSpudField = value;
                 this.DateTimeSpudSpecified = true;
                NotifyPropertyChanged("DateTimeSpud");
            }
        }

        
        private bool DateTimeSpudSpecifiedField = false;
        
        /// <summary>
        /// DateTimeSpudSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpudSpecified {
            get {
                return DateTimeSpudSpecifiedField;
            } 
            set {
                DateTimeSpudSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpudSpecified");
            }
        }
        
        private Timestamp? DTimSpudField; 

        /// <summary>
        /// DTimPa property
        /// </summary>
		[Description("Date and time at which the well was plugged and abandoned.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DTimPa")]
        public Timestamp? DateTimePluggedAndAbandoned {
            get {
                return DTimPaField;
            } 
            set {
                DTimPaField = value;
                 this.DateTimePluggedAndAbandonedSpecified = true;
                NotifyPropertyChanged("DateTimePluggedAndAbandoned");
            }
        }

        
        private bool DateTimePluggedAndAbandonedSpecifiedField = false;
        
        /// <summary>
        /// DateTimePluggedAndAbandonedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimePluggedAndAbandonedSpecified {
            get {
                return DateTimePluggedAndAbandonedSpecifiedField;
            } 
            set {
                DateTimePluggedAndAbandonedSpecifiedField = value;
                NotifyPropertyChanged("DateTimePluggedAndAbandonedSpecified");
            }
        }
        
        private Timestamp? DTimPaField; 

        /// <summary>
        /// WaterDepth property
        /// </summary>
		[Description("Depth of water (not land rigs).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("WaterDepth")]
        public LengthMeasure WaterDepth {
            get {
                return WaterDepthField;
            } 
            set {
                WaterDepthField = value;
                NotifyPropertyChanged("WaterDepth");
            }
        }

        private LengthMeasure WaterDepthField; 

        /// <summary>
        /// GeographicLocationWGS84 property
        /// </summary>
		[Description("The latitude (in coordinate1) and longitude (in coordinate2) of the well location in the WGS84 coordinate system (equivalent to EPSG:4326). Units are in decimal degrees. Coordinate 1 and 2 refer to the ProjectedWellLocation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "GeodeticWellLocation")]
		[XmlElement("GeographicLocationWGS84")]
        public GeodeticWellLocation GeographicLocationWGS84 {
            get {
                return GeographicLocationWGS84Field;
            } 
            set {
                GeographicLocationWGS84Field = value;
                NotifyPropertyChanged("GeographicLocationWGS84");
            }
        }

        private GeodeticWellLocation GeographicLocationWGS84Field; 

        /// <summary>
        /// WellLocation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractWellLocation")]
		[XmlElement("WellLocation")]
        public List<AbstractWellLocation> WellLocation {
            get {
                return WellLocationField;
            } 
            set {
                WellLocationField = value;
                NotifyPropertyChanged("WellLocation");
            }
        }

         /// <summary>
         /// bool to indicate if WellLocation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellLocationSpecified
         {
             get {
             if(WellLocationField!=null)
                 return WellLocationField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractWellLocation> WellLocationField; 

        /// <summary>
        /// WellPublicLandSurveySystemLocation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PublicLandSurveySystem")]
		[XmlElement("WellPublicLandSurveySystemLocation")]
        public PublicLandSurveySystem WellPublicLandSurveySystemLocation {
            get {
                return WellPublicLandSurveySystemLocationField;
            } 
            set {
                WellPublicLandSurveySystemLocationField = value;
                NotifyPropertyChanged("WellPublicLandSurveySystemLocation");
            }
        }

        private PublicLandSurveySystem WellPublicLandSurveySystemLocationField; 

        /// <summary>
        /// ReferencePoint property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ReferencePoint")]
		[XmlElement("ReferencePoint")]
        public List<ReferencePoint> ReferencePoint {
            get {
                return ReferencePointField;
            } 
            set {
                ReferencePointField = value;
                NotifyPropertyChanged("ReferencePoint");
            }
        }

         /// <summary>
         /// bool to indicate if ReferencePoint has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ReferencePointSpecified
         {
             get {
             if(ReferencePointField!=null)
                 return ReferencePointField.Count>0?true:false;
             else return false;
             }
         }
        private List<ReferencePoint> ReferencePointField; 

        /// <summary>
        /// WellheadElevation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellElevationCoord")]
		[XmlElement("WellheadElevation")]
        public WellElevationCoord WellheadElevation {
            get {
                return WellheadElevationField;
            } 
            set {
                WellheadElevationField = value;
                NotifyPropertyChanged("WellheadElevation");
            }
        }

        private WellElevationCoord WellheadElevationField; 

        /// <summary>
        /// WellDatum property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WellDatum")]
		[XmlElement("WellDatum")]
        public List<WellDatum> WellDatum {
            get {
                return WellDatumField;
            } 
            set {
                WellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

         /// <summary>
         /// bool to indicate if WellDatum has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellDatumSpecified
         {
             get {
             if(WellDatumField!=null)
                 return WellDatumField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellDatum> WellDatumField; 

        /// <summary>
        /// GroundElevation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellElevationCoord")]
		[XmlElement("GroundElevation")]
        public WellElevationCoord GroundElevation {
            get {
                return GroundElevationField;
            } 
            set {
                GroundElevationField = value;
                NotifyPropertyChanged("GroundElevation");
            }
        }

        private WellElevationCoord GroundElevationField; 


    } //here

    /// <summary>
    /// This class represents the GraphicalInformationSet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the GraphicalInformationSet xsd type.")]
    public partial class GraphicalInformationSet : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// GraphicalInformation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractGraphicalInformation")]
		[XmlElement("GraphicalInformation")]
        public List<AbstractGraphicalInformation> GraphicalInformation {
            get {
                return GraphicalInformationField;
            } 
            set {
                GraphicalInformationField = value;
                NotifyPropertyChanged("GraphicalInformation");
            }
        }

         /// <summary>
         /// bool to indicate if GraphicalInformation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GraphicalInformationSpecified
         {
             get {
             if(GraphicalInformationField!=null)
                 return GraphicalInformationField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractGraphicalInformation> GraphicalInformationField; 


    } //here

    /// <summary>
    /// This class represents the DataAssuranceRecord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the DataAssuranceRecord xsd type.")]
    public partial class DataAssuranceRecord : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// PolicyId property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Identifier of the policy whose conformance is being described.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("PolicyId")]
        public string PolicyId {
            get {
                return PolicyIdField;
            } 
            set {
                PolicyIdField = value;
                NotifyPropertyChanged("PolicyId");
            }
        }

        private string PolicyIdField; 

        /// <summary>
        /// PolicyName property
        /// </summary>
		[StringLength(2000)]
        [Description("Human-readable name of the policy")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("PolicyName")]
        public string PolicyName {
            get {
                return PolicyNameField;
            } 
            set {
                PolicyNameField = value;
                NotifyPropertyChanged("PolicyName");
            }
        }

        private string PolicyNameField; 

        /// <summary>
        /// ReferencedElementName property
        /// </summary>
		[StringLength(64)]
        [Description("If the Policy applies to a single element within the referenced data object this attribute holds its element name.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ReferencedElementName")]
        public string ReferencedElementName {
            get {
                return ReferencedElementNameField;
            } 
            set {
                ReferencedElementNameField = value;
                NotifyPropertyChanged("ReferencedElementName");
            }
        }

        private string ReferencedElementNameField; 

        /// <summary>
        /// ReferencedElementUid property
        /// </summary>
		[StringLength(64)]
        [Description("If the Policy applies to a single occurrence of a recurring element within the referenced data object this attribute holds its uid.  The name of the recurring element would be in the ReferencedElementName.")]
        [EnergisticsDataTypeAttribute(DataType = "String64")]
		[XmlElement("ReferencedElementUid")]
        public string ReferencedElementUid {
            get {
                return ReferencedElementUidField;
            } 
            set {
                ReferencedElementUidField = value;
                NotifyPropertyChanged("ReferencedElementUid");
            }
        }

        private string ReferencedElementUidField; 

        /// <summary>
        /// Origin property
        /// </summary>
		[Required]
        [Description("Agent which checked the data for conformance with the policy. This could be a person or an automated computer process or any number of other things.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("Origin")]
        public string Origin {
            get {
                return OriginField;
            } 
            set {
                OriginField = value;
                NotifyPropertyChanged("Origin");
            }
        }

        private string OriginField; 

        /// <summary>
        /// Conformance property
        /// </summary>
		[Required]
        [Description("Yes/no flag indicating whether this particular data ???? conforms with the policy or not.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Conformance")]
        public bool? Conformance {
            get {
                return ConformanceField;
            } 
            set {
                ConformanceField = value;
                NotifyPropertyChanged("Conformance");
            }
        }

        private bool? ConformanceField; 

        /// <summary>
        /// Date property
        /// </summary>
		[Required]
        [Description("Date the policy was last checked. This is the date for which the Conformance value is valid.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("Date")]
        public Timestamp? Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                 this.DateSpecified = true;
                NotifyPropertyChanged("Date");
            }
        }

        
        private bool DateSpecifiedField = false;
        
        /// <summary>
        /// DateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateSpecified {
            get {
                return DateSpecifiedField;
            } 
            set {
                DateSpecifiedField = value;
                NotifyPropertyChanged("DateSpecified");
            }
        }
        
        private Timestamp? DateField; 

        /// <summary>
        /// Comment property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("Comment")]
        public string Comment {
            get {
                return CommentField;
            } 
            set {
                CommentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string CommentField; 

        /// <summary>
        /// FailingRules property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FailingRule")]
		[XmlElement("FailingRules")]
        public List<FailingRule> FailingRules {
            get {
                return FailingRulesField;
            } 
            set {
                FailingRulesField = value;
                NotifyPropertyChanged("FailingRules");
            }
        }

         /// <summary>
         /// bool to indicate if FailingRules has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FailingRulesSpecified
         {
             get {
             if(FailingRulesField!=null)
                 return FailingRulesField.Count>0?true:false;
             else return false;
             }
         }
        private List<FailingRule> FailingRulesField; 

        /// <summary>
        /// IndexRange property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IndexRange")]
		[XmlElement("IndexRange")]
        public IndexRange IndexRange {
            get {
                return IndexRangeField;
            } 
            set {
                IndexRangeField = value;
                NotifyPropertyChanged("IndexRange");
            }
        }

        private IndexRange IndexRangeField; 

        /// <summary>
        /// ReferencedData property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ReferencedData")]
        public DataObjectReference ReferencedData {
            get {
                return ReferencedDataField;
            } 
            set {
                ReferencedDataField = value;
                NotifyPropertyChanged("ReferencedData");
            }
        }

        private DataObjectReference ReferencedDataField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeodeticCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeodeticCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the GeodeticCrs xsd type.")]
    public partial class GeodeticCrs : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractGeodeticCrs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractGeodeticCrs")]
		[XmlElement("AbstractGeodeticCrs")]
        public AbstractGeodeticCrs AbstractGeodeticCrs {
            get {
                return AbstractGeodeticCrsField;
            } 
            set {
                AbstractGeodeticCrsField = value;
                NotifyPropertyChanged("AbstractGeodeticCrs");
            }
        }

        private AbstractGeodeticCrs AbstractGeodeticCrsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the ProjectedCrs xsd type.")]
    public partial class ProjectedCrs : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AxisOrder property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AxisOrder2d")]
		[XmlElement("AxisOrder")]
        public AxisOrder2d? AxisOrder {
            get {
                return AxisOrderField;
            } 
            set {
                AxisOrderField = value;
                 this.AxisOrderSpecified = true;
                NotifyPropertyChanged("AxisOrder");
            }
        }

        
        private bool AxisOrderSpecifiedField = false;
        
        /// <summary>
        /// AxisOrderSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AxisOrderSpecified {
            get {
                return AxisOrderSpecifiedField;
            } 
            set {
                AxisOrderSpecifiedField = value;
                NotifyPropertyChanged("AxisOrderSpecified");
            }
        }
        
        private AxisOrder2d? AxisOrderField; 

        /// <summary>
        /// AbstractProjectedCrs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProjectedCrs")]
		[XmlElement("AbstractProjectedCrs")]
        public AbstractProjectedCrs AbstractProjectedCrs {
            get {
                return AbstractProjectedCrsField;
            } 
            set {
                AbstractProjectedCrsField = value;
                NotifyPropertyChanged("AbstractProjectedCrs");
            }
        }

        private AbstractProjectedCrs AbstractProjectedCrsField; 

		/// <summary>
        /// uom property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "LengthUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the VerticalCrs xsd type.")]
    public partial class VerticalCrs : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Direction property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VerticalDirection")]
		[XmlElement("Direction")]
        public VerticalDirection? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        
        private bool DirectionSpecifiedField = false;
        
        /// <summary>
        /// DirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return DirectionSpecifiedField;
            } 
            set {
                DirectionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }
        
        private VerticalDirection? DirectionField; 

        /// <summary>
        /// AbstractVerticalCrs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractVerticalCrs")]
		[XmlElement("AbstractVerticalCrs")]
        public AbstractVerticalCrs AbstractVerticalCrs {
            get {
                return AbstractVerticalCrsField;
            } 
            set {
                AbstractVerticalCrsField = value;
                NotifyPropertyChanged("AbstractVerticalCrs");
            }
        }

        private AbstractVerticalCrs AbstractVerticalCrsField; 

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthUomExt")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    /// <summary>
    /// This class represents the ActivityTemplate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the ActivityTemplate xsd type.")]
    public partial class ActivityTemplate : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Parameter property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ParameterTemplate")]
		[XmlElement("Parameter")]
        public List<ParameterTemplate> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<ParameterTemplate> ParameterField; 


    } //here

    /// <summary>
    /// This class represents the Activity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the Activity xsd type.")]
    public partial class Activity : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ActivityDescriptor property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ActivityDescriptor")]
        public DataObjectReference ActivityDescriptor {
            get {
                return ActivityDescriptorField;
            } 
            set {
                ActivityDescriptorField = value;
                NotifyPropertyChanged("ActivityDescriptor");
            }
        }

        private DataObjectReference ActivityDescriptorField; 

        /// <summary>
        /// Parent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Parent")]
        public DataObjectReference Parent {
            get {
                return ParentField;
            } 
            set {
                ParentField = value;
                NotifyPropertyChanged("Parent");
            }
        }

        private DataObjectReference ParentField; 

        /// <summary>
        /// Parameter property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractActivityParameter")]
		[XmlElement("Parameter")]
        public List<AbstractActivityParameter> Parameter {
            get {
                return ParameterField;
            } 
            set {
                ParameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(ParameterField!=null)
                 return ParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractActivityParameter> ParameterField; 


    } //here

    /// <summary>
    /// This class represents the TimeSeries xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the TimeSeries xsd type.")]
    public partial class TimeSeries : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Time property
        /// </summary>
		[Required]
        [Description("Individual times composing the series. The list ordering is used by the time index.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GeologicTime")]
		[XmlElement("Time")]
        public List<GeologicTime> Time {
            get {
                return TimeField;
            } 
            set {
                TimeField = value;
                NotifyPropertyChanged("Time");
            }
        }

         /// <summary>
         /// bool to indicate if Time has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TimeSpecified
         {
             get {
             if(TimeField!=null)
                 return TimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<GeologicTime> TimeField; 

        /// <summary>
        /// TimeSeriesParentage property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeSeriesParentage")]
		[XmlElement("TimeSeriesParentage")]
        public TimeSeriesParentage TimeSeriesParentage {
            get {
                return TimeSeriesParentageField;
            } 
            set {
                TimeSeriesParentageField = value;
                NotifyPropertyChanged("TimeSeriesParentage");
            }
        }

        private TimeSeriesParentage TimeSeriesParentageField; 


    } //here

    /// <summary>
    /// This class represents the PropertyKind xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the PropertyKind xsd type.")]
    public partial class PropertyKind : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// IsAbstract property
        /// </summary>
		[Required]
        [Description("This boolean indicates whether the PropertyKind should be used as a real property or not.  If the Is Abstract flag is set, then this entry should be used only as the parent of a real property. For example, the PropertyKind of \"force per length\" shouldn't be used directly, as it is really just a description of some units of measure. This entry should only be used as the parent of the real physical property \"surface tension\".")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsAbstract")]
        public bool? IsAbstract {
            get {
                return IsAbstractField;
            } 
            set {
                IsAbstractField = value;
                NotifyPropertyChanged("IsAbstract");
            }
        }

        private bool? IsAbstractField; 

        /// <summary>
        /// DeprecationDate property
        /// </summary>
		[Description("Date at which this property dictionary entry must no longer be used. Files generated before this date would have used this entry so it is left here for reference.   A null value means the property kind is still valid.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeStamp")]
		[XmlElement("DeprecationDate")]
        public Timestamp? DeprecationDate {
            get {
                return DeprecationDateField;
            } 
            set {
                DeprecationDateField = value;
                 this.DeprecationDateSpecified = true;
                NotifyPropertyChanged("DeprecationDate");
            }
        }

        
        private bool DeprecationDateSpecifiedField = false;
        
        /// <summary>
        /// DeprecationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DeprecationDateSpecified {
            get {
                return DeprecationDateSpecifiedField;
            } 
            set {
                DeprecationDateSpecifiedField = value;
                NotifyPropertyChanged("DeprecationDateSpecified");
            }
        }
        
        private Timestamp? DeprecationDateField; 

        /// <summary>
        /// QuantityClass property
        /// </summary>
		[Required]
        [Description("A reference to the name of a quantity class in the Energistics Unit of Measure Dictionary. If there is no match in the Energistics Unit of Measure Dictionary, then this attribute is purely for human information.")]
        [EnergisticsDataTypeAttribute(DataType = "QuantityClassKindExt")]
		[XmlElement("QuantityClass")]
        public ExtensibleEnum<QuantityClassKind>? QuantityClass {
            get {
                return QuantityClassField;
            } 
            set {
                QuantityClassField = value;
                NotifyPropertyChanged("QuantityClass");
            }
        }

        private ExtensibleEnum<QuantityClassKind>? QuantityClassField; 

        /// <summary>
        /// Parent property
        /// </summary>
		[Description("Indicates the parent of this property kind. BUSINESS RULE : Only the top root abstract property kind has not to define a parent property kind.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Parent")]
        public DataObjectReference Parent {
            get {
                return ParentField;
            } 
            set {
                ParentField = value;
                NotifyPropertyChanged("Parent");
            }
        }

        private DataObjectReference ParentField; 


    } //here

    /// <summary>
    /// This class represents the PropertyKindDictionary xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the PropertyKindDictionary xsd type.")]
    public partial class PropertyKindDictionary : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// PropertyKind property
        /// </summary>
		[Required]
        [Description("Defines which property kind are contained into a property kind dictionary.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PropertyKind")]
		[XmlElement("PropertyKind")]
        public List<PropertyKind> PropertyKind {
            get {
                return PropertyKindField;
            } 
            set {
                PropertyKindField = value;
                NotifyPropertyChanged("PropertyKind");
            }
        }

         /// <summary>
         /// bool to indicate if PropertyKind has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PropertyKindSpecified
         {
             get {
             if(PropertyKindField!=null)
                 return PropertyKindField.Count>0?true:false;
             else return false;
             }
         }
        private List<PropertyKind> PropertyKindField; 


    } //here

    /// <summary>
    /// This class represents the EpcExternalPartReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.WITSML, "2.0")]
    [Description("This class represents the EpcExternalPartReference xsd type.")]
    public partial class EpcExternalPartReference : AbstractObject, IWitsmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Filename property
        /// </summary>
		[StringLength(2000)]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("Filename")]
        public string Filename {
            get {
                return FilenameField;
            } 
            set {
                FilenameField = value;
                NotifyPropertyChanged("Filename");
            }
        }

        private string FilenameField; 

        /// <summary>
        /// MimeType property
        /// </summary>
		[StringLength(2000)]
        [Description("IAMF registered, if one exists, or a free text field. Needs documentation on seismic especially.  MIME type for HDF proxy is : application/x-hdf5 (by convention).")]
        [EnergisticsDataTypeAttribute(DataType = "String2000")]
		[XmlElement("MimeType")]
        public string MimeType {
            get {
                return MimeTypeField;
            } 
            set {
                MimeTypeField = value;
                NotifyPropertyChanged("MimeType");
            }
        }

        private string MimeTypeField; 


    } //here

    #endregion

    #region Enumerations
    namespace ReferenceData {
        /// <summary>
        /// This class represents the ExistenceKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ExistenceKind xsd enumeration.")]
        public enum ExistenceKind 
        {
        /// <summary>
        /// actual property
        /// </summary>
          actual,
        /// <summary>
        /// planned property
        /// </summary>
          planned,
        /// <summary>
        /// simulated property
        /// </summary>
          simulated
        }
        /// <summary>
        /// This class represents the MatrixCementKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MatrixCementKind xsd enumeration.")]
        public enum MatrixCementKind 
        {
        /// <summary>
        /// ankerite property
        /// </summary>
          ankerite,
        /// <summary>
        /// calcite property
        /// </summary>
          calcite,
        /// <summary>
        /// chlorite property
        /// </summary>
          chlorite,
        /// <summary>
        /// dolomite property
        /// </summary>
          dolomite,
        /// <summary>
        /// illite property
        /// </summary>
          illite,
        /// <summary>
        /// kaolinite property
        /// </summary>
          kaolinite,
        /// <summary>
        /// quartz property
        /// </summary>
          quartz,
        /// <summary>
        /// siderite property
        /// </summary>
          siderite,
        /// <summary>
        /// smectite property
        /// </summary>
          smectite
        }
        /// <summary>
        /// This class represents the MeasureClass xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MeasureClass xsd enumeration.")]
        public enum MeasureClass 
        {
        /// <summary>
        /// absorbeddose property
        /// </summary>
          [XmlEnum("absorbed dose")]
          absorbeddose,
        /// <summary>
        /// activityofradioactivity property
        /// </summary>
          [XmlEnum("activity of radioactivity")]
          activityofradioactivity,
        /// <summary>
        /// amountofsubstance property
        /// </summary>
          [XmlEnum("amount of substance")]
          amountofsubstance,
        /// <summary>
        /// amountofsubstanceperamountofsubstance property
        /// </summary>
          [XmlEnum("amount of substance per amount of substance")]
          amountofsubstanceperamountofsubstance,
        /// <summary>
        /// amountofsubstanceperarea property
        /// </summary>
          [XmlEnum("amount of substance per area")]
          amountofsubstanceperarea,
        /// <summary>
        /// amountofsubstancepertime property
        /// </summary>
          [XmlEnum("amount of substance per time")]
          amountofsubstancepertime,
        /// <summary>
        /// amountofsubstancepertimeperarea property
        /// </summary>
          [XmlEnum("amount of substance per time per area")]
          amountofsubstancepertimeperarea,
        /// <summary>
        /// amountofsubstancepervolume property
        /// </summary>
          [XmlEnum("amount of substance per volume")]
          amountofsubstancepervolume,
        /// <summary>
        /// angleperlength property
        /// </summary>
          [XmlEnum("angle per length")]
          angleperlength,
        /// <summary>
        /// anglepervolume property
        /// </summary>
          [XmlEnum("angle per volume")]
          anglepervolume,
        /// <summary>
        /// angularacceleration property
        /// </summary>
          [XmlEnum("angular acceleration")]
          angularacceleration,
        /// <summary>
        /// angularvelocity property
        /// </summary>
          [XmlEnum("angular velocity")]
          angularvelocity,
        /// <summary>
        /// apigammaray property
        /// </summary>
          [XmlEnum("api gamma ray")]
          apigammaray,
        /// <summary>
        /// apigravity property
        /// </summary>
          [XmlEnum("api gravity")]
          apigravity,
        /// <summary>
        /// apineutron property
        /// </summary>
          [XmlEnum("api neutron")]
          apineutron,
        /// <summary>
        /// area property
        /// </summary>
          area,
        /// <summary>
        /// areaperamountofsubstance property
        /// </summary>
          [XmlEnum("area per amount of substance")]
          areaperamountofsubstance,
        /// <summary>
        /// areaperarea property
        /// </summary>
          [XmlEnum("area per area")]
          areaperarea,
        /// <summary>
        /// areapercount property
        /// </summary>
          [XmlEnum("area per count")]
          areapercount,
        /// <summary>
        /// areapermass property
        /// </summary>
          [XmlEnum("area per mass")]
          areapermass,
        /// <summary>
        /// areapertime property
        /// </summary>
          [XmlEnum("area per time")]
          areapertime,
        /// <summary>
        /// areapervolume property
        /// </summary>
          [XmlEnum("area per volume")]
          areapervolume,
        /// <summary>
        /// attenuationperfrequencyinterval property
        /// </summary>
          [XmlEnum("attenuation per frequency interval")]
          attenuationperfrequencyinterval,
        /// <summary>
        /// capacitance property
        /// </summary>
          capacitance,
        /// <summary>
        /// cationexchangecapacity property
        /// </summary>
          [XmlEnum("cation exchange capacity")]
          cationexchangecapacity,
        /// <summary>
        /// datatransferspeed property
        /// </summary>
          [XmlEnum("data transfer speed")]
          datatransferspeed,
        /// <summary>
        /// diffusioncoefficient property
        /// </summary>
          [XmlEnum("diffusion coefficient")]
          diffusioncoefficient,
        /// <summary>
        /// diffusivetimeofflight property
        /// </summary>
          [XmlEnum("diffusive time of flight")]
          diffusivetimeofflight,
        /// <summary>
        /// digitalstorage property
        /// </summary>
          [XmlEnum("digital storage")]
          digitalstorage,
        /// <summary>
        /// dimensionless property
        /// </summary>
          dimensionless,
        /// <summary>
        /// dipolemoment property
        /// </summary>
          [XmlEnum("dipole moment")]
          dipolemoment,
        /// <summary>
        /// doseequivalent property
        /// </summary>
          [XmlEnum("dose equivalent")]
          doseequivalent,
        /// <summary>
        /// dynamicviscosity property
        /// </summary>
          [XmlEnum("dynamic viscosity")]
          dynamicviscosity,
        /// <summary>
        /// electriccharge property
        /// </summary>
          [XmlEnum("electric charge")]
          electriccharge,
        /// <summary>
        /// electricchargeperarea property
        /// </summary>
          [XmlEnum("electric charge per area")]
          electricchargeperarea,
        /// <summary>
        /// electricchargepermass property
        /// </summary>
          [XmlEnum("electric charge per mass")]
          electricchargepermass,
        /// <summary>
        /// electricchargepervolume property
        /// </summary>
          [XmlEnum("electric charge per volume")]
          electricchargepervolume,
        /// <summary>
        /// electricconductance property
        /// </summary>
          [XmlEnum("electric conductance")]
          electricconductance,
        /// <summary>
        /// electricconductivity property
        /// </summary>
          [XmlEnum("electric conductivity")]
          electricconductivity,
        /// <summary>
        /// electriccurrent property
        /// </summary>
          [XmlEnum("electric current")]
          electriccurrent,
        /// <summary>
        /// electriccurrentdensity property
        /// </summary>
          [XmlEnum("electric current density")]
          electriccurrentdensity,
        /// <summary>
        /// electricfieldstrength property
        /// </summary>
          [XmlEnum("electric field strength")]
          electricfieldstrength,
        /// <summary>
        /// electricpotentialdifference property
        /// </summary>
          [XmlEnum("electric potential difference")]
          electricpotentialdifference,
        /// <summary>
        /// electricresistance property
        /// </summary>
          [XmlEnum("electric resistance")]
          electricresistance,
        /// <summary>
        /// electricresistanceperlength property
        /// </summary>
          [XmlEnum("electric resistance per length")]
          electricresistanceperlength,
        /// <summary>
        /// electricalresistivity property
        /// </summary>
          [XmlEnum("electrical resistivity")]
          electricalresistivity,
        /// <summary>
        /// electromagneticmoment property
        /// </summary>
          [XmlEnum("electromagnetic moment")]
          electromagneticmoment,
        /// <summary>
        /// energy property
        /// </summary>
          energy,
        /// <summary>
        /// energylengthperarea property
        /// </summary>
          [XmlEnum("energy length per area")]
          energylengthperarea,
        /// <summary>
        /// energylengthpertimeareatemperature property
        /// </summary>
          [XmlEnum("energy length per time area temperature")]
          energylengthpertimeareatemperature,
        /// <summary>
        /// energyperarea property
        /// </summary>
          [XmlEnum("energy per area")]
          energyperarea,
        /// <summary>
        /// energyperlength property
        /// </summary>
          [XmlEnum("energy per length")]
          energyperlength,
        /// <summary>
        /// energypermass property
        /// </summary>
          [XmlEnum("energy per mass")]
          energypermass,
        /// <summary>
        /// energypermasspertime property
        /// </summary>
          [XmlEnum("energy per mass per time")]
          energypermasspertime,
        /// <summary>
        /// energypervolume property
        /// </summary>
          [XmlEnum("energy per volume")]
          energypervolume,
        /// <summary>
        /// force property
        /// </summary>
          force,
        /// <summary>
        /// forcearea property
        /// </summary>
          [XmlEnum("force area")]
          forcearea,
        /// <summary>
        /// forcelengthperlength property
        /// </summary>
          [XmlEnum("force length per length")]
          forcelengthperlength,
        /// <summary>
        /// forceperforce property
        /// </summary>
          [XmlEnum("force per force")]
          forceperforce,
        /// <summary>
        /// forceperlength property
        /// </summary>
          [XmlEnum("force per length")]
          forceperlength,
        /// <summary>
        /// forcepervolume property
        /// </summary>
          [XmlEnum("force per volume")]
          forcepervolume,
        /// <summary>
        /// frequency property
        /// </summary>
          frequency,
        /// <summary>
        /// frequencyinterval property
        /// </summary>
          [XmlEnum("frequency interval")]
          frequencyinterval,
        /// <summary>
        /// heatcapacity property
        /// </summary>
          [XmlEnum("heat capacity")]
          heatcapacity,
        /// <summary>
        /// heatflowrate property
        /// </summary>
          [XmlEnum("heat flow rate")]
          heatflowrate,
        /// <summary>
        /// heattransfercoefficient property
        /// </summary>
          [XmlEnum("heat transfer coefficient")]
          heattransfercoefficient,
        /// <summary>
        /// illuminance property
        /// </summary>
          illuminance,
        /// <summary>
        /// inductance property
        /// </summary>
          inductance,
        /// <summary>
        /// isothermalcompressibility property
        /// </summary>
          [XmlEnum("isothermal compressibility")]
          isothermalcompressibility,
        /// <summary>
        /// kinematicviscosity property
        /// </summary>
          [XmlEnum("kinematic viscosity")]
          kinematicviscosity,
        /// <summary>
        /// length property
        /// </summary>
          length,
        /// <summary>
        /// lengthperlength property
        /// </summary>
          [XmlEnum("length per length")]
          lengthperlength,
        /// <summary>
        /// lengthpermass property
        /// </summary>
          [XmlEnum("length per mass")]
          lengthpermass,
        /// <summary>
        /// lengthperpressure property
        /// </summary>
          [XmlEnum("length per pressure")]
          lengthperpressure,
        /// <summary>
        /// lengthpertemperature property
        /// </summary>
          [XmlEnum("length per temperature")]
          lengthpertemperature,
        /// <summary>
        /// lengthpertime property
        /// </summary>
          [XmlEnum("length per time")]
          lengthpertime,
        /// <summary>
        /// lengthpervolume property
        /// </summary>
          [XmlEnum("length per volume")]
          lengthpervolume,
        /// <summary>
        /// lightexposure property
        /// </summary>
          [XmlEnum("light exposure")]
          lightexposure,
        /// <summary>
        /// linearacceleration property
        /// </summary>
          [XmlEnum("linear acceleration")]
          linearacceleration,
        /// <summary>
        /// linearthermalexpansion property
        /// </summary>
          [XmlEnum("linear thermal expansion")]
          linearthermalexpansion,
        /// <summary>
        /// logarithmicpowerratio property
        /// </summary>
          [XmlEnum("logarithmic power ratio")]
          logarithmicpowerratio,
        /// <summary>
        /// logarithmicpowerratioperlength property
        /// </summary>
          [XmlEnum("logarithmic power ratio per length")]
          logarithmicpowerratioperlength,
        /// <summary>
        /// luminance property
        /// </summary>
          luminance,
        /// <summary>
        /// luminousefficacy property
        /// </summary>
          [XmlEnum("luminous efficacy")]
          luminousefficacy,
        /// <summary>
        /// luminousflux property
        /// </summary>
          [XmlEnum("luminous flux")]
          luminousflux,
        /// <summary>
        /// luminousintensity property
        /// </summary>
          [XmlEnum("luminous intensity")]
          luminousintensity,
        /// <summary>
        /// magneticdipolemoment property
        /// </summary>
          [XmlEnum("magnetic dipole moment")]
          magneticdipolemoment,
        /// <summary>
        /// magneticfieldstrength property
        /// </summary>
          [XmlEnum("magnetic field strength")]
          magneticfieldstrength,
        /// <summary>
        /// magneticflux property
        /// </summary>
          [XmlEnum("magnetic flux")]
          magneticflux,
        /// <summary>
        /// magneticfluxdensity property
        /// </summary>
          [XmlEnum("magnetic flux density")]
          magneticfluxdensity,
        /// <summary>
        /// magneticfluxdensityperlength property
        /// </summary>
          [XmlEnum("magnetic flux density per length")]
          magneticfluxdensityperlength,
        /// <summary>
        /// magneticpermeability property
        /// </summary>
          [XmlEnum("magnetic permeability")]
          magneticpermeability,
        /// <summary>
        /// magneticvectorpotential property
        /// </summary>
          [XmlEnum("magnetic vector potential")]
          magneticvectorpotential,
        /// <summary>
        /// mass property
        /// </summary>
          mass,
        /// <summary>
        /// masslength property
        /// </summary>
          [XmlEnum("mass length")]
          masslength,
        /// <summary>
        /// massperarea property
        /// </summary>
          [XmlEnum("mass per area")]
          massperarea,
        /// <summary>
        /// massperenergy property
        /// </summary>
          [XmlEnum("mass per energy")]
          massperenergy,
        /// <summary>
        /// massperlength property
        /// </summary>
          [XmlEnum("mass per length")]
          massperlength,
        /// <summary>
        /// masspermass property
        /// </summary>
          [XmlEnum("mass per mass")]
          masspermass,
        /// <summary>
        /// masspertime property
        /// </summary>
          [XmlEnum("mass per time")]
          masspertime,
        /// <summary>
        /// masspertimeperarea property
        /// </summary>
          [XmlEnum("mass per time per area")]
          masspertimeperarea,
        /// <summary>
        /// masspertimeperlength property
        /// </summary>
          [XmlEnum("mass per time per length")]
          masspertimeperlength,
        /// <summary>
        /// masspervolume property
        /// </summary>
          [XmlEnum("mass per volume")]
          masspervolume,
        /// <summary>
        /// masspervolumeperlength property
        /// </summary>
          [XmlEnum("mass per volume per length")]
          masspervolumeperlength,
        /// <summary>
        /// masspervolumeperpressure property
        /// </summary>
          [XmlEnum("mass per volume per pressure")]
          masspervolumeperpressure,
        /// <summary>
        /// masspervolumepertemperature property
        /// </summary>
          [XmlEnum("mass per volume per temperature")]
          masspervolumepertemperature,
        /// <summary>
        /// mobility property
        /// </summary>
          mobility,
        /// <summary>
        /// molarenergy property
        /// </summary>
          [XmlEnum("molar energy")]
          molarenergy,
        /// <summary>
        /// molarheatcapacity property
        /// </summary>
          [XmlEnum("molar heat capacity")]
          molarheatcapacity,
        /// <summary>
        /// molarvolume property
        /// </summary>
          [XmlEnum("molar volume")]
          molarvolume,
        /// <summary>
        /// molecularweight property
        /// </summary>
          [XmlEnum("molecular weight")]
          molecularweight,
        /// <summary>
        /// momentofforce property
        /// </summary>
          [XmlEnum("moment of force")]
          momentofforce,
        /// <summary>
        /// momentofinertia property
        /// </summary>
          [XmlEnum("moment of inertia")]
          momentofinertia,
        /// <summary>
        /// momentum property
        /// </summary>
          momentum,
        /// <summary>
        /// normalizedpower property
        /// </summary>
          [XmlEnum("normalized power")]
          normalizedpower,
        /// <summary>
        /// permeabilitylength property
        /// </summary>
          [XmlEnum("permeability length")]
          permeabilitylength,
        /// <summary>
        /// permeabilityrock property
        /// </summary>
          [XmlEnum("permeability rock")]
          permeabilityrock,
        /// <summary>
        /// permittivity property
        /// </summary>
          permittivity,
        /// <summary>
        /// planeangle property
        /// </summary>
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// potentialdifferenceperpowerdrop property
        /// </summary>
          [XmlEnum("potential difference per power drop")]
          potentialdifferenceperpowerdrop,
        /// <summary>
        /// power property
        /// </summary>
          power,
        /// <summary>
        /// powerperarea property
        /// </summary>
          [XmlEnum("power per area")]
          powerperarea,
        /// <summary>
        /// powerperpower property
        /// </summary>
          [XmlEnum("power per power")]
          powerperpower,
        /// <summary>
        /// powerpervolume property
        /// </summary>
          [XmlEnum("power per volume")]
          powerpervolume,
        /// <summary>
        /// pressure property
        /// </summary>
          pressure,
        /// <summary>
        /// pressureperpressure property
        /// </summary>
          [XmlEnum("pressure per pressure")]
          pressureperpressure,
        /// <summary>
        /// pressurepertime property
        /// </summary>
          [XmlEnum("pressure per time")]
          pressurepertime,
        /// <summary>
        /// pressurepervolume property
        /// </summary>
          [XmlEnum("pressure per volume")]
          pressurepervolume,
        /// <summary>
        /// pressuresquared property
        /// </summary>
          [XmlEnum("pressure squared")]
          pressuresquared,
        /// <summary>
        /// pressuresquaredperforcetimeperarea property
        /// </summary>
          [XmlEnum("pressure squared per force time per area")]
          pressuresquaredperforcetimeperarea,
        /// <summary>
        /// pressuretimepervolume property
        /// </summary>
          [XmlEnum("pressure time per volume")]
          pressuretimepervolume,
        /// <summary>
        /// quantityoflight property
        /// </summary>
          [XmlEnum("quantity of light")]
          quantityoflight,
        /// <summary>
        /// radiance property
        /// </summary>
          radiance,
        /// <summary>
        /// radiantintensity property
        /// </summary>
          [XmlEnum("radiant intensity")]
          radiantintensity,
        /// <summary>
        /// reciprocalarea property
        /// </summary>
          [XmlEnum("reciprocal area")]
          reciprocalarea,
        /// <summary>
        /// reciprocalelectricpotentialdifference property
        /// </summary>
          [XmlEnum("reciprocal electric potential difference")]
          reciprocalelectricpotentialdifference,
        /// <summary>
        /// reciprocalforce property
        /// </summary>
          [XmlEnum("reciprocal force")]
          reciprocalforce,
        /// <summary>
        /// reciprocallength property
        /// </summary>
          [XmlEnum("reciprocal length")]
          reciprocallength,
        /// <summary>
        /// reciprocalmass property
        /// </summary>
          [XmlEnum("reciprocal mass")]
          reciprocalmass,
        /// <summary>
        /// reciprocalmasstime property
        /// </summary>
          [XmlEnum("reciprocal mass time")]
          reciprocalmasstime,
        /// <summary>
        /// reciprocalpressure property
        /// </summary>
          [XmlEnum("reciprocal pressure")]
          reciprocalpressure,
        /// <summary>
        /// reciprocaltime property
        /// </summary>
          [XmlEnum("reciprocal time")]
          reciprocaltime,
        /// <summary>
        /// reciprocalvolume property
        /// </summary>
          [XmlEnum("reciprocal volume")]
          reciprocalvolume,
        /// <summary>
        /// reluctance property
        /// </summary>
          reluctance,
        /// <summary>
        /// secondmomentofarea property
        /// </summary>
          [XmlEnum("second moment of area")]
          secondmomentofarea,
        /// <summary>
        /// signalingeventpertime property
        /// </summary>
          [XmlEnum("signaling event per time")]
          signalingeventpertime,
        /// <summary>
        /// solidangle property
        /// </summary>
          [XmlEnum("solid angle")]
          solidangle,
        /// <summary>
        /// specificheatcapacity property
        /// </summary>
          [XmlEnum("specific heat capacity")]
          specificheatcapacity,
        /// <summary>
        /// temperatureinterval property
        /// </summary>
          [XmlEnum("temperature interval")]
          temperatureinterval,
        /// <summary>
        /// temperatureintervalperlength property
        /// </summary>
          [XmlEnum("temperature interval per length")]
          temperatureintervalperlength,
        /// <summary>
        /// temperatureintervalperpressure property
        /// </summary>
          [XmlEnum("temperature interval per pressure")]
          temperatureintervalperpressure,
        /// <summary>
        /// temperatureintervalpertime property
        /// </summary>
          [XmlEnum("temperature interval per time")]
          temperatureintervalpertime,
        /// <summary>
        /// thermalconductance property
        /// </summary>
          [XmlEnum("thermal conductance")]
          thermalconductance,
        /// <summary>
        /// thermalconductivity property
        /// </summary>
          [XmlEnum("thermal conductivity")]
          thermalconductivity,
        /// <summary>
        /// thermaldiffusivity property
        /// </summary>
          [XmlEnum("thermal diffusivity")]
          thermaldiffusivity,
        /// <summary>
        /// thermalinsulance property
        /// </summary>
          [XmlEnum("thermal insulance")]
          thermalinsulance,
        /// <summary>
        /// thermalresistance property
        /// </summary>
          [XmlEnum("thermal resistance")]
          thermalresistance,
        /// <summary>
        /// thermodynamictemperature property
        /// </summary>
          [XmlEnum("thermodynamic temperature")]
          thermodynamictemperature,
        /// <summary>
        /// thermodynamictemperatureperthermodynamictemperature property
        /// </summary>
          [XmlEnum("thermodynamic temperature per thermodynamic temperature")]
          thermodynamictemperatureperthermodynamictemperature,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// timeperlength property
        /// </summary>
          [XmlEnum("time per length")]
          timeperlength,
        /// <summary>
        /// timepermass property
        /// </summary>
          [XmlEnum("time per mass")]
          timepermass,
        /// <summary>
        /// timepertime property
        /// </summary>
          [XmlEnum("time per time")]
          timepertime,
        /// <summary>
        /// timepervolume property
        /// </summary>
          [XmlEnum("time per volume")]
          timepervolume,
        /// <summary>
        /// verticalcoordinate property
        /// </summary>
          [XmlEnum("vertical coordinate")]
          verticalcoordinate,
        /// <summary>
        /// volume property
        /// </summary>
          volume,
        /// <summary>
        /// volumeflowratepervolumeflowrate property
        /// </summary>
          [XmlEnum("volume flow rate per volume flow rate")]
          volumeflowratepervolumeflowrate,
        /// <summary>
        /// volumeperarea property
        /// </summary>
          [XmlEnum("volume per area")]
          volumeperarea,
        /// <summary>
        /// volumeperlength property
        /// </summary>
          [XmlEnum("volume per length")]
          volumeperlength,
        /// <summary>
        /// volumepermass property
        /// </summary>
          [XmlEnum("volume per mass")]
          volumepermass,
        /// <summary>
        /// volumeperpressure property
        /// </summary>
          [XmlEnum("volume per pressure")]
          volumeperpressure,
        /// <summary>
        /// volumeperrotation property
        /// </summary>
          [XmlEnum("volume per rotation")]
          volumeperrotation,
        /// <summary>
        /// volumepertime property
        /// </summary>
          [XmlEnum("volume per time")]
          volumepertime,
        /// <summary>
        /// volumepertimelength property
        /// </summary>
          [XmlEnum("volume per time length")]
          volumepertimelength,
        /// <summary>
        /// volumepertimeperarea property
        /// </summary>
          [XmlEnum("volume per time per area")]
          volumepertimeperarea,
        /// <summary>
        /// volumepertimeperlength property
        /// </summary>
          [XmlEnum("volume per time per length")]
          volumepertimeperlength,
        /// <summary>
        /// volumepertimeperpressure property
        /// </summary>
          [XmlEnum("volume per time per pressure")]
          volumepertimeperpressure,
        /// <summary>
        /// volumepertimeperpressurelength property
        /// </summary>
          [XmlEnum("volume per time per pressure length")]
          volumepertimeperpressurelength,
        /// <summary>
        /// volumepertimepertime property
        /// </summary>
          [XmlEnum("volume per time per time")]
          volumepertimepertime,
        /// <summary>
        /// volumepertimepervolume property
        /// </summary>
          [XmlEnum("volume per time per volume")]
          volumepertimepervolume,
        /// <summary>
        /// volumepervolume property
        /// </summary>
          [XmlEnum("volume per volume")]
          volumepervolume,
        /// <summary>
        /// volumetricheattransfercoefficient property
        /// </summary>
          [XmlEnum("volumetric heat transfer coefficient")]
          volumetricheattransfercoefficient,
        /// <summary>
        /// volumetricthermalexpansion property
        /// </summary>
          [XmlEnum("volumetric thermal expansion")]
          volumetricthermalexpansion,
        /// <summary>
        /// unitless property
        /// </summary>
          unitless
        }
        /// <summary>
        /// This class represents the LithostratigraphicRank xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LithostratigraphicRank xsd enumeration.")]
        public enum LithostratigraphicRank 
        {
        /// <summary>
        /// group property
        /// </summary>
          group,
        /// <summary>
        /// formation property
        /// </summary>
          formation,
        /// <summary>
        /// member property
        /// </summary>
          member,
        /// <summary>
        /// bed property
        /// </summary>
          bed
        }
        /// <summary>
        /// This class represents the WellboreDatumReference xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the WellboreDatumReference xsd enumeration.")]
        public enum WellboreDatumReference 
        {
        /// <summary>
        /// groundlevel property
        /// </summary>
          [XmlEnum("ground level")]
          groundlevel,
        /// <summary>
        /// kellybushing property
        /// </summary>
          [XmlEnum("kelly bushing")]
          kellybushing,
        /// <summary>
        /// meansealevel property
        /// </summary>
          [XmlEnum("mean sea level")]
          meansealevel,
        /// <summary>
        /// derrickfloor property
        /// </summary>
          [XmlEnum("derrick floor")]
          derrickfloor,
        /// <summary>
        /// casingflange property
        /// </summary>
          [XmlEnum("casing flange")]
          casingflange,
        /// <summary>
        /// crownvalve property
        /// </summary>
          [XmlEnum("crown valve")]
          crownvalve,
        /// <summary>
        /// rotarybushing property
        /// </summary>
          [XmlEnum("rotary bushing")]
          rotarybushing,
        /// <summary>
        /// rotarytable property
        /// </summary>
          [XmlEnum("rotary table")]
          rotarytable,
        /// <summary>
        /// seafloor property
        /// </summary>
          [XmlEnum("sea floor")]
          seafloor,
        /// <summary>
        /// lowestastronomicaltide property
        /// </summary>
          [XmlEnum("lowest astronomical tide")]
          lowestastronomicaltide,
        /// <summary>
        /// meanhigherhighwater property
        /// </summary>
          [XmlEnum("mean higher high water")]
          meanhigherhighwater,
        /// <summary>
        /// meanhighwater property
        /// </summary>
          [XmlEnum("mean high water")]
          meanhighwater,
        /// <summary>
        /// meanlowerlowwater property
        /// </summary>
          [XmlEnum("mean lower low water")]
          meanlowerlowwater,
        /// <summary>
        /// meanlowwater property
        /// </summary>
          [XmlEnum("mean low water")]
          meanlowwater,
        /// <summary>
        /// meantidelevel property
        /// </summary>
          [XmlEnum("mean tide level")]
          meantidelevel,
        /// <summary>
        /// kickoffpoint property
        /// </summary>
          [XmlEnum("kickoff point")]
          kickoffpoint
        }
        /// <summary>
        /// This class represents the QuantityClassKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the QuantityClassKind xsd enumeration.")]
        public enum QuantityClassKind 
        {
        /// <summary>
        /// absorbeddose property
        /// </summary>
          [XmlEnum("absorbed dose")]
          absorbeddose,
        /// <summary>
        /// activityofradioactivity property
        /// </summary>
          [XmlEnum("activity of radioactivity")]
          activityofradioactivity,
        /// <summary>
        /// amountofsubstance property
        /// </summary>
          [XmlEnum("amount of substance")]
          amountofsubstance,
        /// <summary>
        /// amountofsubstanceperamountofsubstance property
        /// </summary>
          [XmlEnum("amount of substance per amount of substance")]
          amountofsubstanceperamountofsubstance,
        /// <summary>
        /// amountofsubstanceperarea property
        /// </summary>
          [XmlEnum("amount of substance per area")]
          amountofsubstanceperarea,
        /// <summary>
        /// amountofsubstancepertime property
        /// </summary>
          [XmlEnum("amount of substance per time")]
          amountofsubstancepertime,
        /// <summary>
        /// amountofsubstancepertimeperarea property
        /// </summary>
          [XmlEnum("amount of substance per time per area")]
          amountofsubstancepertimeperarea,
        /// <summary>
        /// amountofsubstancepervolume property
        /// </summary>
          [XmlEnum("amount of substance per volume")]
          amountofsubstancepervolume,
        /// <summary>
        /// angleperlength property
        /// </summary>
          [XmlEnum("angle per length")]
          angleperlength,
        /// <summary>
        /// anglepervolume property
        /// </summary>
          [XmlEnum("angle per volume")]
          anglepervolume,
        /// <summary>
        /// angularacceleration property
        /// </summary>
          [XmlEnum("angular acceleration")]
          angularacceleration,
        /// <summary>
        /// angularvelocity property
        /// </summary>
          [XmlEnum("angular velocity")]
          angularvelocity,
        /// <summary>
        /// apigammaray property
        /// </summary>
          [XmlEnum("api gamma ray")]
          apigammaray,
        /// <summary>
        /// apigravity property
        /// </summary>
          [XmlEnum("api gravity")]
          apigravity,
        /// <summary>
        /// apineutron property
        /// </summary>
          [XmlEnum("api neutron")]
          apineutron,
        /// <summary>
        /// area property
        /// </summary>
          area,
        /// <summary>
        /// areaperamountofsubstance property
        /// </summary>
          [XmlEnum("area per amount of substance")]
          areaperamountofsubstance,
        /// <summary>
        /// areaperarea property
        /// </summary>
          [XmlEnum("area per area")]
          areaperarea,
        /// <summary>
        /// areapercount property
        /// </summary>
          [XmlEnum("area per count")]
          areapercount,
        /// <summary>
        /// areapermass property
        /// </summary>
          [XmlEnum("area per mass")]
          areapermass,
        /// <summary>
        /// areapertime property
        /// </summary>
          [XmlEnum("area per time")]
          areapertime,
        /// <summary>
        /// areapervolume property
        /// </summary>
          [XmlEnum("area per volume")]
          areapervolume,
        /// <summary>
        /// attenuationperfrequencyinterval property
        /// </summary>
          [XmlEnum("attenuation per frequency interval")]
          attenuationperfrequencyinterval,
        /// <summary>
        /// capacitance property
        /// </summary>
          capacitance,
        /// <summary>
        /// cationexchangecapacity property
        /// </summary>
          [XmlEnum("cation exchange capacity")]
          cationexchangecapacity,
        /// <summary>
        /// datatransferspeed property
        /// </summary>
          [XmlEnum("data transfer speed")]
          datatransferspeed,
        /// <summary>
        /// diffusioncoefficient property
        /// </summary>
          [XmlEnum("diffusion coefficient")]
          diffusioncoefficient,
        /// <summary>
        /// diffusivetimeofflight property
        /// </summary>
          [XmlEnum("diffusive time of flight")]
          diffusivetimeofflight,
        /// <summary>
        /// digitalstorage property
        /// </summary>
          [XmlEnum("digital storage")]
          digitalstorage,
        /// <summary>
        /// dimensionless property
        /// </summary>
          dimensionless,
        /// <summary>
        /// dipolemoment property
        /// </summary>
          [XmlEnum("dipole moment")]
          dipolemoment,
        /// <summary>
        /// doseequivalent property
        /// </summary>
          [XmlEnum("dose equivalent")]
          doseequivalent,
        /// <summary>
        /// dynamicviscosity property
        /// </summary>
          [XmlEnum("dynamic viscosity")]
          dynamicviscosity,
        /// <summary>
        /// electriccharge property
        /// </summary>
          [XmlEnum("electric charge")]
          electriccharge,
        /// <summary>
        /// electricchargeperarea property
        /// </summary>
          [XmlEnum("electric charge per area")]
          electricchargeperarea,
        /// <summary>
        /// electricchargepermass property
        /// </summary>
          [XmlEnum("electric charge per mass")]
          electricchargepermass,
        /// <summary>
        /// electricchargepervolume property
        /// </summary>
          [XmlEnum("electric charge per volume")]
          electricchargepervolume,
        /// <summary>
        /// electricconductance property
        /// </summary>
          [XmlEnum("electric conductance")]
          electricconductance,
        /// <summary>
        /// electricconductivity property
        /// </summary>
          [XmlEnum("electric conductivity")]
          electricconductivity,
        /// <summary>
        /// electriccurrent property
        /// </summary>
          [XmlEnum("electric current")]
          electriccurrent,
        /// <summary>
        /// electriccurrentdensity property
        /// </summary>
          [XmlEnum("electric current density")]
          electriccurrentdensity,
        /// <summary>
        /// electricfieldstrength property
        /// </summary>
          [XmlEnum("electric field strength")]
          electricfieldstrength,
        /// <summary>
        /// electricpotentialdifference property
        /// </summary>
          [XmlEnum("electric potential difference")]
          electricpotentialdifference,
        /// <summary>
        /// electricresistance property
        /// </summary>
          [XmlEnum("electric resistance")]
          electricresistance,
        /// <summary>
        /// electricresistanceperlength property
        /// </summary>
          [XmlEnum("electric resistance per length")]
          electricresistanceperlength,
        /// <summary>
        /// electricalresistivity property
        /// </summary>
          [XmlEnum("electrical resistivity")]
          electricalresistivity,
        /// <summary>
        /// electromagneticmoment property
        /// </summary>
          [XmlEnum("electromagnetic moment")]
          electromagneticmoment,
        /// <summary>
        /// energy property
        /// </summary>
          energy,
        /// <summary>
        /// energylengthperarea property
        /// </summary>
          [XmlEnum("energy length per area")]
          energylengthperarea,
        /// <summary>
        /// energylengthpertimeareatemperature property
        /// </summary>
          [XmlEnum("energy length per time area temperature")]
          energylengthpertimeareatemperature,
        /// <summary>
        /// energyperarea property
        /// </summary>
          [XmlEnum("energy per area")]
          energyperarea,
        /// <summary>
        /// energyperlength property
        /// </summary>
          [XmlEnum("energy per length")]
          energyperlength,
        /// <summary>
        /// energypermass property
        /// </summary>
          [XmlEnum("energy per mass")]
          energypermass,
        /// <summary>
        /// energypermasspertime property
        /// </summary>
          [XmlEnum("energy per mass per time")]
          energypermasspertime,
        /// <summary>
        /// energypervolume property
        /// </summary>
          [XmlEnum("energy per volume")]
          energypervolume,
        /// <summary>
        /// force property
        /// </summary>
          force,
        /// <summary>
        /// forcearea property
        /// </summary>
          [XmlEnum("force area")]
          forcearea,
        /// <summary>
        /// forcelengthperlength property
        /// </summary>
          [XmlEnum("force length per length")]
          forcelengthperlength,
        /// <summary>
        /// forceperforce property
        /// </summary>
          [XmlEnum("force per force")]
          forceperforce,
        /// <summary>
        /// forceperlength property
        /// </summary>
          [XmlEnum("force per length")]
          forceperlength,
        /// <summary>
        /// forcepervolume property
        /// </summary>
          [XmlEnum("force per volume")]
          forcepervolume,
        /// <summary>
        /// frequency property
        /// </summary>
          frequency,
        /// <summary>
        /// frequencyinterval property
        /// </summary>
          [XmlEnum("frequency interval")]
          frequencyinterval,
        /// <summary>
        /// heatcapacity property
        /// </summary>
          [XmlEnum("heat capacity")]
          heatcapacity,
        /// <summary>
        /// heatflowrate property
        /// </summary>
          [XmlEnum("heat flow rate")]
          heatflowrate,
        /// <summary>
        /// heattransfercoefficient property
        /// </summary>
          [XmlEnum("heat transfer coefficient")]
          heattransfercoefficient,
        /// <summary>
        /// illuminance property
        /// </summary>
          illuminance,
        /// <summary>
        /// inductance property
        /// </summary>
          inductance,
        /// <summary>
        /// isothermalcompressibility property
        /// </summary>
          [XmlEnum("isothermal compressibility")]
          isothermalcompressibility,
        /// <summary>
        /// kinematicviscosity property
        /// </summary>
          [XmlEnum("kinematic viscosity")]
          kinematicviscosity,
        /// <summary>
        /// length property
        /// </summary>
          length,
        /// <summary>
        /// lengthperlength property
        /// </summary>
          [XmlEnum("length per length")]
          lengthperlength,
        /// <summary>
        /// lengthpermass property
        /// </summary>
          [XmlEnum("length per mass")]
          lengthpermass,
        /// <summary>
        /// lengthperpressure property
        /// </summary>
          [XmlEnum("length per pressure")]
          lengthperpressure,
        /// <summary>
        /// lengthpertemperature property
        /// </summary>
          [XmlEnum("length per temperature")]
          lengthpertemperature,
        /// <summary>
        /// lengthpertime property
        /// </summary>
          [XmlEnum("length per time")]
          lengthpertime,
        /// <summary>
        /// lengthpervolume property
        /// </summary>
          [XmlEnum("length per volume")]
          lengthpervolume,
        /// <summary>
        /// lightexposure property
        /// </summary>
          [XmlEnum("light exposure")]
          lightexposure,
        /// <summary>
        /// linearacceleration property
        /// </summary>
          [XmlEnum("linear acceleration")]
          linearacceleration,
        /// <summary>
        /// linearthermalexpansion property
        /// </summary>
          [XmlEnum("linear thermal expansion")]
          linearthermalexpansion,
        /// <summary>
        /// logarithmicpowerratio property
        /// </summary>
          [XmlEnum("logarithmic power ratio")]
          logarithmicpowerratio,
        /// <summary>
        /// logarithmicpowerratioperlength property
        /// </summary>
          [XmlEnum("logarithmic power ratio per length")]
          logarithmicpowerratioperlength,
        /// <summary>
        /// luminance property
        /// </summary>
          luminance,
        /// <summary>
        /// luminousefficacy property
        /// </summary>
          [XmlEnum("luminous efficacy")]
          luminousefficacy,
        /// <summary>
        /// luminousflux property
        /// </summary>
          [XmlEnum("luminous flux")]
          luminousflux,
        /// <summary>
        /// luminousintensity property
        /// </summary>
          [XmlEnum("luminous intensity")]
          luminousintensity,
        /// <summary>
        /// magneticdipolemoment property
        /// </summary>
          [XmlEnum("magnetic dipole moment")]
          magneticdipolemoment,
        /// <summary>
        /// magneticfieldstrength property
        /// </summary>
          [XmlEnum("magnetic field strength")]
          magneticfieldstrength,
        /// <summary>
        /// magneticflux property
        /// </summary>
          [XmlEnum("magnetic flux")]
          magneticflux,
        /// <summary>
        /// magneticfluxdensity property
        /// </summary>
          [XmlEnum("magnetic flux density")]
          magneticfluxdensity,
        /// <summary>
        /// magneticfluxdensityperlength property
        /// </summary>
          [XmlEnum("magnetic flux density per length")]
          magneticfluxdensityperlength,
        /// <summary>
        /// magneticpermeability property
        /// </summary>
          [XmlEnum("magnetic permeability")]
          magneticpermeability,
        /// <summary>
        /// magneticvectorpotential property
        /// </summary>
          [XmlEnum("magnetic vector potential")]
          magneticvectorpotential,
        /// <summary>
        /// mass property
        /// </summary>
          mass,
        /// <summary>
        /// masslength property
        /// </summary>
          [XmlEnum("mass length")]
          masslength,
        /// <summary>
        /// massperarea property
        /// </summary>
          [XmlEnum("mass per area")]
          massperarea,
        /// <summary>
        /// massperenergy property
        /// </summary>
          [XmlEnum("mass per energy")]
          massperenergy,
        /// <summary>
        /// massperlength property
        /// </summary>
          [XmlEnum("mass per length")]
          massperlength,
        /// <summary>
        /// masspermass property
        /// </summary>
          [XmlEnum("mass per mass")]
          masspermass,
        /// <summary>
        /// masspertime property
        /// </summary>
          [XmlEnum("mass per time")]
          masspertime,
        /// <summary>
        /// masspertimeperarea property
        /// </summary>
          [XmlEnum("mass per time per area")]
          masspertimeperarea,
        /// <summary>
        /// masspertimeperlength property
        /// </summary>
          [XmlEnum("mass per time per length")]
          masspertimeperlength,
        /// <summary>
        /// masspervolume property
        /// </summary>
          [XmlEnum("mass per volume")]
          masspervolume,
        /// <summary>
        /// masspervolumeperlength property
        /// </summary>
          [XmlEnum("mass per volume per length")]
          masspervolumeperlength,
        /// <summary>
        /// masspervolumeperpressure property
        /// </summary>
          [XmlEnum("mass per volume per pressure")]
          masspervolumeperpressure,
        /// <summary>
        /// masspervolumepertemperature property
        /// </summary>
          [XmlEnum("mass per volume per temperature")]
          masspervolumepertemperature,
        /// <summary>
        /// mobility property
        /// </summary>
          mobility,
        /// <summary>
        /// molarenergy property
        /// </summary>
          [XmlEnum("molar energy")]
          molarenergy,
        /// <summary>
        /// molarheatcapacity property
        /// </summary>
          [XmlEnum("molar heat capacity")]
          molarheatcapacity,
        /// <summary>
        /// molarvolume property
        /// </summary>
          [XmlEnum("molar volume")]
          molarvolume,
        /// <summary>
        /// molecularweight property
        /// </summary>
          [XmlEnum("molecular weight")]
          molecularweight,
        /// <summary>
        /// momentofforce property
        /// </summary>
          [XmlEnum("moment of force")]
          momentofforce,
        /// <summary>
        /// momentofinertia property
        /// </summary>
          [XmlEnum("moment of inertia")]
          momentofinertia,
        /// <summary>
        /// momentum property
        /// </summary>
          momentum,
        /// <summary>
        /// normalizedpower property
        /// </summary>
          [XmlEnum("normalized power")]
          normalizedpower,
        /// <summary>
        /// permeabilitylength property
        /// </summary>
          [XmlEnum("permeability length")]
          permeabilitylength,
        /// <summary>
        /// permeabilityrock property
        /// </summary>
          [XmlEnum("permeability rock")]
          permeabilityrock,
        /// <summary>
        /// permittivity property
        /// </summary>
          permittivity,
        /// <summary>
        /// planeangle property
        /// </summary>
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// potentialdifferenceperpowerdrop property
        /// </summary>
          [XmlEnum("potential difference per power drop")]
          potentialdifferenceperpowerdrop,
        /// <summary>
        /// power property
        /// </summary>
          power,
        /// <summary>
        /// powerperarea property
        /// </summary>
          [XmlEnum("power per area")]
          powerperarea,
        /// <summary>
        /// powerperpower property
        /// </summary>
          [XmlEnum("power per power")]
          powerperpower,
        /// <summary>
        /// powerpervolume property
        /// </summary>
          [XmlEnum("power per volume")]
          powerpervolume,
        /// <summary>
        /// pressure property
        /// </summary>
          pressure,
        /// <summary>
        /// pressureperpressure property
        /// </summary>
          [XmlEnum("pressure per pressure")]
          pressureperpressure,
        /// <summary>
        /// pressurepertime property
        /// </summary>
          [XmlEnum("pressure per time")]
          pressurepertime,
        /// <summary>
        /// pressurepervolume property
        /// </summary>
          [XmlEnum("pressure per volume")]
          pressurepervolume,
        /// <summary>
        /// pressuresquared property
        /// </summary>
          [XmlEnum("pressure squared")]
          pressuresquared,
        /// <summary>
        /// pressuresquaredperforcetimeperarea property
        /// </summary>
          [XmlEnum("pressure squared per force time per area")]
          pressuresquaredperforcetimeperarea,
        /// <summary>
        /// pressuretimepervolume property
        /// </summary>
          [XmlEnum("pressure time per volume")]
          pressuretimepervolume,
        /// <summary>
        /// quantityoflight property
        /// </summary>
          [XmlEnum("quantity of light")]
          quantityoflight,
        /// <summary>
        /// radiance property
        /// </summary>
          radiance,
        /// <summary>
        /// radiantintensity property
        /// </summary>
          [XmlEnum("radiant intensity")]
          radiantintensity,
        /// <summary>
        /// reciprocalarea property
        /// </summary>
          [XmlEnum("reciprocal area")]
          reciprocalarea,
        /// <summary>
        /// reciprocalelectricpotentialdifference property
        /// </summary>
          [XmlEnum("reciprocal electric potential difference")]
          reciprocalelectricpotentialdifference,
        /// <summary>
        /// reciprocalforce property
        /// </summary>
          [XmlEnum("reciprocal force")]
          reciprocalforce,
        /// <summary>
        /// reciprocallength property
        /// </summary>
          [XmlEnum("reciprocal length")]
          reciprocallength,
        /// <summary>
        /// reciprocalmass property
        /// </summary>
          [XmlEnum("reciprocal mass")]
          reciprocalmass,
        /// <summary>
        /// reciprocalmasstime property
        /// </summary>
          [XmlEnum("reciprocal mass time")]
          reciprocalmasstime,
        /// <summary>
        /// reciprocalpressure property
        /// </summary>
          [XmlEnum("reciprocal pressure")]
          reciprocalpressure,
        /// <summary>
        /// reciprocaltime property
        /// </summary>
          [XmlEnum("reciprocal time")]
          reciprocaltime,
        /// <summary>
        /// reciprocalvolume property
        /// </summary>
          [XmlEnum("reciprocal volume")]
          reciprocalvolume,
        /// <summary>
        /// reluctance property
        /// </summary>
          reluctance,
        /// <summary>
        /// secondmomentofarea property
        /// </summary>
          [XmlEnum("second moment of area")]
          secondmomentofarea,
        /// <summary>
        /// signalingeventpertime property
        /// </summary>
          [XmlEnum("signaling event per time")]
          signalingeventpertime,
        /// <summary>
        /// solidangle property
        /// </summary>
          [XmlEnum("solid angle")]
          solidangle,
        /// <summary>
        /// specificheatcapacity property
        /// </summary>
          [XmlEnum("specific heat capacity")]
          specificheatcapacity,
        /// <summary>
        /// temperatureinterval property
        /// </summary>
          [XmlEnum("temperature interval")]
          temperatureinterval,
        /// <summary>
        /// temperatureintervalperlength property
        /// </summary>
          [XmlEnum("temperature interval per length")]
          temperatureintervalperlength,
        /// <summary>
        /// temperatureintervalperpressure property
        /// </summary>
          [XmlEnum("temperature interval per pressure")]
          temperatureintervalperpressure,
        /// <summary>
        /// temperatureintervalpertime property
        /// </summary>
          [XmlEnum("temperature interval per time")]
          temperatureintervalpertime,
        /// <summary>
        /// thermalconductance property
        /// </summary>
          [XmlEnum("thermal conductance")]
          thermalconductance,
        /// <summary>
        /// thermalconductivity property
        /// </summary>
          [XmlEnum("thermal conductivity")]
          thermalconductivity,
        /// <summary>
        /// thermaldiffusivity property
        /// </summary>
          [XmlEnum("thermal diffusivity")]
          thermaldiffusivity,
        /// <summary>
        /// thermalinsulance property
        /// </summary>
          [XmlEnum("thermal insulance")]
          thermalinsulance,
        /// <summary>
        /// thermalresistance property
        /// </summary>
          [XmlEnum("thermal resistance")]
          thermalresistance,
        /// <summary>
        /// thermodynamictemperature property
        /// </summary>
          [XmlEnum("thermodynamic temperature")]
          thermodynamictemperature,
        /// <summary>
        /// thermodynamictemperatureperthermodynamictemperature property
        /// </summary>
          [XmlEnum("thermodynamic temperature per thermodynamic temperature")]
          thermodynamictemperatureperthermodynamictemperature,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// timeperlength property
        /// </summary>
          [XmlEnum("time per length")]
          timeperlength,
        /// <summary>
        /// timepermass property
        /// </summary>
          [XmlEnum("time per mass")]
          timepermass,
        /// <summary>
        /// timepertime property
        /// </summary>
          [XmlEnum("time per time")]
          timepertime,
        /// <summary>
        /// timepervolume property
        /// </summary>
          [XmlEnum("time per volume")]
          timepervolume,
        /// <summary>
        /// verticalcoordinate property
        /// </summary>
          [XmlEnum("vertical coordinate")]
          verticalcoordinate,
        /// <summary>
        /// volume property
        /// </summary>
          volume,
        /// <summary>
        /// volumeflowratepervolumeflowrate property
        /// </summary>
          [XmlEnum("volume flow rate per volume flow rate")]
          volumeflowratepervolumeflowrate,
        /// <summary>
        /// volumeperarea property
        /// </summary>
          [XmlEnum("volume per area")]
          volumeperarea,
        /// <summary>
        /// volumeperlength property
        /// </summary>
          [XmlEnum("volume per length")]
          volumeperlength,
        /// <summary>
        /// volumepermass property
        /// </summary>
          [XmlEnum("volume per mass")]
          volumepermass,
        /// <summary>
        /// volumeperpressure property
        /// </summary>
          [XmlEnum("volume per pressure")]
          volumeperpressure,
        /// <summary>
        /// volumeperrotation property
        /// </summary>
          [XmlEnum("volume per rotation")]
          volumeperrotation,
        /// <summary>
        /// volumepertime property
        /// </summary>
          [XmlEnum("volume per time")]
          volumepertime,
        /// <summary>
        /// volumepertimelength property
        /// </summary>
          [XmlEnum("volume per time length")]
          volumepertimelength,
        /// <summary>
        /// volumepertimeperarea property
        /// </summary>
          [XmlEnum("volume per time per area")]
          volumepertimeperarea,
        /// <summary>
        /// volumepertimeperlength property
        /// </summary>
          [XmlEnum("volume per time per length")]
          volumepertimeperlength,
        /// <summary>
        /// volumepertimeperpressure property
        /// </summary>
          [XmlEnum("volume per time per pressure")]
          volumepertimeperpressure,
        /// <summary>
        /// volumepertimeperpressurelength property
        /// </summary>
          [XmlEnum("volume per time per pressure length")]
          volumepertimeperpressurelength,
        /// <summary>
        /// volumepertimepertime property
        /// </summary>
          [XmlEnum("volume per time per time")]
          volumepertimepertime,
        /// <summary>
        /// volumepertimepervolume property
        /// </summary>
          [XmlEnum("volume per time per volume")]
          volumepertimepervolume,
        /// <summary>
        /// volumepervolume property
        /// </summary>
          [XmlEnum("volume per volume")]
          volumepervolume,
        /// <summary>
        /// volumetricheattransfercoefficient property
        /// </summary>
          [XmlEnum("volumetric heat transfer coefficient")]
          volumetricheattransfercoefficient,
        /// <summary>
        /// volumetricthermalexpansion property
        /// </summary>
          [XmlEnum("volumetric thermal expansion")]
          volumetricthermalexpansion,
        /// <summary>
        /// unitless property
        /// </summary>
          unitless,
        /// <summary>
        /// notameasure property
        /// </summary>
          [XmlEnum("not a measure")]
          notameasure
        }
        /// <summary>
        /// This class represents the ReferenceCondition xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReferenceCondition xsd enumeration.")]
        public enum ReferenceCondition 
        {
        /// <summary>
        /// Item0degC1atm property
        /// </summary>
          [XmlEnum("0 degC 1 atm")]
          Item0degC1atm,
        /// <summary>
        /// Item0degC1bar property
        /// </summary>
          [XmlEnum("0 degC 1 bar")]
          Item0degC1bar,
        /// <summary>
        /// Item15degC1atm property
        /// </summary>
          [XmlEnum("15 degC 1 atm")]
          Item15degC1atm,
        /// <summary>
        /// Item15degC1bar property
        /// </summary>
          [XmlEnum("15 degC 1 bar")]
          Item15degC1bar,
        /// <summary>
        /// Item20degC1atm property
        /// </summary>
          [XmlEnum("20 degC 1 atm")]
          Item20degC1atm,
        /// <summary>
        /// Item20degC1bar property
        /// </summary>
          [XmlEnum("20 degC 1 bar")]
          Item20degC1bar,
        /// <summary>
        /// Item25degC1bar property
        /// </summary>
          [XmlEnum("25 degC 1 bar")]
          Item25degC1bar,
        /// <summary>
        /// Item60degF1atm property
        /// </summary>
          [XmlEnum("60 degF 1 atm")]
          Item60degF1atm,
        /// <summary>
        /// Item60degF30inHg property
        /// </summary>
          [XmlEnum("60 degF 30 in Hg")]
          Item60degF30inHg,
        /// <summary>
        /// ambient property
        /// </summary>
          ambient
        }
        /// <summary>
        /// This class represents the LithologyQualifierKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LithologyQualifierKind xsd enumeration.")]
        public enum LithologyQualifierKind 
        {
        /// <summary>
        /// alkalifeldsparrhyolite property
        /// </summary>
          [XmlEnum("alkali feldspar rhyolite")]
          alkalifeldsparrhyolite,
        /// <summary>
        /// alkaliolivinebasalt property
        /// </summary>
          [XmlEnum("alkali olivine basalt")]
          alkaliolivinebasalt,
        /// <summary>
        /// amphibolite property
        /// </summary>
          amphibolite,
        /// <summary>
        /// amphibolitic property
        /// </summary>
          amphibolitic,
        /// <summary>
        /// andesite property
        /// </summary>
          andesite,
        /// <summary>
        /// andesitic property
        /// </summary>
          andesitic,
        /// <summary>
        /// anhydrite property
        /// </summary>
          anhydrite,
        /// <summary>
        /// anhydritic property
        /// </summary>
          anhydritic,
        /// <summary>
        /// ankerite property
        /// </summary>
          ankerite,
        /// <summary>
        /// ankeritic property
        /// </summary>
          ankeritic,
        /// <summary>
        /// anorthositicrock property
        /// </summary>
          [XmlEnum("anorthositic rock")]
          anorthositicrock,
        /// <summary>
        /// anthracite property
        /// </summary>
          anthracite,
        /// <summary>
        /// anthracitic property
        /// </summary>
          anthracitic,
        /// <summary>
        /// aplite property
        /// </summary>
          aplite,
        /// <summary>
        /// aplitic property
        /// </summary>
          aplitic,
        /// <summary>
        /// arenite property
        /// </summary>
          arenite,
        /// <summary>
        /// arenitic property
        /// </summary>
          arenitic,
        /// <summary>
        /// argillaceous property
        /// </summary>
          argillaceous,
        /// <summary>
        /// arkose property
        /// </summary>
          arkose,
        /// <summary>
        /// arkosic property
        /// </summary>
          arkosic,
        /// <summary>
        /// barite property
        /// </summary>
          barite,
        /// <summary>
        /// baritic property
        /// </summary>
          baritic,
        /// <summary>
        /// basalt property
        /// </summary>
          basalt,
        /// <summary>
        /// basaltic property
        /// </summary>
          basaltic,
        /// <summary>
        /// basanite property
        /// </summary>
          basanite,
        /// <summary>
        /// basanitic property
        /// </summary>
          basanitic,
        /// <summary>
        /// bauxite property
        /// </summary>
          bauxite,
        /// <summary>
        /// bauxitic property
        /// </summary>
          bauxitic,
        /// <summary>
        /// belemnites property
        /// </summary>
          belemnites,
        /// <summary>
        /// belemnitic property
        /// </summary>
          belemnitic,
        /// <summary>
        /// bioturbated property
        /// </summary>
          bioturbated,
        /// <summary>
        /// bioturbation property
        /// </summary>
          bioturbation,
        /// <summary>
        /// bitumen property
        /// </summary>
          bitumen,
        /// <summary>
        /// bituminous property
        /// </summary>
          bituminous,
        /// <summary>
        /// bituminouscoal property
        /// </summary>
          [XmlEnum("bituminous coal")]
          bituminouscoal,
        /// <summary>
        /// blueschistmetamorphicrock property
        /// </summary>
          [XmlEnum("blueschist metamorphic rock")]
          blueschistmetamorphicrock,
        /// <summary>
        /// boninite property
        /// </summary>
          boninite,
        /// <summary>
        /// breccia property
        /// </summary>
          breccia,
        /// <summary>
        /// brecciated property
        /// </summary>
          brecciated,
        /// <summary>
        /// bryozoan property
        /// </summary>
          bryozoan,
        /// <summary>
        /// bryozoans property
        /// </summary>
          bryozoans,
        /// <summary>
        /// burrowed property
        /// </summary>
          burrowed,
        /// <summary>
        /// burrows property
        /// </summary>
          burrows,
        /// <summary>
        /// calcareous property
        /// </summary>
          calcareous,
        /// <summary>
        /// calcite property
        /// </summary>
          calcite,
        /// <summary>
        /// calciteconcretion property
        /// </summary>
          [XmlEnum("calcite concretion")]
          calciteconcretion,
        /// <summary>
        /// calcitic property
        /// </summary>
          calcitic,
        /// <summary>
        /// carbonaceous property
        /// </summary>
          carbonaceous,
        /// <summary>
        /// carbonateooze property
        /// </summary>
          [XmlEnum("carbonate ooze")]
          carbonateooze,
        /// <summary>
        /// carbonatite property
        /// </summary>
          carbonatite,
        /// <summary>
        /// carbonatitic property
        /// </summary>
          carbonatitic,
        /// <summary>
        /// chalk property
        /// </summary>
          chalk,
        /// <summary>
        /// chalky property
        /// </summary>
          chalky,
        /// <summary>
        /// chamosite property
        /// </summary>
          chamosite,
        /// <summary>
        /// chamositic property
        /// </summary>
          chamositic,
        /// <summary>
        /// chert property
        /// </summary>
          chert,
        /// <summary>
        /// cherty property
        /// </summary>
          cherty,
        /// <summary>
        /// chlorite property
        /// </summary>
          chlorite,
        /// <summary>
        /// chloritic property
        /// </summary>
          chloritic,
        /// <summary>
        /// clay property
        /// </summary>
          clay,
        /// <summary>
        /// claystone property
        /// </summary>
          claystone,
        /// <summary>
        /// coal property
        /// </summary>
          coal,
        /// <summary>
        /// concretionary property
        /// </summary>
          concretionary,
        /// <summary>
        /// concretions property
        /// </summary>
          concretions,
        /// <summary>
        /// conglomerate property
        /// </summary>
          conglomerate,
        /// <summary>
        /// conglomeratic property
        /// </summary>
          conglomeratic,
        /// <summary>
        /// coralfragments property
        /// </summary>
          [XmlEnum("coral fragments")]
          coralfragments,
        /// <summary>
        /// coralline property
        /// </summary>
          coralline,
        /// <summary>
        /// crinoidal property
        /// </summary>
          crinoidal,
        /// <summary>
        /// crinoids property
        /// </summary>
          crinoids,
        /// <summary>
        /// dacite property
        /// </summary>
          dacite,
        /// <summary>
        /// dacitic property
        /// </summary>
          dacitic,
        /// <summary>
        /// diabase property
        /// </summary>
          diabase,
        /// <summary>
        /// diabasic property
        /// </summary>
          diabasic,
        /// <summary>
        /// diamictite property
        /// </summary>
          diamictite,
        /// <summary>
        /// diamictitic property
        /// </summary>
          diamictitic,
        /// <summary>
        /// diatomaceous property
        /// </summary>
          diatomaceous,
        /// <summary>
        /// diatoms property
        /// </summary>
          diatoms,
        /// <summary>
        /// diorite property
        /// </summary>
          diorite,
        /// <summary>
        /// dioritic property
        /// </summary>
          dioritic,
        /// <summary>
        /// dioritoid property
        /// </summary>
          dioritoid,
        /// <summary>
        /// dioritoidic property
        /// </summary>
          dioritoidic,
        /// <summary>
        /// doleriticrock property
        /// </summary>
          [XmlEnum("doleritic rock")]
          doleriticrock,
        /// <summary>
        /// dolomite property
        /// </summary>
          dolomite,
        /// <summary>
        /// dolomiteconcretion property
        /// </summary>
          [XmlEnum("dolomite concretion")]
          dolomiteconcretion,
        /// <summary>
        /// dolomitestringer property
        /// </summary>
          [XmlEnum("dolomite stringer")]
          dolomitestringer,
        /// <summary>
        /// dolomitic property
        /// </summary>
          dolomitic,
        /// <summary>
        /// eclogite property
        /// </summary>
          eclogite,
        /// <summary>
        /// eclogitic property
        /// </summary>
          eclogitic,
        /// <summary>
        /// exoticalkalinerock property
        /// </summary>
          [XmlEnum("exotic alkaline rock")]
          exoticalkalinerock,
        /// <summary>
        /// feldspar property
        /// </summary>
          feldspar,
        /// <summary>
        /// feldsparic property
        /// </summary>
          feldsparic,
        /// <summary>
        /// feldspathic property
        /// </summary>
          feldspathic,
        /// <summary>
        /// feldspathicarenite property
        /// </summary>
          [XmlEnum("feldspathic arenite")]
          feldspathicarenite,
        /// <summary>
        /// ferruginous property
        /// </summary>
          ferruginous,
        /// <summary>
        /// finegrainedigneousrock property
        /// </summary>
          [XmlEnum("fine grained igneous rock")]
          finegrainedigneousrock,
        /// <summary>
        /// foiddioritoid property
        /// </summary>
          [XmlEnum("foid dioritoid")]
          foiddioritoid,
        /// <summary>
        /// foidgabbroid property
        /// </summary>
          [XmlEnum("foid gabbroid")]
          foidgabbroid,
        /// <summary>
        /// foidsyenitoid property
        /// </summary>
          [XmlEnum("foid syenitoid")]
          foidsyenitoid,
        /// <summary>
        /// foidite property
        /// </summary>
          foidite,
        /// <summary>
        /// foiditic property
        /// </summary>
          foiditic,
        /// <summary>
        /// foiditoid property
        /// </summary>
          foiditoid,
        /// <summary>
        /// foidolite property
        /// </summary>
          foidolite,
        /// <summary>
        /// foidolitic property
        /// </summary>
          foidolitic,
        /// <summary>
        /// foliatedmetamorphicrock property
        /// </summary>
          [XmlEnum("foliated metamorphic rock")]
          foliatedmetamorphicrock,
        /// <summary>
        /// foraminifera property
        /// </summary>
          foraminifera,
        /// <summary>
        /// foraminiferous property
        /// </summary>
          foraminiferous,
        /// <summary>
        /// forams property
        /// </summary>
          forams,
        /// <summary>
        /// fossilfragments property
        /// </summary>
          [XmlEnum("fossil fragments")]
          fossilfragments,
        /// <summary>
        /// fossiliferous property
        /// </summary>
          fossiliferous,
        /// <summary>
        /// fossilsundifferentiated property
        /// </summary>
          [XmlEnum("fossils undifferentiated")]
          fossilsundifferentiated,
        /// <summary>
        /// fragmentaligneousrock property
        /// </summary>
          [XmlEnum("fragmental igneous rock")]
          fragmentaligneousrock,
        /// <summary>
        /// gabbro property
        /// </summary>
          gabbro,
        /// <summary>
        /// gabbroic property
        /// </summary>
          gabbroic,
        /// <summary>
        /// gabbroicrock property
        /// </summary>
          [XmlEnum("gabbroic rock")]
          gabbroicrock,
        /// <summary>
        /// gabbroid property
        /// </summary>
          gabbroid,
        /// <summary>
        /// gabbroidic property
        /// </summary>
          gabbroidic,
        /// <summary>
        /// gilsonite property
        /// </summary>
          gilsonite,
        /// <summary>
        /// gilsonitic property
        /// </summary>
          gilsonitic,
        /// <summary>
        /// glauconite property
        /// </summary>
          glauconite,
        /// <summary>
        /// glauconitic property
        /// </summary>
          glauconitic,
        /// <summary>
        /// gneiss property
        /// </summary>
          gneiss,
        /// <summary>
        /// gneissic property
        /// </summary>
          gneissic,
        /// <summary>
        /// granite property
        /// </summary>
          granite,
        /// <summary>
        /// granitic property
        /// </summary>
          granitic,
        /// <summary>
        /// granodiorite property
        /// </summary>
          granodiorite,
        /// <summary>
        /// granodioritic property
        /// </summary>
          granodioritic,
        /// <summary>
        /// granofels property
        /// </summary>
          granofels,
        /// <summary>
        /// granulite property
        /// </summary>
          granulite,
        /// <summary>
        /// granulitic property
        /// </summary>
          granulitic,
        /// <summary>
        /// gravel property
        /// </summary>
          gravel,
        /// <summary>
        /// gravelly property
        /// </summary>
          gravelly,
        /// <summary>
        /// greenstone property
        /// </summary>
          greenstone,
        /// <summary>
        /// gumbo property
        /// </summary>
          gumbo,
        /// <summary>
        /// gypsiferous property
        /// </summary>
          gypsiferous,
        /// <summary>
        /// gypsum property
        /// </summary>
          gypsum,
        /// <summary>
        /// halite property
        /// </summary>
          halite,
        /// <summary>
        /// halitic property
        /// </summary>
          halitic,
        /// <summary>
        /// hornfels property
        /// </summary>
          hornfels,
        /// <summary>
        /// hornfelsic property
        /// </summary>
          hornfelsic,
        /// <summary>
        /// igneous property
        /// </summary>
          igneous,
        /// <summary>
        /// igneousrock property
        /// </summary>
          [XmlEnum("igneous rock")]
          igneousrock,
        /// <summary>
        /// illite property
        /// </summary>
          illite,
        /// <summary>
        /// illitic property
        /// </summary>
          illitic,
        /// <summary>
        /// impactgeneratedmaterial property
        /// </summary>
          [XmlEnum("impact generated material")]
          impactgeneratedmaterial,
        /// <summary>
        /// impuredolomite property
        /// </summary>
          [XmlEnum("impure dolomite")]
          impuredolomite,
        /// <summary>
        /// impurelimestone property
        /// </summary>
          [XmlEnum("impure limestone")]
          impurelimestone,
        /// <summary>
        /// intrusiverockplutonic property
        /// </summary>
          [XmlEnum("intrusive rock (plutonic)")]
          intrusiverockplutonic,
        /// <summary>
        /// ironrichsedimentaryrock property
        /// </summary>
          [XmlEnum("iron rich sedimentary rock")]
          ironrichsedimentaryrock,
        /// <summary>
        /// kalsiliticandmeliliticrocks property
        /// </summary>
          [XmlEnum("kalsilitic and melilitic rocks")]
          kalsiliticandmeliliticrocks,
        /// <summary>
        /// kaolinite property
        /// </summary>
          kaolinite,
        /// <summary>
        /// kaolinitic property
        /// </summary>
          kaolinitic,
        /// <summary>
        /// komatiiticrock property
        /// </summary>
          [XmlEnum("komatiitic rock")]
          komatiiticrock,
        /// <summary>
        /// latiticrock property
        /// </summary>
          [XmlEnum("latitic rock")]
          latiticrock,
        /// <summary>
        /// lignite property
        /// </summary>
          lignite,
        /// <summary>
        /// lignitic property
        /// </summary>
          lignitic,
        /// <summary>
        /// limeboundstone property
        /// </summary>
          [XmlEnum("lime boundstone")]
          limeboundstone,
        /// <summary>
        /// limeframestone property
        /// </summary>
          [XmlEnum("lime framestone")]
          limeframestone,
        /// <summary>
        /// limegrainstone property
        /// </summary>
          [XmlEnum("lime grainstone")]
          limegrainstone,
        /// <summary>
        /// limemudstone property
        /// </summary>
          [XmlEnum("lime mudstone")]
          limemudstone,
        /// <summary>
        /// limepackstone property
        /// </summary>
          [XmlEnum("lime packstone")]
          limepackstone,
        /// <summary>
        /// limewackestone property
        /// </summary>
          [XmlEnum("lime wackestone")]
          limewackestone,
        /// <summary>
        /// limestone property
        /// </summary>
          limestone,
        /// <summary>
        /// limestonestringer property
        /// </summary>
          [XmlEnum("limestone stringer")]
          limestonestringer,
        /// <summary>
        /// lithic property
        /// </summary>
          lithic,
        /// <summary>
        /// lithicfragments property
        /// </summary>
          [XmlEnum("lithic fragments")]
          lithicfragments,
        /// <summary>
        /// marble property
        /// </summary>
          marble,
        /// <summary>
        /// marcasite property
        /// </summary>
          marcasite,
        /// <summary>
        /// marcasitic property
        /// </summary>
          marcasitic,
        /// <summary>
        /// marl property
        /// </summary>
          marl,
        /// <summary>
        /// marly property
        /// </summary>
          marly,
        /// <summary>
        /// metamorphicrock property
        /// </summary>
          [XmlEnum("metamorphic rock")]
          metamorphicrock,
        /// <summary>
        /// mica property
        /// </summary>
          mica,
        /// <summary>
        /// micaschist property
        /// </summary>
          [XmlEnum("mica schist")]
          micaschist,
        /// <summary>
        /// micaceous property
        /// </summary>
          micaceous,
        /// <summary>
        /// microfossiliferous property
        /// </summary>
          microfossiliferous,
        /// <summary>
        /// microfossils property
        /// </summary>
          microfossils,
        /// <summary>
        /// migmatite property
        /// </summary>
          migmatite,
        /// <summary>
        /// migmatitic property
        /// </summary>
          migmatitic,
        /// <summary>
        /// monzogabbro property
        /// </summary>
          monzogabbro,
        /// <summary>
        /// monzogabbroic property
        /// </summary>
          monzogabbroic,
        /// <summary>
        /// mud property
        /// </summary>
          mud,
        /// <summary>
        /// muddy property
        /// </summary>
          muddy,
        /// <summary>
        /// mudstone property
        /// </summary>
          mudstone,
        /// <summary>
        /// myloniticrock property
        /// </summary>
          [XmlEnum("mylonitic rock")]
          myloniticrock,
        /// <summary>
        /// nosample property
        /// </summary>
          [XmlEnum("no sample")]
          nosample,
        /// <summary>
        /// oncolite property
        /// </summary>
          oncolite,
        /// <summary>
        /// oncoliths property
        /// </summary>
          oncoliths,
        /// <summary>
        /// oncolitic property
        /// </summary>
          oncolitic,
        /// <summary>
        /// ooids property
        /// </summary>
          ooids,
        /// <summary>
        /// ooliths property
        /// </summary>
          ooliths,
        /// <summary>
        /// oolitic property
        /// </summary>
          oolitic,
        /// <summary>
        /// ooze property
        /// </summary>
          ooze,
        /// <summary>
        /// ophiolite property
        /// </summary>
          ophiolite,
        /// <summary>
        /// ophiolitic property
        /// </summary>
          ophiolitic,
        /// <summary>
        /// organicbearingmudstone property
        /// </summary>
          [XmlEnum("organic bearing mudstone")]
          organicbearingmudstone,
        /// <summary>
        /// ostracodal property
        /// </summary>
          ostracodal,
        /// <summary>
        /// ostracods property
        /// </summary>
          ostracods,
        /// <summary>
        /// peat property
        /// </summary>
          peat,
        /// <summary>
        /// peaty property
        /// </summary>
          peaty,
        /// <summary>
        /// pebble property
        /// </summary>
          pebble,
        /// <summary>
        /// pebbly property
        /// </summary>
          pebbly,
        /// <summary>
        /// pegmatite property
        /// </summary>
          pegmatite,
        /// <summary>
        /// pegmatitic property
        /// </summary>
          pegmatitic,
        /// <summary>
        /// pelletal property
        /// </summary>
          pelletal,
        /// <summary>
        /// pellets property
        /// </summary>
          pellets,
        /// <summary>
        /// peloidal property
        /// </summary>
          peloidal,
        /// <summary>
        /// peloids property
        /// </summary>
          peloids,
        /// <summary>
        /// peridotite property
        /// </summary>
          peridotite,
        /// <summary>
        /// peridotitic property
        /// </summary>
          peridotitic,
        /// <summary>
        /// phaneriticigneousrock property
        /// </summary>
          [XmlEnum("phaneritic igneous rock")]
          phaneriticigneousrock,
        /// <summary>
        /// phonolite property
        /// </summary>
          phonolite,
        /// <summary>
        /// phonolitic property
        /// </summary>
          phonolitic,
        /// <summary>
        /// phonolitoid property
        /// </summary>
          phonolitoid,
        /// <summary>
        /// phosphate property
        /// </summary>
          phosphate,
        /// <summary>
        /// phosphaterock property
        /// </summary>
          [XmlEnum("phosphate rock")]
          phosphaterock,
        /// <summary>
        /// phosphatic property
        /// </summary>
          phosphatic,
        /// <summary>
        /// phyllite property
        /// </summary>
          phyllite,
        /// <summary>
        /// phyllitic property
        /// </summary>
          phyllitic,
        /// <summary>
        /// pisolite property
        /// </summary>
          pisolite,
        /// <summary>
        /// pisoliths property
        /// </summary>
          pisoliths,
        /// <summary>
        /// pisolitic property
        /// </summary>
          pisolitic,
        /// <summary>
        /// plantremains property
        /// </summary>
          [XmlEnum("plant remains")]
          plantremains,
        /// <summary>
        /// porphyritic property
        /// </summary>
          porphyritic,
        /// <summary>
        /// porphyry property
        /// </summary>
          porphyry,
        /// <summary>
        /// potassiumandmagnesiumsalts property
        /// </summary>
          [XmlEnum("potassium and magnesium salts")]
          potassiumandmagnesiumsalts,
        /// <summary>
        /// pyrite property
        /// </summary>
          pyrite,
        /// <summary>
        /// pyritic property
        /// </summary>
          pyritic,
        /// <summary>
        /// pyroclasticbreccia property
        /// </summary>
          [XmlEnum("pyroclastic breccia")]
          pyroclasticbreccia,
        /// <summary>
        /// pyroclasticrock property
        /// </summary>
          [XmlEnum("pyroclastic rock")]
          pyroclasticrock,
        /// <summary>
        /// pyroxenite property
        /// </summary>
          pyroxenite,
        /// <summary>
        /// pyroxenitic property
        /// </summary>
          pyroxenitic,
        /// <summary>
        /// quartiferous property
        /// </summary>
          quartiferous,
        /// <summary>
        /// quartz property
        /// </summary>
          quartz,
        /// <summary>
        /// quartzarenite property
        /// </summary>
          [XmlEnum("quartz arenite")]
          quartzarenite,
        /// <summary>
        /// quartzite property
        /// </summary>
          quartzite,
        /// <summary>
        /// quartzitic property
        /// </summary>
          quartzitic,
        /// <summary>
        /// radiolaria property
        /// </summary>
          radiolaria,
        /// <summary>
        /// radiolarian property
        /// </summary>
          radiolarian,
        /// <summary>
        /// rhyolite property
        /// </summary>
          rhyolite,
        /// <summary>
        /// rhyolitic property
        /// </summary>
          rhyolitic,
        /// <summary>
        /// rocksalt property
        /// </summary>
          [XmlEnum("rock salt")]
          rocksalt,
        /// <summary>
        /// rootlets property
        /// </summary>
          rootlets,
        /// <summary>
        /// salty property
        /// </summary>
          salty,
        /// <summary>
        /// sand property
        /// </summary>
          sand,
        /// <summary>
        /// sandstone property
        /// </summary>
          sandstone,
        /// <summary>
        /// sandy property
        /// </summary>
          sandy,
        /// <summary>
        /// sapropel property
        /// </summary>
          sapropel,
        /// <summary>
        /// sapropelic property
        /// </summary>
          sapropelic,
        /// <summary>
        /// schist property
        /// </summary>
          schist,
        /// <summary>
        /// schisty property
        /// </summary>
          schisty,
        /// <summary>
        /// sepentinitic property
        /// </summary>
          sepentinitic,
        /// <summary>
        /// serpentinite property
        /// </summary>
          serpentinite,
        /// <summary>
        /// shale property
        /// </summary>
          shale,
        /// <summary>
        /// shaly property
        /// </summary>
          shaly,
        /// <summary>
        /// shellfragments property
        /// </summary>
          [XmlEnum("shell fragments")]
          shellfragments,
        /// <summary>
        /// shelly property
        /// </summary>
          shelly,
        /// <summary>
        /// siderite property
        /// </summary>
          siderite,
        /// <summary>
        /// sideriteconcretion property
        /// </summary>
          [XmlEnum("siderite concretion")]
          sideriteconcretion,
        /// <summary>
        /// sideritic property
        /// </summary>
          sideritic,
        /// <summary>
        /// siliceousooze property
        /// </summary>
          [XmlEnum("siliceous ooze")]
          siliceousooze,
        /// <summary>
        /// silt property
        /// </summary>
          silt,
        /// <summary>
        /// siltstone property
        /// </summary>
          siltstone,
        /// <summary>
        /// silty property
        /// </summary>
          silty,
        /// <summary>
        /// skarn property
        /// </summary>
          skarn,
        /// <summary>
        /// skarny property
        /// </summary>
          skarny,
        /// <summary>
        /// slate property
        /// </summary>
          slate,
        /// <summary>
        /// slaty property
        /// </summary>
          slaty,
        /// <summary>
        /// smectite property
        /// </summary>
          smectite,
        /// <summary>
        /// smectitic property
        /// </summary>
          smectitic,
        /// <summary>
        /// spicular property
        /// </summary>
          spicular,
        /// <summary>
        /// spicules property
        /// </summary>
          spicules,
        /// <summary>
        /// spilite property
        /// </summary>
          spilite,
        /// <summary>
        /// spilitic property
        /// </summary>
          spilitic,
        /// <summary>
        /// stylolites property
        /// </summary>
          stylolites,
        /// <summary>
        /// stylolitic property
        /// </summary>
          stylolitic,
        /// <summary>
        /// syenite property
        /// </summary>
          syenite,
        /// <summary>
        /// syenitic property
        /// </summary>
          syenitic,
        /// <summary>
        /// syenitoid property
        /// </summary>
          syenitoid,
        /// <summary>
        /// sylvite property
        /// </summary>
          sylvite,
        /// <summary>
        /// sylvitic property
        /// </summary>
          sylvitic,
        /// <summary>
        /// tarry property
        /// </summary>
          tarry,
        /// <summary>
        /// tephrite property
        /// </summary>
          tephrite,
        /// <summary>
        /// tephritic property
        /// </summary>
          tephritic,
        /// <summary>
        /// tephritoid property
        /// </summary>
          tephritoid,
        /// <summary>
        /// tholeiiticbasalt property
        /// </summary>
          [XmlEnum("tholeiitic basalt")]
          tholeiiticbasalt,
        /// <summary>
        /// tonalite property
        /// </summary>
          tonalite,
        /// <summary>
        /// tonalitic property
        /// </summary>
          tonalitic,
        /// <summary>
        /// trachyte property
        /// </summary>
          trachyte,
        /// <summary>
        /// trachytic property
        /// </summary>
          trachytic,
        /// <summary>
        /// trachyticrock property
        /// </summary>
          [XmlEnum("trachytic rock")]
          trachyticrock,
        /// <summary>
        /// trachytoid property
        /// </summary>
          trachytoid,
        /// <summary>
        /// travertine property
        /// </summary>
          travertine,
        /// <summary>
        /// tuff property
        /// </summary>
          tuff,
        /// <summary>
        /// tuffaceous property
        /// </summary>
          tuffaceous,
        /// <summary>
        /// tuffite property
        /// </summary>
          tuffite,
        /// <summary>
        /// tuffitic property
        /// </summary>
          tuffitic,
        /// <summary>
        /// ultrabasic property
        /// </summary>
          ultrabasic,
        /// <summary>
        /// undifferentiated property
        /// </summary>
          undifferentiated,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// wacke property
        /// </summary>
          wacke
        }
        /// <summary>
        /// This class represents the WellStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the WellStatus xsd enumeration.")]
        public enum WellStatus 
        {
        /// <summary>
        /// abandoned property
        /// </summary>
          abandoned,
        /// <summary>
        /// active property
        /// </summary>
          active,
        /// <summary>
        /// activeinjecting property
        /// </summary>
          [XmlEnum("active -- injecting")]
          activeinjecting,
        /// <summary>
        /// activeproducing property
        /// </summary>
          [XmlEnum("active -- producing")]
          activeproducing,
        /// <summary>
        /// completed property
        /// </summary>
          completed,
        /// <summary>
        /// drilling property
        /// </summary>
          drilling,
        /// <summary>
        /// partiallyplugged property
        /// </summary>
          [XmlEnum("partially plugged")]
          partiallyplugged,
        /// <summary>
        /// permitted property
        /// </summary>
          permitted,
        /// <summary>
        /// pluggedandabandoned property
        /// </summary>
          [XmlEnum("plugged and abandoned")]
          pluggedandabandoned,
        /// <summary>
        /// proposed property
        /// </summary>
          proposed,
        /// <summary>
        /// sold property
        /// </summary>
          sold,
        /// <summary>
        /// suspended property
        /// </summary>
          suspended,
        /// <summary>
        /// temporarilyabandoned property
        /// </summary>
          [XmlEnum("temporarily abandoned")]
          temporarilyabandoned,
        /// <summary>
        /// testing property
        /// </summary>
          testing,
        /// <summary>
        /// tight property
        /// </summary>
          tight,
        /// <summary>
        /// workingover property
        /// </summary>
          [XmlEnum("working over")]
          workingover,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the UnitOfMeasure xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the UnitOfMeasure xsd enumeration.")]
        public enum UnitOfMeasure 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// area property
        /// </summary>
          [XmlEnum("%[area]")]
          area,
        /// <summary>
        /// mass property
        /// </summary>
          [XmlEnum("%[mass]")]
          mass,
        /// <summary>
        /// molar property
        /// </summary>
          [XmlEnum("%[molar]")]
          molar,
        /// <summary>
        /// vol property
        /// </summary>
          [XmlEnum("%[vol]")]
          vol,
        /// <summary>
        /// bbldbbld property
        /// </summary>
          [XmlEnum("(bbl/d)/(bbl/d)")]
          bbldbbld,
        /// <summary>
        /// m3dm3d property
        /// </summary>
          [XmlEnum("(m3/d)/(m3/d)")]
          m3dm3d,
        /// <summary>
        /// m3sm3s property
        /// </summary>
          [XmlEnum("(m3/s)/(m3/s)")]
          m3sm3s,
        /// <summary>
        /// Item0001bblft3 property
        /// </summary>
          [XmlEnum("0.001 bbl/ft3")]
          Item0001bblft3,
        /// <summary>
        /// Item0001bblm3 property
        /// </summary>
          [XmlEnum("0.001 bbl/m3")]
          Item0001bblm3,
        /// <summary>
        /// Item0001dft3 property
        /// </summary>
          [XmlEnum("0.001 d/ft3")]
          Item0001dft3,
        /// <summary>
        /// Item0001galUKbbl property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/bbl")]
          Item0001galUKbbl,
        /// <summary>
        /// Item0001galUKgalUK property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/gal[UK]")]
          Item0001galUKgalUK,
        /// <summary>
        /// Item0001galUSbbl property
        /// </summary>
          [XmlEnum("0.001 gal[US]/bbl")]
          Item0001galUSbbl,
        /// <summary>
        /// Item0001galUSft3 property
        /// </summary>
          [XmlEnum("0.001 gal[US]/ft3")]
          Item0001galUSft3,
        /// <summary>
        /// Item0001galUSgalUS property
        /// </summary>
          [XmlEnum("0.001 gal[US]/gal[US]")]
          Item0001galUSgalUS,
        /// <summary>
        /// Item0001hft property
        /// </summary>
          [XmlEnum("0.001 h/ft")]
          Item0001hft,
        /// <summary>
        /// Item0001kPa2cP property
        /// </summary>
          [XmlEnum("0.001 kPa2/cP")]
          Item0001kPa2cP,
        /// <summary>
        /// Item0001lbmbbl property
        /// </summary>
          [XmlEnum("0.001 lbm/bbl")]
          Item0001lbmbbl,
        /// <summary>
        /// Item0001lbmgalUK property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[UK]")]
          Item0001lbmgalUK,
        /// <summary>
        /// Item0001lbmgalUS property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[US]")]
          Item0001lbmgalUS,
        /// <summary>
        /// Item0001psift property
        /// </summary>
          [XmlEnum("0.001 psi/ft")]
          Item0001psift,
        /// <summary>
        /// Item0001ptUKbbl property
        /// </summary>
          [XmlEnum("0.001 pt[UK]/bbl")]
          Item0001ptUKbbl,
        /// <summary>
        /// Item0001seca property
        /// </summary>
          [XmlEnum("0.001 seca")]
          Item0001seca,
        /// <summary>
        /// Item001bblbbl property
        /// </summary>
          [XmlEnum("0.01 bbl/bbl")]
          Item001bblbbl,
        /// <summary>
        /// Item001degaft property
        /// </summary>
          [XmlEnum("0.01 dega/ft")]
          Item001degaft,
        /// <summary>
        /// Item001degFft property
        /// </summary>
          [XmlEnum("0.01 degF/ft")]
          Item001degFft,
        /// <summary>
        /// Item001dm3km property
        /// </summary>
          [XmlEnum("0.01 dm3/km")]
          Item001dm3km,
        /// <summary>
        /// Item001ftft property
        /// </summary>
          [XmlEnum("0.01 ft/ft")]
          Item001ftft,
        /// <summary>
        /// Item001grainft3 property
        /// </summary>
          [XmlEnum("0.01 grain/ft3")]
          Item001grainft3,
        /// <summary>
        /// Item001Lkg property
        /// </summary>
          [XmlEnum("0.01 L/kg")]
          Item001Lkg,
        /// <summary>
        /// Item001Lkm property
        /// </summary>
          [XmlEnum("0.01 L/km")]
          Item001Lkm,
        /// <summary>
        /// Item001lbfft property
        /// </summary>
          [XmlEnum("0.01 lbf/ft")]
          Item001lbfft,
        /// <summary>
        /// Item001lbfft2 property
        /// </summary>
          [XmlEnum("0.01 lbf/ft2")]
          Item001lbfft2,
        /// <summary>
        /// Item001lbmft2 property
        /// </summary>
          [XmlEnum("0.01 lbm/ft2")]
          Item001lbmft2,
        /// <summary>
        /// Item001psift property
        /// </summary>
          [XmlEnum("0.01 psi/ft")]
          Item001psift,
        /// <summary>
        /// Item01ft property
        /// </summary>
          [XmlEnum("0.1 ft")]
          Item01ft,
        /// <summary>
        /// Item01ftUS property
        /// </summary>
          [XmlEnum("0.1 ft[US]")]
          Item01ftUS,
        /// <summary>
        /// Item01galUSbbl property
        /// </summary>
          [XmlEnum("0.1 gal[US]/bbl")]
          Item01galUSbbl,
        /// <summary>
        /// Item01in property
        /// </summary>
          [XmlEnum("0.1 in")]
          Item01in,
        /// <summary>
        /// Item01Lbbl property
        /// </summary>
          [XmlEnum("0.1 L/bbl")]
          Item01Lbbl,
        /// <summary>
        /// Item01lbmbbl property
        /// </summary>
          [XmlEnum("0.1 lbm/bbl")]
          Item01lbmbbl,
        /// <summary>
        /// Item01ptUSbbl property
        /// </summary>
          [XmlEnum("0.1 pt[US]/bbl")]
          Item01ptUSbbl,
        /// <summary>
        /// Item01yd property
        /// </summary>
          [XmlEnum("0.1 yd")]
          Item01yd,
        /// <summary>
        /// Item1kgs property
        /// </summary>
          [XmlEnum("1/(kg.s)")]
          Item1kgs,
        /// <summary>
        /// Item116in property
        /// </summary>
          [XmlEnum("1/16 in")]
          Item116in,
        /// <summary>
        /// Item12ft property
        /// </summary>
          [XmlEnum("1/2 ft")]
          Item12ft,
        /// <summary>
        /// Item12ms property
        /// </summary>
          [XmlEnum("1/2 ms")]
          Item12ms,
        /// <summary>
        /// Item130cm3min property
        /// </summary>
          [XmlEnum("1/30 cm3/min")]
          Item130cm3min,
        /// <summary>
        /// Item130degaft property
        /// </summary>
          [XmlEnum("1/30 dega/ft")]
          Item130degaft,
        /// <summary>
        /// Item130degam property
        /// </summary>
          [XmlEnum("1/30 dega/m")]
          Item130degam,
        /// <summary>
        /// Item130lbfm property
        /// </summary>
          [XmlEnum("1/30 lbf/m")]
          Item130lbfm,
        /// <summary>
        /// Item130mm property
        /// </summary>
          [XmlEnum("1/30 m/m")]
          Item130mm,
        /// <summary>
        /// Item130Nm property
        /// </summary>
          [XmlEnum("1/30 N/m")]
          Item130Nm,
        /// <summary>
        /// Item132in property
        /// </summary>
          [XmlEnum("1/32 in")]
          Item132in,
        /// <summary>
        /// Item164in property
        /// </summary>
          [XmlEnum("1/64 in")]
          Item164in,
        /// <summary>
        /// Item1a property
        /// </summary>
          [XmlEnum("1/a")]
          Item1a,
        /// <summary>
        /// Item1angstrom property
        /// </summary>
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        /// <summary>
        /// Item1bar property
        /// </summary>
          [XmlEnum("1/bar")]
          Item1bar,
        /// <summary>
        /// Item1bbl property
        /// </summary>
          [XmlEnum("1/bbl")]
          Item1bbl,
        /// <summary>
        /// Item1cm property
        /// </summary>
          [XmlEnum("1/cm")]
          Item1cm,
        /// <summary>
        /// Item1d property
        /// </summary>
          [XmlEnum("1/d")]
          Item1d,
        /// <summary>
        /// Item1degC property
        /// </summary>
          [XmlEnum("1/degC")]
          Item1degC,
        /// <summary>
        /// Item1degF property
        /// </summary>
          [XmlEnum("1/degF")]
          Item1degF,
        /// <summary>
        /// Item1degR property
        /// </summary>
          [XmlEnum("1/degR")]
          Item1degR,
        /// <summary>
        /// Item1ft property
        /// </summary>
          [XmlEnum("1/ft")]
          Item1ft,
        /// <summary>
        /// Item1ft2 property
        /// </summary>
          [XmlEnum("1/ft2")]
          Item1ft2,
        /// <summary>
        /// Item1ft3 property
        /// </summary>
          [XmlEnum("1/ft3")]
          Item1ft3,
        /// <summary>
        /// Item1g property
        /// </summary>
          [XmlEnum("1/g")]
          Item1g,
        /// <summary>
        /// Item1galUK property
        /// </summary>
          [XmlEnum("1/gal[UK]")]
          Item1galUK,
        /// <summary>
        /// Item1galUS property
        /// </summary>
          [XmlEnum("1/gal[US]")]
          Item1galUS,
        /// <summary>
        /// Item1h property
        /// </summary>
          [XmlEnum("1/h")]
          Item1h,
        /// <summary>
        /// Item1H property
        /// </summary>
          [XmlEnum("1/H")]
          Item1H,
        /// <summary>
        /// Item1in property
        /// </summary>
          [XmlEnum("1/in")]
          Item1in,
        /// <summary>
        /// Item1K property
        /// </summary>
          [XmlEnum("1/K")]
          Item1K,
        /// <summary>
        /// Item1kg property
        /// </summary>
          [XmlEnum("1/kg")]
          Item1kg,
        /// <summary>
        /// Item1km2 property
        /// </summary>
          [XmlEnum("1/km2")]
          Item1km2,
        /// <summary>
        /// Item1kPa property
        /// </summary>
          [XmlEnum("1/kPa")]
          Item1kPa,
        /// <summary>
        /// Item1L property
        /// </summary>
          [XmlEnum("1/L")]
          Item1L,
        /// <summary>
        /// Item1lbf property
        /// </summary>
          [XmlEnum("1/lbf")]
          Item1lbf,
        /// <summary>
        /// Item1lbm property
        /// </summary>
          [XmlEnum("1/lbm")]
          Item1lbm,
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// Item1m2 property
        /// </summary>
          [XmlEnum("1/m2")]
          Item1m2,
        /// <summary>
        /// Item1m3 property
        /// </summary>
          [XmlEnum("1/m3")]
          Item1m3,
        /// <summary>
        /// Item1mi property
        /// </summary>
          [XmlEnum("1/mi")]
          Item1mi,
        /// <summary>
        /// Item1mi2 property
        /// </summary>
          [XmlEnum("1/mi2")]
          Item1mi2,
        /// <summary>
        /// Item1min property
        /// </summary>
          [XmlEnum("1/min")]
          Item1min,
        /// <summary>
        /// Item1mm property
        /// </summary>
          [XmlEnum("1/mm")]
          Item1mm,
        /// <summary>
        /// Item1ms property
        /// </summary>
          [XmlEnum("1/ms")]
          Item1ms,
        /// <summary>
        /// Item1N property
        /// </summary>
          [XmlEnum("1/N")]
          Item1N,
        /// <summary>
        /// Item1nm property
        /// </summary>
          [XmlEnum("1/nm")]
          Item1nm,
        /// <summary>
        /// Item1Pa property
        /// </summary>
          [XmlEnum("1/Pa")]
          Item1Pa,
        /// <summary>
        /// Item1pPa property
        /// </summary>
          [XmlEnum("1/pPa")]
          Item1pPa,
        /// <summary>
        /// Item1psi property
        /// </summary>
          [XmlEnum("1/psi")]
          Item1psi,
        /// <summary>
        /// Item1s property
        /// </summary>
          [XmlEnum("1/s")]
          Item1s,
        /// <summary>
        /// Item1upsi property
        /// </summary>
          [XmlEnum("1/upsi")]
          Item1upsi,
        /// <summary>
        /// Item1us property
        /// </summary>
          [XmlEnum("1/us")]
          Item1us,
        /// <summary>
        /// Item1uV property
        /// </summary>
          [XmlEnum("1/uV")]
          Item1uV,
        /// <summary>
        /// Item1V property
        /// </summary>
          [XmlEnum("1/V")]
          Item1V,
        /// <summary>
        /// Item1wk property
        /// </summary>
          [XmlEnum("1/wk")]
          Item1wk,
        /// <summary>
        /// Item1yd property
        /// </summary>
          [XmlEnum("1/yd")]
          Item1yd,
        /// <summary>
        /// Item10ft property
        /// </summary>
          [XmlEnum("10 ft")]
          Item10ft,
        /// <summary>
        /// Item10in property
        /// </summary>
          [XmlEnum("10 in")]
          Item10in,
        /// <summary>
        /// Item10km property
        /// </summary>
          [XmlEnum("10 km")]
          Item10km,
        /// <summary>
        /// Item10kN property
        /// </summary>
          [XmlEnum("10 kN")]
          Item10kN,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10 Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// Item100ft property
        /// </summary>
          [XmlEnum("100 ft")]
          Item100ft,
        /// <summary>
        /// Item100kat property
        /// </summary>
          [XmlEnum("100 ka[t]")]
          Item100kat,
        /// <summary>
        /// Item100km property
        /// </summary>
          [XmlEnum("100 km")]
          Item100km,
        /// <summary>
        /// Item1000bbl property
        /// </summary>
          [XmlEnum("1000 bbl")]
          Item1000bbl,
        /// <summary>
        /// Item1000bblftd property
        /// </summary>
          [XmlEnum("1000 bbl.ft/d")]
          Item1000bblftd,
        /// <summary>
        /// Item1000bbld property
        /// </summary>
          [XmlEnum("1000 bbl/d")]
          Item1000bbld,
        /// <summary>
        /// Item1000ft property
        /// </summary>
          [XmlEnum("1000 ft")]
          Item1000ft,
        /// <summary>
        /// Item1000fth property
        /// </summary>
          [XmlEnum("1000 ft/h")]
          Item1000fth,
        /// <summary>
        /// Item1000fts property
        /// </summary>
          [XmlEnum("1000 ft/s")]
          Item1000fts,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000 ft3")]
          Item1000ft3,
        /// <summary>
        /// Item1000ft3dft property
        /// </summary>
          [XmlEnum("1000 ft3/(d.ft)")]
          Item1000ft3dft,
        /// <summary>
        /// Item1000ft3psid property
        /// </summary>
          [XmlEnum("1000 ft3/(psi.d)")]
          Item1000ft3psid,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000 ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000 ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000galUK property
        /// </summary>
          [XmlEnum("1000 gal[UK]")]
          Item1000galUK,
        /// <summary>
        /// Item1000galUS property
        /// </summary>
          [XmlEnum("1000 gal[US]")]
          Item1000galUS,
        /// <summary>
        /// Item1000lbfft property
        /// </summary>
          [XmlEnum("1000 lbf.ft")]
          Item1000lbfft,
        /// <summary>
        /// Item1000m3 property
        /// </summary>
          [XmlEnum("1000 m3")]
          Item1000m3,
        /// <summary>
        /// Item1000m3dm property
        /// </summary>
          [XmlEnum("1000 m3/(d.m)")]
          Item1000m3dm,
        /// <summary>
        /// Item1000m3hm property
        /// </summary>
          [XmlEnum("1000 m3/(h.m)")]
          Item1000m3hm,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000 m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000 m3/h")]
          Item1000m3h,
        /// <summary>
        /// Item1000m3m3 property
        /// </summary>
          [XmlEnum("1000 m3/m3")]
          Item1000m3m3,
        /// <summary>
        /// Item1000m4d property
        /// </summary>
          [XmlEnum("1000 m4/d")]
          Item1000m4d,
        /// <summary>
        /// Item1E12ft3 property
        /// </summary>
          [XmlEnum("1E12 ft3")]
          Item1E12ft3,
        /// <summary>
        /// Item1E6ft3dbbld property
        /// </summary>
          [XmlEnum("1E6 (ft3/d)/(bbl/d)")]
          Item1E6ft3dbbld,
        /// <summary>
        /// Item1E6acreftbbl property
        /// </summary>
          [XmlEnum("1E-6 acre.ft/bbl")]
          Item1E6acreftbbl,
        /// <summary>
        /// Item1E6bbl property
        /// </summary>
          [XmlEnum("1E6 bbl")]
          Item1E6bbl,
        /// <summary>
        /// Item1E6bblacreft property
        /// </summary>
          [XmlEnum("1E6 bbl/(acre.ft)")]
          Item1E6bblacreft,
        /// <summary>
        /// Item1E6bblacre property
        /// </summary>
          [XmlEnum("1E6 bbl/acre")]
          Item1E6bblacre,
        /// <summary>
        /// Item1E6bbld property
        /// </summary>
          [XmlEnum("1E6 bbl/d")]
          Item1E6bbld,
        /// <summary>
        /// Item1E6bblft3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/ft3")]
          Item1E6bblft3,
        /// <summary>
        /// Item1E6bblm3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/m3")]
          Item1E6bblm3,
        /// <summary>
        /// Item1E6BtuIT property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]")]
          Item1E6BtuIT,
        /// <summary>
        /// Item1E6BtuITh property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]/h")]
          Item1E6BtuITh,
        /// <summary>
        /// Item1E6ft3 property
        /// </summary>
          [XmlEnum("1E6 ft3")]
          Item1E6ft3,
        /// <summary>
        /// Item1E6ft3acreft property
        /// </summary>
          [XmlEnum("1E6 ft3/(acre.ft)")]
          Item1E6ft3acreft,
        /// <summary>
        /// Item1E6ft3bbl property
        /// </summary>
          [XmlEnum("1E6 ft3/bbl")]
          Item1E6ft3bbl,
        /// <summary>
        /// Item1E6ft3d property
        /// </summary>
          [XmlEnum("1E6 ft3/d")]
          Item1E6ft3d,
        /// <summary>
        /// Item1E6galUS property
        /// </summary>
          [XmlEnum("1E-6 gal[US]")]
          Item1E6galUS,
        /// <summary>
        /// Item1E6lbma property
        /// </summary>
          [XmlEnum("1E6 lbm/a")]
          Item1E6lbma,
        /// <summary>
        /// Item1E6m3 property
        /// </summary>
          [XmlEnum("1E6 m3")]
          Item1E6m3,
        /// <summary>
        /// Item1E6m3m3degC property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.degC)")]
          Item1E6m3m3degC,
        /// <summary>
        /// Item1E6m3m3degF property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.degF)")]
          Item1E6m3m3degF,
        /// <summary>
        /// Item1E6m3d property
        /// </summary>
          [XmlEnum("1E6 m3/d")]
          Item1E6m3d,
        /// <summary>
        /// Item1E91ft property
        /// </summary>
          [XmlEnum("1E-9 1/ft")]
          Item1E91ft,
        /// <summary>
        /// Item1E9bbl property
        /// </summary>
          [XmlEnum("1E9 bbl")]
          Item1E9bbl,
        /// <summary>
        /// Item1E9ft3 property
        /// </summary>
          [XmlEnum("1E9 ft3")]
          Item1E9ft3,
        /// <summary>
        /// Item30ft property
        /// </summary>
          [XmlEnum("30 ft")]
          Item30ft,
        /// <summary>
        /// Item30m property
        /// </summary>
          [XmlEnum("30 m")]
          Item30m,
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// Ah property
        /// </summary>
          [XmlEnum("A.h")]
          Ah,
        /// <summary>
        /// Am2 property
        /// </summary>
          [XmlEnum("A.m2")]
          Am2,
        /// <summary>
        /// As property
        /// </summary>
          [XmlEnum("A.s")]
          As,
        /// <summary>
        /// Askg property
        /// </summary>
          [XmlEnum("A.s/kg")]
          Askg,
        /// <summary>
        /// Asm3 property
        /// </summary>
          [XmlEnum("A.s/m3")]
          Asm3,
        /// <summary>
        /// Acm2 property
        /// </summary>
          [XmlEnum("A/cm2")]
          Acm2,
        /// <summary>
        /// Aft2 property
        /// </summary>
          [XmlEnum("A/ft2")]
          Aft2,
        /// <summary>
        /// Am property
        /// </summary>
          [XmlEnum("A/m")]
          Am,
        /// <summary>
        /// Am21 property
        /// </summary>
          [XmlEnum("A/m2")]
          Am21,
        /// <summary>
        /// Amm property
        /// </summary>
          [XmlEnum("A/mm")]
          Amm,
        /// <summary>
        /// Amm2 property
        /// </summary>
          [XmlEnum("A/mm2")]
          Amm2,
        /// <summary>
        /// at property
        /// </summary>
          [XmlEnum("a[t]")]
          at,
        /// <summary>
        /// acre property
        /// </summary>
          acre,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// aJ property
        /// </summary>
          aJ,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// at1 property
        /// </summary>
          [XmlEnum("at")]
          at1,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// atmft property
        /// </summary>
          [XmlEnum("atm/ft")]
          atmft,
        /// <summary>
        /// atmh property
        /// </summary>
          [XmlEnum("atm/h")]
          atmh,
        /// <summary>
        /// atmhm property
        /// </summary>
          [XmlEnum("atm/hm")]
          atmhm,
        /// <summary>
        /// atmm property
        /// </summary>
          [XmlEnum("atm/m")]
          atmm,
        /// <summary>
        /// b property
        /// </summary>
          b,
        /// <summary>
        /// B property
        /// </summary>
          B,
        /// <summary>
        /// BW property
        /// </summary>
          [XmlEnum("B.W")]
          BW,
        /// <summary>
        /// bcm3 property
        /// </summary>
          [XmlEnum("b/cm3")]
          bcm3,
        /// <summary>
        /// Bm property
        /// </summary>
          [XmlEnum("B/m")]
          Bm,
        /// <summary>
        /// BO property
        /// </summary>
          [XmlEnum("B/O")]
          BO,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// barh property
        /// </summary>
          [XmlEnum("bar/h")]
          barh,
        /// <summary>
        /// barkm property
        /// </summary>
          [XmlEnum("bar/km")]
          barkm,
        /// <summary>
        /// barm property
        /// </summary>
          [XmlEnum("bar/m")]
          barm,
        /// <summary>
        /// bar2 property
        /// </summary>
          bar2,
        /// <summary>
        /// bar2cP property
        /// </summary>
          [XmlEnum("bar2/cP")]
          bar2cP,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/(acre.ft)")]
          bblacreft,
        /// <summary>
        /// bbldacreft property
        /// </summary>
          [XmlEnum("bbl/(d.acre.ft)")]
          bbldacreft,
        /// <summary>
        /// bbldft property
        /// </summary>
          [XmlEnum("bbl/(d.ft)")]
          bbldft,
        /// <summary>
        /// bblftpsid property
        /// </summary>
          [XmlEnum("bbl/(ft.psi.d)")]
          bblftpsid,
        /// <summary>
        /// bblkPad property
        /// </summary>
          [XmlEnum("bbl/(kPa.d)")]
          bblkPad,
        /// <summary>
        /// bblpsid property
        /// </summary>
          [XmlEnum("bbl/(psi.d)")]
          bblpsid,
        /// <summary>
        /// bblacre property
        /// </summary>
          [XmlEnum("bbl/acre")]
          bblacre,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bbld2 property
        /// </summary>
          [XmlEnum("bbl/d2")]
          bbld2,
        /// <summary>
        /// bblft property
        /// </summary>
          [XmlEnum("bbl/ft")]
          bblft,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bblh property
        /// </summary>
          [XmlEnum("bbl/h")]
          bblh,
        /// <summary>
        /// bblh2 property
        /// </summary>
          [XmlEnum("bbl/h2")]
          bblh2,
        /// <summary>
        /// bblin property
        /// </summary>
          [XmlEnum("bbl/in")]
          bblin,
        /// <summary>
        /// bblm3 property
        /// </summary>
          [XmlEnum("bbl/m3")]
          bblm3,
        /// <summary>
        /// bblmi property
        /// </summary>
          [XmlEnum("bbl/mi")]
          bblmi,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// bblpsi property
        /// </summary>
          [XmlEnum("bbl/psi")]
          bblpsi,
        /// <summary>
        /// bbltonUK property
        /// </summary>
          [XmlEnum("bbl/ton[UK]")]
          bbltonUK,
        /// <summary>
        /// bbltonUS property
        /// </summary>
          [XmlEnum("bbl/ton[US]")]
          bbltonUS,
        /// <summary>
        /// Bd property
        /// </summary>
          Bd,
        /// <summary>
        /// bit property
        /// </summary>
          bit,
        /// <summary>
        /// bits property
        /// </summary>
          [XmlEnum("bit/s")]
          bits,
        /// <summary>
        /// Bq property
        /// </summary>
          Bq,
        /// <summary>
        /// Bqkg property
        /// </summary>
          [XmlEnum("Bq/kg")]
          Bqkg,
        /// <summary>
        /// BtuIT property
        /// </summary>
          [XmlEnum("Btu[IT]")]
          BtuIT,
        /// <summary>
        /// BtuITinhft2degF property
        /// </summary>
          [XmlEnum("Btu[IT].in/(h.ft2.degF)")]
          BtuITinhft2degF,
        /// <summary>
        /// BtuIThftdegF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft.degF)")]
          BtuIThftdegF,
        /// <summary>
        /// BtuIThft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2)")]
          BtuIThft2,
        /// <summary>
        /// BtuIThft2degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.degF)")]
          BtuIThft2degF,
        /// <summary>
        /// BtuIThft2degR property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.degR)")]
          BtuIThft2degR,
        /// <summary>
        /// BtuIThft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3)")]
          BtuIThft3,
        /// <summary>
        /// BtuIThft3degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3.degF)")]
          BtuIThft3degF,
        /// <summary>
        /// BtuIThm2degC property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.m2.degC)")]
          BtuIThm2degC,
        /// <summary>
        /// BtuIThph property
        /// </summary>
          [XmlEnum("Btu[IT]/(hp.h)")]
          BtuIThph,
        /// <summary>
        /// BtuITlbmdegF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.degF)")]
          BtuITlbmdegF,
        /// <summary>
        /// BtuITlbmdegR property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.degR)")]
          BtuITlbmdegR,
        /// <summary>
        /// BtuITlbmoldegF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbmol.degF)")]
          BtuITlbmoldegF,
        /// <summary>
        /// BtuITsft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2)")]
          BtuITsft2,
        /// <summary>
        /// BtuITsft2degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2.degF)")]
          BtuITsft2degF,
        /// <summary>
        /// BtuITsft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3)")]
          BtuITsft3,
        /// <summary>
        /// BtuITsft3degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3.degF)")]
          BtuITsft3degF,
        /// <summary>
        /// BtuITbbl property
        /// </summary>
          [XmlEnum("Btu[IT]/bbl")]
          BtuITbbl,
        /// <summary>
        /// BtuITft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/ft3")]
          BtuITft3,
        /// <summary>
        /// BtuITgalUK property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[UK]")]
          BtuITgalUK,
        /// <summary>
        /// BtuITgalUS property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[US]")]
          BtuITgalUS,
        /// <summary>
        /// BtuITh property
        /// </summary>
          [XmlEnum("Btu[IT]/h")]
          BtuITh,
        /// <summary>
        /// BtuITlbm property
        /// </summary>
          [XmlEnum("Btu[IT]/lbm")]
          BtuITlbm,
        /// <summary>
        /// BtuITlbmol property
        /// </summary>
          [XmlEnum("Btu[IT]/lbmol")]
          BtuITlbmol,
        /// <summary>
        /// BtuITmin property
        /// </summary>
          [XmlEnum("Btu[IT]/min")]
          BtuITmin,
        /// <summary>
        /// BtuITs property
        /// </summary>
          [XmlEnum("Btu[IT]/s")]
          BtuITs,
        /// <summary>
        /// Btuth property
        /// </summary>
          [XmlEnum("Btu[th]")]
          Btuth,
        /// <summary>
        /// BtuUK property
        /// </summary>
          [XmlEnum("Btu[UK]")]
          BtuUK,
        /// <summary>
        /// byte property
        /// </summary>
          @byte,
        /// <summary>
        /// bytes property
        /// </summary>
          [XmlEnum("byte/s")]
          bytes,
        /// <summary>
        /// C property
        /// </summary>
          C,
        /// <summary>
        /// Cm property
        /// </summary>
          [XmlEnum("C.m")]
          Cm,
        /// <summary>
        /// Ccm2 property
        /// </summary>
          [XmlEnum("C/cm2")]
          Ccm2,
        /// <summary>
        /// Ccm3 property
        /// </summary>
          [XmlEnum("C/cm3")]
          Ccm3,
        /// <summary>
        /// Cg property
        /// </summary>
          [XmlEnum("C/g")]
          Cg,
        /// <summary>
        /// Ckg property
        /// </summary>
          [XmlEnum("C/kg")]
          Ckg,
        /// <summary>
        /// Cm2 property
        /// </summary>
          [XmlEnum("C/m2")]
          Cm2,
        /// <summary>
        /// Cm3 property
        /// </summary>
          [XmlEnum("C/m3")]
          Cm3,
        /// <summary>
        /// Cmm2 property
        /// </summary>
          [XmlEnum("C/mm2")]
          Cmm2,
        /// <summary>
        /// Cmm3 property
        /// </summary>
          [XmlEnum("C/mm3")]
          Cmm3,
        /// <summary>
        /// ca property
        /// </summary>
          ca,
        /// <summary>
        /// cA property
        /// </summary>
          cA,
        /// <summary>
        /// calIT property
        /// </summary>
          [XmlEnum("cal[IT]")]
          calIT,
        /// <summary>
        /// calth property
        /// </summary>
          [XmlEnum("cal[th]")]
          calth,
        /// <summary>
        /// calthgK property
        /// </summary>
          [XmlEnum("cal[th]/(g.K)")]
          calthgK,
        /// <summary>
        /// calthhcmdegC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm.degC)")]
          calthhcmdegC,
        /// <summary>
        /// calthhcm2 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2)")]
          calthhcm2,
        /// <summary>
        /// calthhcm2degC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2.degC)")]
          calthhcm2degC,
        /// <summary>
        /// calthhcm3 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm3)")]
          calthhcm3,
        /// <summary>
        /// calthmoldegC property
        /// </summary>
          [XmlEnum("cal[th]/(mol.degC)")]
          calthmoldegC,
        /// <summary>
        /// calthscmdegC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm.degC)")]
          calthscmdegC,
        /// <summary>
        /// calthscm2degC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm2.degC)")]
          calthscm2degC,
        /// <summary>
        /// calthscm3 property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm3)")]
          calthscm3,
        /// <summary>
        /// calthcm3 property
        /// </summary>
          [XmlEnum("cal[th]/cm3")]
          calthcm3,
        /// <summary>
        /// calthg property
        /// </summary>
          [XmlEnum("cal[th]/g")]
          calthg,
        /// <summary>
        /// calthh property
        /// </summary>
          [XmlEnum("cal[th]/h")]
          calthh,
        /// <summary>
        /// calthkg property
        /// </summary>
          [XmlEnum("cal[th]/kg")]
          calthkg,
        /// <summary>
        /// calthlbm property
        /// </summary>
          [XmlEnum("cal[th]/lbm")]
          calthlbm,
        /// <summary>
        /// calthmL property
        /// </summary>
          [XmlEnum("cal[th]/mL")]
          calthmL,
        /// <summary>
        /// calthmm3 property
        /// </summary>
          [XmlEnum("cal[th]/mm3")]
          calthmm3,
        /// <summary>
        /// cC property
        /// </summary>
          cC,
        /// <summary>
        /// ccalth property
        /// </summary>
          [XmlEnum("ccal[th]")]
          ccalth,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cd property
        /// </summary>
          cd,
        /// <summary>
        /// cdm2 property
        /// </summary>
          [XmlEnum("cd/m2")]
          cdm2,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// ceV property
        /// </summary>
          ceV,
        /// <summary>
        /// cF property
        /// </summary>
          cF,
        /// <summary>
        /// cg property
        /// </summary>
          cg,
        /// <summary>
        /// cgauss property
        /// </summary>
          cgauss,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// cGy property
        /// </summary>
          cGy,
        /// <summary>
        /// cH property
        /// </summary>
          cH,
        /// <summary>
        /// chain property
        /// </summary>
          chain,
        /// <summary>
        /// chainBnA property
        /// </summary>
          [XmlEnum("chain[BnA]")]
          chainBnA,
        /// <summary>
        /// chainBnB property
        /// </summary>
          [XmlEnum("chain[BnB]")]
          chainBnB,
        /// <summary>
        /// chainCla property
        /// </summary>
          [XmlEnum("chain[Cla]")]
          chainCla,
        /// <summary>
        /// chainInd37 property
        /// </summary>
          [XmlEnum("chain[Ind37]")]
          chainInd37,
        /// <summary>
        /// chainSe property
        /// </summary>
          [XmlEnum("chain[Se]")]
          chainSe,
        /// <summary>
        /// chainSeT property
        /// </summary>
          [XmlEnum("chain[SeT]")]
          chainSeT,
        /// <summary>
        /// chainUS property
        /// </summary>
          [XmlEnum("chain[US]")]
          chainUS,
        /// <summary>
        /// cHz property
        /// </summary>
          cHz,
        /// <summary>
        /// Ci property
        /// </summary>
          Ci,
        /// <summary>
        /// cJ property
        /// </summary>
          cJ,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// cms2 property
        /// </summary>
          [XmlEnum("cm/s2")]
          cms2,
        /// <summary>
        /// cm2 property
        /// </summary>
          cm2,
        /// <summary>
        /// cm2g property
        /// </summary>
          [XmlEnum("cm2/g")]
          cm2g,
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3g property
        /// </summary>
          [XmlEnum("cm3/g")]
          cm3g,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3L property
        /// </summary>
          [XmlEnum("cm3/L")]
          cm3L,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// cm4 property
        /// </summary>
          cm4,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O[4degC]")]
          cmH2O4degC,
        /// <summary>
        /// cN property
        /// </summary>
          cN,
        /// <summary>
        /// cohm property
        /// </summary>
          cohm,
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// cPa property
        /// </summary>
          cPa,
        /// <summary>
        /// crd property
        /// </summary>
          crd,
        /// <summary>
        /// cS property
        /// </summary>
          cS,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// cSt property
        /// </summary>
          cSt,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cT property
        /// </summary>
          cT,
        /// <summary>
        /// cu property
        /// </summary>
          cu,
        /// <summary>
        /// cV property
        /// </summary>
          cV,
        /// <summary>
        /// cW property
        /// </summary>
          cW,
        /// <summary>
        /// cWb property
        /// </summary>
          cWb,
        /// <summary>
        /// cwtUK property
        /// </summary>
          [XmlEnum("cwt[UK]")]
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          [XmlEnum("cwt[US]")]
          cwtUS,
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// Dft property
        /// </summary>
          [XmlEnum("D.ft")]
          Dft,
        /// <summary>
        /// Dm property
        /// </summary>
          [XmlEnum("D.m")]
          Dm,
        /// <summary>
        /// DPas property
        /// </summary>
          [XmlEnum("D/(Pa.s)")]
          DPas,
        /// <summary>
        /// dbbl property
        /// </summary>
          [XmlEnum("d/bbl")]
          dbbl,
        /// <summary>
        /// DcP property
        /// </summary>
          [XmlEnum("D/cP")]
          DcP,
        /// <summary>
        /// dft3 property
        /// </summary>
          [XmlEnum("d/ft3")]
          dft3,
        /// <summary>
        /// dm3 property
        /// </summary>
          [XmlEnum("d/m3")]
          dm3,
        /// <summary>
        /// DAPI property
        /// </summary>
          [XmlEnum("D[API]")]
          DAPI,
        /// <summary>
        /// dA property
        /// </summary>
          dA,
        /// <summary>
        /// dam property
        /// </summary>
          dam,
        /// <summary>
        /// daN property
        /// </summary>
          daN,
        /// <summary>
        /// daNm property
        /// </summary>
          [XmlEnum("daN.m")]
          daNm,
        /// <summary>
        /// dAPI property
        /// </summary>
          dAPI,
        /// <summary>
        /// dB property
        /// </summary>
          dB,
        /// <summary>
        /// dBmW property
        /// </summary>
          [XmlEnum("dB.mW")]
          dBmW,
        /// <summary>
        /// dBMW property
        /// </summary>
          [XmlEnum("dB.MW")]
          dBMW,
        /// <summary>
        /// dBW property
        /// </summary>
          [XmlEnum("dB.W")]
          dBW,
        /// <summary>
        /// dBft property
        /// </summary>
          [XmlEnum("dB/ft")]
          dBft,
        /// <summary>
        /// dBkm property
        /// </summary>
          [XmlEnum("dB/km")]
          dBkm,
        /// <summary>
        /// dBm property
        /// </summary>
          [XmlEnum("dB/m")]
          dBm,
        /// <summary>
        /// dBO property
        /// </summary>
          [XmlEnum("dB/O")]
          dBO,
        /// <summary>
        /// dC property
        /// </summary>
          dC,
        /// <summary>
        /// dcalth property
        /// </summary>
          [XmlEnum("dcal[th]")]
          dcalth,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// degaft property
        /// </summary>
          [XmlEnum("dega/ft")]
          degaft,
        /// <summary>
        /// degah property
        /// </summary>
          [XmlEnum("dega/h")]
          degah,
        /// <summary>
        /// degam property
        /// </summary>
          [XmlEnum("dega/m")]
          degam,
        /// <summary>
        /// degamin property
        /// </summary>
          [XmlEnum("dega/min")]
          degamin,
        /// <summary>
        /// degas property
        /// </summary>
          [XmlEnum("dega/s")]
          degas,
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degCm2hkcalth property
        /// </summary>
          [XmlEnum("degC.m2.h/kcal[th]")]
          degCm2hkcalth,
        /// <summary>
        /// degCft property
        /// </summary>
          [XmlEnum("degC/ft")]
          degCft,
        /// <summary>
        /// degCh property
        /// </summary>
          [XmlEnum("degC/h")]
          degCh,
        /// <summary>
        /// degChm property
        /// </summary>
          [XmlEnum("degC/hm")]
          degChm,
        /// <summary>
        /// degCkm property
        /// </summary>
          [XmlEnum("degC/km")]
          degCkm,
        /// <summary>
        /// degCkPa property
        /// </summary>
          [XmlEnum("degC/kPa")]
          degCkPa,
        /// <summary>
        /// degCm property
        /// </summary>
          [XmlEnum("degC/m")]
          degCm,
        /// <summary>
        /// degCmin property
        /// </summary>
          [XmlEnum("degC/min")]
          degCmin,
        /// <summary>
        /// degCs property
        /// </summary>
          [XmlEnum("degC/s")]
          degCs,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degFft2hBtuIT property
        /// </summary>
          [XmlEnum("degF.ft2.h/Btu[IT]")]
          degFft2hBtuIT,
        /// <summary>
        /// degFft property
        /// </summary>
          [XmlEnum("degF/ft")]
          degFft,
        /// <summary>
        /// degFh property
        /// </summary>
          [XmlEnum("degF/h")]
          degFh,
        /// <summary>
        /// degFm property
        /// </summary>
          [XmlEnum("degF/m")]
          degFm,
        /// <summary>
        /// degFmin property
        /// </summary>
          [XmlEnum("degF/min")]
          degFmin,
        /// <summary>
        /// degFpsi property
        /// </summary>
          [XmlEnum("degF/psi")]
          degFpsi,
        /// <summary>
        /// degFs property
        /// </summary>
          [XmlEnum("degF/s")]
          degFs,
        /// <summary>
        /// degR property
        /// </summary>
          degR,
        /// <summary>
        /// dEuc property
        /// </summary>
          dEuc,
        /// <summary>
        /// deV property
        /// </summary>
          deV,
        /// <summary>
        /// dF property
        /// </summary>
          dF,
        /// <summary>
        /// dgauss property
        /// </summary>
          dgauss,
        /// <summary>
        /// dGy property
        /// </summary>
          dGy,
        /// <summary>
        /// dH property
        /// </summary>
          dH,
        /// <summary>
        /// dHz property
        /// </summary>
          dHz,
        /// <summary>
        /// dJ property
        /// </summary>
          dJ,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// dm31 property
        /// </summary>
          [XmlEnum("dm3")]
          dm31,
        /// <summary>
        /// dm3kWh property
        /// </summary>
          [XmlEnum("dm3/(kW.h)")]
          dm3kWh,
        /// <summary>
        /// dm3kg property
        /// </summary>
          [XmlEnum("dm3/kg")]
          dm3kg,
        /// <summary>
        /// dm3kmol property
        /// </summary>
          [XmlEnum("dm3/kmol")]
          dm3kmol,
        /// <summary>
        /// dm3m property
        /// </summary>
          [XmlEnum("dm3/m")]
          dm3m,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// dm3MJ property
        /// </summary>
          [XmlEnum("dm3/MJ")]
          dm3MJ,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// dm3s2 property
        /// </summary>
          [XmlEnum("dm3/s2")]
          dm3s2,
        /// <summary>
        /// dm3t property
        /// </summary>
          [XmlEnum("dm3/t")]
          dm3t,
        /// <summary>
        /// dN property
        /// </summary>
          dN,
        /// <summary>
        /// dNm property
        /// </summary>
          [XmlEnum("dN.m")]
          dNm,
        /// <summary>
        /// dohm property
        /// </summary>
          dohm,
        /// <summary>
        /// dP property
        /// </summary>
          dP,
        /// <summary>
        /// dPa property
        /// </summary>
          dPa,
        /// <summary>
        /// drd property
        /// </summary>
          drd,
        /// <summary>
        /// ds property
        /// </summary>
          ds,
        /// <summary>
        /// dS property
        /// </summary>
          dS,
        /// <summary>
        /// dT property
        /// </summary>
          dT,
        /// <summary>
        /// dV property
        /// </summary>
          dV,
        /// <summary>
        /// dW property
        /// </summary>
          dW,
        /// <summary>
        /// dWb property
        /// </summary>
          dWb,
        /// <summary>
        /// dyne property
        /// </summary>
          dyne,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne.cm2")]
          dynecm2,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// dynecm property
        /// </summary>
          [XmlEnum("dyne/cm")]
          dynecm,
        /// <summary>
        /// dynecm21 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm21,
        /// <summary>
        /// EA property
        /// </summary>
          EA,
        /// <summary>
        /// Eat property
        /// </summary>
          [XmlEnum("Ea[t]")]
          Eat,
        /// <summary>
        /// EC property
        /// </summary>
          EC,
        /// <summary>
        /// Ecalth property
        /// </summary>
          [XmlEnum("Ecal[th]")]
          Ecalth,
        /// <summary>
        /// EEuc property
        /// </summary>
          EEuc,
        /// <summary>
        /// EeV property
        /// </summary>
          EeV,
        /// <summary>
        /// EF property
        /// </summary>
          EF,
        /// <summary>
        /// Eg property
        /// </summary>
          Eg,
        /// <summary>
        /// Egauss property
        /// </summary>
          Egauss,
        /// <summary>
        /// EGy property
        /// </summary>
          EGy,
        /// <summary>
        /// EH property
        /// </summary>
          EH,
        /// <summary>
        /// EHz property
        /// </summary>
          EHz,
        /// <summary>
        /// EJ property
        /// </summary>
          EJ,
        /// <summary>
        /// EJa property
        /// </summary>
          [XmlEnum("EJ/a")]
          EJa,
        /// <summary>
        /// Em property
        /// </summary>
          Em,
        /// <summary>
        /// EN property
        /// </summary>
          EN,
        /// <summary>
        /// Eohm property
        /// </summary>
          Eohm,
        /// <summary>
        /// EP property
        /// </summary>
          EP,
        /// <summary>
        /// EPa property
        /// </summary>
          EPa,
        /// <summary>
        /// Erd property
        /// </summary>
          Erd,
        /// <summary>
        /// erg property
        /// </summary>
          erg,
        /// <summary>
        /// erga property
        /// </summary>
          [XmlEnum("erg/a")]
          erga,
        /// <summary>
        /// ergcm2 property
        /// </summary>
          [XmlEnum("erg/cm2")]
          ergcm2,
        /// <summary>
        /// ergcm3 property
        /// </summary>
          [XmlEnum("erg/cm3")]
          ergcm3,
        /// <summary>
        /// ergg property
        /// </summary>
          [XmlEnum("erg/g")]
          ergg,
        /// <summary>
        /// ergkg property
        /// </summary>
          [XmlEnum("erg/kg")]
          ergkg,
        /// <summary>
        /// ergm3 property
        /// </summary>
          [XmlEnum("erg/m3")]
          ergm3,
        /// <summary>
        /// ES property
        /// </summary>
          ES,
        /// <summary>
        /// ET property
        /// </summary>
          ET,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// eV property
        /// </summary>
          eV,
        /// <summary>
        /// EW property
        /// </summary>
          EW,
        /// <summary>
        /// EWb property
        /// </summary>
          EWb,
        /// <summary>
        /// F property
        /// </summary>
          F,
        /// <summary>
        /// Fm property
        /// </summary>
          [XmlEnum("F/m")]
          Fm,
        /// <summary>
        /// fa property
        /// </summary>
          fa,
        /// <summary>
        /// fA property
        /// </summary>
          fA,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fC property
        /// </summary>
          fC,
        /// <summary>
        /// fcalth property
        /// </summary>
          [XmlEnum("fcal[th]")]
          fcalth,
        /// <summary>
        /// fEuc property
        /// </summary>
          fEuc,
        /// <summary>
        /// feV property
        /// </summary>
          feV,
        /// <summary>
        /// fF property
        /// </summary>
          fF,
        /// <summary>
        /// fg property
        /// </summary>
          fg,
        /// <summary>
        /// fgauss property
        /// </summary>
          fgauss,
        /// <summary>
        /// fGy property
        /// </summary>
          fGy,
        /// <summary>
        /// fH property
        /// </summary>
          fH,
        /// <summary>
        /// fHz property
        /// </summary>
          fHz,
        /// <summary>
        /// fJ property
        /// </summary>
          fJ,
        /// <summary>
        /// flozUK property
        /// </summary>
          [XmlEnum("floz[UK]")]
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          [XmlEnum("floz[US]")]
          flozUS,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// fN property
        /// </summary>
          fN,
        /// <summary>
        /// fohm property
        /// </summary>
          fohm,
        /// <summary>
        /// footcandle property
        /// </summary>
          footcandle,
        /// <summary>
        /// footcandles property
        /// </summary>
          [XmlEnum("footcandle.s")]
          footcandles,
        /// <summary>
        /// fP property
        /// </summary>
          fP,
        /// <summary>
        /// fPa property
        /// </summary>
          fPa,
        /// <summary>
        /// frd property
        /// </summary>
          frd,
        /// <summary>
        /// fS property
        /// </summary>
          fS,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// fT property
        /// </summary>
          fT,
        /// <summary>
        /// ftbbl property
        /// </summary>
          [XmlEnum("ft/bbl")]
          ftbbl,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// ftdegF property
        /// </summary>
          [XmlEnum("ft/degF")]
          ftdegF,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftft3 property
        /// </summary>
          [XmlEnum("ft/ft3")]
          ftft3,
        /// <summary>
        /// ftgalUS property
        /// </summary>
          [XmlEnum("ft/gal[US]")]
          ftgalUS,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftlbm property
        /// </summary>
          [XmlEnum("ft/lbm")]
          ftlbm,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// ftpsi property
        /// </summary>
          [XmlEnum("ft/psi")]
          ftpsi,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// fts2 property
        /// </summary>
          [XmlEnum("ft/s2")]
          fts2,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ftBnA property
        /// </summary>
          [XmlEnum("ft[BnA]")]
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          [XmlEnum("ft[BnB]")]
          ftBnB,
        /// <summary>
        /// ftBr36 property
        /// </summary>
          [XmlEnum("ft[Br36]")]
          ftBr36,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ft[Br65]")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          [XmlEnum("ft[Cla]")]
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          [XmlEnum("ft[GC]")]
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          [XmlEnum("ft[Ind]")]
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ft[Ind37]")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ft[Ind62]")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ft[Ind75]")]
          ftInd75,
        /// <summary>
        /// ftSe property
        /// </summary>
          [XmlEnum("ft[Se]")]
          ftSe,
        /// <summary>
        /// ftSeT property
        /// </summary>
          [XmlEnum("ft[SeT]")]
          ftSeT,
        /// <summary>
        /// ftUS property
        /// </summary>
          [XmlEnum("ft[US]")]
          ftUS,
        /// <summary>
        /// ft2 property
        /// </summary>
          ft2,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2in3 property
        /// </summary>
          [XmlEnum("ft2/in3")]
          ft2in3,
        /// <summary>
        /// ft2lbm property
        /// </summary>
          [XmlEnum("ft2/lbm")]
          ft2lbm,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// ft3dft property
        /// </summary>
          [XmlEnum("ft3/(d.ft)")]
          ft3dft,
        /// <summary>
        /// ft3ftpsid property
        /// </summary>
          [XmlEnum("ft3/(ft.psi.d)")]
          ft3ftpsid,
        /// <summary>
        /// ft3minft2 property
        /// </summary>
          [XmlEnum("ft3/(min.ft2)")]
          ft3minft2,
        /// <summary>
        /// ft3sft2 property
        /// </summary>
          [XmlEnum("ft3/(s.ft2)")]
          ft3sft2,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3d2 property
        /// </summary>
          [XmlEnum("ft3/d2")]
          ft3d2,
        /// <summary>
        /// ft3ft property
        /// </summary>
          [XmlEnum("ft3/ft")]
          ft3ft,
        /// <summary>
        /// ft3ft2 property
        /// </summary>
          [XmlEnum("ft3/ft2")]
          ft3ft2,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3h2 property
        /// </summary>
          [XmlEnum("ft3/h2")]
          ft3h2,
        /// <summary>
        /// ft3kg property
        /// </summary>
          [XmlEnum("ft3/kg")]
          ft3kg,
        /// <summary>
        /// ft3lbm property
        /// </summary>
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        /// <summary>
        /// ft3lbmol property
        /// </summary>
          [XmlEnum("ft3/lbmol")]
          ft3lbmol,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3min2 property
        /// </summary>
          [XmlEnum("ft3/min2")]
          ft3min2,
        /// <summary>
        /// ft3rad property
        /// </summary>
          [XmlEnum("ft3/rad")]
          ft3rad,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// ft3s2 property
        /// </summary>
          [XmlEnum("ft3/s2")]
          ft3s2,
        /// <summary>
        /// ft3sack94lbm property
        /// </summary>
          [XmlEnum("ft3/sack[94lbm]")]
          ft3sack94lbm,
        /// <summary>
        /// furUS property
        /// </summary>
          [XmlEnum("fur[US]")]
          furUS,
        /// <summary>
        /// fV property
        /// </summary>
          fV,
        /// <summary>
        /// fW property
        /// </summary>
          fW,
        /// <summary>
        /// fWb property
        /// </summary>
          fWb,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// gftcm3s property
        /// </summary>
          [XmlEnum("g.ft/(cm3.s)")]
          gftcm3s,
        /// <summary>
        /// gmcm3s property
        /// </summary>
          [XmlEnum("g.m/(cm3.s)")]
          gmcm3s,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gcm4 property
        /// </summary>
          [XmlEnum("g/cm4")]
          gcm4,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/gal[UK]")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/gal[US]")]
          ggalUS,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// gmol property
        /// </summary>
          [XmlEnum("g/mol")]
          gmol,
        /// <summary>
        /// gs property
        /// </summary>
          [XmlEnum("g/s")]
          gs,
        /// <summary>
        /// gt property
        /// </summary>
          [XmlEnum("g/t")]
          gt,
        /// <summary>
        /// GA property
        /// </summary>
          GA,
        /// <summary>
        /// Gat property
        /// </summary>
          [XmlEnum("Ga[t]")]
          Gat,
        /// <summary>
        /// Gal property
        /// </summary>
          Gal,
        /// <summary>
        /// galUK property
        /// </summary>
          [XmlEnum("gal[UK]")]
          galUK,
        /// <summary>
        /// galUKhft property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft)")]
          galUKhft,
        /// <summary>
        /// galUKhft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft2)")]
          galUKhft2,
        /// <summary>
        /// galUKhin property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in)")]
          galUKhin,
        /// <summary>
        /// galUKhin2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in2)")]
          galUKhin2,
        /// <summary>
        /// galUKminft property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft)")]
          galUKminft,
        /// <summary>
        /// galUKminft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft2)")]
          galUKminft2,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("gal[UK]/d")]
          galUKd,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("gal[UK]/ft3")]
          galUKft3,
        /// <summary>
        /// galUKh property
        /// </summary>
          [XmlEnum("gal[UK]/h")]
          galUKh,
        /// <summary>
        /// galUKh2 property
        /// </summary>
          [XmlEnum("gal[UK]/h2")]
          galUKh2,
        /// <summary>
        /// galUKlbm property
        /// </summary>
          [XmlEnum("gal[UK]/lbm")]
          galUKlbm,
        /// <summary>
        /// galUKmi property
        /// </summary>
          [XmlEnum("gal[UK]/mi")]
          galUKmi,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("gal[UK]/min")]
          galUKmin,
        /// <summary>
        /// galUKmin2 property
        /// </summary>
          [XmlEnum("gal[UK]/min2")]
          galUKmin2,
        /// <summary>
        /// galUS property
        /// </summary>
          [XmlEnum("gal[US]")]
          galUS,
        /// <summary>
        /// galUShft property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft)")]
          galUShft,
        /// <summary>
        /// galUShft2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft2)")]
          galUShft2,
        /// <summary>
        /// galUShin property
        /// </summary>
          [XmlEnum("gal[US]/(h.in)")]
          galUShin,
        /// <summary>
        /// galUShin2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.in2)")]
          galUShin2,
        /// <summary>
        /// galUSminft property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft)")]
          galUSminft,
        /// <summary>
        /// galUSminft2 property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft2)")]
          galUSminft2,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("gal[US]/bbl")]
          galUSbbl,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("gal[US]/d")]
          galUSd,
        /// <summary>
        /// galUSft property
        /// </summary>
          [XmlEnum("gal[US]/ft")]
          galUSft,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("gal[US]/ft3")]
          galUSft3,
        /// <summary>
        /// galUSh property
        /// </summary>
          [XmlEnum("gal[US]/h")]
          galUSh,
        /// <summary>
        /// galUSh2 property
        /// </summary>
          [XmlEnum("gal[US]/h2")]
          galUSh2,
        /// <summary>
        /// galUSlbm property
        /// </summary>
          [XmlEnum("gal[US]/lbm")]
          galUSlbm,
        /// <summary>
        /// galUSmi property
        /// </summary>
          [XmlEnum("gal[US]/mi")]
          galUSmi,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("gal[US]/min")]
          galUSmin,
        /// <summary>
        /// galUSmin2 property
        /// </summary>
          [XmlEnum("gal[US]/min2")]
          galUSmin2,
        /// <summary>
        /// galUSsack94lbm property
        /// </summary>
          [XmlEnum("gal[US]/sack[94lbm]")]
          galUSsack94lbm,
        /// <summary>
        /// galUStonUK property
        /// </summary>
          [XmlEnum("gal[US]/ton[UK]")]
          galUStonUK,
        /// <summary>
        /// galUStonUS property
        /// </summary>
          [XmlEnum("gal[US]/ton[US]")]
          galUStonUS,
        /// <summary>
        /// gAPI property
        /// </summary>
          gAPI,
        /// <summary>
        /// gauss property
        /// </summary>
          gauss,
        /// <summary>
        /// gausscm property
        /// </summary>
          [XmlEnum("gauss/cm")]
          gausscm,
        /// <summary>
        /// GBq property
        /// </summary>
          GBq,
        /// <summary>
        /// GC property
        /// </summary>
          GC,
        /// <summary>
        /// Gcalth property
        /// </summary>
          [XmlEnum("Gcal[th]")]
          Gcalth,
        /// <summary>
        /// GEuc property
        /// </summary>
          GEuc,
        /// <summary>
        /// GeV property
        /// </summary>
          GeV,
        /// <summary>
        /// gf property
        /// </summary>
          gf,
        /// <summary>
        /// GF property
        /// </summary>
          GF,
        /// <summary>
        /// Gg property
        /// </summary>
          Gg,
        /// <summary>
        /// Ggauss property
        /// </summary>
          Ggauss,
        /// <summary>
        /// GGy property
        /// </summary>
          GGy,
        /// <summary>
        /// GH property
        /// </summary>
          GH,
        /// <summary>
        /// GHz property
        /// </summary>
          GHz,
        /// <summary>
        /// GJ property
        /// </summary>
          GJ,
        /// <summary>
        /// Gm property
        /// </summary>
          Gm,
        /// <summary>
        /// GN property
        /// </summary>
          GN,
        /// <summary>
        /// gn property
        /// </summary>
          gn,
        /// <summary>
        /// Gohm property
        /// </summary>
          Gohm,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// GP property
        /// </summary>
          GP,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// GPacm property
        /// </summary>
          [XmlEnum("GPa/cm")]
          GPacm,
        /// <summary>
        /// GPa2 property
        /// </summary>
          GPa2,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/gal[US]")]
          graingalUS,
        /// <summary>
        /// Grd property
        /// </summary>
          Grd,
        /// <summary>
        /// GS property
        /// </summary>
          GS,
        /// <summary>
        /// GT property
        /// </summary>
          GT,
        /// <summary>
        /// GV property
        /// </summary>
          GV,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// GWh property
        /// </summary>
          [XmlEnum("GW.h")]
          GWh,
        /// <summary>
        /// GWb property
        /// </summary>
          GWb,
        /// <summary>
        /// Gy property
        /// </summary>
          Gy,
        /// <summary>
        /// H property
        /// </summary>
          H,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// hft3 property
        /// </summary>
          [XmlEnum("h/ft3")]
          hft3,
        /// <summary>
        /// hkm property
        /// </summary>
          [XmlEnum("h/km")]
          hkm,
        /// <summary>
        /// Hm property
        /// </summary>
          [XmlEnum("H/m")]
          Hm,
        /// <summary>
        /// hm3 property
        /// </summary>
          [XmlEnum("h/m3")]
          hm3,
        /// <summary>
        /// ha property
        /// </summary>
          ha,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// hg property
        /// </summary>
          hg,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// hm property
        /// </summary>
          hm,
        /// <summary>
        /// hN property
        /// </summary>
          hN,
        /// <summary>
        /// hp property
        /// </summary>
          hp,
        /// <summary>
        /// hph property
        /// </summary>
          [XmlEnum("hp.h")]
          hph,
        /// <summary>
        /// hphbbl property
        /// </summary>
          [XmlEnum("hp.h/bbl")]
          hphbbl,
        /// <summary>
        /// hphlbm property
        /// </summary>
          [XmlEnum("hp.h/lbm")]
          hphlbm,
        /// <summary>
        /// hpft3 property
        /// </summary>
          [XmlEnum("hp/ft3")]
          hpft3,
        /// <summary>
        /// hpin2 property
        /// </summary>
          [XmlEnum("hp/in2")]
          hpin2,
        /// <summary>
        /// hpelec property
        /// </summary>
          [XmlEnum("hp[elec]")]
          hpelec,
        /// <summary>
        /// hphyd property
        /// </summary>
          [XmlEnum("hp[hyd]")]
          hphyd,
        /// <summary>
        /// hphydin2 property
        /// </summary>
          [XmlEnum("hp[hyd]/in2")]
          hphydin2,
        /// <summary>
        /// hpmetric property
        /// </summary>
          [XmlEnum("hp[metric]")]
          hpmetric,
        /// <summary>
        /// hpmetrich property
        /// </summary>
          [XmlEnum("hp[metric].h")]
          hpmetrich,
        /// <summary>
        /// hs property
        /// </summary>
          hs,
        /// <summary>
        /// Hz property
        /// </summary>
          Hz,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// inindegF property
        /// </summary>
          [XmlEnum("in/(in.degF)")]
          inindegF,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// ins2 property
        /// </summary>
          [XmlEnum("in/s2")]
          ins2,
        /// <summary>
        /// inUS property
        /// </summary>
          [XmlEnum("in[US]")]
          inUS,
        /// <summary>
        /// in2 property
        /// </summary>
          in2,
        /// <summary>
        /// in2ft2 property
        /// </summary>
          [XmlEnum("in2/ft2")]
          in2ft2,
        /// <summary>
        /// in2in2 property
        /// </summary>
          [XmlEnum("in2/in2")]
          in2in2,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// in3ft property
        /// </summary>
          [XmlEnum("in3/ft")]
          in3ft,
        /// <summary>
        /// in4 property
        /// </summary>
          in4,
        /// <summary>
        /// inH2O39degF property
        /// </summary>
          [XmlEnum("inH2O[39degF]")]
          inH2O39degF,
        /// <summary>
        /// inH2O60degF property
        /// </summary>
          [XmlEnum("inH2O[60degF]")]
          inH2O60degF,
        /// <summary>
        /// inHg32degF property
        /// </summary>
          [XmlEnum("inHg[32degF]")]
          inHg32degF,
        /// <summary>
        /// inHg60degF property
        /// </summary>
          [XmlEnum("inHg[60degF]")]
          inHg60degF,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// Jmsm2K property
        /// </summary>
          [XmlEnum("J.m/(s.m2.K)")]
          Jmsm2K,
        /// <summary>
        /// Jmm2 property
        /// </summary>
          [XmlEnum("J.m/m2")]
          Jmm2,
        /// <summary>
        /// JgK property
        /// </summary>
          [XmlEnum("J/(g.K)")]
          JgK,
        /// <summary>
        /// JkgK property
        /// </summary>
          [XmlEnum("J/(kg.K)")]
          JkgK,
        /// <summary>
        /// JmolK property
        /// </summary>
          [XmlEnum("J/(mol.K)")]
          JmolK,
        /// <summary>
        /// Jsm2degC property
        /// </summary>
          [XmlEnum("J/(s.m2.degC)")]
          Jsm2degC,
        /// <summary>
        /// Jcm2 property
        /// </summary>
          [XmlEnum("J/cm2")]
          Jcm2,
        /// <summary>
        /// Jdm3 property
        /// </summary>
          [XmlEnum("J/dm3")]
          Jdm3,
        /// <summary>
        /// Jg property
        /// </summary>
          [XmlEnum("J/g")]
          Jg,
        /// <summary>
        /// JK property
        /// </summary>
          [XmlEnum("J/K")]
          JK,
        /// <summary>
        /// Jkg property
        /// </summary>
          [XmlEnum("J/kg")]
          Jkg,
        /// <summary>
        /// Jm property
        /// </summary>
          [XmlEnum("J/m")]
          Jm,
        /// <summary>
        /// Jm2 property
        /// </summary>
          [XmlEnum("J/m2")]
          Jm2,
        /// <summary>
        /// Jm3 property
        /// </summary>
          [XmlEnum("J/m3")]
          Jm3,
        /// <summary>
        /// Jmol property
        /// </summary>
          [XmlEnum("J/mol")]
          Jmol,
        /// <summary>
        /// Js property
        /// </summary>
          [XmlEnum("J/s")]
          Js,
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// Km2kW property
        /// </summary>
          [XmlEnum("K.m2/kW")]
          Km2kW,
        /// <summary>
        /// Km2W property
        /// </summary>
          [XmlEnum("K.m2/W")]
          Km2W,
        /// <summary>
        /// Kkm property
        /// </summary>
          [XmlEnum("K/km")]
          Kkm,
        /// <summary>
        /// Km property
        /// </summary>
          [XmlEnum("K/m")]
          Km,
        /// <summary>
        /// KPa property
        /// </summary>
          [XmlEnum("K/Pa")]
          KPa,
        /// <summary>
        /// Ks property
        /// </summary>
          [XmlEnum("K/s")]
          Ks,
        /// <summary>
        /// KW property
        /// </summary>
          [XmlEnum("K/W")]
          KW,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// kat property
        /// </summary>
          [XmlEnum("ka[t]")]
          kat,
        /// <summary>
        /// kC property
        /// </summary>
          kC,
        /// <summary>
        /// kcalth property
        /// </summary>
          [XmlEnum("kcal[th]")]
          kcalth,
        /// <summary>
        /// kcalthmcm2 property
        /// </summary>
          [XmlEnum("kcal[th].m/cm2")]
          kcalthmcm2,
        /// <summary>
        /// kcalthhmdegC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m.degC)")]
          kcalthhmdegC,
        /// <summary>
        /// kcalthhm2degC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m2.degC)")]
          kcalthhm2degC,
        /// <summary>
        /// kcalthkgdegC property
        /// </summary>
          [XmlEnum("kcal[th]/(kg.degC)")]
          kcalthkgdegC,
        /// <summary>
        /// kcalthcm3 property
        /// </summary>
          [XmlEnum("kcal[th]/cm3")]
          kcalthcm3,
        /// <summary>
        /// kcalthg property
        /// </summary>
          [XmlEnum("kcal[th]/g")]
          kcalthg,
        /// <summary>
        /// kcalthh property
        /// </summary>
          [XmlEnum("kcal[th]/h")]
          kcalthh,
        /// <summary>
        /// kcalthkg property
        /// </summary>
          [XmlEnum("kcal[th]/kg")]
          kcalthkg,
        /// <summary>
        /// kcalthm3 property
        /// </summary>
          [XmlEnum("kcal[th]/m3")]
          kcalthm3,
        /// <summary>
        /// kcalthmol property
        /// </summary>
          [XmlEnum("kcal[th]/mol")]
          kcalthmol,
        /// <summary>
        /// kcd property
        /// </summary>
          kcd,
        /// <summary>
        /// kdyne property
        /// </summary>
          kdyne,
        /// <summary>
        /// kEuc property
        /// </summary>
          kEuc,
        /// <summary>
        /// keV property
        /// </summary>
          keV,
        /// <summary>
        /// kF property
        /// </summary>
          kF,
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg.m")]
          kgm,
        /// <summary>
        /// kgmcm2 property
        /// </summary>
          [XmlEnum("kg.m/cm2")]
          kgmcm2,
        /// <summary>
        /// kgms property
        /// </summary>
          [XmlEnum("kg.m/s")]
          kgms,
        /// <summary>
        /// kgm2 property
        /// </summary>
          [XmlEnum("kg.m2")]
          kgm2,
        /// <summary>
        /// kgkWh property
        /// </summary>
          [XmlEnum("kg/(kW.h)")]
          kgkWh,
        /// <summary>
        /// kgms1 property
        /// </summary>
          [XmlEnum("kg/(m.s)")]
          kgms1,
        /// <summary>
        /// kgm2s property
        /// </summary>
          [XmlEnum("kg/(m2.s)")]
          kgm2s,
        /// <summary>
        /// kgd property
        /// </summary>
          [XmlEnum("kg/d")]
          kgd,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgdm4 property
        /// </summary>
          [XmlEnum("kg/dm4")]
          kgdm4,
        /// <summary>
        /// kgh property
        /// </summary>
          [XmlEnum("kg/h")]
          kgh,
        /// <summary>
        /// kgJ property
        /// </summary>
          [XmlEnum("kg/J")]
          kgJ,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// kgm1 property
        /// </summary>
          [XmlEnum("kg/m")]
          kgm1,
        /// <summary>
        /// kgm21 property
        /// </summary>
          [XmlEnum("kg/m2")]
          kgm21,
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// kgm4 property
        /// </summary>
          [XmlEnum("kg/m4")]
          kgm4,
        /// <summary>
        /// kgmin property
        /// </summary>
          [XmlEnum("kg/min")]
          kgmin,
        /// <summary>
        /// kgMJ property
        /// </summary>
          [XmlEnum("kg/MJ")]
          kgMJ,
        /// <summary>
        /// kgmol property
        /// </summary>
          [XmlEnum("kg/mol")]
          kgmol,
        /// <summary>
        /// kgs property
        /// </summary>
          [XmlEnum("kg/s")]
          kgs,
        /// <summary>
        /// kgsack94lbm property
        /// </summary>
          [XmlEnum("kg/sack[94lbm]")]
          kgsack94lbm,
        /// <summary>
        /// kgt property
        /// </summary>
          [XmlEnum("kg/t")]
          kgt,
        /// <summary>
        /// kgauss property
        /// </summary>
          kgauss,
        /// <summary>
        /// kgf property
        /// </summary>
          kgf,
        /// <summary>
        /// kgfm property
        /// </summary>
          [XmlEnum("kgf.m")]
          kgfm,
        /// <summary>
        /// kgfmcm2 property
        /// </summary>
          [XmlEnum("kgf.m/cm2")]
          kgfmcm2,
        /// <summary>
        /// kgfmm property
        /// </summary>
          [XmlEnum("kgf.m/m")]
          kgfmm,
        /// <summary>
        /// kgfm2 property
        /// </summary>
          [XmlEnum("kgf.m2")]
          kgfm2,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// kgfcm property
        /// </summary>
          [XmlEnum("kgf/cm")]
          kgfcm,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfkgf property
        /// </summary>
          [XmlEnum("kgf/kgf")]
          kgfkgf,
        /// <summary>
        /// kgfm21 property
        /// </summary>
          [XmlEnum("kgf/m2")]
          kgfm21,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kGy property
        /// </summary>
          kGy,
        /// <summary>
        /// kH property
        /// </summary>
          kH,
        /// <summary>
        /// kHz property
        /// </summary>
          kHz,
        /// <summary>
        /// Kibyte property
        /// </summary>
          Kibyte,
        /// <summary>
        /// kJ property
        /// </summary>
          kJ,
        /// <summary>
        /// kJmhm2K property
        /// </summary>
          [XmlEnum("kJ.m/(h.m2.K)")]
          kJmhm2K,
        /// <summary>
        /// kJhm2K property
        /// </summary>
          [XmlEnum("kJ/(h.m2.K)")]
          kJhm2K,
        /// <summary>
        /// kJkgK property
        /// </summary>
          [XmlEnum("kJ/(kg.K)")]
          kJkgK,
        /// <summary>
        /// kJkmolK property
        /// </summary>
          [XmlEnum("kJ/(kmol.K)")]
          kJkmolK,
        /// <summary>
        /// kJdm3 property
        /// </summary>
          [XmlEnum("kJ/dm3")]
          kJdm3,
        /// <summary>
        /// kJkg property
        /// </summary>
          [XmlEnum("kJ/kg")]
          kJkg,
        /// <summary>
        /// kJkmol property
        /// </summary>
          [XmlEnum("kJ/kmol")]
          kJkmol,
        /// <summary>
        /// kJm3 property
        /// </summary>
          [XmlEnum("kJ/m3")]
          kJm3,
        /// <summary>
        /// klbf property
        /// </summary>
          klbf,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// klbmin property
        /// </summary>
          [XmlEnum("klbm/in")]
          klbmin,
        /// <summary>
        /// klx property
        /// </summary>
          klx,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// kmdm3 property
        /// </summary>
          [XmlEnum("km/dm3")]
          kmdm3,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kmL property
        /// </summary>
          [XmlEnum("km/L")]
          kmL,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// km2 property
        /// </summary>
          km2,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// kmol property
        /// </summary>
          kmol,
        /// <summary>
        /// kmolh property
        /// </summary>
          [XmlEnum("kmol/h")]
          kmolh,
        /// <summary>
        /// kmolm3 property
        /// </summary>
          [XmlEnum("kmol/m3")]
          kmolm3,
        /// <summary>
        /// kmols property
        /// </summary>
          [XmlEnum("kmol/s")]
          kmols,
        /// <summary>
        /// kN property
        /// </summary>
          kN,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN.m")]
          kNm,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN.m2")]
          kNm2,
        /// <summary>
        /// kNm1 property
        /// </summary>
          [XmlEnum("kN/m")]
          kNm1,
        /// <summary>
        /// kNm21 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm21,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// kohm property
        /// </summary>
          kohm,
        /// <summary>
        /// kohmm property
        /// </summary>
          [XmlEnum("kohm.m")]
          kohmm,
        /// <summary>
        /// kP property
        /// </summary>
          kP,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kPasm property
        /// </summary>
          [XmlEnum("kPa.s/m")]
          kPasm,
        /// <summary>
        /// kPah property
        /// </summary>
          [XmlEnum("kPa/h")]
          kPah,
        /// <summary>
        /// kPahm property
        /// </summary>
          [XmlEnum("kPa/hm")]
          kPahm,
        /// <summary>
        /// kPam property
        /// </summary>
          [XmlEnum("kPa/m")]
          kPam,
        /// <summary>
        /// kPamin property
        /// </summary>
          [XmlEnum("kPa/min")]
          kPamin,
        /// <summary>
        /// kPa2 property
        /// </summary>
          kPa2,
        /// <summary>
        /// kPa2cP property
        /// </summary>
          [XmlEnum("kPa2/cP")]
          kPa2cP,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// kpsi2 property
        /// </summary>
          kpsi2,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// krd property
        /// </summary>
          krd,
        /// <summary>
        /// kS property
        /// </summary>
          kS,
        /// <summary>
        /// kSm property
        /// </summary>
          [XmlEnum("kS/m")]
          kSm,
        /// <summary>
        /// kT property
        /// </summary>
          kT,
        /// <summary>
        /// kV property
        /// </summary>
          kV,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// kWh property
        /// </summary>
          [XmlEnum("kW.h")]
          kWh,
        /// <summary>
        /// kWhkgdegC property
        /// </summary>
          [XmlEnum("kW.h/(kg.degC)")]
          kWhkgdegC,
        /// <summary>
        /// kWhdm3 property
        /// </summary>
          [XmlEnum("kW.h/dm3")]
          kWhdm3,
        /// <summary>
        /// kWhkg property
        /// </summary>
          [XmlEnum("kW.h/kg")]
          kWhkg,
        /// <summary>
        /// kWhm3 property
        /// </summary>
          [XmlEnum("kW.h/m3")]
          kWhm3,
        /// <summary>
        /// kWm2K property
        /// </summary>
          [XmlEnum("kW/(m2.K)")]
          kWm2K,
        /// <summary>
        /// kWm3K property
        /// </summary>
          [XmlEnum("kW/(m3.K)")]
          kWm3K,
        /// <summary>
        /// kWcm2 property
        /// </summary>
          [XmlEnum("kW/cm2")]
          kWcm2,
        /// <summary>
        /// kWm2 property
        /// </summary>
          [XmlEnum("kW/m2")]
          kWm2,
        /// <summary>
        /// kWm3 property
        /// </summary>
          [XmlEnum("kW/m3")]
          kWm3,
        /// <summary>
        /// kWb property
        /// </summary>
          kWb,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// Lbarmin property
        /// </summary>
          [XmlEnum("L/(bar.min)")]
          Lbarmin,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lkg property
        /// </summary>
          [XmlEnum("L/kg")]
          Lkg,
        /// <summary>
        /// Lkmol property
        /// </summary>
          [XmlEnum("L/kmol")]
          Lkmol,
        /// <summary>
        /// Lm property
        /// </summary>
          [XmlEnum("L/m")]
          Lm,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Lmol property
        /// </summary>
          [XmlEnum("L/mol")]
          Lmol,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// Ls2 property
        /// </summary>
          [XmlEnum("L/s2")]
          Ls2,
        /// <summary>
        /// Lt property
        /// </summary>
          [XmlEnum("L/t")]
          Lt,
        /// <summary>
        /// LtonUK property
        /// </summary>
          [XmlEnum("L/ton[UK]")]
          LtonUK,
        /// <summary>
        /// lbf property
        /// </summary>
          lbf,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf.ft")]
          lbfft,
        /// <summary>
        /// lbfftbbl property
        /// </summary>
          [XmlEnum("lbf.ft/bbl")]
          lbfftbbl,
        /// <summary>
        /// lbfftgalUS property
        /// </summary>
          [XmlEnum("lbf.ft/gal[US]")]
          lbfftgalUS,
        /// <summary>
        /// lbfftin property
        /// </summary>
          [XmlEnum("lbf.ft/in")]
          lbfftin,
        /// <summary>
        /// lbfftin2 property
        /// </summary>
          [XmlEnum("lbf.ft/in2")]
          lbfftin2,
        /// <summary>
        /// lbfftlbm property
        /// </summary>
          [XmlEnum("lbf.ft/lbm")]
          lbfftlbm,
        /// <summary>
        /// lbfftmin property
        /// </summary>
          [XmlEnum("lbf.ft/min")]
          lbfftmin,
        /// <summary>
        /// lbffts property
        /// </summary>
          [XmlEnum("lbf.ft/s")]
          lbffts,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf.in")]
          lbfin,
        /// <summary>
        /// lbfinin property
        /// </summary>
          [XmlEnum("lbf.in/in")]
          lbfinin,
        /// <summary>
        /// lbfin2 property
        /// </summary>
          [XmlEnum("lbf.in2")]
          lbfin2,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// lbfft1 property
        /// </summary>
          [XmlEnum("lbf/ft")]
          lbfft1,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// lbfft3 property
        /// </summary>
          [XmlEnum("lbf/ft3")]
          lbfft3,
        /// <summary>
        /// lbfgalUS property
        /// </summary>
          [XmlEnum("lbf/gal[US]")]
          lbfgalUS,
        /// <summary>
        /// lbfin1 property
        /// </summary>
          [XmlEnum("lbf/in")]
          lbfin1,
        /// <summary>
        /// lbflbf property
        /// </summary>
          [XmlEnum("lbf/lbf")]
          lbflbf,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm.ft")]
          lbmft,
        /// <summary>
        /// lbmfts property
        /// </summary>
          [XmlEnum("lbm.ft/s")]
          lbmfts,
        /// <summary>
        /// lbmft2 property
        /// </summary>
          [XmlEnum("lbm.ft2")]
          lbmft2,
        /// <summary>
        /// lbmft2s2 property
        /// </summary>
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        /// <summary>
        /// lbmfth property
        /// </summary>
          [XmlEnum("lbm/(ft.h)")]
          lbmfth,
        /// <summary>
        /// lbmfts1 property
        /// </summary>
          [XmlEnum("lbm/(ft.s)")]
          lbmfts1,
        /// <summary>
        /// lbmft2h property
        /// </summary>
          [XmlEnum("lbm/(ft2.h)")]
          lbmft2h,
        /// <summary>
        /// lbmft2s property
        /// </summary>
          [XmlEnum("lbm/(ft2.s)")]
          lbmft2s,
        /// <summary>
        /// lbmgalUKft property
        /// </summary>
          [XmlEnum("lbm/(gal[UK].ft)")]
          lbmgalUKft,
        /// <summary>
        /// lbmgalUSft property
        /// </summary>
          [XmlEnum("lbm/(gal[US].ft)")]
          lbmgalUSft,
        /// <summary>
        /// lbmhph property
        /// </summary>
          [XmlEnum("lbm/(hp.h)")]
          lbmhph,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmd property
        /// </summary>
          [XmlEnum("lbm/d")]
          lbmd,
        /// <summary>
        /// lbmft1 property
        /// </summary>
          [XmlEnum("lbm/ft")]
          lbmft1,
        /// <summary>
        /// lbmft21 property
        /// </summary>
          [XmlEnum("lbm/ft2")]
          lbmft21,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmft4 property
        /// </summary>
          [XmlEnum("lbm/ft4")]
          lbmft4,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/gal[UK]")]
          lbmgalUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/gal[US]")]
          lbmgalUS,
        /// <summary>
        /// lbmh property
        /// </summary>
          [XmlEnum("lbm/h")]
          lbmh,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// lbmlbmol property
        /// </summary>
          [XmlEnum("lbm/lbmol")]
          lbmlbmol,
        /// <summary>
        /// lbmmin property
        /// </summary>
          [XmlEnum("lbm/min")]
          lbmmin,
        /// <summary>
        /// lbms property
        /// </summary>
          [XmlEnum("lbm/s")]
          lbms,
        /// <summary>
        /// lbmol property
        /// </summary>
          lbmol,
        /// <summary>
        /// lbmolhft2 property
        /// </summary>
          [XmlEnum("lbmol/(h.ft2)")]
          lbmolhft2,
        /// <summary>
        /// lbmolsft2 property
        /// </summary>
          [XmlEnum("lbmol/(s.ft2)")]
          lbmolsft2,
        /// <summary>
        /// lbmolft3 property
        /// </summary>
          [XmlEnum("lbmol/ft3")]
          lbmolft3,
        /// <summary>
        /// lbmolgalUK property
        /// </summary>
          [XmlEnum("lbmol/gal[UK]")]
          lbmolgalUK,
        /// <summary>
        /// lbmolgalUS property
        /// </summary>
          [XmlEnum("lbmol/gal[US]")]
          lbmolgalUS,
        /// <summary>
        /// lbmolh property
        /// </summary>
          [XmlEnum("lbmol/h")]
          lbmolh,
        /// <summary>
        /// lbmols property
        /// </summary>
          [XmlEnum("lbmol/s")]
          lbmols,
        /// <summary>
        /// link property
        /// </summary>
          link,
        /// <summary>
        /// linkBnA property
        /// </summary>
          [XmlEnum("link[BnA]")]
          linkBnA,
        /// <summary>
        /// linkBnB property
        /// </summary>
          [XmlEnum("link[BnB]")]
          linkBnB,
        /// <summary>
        /// linkCla property
        /// </summary>
          [XmlEnum("link[Cla]")]
          linkCla,
        /// <summary>
        /// linkSe property
        /// </summary>
          [XmlEnum("link[Se]")]
          linkSe,
        /// <summary>
        /// linkSeT property
        /// </summary>
          [XmlEnum("link[SeT]")]
          linkSeT,
        /// <summary>
        /// linkUS property
        /// </summary>
          [XmlEnum("link[US]")]
          linkUS,
        /// <summary>
        /// lm property
        /// </summary>
          lm,
        /// <summary>
        /// lms property
        /// </summary>
          [XmlEnum("lm.s")]
          lms,
        /// <summary>
        /// lmm2 property
        /// </summary>
          [XmlEnum("lm/m2")]
          lmm2,
        /// <summary>
        /// lmW property
        /// </summary>
          [XmlEnum("lm/W")]
          lmW,
        /// <summary>
        /// lx property
        /// </summary>
          lx,
        /// <summary>
        /// lxs property
        /// </summary>
          [XmlEnum("lx.s")]
          lxs,
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// mmK property
        /// </summary>
          [XmlEnum("m/(m.K)")]
          mmK,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mK property
        /// </summary>
          [XmlEnum("m/K")]
          mK,
        /// <summary>
        /// mkg property
        /// </summary>
          [XmlEnum("m/kg")]
          mkg,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mkPa property
        /// </summary>
          [XmlEnum("m/kPa")]
          mkPa,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// mm3 property
        /// </summary>
          [XmlEnum("m/m3")]
          mm3,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// mPa property
        /// </summary>
          [XmlEnum("m/Pa")]
          mPa,
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("m/s2")]
          ms2,
        /// <summary>
        /// mGer property
        /// </summary>
          [XmlEnum("m[Ger]")]
          mGer,
        /// <summary>
        /// m2 property
        /// </summary>
          m2,
        /// <summary>
        /// m2kPad property
        /// </summary>
          [XmlEnum("m2/(kPa.d)")]
          m2kPad,
        /// <summary>
        /// m2Pas property
        /// </summary>
          [XmlEnum("m2/(Pa.s)")]
          m2Pas,
        /// <summary>
        /// m2cm3 property
        /// </summary>
          [XmlEnum("m2/cm3")]
          m2cm3,
        /// <summary>
        /// m2d property
        /// </summary>
          [XmlEnum("m2/d")]
          m2d,
        /// <summary>
        /// m2g property
        /// </summary>
          [XmlEnum("m2/g")]
          m2g,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2kg property
        /// </summary>
          [XmlEnum("m2/kg")]
          m2kg,
        /// <summary>
        /// m2m2 property
        /// </summary>
          [XmlEnum("m2/m2")]
          m2m2,
        /// <summary>
        /// m2m3 property
        /// </summary>
          [XmlEnum("m2/m3")]
          m2m3,
        /// <summary>
        /// m2mol property
        /// </summary>
          [XmlEnum("m2/mol")]
          m2mol,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// m3bard property
        /// </summary>
          [XmlEnum("m3/(bar.d)")]
          m3bard,
        /// <summary>
        /// m3barh property
        /// </summary>
          [XmlEnum("m3/(bar.h)")]
          m3barh,
        /// <summary>
        /// m3barmin property
        /// </summary>
          [XmlEnum("m3/(bar.min)")]
          m3barmin,
        /// <summary>
        /// m3dm property
        /// </summary>
          [XmlEnum("m3/(d.m)")]
          m3dm,
        /// <summary>
        /// m3hm property
        /// </summary>
          [XmlEnum("m3/(h.m)")]
          m3hm,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/(ha.m)")]
          m3ham,
        /// <summary>
        /// m3kPad property
        /// </summary>
          [XmlEnum("m3/(kPa.d)")]
          m3kPad,
        /// <summary>
        /// m3kPah property
        /// </summary>
          [XmlEnum("m3/(kPa.h)")]
          m3kPah,
        /// <summary>
        /// m3kWh property
        /// </summary>
          [XmlEnum("m3/(kW.h)")]
          m3kWh,
        /// <summary>
        /// m3m3K property
        /// </summary>
          [XmlEnum("m3/(m3.K)")]
          m3m3K,
        /// <summary>
        /// m3Pas property
        /// </summary>
          [XmlEnum("m3/(Pa.s)")]
          m3Pas,
        /// <summary>
        /// m3psid property
        /// </summary>
          [XmlEnum("m3/(psi.d)")]
          m3psid,
        /// <summary>
        /// m3sft property
        /// </summary>
          [XmlEnum("m3/(s.ft)")]
          m3sft,
        /// <summary>
        /// m3sm property
        /// </summary>
          [XmlEnum("m3/(s.m)")]
          m3sm,
        /// <summary>
        /// m3sm2 property
        /// </summary>
          [XmlEnum("m3/(s.m2)")]
          m3sm2,
        /// <summary>
        /// m3sm3 property
        /// </summary>
          [XmlEnum("m3/(s.m3)")]
          m3sm3,
        /// <summary>
        /// m3bbl property
        /// </summary>
          [XmlEnum("m3/bbl")]
          m3bbl,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3d2 property
        /// </summary>
          [XmlEnum("m3/d2")]
          m3d2,
        /// <summary>
        /// m3g property
        /// </summary>
          [XmlEnum("m3/g")]
          m3g,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3J property
        /// </summary>
          [XmlEnum("m3/J")]
          m3J,
        /// <summary>
        /// m3kg property
        /// </summary>
          [XmlEnum("m3/kg")]
          m3kg,
        /// <summary>
        /// m3km property
        /// </summary>
          [XmlEnum("m3/km")]
          m3km,
        /// <summary>
        /// m3kmol property
        /// </summary>
          [XmlEnum("m3/kmol")]
          m3kmol,
        /// <summary>
        /// m3kPa property
        /// </summary>
          [XmlEnum("m3/kPa")]
          m3kPa,
        /// <summary>
        /// m3m property
        /// </summary>
          [XmlEnum("m3/m")]
          m3m,
        /// <summary>
        /// m3m2 property
        /// </summary>
          [XmlEnum("m3/m2")]
          m3m2,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// m3mol property
        /// </summary>
          [XmlEnum("m3/mol")]
          m3mol,
        /// <summary>
        /// m3Pa property
        /// </summary>
          [XmlEnum("m3/Pa")]
          m3Pa,
        /// <summary>
        /// m3rad property
        /// </summary>
          [XmlEnum("m3/rad")]
          m3rad,
        /// <summary>
        /// m3rev property
        /// </summary>
          [XmlEnum("m3/rev")]
          m3rev,
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s,
        /// <summary>
        /// m3s2 property
        /// </summary>
          [XmlEnum("m3/s2")]
          m3s2,
        /// <summary>
        /// m3t property
        /// </summary>
          [XmlEnum("m3/t")]
          m3t,
        /// <summary>
        /// m3tonUK property
        /// </summary>
          [XmlEnum("m3/ton[UK]")]
          m3tonUK,
        /// <summary>
        /// m3tonUS property
        /// </summary>
          [XmlEnum("m3/ton[US]")]
          m3tonUS,
        /// <summary>
        /// m4 property
        /// </summary>
          m4,
        /// <summary>
        /// m4s property
        /// </summary>
          [XmlEnum("m4/s")]
          m4s,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// mAcm2 property
        /// </summary>
          [XmlEnum("mA/cm2")]
          mAcm2,
        /// <summary>
        /// mAft2 property
        /// </summary>
          [XmlEnum("mA/ft2")]
          mAft2,
        /// <summary>
        /// Mat property
        /// </summary>
          [XmlEnum("Ma[t]")]
          Mat,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// MBq property
        /// </summary>
          MBq,
        /// <summary>
        /// mC property
        /// </summary>
          mC,
        /// <summary>
        /// MC property
        /// </summary>
          MC,
        /// <summary>
        /// mCm2 property
        /// </summary>
          [XmlEnum("mC/m2")]
          mCm2,
        /// <summary>
        /// mcalth property
        /// </summary>
          [XmlEnum("mcal[th]")]
          mcalth,
        /// <summary>
        /// Mcalth property
        /// </summary>
          [XmlEnum("Mcal[th]")]
          Mcalth,
        /// <summary>
        /// mCi property
        /// </summary>
          mCi,
        /// <summary>
        /// mD property
        /// </summary>
          mD,
        /// <summary>
        /// mDft property
        /// </summary>
          [XmlEnum("mD.ft")]
          mDft,
        /// <summary>
        /// mDft2lbfs property
        /// </summary>
          [XmlEnum("mD.ft2/(lbf.s)")]
          mDft2lbfs,
        /// <summary>
        /// mDin2lbfs property
        /// </summary>
          [XmlEnum("mD.in2/(lbf.s)")]
          mDin2lbfs,
        /// <summary>
        /// mDm property
        /// </summary>
          [XmlEnum("mD.m")]
          mDm,
        /// <summary>
        /// mDPas property
        /// </summary>
          [XmlEnum("mD/(Pa.s)")]
          mDPas,
        /// <summary>
        /// mDcP property
        /// </summary>
          [XmlEnum("mD/cP")]
          mDcP,
        /// <summary>
        /// MEuc property
        /// </summary>
          MEuc,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// meV property
        /// </summary>
          meV,
        /// <summary>
        /// MeV property
        /// </summary>
          MeV,
        /// <summary>
        /// MF property
        /// </summary>
          MF,
        /// <summary>
        /// mF property
        /// </summary>
          mF,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// Mga property
        /// </summary>
          [XmlEnum("Mg/a")]
          Mga,
        /// <summary>
        /// Mgd property
        /// </summary>
          [XmlEnum("Mg/d")]
          Mgd,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mgg property
        /// </summary>
          [XmlEnum("mg/g")]
          mgg,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/gal[US]")]
          mggalUS,
        /// <summary>
        /// Mgh property
        /// </summary>
          [XmlEnum("Mg/h")]
          Mgh,
        /// <summary>
        /// Mgin property
        /// </summary>
          [XmlEnum("Mg/in")]
          Mgin,
        /// <summary>
        /// mgJ property
        /// </summary>
          [XmlEnum("mg/J")]
          mgJ,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// Mgm2 property
        /// </summary>
          [XmlEnum("Mg/m2")]
          Mgm2,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// Mgmin property
        /// </summary>
          [XmlEnum("Mg/min")]
          Mgmin,
        /// <summary>
        /// mGal property
        /// </summary>
          mGal,
        /// <summary>
        /// mgauss property
        /// </summary>
          mgauss,
        /// <summary>
        /// Mgauss property
        /// </summary>
          Mgauss,
        /// <summary>
        /// Mgf property
        /// </summary>
          Mgf,
        /// <summary>
        /// mgn property
        /// </summary>
          mgn,
        /// <summary>
        /// MGy property
        /// </summary>
          MGy,
        /// <summary>
        /// mGy property
        /// </summary>
          mGy,
        /// <summary>
        /// mH property
        /// </summary>
          mH,
        /// <summary>
        /// MH property
        /// </summary>
          MH,
        /// <summary>
        /// mHz property
        /// </summary>
          mHz,
        /// <summary>
        /// MHz property
        /// </summary>
          MHz,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// migalUK property
        /// </summary>
          [XmlEnum("mi/gal[UK]")]
          migalUK,
        /// <summary>
        /// migalUS property
        /// </summary>
          [XmlEnum("mi/gal[US]")]
          migalUS,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin,
        /// <summary>
        /// minaut property
        /// </summary>
          [XmlEnum("mi[naut]")]
          minaut,
        /// <summary>
        /// minautUK property
        /// </summary>
          [XmlEnum("mi[nautUK]")]
          minautUK,
        /// <summary>
        /// miUS property
        /// </summary>
          [XmlEnum("mi[US]")]
          miUS,
        /// <summary>
        /// miUS2 property
        /// </summary>
          [XmlEnum("mi[US]2")]
          miUS2,
        /// <summary>
        /// mi2 property
        /// </summary>
          mi2,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// Mibyte property
        /// </summary>
          Mibyte,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// mila property
        /// </summary>
          [XmlEnum("mil/a")]
          mila,
        /// <summary>
        /// mila1 property
        /// </summary>
          [XmlEnum("mila")]
          mila1,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// minft property
        /// </summary>
          [XmlEnum("min/ft")]
          minft,
        /// <summary>
        /// minm property
        /// </summary>
          [XmlEnum("min/m")]
          minm,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// mJ property
        /// </summary>
          mJ,
        /// <summary>
        /// MJ property
        /// </summary>
          MJ,
        /// <summary>
        /// MJa property
        /// </summary>
          [XmlEnum("MJ/a")]
          MJa,
        /// <summary>
        /// mJcm2 property
        /// </summary>
          [XmlEnum("mJ/cm2")]
          mJcm2,
        /// <summary>
        /// MJkg property
        /// </summary>
          [XmlEnum("MJ/kg")]
          MJkg,
        /// <summary>
        /// MJkmol property
        /// </summary>
          [XmlEnum("MJ/kmol")]
          MJkmol,
        /// <summary>
        /// MJm property
        /// </summary>
          [XmlEnum("MJ/m")]
          MJm,
        /// <summary>
        /// mJm2 property
        /// </summary>
          [XmlEnum("mJ/m2")]
          mJm2,
        /// <summary>
        /// MJm3 property
        /// </summary>
          [XmlEnum("MJ/m3")]
          MJm3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/gal[UK]")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/gal[US]")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// mm1 property
        /// </summary>
          [XmlEnum("mm")]
          mm1,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// mmmmK property
        /// </summary>
          [XmlEnum("mm/(mm.K)")]
          mmmmK,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// mm2 property
        /// </summary>
          mm2,
        /// <summary>
        /// mm2mm2 property
        /// </summary>
          [XmlEnum("mm2/mm2")]
          mm2mm2,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s,
        /// <summary>
        /// mm31 property
        /// </summary>
          [XmlEnum("mm3")]
          mm31,
        /// <summary>
        /// mm3J property
        /// </summary>
          [XmlEnum("mm3/J")]
          mm3J,
        /// <summary>
        /// mmHg0degC property
        /// </summary>
          [XmlEnum("mmHg[0degC]")]
          mmHg0degC,
        /// <summary>
        /// mmol property
        /// </summary>
          mmol,
        /// <summary>
        /// MN property
        /// </summary>
          MN,
        /// <summary>
        /// mN property
        /// </summary>
          mN,
        /// <summary>
        /// mNm2 property
        /// </summary>
          [XmlEnum("mN.m2")]
          mNm2,
        /// <summary>
        /// mNkm property
        /// </summary>
          [XmlEnum("mN/km")]
          mNkm,
        /// <summary>
        /// mNm property
        /// </summary>
          [XmlEnum("mN/m")]
          mNm,
        /// <summary>
        /// Mohm property
        /// </summary>
          Mohm,
        /// <summary>
        /// mohm property
        /// </summary>
          mohm,
        /// <summary>
        /// mol property
        /// </summary>
          mol,
        /// <summary>
        /// molm2mols property
        /// </summary>
          [XmlEnum("mol.m2/(mol.s)")]
          molm2mols,
        /// <summary>
        /// molsm2 property
        /// </summary>
          [XmlEnum("mol/(s.m2)")]
          molsm2,
        /// <summary>
        /// molm2 property
        /// </summary>
          [XmlEnum("mol/m2")]
          molm2,
        /// <summary>
        /// molm3 property
        /// </summary>
          [XmlEnum("mol/m3")]
          molm3,
        /// <summary>
        /// molmol property
        /// </summary>
          [XmlEnum("mol/mol")]
          molmol,
        /// <summary>
        /// mols property
        /// </summary>
          [XmlEnum("mol/s")]
          mols,
        /// <summary>
        /// MP property
        /// </summary>
          MP,
        /// <summary>
        /// mP property
        /// </summary>
          mP,
        /// <summary>
        /// mPa1 property
        /// </summary>
          [XmlEnum("mPa")]
          mPa1,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// MPasm property
        /// </summary>
          [XmlEnum("MPa.s/m")]
          MPasm,
        /// <summary>
        /// MPah property
        /// </summary>
          [XmlEnum("MPa/h")]
          MPah,
        /// <summary>
        /// MPam property
        /// </summary>
          [XmlEnum("MPa/m")]
          MPam,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// mrd property
        /// </summary>
          mrd,
        /// <summary>
        /// Mrd property
        /// </summary>
          Mrd,
        /// <summary>
        /// mrem property
        /// </summary>
          mrem,
        /// <summary>
        /// mremh property
        /// </summary>
          [XmlEnum("mrem/h")]
          mremh,
        /// <summary>
        /// ms1 property
        /// </summary>
          [XmlEnum("ms")]
          ms1,
        /// <summary>
        /// MS property
        /// </summary>
          MS,
        /// <summary>
        /// mS property
        /// </summary>
          mS,
        /// <summary>
        /// mScm property
        /// </summary>
          [XmlEnum("mS/cm")]
          mScm,
        /// <summary>
        /// mscm property
        /// </summary>
          [XmlEnum("ms/cm")]
          mscm,
        /// <summary>
        /// msft property
        /// </summary>
          [XmlEnum("ms/ft")]
          msft,
        /// <summary>
        /// msin property
        /// </summary>
          [XmlEnum("ms/in")]
          msin,
        /// <summary>
        /// mSm property
        /// </summary>
          [XmlEnum("mS/m")]
          mSm,
        /// <summary>
        /// msm property
        /// </summary>
          [XmlEnum("ms/m")]
          msm,
        /// <summary>
        /// mss property
        /// </summary>
          [XmlEnum("ms/s")]
          mss,
        /// <summary>
        /// mSv property
        /// </summary>
          mSv,
        /// <summary>
        /// mSvh property
        /// </summary>
          [XmlEnum("mSv/h")]
          mSvh,
        /// <summary>
        /// mT property
        /// </summary>
          mT,
        /// <summary>
        /// mTdm property
        /// </summary>
          [XmlEnum("mT/dm")]
          mTdm,
        /// <summary>
        /// MV property
        /// </summary>
          MV,
        /// <summary>
        /// mV property
        /// </summary>
          mV,
        /// <summary>
        /// mVft property
        /// </summary>
          [XmlEnum("mV/ft")]
          mVft,
        /// <summary>
        /// mVm property
        /// </summary>
          [XmlEnum("mV/m")]
          mVm,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// MWh property
        /// </summary>
          [XmlEnum("MW.h")]
          MWh,
        /// <summary>
        /// MWhkg property
        /// </summary>
          [XmlEnum("MW.h/kg")]
          MWhkg,
        /// <summary>
        /// MWhm3 property
        /// </summary>
          [XmlEnum("MW.h/m3")]
          MWhm3,
        /// <summary>
        /// mWm2 property
        /// </summary>
          [XmlEnum("mW/m2")]
          mWm2,
        /// <summary>
        /// MWb property
        /// </summary>
          MWb,
        /// <summary>
        /// mWb property
        /// </summary>
          mWb,
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N.m")]
          Nm,
        /// <summary>
        /// Nmm property
        /// </summary>
          [XmlEnum("N.m/m")]
          Nmm,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N.m2")]
          Nm2,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2,
        /// <summary>
        /// Nm1 property
        /// </summary>
          [XmlEnum("N/m")]
          Nm1,
        /// <summary>
        /// Nm21 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm21,
        /// <summary>
        /// Nm3 property
        /// </summary>
          [XmlEnum("N/m3")]
          Nm3,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// NN property
        /// </summary>
          [XmlEnum("N/N")]
          NN,
        /// <summary>
        /// na property
        /// </summary>
          na,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// nAPI property
        /// </summary>
          nAPI,
        /// <summary>
        /// nC property
        /// </summary>
          nC,
        /// <summary>
        /// ncalth property
        /// </summary>
          [XmlEnum("ncal[th]")]
          ncalth,
        /// <summary>
        /// nCi property
        /// </summary>
          nCi,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// neV property
        /// </summary>
          neV,
        /// <summary>
        /// nF property
        /// </summary>
          nF,
        /// <summary>
        /// ng property
        /// </summary>
          ng,
        /// <summary>
        /// ngg property
        /// </summary>
          [XmlEnum("ng/g")]
          ngg,
        /// <summary>
        /// ngmg property
        /// </summary>
          [XmlEnum("ng/mg")]
          ngmg,
        /// <summary>
        /// ngauss property
        /// </summary>
          ngauss,
        /// <summary>
        /// nGy property
        /// </summary>
          nGy,
        /// <summary>
        /// nH property
        /// </summary>
          nH,
        /// <summary>
        /// nHz property
        /// </summary>
          nHz,
        /// <summary>
        /// nJ property
        /// </summary>
          nJ,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// nN property
        /// </summary>
          nN,
        /// <summary>
        /// nohm property
        /// </summary>
          nohm,
        /// <summary>
        /// nohmmil2ft property
        /// </summary>
          [XmlEnum("nohm.mil2/ft")]
          nohmmil2ft,
        /// <summary>
        /// nohmmm2m property
        /// </summary>
          [XmlEnum("nohm.mm2/m")]
          nohmmm2m,
        /// <summary>
        /// nP property
        /// </summary>
          nP,
        /// <summary>
        /// nPa property
        /// </summary>
          nPa,
        /// <summary>
        /// nrd property
        /// </summary>
          nrd,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// nS property
        /// </summary>
          nS,
        /// <summary>
        /// nsft property
        /// </summary>
          [XmlEnum("ns/ft")]
          nsft,
        /// <summary>
        /// nsm property
        /// </summary>
          [XmlEnum("ns/m")]
          nsm,
        /// <summary>
        /// nT property
        /// </summary>
          nT,
        /// <summary>
        /// nV property
        /// </summary>
          nV,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// nWb property
        /// </summary>
          nWb,
        /// <summary>
        /// O property
        /// </summary>
          O,
        /// <summary>
        /// Oe property
        /// </summary>
          Oe,
        /// <summary>
        /// ohm property
        /// </summary>
          ohm,
        /// <summary>
        /// ohmcm property
        /// </summary>
          [XmlEnum("ohm.cm")]
          ohmcm,
        /// <summary>
        /// ohmm property
        /// </summary>
          [XmlEnum("ohm.m")]
          ohmm,
        /// <summary>
        /// ohmm2m property
        /// </summary>
          [XmlEnum("ohm.m2/m")]
          ohmm2m,
        /// <summary>
        /// ohmm1 property
        /// </summary>
          [XmlEnum("ohm/m")]
          ohmm1,
        /// <summary>
        /// ozf property
        /// </summary>
          ozf,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// ozmtroy property
        /// </summary>
          [XmlEnum("ozm[troy]")]
          ozmtroy,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// Pasm3kg property
        /// </summary>
          [XmlEnum("Pa.s.m3/kg")]
          Pasm3kg,
        /// <summary>
        /// Pasm3 property
        /// </summary>
          [XmlEnum("Pa.s/m3")]
          Pasm3,
        /// <summary>
        /// Pas2m3 property
        /// </summary>
          [XmlEnum("Pa.s2/m3")]
          Pas2m3,
        /// <summary>
        /// Pah property
        /// </summary>
          [XmlEnum("Pa/h")]
          Pah,
        /// <summary>
        /// Pam property
        /// </summary>
          [XmlEnum("Pa/m")]
          Pam,
        /// <summary>
        /// Pam3 property
        /// </summary>
          [XmlEnum("Pa/m3")]
          Pam3,
        /// <summary>
        /// Pas1 property
        /// </summary>
          [XmlEnum("Pa/s")]
          Pas1,
        /// <summary>
        /// Pa2 property
        /// </summary>
          Pa2,
        /// <summary>
        /// Pa2Pas property
        /// </summary>
          [XmlEnum("Pa2/(Pa.s)")]
          Pa2Pas,
        /// <summary>
        /// pC property
        /// </summary>
          pC,
        /// <summary>
        /// pcalth property
        /// </summary>
          [XmlEnum("pcal[th]")]
          pcalth,
        /// <summary>
        /// pCi property
        /// </summary>
          pCi,
        /// <summary>
        /// pCig property
        /// </summary>
          [XmlEnum("pCi/g")]
          pCig,
        /// <summary>
        /// pdl property
        /// </summary>
          pdl,
        /// <summary>
        /// pdlcm2 property
        /// </summary>
          [XmlEnum("pdl.cm2")]
          pdlcm2,
        /// <summary>
        /// pdlft property
        /// </summary>
          [XmlEnum("pdl.ft")]
          pdlft,
        /// <summary>
        /// pdlcm property
        /// </summary>
          [XmlEnum("pdl/cm")]
          pdlcm,
        /// <summary>
        /// pEuc property
        /// </summary>
          pEuc,
        /// <summary>
        /// peV property
        /// </summary>
          peV,
        /// <summary>
        /// pF property
        /// </summary>
          pF,
        /// <summary>
        /// pg property
        /// </summary>
          pg,
        /// <summary>
        /// pgauss property
        /// </summary>
          pgauss,
        /// <summary>
        /// pGy property
        /// </summary>
          pGy,
        /// <summary>
        /// pHz property
        /// </summary>
          pHz,
        /// <summary>
        /// pJ property
        /// </summary>
          pJ,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// pN property
        /// </summary>
          pN,
        /// <summary>
        /// pohm property
        /// </summary>
          pohm,
        /// <summary>
        /// pP property
        /// </summary>
          pP,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmmass property
        /// </summary>
          [XmlEnum("ppm[mass]")]
          ppmmass,
        /// <summary>
        /// ppmvol property
        /// </summary>
          [XmlEnum("ppm[vol]")]
          ppmvol,
        /// <summary>
        /// ppmvoldegC property
        /// </summary>
          [XmlEnum("ppm[vol]/degC")]
          ppmvoldegC,
        /// <summary>
        /// ppmvoldegF property
        /// </summary>
          [XmlEnum("ppm[vol]/degF")]
          ppmvoldegF,
        /// <summary>
        /// prd property
        /// </summary>
          prd,
        /// <summary>
        /// pS property
        /// </summary>
          pS,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// psidbbl property
        /// </summary>
          [XmlEnum("psi.d/bbl")]
          psidbbl,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// psift property
        /// </summary>
          [XmlEnum("psi/ft")]
          psift,
        /// <summary>
        /// psih property
        /// </summary>
          [XmlEnum("psi/h")]
          psih,
        /// <summary>
        /// psim property
        /// </summary>
          [XmlEnum("psi/m")]
          psim,
        /// <summary>
        /// psimin property
        /// </summary>
          [XmlEnum("psi/min")]
          psimin,
        /// <summary>
        /// psi2 property
        /// </summary>
          psi2,
        /// <summary>
        /// psi2dcPft3 property
        /// </summary>
          [XmlEnum("psi2.d/(cP.ft3)")]
          psi2dcPft3,
        /// <summary>
        /// psi2cP property
        /// </summary>
          [XmlEnum("psi2/cP")]
          psi2cP,
        /// <summary>
        /// pT property
        /// </summary>
          pT,
        /// <summary>
        /// ptUK property
        /// </summary>
          [XmlEnum("pt[UK]")]
          ptUK,
        /// <summary>
        /// ptUKhph property
        /// </summary>
          [XmlEnum("pt[UK]/(hp.h)")]
          ptUKhph,
        /// <summary>
        /// ptUS property
        /// </summary>
          [XmlEnum("pt[US]")]
          ptUS,
        /// <summary>
        /// pV property
        /// </summary>
          pV,
        /// <summary>
        /// pW property
        /// </summary>
          pW,
        /// <summary>
        /// pWb property
        /// </summary>
          pWb,
        /// <summary>
        /// qtUK property
        /// </summary>
          [XmlEnum("qt[UK]")]
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          [XmlEnum("qt[US]")]
          qtUS,
        /// <summary>
        /// quad property
        /// </summary>
          quad,
        /// <summary>
        /// quada property
        /// </summary>
          [XmlEnum("quad/a")]
          quada,
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// radft property
        /// </summary>
          [XmlEnum("rad/ft")]
          radft,
        /// <summary>
        /// radft3 property
        /// </summary>
          [XmlEnum("rad/ft3")]
          radft3,
        /// <summary>
        /// radm property
        /// </summary>
          [XmlEnum("rad/m")]
          radm,
        /// <summary>
        /// radm3 property
        /// </summary>
          [XmlEnum("rad/m3")]
          radm3,
        /// <summary>
        /// rads property
        /// </summary>
          [XmlEnum("rad/s")]
          rads,
        /// <summary>
        /// rads2 property
        /// </summary>
          [XmlEnum("rad/s2")]
          rads2,
        /// <summary>
        /// rd property
        /// </summary>
          rd,
        /// <summary>
        /// rem property
        /// </summary>
          rem,
        /// <summary>
        /// remh property
        /// </summary>
          [XmlEnum("rem/h")]
          remh,
        /// <summary>
        /// rev property
        /// </summary>
          rev,
        /// <summary>
        /// revft property
        /// </summary>
          [XmlEnum("rev/ft")]
          revft,
        /// <summary>
        /// revm property
        /// </summary>
          [XmlEnum("rev/m")]
          revm,
        /// <summary>
        /// revs property
        /// </summary>
          [XmlEnum("rev/s")]
          revs,
        /// <summary>
        /// rodUS property
        /// </summary>
          [XmlEnum("rod[US]")]
          rodUS,
        /// <summary>
        /// rpm property
        /// </summary>
          rpm,
        /// <summary>
        /// rpms property
        /// </summary>
          [XmlEnum("rpm/s")]
          rpms,
        /// <summary>
        /// S property
        /// </summary>
          S,
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// scm property
        /// </summary>
          [XmlEnum("s/cm")]
          scm,
        /// <summary>
        /// sft property
        /// </summary>
          [XmlEnum("s/ft")]
          sft,
        /// <summary>
        /// sft3 property
        /// </summary>
          [XmlEnum("s/ft3")]
          sft3,
        /// <summary>
        /// sin property
        /// </summary>
          [XmlEnum("s/in")]
          sin,
        /// <summary>
        /// skg property
        /// </summary>
          [XmlEnum("s/kg")]
          skg,
        /// <summary>
        /// sL property
        /// </summary>
          [XmlEnum("s/L")]
          sL,
        /// <summary>
        /// sm property
        /// </summary>
          [XmlEnum("s/m")]
          sm,
        /// <summary>
        /// Sm property
        /// </summary>
          [XmlEnum("S/m")]
          Sm,
        /// <summary>
        /// sm3 property
        /// </summary>
          [XmlEnum("s/m3")]
          sm3,
        /// <summary>
        /// sqtUK property
        /// </summary>
          [XmlEnum("s/qt[UK]")]
          sqtUK,
        /// <summary>
        /// sqtUS property
        /// </summary>
          [XmlEnum("s/qt[US]")]
          sqtUS,
        /// <summary>
        /// ss property
        /// </summary>
          [XmlEnum("s/s")]
          ss,
        /// <summary>
        /// sack94lbm property
        /// </summary>
          [XmlEnum("sack[94lbm]")]
          sack94lbm,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// section property
        /// </summary>
          section,
        /// <summary>
        /// sr property
        /// </summary>
          sr,
        /// <summary>
        /// St property
        /// </summary>
          St,
        /// <summary>
        /// Sv property
        /// </summary>
          Sv,
        /// <summary>
        /// Svh property
        /// </summary>
          [XmlEnum("Sv/h")]
          Svh,
        /// <summary>
        /// Svs property
        /// </summary>
          [XmlEnum("Sv/s")]
          Svs,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// ta property
        /// </summary>
          [XmlEnum("t/a")]
          ta,
        /// <summary>
        /// td property
        /// </summary>
          [XmlEnum("t/d")]
          td,
        /// <summary>
        /// th property
        /// </summary>
          [XmlEnum("t/h")]
          th,
        /// <summary>
        /// Tm property
        /// </summary>
          [XmlEnum("T/m")]
          Tm,
        /// <summary>
        /// tm3 property
        /// </summary>
          [XmlEnum("t/m3")]
          tm3,
        /// <summary>
        /// tmin property
        /// </summary>
          [XmlEnum("t/min")]
          tmin,
        /// <summary>
        /// TA property
        /// </summary>
          TA,
        /// <summary>
        /// Tat property
        /// </summary>
          [XmlEnum("Ta[t]")]
          Tat,
        /// <summary>
        /// TBq property
        /// </summary>
          TBq,
        /// <summary>
        /// TC property
        /// </summary>
          TC,
        /// <summary>
        /// Tcalth property
        /// </summary>
          [XmlEnum("Tcal[th]")]
          Tcalth,
        /// <summary>
        /// TDAPI property
        /// </summary>
          [XmlEnum("TD[API]")]
          TDAPI,
        /// <summary>
        /// TDAPIm property
        /// </summary>
          [XmlEnum("TD[API].m")]
          TDAPIm,
        /// <summary>
        /// TDAPIPas property
        /// </summary>
          [XmlEnum("TD[API]/(Pa.s)")]
          TDAPIPas,
        /// <summary>
        /// TEuc property
        /// </summary>
          TEuc,
        /// <summary>
        /// TeV property
        /// </summary>
          TeV,
        /// <summary>
        /// TF property
        /// </summary>
          TF,
        /// <summary>
        /// Tg property
        /// </summary>
          Tg,
        /// <summary>
        /// Tgauss property
        /// </summary>
          Tgauss,
        /// <summary>
        /// TGy property
        /// </summary>
          TGy,
        /// <summary>
        /// TH property
        /// </summary>
          TH,
        /// <summary>
        /// thermEC property
        /// </summary>
          [XmlEnum("therm[EC]")]
          thermEC,
        /// <summary>
        /// thermUK property
        /// </summary>
          [XmlEnum("therm[UK]")]
          thermUK,
        /// <summary>
        /// thermUS property
        /// </summary>
          [XmlEnum("therm[US]")]
          thermUS,
        /// <summary>
        /// THz property
        /// </summary>
          THz,
        /// <summary>
        /// TJ property
        /// </summary>
          TJ,
        /// <summary>
        /// TJa property
        /// </summary>
          [XmlEnum("TJ/a")]
          TJa,
        /// <summary>
        /// Tm1 property
        /// </summary>
          [XmlEnum("Tm")]
          Tm1,
        /// <summary>
        /// TN property
        /// </summary>
          TN,
        /// <summary>
        /// Tohm property
        /// </summary>
          Tohm,
        /// <summary>
        /// tonUK property
        /// </summary>
          [XmlEnum("ton[UK]")]
          tonUK,
        /// <summary>
        /// tonUKa property
        /// </summary>
          [XmlEnum("ton[UK]/a")]
          tonUKa,
        /// <summary>
        /// tonUKd property
        /// </summary>
          [XmlEnum("ton[UK]/d")]
          tonUKd,
        /// <summary>
        /// tonUKh property
        /// </summary>
          [XmlEnum("ton[UK]/h")]
          tonUKh,
        /// <summary>
        /// tonUKmin property
        /// </summary>
          [XmlEnum("ton[UK]/min")]
          tonUKmin,
        /// <summary>
        /// tonUS property
        /// </summary>
          [XmlEnum("ton[US]")]
          tonUS,
        /// <summary>
        /// tonUSa property
        /// </summary>
          [XmlEnum("ton[US]/a")]
          tonUSa,
        /// <summary>
        /// tonUSd property
        /// </summary>
          [XmlEnum("ton[US]/d")]
          tonUSd,
        /// <summary>
        /// tonUSft2 property
        /// </summary>
          [XmlEnum("ton[US]/ft2")]
          tonUSft2,
        /// <summary>
        /// tonUSh property
        /// </summary>
          [XmlEnum("ton[US]/h")]
          tonUSh,
        /// <summary>
        /// tonUSmin property
        /// </summary>
          [XmlEnum("ton[US]/min")]
          tonUSmin,
        /// <summary>
        /// tonfUK property
        /// </summary>
          [XmlEnum("tonf[UK]")]
          tonfUK,
        /// <summary>
        /// tonfUKft2 property
        /// </summary>
          [XmlEnum("tonf[UK].ft2")]
          tonfUKft2,
        /// <summary>
        /// tonfUKft property
        /// </summary>
          [XmlEnum("tonf[UK]/ft")]
          tonfUKft,
        /// <summary>
        /// tonfUKft21 property
        /// </summary>
          [XmlEnum("tonf[UK]/ft2")]
          tonfUKft21,
        /// <summary>
        /// tonfUS property
        /// </summary>
          [XmlEnum("tonf[US]")]
          tonfUS,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US].ft")]
          tonfUSft,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonf[US].ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSmi property
        /// </summary>
          [XmlEnum("tonf[US].mi")]
          tonfUSmi,
        /// <summary>
        /// tonfUSmibbl property
        /// </summary>
          [XmlEnum("tonf[US].mi/bbl")]
          tonfUSmibbl,
        /// <summary>
        /// tonfUSmift property
        /// </summary>
          [XmlEnum("tonf[US].mi/ft")]
          tonfUSmift,
        /// <summary>
        /// tonfUSft1 property
        /// </summary>
          [XmlEnum("tonf[US]/ft")]
          tonfUSft1,
        /// <summary>
        /// tonfUSft21 property
        /// </summary>
          [XmlEnum("tonf[US]/ft2")]
          tonfUSft21,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonf[US]/in2")]
          tonfUSin2,
        /// <summary>
        /// tonRefrig property
        /// </summary>
          tonRefrig,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// TP property
        /// </summary>
          TP,
        /// <summary>
        /// TPa property
        /// </summary>
          TPa,
        /// <summary>
        /// Trd property
        /// </summary>
          Trd,
        /// <summary>
        /// TS property
        /// </summary>
          TS,
        /// <summary>
        /// TT property
        /// </summary>
          TT,
        /// <summary>
        /// TV property
        /// </summary>
          TV,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// TWh property
        /// </summary>
          [XmlEnum("TW.h")]
          TWh,
        /// <summary>
        /// TWb property
        /// </summary>
          TWb,
        /// <summary>
        /// uA property
        /// </summary>
          uA,
        /// <summary>
        /// uAcm2 property
        /// </summary>
          [XmlEnum("uA/cm2")]
          uAcm2,
        /// <summary>
        /// uAin2 property
        /// </summary>
          [XmlEnum("uA/in2")]
          uAin2,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// uC property
        /// </summary>
          uC,
        /// <summary>
        /// ucalth property
        /// </summary>
          [XmlEnum("ucal[th]")]
          ucalth,
        /// <summary>
        /// ucalthscm2 property
        /// </summary>
          [XmlEnum("ucal[th]/(s.cm2)")]
          ucalthscm2,
        /// <summary>
        /// ucalths property
        /// </summary>
          [XmlEnum("ucal[th]/s")]
          ucalths,
        /// <summary>
        /// uCi property
        /// </summary>
          uCi,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc,
        /// <summary>
        /// ueV property
        /// </summary>
          ueV,
        /// <summary>
        /// uF property
        /// </summary>
          uF,
        /// <summary>
        /// uFm property
        /// </summary>
          [XmlEnum("uF/m")]
          uFm,
        /// <summary>
        /// ug property
        /// </summary>
          ug,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3,
        /// <summary>
        /// ugg property
        /// </summary>
          [XmlEnum("ug/g")]
          ugg,
        /// <summary>
        /// ugmg property
        /// </summary>
          [XmlEnum("ug/mg")]
          ugmg,
        /// <summary>
        /// ugauss property
        /// </summary>
          ugauss,
        /// <summary>
        /// uGy property
        /// </summary>
          uGy,
        /// <summary>
        /// uH property
        /// </summary>
          uH,
        /// <summary>
        /// uHm property
        /// </summary>
          [XmlEnum("uH/m")]
          uHm,
        /// <summary>
        /// uHz property
        /// </summary>
          uHz,
        /// <summary>
        /// uJ property
        /// </summary>
          uJ,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums,
        /// <summary>
        /// um2 property
        /// </summary>
          um2,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// umHg0degC property
        /// </summary>
          [XmlEnum("umHg[0degC]")]
          umHg0degC,
        /// <summary>
        /// umol property
        /// </summary>
          umol,
        /// <summary>
        /// uN property
        /// </summary>
          uN,
        /// <summary>
        /// uohm property
        /// </summary>
          uohm,
        /// <summary>
        /// uohmft property
        /// </summary>
          [XmlEnum("uohm/ft")]
          uohmft,
        /// <summary>
        /// uohmm property
        /// </summary>
          [XmlEnum("uohm/m")]
          uohmm,
        /// <summary>
        /// uP property
        /// </summary>
          uP,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi,
        /// <summary>
        /// urad property
        /// </summary>
          urad,
        /// <summary>
        /// urd property
        /// </summary>
          urd,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// uS property
        /// </summary>
          uS,
        /// <summary>
        /// usft property
        /// </summary>
          [XmlEnum("us/ft")]
          usft,
        /// <summary>
        /// usin property
        /// </summary>
          [XmlEnum("us/in")]
          usin,
        /// <summary>
        /// usm property
        /// </summary>
          [XmlEnum("us/m")]
          usm,
        /// <summary>
        /// uT property
        /// </summary>
          uT,
        /// <summary>
        /// uV property
        /// </summary>
          uV,
        /// <summary>
        /// uVft property
        /// </summary>
          [XmlEnum("uV/ft")]
          uVft,
        /// <summary>
        /// uVm property
        /// </summary>
          [XmlEnum("uV/m")]
          uVm,
        /// <summary>
        /// uW property
        /// </summary>
          uW,
        /// <summary>
        /// uWm3 property
        /// </summary>
          [XmlEnum("uW/m3")]
          uWm3,
        /// <summary>
        /// uWb property
        /// </summary>
          uWb,
        /// <summary>
        /// V property
        /// </summary>
          V,
        /// <summary>
        /// VB property
        /// </summary>
          [XmlEnum("V/B")]
          VB,
        /// <summary>
        /// VdB property
        /// </summary>
          [XmlEnum("V/dB")]
          VdB,
        /// <summary>
        /// Vm property
        /// </summary>
          [XmlEnum("V/m")]
          Vm,
        /// <summary>
        /// W property
        /// </summary>
          W,
        /// <summary>
        /// Wm2KJK property
        /// </summary>
          [XmlEnum("W.m2.K/(J.K)")]
          Wm2KJK,
        /// <summary>
        /// WmK property
        /// </summary>
          [XmlEnum("W/(m.K)")]
          WmK,
        /// <summary>
        /// Wm2K property
        /// </summary>
          [XmlEnum("W/(m2.K)")]
          Wm2K,
        /// <summary>
        /// Wm2sr property
        /// </summary>
          [XmlEnum("W/(m2.sr)")]
          Wm2sr,
        /// <summary>
        /// Wm3K property
        /// </summary>
          [XmlEnum("W/(m3.K)")]
          Wm3K,
        /// <summary>
        /// Wcm2 property
        /// </summary>
          [XmlEnum("W/cm2")]
          Wcm2,
        /// <summary>
        /// WK property
        /// </summary>
          [XmlEnum("W/K")]
          WK,
        /// <summary>
        /// WkW property
        /// </summary>
          [XmlEnum("W/kW")]
          WkW,
        /// <summary>
        /// Wm2 property
        /// </summary>
          [XmlEnum("W/m2")]
          Wm2,
        /// <summary>
        /// Wm3 property
        /// </summary>
          [XmlEnum("W/m3")]
          Wm3,
        /// <summary>
        /// Wmm2 property
        /// </summary>
          [XmlEnum("W/mm2")]
          Wmm2,
        /// <summary>
        /// Wsr property
        /// </summary>
          [XmlEnum("W/sr")]
          Wsr,
        /// <summary>
        /// WW property
        /// </summary>
          [XmlEnum("W/W")]
          WW,
        /// <summary>
        /// Wb property
        /// </summary>
          Wb,
        /// <summary>
        /// Wbm property
        /// </summary>
          [XmlEnum("Wb.m")]
          Wbm,
        /// <summary>
        /// Wbm1 property
        /// </summary>
          [XmlEnum("Wb/m")]
          Wbm1,
        /// <summary>
        /// Wbmm property
        /// </summary>
          [XmlEnum("Wb/mm")]
          Wbmm,
        /// <summary>
        /// wk property
        /// </summary>
          wk,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          [XmlEnum("yd[BnA]")]
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          [XmlEnum("yd[BnB]")]
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          [XmlEnum("yd[Cla]")]
          ydCla,
        /// <summary>
        /// ydInd property
        /// </summary>
          [XmlEnum("yd[Ind]")]
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("yd[Ind37]")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("yd[Ind62]")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("yd[Ind75]")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          [XmlEnum("yd[Se]")]
          ydSe,
        /// <summary>
        /// ydSeT property
        /// </summary>
          [XmlEnum("yd[SeT]")]
          ydSeT,
        /// <summary>
        /// ydUS property
        /// </summary>
          [XmlEnum("yd[US]")]
          ydUS,
        /// <summary>
        /// yd2 property
        /// </summary>
          yd2,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3
        }
        /// <summary>
        /// This class represents the GeochronologicalRank xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the GeochronologicalRank xsd enumeration.")]
        public enum GeochronologicalRank 
        {
        /// <summary>
        /// eon property
        /// </summary>
          eon,
        /// <summary>
        /// era property
        /// </summary>
          era,
        /// <summary>
        /// period property
        /// </summary>
          period,
        /// <summary>
        /// epoch property
        /// </summary>
          epoch,
        /// <summary>
        /// age property
        /// </summary>
          age,
        /// <summary>
        /// chron property
        /// </summary>
          chron
        }
        /// <summary>
        /// This class represents the LithologyKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LithologyKind xsd enumeration.")]
        public enum LithologyKind 
        {
        /// <summary>
        /// alkalifeldsparrhyolite property
        /// </summary>
          [XmlEnum("alkali feldspar rhyolite")]
          alkalifeldsparrhyolite,
        /// <summary>
        /// alkaliolivinebasalt property
        /// </summary>
          [XmlEnum("alkali olivine basalt")]
          alkaliolivinebasalt,
        /// <summary>
        /// amphibolite property
        /// </summary>
          amphibolite,
        /// <summary>
        /// andesite property
        /// </summary>
          andesite,
        /// <summary>
        /// anhydrite property
        /// </summary>
          anhydrite,
        /// <summary>
        /// anorthositicrock property
        /// </summary>
          [XmlEnum("anorthositic rock")]
          anorthositicrock,
        /// <summary>
        /// anthracite property
        /// </summary>
          anthracite,
        /// <summary>
        /// aplite property
        /// </summary>
          aplite,
        /// <summary>
        /// arenite property
        /// </summary>
          arenite,
        /// <summary>
        /// argillaceous property
        /// </summary>
          argillaceous,
        /// <summary>
        /// arkose property
        /// </summary>
          arkose,
        /// <summary>
        /// basalt property
        /// </summary>
          basalt,
        /// <summary>
        /// basanite property
        /// </summary>
          basanite,
        /// <summary>
        /// bauxite property
        /// </summary>
          bauxite,
        /// <summary>
        /// bituminouscoal property
        /// </summary>
          [XmlEnum("bituminous coal")]
          bituminouscoal,
        /// <summary>
        /// blueschistmetamorphicrock property
        /// </summary>
          [XmlEnum("blueschist metamorphic rock")]
          blueschistmetamorphicrock,
        /// <summary>
        /// boninite property
        /// </summary>
          boninite,
        /// <summary>
        /// breccia property
        /// </summary>
          breccia,
        /// <summary>
        /// carbonateooze property
        /// </summary>
          [XmlEnum("carbonate ooze")]
          carbonateooze,
        /// <summary>
        /// carbonatite property
        /// </summary>
          carbonatite,
        /// <summary>
        /// chalk property
        /// </summary>
          chalk,
        /// <summary>
        /// chert property
        /// </summary>
          chert,
        /// <summary>
        /// clay property
        /// </summary>
          clay,
        /// <summary>
        /// claystone property
        /// </summary>
          claystone,
        /// <summary>
        /// coal property
        /// </summary>
          coal,
        /// <summary>
        /// conglomerate property
        /// </summary>
          conglomerate,
        /// <summary>
        /// dacite property
        /// </summary>
          dacite,
        /// <summary>
        /// diabase property
        /// </summary>
          diabase,
        /// <summary>
        /// diamictite property
        /// </summary>
          diamictite,
        /// <summary>
        /// diorite property
        /// </summary>
          diorite,
        /// <summary>
        /// dioritoid property
        /// </summary>
          dioritoid,
        /// <summary>
        /// doleriticrock property
        /// </summary>
          [XmlEnum("doleritic rock")]
          doleriticrock,
        /// <summary>
        /// dolomite property
        /// </summary>
          dolomite,
        /// <summary>
        /// dolomitic property
        /// </summary>
          dolomitic,
        /// <summary>
        /// eclogite property
        /// </summary>
          eclogite,
        /// <summary>
        /// exoticalkalinerock property
        /// </summary>
          [XmlEnum("exotic alkaline rock")]
          exoticalkalinerock,
        /// <summary>
        /// feldspar property
        /// </summary>
          feldspar,
        /// <summary>
        /// feldspathicarenite property
        /// </summary>
          [XmlEnum("feldspathic arenite")]
          feldspathicarenite,
        /// <summary>
        /// finegrainedigneousrock property
        /// </summary>
          [XmlEnum("fine grained igneous rock")]
          finegrainedigneousrock,
        /// <summary>
        /// foiddioritoid property
        /// </summary>
          [XmlEnum("foid dioritoid")]
          foiddioritoid,
        /// <summary>
        /// foidgabbroid property
        /// </summary>
          [XmlEnum("foid gabbroid")]
          foidgabbroid,
        /// <summary>
        /// foidsyenitoid property
        /// </summary>
          [XmlEnum("foid syenitoid")]
          foidsyenitoid,
        /// <summary>
        /// foidite property
        /// </summary>
          foidite,
        /// <summary>
        /// foiditoid property
        /// </summary>
          foiditoid,
        /// <summary>
        /// foidolite property
        /// </summary>
          foidolite,
        /// <summary>
        /// foliatedmetamorphicrock property
        /// </summary>
          [XmlEnum("foliated metamorphic rock")]
          foliatedmetamorphicrock,
        /// <summary>
        /// fragmentaligneousrock property
        /// </summary>
          [XmlEnum("fragmental igneous rock")]
          fragmentaligneousrock,
        /// <summary>
        /// gabbro property
        /// </summary>
          gabbro,
        /// <summary>
        /// gabbroicrock property
        /// </summary>
          [XmlEnum("gabbroic rock")]
          gabbroicrock,
        /// <summary>
        /// gabbroid property
        /// </summary>
          gabbroid,
        /// <summary>
        /// glauconite property
        /// </summary>
          glauconite,
        /// <summary>
        /// gneiss property
        /// </summary>
          gneiss,
        /// <summary>
        /// granite property
        /// </summary>
          granite,
        /// <summary>
        /// granodiorite property
        /// </summary>
          granodiorite,
        /// <summary>
        /// granofels property
        /// </summary>
          granofels,
        /// <summary>
        /// granulite property
        /// </summary>
          granulite,
        /// <summary>
        /// gravel property
        /// </summary>
          gravel,
        /// <summary>
        /// greenstone property
        /// </summary>
          greenstone,
        /// <summary>
        /// gumbo property
        /// </summary>
          gumbo,
        /// <summary>
        /// gypsum property
        /// </summary>
          gypsum,
        /// <summary>
        /// halite property
        /// </summary>
          halite,
        /// <summary>
        /// hornfels property
        /// </summary>
          hornfels,
        /// <summary>
        /// igneousrock property
        /// </summary>
          [XmlEnum("igneous rock")]
          igneousrock,
        /// <summary>
        /// impactgeneratedmaterial property
        /// </summary>
          [XmlEnum("impact generated material")]
          impactgeneratedmaterial,
        /// <summary>
        /// impuredolomite property
        /// </summary>
          [XmlEnum("impure dolomite")]
          impuredolomite,
        /// <summary>
        /// impurelimestone property
        /// </summary>
          [XmlEnum("impure limestone")]
          impurelimestone,
        /// <summary>
        /// intrusiverockplutonic property
        /// </summary>
          [XmlEnum("intrusive rock (plutonic)")]
          intrusiverockplutonic,
        /// <summary>
        /// ironrichsedimentaryrock property
        /// </summary>
          [XmlEnum("iron rich sedimentary rock")]
          ironrichsedimentaryrock,
        /// <summary>
        /// kalsiliticandmeliliticrocks property
        /// </summary>
          [XmlEnum("kalsilitic and melilitic rocks")]
          kalsiliticandmeliliticrocks,
        /// <summary>
        /// komatiiticrock property
        /// </summary>
          [XmlEnum("komatiitic rock")]
          komatiiticrock,
        /// <summary>
        /// latiticrock property
        /// </summary>
          [XmlEnum("latitic rock")]
          latiticrock,
        /// <summary>
        /// lignite property
        /// </summary>
          lignite,
        /// <summary>
        /// limeboundstone property
        /// </summary>
          [XmlEnum("lime boundstone")]
          limeboundstone,
        /// <summary>
        /// limeframestone property
        /// </summary>
          [XmlEnum("lime framestone")]
          limeframestone,
        /// <summary>
        /// limegrainstone property
        /// </summary>
          [XmlEnum("lime grainstone")]
          limegrainstone,
        /// <summary>
        /// limemudstone property
        /// </summary>
          [XmlEnum("lime mudstone")]
          limemudstone,
        /// <summary>
        /// limepackstone property
        /// </summary>
          [XmlEnum("lime packstone")]
          limepackstone,
        /// <summary>
        /// limewackestone property
        /// </summary>
          [XmlEnum("lime wackestone")]
          limewackestone,
        /// <summary>
        /// limestone property
        /// </summary>
          limestone,
        /// <summary>
        /// marble property
        /// </summary>
          marble,
        /// <summary>
        /// marl property
        /// </summary>
          marl,
        /// <summary>
        /// metamorphicrock property
        /// </summary>
          [XmlEnum("metamorphic rock")]
          metamorphicrock,
        /// <summary>
        /// micaschist property
        /// </summary>
          [XmlEnum("mica schist")]
          micaschist,
        /// <summary>
        /// migmatite property
        /// </summary>
          migmatite,
        /// <summary>
        /// monzogabbro property
        /// </summary>
          monzogabbro,
        /// <summary>
        /// mud property
        /// </summary>
          mud,
        /// <summary>
        /// mudstone property
        /// </summary>
          mudstone,
        /// <summary>
        /// myloniticrock property
        /// </summary>
          [XmlEnum("mylonitic rock")]
          myloniticrock,
        /// <summary>
        /// nodescription property
        /// </summary>
          [XmlEnum("no description")]
          nodescription,
        /// <summary>
        /// nosample property
        /// </summary>
          [XmlEnum("no sample")]
          nosample,
        /// <summary>
        /// ooze property
        /// </summary>
          ooze,
        /// <summary>
        /// ophiolite property
        /// </summary>
          ophiolite,
        /// <summary>
        /// organicbearingmudstone property
        /// </summary>
          [XmlEnum("organic bearing mudstone")]
          organicbearingmudstone,
        /// <summary>
        /// peat property
        /// </summary>
          peat,
        /// <summary>
        /// pegmatite property
        /// </summary>
          pegmatite,
        /// <summary>
        /// peridotite property
        /// </summary>
          peridotite,
        /// <summary>
        /// phaneriticigneousrock property
        /// </summary>
          [XmlEnum("phaneritic igneous rock")]
          phaneriticigneousrock,
        /// <summary>
        /// phonolite property
        /// </summary>
          phonolite,
        /// <summary>
        /// phonolitoid property
        /// </summary>
          phonolitoid,
        /// <summary>
        /// phosphate property
        /// </summary>
          phosphate,
        /// <summary>
        /// phosphaterock property
        /// </summary>
          [XmlEnum("phosphate rock")]
          phosphaterock,
        /// <summary>
        /// phyllite property
        /// </summary>
          phyllite,
        /// <summary>
        /// porphyry property
        /// </summary>
          porphyry,
        /// <summary>
        /// potassiumandmagnesiumsalts property
        /// </summary>
          [XmlEnum("potassium and magnesium salts")]
          potassiumandmagnesiumsalts,
        /// <summary>
        /// pyroclasticbreccia property
        /// </summary>
          [XmlEnum("pyroclastic breccia")]
          pyroclasticbreccia,
        /// <summary>
        /// pyroclasticrock property
        /// </summary>
          [XmlEnum("pyroclastic rock")]
          pyroclasticrock,
        /// <summary>
        /// pyroxenite property
        /// </summary>
          pyroxenite,
        /// <summary>
        /// quartzarenite property
        /// </summary>
          [XmlEnum("quartz arenite")]
          quartzarenite,
        /// <summary>
        /// quartzite property
        /// </summary>
          quartzite,
        /// <summary>
        /// rhyolite property
        /// </summary>
          rhyolite,
        /// <summary>
        /// rocksalt property
        /// </summary>
          [XmlEnum("rock salt")]
          rocksalt,
        /// <summary>
        /// sand property
        /// </summary>
          sand,
        /// <summary>
        /// sandstone property
        /// </summary>
          sandstone,
        /// <summary>
        /// sandy property
        /// </summary>
          sandy,
        /// <summary>
        /// sapropel property
        /// </summary>
          sapropel,
        /// <summary>
        /// schist property
        /// </summary>
          schist,
        /// <summary>
        /// serpentinite property
        /// </summary>
          serpentinite,
        /// <summary>
        /// shale property
        /// </summary>
          shale,
        /// <summary>
        /// siliceousooze property
        /// </summary>
          [XmlEnum("siliceous ooze")]
          siliceousooze,
        /// <summary>
        /// silt property
        /// </summary>
          silt,
        /// <summary>
        /// siltstone property
        /// </summary>
          siltstone,
        /// <summary>
        /// skarn property
        /// </summary>
          skarn,
        /// <summary>
        /// slate property
        /// </summary>
          slate,
        /// <summary>
        /// spilite property
        /// </summary>
          spilite,
        /// <summary>
        /// syenite property
        /// </summary>
          syenite,
        /// <summary>
        /// syenitoid property
        /// </summary>
          syenitoid,
        /// <summary>
        /// sylvite property
        /// </summary>
          sylvite,
        /// <summary>
        /// tephrite property
        /// </summary>
          tephrite,
        /// <summary>
        /// tephritoid property
        /// </summary>
          tephritoid,
        /// <summary>
        /// tholeiiticbasalt property
        /// </summary>
          [XmlEnum("tholeiitic basalt")]
          tholeiiticbasalt,
        /// <summary>
        /// tonalite property
        /// </summary>
          tonalite,
        /// <summary>
        /// trachyte property
        /// </summary>
          trachyte,
        /// <summary>
        /// trachyticrock property
        /// </summary>
          [XmlEnum("trachytic rock")]
          trachyticrock,
        /// <summary>
        /// trachytoid property
        /// </summary>
          trachytoid,
        /// <summary>
        /// travertine property
        /// </summary>
          travertine,
        /// <summary>
        /// tuff property
        /// </summary>
          tuff,
        /// <summary>
        /// tuffite property
        /// </summary>
          tuffite,
        /// <summary>
        /// ultrabasic property
        /// </summary>
          ultrabasic,
        /// <summary>
        /// undifferentiated property
        /// </summary>
          undifferentiated,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// wacke property
        /// </summary>
          wacke
        }
        /// <summary>
        /// This class represents the LengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthUom xsd enumeration.")]
        public enum LengthUom 
        {
        /// <summary>
        /// Item01ft property
        /// </summary>
          [XmlEnum("0.1 ft")]
          Item01ft,
        /// <summary>
        /// Item01ftUS property
        /// </summary>
          [XmlEnum("0.1 ft[US]")]
          Item01ftUS,
        /// <summary>
        /// Item01in property
        /// </summary>
          [XmlEnum("0.1 in")]
          Item01in,
        /// <summary>
        /// Item01yd property
        /// </summary>
          [XmlEnum("0.1 yd")]
          Item01yd,
        /// <summary>
        /// Item116in property
        /// </summary>
          [XmlEnum("1/16 in")]
          Item116in,
        /// <summary>
        /// Item12ft property
        /// </summary>
          [XmlEnum("1/2 ft")]
          Item12ft,
        /// <summary>
        /// Item132in property
        /// </summary>
          [XmlEnum("1/32 in")]
          Item132in,
        /// <summary>
        /// Item164in property
        /// </summary>
          [XmlEnum("1/64 in")]
          Item164in,
        /// <summary>
        /// Item10ft property
        /// </summary>
          [XmlEnum("10 ft")]
          Item10ft,
        /// <summary>
        /// Item10in property
        /// </summary>
          [XmlEnum("10 in")]
          Item10in,
        /// <summary>
        /// Item10km property
        /// </summary>
          [XmlEnum("10 km")]
          Item10km,
        /// <summary>
        /// Item100ft property
        /// </summary>
          [XmlEnum("100 ft")]
          Item100ft,
        /// <summary>
        /// Item100km property
        /// </summary>
          [XmlEnum("100 km")]
          Item100km,
        /// <summary>
        /// Item1000ft property
        /// </summary>
          [XmlEnum("1000 ft")]
          Item1000ft,
        /// <summary>
        /// Item30ft property
        /// </summary>
          [XmlEnum("30 ft")]
          Item30ft,
        /// <summary>
        /// Item30m property
        /// </summary>
          [XmlEnum("30 m")]
          Item30m,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// chain property
        /// </summary>
          chain,
        /// <summary>
        /// chainBnA property
        /// </summary>
          [XmlEnum("chain[BnA]")]
          chainBnA,
        /// <summary>
        /// chainBnB property
        /// </summary>
          [XmlEnum("chain[BnB]")]
          chainBnB,
        /// <summary>
        /// chainCla property
        /// </summary>
          [XmlEnum("chain[Cla]")]
          chainCla,
        /// <summary>
        /// chainInd37 property
        /// </summary>
          [XmlEnum("chain[Ind37]")]
          chainInd37,
        /// <summary>
        /// chainSe property
        /// </summary>
          [XmlEnum("chain[Se]")]
          chainSe,
        /// <summary>
        /// chainSeT property
        /// </summary>
          [XmlEnum("chain[SeT]")]
          chainSeT,
        /// <summary>
        /// chainUS property
        /// </summary>
          [XmlEnum("chain[US]")]
          chainUS,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// dam property
        /// </summary>
          dam,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// Em property
        /// </summary>
          Em,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftBnA property
        /// </summary>
          [XmlEnum("ft[BnA]")]
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          [XmlEnum("ft[BnB]")]
          ftBnB,
        /// <summary>
        /// ftBr36 property
        /// </summary>
          [XmlEnum("ft[Br36]")]
          ftBr36,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ft[Br65]")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          [XmlEnum("ft[Cla]")]
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          [XmlEnum("ft[GC]")]
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          [XmlEnum("ft[Ind]")]
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ft[Ind37]")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ft[Ind62]")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ft[Ind75]")]
          ftInd75,
        /// <summary>
        /// ftSe property
        /// </summary>
          [XmlEnum("ft[Se]")]
          ftSe,
        /// <summary>
        /// ftSeT property
        /// </summary>
          [XmlEnum("ft[SeT]")]
          ftSeT,
        /// <summary>
        /// ftUS property
        /// </summary>
          [XmlEnum("ft[US]")]
          ftUS,
        /// <summary>
        /// furUS property
        /// </summary>
          [XmlEnum("fur[US]")]
          furUS,
        /// <summary>
        /// Gm property
        /// </summary>
          Gm,
        /// <summary>
        /// hm property
        /// </summary>
          hm,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// inUS property
        /// </summary>
          [XmlEnum("in[US]")]
          inUS,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// link property
        /// </summary>
          link,
        /// <summary>
        /// linkBnA property
        /// </summary>
          [XmlEnum("link[BnA]")]
          linkBnA,
        /// <summary>
        /// linkBnB property
        /// </summary>
          [XmlEnum("link[BnB]")]
          linkBnB,
        /// <summary>
        /// linkCla property
        /// </summary>
          [XmlEnum("link[Cla]")]
          linkCla,
        /// <summary>
        /// linkSe property
        /// </summary>
          [XmlEnum("link[Se]")]
          linkSe,
        /// <summary>
        /// linkSeT property
        /// </summary>
          [XmlEnum("link[SeT]")]
          linkSeT,
        /// <summary>
        /// linkUS property
        /// </summary>
          [XmlEnum("link[US]")]
          linkUS,
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// mGer property
        /// </summary>
          [XmlEnum("m[Ger]")]
          mGer,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// minaut property
        /// </summary>
          [XmlEnum("mi[naut]")]
          minaut,
        /// <summary>
        /// minautUK property
        /// </summary>
          [XmlEnum("mi[nautUK]")]
          minautUK,
        /// <summary>
        /// miUS property
        /// </summary>
          [XmlEnum("mi[US]")]
          miUS,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// mm property
        /// </summary>
          mm,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// rodUS property
        /// </summary>
          [XmlEnum("rod[US]")]
          rodUS,
        /// <summary>
        /// Tm property
        /// </summary>
          Tm,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          [XmlEnum("yd[BnA]")]
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          [XmlEnum("yd[BnB]")]
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          [XmlEnum("yd[Cla]")]
          ydCla,
        /// <summary>
        /// ydInd property
        /// </summary>
          [XmlEnum("yd[Ind]")]
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("yd[Ind37]")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("yd[Ind62]")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("yd[Ind75]")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          [XmlEnum("yd[Se]")]
          ydSe,
        /// <summary>
        /// ydSeT property
        /// </summary>
          [XmlEnum("yd[SeT]")]
          ydSeT,
        /// <summary>
        /// ydUS property
        /// </summary>
          [XmlEnum("yd[US]")]
          ydUS
        }
        /// <summary>
        /// This class represents the PhysicalStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PhysicalStatus xsd enumeration.")]
        public enum PhysicalStatus 
        {
        /// <summary>
        /// closed property
        /// </summary>
          closed,
        /// <summary>
        /// open property
        /// </summary>
          open,
        /// <summary>
        /// proposed property
        /// </summary>
          proposed
        }
        /// <summary>
        /// This class represents the PerforationStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PerforationStatus xsd enumeration.")]
        public enum PerforationStatus 
        {
        /// <summary>
        /// open property
        /// </summary>
          open,
        /// <summary>
        /// proposed property
        /// </summary>
          proposed,
        /// <summary>
        /// squeezed property
        /// </summary>
          squeezed
        }
        /// <summary>
        /// This class represents the CompletionStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the CompletionStatus xsd enumeration.")]
        public enum CompletionStatus 
        {
        /// <summary>
        /// active property
        /// </summary>
          active,
        /// <summary>
        /// inactive property
        /// </summary>
          inactive,
        /// <summary>
        /// permanentlyabandoned property
        /// </summary>
          [XmlEnum("permanently abandoned")]
          permanentlyabandoned,
        /// <summary>
        /// planned property
        /// </summary>
          planned,
        /// <summary>
        /// suspended property
        /// </summary>
          suspended,
        /// <summary>
        /// temporarilyabandoned property
        /// </summary>
          [XmlEnum("temporarily abandoned")]
          temporarilyabandoned,
        /// <summary>
        /// testing property
        /// </summary>
          testing
        }
        /// <summary>
        /// This class represents the ErrorTermSource xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ErrorTermSource xsd enumeration.")]
        public enum ErrorTermSource 
        {
        /// <summary>
        /// Errors arising from sensors in the survey tool.
        /// </summary>
          sensor,
        /// <summary>
        /// azimuthreference property
        /// </summary>
          [XmlEnum("azimuth reference")]
          azimuthreference,
        /// <summary>
        /// Errors arising from external magnetic field influences.
        /// </summary>
          magnetic,
        /// <summary>
        /// Errors arising from the misalignment of the tool relative to the borehole.
        /// </summary>
          alignment,
        /// <summary>
        /// Specifies the codes for the various classes of error source.
        /// </summary>
          misalignment,
        /// <summary>
        /// Errors arising from the measurement of depth. 
        /// </summary>
          depth,
        /// <summary>
        /// Errors arising from the measurement of depth.
        /// </summary>
          reference
        }
        /// <summary>
        /// This class represents the SurveyToolOperatingMode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the SurveyToolOperatingMode xsd enumeration.")]
        public enum SurveyToolOperatingMode 
        {
        /// <summary>
        /// continuousxy property
        /// </summary>
          [XmlEnum("continuous xy")]
          continuousxy,
        /// <summary>
        /// continuousxyz property
        /// </summary>
          [XmlEnum("continuous xyz")]
          continuousxyz,
        /// <summary>
        /// continuousz property
        /// </summary>
          [XmlEnum("continuous z")]
          continuousz,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// Tool is operating in a stationary mode.
        /// </summary>
          stationary
        }
        /// <summary>
        /// This class represents the PermeabilityLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermeabilityLengthUom xsd enumeration.")]
        public enum PermeabilityLengthUom 
        {
        /// <summary>
        /// Dft property
        /// </summary>
          [XmlEnum("D.ft")]
          Dft,
        /// <summary>
        /// Dm property
        /// </summary>
          [XmlEnum("D.m")]
          Dm,
        /// <summary>
        /// mDft property
        /// </summary>
          [XmlEnum("mD.ft")]
          mDft,
        /// <summary>
        /// mDm property
        /// </summary>
          [XmlEnum("mD.m")]
          mDm,
        /// <summary>
        /// TDAPIm property
        /// </summary>
          [XmlEnum("TD[API].m")]
          TDAPIm
        }
        /// <summary>
        /// This class represents the ThermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperatureUom 
        {
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degR property
        /// </summary>
          degR,
        /// <summary>
        /// K property
        /// </summary>
          K
        }
        /// <summary>
        /// This class represents the PermeabilityRockUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermeabilityRockUom xsd enumeration.")]
        public enum PermeabilityRockUom 
        {
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// DAPI property
        /// </summary>
          [XmlEnum("D[API]")]
          DAPI,
        /// <summary>
        /// mD property
        /// </summary>
          mD,
        /// <summary>
        /// TDAPI property
        /// </summary>
          [XmlEnum("TD[API]")]
          TDAPI
        }
        /// <summary>
        /// This class represents the PressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureUom xsd enumeration.")]
        public enum PressureUom 
        {
        /// <summary>
        /// Item001lbfft2 property
        /// </summary>
          [XmlEnum("0.01 lbf/ft2")]
          Item001lbfft2,
        /// <summary>
        /// at property
        /// </summary>
          at,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O[4degC]")]
          cmH2O4degC,
        /// <summary>
        /// cPa property
        /// </summary>
          cPa,
        /// <summary>
        /// dPa property
        /// </summary>
          dPa,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm2,
        /// <summary>
        /// EPa property
        /// </summary>
          EPa,
        /// <summary>
        /// fPa property
        /// </summary>
          fPa,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// inH2O39degF property
        /// </summary>
          [XmlEnum("inH2O[39degF]")]
          inH2O39degF,
        /// <summary>
        /// inH2O60degF property
        /// </summary>
          [XmlEnum("inH2O[60degF]")]
          inH2O60degF,
        /// <summary>
        /// inHg32degF property
        /// </summary>
          [XmlEnum("inHg[32degF]")]
          inHg32degF,
        /// <summary>
        /// inHg60degF property
        /// </summary>
          [XmlEnum("inHg[60degF]")]
          inHg60degF,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfm2 property
        /// </summary>
          [XmlEnum("kgf/m2")]
          kgfm2,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm2,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// mmHg0degC property
        /// </summary>
          [XmlEnum("mmHg[0degC]")]
          mmHg0degC,
        /// <summary>
        /// mPa property
        /// </summary>
          mPa,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm2,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// nPa property
        /// </summary>
          nPa,
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// tonfUKft2 property
        /// </summary>
          [XmlEnum("tonf[UK]/ft2")]
          tonfUKft2,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonf[US]/ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonf[US]/in2")]
          tonfUSin2,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// TPa property
        /// </summary>
          TPa,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// umHg0degC property
        /// </summary>
          [XmlEnum("umHg[0degC]")]
          umHg0degC,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi
        }
        /// <summary>
        /// This class represents the MassPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerMassUom xsd enumeration.")]
        public enum MassPerMassUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// mass property
        /// </summary>
          [XmlEnum("%[mass]")]
          mass,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// gt property
        /// </summary>
          [XmlEnum("g/t")]
          gt,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgsack94lbm property
        /// </summary>
          [XmlEnum("kg/sack[94lbm]")]
          kgsack94lbm,
        /// <summary>
        /// kgt property
        /// </summary>
          [XmlEnum("kg/t")]
          kgt,
        /// <summary>
        /// mgg property
        /// </summary>
          [XmlEnum("mg/g")]
          mgg,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// ngg property
        /// </summary>
          [XmlEnum("ng/g")]
          ngg,
        /// <summary>
        /// ngmg property
        /// </summary>
          [XmlEnum("ng/mg")]
          ngmg,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmmass property
        /// </summary>
          [XmlEnum("ppm[mass]")]
          ppmmass,
        /// <summary>
        /// ugg property
        /// </summary>
          [XmlEnum("ug/g")]
          ugg,
        /// <summary>
        /// ugmg property
        /// </summary>
          [XmlEnum("ug/mg")]
          ugmg
        }
        /// <summary>
        /// This class represents the MassPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumeUom xsd enumeration.")]
        public enum MassPerVolumeUom 
        {
        /// <summary>
        /// Item0001lbmbbl property
        /// </summary>
          [XmlEnum("0.001 lbm/bbl")]
          Item0001lbmbbl,
        /// <summary>
        /// Item0001lbmgalUK property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[UK]")]
          Item0001lbmgalUK,
        /// <summary>
        /// Item0001lbmgalUS property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[US]")]
          Item0001lbmgalUS,
        /// <summary>
        /// Item001grainft3 property
        /// </summary>
          [XmlEnum("0.01 grain/ft3")]
          Item001grainft3,
        /// <summary>
        /// Item01lbmbbl property
        /// </summary>
          [XmlEnum("0.1 lbm/bbl")]
          Item01lbmbbl,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10 Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/gal[UK]")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/gal[US]")]
          ggalUS,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/gal[US]")]
          graingalUS,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/gal[UK]")]
          lbmgalUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/gal[US]")]
          lbmgalUS,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/gal[US]")]
          mggalUS,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// tm3 property
        /// </summary>
          [XmlEnum("t/m3")]
          tm3,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3
        }
        /// <summary>
        /// This class represents the DimensionlessUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DimensionlessUom xsd enumeration.")]
        public enum DimensionlessUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// dEuc property
        /// </summary>
          dEuc,
        /// <summary>
        /// EEuc property
        /// </summary>
          EEuc,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// fEuc property
        /// </summary>
          fEuc,
        /// <summary>
        /// GEuc property
        /// </summary>
          GEuc,
        /// <summary>
        /// kEuc property
        /// </summary>
          kEuc,
        /// <summary>
        /// MEuc property
        /// </summary>
          MEuc,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// pEuc property
        /// </summary>
          pEuc,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// TEuc property
        /// </summary>
          TEuc,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc
        }
        /// <summary>
        /// This class represents the AreaPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerMassUom xsd enumeration.")]
        public enum AreaPerMassUom 
        {
        /// <summary>
        /// cm2g property
        /// </summary>
          [XmlEnum("cm2/g")]
          cm2g,
        /// <summary>
        /// ft2lbm property
        /// </summary>
          [XmlEnum("ft2/lbm")]
          ft2lbm,
        /// <summary>
        /// m2g property
        /// </summary>
          [XmlEnum("m2/g")]
          m2g,
        /// <summary>
        /// m2kg property
        /// </summary>
          [XmlEnum("m2/kg")]
          m2kg
        }
        /// <summary>
        /// This class represents the StimMaterialKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimMaterialKind xsd enumeration.")]
        public enum StimMaterialKind 
        {
        /// <summary>
        /// additive property
        /// </summary>
          additive,
        /// <summary>
        /// brine property
        /// </summary>
          brine,
        /// <summary>
        /// CO2 property
        /// </summary>
          CO2,
        /// <summary>
        /// gel property
        /// </summary>
          gel,
        /// <summary>
        /// N2 property
        /// </summary>
          N2,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// proppantagent property
        /// </summary>
          [XmlEnum("proppant agent")]
          proppantagent,
        /// <summary>
        /// water property
        /// </summary>
          water
        }
        /// <summary>
        /// This class represents the StimAdditiveKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimAdditiveKind xsd enumeration.")]
        public enum StimAdditiveKind 
        {
        /// <summary>
        /// acid property
        /// </summary>
          acid,
        /// <summary>
        /// activator property
        /// </summary>
          activator,
        /// <summary>
        /// biocide property
        /// </summary>
          biocide,
        /// <summary>
        /// breaker property
        /// </summary>
          breaker,
        /// <summary>
        /// breakeraid property
        /// </summary>
          [XmlEnum("breaker aid")]
          breakeraid,
        /// <summary>
        /// buffer property
        /// </summary>
          buffer,
        /// <summary>
        /// claystabilizer property
        /// </summary>
          [XmlEnum("clay stabilizer")]
          claystabilizer,
        /// <summary>
        /// corrosioninhibitor property
        /// </summary>
          [XmlEnum("corrosion inhibitor")]
          corrosioninhibitor,
        /// <summary>
        /// corrosioninhibitoraid property
        /// </summary>
          [XmlEnum("corrosion inhibitor aid")]
          corrosioninhibitoraid,
        /// <summary>
        /// crosslinker property
        /// </summary>
          crosslinker,
        /// <summary>
        /// delayingagent property
        /// </summary>
          [XmlEnum("delaying agent")]
          delayingagent,
        /// <summary>
        /// fibers property
        /// </summary>
          fibers,
        /// <summary>
        /// fluidlossadditive property
        /// </summary>
          [XmlEnum("fluid loss additive")]
          fluidlossadditive,
        /// <summary>
        /// foamer property
        /// </summary>
          foamer,
        /// <summary>
        /// frictionreducer property
        /// </summary>
          [XmlEnum("friction reducer")]
          frictionreducer,
        /// <summary>
        /// gellingagent property
        /// </summary>
          [XmlEnum("gelling agent")]
          gellingagent,
        /// <summary>
        /// ironcontroladditive property
        /// </summary>
          [XmlEnum("iron control additive")]
          ironcontroladditive,
        /// <summary>
        /// mutualsolvent property
        /// </summary>
          [XmlEnum("mutual solvent")]
          mutualsolvent,
        /// <summary>
        /// salt property
        /// </summary>
          salt,
        /// <summary>
        /// stabilizer property
        /// </summary>
          stabilizer,
        /// <summary>
        /// surfactant property
        /// </summary>
          surfactant
        }
        /// <summary>
        /// This class represents the ProppantAgentKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ProppantAgentKind xsd enumeration.")]
        public enum ProppantAgentKind 
        {
        /// <summary>
        /// ceramic property
        /// </summary>
          ceramic,
        /// <summary>
        /// resincoatedceramic property
        /// </summary>
          [XmlEnum("resin coated ceramic")]
          resincoatedceramic,
        /// <summary>
        /// resincoatedsand property
        /// </summary>
          [XmlEnum("resin coated sand")]
          resincoatedsand,
        /// <summary>
        /// sand property
        /// </summary>
          sand
        }
        /// <summary>
        /// This class represents the StimJobDiversionMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimJobDiversionMethod xsd enumeration.")]
        public enum StimJobDiversionMethod 
        {
        /// <summary>
        /// ballsealer property
        /// </summary>
          [XmlEnum("ball sealer")]
          ballsealer,
        /// <summary>
        /// bands property
        /// </summary>
          bands,
        /// <summary>
        /// chemical property
        /// </summary>
          chemical,
        /// <summary>
        /// fibers property
        /// </summary>
          fibers,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// packer property
        /// </summary>
          packer,
        /// <summary>
        /// solidparticle property
        /// </summary>
          [XmlEnum("solid particle")]
          solidparticle,
        /// <summary>
        /// straddlepacker property
        /// </summary>
          [XmlEnum("straddle packer")]
          straddlepacker
        }
        /// <summary>
        /// This class represents the IsothermalCompressibilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the IsothermalCompressibilityUom xsd enumeration.")]
        public enum IsothermalCompressibilityUom 
        {
        /// <summary>
        /// dm3kWh property
        /// </summary>
          [XmlEnum("dm3/(kW.h)")]
          dm3kWh,
        /// <summary>
        /// dm3MJ property
        /// </summary>
          [XmlEnum("dm3/MJ")]
          dm3MJ,
        /// <summary>
        /// m3kWh property
        /// </summary>
          [XmlEnum("m3/(kW.h)")]
          m3kWh,
        /// <summary>
        /// m3J property
        /// </summary>
          [XmlEnum("m3/J")]
          m3J,
        /// <summary>
        /// mm3J property
        /// </summary>
          [XmlEnum("mm3/J")]
          mm3J,
        /// <summary>
        /// ptUKhph property
        /// </summary>
          [XmlEnum("pt[UK]/(hp.h)")]
          ptUKhph
        }
        /// <summary>
        /// This class represents the DynamicViscosityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DynamicViscosityUom xsd enumeration.")]
        public enum DynamicViscosityUom 
        {
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// dP property
        /// </summary>
          dP,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// EP property
        /// </summary>
          EP,
        /// <summary>
        /// fP property
        /// </summary>
          fP,
        /// <summary>
        /// GP property
        /// </summary>
          GP,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// kP property
        /// </summary>
          kP,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// mP property
        /// </summary>
          mP,
        /// <summary>
        /// MP property
        /// </summary>
          MP,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2,
        /// <summary>
        /// nP property
        /// </summary>
          nP,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// pP property
        /// </summary>
          pP,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// TP property
        /// </summary>
          TP,
        /// <summary>
        /// uP property
        /// </summary>
          uP
        }
        /// <summary>
        /// This class represents the VolumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerVolumeUom xsd enumeration.")]
        public enum VolumePerVolumeUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// vol property
        /// </summary>
          [XmlEnum("%[vol]")]
          vol,
        /// <summary>
        /// Item0001bblft3 property
        /// </summary>
          [XmlEnum("0.001 bbl/ft3")]
          Item0001bblft3,
        /// <summary>
        /// Item0001bblm3 property
        /// </summary>
          [XmlEnum("0.001 bbl/m3")]
          Item0001bblm3,
        /// <summary>
        /// Item0001galUKbbl property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/bbl")]
          Item0001galUKbbl,
        /// <summary>
        /// Item0001galUKgalUK property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/gal[UK]")]
          Item0001galUKgalUK,
        /// <summary>
        /// Item0001galUSbbl property
        /// </summary>
          [XmlEnum("0.001 gal[US]/bbl")]
          Item0001galUSbbl,
        /// <summary>
        /// Item0001galUSft3 property
        /// </summary>
          [XmlEnum("0.001 gal[US]/ft3")]
          Item0001galUSft3,
        /// <summary>
        /// Item0001galUSgalUS property
        /// </summary>
          [XmlEnum("0.001 gal[US]/gal[US]")]
          Item0001galUSgalUS,
        /// <summary>
        /// Item0001ptUKbbl property
        /// </summary>
          [XmlEnum("0.001 pt[UK]/bbl")]
          Item0001ptUKbbl,
        /// <summary>
        /// Item001bblbbl property
        /// </summary>
          [XmlEnum("0.01 bbl/bbl")]
          Item001bblbbl,
        /// <summary>
        /// Item01galUSbbl property
        /// </summary>
          [XmlEnum("0.1 gal[US]/bbl")]
          Item01galUSbbl,
        /// <summary>
        /// Item01Lbbl property
        /// </summary>
          [XmlEnum("0.1 L/bbl")]
          Item01Lbbl,
        /// <summary>
        /// Item01ptUSbbl property
        /// </summary>
          [XmlEnum("0.1 pt[US]/bbl")]
          Item01ptUSbbl,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000 ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// Item1000m3m3 property
        /// </summary>
          [XmlEnum("1000 m3/m3")]
          Item1000m3m3,
        /// <summary>
        /// Item1E6acreftbbl property
        /// </summary>
          [XmlEnum("1E-6 acre.ft/bbl")]
          Item1E6acreftbbl,
        /// <summary>
        /// Item1E6bblft3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/ft3")]
          Item1E6bblft3,
        /// <summary>
        /// Item1E6bblm3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/m3")]
          Item1E6bblm3,
        /// <summary>
        /// Item1E6bblacreft property
        /// </summary>
          [XmlEnum("1E6 bbl/(acre.ft)")]
          Item1E6bblacreft,
        /// <summary>
        /// Item1E6ft3acreft property
        /// </summary>
          [XmlEnum("1E6 ft3/(acre.ft)")]
          Item1E6ft3acreft,
        /// <summary>
        /// Item1E6ft3bbl property
        /// </summary>
          [XmlEnum("1E6 ft3/bbl")]
          Item1E6ft3bbl,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/(acre.ft)")]
          bblacreft,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bblm3 property
        /// </summary>
          [XmlEnum("bbl/m3")]
          bblm3,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3L property
        /// </summary>
          [XmlEnum("cm3/L")]
          cm3L,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("gal[UK]/ft3")]
          galUKft3,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("gal[US]/bbl")]
          galUSbbl,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("gal[US]/ft3")]
          galUSft3,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/(ha.m)")]
          m3ham,
        /// <summary>
        /// m3bbl property
        /// </summary>
          [XmlEnum("m3/bbl")]
          m3bbl,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/gal[UK]")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/gal[US]")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmvol property
        /// </summary>
          [XmlEnum("ppm[vol]")]
          ppmvol
        }
        /// <summary>
        /// This class represents the VolumePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerLengthUom xsd enumeration.")]
        public enum VolumePerLengthUom 
        {
        /// <summary>
        /// Item001dm3km property
        /// </summary>
          [XmlEnum("0.01 dm3/km")]
          Item001dm3km,
        /// <summary>
        /// Item001Lkm property
        /// </summary>
          [XmlEnum("0.01 L/km")]
          Item001Lkm,
        /// <summary>
        /// bblft property
        /// </summary>
          [XmlEnum("bbl/ft")]
          bblft,
        /// <summary>
        /// bblin property
        /// </summary>
          [XmlEnum("bbl/in")]
          bblin,
        /// <summary>
        /// bblmi property
        /// </summary>
          [XmlEnum("bbl/mi")]
          bblmi,
        /// <summary>
        /// dm3m property
        /// </summary>
          [XmlEnum("dm3/m")]
          dm3m,
        /// <summary>
        /// ft3ft property
        /// </summary>
          [XmlEnum("ft3/ft")]
          ft3ft,
        /// <summary>
        /// galUKmi property
        /// </summary>
          [XmlEnum("gal[UK]/mi")]
          galUKmi,
        /// <summary>
        /// galUSft property
        /// </summary>
          [XmlEnum("gal[US]/ft")]
          galUSft,
        /// <summary>
        /// galUSmi property
        /// </summary>
          [XmlEnum("gal[US]/mi")]
          galUSmi,
        /// <summary>
        /// in3ft property
        /// </summary>
          [XmlEnum("in3/ft")]
          in3ft,
        /// <summary>
        /// Lm property
        /// </summary>
          [XmlEnum("L/m")]
          Lm,
        /// <summary>
        /// m3km property
        /// </summary>
          [XmlEnum("m3/km")]
          m3km,
        /// <summary>
        /// m3m property
        /// </summary>
          [XmlEnum("m3/m")]
          m3m
        }
        /// <summary>
        /// This class represents the MassPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerLengthUom xsd enumeration.")]
        public enum MassPerLengthUom 
        {
        /// <summary>
        /// kgmcm2 property
        /// </summary>
          [XmlEnum("kg.m/cm2")]
          kgmcm2,
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg/m")]
          kgm,
        /// <summary>
        /// klbmin property
        /// </summary>
          [XmlEnum("klbm/in")]
          klbmin,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm/ft")]
          lbmft,
        /// <summary>
        /// Mgin property
        /// </summary>
          [XmlEnum("Mg/in")]
          Mgin
        }
        /// <summary>
        /// This class represents the ForcePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerVolumeUom xsd enumeration.")]
        public enum ForcePerVolumeUom 
        {
        /// <summary>
        /// Item0001psift property
        /// </summary>
          [XmlEnum("0.001 psi/ft")]
          Item0001psift,
        /// <summary>
        /// Item001psift property
        /// </summary>
          [XmlEnum("0.01 psi/ft")]
          Item001psift,
        /// <summary>
        /// atmft property
        /// </summary>
          [XmlEnum("atm/ft")]
          atmft,
        /// <summary>
        /// atmhm property
        /// </summary>
          [XmlEnum("atm/hm")]
          atmhm,
        /// <summary>
        /// atmm property
        /// </summary>
          [XmlEnum("atm/m")]
          atmm,
        /// <summary>
        /// barkm property
        /// </summary>
          [XmlEnum("bar/km")]
          barkm,
        /// <summary>
        /// barm property
        /// </summary>
          [XmlEnum("bar/m")]
          barm,
        /// <summary>
        /// GPacm property
        /// </summary>
          [XmlEnum("GPa/cm")]
          GPacm,
        /// <summary>
        /// kPahm property
        /// </summary>
          [XmlEnum("kPa/hm")]
          kPahm,
        /// <summary>
        /// kPam property
        /// </summary>
          [XmlEnum("kPa/m")]
          kPam,
        /// <summary>
        /// lbfft3 property
        /// </summary>
          [XmlEnum("lbf/ft3")]
          lbfft3,
        /// <summary>
        /// lbfgalUS property
        /// </summary>
          [XmlEnum("lbf/gal[US]")]
          lbfgalUS,
        /// <summary>
        /// MPam property
        /// </summary>
          [XmlEnum("MPa/m")]
          MPam,
        /// <summary>
        /// Nm3 property
        /// </summary>
          [XmlEnum("N/m3")]
          Nm3,
        /// <summary>
        /// Pam property
        /// </summary>
          [XmlEnum("Pa/m")]
          Pam,
        /// <summary>
        /// psift property
        /// </summary>
          [XmlEnum("psi/ft")]
          psift,
        /// <summary>
        /// psim property
        /// </summary>
          [XmlEnum("psi/m")]
          psim
        }
        /// <summary>
        /// This class represents the StimFlowPathType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimFlowPathType xsd enumeration.")]
        public enum StimFlowPathType 
        {
        /// <summary>
        /// Fluid is conducted through the annulus.
        /// </summary>
          annulus,
        /// <summary>
        /// Fluid is conducted through the casing (no tubing present).
        /// </summary>
          casing,
        /// <summary>
        /// drillpipe property
        /// </summary>
          [XmlEnum("drill pipe")]
          drillpipe,
        /// <summary>
        /// openhole property
        /// </summary>
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// Fluid is conducted through tubing.
        /// </summary>
          tubing,
        /// <summary>
        /// tubingandannulus property
        /// </summary>
          [XmlEnum("tubing and annulus")]
          tubingandannulus
        }
        /// <summary>
        /// This class represents the StimFluidKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimFluidKind xsd enumeration.")]
        public enum StimFluidKind 
        {
        /// <summary>
        /// acidbased property
        /// </summary>
          [XmlEnum("acid-based")]
          acidbased,
        /// <summary>
        /// gas property
        /// </summary>
          gas,
        /// <summary>
        /// oilbased property
        /// </summary>
          [XmlEnum("oil-based")]
          oilbased,
        /// <summary>
        /// waterbased property
        /// </summary>
          [XmlEnum("water-based")]
          waterbased
        }
        /// <summary>
        /// This class represents the StimFluidSubtype xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimFluidSubtype xsd enumeration.")]
        public enum StimFluidSubtype 
        {
        /// <summary>
        /// acid property
        /// </summary>
          acid,
        /// <summary>
        /// base property
        /// </summary>
          @base,
        /// <summary>
        /// carbondioxide property
        /// </summary>
          [XmlEnum("carbon dioxide")]
          carbondioxide,
        /// <summary>
        /// carbondioxideandnitrogen property
        /// </summary>
          [XmlEnum("carbon dioxide and nitrogen")]
          carbondioxideandnitrogen,
        /// <summary>
        /// carbondioxideandwater property
        /// </summary>
          [XmlEnum("carbon dioxide and water")]
          carbondioxideandwater,
        /// <summary>
        /// condensate property
        /// </summary>
          condensate,
        /// <summary>
        /// crosslinkedgel property
        /// </summary>
          [XmlEnum("cross-linked gel")]
          crosslinkedgel,
        /// <summary>
        /// crudeoil property
        /// </summary>
          [XmlEnum("crude oil")]
          crudeoil,
        /// <summary>
        /// diesel property
        /// </summary>
          diesel,
        /// <summary>
        /// foam property
        /// </summary>
          foam,
        /// <summary>
        /// fracturingoil property
        /// </summary>
          [XmlEnum("fracturing oil")]
          fracturingoil,
        /// <summary>
        /// freshwater property
        /// </summary>
          [XmlEnum("fresh water")]
          freshwater,
        /// <summary>
        /// gelledacid property
        /// </summary>
          [XmlEnum("gelled acid")]
          gelledacid,
        /// <summary>
        /// gelledcondensate property
        /// </summary>
          [XmlEnum("gelled condensate")]
          gelledcondensate,
        /// <summary>
        /// gelledcrude property
        /// </summary>
          [XmlEnum("gelled crude")]
          gelledcrude,
        /// <summary>
        /// gelleddiesel property
        /// </summary>
          [XmlEnum("gelled diesel")]
          gelleddiesel,
        /// <summary>
        /// gelledoil property
        /// </summary>
          [XmlEnum("gelled oil")]
          gelledoil,
        /// <summary>
        /// gelledsaltwater property
        /// </summary>
          [XmlEnum("gelled salt water")]
          gelledsaltwater,
        /// <summary>
        /// hotcondensate property
        /// </summary>
          [XmlEnum("hot condensate")]
          hotcondensate,
        /// <summary>
        /// hotfreshwater property
        /// </summary>
          [XmlEnum("hot fresh water")]
          hotfreshwater,
        /// <summary>
        /// hotoil property
        /// </summary>
          [XmlEnum("hot oil")]
          hotoil,
        /// <summary>
        /// hotsaltwater property
        /// </summary>
          [XmlEnum("hot salt water")]
          hotsaltwater,
        /// <summary>
        /// hybrid property
        /// </summary>
          hybrid,
        /// <summary>
        /// lineargel property
        /// </summary>
          [XmlEnum("linear gel")]
          lineargel,
        /// <summary>
        /// liquefiedpetroleumgas property
        /// </summary>
          [XmlEnum("liquefied petroleum gas")]
          liquefiedpetroleumgas,
        /// <summary>
        /// nitrogen property
        /// </summary>
          nitrogen,
        /// <summary>
        /// oil property
        /// </summary>
          oil,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// producedwater property
        /// </summary>
          [XmlEnum("produced water")]
          producedwater,
        /// <summary>
        /// saltwater property
        /// </summary>
          [XmlEnum("salt water")]
          saltwater,
        /// <summary>
        /// slickwater property
        /// </summary>
          [XmlEnum("slick water")]
          slickwater
        }
        /// <summary>
        /// This class represents the VolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumeUom xsd enumeration.")]
        public enum VolumeUom 
        {
        /// <summary>
        /// Item1000bbl property
        /// </summary>
          [XmlEnum("1000 bbl")]
          Item1000bbl,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000 ft3")]
          Item1000ft3,
        /// <summary>
        /// Item1000galUK property
        /// </summary>
          [XmlEnum("1000 gal[UK]")]
          Item1000galUK,
        /// <summary>
        /// Item1000galUS property
        /// </summary>
          [XmlEnum("1000 gal[US]")]
          Item1000galUS,
        /// <summary>
        /// Item1000m3 property
        /// </summary>
          [XmlEnum("1000 m3")]
          Item1000m3,
        /// <summary>
        /// Item1E6galUS property
        /// </summary>
          [XmlEnum("1E-6 gal[US]")]
          Item1E6galUS,
        /// <summary>
        /// Item1E12ft3 property
        /// </summary>
          [XmlEnum("1E12 ft3")]
          Item1E12ft3,
        /// <summary>
        /// Item1E6bbl property
        /// </summary>
          [XmlEnum("1E6 bbl")]
          Item1E6bbl,
        /// <summary>
        /// Item1E6ft3 property
        /// </summary>
          [XmlEnum("1E6 ft3")]
          Item1E6ft3,
        /// <summary>
        /// Item1E6m3 property
        /// </summary>
          [XmlEnum("1E6 m3")]
          Item1E6m3,
        /// <summary>
        /// Item1E9bbl property
        /// </summary>
          [XmlEnum("1E9 bbl")]
          Item1E9bbl,
        /// <summary>
        /// Item1E9ft3 property
        /// </summary>
          [XmlEnum("1E9 ft3")]
          Item1E9ft3,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// dm3 property
        /// </summary>
          dm3,
        /// <summary>
        /// flozUK property
        /// </summary>
          [XmlEnum("floz[UK]")]
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          [XmlEnum("floz[US]")]
          flozUS,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// galUK property
        /// </summary>
          [XmlEnum("gal[UK]")]
          galUK,
        /// <summary>
        /// galUS property
        /// </summary>
          [XmlEnum("gal[US]")]
          galUS,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// mm3 property
        /// </summary>
          mm3,
        /// <summary>
        /// ptUK property
        /// </summary>
          [XmlEnum("pt[UK]")]
          ptUK,
        /// <summary>
        /// ptUS property
        /// </summary>
          [XmlEnum("pt[US]")]
          ptUS,
        /// <summary>
        /// qtUK property
        /// </summary>
          [XmlEnum("qt[UK]")]
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          [XmlEnum("qt[US]")]
          qtUS,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3
        }
        /// <summary>
        /// This class represents the MassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassUom xsd enumeration.")]
        public enum MassUom 
        {
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// cg property
        /// </summary>
          cg,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cwtUK property
        /// </summary>
          [XmlEnum("cwt[UK]")]
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          [XmlEnum("cwt[US]")]
          cwtUS,
        /// <summary>
        /// Eg property
        /// </summary>
          Eg,
        /// <summary>
        /// fg property
        /// </summary>
          fg,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// Gg property
        /// </summary>
          Gg,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// hg property
        /// </summary>
          hg,
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// ng property
        /// </summary>
          ng,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// ozmtroy property
        /// </summary>
          [XmlEnum("ozm[troy]")]
          ozmtroy,
        /// <summary>
        /// pg property
        /// </summary>
          pg,
        /// <summary>
        /// sack94lbm property
        /// </summary>
          [XmlEnum("sack[94lbm]")]
          sack94lbm,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// Tg property
        /// </summary>
          Tg,
        /// <summary>
        /// tonUK property
        /// </summary>
          [XmlEnum("ton[UK]")]
          tonUK,
        /// <summary>
        /// tonUS property
        /// </summary>
          [XmlEnum("ton[US]")]
          tonUS,
        /// <summary>
        /// ug property
        /// </summary>
          ug
        }
        /// <summary>
        /// This class represents the MassPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerTimeUom xsd enumeration.")]
        public enum MassPerTimeUom 
        {
        /// <summary>
        /// Item1E6lbma property
        /// </summary>
          [XmlEnum("1E6 lbm/a")]
          Item1E6lbma,
        /// <summary>
        /// gs property
        /// </summary>
          [XmlEnum("g/s")]
          gs,
        /// <summary>
        /// kgd property
        /// </summary>
          [XmlEnum("kg/d")]
          kgd,
        /// <summary>
        /// kgh property
        /// </summary>
          [XmlEnum("kg/h")]
          kgh,
        /// <summary>
        /// kgmin property
        /// </summary>
          [XmlEnum("kg/min")]
          kgmin,
        /// <summary>
        /// kgs property
        /// </summary>
          [XmlEnum("kg/s")]
          kgs,
        /// <summary>
        /// lbmd property
        /// </summary>
          [XmlEnum("lbm/d")]
          lbmd,
        /// <summary>
        /// lbmh property
        /// </summary>
          [XmlEnum("lbm/h")]
          lbmh,
        /// <summary>
        /// lbmmin property
        /// </summary>
          [XmlEnum("lbm/min")]
          lbmmin,
        /// <summary>
        /// lbms property
        /// </summary>
          [XmlEnum("lbm/s")]
          lbms,
        /// <summary>
        /// Mga property
        /// </summary>
          [XmlEnum("Mg/a")]
          Mga,
        /// <summary>
        /// Mgd property
        /// </summary>
          [XmlEnum("Mg/d")]
          Mgd,
        /// <summary>
        /// Mgh property
        /// </summary>
          [XmlEnum("Mg/h")]
          Mgh,
        /// <summary>
        /// Mgmin property
        /// </summary>
          [XmlEnum("Mg/min")]
          Mgmin,
        /// <summary>
        /// ta property
        /// </summary>
          [XmlEnum("t/a")]
          ta,
        /// <summary>
        /// td property
        /// </summary>
          [XmlEnum("t/d")]
          td,
        /// <summary>
        /// th property
        /// </summary>
          [XmlEnum("t/h")]
          th,
        /// <summary>
        /// tmin property
        /// </summary>
          [XmlEnum("t/min")]
          tmin,
        /// <summary>
        /// tonUKa property
        /// </summary>
          [XmlEnum("ton[UK]/a")]
          tonUKa,
        /// <summary>
        /// tonUKd property
        /// </summary>
          [XmlEnum("ton[UK]/d")]
          tonUKd,
        /// <summary>
        /// tonUKh property
        /// </summary>
          [XmlEnum("ton[UK]/h")]
          tonUKh,
        /// <summary>
        /// tonUKmin property
        /// </summary>
          [XmlEnum("ton[UK]/min")]
          tonUKmin,
        /// <summary>
        /// tonUSa property
        /// </summary>
          [XmlEnum("ton[US]/a")]
          tonUSa,
        /// <summary>
        /// tonUSd property
        /// </summary>
          [XmlEnum("ton[US]/d")]
          tonUSd,
        /// <summary>
        /// tonUSh property
        /// </summary>
          [XmlEnum("ton[US]/h")]
          tonUSh,
        /// <summary>
        /// tonUSmin property
        /// </summary>
          [XmlEnum("ton[US]/min")]
          tonUSmin
        }
        /// <summary>
        /// This class represents the VolumePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimeUom xsd enumeration.")]
        public enum VolumePerTimeUom 
        {
        /// <summary>
        /// Item130cm3min property
        /// </summary>
          [XmlEnum("1/30 cm3/min")]
          Item130cm3min,
        /// <summary>
        /// Item1000bbld property
        /// </summary>
          [XmlEnum("1000 bbl/d")]
          Item1000bbld,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000 ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000 m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000 m3/h")]
          Item1000m3h,
        /// <summary>
        /// Item1E6bbld property
        /// </summary>
          [XmlEnum("1E6 bbl/d")]
          Item1E6bbld,
        /// <summary>
        /// Item1E6ft3d property
        /// </summary>
          [XmlEnum("1E6 ft3/d")]
          Item1E6ft3d,
        /// <summary>
        /// Item1E6m3d property
        /// </summary>
          [XmlEnum("1E6 m3/d")]
          Item1E6m3d,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bblh property
        /// </summary>
          [XmlEnum("bbl/h")]
          bblh,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("gal[UK]/d")]
          galUKd,
        /// <summary>
        /// galUKh property
        /// </summary>
          [XmlEnum("gal[UK]/h")]
          galUKh,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("gal[UK]/min")]
          galUKmin,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("gal[US]/d")]
          galUSd,
        /// <summary>
        /// galUSh property
        /// </summary>
          [XmlEnum("gal[US]/h")]
          galUSh,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("gal[US]/min")]
          galUSmin,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s
        }
        /// <summary>
        /// This class represents the PowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerUom xsd enumeration.")]
        public enum PowerUom 
        {
        /// <summary>
        /// cW property
        /// </summary>
          cW,
        /// <summary>
        /// dW property
        /// </summary>
          dW,
        /// <summary>
        /// EW property
        /// </summary>
          EW,
        /// <summary>
        /// fW property
        /// </summary>
          fW,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// hp property
        /// </summary>
          hp,
        /// <summary>
        /// hpelec property
        /// </summary>
          [XmlEnum("hp[elec]")]
          hpelec,
        /// <summary>
        /// hphyd property
        /// </summary>
          [XmlEnum("hp[hyd]")]
          hphyd,
        /// <summary>
        /// hpmetric property
        /// </summary>
          [XmlEnum("hp[metric]")]
          hpmetric,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// pW property
        /// </summary>
          pW,
        /// <summary>
        /// tonRefrig property
        /// </summary>
          tonRefrig,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// uW property
        /// </summary>
          uW,
        /// <summary>
        /// W property
        /// </summary>
          W
        }
        /// <summary>
        /// This class represents the TimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimeUom xsd enumeration.")]
        public enum TimeUom 
        {
        /// <summary>
        /// Item12ms property
        /// </summary>
          [XmlEnum("1/2 ms")]
          Item12ms,
        /// <summary>
        /// Item100kat property
        /// </summary>
          [XmlEnum("100 ka[t]")]
          Item100kat,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// at property
        /// </summary>
          [XmlEnum("a[t]")]
          at,
        /// <summary>
        /// ca property
        /// </summary>
          ca,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// ds property
        /// </summary>
          ds,
        /// <summary>
        /// Eat property
        /// </summary>
          [XmlEnum("Ea[t]")]
          Eat,
        /// <summary>
        /// fa property
        /// </summary>
          fa,
        /// <summary>
        /// Gat property
        /// </summary>
          [XmlEnum("Ga[t]")]
          Gat,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// hs property
        /// </summary>
          hs,
        /// <summary>
        /// kat property
        /// </summary>
          [XmlEnum("ka[t]")]
          kat,
        /// <summary>
        /// Mat property
        /// </summary>
          [XmlEnum("Ma[t]")]
          Mat,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// ms property
        /// </summary>
          ms,
        /// <summary>
        /// na property
        /// </summary>
          na,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// Tat property
        /// </summary>
          [XmlEnum("Ta[t]")]
          Tat,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// wk property
        /// </summary>
          wk
        }
        /// <summary>
        /// This class represents the StimFetTestAnalysisMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StimFetTestAnalysisMethod xsd enumeration.")]
        public enum StimFetTestAnalysisMethod 
        {
        /// <summary>
        /// average property
        /// </summary>
          average,
        /// <summary>
        /// deltapressureovergtime property
        /// </summary>
          [XmlEnum("delta pressure over g-time")]
          deltapressureovergtime,
        /// <summary>
        /// deltapressureoverlineartime property
        /// </summary>
          [XmlEnum("delta pressure over linear time")]
          deltapressureoverlineartime,
        /// <summary>
        /// deltapressureoverradialtime property
        /// </summary>
          [XmlEnum("delta pressure over radial time")]
          deltapressureoverradialtime,
        /// <summary>
        /// gdk2d property
        /// </summary>
          [XmlEnum("gdk 2-d")]
          gdk2d,
        /// <summary>
        /// horner property
        /// </summary>
          horner,
        /// <summary>
        /// linear property
        /// </summary>
          linear,
        /// <summary>
        /// loglog property
        /// </summary>
          [XmlEnum("log-log")]
          loglog,
        /// <summary>
        /// nolte property
        /// </summary>
          nolte,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// pdlcoefficient property
        /// </summary>
          [XmlEnum("pdl coefficient")]
          pdlcoefficient,
        /// <summary>
        /// perkinsandkern2d property
        /// </summary>
          [XmlEnum("perkins and kern 2-d")]
          perkinsandkern2d,
        /// <summary>
        /// radial2d property
        /// </summary>
          [XmlEnum("radial 2-d")]
          radial2d,
        /// <summary>
        /// squareroot property
        /// </summary>
          [XmlEnum("square root")]
          squareroot,
        /// <summary>
        /// thirdpartysoftware property
        /// </summary>
          [XmlEnum("third-party software")]
          thirdpartysoftware
        }
        /// <summary>
        /// This class represents the VolumetricThermalExpansionUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumetricThermalExpansionUom xsd enumeration.")]
        public enum VolumetricThermalExpansionUom 
        {
        /// <summary>
        /// Item1deltaC property
        /// </summary>
          [XmlEnum("1/deltaC")]
          Item1deltaC,
        /// <summary>
        /// Item1deltaF property
        /// </summary>
          [XmlEnum("1/deltaF")]
          Item1deltaF,
        /// <summary>
        /// Item1deltaK property
        /// </summary>
          [XmlEnum("1/deltaK")]
          Item1deltaK,
        /// <summary>
        /// Item1deltaR property
        /// </summary>
          [XmlEnum("1/deltaR")]
          Item1deltaR,
        /// <summary>
        /// Item1E6m3m3deltaC property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.deltaC)")]
          Item1E6m3m3deltaC,
        /// <summary>
        /// Item1E6m3m3deltaF property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.deltaF)")]
          Item1E6m3m3deltaF,
        /// <summary>
        /// m3m3deltaK property
        /// </summary>
          [XmlEnum("m3/(m3.deltaK)")]
          m3m3deltaK,
        /// <summary>
        /// ppmvoldeltaC property
        /// </summary>
          [XmlEnum("ppm[vol]/deltaC")]
          ppmvoldeltaC,
        /// <summary>
        /// ppmvoldeltaF property
        /// </summary>
          [XmlEnum("ppm[vol]/deltaF")]
          ppmvoldeltaF
        }
        /// <summary>
        /// This class represents the ThermalConductivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalConductivityUom xsd enumeration.")]
        public enum ThermalConductivityUom 
        {
        /// <summary>
        /// BtuIThftdeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft.deltaF)")]
          BtuIThftdeltaF,
        /// <summary>
        /// calthhcmdeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm.deltaC)")]
          calthhcmdeltaC,
        /// <summary>
        /// calthscmdeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm.deltaC)")]
          calthscmdeltaC,
        /// <summary>
        /// kcalthhmdeltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m.deltaC)")]
          kcalthhmdeltaC,
        /// <summary>
        /// WmdeltaK property
        /// </summary>
          [XmlEnum("W/(m.deltaK)")]
          WmdeltaK
        }
        /// <summary>
        /// This class represents the SpecificHeatCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SpecificHeatCapacityUom xsd enumeration.")]
        public enum SpecificHeatCapacityUom 
        {
        /// <summary>
        /// BtuITlbmdeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.deltaF)")]
          BtuITlbmdeltaF,
        /// <summary>
        /// BtuITlbmdeltaR property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.deltaR)")]
          BtuITlbmdeltaR,
        /// <summary>
        /// calthgdeltaK property
        /// </summary>
          [XmlEnum("cal[th]/(g.deltaK)")]
          calthgdeltaK,
        /// <summary>
        /// JgdeltaK property
        /// </summary>
          [XmlEnum("J/(g.deltaK)")]
          JgdeltaK,
        /// <summary>
        /// JkgdeltaK property
        /// </summary>
          [XmlEnum("J/(kg.deltaK)")]
          JkgdeltaK,
        /// <summary>
        /// kcalthkgdeltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(kg.deltaC)")]
          kcalthkgdeltaC,
        /// <summary>
        /// kJkgdeltaK property
        /// </summary>
          [XmlEnum("kJ/(kg.deltaK)")]
          kJkgdeltaK,
        /// <summary>
        /// kWhkgdeltaC property
        /// </summary>
          [XmlEnum("kW.h/(kg.deltaC)")]
          kWhkgdeltaC
        }
        /// <summary>
        /// This class represents the SurfEquipType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the SurfEquipType xsd enumeration.")]
        public enum SurfEquipType 
        {
        /// <summary>
        /// IADC property
        /// </summary>
          IADC,
        /// <summary>
        /// custom property
        /// </summary>
          custom,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// The value is not known. Avoid using this value. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations. 
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the AreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaUom xsd enumeration.")]
        public enum AreaUom 
        {
        /// <summary>
        /// acre property
        /// </summary>
          acre,
        /// <summary>
        /// b property
        /// </summary>
          b,
        /// <summary>
        /// cm2 property
        /// </summary>
          cm2,
        /// <summary>
        /// ft2 property
        /// </summary>
          ft2,
        /// <summary>
        /// ha property
        /// </summary>
          ha,
        /// <summary>
        /// in2 property
        /// </summary>
          in2,
        /// <summary>
        /// km2 property
        /// </summary>
          km2,
        /// <summary>
        /// m2 property
        /// </summary>
          m2,
        /// <summary>
        /// miUS2 property
        /// </summary>
          [XmlEnum("mi[US]2")]
          miUS2,
        /// <summary>
        /// mi2 property
        /// </summary>
          mi2,
        /// <summary>
        /// mm2 property
        /// </summary>
          mm2,
        /// <summary>
        /// section property
        /// </summary>
          section,
        /// <summary>
        /// um2 property
        /// </summary>
          um2,
        /// <summary>
        /// yd2 property
        /// </summary>
          yd2
        }
        /// <summary>
        /// This class represents the NameTagNumberingScheme xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the NameTagNumberingScheme xsd enumeration.")]
        public enum NameTagNumberingScheme 
        {
        /// <summary>
        /// ANSIAIMBC10 property
        /// </summary>
          [XmlEnum("ANSI/AIM-BC10")]
          ANSIAIMBC10,
        /// <summary>
        /// ANSIAIMBC2 property
        /// </summary>
          [XmlEnum("ANSI/AIM-BC2")]
          ANSIAIMBC2,
        /// <summary>
        /// ANSIAIMBC6 property
        /// </summary>
          [XmlEnum("ANSI/AIM-BC6")]
          ANSIAIMBC6,
        /// <summary>
        /// EANUCC property
        /// </summary>
          [XmlEnum("EAN.UCC")]
          EANUCC,
        /// <summary>
        /// EPC64 property
        /// </summary>
          EPC64,
        /// <summary>
        /// EPC96 property
        /// </summary>
          EPC96,
        /// <summary>
        /// F2F property
        /// </summary>
          F2F,
        /// <summary>
        /// MFM property
        /// </summary>
          MFM,
        /// <summary>
        /// MSRCID property
        /// </summary>
          MSRCID,
        /// <summary>
        /// serialnumber property
        /// </summary>
          [XmlEnum("serial number")]
          serialnumber
        }
        /// <summary>
        /// This class represents the NameTagTechnology xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the NameTagTechnology xsd enumeration.")]
        public enum NameTagTechnology 
        {
        /// <summary>
        /// intrinsic property
        /// </summary>
          intrinsic,
        /// <summary>
        /// labeled property
        /// </summary>
          labeled,
        /// <summary>
        /// painted property
        /// </summary>
          painted,
        /// <summary>
        /// stamped property
        /// </summary>
          stamped,
        /// <summary>
        /// tagged property
        /// </summary>
          tagged,
        /// <summary>
        /// temporary property
        /// </summary>
          temporary
        }
        /// <summary>
        /// This class represents the NameTagLocation xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the NameTagLocation xsd enumeration.")]
        public enum NameTagLocation 
        {
        /// <summary>
        /// body property
        /// </summary>
          body,
        /// <summary>
        /// box property
        /// </summary>
          box,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// pin property
        /// </summary>
          pin
        }
        /// <summary>
        /// This class represents the PumpType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PumpType xsd enumeration.")]
        public enum PumpType 
        {
        /// <summary>
        /// Centrifugal mud pump.
        /// </summary>
          centrifugal,
        /// <summary>
        /// Duplex mud mump, two cylinders.
        /// </summary>
          duplex,
        /// <summary>
        /// Triplex mud pump, three cylinders.
        /// </summary>
          triplex
        }
        /// <summary>
        /// This class represents the PowerPerPowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerPerPowerUom xsd enumeration.")]
        public enum PowerPerPowerUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// BtuIThph property
        /// </summary>
          [XmlEnum("Btu[IT]/(hp.h)")]
          BtuIThph,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// WkW property
        /// </summary>
          [XmlEnum("W/kW")]
          WkW,
        /// <summary>
        /// WW property
        /// </summary>
          [XmlEnum("W/W")]
          WW
        }
        /// <summary>
        /// This class represents the AngularVelocityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AngularVelocityUom xsd enumeration.")]
        public enum AngularVelocityUom 
        {
        /// <summary>
        /// degah property
        /// </summary>
          [XmlEnum("dega/h")]
          degah,
        /// <summary>
        /// degamin property
        /// </summary>
          [XmlEnum("dega/min")]
          degamin,
        /// <summary>
        /// degas property
        /// </summary>
          [XmlEnum("dega/s")]
          degas,
        /// <summary>
        /// rads property
        /// </summary>
          [XmlEnum("rad/s")]
          rads,
        /// <summary>
        /// revs property
        /// </summary>
          [XmlEnum("rev/s")]
          revs,
        /// <summary>
        /// rpm property
        /// </summary>
          rpm
        }
        /// <summary>
        /// This class represents the PitType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PitType xsd enumeration.")]
        public enum PitType 
        {
        /// <summary>
        /// bulk property
        /// </summary>
          bulk,
        /// <summary>
        /// chemical property
        /// </summary>
          chemical,
        /// <summary>
        /// drilling property
        /// </summary>
          drilling,
        /// <summary>
        /// mix property
        /// </summary>
          mix,
        /// <summary>
        /// mudcleaning property
        /// </summary>
          [XmlEnum("mud cleaning")]
          mudcleaning,
        /// <summary>
        /// sandtrap property
        /// </summary>
          [XmlEnum("sand trap")]
          sandtrap,
        /// <summary>
        /// slug property
        /// </summary>
          slug,
        /// <summary>
        /// storage property
        /// </summary>
          storage,
        /// <summary>
        /// surgetank property
        /// </summary>
          [XmlEnum("surge tank")]
          surgetank,
        /// <summary>
        /// triptank property
        /// </summary>
          [XmlEnum("trip tank")]
          triptank
        }
        /// <summary>
        /// This class represents the BopType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BopType xsd enumeration.")]
        public enum BopType 
        {
        /// <summary>
        /// annularpreventer property
        /// </summary>
          [XmlEnum("annular preventer")]
          annularpreventer,
        /// <summary>
        /// shearram property
        /// </summary>
          [XmlEnum("shear ram")]
          shearram,
        /// <summary>
        /// blindram property
        /// </summary>
          [XmlEnum("blind ram")]
          blindram,
        /// <summary>
        /// piperam property
        /// </summary>
          [XmlEnum("pipe ram")]
          piperam,
        /// <summary>
        /// drillingspool property
        /// </summary>
          [XmlEnum("drilling spool")]
          drillingspool,
        /// <summary>
        /// flexiblejoint property
        /// </summary>
          [XmlEnum("flexible joint")]
          flexiblejoint,
        /// <summary>
        /// connector property
        /// </summary>
          connector
        }
        /// <summary>
        /// This class represents the ConcentrationParameterKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ConcentrationParameterKind xsd enumeration.")]
        public enum ConcentrationParameterKind 
        {
        /// <summary>
        /// cuttingsgas property
        /// </summary>
          [XmlEnum("cuttings gas")]
          cuttingsgas
        }
        /// <summary>
        /// This class represents the MudLogStringParameterKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MudLogStringParameterKind xsd enumeration.")]
        public enum MudLogStringParameterKind 
        {
        /// <summary>
        /// bitparameters property
        /// </summary>
          [XmlEnum("bit parameters")]
          bitparameters,
        /// <summary>
        /// bittypecomment property
        /// </summary>
          [XmlEnum("bit type comment")]
          bittypecomment,
        /// <summary>
        /// casingpointcomment property
        /// </summary>
          [XmlEnum("casing point comment")]
          casingpointcomment,
        /// <summary>
        /// chromatographcomment property
        /// </summary>
          [XmlEnum("chromatograph comment")]
          chromatographcomment,
        /// <summary>
        /// circulationsystemcomment property
        /// </summary>
          [XmlEnum("circulation system comment")]
          circulationsystemcomment,
        /// <summary>
        /// coreintervalcomment property
        /// </summary>
          [XmlEnum("core interval comment")]
          coreintervalcomment,
        /// <summary>
        /// drillingdatacomment property
        /// </summary>
          [XmlEnum("drilling data comment")]
          drillingdatacomment,
        /// <summary>
        /// gaspeakscomment property
        /// </summary>
          [XmlEnum("gas peaks comment")]
          gaspeakscomment,
        /// <summary>
        /// gasratiocomment property
        /// </summary>
          [XmlEnum("gas ratio comment")]
          gasratiocomment,
        /// <summary>
        /// generalengineeringcomment property
        /// </summary>
          [XmlEnum("general engineering comment")]
          generalengineeringcomment,
        /// <summary>
        /// lithlogcomment property
        /// </summary>
          [XmlEnum("lithlog comment")]
          lithlogcomment,
        /// <summary>
        /// LWDcomment property
        /// </summary>
          [XmlEnum("LWD comment")]
          LWDcomment,
        /// <summary>
        /// markerorformationtopcomment property
        /// </summary>
          [XmlEnum("marker or formation top comment")]
          markerorformationtopcomment,
        /// <summary>
        /// midnightdepthdate property
        /// </summary>
          [XmlEnum("midnight depth date")]
          midnightdepthdate,
        /// <summary>
        /// mudcheckcomment property
        /// </summary>
          [XmlEnum("mud check comment")]
          mudcheckcomment,
        /// <summary>
        /// muddatacomment property
        /// </summary>
          [XmlEnum("mud data comment")]
          muddatacomment,
        /// <summary>
        /// mudlogcomment property
        /// </summary>
          [XmlEnum("mudlog comment")]
          mudlogcomment,
        /// <summary>
        /// pressuredatacomment property
        /// </summary>
          [XmlEnum("pressure data comment")]
          pressuredatacomment,
        /// <summary>
        /// shaledensitycomment property
        /// </summary>
          [XmlEnum("shale density comment")]
          shaledensitycomment,
        /// <summary>
        /// shorttripcomment property
        /// </summary>
          [XmlEnum("short trip comment")]
          shorttripcomment,
        /// <summary>
        /// showreportcomment property
        /// </summary>
          [XmlEnum("show report comment")]
          showreportcomment,
        /// <summary>
        /// sidewallcorecomment property
        /// </summary>
          [XmlEnum("sidewall core comment")]
          sidewallcorecomment,
        /// <summary>
        /// slidingInterval property
        /// </summary>
          [XmlEnum("sliding Interval")]
          slidingInterval,
        /// <summary>
        /// steamstillresultscomment property
        /// </summary>
          [XmlEnum("steam still results comment")]
          steamstillresultscomment,
        /// <summary>
        /// surveycomment property
        /// </summary>
          [XmlEnum("survey comment")]
          surveycomment,
        /// <summary>
        /// temperaturedatacomment property
        /// </summary>
          [XmlEnum("temperature data comment")]
          temperaturedatacomment,
        /// <summary>
        /// temperaturetrendcomment property
        /// </summary>
          [XmlEnum("temperature trend comment")]
          temperaturetrendcomment,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// wirelinelogcomment property
        /// </summary>
          [XmlEnum("wireline log comment")]
          wirelinelogcomment
        }
        /// <summary>
        /// This class represents the PressureGradientParameterKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PressureGradientParameterKind xsd enumeration.")]
        public enum PressureGradientParameterKind 
        {
        /// <summary>
        /// directporepressuregradientmeasurement property
        /// </summary>
          [XmlEnum("direct pore pressure gradient measurement")]
          directporepressuregradientmeasurement,
        /// <summary>
        /// fracturepressuregradientestimate property
        /// </summary>
          [XmlEnum("fracture pressure gradient estimate")]
          fracturepressuregradientestimate,
        /// <summary>
        /// kickpressuregradient property
        /// </summary>
          [XmlEnum("kick pressure gradient")]
          kickpressuregradient,
        /// <summary>
        /// lostreturns property
        /// </summary>
          [XmlEnum("lost returns")]
          lostreturns,
        /// <summary>
        /// overburdengradient property
        /// </summary>
          [XmlEnum("overburden gradient")]
          overburdengradient,
        /// <summary>
        /// porepressuregradientestimate property
        /// </summary>
          [XmlEnum("pore pressure gradient estimate")]
          porepressuregradientestimate
        }
        /// <summary>
        /// This class represents the PressureParameterKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PressureParameterKind xsd enumeration.")]
        public enum PressureParameterKind 
        {
        /// <summary>
        /// directfracturepressuremeasurement property
        /// </summary>
          [XmlEnum("direct fracture pressure measurement")]
          directfracturepressuremeasurement,
        /// <summary>
        /// porepressureestimatewhiledrilling property
        /// </summary>
          [XmlEnum("pore pressure estimate while drilling")]
          porepressureestimatewhiledrilling
        }
        /// <summary>
        /// This class represents the ForceParameterKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ForceParameterKind xsd enumeration.")]
        public enum ForceParameterKind 
        {
        /// <summary>
        /// overpullonconnection property
        /// </summary>
          [XmlEnum("overpull on connection")]
          overpullonconnection,
        /// <summary>
        /// overpullontrip property
        /// </summary>
          [XmlEnum("overpull on trip")]
          overpullontrip
        }
        /// <summary>
        /// This class represents the GasPeakType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the GasPeakType xsd enumeration.")]
        public enum GasPeakType 
        {
        /// <summary>
        /// circulatingbackgroundgas property
        /// </summary>
          [XmlEnum("circulating background gas")]
          circulatingbackgroundgas,
        /// <summary>
        /// connectiongas property
        /// </summary>
          [XmlEnum("connection gas")]
          connectiongas,
        /// <summary>
        /// drillingbackgroundgas property
        /// </summary>
          [XmlEnum("drilling background gas")]
          drillingbackgroundgas,
        /// <summary>
        /// drillinggaspeak property
        /// </summary>
          [XmlEnum("drilling gas peak")]
          drillinggaspeak,
        /// <summary>
        /// flowcheckgas property
        /// </summary>
          [XmlEnum("flow check gas")]
          flowcheckgas,
        /// <summary>
        /// noreadings property
        /// </summary>
          [XmlEnum("no readings")]
          noreadings,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// shutdowngas property
        /// </summary>
          [XmlEnum("shut down gas")]
          shutdowngas,
        /// <summary>
        /// tripgas property
        /// </summary>
          [XmlEnum("trip gas")]
          tripgas
        }
        /// <summary>
        /// This class represents the ElectricCurrentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricCurrentUom xsd enumeration.")]
        public enum ElectricCurrentUom 
        {
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// cA property
        /// </summary>
          cA,
        /// <summary>
        /// dA property
        /// </summary>
          dA,
        /// <summary>
        /// EA property
        /// </summary>
          EA,
        /// <summary>
        /// fA property
        /// </summary>
          fA,
        /// <summary>
        /// GA property
        /// </summary>
          GA,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// TA property
        /// </summary>
          TA,
        /// <summary>
        /// uA property
        /// </summary>
          uA
        }
        /// <summary>
        /// This class represents the MomentOfForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MomentOfForceUom xsd enumeration.")]
        public enum MomentOfForceUom 
        {
        /// <summary>
        /// Item1000lbfft property
        /// </summary>
          [XmlEnum("1000 lbf.ft")]
          Item1000lbfft,
        /// <summary>
        /// daNm property
        /// </summary>
          [XmlEnum("daN.m")]
          daNm,
        /// <summary>
        /// dNm property
        /// </summary>
          [XmlEnum("dN.m")]
          dNm,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// kgfm property
        /// </summary>
          [XmlEnum("kgf.m")]
          kgfm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN.m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf.ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf.in")]
          lbfin,
        /// <summary>
        /// lbmft2s2 property
        /// </summary>
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N.m")]
          Nm,
        /// <summary>
        /// pdlft property
        /// </summary>
          [XmlEnum("pdl.ft")]
          pdlft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US].ft")]
          tonfUSft,
        /// <summary>
        /// tonfUSmi property
        /// </summary>
          [XmlEnum("tonf[US].mi")]
          tonfUSmi
        }
        /// <summary>
        /// This class represents the ForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForceUom xsd enumeration.")]
        public enum ForceUom 
        {
        /// <summary>
        /// Item10kN property
        /// </summary>
          [XmlEnum("10 kN")]
          Item10kN,
        /// <summary>
        /// cN property
        /// </summary>
          cN,
        /// <summary>
        /// daN property
        /// </summary>
          daN,
        /// <summary>
        /// dN property
        /// </summary>
          dN,
        /// <summary>
        /// dyne property
        /// </summary>
          dyne,
        /// <summary>
        /// EN property
        /// </summary>
          EN,
        /// <summary>
        /// fN property
        /// </summary>
          fN,
        /// <summary>
        /// gf property
        /// </summary>
          gf,
        /// <summary>
        /// GN property
        /// </summary>
          GN,
        /// <summary>
        /// hN property
        /// </summary>
          hN,
        /// <summary>
        /// kdyne property
        /// </summary>
          kdyne,
        /// <summary>
        /// kgf property
        /// </summary>
          kgf,
        /// <summary>
        /// klbf property
        /// </summary>
          klbf,
        /// <summary>
        /// kN property
        /// </summary>
          kN,
        /// <summary>
        /// lbf property
        /// </summary>
          lbf,
        /// <summary>
        /// Mgf property
        /// </summary>
          Mgf,
        /// <summary>
        /// mN property
        /// </summary>
          mN,
        /// <summary>
        /// MN property
        /// </summary>
          MN,
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// nN property
        /// </summary>
          nN,
        /// <summary>
        /// ozf property
        /// </summary>
          ozf,
        /// <summary>
        /// pdl property
        /// </summary>
          pdl,
        /// <summary>
        /// pN property
        /// </summary>
          pN,
        /// <summary>
        /// TN property
        /// </summary>
          TN,
        /// <summary>
        /// tonfUK property
        /// </summary>
          [XmlEnum("tonf[UK]")]
          tonfUK,
        /// <summary>
        /// tonfUS property
        /// </summary>
          [XmlEnum("tonf[US]")]
          tonfUS,
        /// <summary>
        /// uN property
        /// </summary>
          uN
        }
        /// <summary>
        /// This class represents the LengthPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerTimeUom xsd enumeration.")]
        public enum LengthPerTimeUom 
        {
        /// <summary>
        /// Item1000fth property
        /// </summary>
          [XmlEnum("1000 ft/h")]
          Item1000fth,
        /// <summary>
        /// Item1000fts property
        /// </summary>
          [XmlEnum("1000 ft/s")]
          Item1000fts,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// mila property
        /// </summary>
          [XmlEnum("mil/a")]
          mila,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums
        }
        /// <summary>
        /// This class represents the ShowRating xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ShowRating xsd enumeration.")]
        public enum ShowRating 
        {
        /// <summary>
        /// none property
        /// </summary>
          none,
        /// <summary>
        /// verypoor property
        /// </summary>
          [XmlEnum("very poor")]
          verypoor,
        /// <summary>
        /// poor property
        /// </summary>
          poor,
        /// <summary>
        /// fair property
        /// </summary>
          fair,
        /// <summary>
        /// good property
        /// </summary>
          good,
        /// <summary>
        /// verygood property
        /// </summary>
          [XmlEnum("very good")]
          verygood
        }
        /// <summary>
        /// This class represents the AreaPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerAreaUom xsd enumeration.")]
        public enum AreaPerAreaUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// area property
        /// </summary>
          [XmlEnum("%[area]")]
          area,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// in2ft2 property
        /// </summary>
          [XmlEnum("in2/ft2")]
          in2ft2,
        /// <summary>
        /// in2in2 property
        /// </summary>
          [XmlEnum("in2/in2")]
          in2in2,
        /// <summary>
        /// m2m2 property
        /// </summary>
          [XmlEnum("m2/m2")]
          m2m2,
        /// <summary>
        /// mm2mm2 property
        /// </summary>
          [XmlEnum("mm2/mm2")]
          mm2mm2
        }
        /// <summary>
        /// This class represents the ShowSpeed xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ShowSpeed xsd enumeration.")]
        public enum ShowSpeed 
        {
        /// <summary>
        /// slow property
        /// </summary>
          slow,
        /// <summary>
        /// moderatelyfast property
        /// </summary>
          [XmlEnum("moderately fast")]
          moderatelyfast,
        /// <summary>
        /// fast property
        /// </summary>
          fast,
        /// <summary>
        /// instantaneous property
        /// </summary>
          instantaneous,
        /// <summary>
        /// none property
        /// </summary>
          none
        }
        /// <summary>
        /// This class represents the ShowLevel xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ShowLevel xsd enumeration.")]
        public enum ShowLevel 
        {
        /// <summary>
        /// blooming property
        /// </summary>
          blooming,
        /// <summary>
        /// streaming property
        /// </summary>
          streaming
        }
        /// <summary>
        /// This class represents the ShowFluorescence xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ShowFluorescence xsd enumeration.")]
        public enum ShowFluorescence 
        {
        /// <summary>
        /// faint property
        /// </summary>
          faint,
        /// <summary>
        /// bright property
        /// </summary>
          bright,
        /// <summary>
        /// none property
        /// </summary>
          none
        }
        /// <summary>
        /// This class represents the IlluminanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the IlluminanceUom xsd enumeration.")]
        public enum IlluminanceUom 
        {
        /// <summary>
        /// footcandle property
        /// </summary>
          footcandle,
        /// <summary>
        /// klx property
        /// </summary>
          klx,
        /// <summary>
        /// lmm2 property
        /// </summary>
          [XmlEnum("lm/m2")]
          lmm2,
        /// <summary>
        /// lx property
        /// </summary>
          lx
        }
        /// <summary>
        /// This class represents the LineStyle xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LineStyle xsd enumeration.")]
        public enum LineStyle 
        {
        /// <summary>
        /// dashed property
        /// </summary>
          dashed,
        /// <summary>
        /// solid property
        /// </summary>
          solid,
        /// <summary>
        /// dotted property
        /// </summary>
          dotted,
        /// <summary>
        /// shortdashed property
        /// </summary>
          [XmlEnum("short dashed")]
          shortdashed,
        /// <summary>
        /// longdashed property
        /// </summary>
          [XmlEnum("long dashed")]
          longdashed
        }
        /// <summary>
        /// This class represents the ScaleType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ScaleType xsd enumeration.")]
        public enum ScaleType 
        {
        /// <summary>
        /// linear property
        /// </summary>
          linear,
        /// <summary>
        /// logarithmic property
        /// </summary>
          logarithmic
        }
        /// <summary>
        /// This class represents the BackupScaleType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BackupScaleType xsd enumeration.")]
        public enum BackupScaleType 
        {
        /// <summary>
        /// x10 property
        /// </summary>
          x10,
        /// <summary>
        /// offscaleleftright property
        /// </summary>
          [XmlEnum("offscale left/right")]
          offscaleleftright,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the LogTrackType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LogTrackType xsd enumeration.")]
        public enum LogTrackType 
        {
        /// <summary>
        /// curves property
        /// </summary>
          curves,
        /// <summary>
        /// data property
        /// </summary>
          data,
        /// <summary>
        /// depth property
        /// </summary>
          depth,
        /// <summary>
        /// traces property
        /// </summary>
          traces,
        /// <summary>
        /// The index used by the track is something other than depth.
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the CalibrationPointRole xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the CalibrationPointRole xsd enumeration.")]
        public enum CalibrationPointRole 
        {
        /// <summary>
        /// leftedge property
        /// </summary>
          [XmlEnum("left edge")]
          leftedge,
        /// <summary>
        /// rightedge property
        /// </summary>
          [XmlEnum("right edge")]
          rightedge,
        /// <summary>
        /// Denotes an intermediate point from the left edge to the right edge. 
        /// </summary>
          fraction,
        /// <summary>
        /// The value is not known. Avoid using this value. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations. 
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the LogSectionType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LogSectionType xsd enumeration.")]
        public enum LogSectionType 
        {
        /// <summary>
        /// main property
        /// </summary>
          main,
        /// <summary>
        /// repeat property
        /// </summary>
          repeat,
        /// <summary>
        /// calibration property
        /// </summary>
          calibration,
        /// <summary>
        /// tiein property
        /// </summary>
          [XmlEnum("tie in")]
          tiein,
        /// <summary>
        /// goinginhole property
        /// </summary>
          [XmlEnum("going in hole")]
          goinginhole,
        /// <summary>
        /// The value is not known. Avoid using this value. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the LogIndexType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LogIndexType xsd enumeration.")]
        public enum LogIndexType 
        {
        /// <summary>
        /// datetime property
        /// </summary>
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// elapsedtime property
        /// </summary>
          [XmlEnum("elapsed time")]
          elapsedtime,
        /// <summary>
        /// Log is indexed on length (not a depth).
        /// </summary>
          length,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// verticaldepth property
        /// </summary>
          [XmlEnum("vertical depth")]
          verticaldepth,
        /// <summary>
        /// Any other index type for a log.
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the LogRectangleType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LogRectangleType xsd enumeration.")]
        public enum LogRectangleType 
        {
        /// <summary>
        /// header property
        /// </summary>
          header,
        /// <summary>
        /// alternate property
        /// </summary>
          alternate
        }
        /// <summary>
        /// This class represents the DigitalStorageUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DigitalStorageUom xsd enumeration.")]
        public enum DigitalStorageUom 
        {
        /// <summary>
        /// bit property
        /// </summary>
          bit,
        /// <summary>
        /// byte property
        /// </summary>
          @byte,
        /// <summary>
        /// Kibyte property
        /// </summary>
          Kibyte,
        /// <summary>
        /// Mibyte property
        /// </summary>
          Mibyte
        }
        /// <summary>
        /// This class represents the PerfConveyanceMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PerfConveyanceMethod xsd enumeration.")]
        public enum PerfConveyanceMethod 
        {
        /// <summary>
        /// slickline property
        /// </summary>
          [XmlEnum("slick line")]
          slickline,
        /// <summary>
        /// tubingconveyed property
        /// </summary>
          [XmlEnum("tubing conveyed")]
          tubingconveyed,
        /// <summary>
        /// wireline property
        /// </summary>
          wireline
        }
        /// <summary>
        /// This class represents the ReciprocalLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalLengthUom xsd enumeration.")]
        public enum ReciprocalLengthUom 
        {
        /// <summary>
        /// Item1angstrom property
        /// </summary>
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        /// <summary>
        /// Item1cm property
        /// </summary>
          [XmlEnum("1/cm")]
          Item1cm,
        /// <summary>
        /// Item1ft property
        /// </summary>
          [XmlEnum("1/ft")]
          Item1ft,
        /// <summary>
        /// Item1in property
        /// </summary>
          [XmlEnum("1/in")]
          Item1in,
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// Item1mi property
        /// </summary>
          [XmlEnum("1/mi")]
          Item1mi,
        /// <summary>
        /// Item1mm property
        /// </summary>
          [XmlEnum("1/mm")]
          Item1mm,
        /// <summary>
        /// Item1nm property
        /// </summary>
          [XmlEnum("1/nm")]
          Item1nm,
        /// <summary>
        /// Item1yd property
        /// </summary>
          [XmlEnum("1/yd")]
          Item1yd,
        /// <summary>
        /// Item1E91ft property
        /// </summary>
          [XmlEnum("1E-9 1/ft")]
          Item1E91ft
        }
        /// <summary>
        /// This class represents the EventClassType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the EventClassType xsd enumeration.")]
        public enum EventClassType 
        {
        /// <summary>
        /// dailycost property
        /// </summary>
          [XmlEnum("daily cost")]
          dailycost,
        /// <summary>
        /// dailyreport property
        /// </summary>
          [XmlEnum("daily report")]
          dailyreport,
        /// <summary>
        /// failuredownholeequipmentonly property
        /// </summary>
          [XmlEnum("failure (downhole equipment only)")]
          failuredownholeequipmentonly,
        /// <summary>
        /// job property
        /// </summary>
          job,
        /// <summary>
        /// jobplanphases property
        /// </summary>
          [XmlEnum("job plan (phases)")]
          jobplanphases,
        /// <summary>
        /// mudattributes property
        /// </summary>
          [XmlEnum("mud attributes")]
          mudattributes,
        /// <summary>
        /// nptlosttimeevent property
        /// </summary>
          [XmlEnum("npt (lost time event)")]
          nptlosttimeevent,
        /// <summary>
        /// timelogtimemeasure property
        /// </summary>
          [XmlEnum("time log (time measure)")]
          timelogtimemeasure
        }
        /// <summary>
        /// This class represents the PumpOpType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PumpOpType xsd enumeration.")]
        public enum PumpOpType 
        {
        /// <summary>
        /// drilling property
        /// </summary>
          drilling,
        /// <summary>
        /// reaming property
        /// </summary>
          reaming,
        /// <summary>
        /// circulating property
        /// </summary>
          circulating,
        /// <summary>
        /// slowpump property
        /// </summary>
          [XmlEnum("slow pump")]
          slowpump
        }
        /// <summary>
        /// This class represents the ScrType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ScrType xsd enumeration.")]
        public enum ScrType 
        {
        /// <summary>
        /// stringannulus property
        /// </summary>
          [XmlEnum("string annulus")]
          stringannulus,
        /// <summary>
        /// stringkillline property
        /// </summary>
          [XmlEnum("string kill line")]
          stringkillline,
        /// <summary>
        /// stringchokeline property
        /// </summary>
          [XmlEnum("string choke line")]
          stringchokeline,
        /// <summary>
        /// The value is not known. Avoid using this value. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations. 
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the PlaneAngleUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PlaneAngleUom xsd enumeration.")]
        public enum PlaneAngleUom 
        {
        /// <summary>
        /// Item0001seca property
        /// </summary>
          [XmlEnum("0.001 seca")]
          Item0001seca,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// mila property
        /// </summary>
          mila,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// rev property
        /// </summary>
          rev,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// urad property
        /// </summary>
          urad
        }
        /// <summary>
        /// This class represents the SupportCraftType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the SupportCraftType xsd enumeration.")]
        public enum SupportCraftType 
        {
        /// <summary>
        /// barge property
        /// </summary>
          barge,
        /// <summary>
        /// standbyboat property
        /// </summary>
          [XmlEnum("standby boat")]
          standbyboat,
        /// <summary>
        /// helicopter property
        /// </summary>
          helicopter,
        /// <summary>
        /// supplyboat property
        /// </summary>
          [XmlEnum("supply boat")]
          supplyboat,
        /// <summary>
        /// truck property
        /// </summary>
          truck,
        /// <summary>
        /// crewvehicle property
        /// </summary>
          [XmlEnum("crew vehicle")]
          crewvehicle,
        /// <summary>
        /// tugboat property
        /// </summary>
          [XmlEnum("tug boat")]
          tugboat
        }
        /// <summary>
        /// This class represents the LinearAccelerationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LinearAccelerationUom xsd enumeration.")]
        public enum LinearAccelerationUom 
        {
        /// <summary>
        /// cms2 property
        /// </summary>
          [XmlEnum("cm/s2")]
          cms2,
        /// <summary>
        /// fts2 property
        /// </summary>
          [XmlEnum("ft/s2")]
          fts2,
        /// <summary>
        /// Gal property
        /// </summary>
          Gal,
        /// <summary>
        /// gn property
        /// </summary>
          gn,
        /// <summary>
        /// ins2 property
        /// </summary>
          [XmlEnum("in/s2")]
          ins2,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("m/s2")]
          ms2,
        /// <summary>
        /// mGal property
        /// </summary>
          mGal,
        /// <summary>
        /// mgn property
        /// </summary>
          mgn
        }
        /// <summary>
        /// This class represents the MagneticFluxDensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFluxDensityUom xsd enumeration.")]
        public enum MagneticFluxDensityUom 
        {
        /// <summary>
        /// cgauss property
        /// </summary>
          cgauss,
        /// <summary>
        /// cT property
        /// </summary>
          cT,
        /// <summary>
        /// dgauss property
        /// </summary>
          dgauss,
        /// <summary>
        /// dT property
        /// </summary>
          dT,
        /// <summary>
        /// Egauss property
        /// </summary>
          Egauss,
        /// <summary>
        /// ET property
        /// </summary>
          ET,
        /// <summary>
        /// fgauss property
        /// </summary>
          fgauss,
        /// <summary>
        /// fT property
        /// </summary>
          fT,
        /// <summary>
        /// gauss property
        /// </summary>
          gauss,
        /// <summary>
        /// Ggauss property
        /// </summary>
          Ggauss,
        /// <summary>
        /// GT property
        /// </summary>
          GT,
        /// <summary>
        /// kgauss property
        /// </summary>
          kgauss,
        /// <summary>
        /// kT property
        /// </summary>
          kT,
        /// <summary>
        /// mgauss property
        /// </summary>
          mgauss,
        /// <summary>
        /// Mgauss property
        /// </summary>
          Mgauss,
        /// <summary>
        /// mT property
        /// </summary>
          mT,
        /// <summary>
        /// ngauss property
        /// </summary>
          ngauss,
        /// <summary>
        /// nT property
        /// </summary>
          nT,
        /// <summary>
        /// pgauss property
        /// </summary>
          pgauss,
        /// <summary>
        /// pT property
        /// </summary>
          pT,
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// Tgauss property
        /// </summary>
          Tgauss,
        /// <summary>
        /// TT property
        /// </summary>
          TT,
        /// <summary>
        /// ugauss property
        /// </summary>
          ugauss,
        /// <summary>
        /// uT property
        /// </summary>
          uT
        }
        /// <summary>
        /// This class represents the TrajStationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TrajStationType xsd enumeration.")]
        public enum TrajStationType 
        {
        /// <summary>
        /// azimuthonplane property
        /// </summary>
          [XmlEnum("azimuth on plane")]
          azimuthonplane,
        /// <summary>
        /// buildratetodeltaMD property
        /// </summary>
          [XmlEnum("buildrate to delta-MD")]
          buildratetodeltaMD,
        /// <summary>
        /// buildratetoINCL property
        /// </summary>
          [XmlEnum("buildrate to INCL")]
          buildratetoINCL,
        /// <summary>
        /// buildratetoMD property
        /// </summary>
          [XmlEnum("buildrate to MD")]
          buildratetoMD,
        /// <summary>
        /// buildrateandturnratetoAZI property
        /// </summary>
          [XmlEnum("buildrate and turnrate to AZI")]
          buildrateandturnratetoAZI,
        /// <summary>
        /// buildrateandturnratetodeltaMD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to delta-MD")]
          buildrateandturnratetodeltaMD,
        /// <summary>
        /// buildrateandturnratetoINCL property
        /// </summary>
          [XmlEnum("buildrate and turnrate to INCL")]
          buildrateandturnratetoINCL,
        /// <summary>
        /// buildrateandturnratetoINCLandAZI property
        /// </summary>
          [XmlEnum("buildrate and turnrate to INCL and AZI")]
          buildrateandturnratetoINCLandAZI,
        /// <summary>
        /// buildrateandturnratetoMD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to MD")]
          buildrateandturnratetoMD,
        /// <summary>
        /// buildrateandturnratetoTVD property
        /// </summary>
          [XmlEnum("buildrate and turnrate to TVD")]
          buildrateandturnratetoTVD,
        /// <summary>
        /// buildrateTVD property
        /// </summary>
          [XmlEnum("buildrate TVD")]
          buildrateTVD,
        /// <summary>
        /// casingMD property
        /// </summary>
          [XmlEnum("casing MD")]
          casingMD,
        /// <summary>
        /// casingTVD property
        /// </summary>
          [XmlEnum("casing TVD")]
          casingTVD,
        /// <summary>
        /// Section follows a given dogleg severity.
        /// </summary>
          DLS,
        /// <summary>
        /// DLStoAZIandMD property
        /// </summary>
          [XmlEnum("DLS to AZI and MD")]
          DLStoAZIandMD,
        /// <summary>
        /// DLStoAZITVD property
        /// </summary>
          [XmlEnum("DLS to AZI-TVD")]
          DLStoAZITVD,
        /// <summary>
        /// DLStoINCL property
        /// </summary>
          [XmlEnum("DLS to INCL")]
          DLStoINCL,
        /// <summary>
        /// DLStoINCLandAZI property
        /// </summary>
          [XmlEnum("DLS to INCL and AZI")]
          DLStoINCLandAZI,
        /// <summary>
        /// DLStoINCLandMD property
        /// </summary>
          [XmlEnum("DLS to INCL and MD")]
          DLStoINCLandMD,
        /// <summary>
        /// DLStoINCLandTVD property
        /// </summary>
          [XmlEnum("DLS to INCL and TVD")]
          DLStoINCLandTVD,
        /// <summary>
        /// DLStoNS property
        /// </summary>
          [XmlEnum("DLS to NS")]
          DLStoNS,
        /// <summary>
        /// DLSandtoolfacetoAZI property
        /// </summary>
          [XmlEnum("DLS and toolface to AZI")]
          DLSandtoolfacetoAZI,
        /// <summary>
        /// DLSandtoolfacetodeltaMD property
        /// </summary>
          [XmlEnum("DLS and toolface to delta-MD")]
          DLSandtoolfacetodeltaMD,
        /// <summary>
        /// DLSandtoolfacetoINCL property
        /// </summary>
          [XmlEnum("DLS and toolface to INCL")]
          DLSandtoolfacetoINCL,
        /// <summary>
        /// DLSandtoolfacetoINCLAZI property
        /// </summary>
          [XmlEnum("DLS and toolface to INCL-AZI")]
          DLSandtoolfacetoINCLAZI,
        /// <summary>
        /// DLSandtoolfacetoMD property
        /// </summary>
          [XmlEnum("DLS and toolface to MD")]
          DLSandtoolfacetoMD,
        /// <summary>
        /// DLSandtoolfacetoTVD property
        /// </summary>
          [XmlEnum("DLS and toolface to TVD")]
          DLSandtoolfacetoTVD,
        /// <summary>
        /// formationMD property
        /// </summary>
          [XmlEnum("formation MD")]
          formationMD,
        /// <summary>
        /// formationTVD property
        /// </summary>
          [XmlEnum("formation TVD")]
          formationTVD,
        /// <summary>
        /// holdtodeltaMD property
        /// </summary>
          [XmlEnum("hold to delta-MD")]
          holdtodeltaMD,
        /// <summary>
        /// holdtoMD property
        /// </summary>
          [XmlEnum("hold to MD")]
          holdtoMD,
        /// <summary>
        /// holdtoTVD property
        /// </summary>
          [XmlEnum("hold to TVD")]
          holdtoTVD,
        /// <summary>
        /// INCLAZIandTVD property
        /// </summary>
          [XmlEnum("INCL AZI and TVD")]
          INCLAZIandTVD,
        /// <summary>
        /// Derived by interpolating between stations with entered values (either planned or surveyed).
        /// </summary>
          interpolated,
        /// <summary>
        /// markerMD property
        /// </summary>
          [XmlEnum("marker MD")]
          markerMD,
        /// <summary>
        /// markerTVD property
        /// </summary>
          [XmlEnum("marker TVD")]
          markerTVD,
        /// <summary>
        /// MDandINCL property
        /// </summary>
          [XmlEnum("MD and INCL")]
          MDandINCL,
        /// <summary>
        /// MDINCLandAZI property
        /// </summary>
          [XmlEnum("MD INCL and AZI")]
          MDINCLandAZI,
        /// <summary>
        /// NEandTVD property
        /// </summary>
          [XmlEnum("N E and TVD")]
          NEandTVD,
        /// <summary>
        /// NSEWandTVD property
        /// </summary>
          [XmlEnum("NS EW and TVD")]
          NSEWandTVD,
        /// <summary>
        /// targetcenter property
        /// </summary>
          [XmlEnum("target center")]
          targetcenter,
        /// <summary>
        /// targetoffset property
        /// </summary>
          [XmlEnum("target offset")]
          targetoffset,
        /// <summary>
        /// tieinpoint property
        /// </summary>
          [XmlEnum("tie in point")]
          tieinpoint,
        /// <summary>
        /// turnratetoAZI property
        /// </summary>
          [XmlEnum("turnrate to AZI")]
          turnratetoAZI,
        /// <summary>
        /// turnratetodeltaMD property
        /// </summary>
          [XmlEnum("turnrate to delta-MD")]
          turnratetodeltaMD,
        /// <summary>
        /// turnratetoMD property
        /// </summary>
          [XmlEnum("turnrate to MD")]
          turnratetoMD,
        /// <summary>
        /// turnratetoTVD property
        /// </summary>
          [XmlEnum("turnrate to TVD")]
          turnratetoTVD,
        /// <summary>
        /// The value is not known. Avoid using this value. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the TypeSurveyTool xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TypeSurveyTool xsd enumeration.")]
        public enum TypeSurveyTool 
        {
        /// <summary>
        /// gyroscopicinertial property
        /// </summary>
          [XmlEnum("gyroscopic inertial")]
          gyroscopicinertial,
        /// <summary>
        /// gyroscopicMWD property
        /// </summary>
          [XmlEnum("gyroscopic MWD")]
          gyroscopicMWD,
        /// <summary>
        /// gyroscopicnorthseeking property
        /// </summary>
          [XmlEnum("gyroscopic north seeking")]
          gyroscopicnorthseeking,
        /// <summary>
        /// magneticmultipleshot property
        /// </summary>
          [XmlEnum("magnetic multiple-shot")]
          magneticmultipleshot,
        /// <summary>
        /// magneticMWD property
        /// </summary>
          [XmlEnum("magnetic MWD")]
          magneticMWD,
        /// <summary>
        /// magneticsingleshot property
        /// </summary>
          [XmlEnum("magnetic single-shot")]
          magneticsingleshot
        }
        /// <summary>
        /// This class represents the TrajStnCalcAlgorithm xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TrajStnCalcAlgorithm xsd enumeration.")]
        public enum TrajStnCalcAlgorithm 
        {
        /// <summary>
        /// averageangle property
        /// </summary>
          [XmlEnum("average angle")]
          averageangle,
        /// <summary>
        /// balancedtangential property
        /// </summary>
          [XmlEnum("balanced tangential")]
          balancedtangential,
        /// <summary>
        /// constanttoolface property
        /// </summary>
          [XmlEnum("constant tool face")]
          constanttoolface,
        /// <summary>
        /// custom property
        /// </summary>
          custom,
        /// <summary>
        /// inertial property
        /// </summary>
          inertial,
        /// <summary>
        /// minimumcurvature property
        /// </summary>
          [XmlEnum("minimum curvature")]
          minimumcurvature,
        /// <summary>
        /// radiusofcurvature property
        /// </summary>
          [XmlEnum("radius of curvature")]
          radiusofcurvature,
        /// <summary>
        /// tangential property
        /// </summary>
          tangential
        }
        /// <summary>
        /// This class represents the AnglePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AnglePerLengthUom xsd enumeration.")]
        public enum AnglePerLengthUom 
        {
        /// <summary>
        /// Item001degaft property
        /// </summary>
          [XmlEnum("0.01 dega/ft")]
          Item001degaft,
        /// <summary>
        /// Item130degaft property
        /// </summary>
          [XmlEnum("1/30 dega/ft")]
          Item130degaft,
        /// <summary>
        /// Item130degam property
        /// </summary>
          [XmlEnum("1/30 dega/m")]
          Item130degam,
        /// <summary>
        /// degaft property
        /// </summary>
          [XmlEnum("dega/ft")]
          degaft,
        /// <summary>
        /// degam property
        /// </summary>
          [XmlEnum("dega/m")]
          degam,
        /// <summary>
        /// radft property
        /// </summary>
          [XmlEnum("rad/ft")]
          radft,
        /// <summary>
        /// radm property
        /// </summary>
          [XmlEnum("rad/m")]
          radm,
        /// <summary>
        /// revft property
        /// </summary>
          [XmlEnum("rev/ft")]
          revft,
        /// <summary>
        /// revm property
        /// </summary>
          [XmlEnum("rev/m")]
          revm
        }
        /// <summary>
        /// This class represents the TrajStationStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TrajStationStatus xsd enumeration.")]
        public enum TrajStationStatus 
        {
        /// <summary>
        /// Has not been validated; does not influence position computation for stations below it.
        /// </summary>
          open,
        /// <summary>
        /// The quality is not ok; does not influence position computation for stations below it.
        /// </summary>
          rejected,
        /// <summary>
        /// Validated and in-use.
        /// </summary>
          position
        }
        /// <summary>
        /// This class represents the RelatedTimeTypeRelativePosition xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        [Description("This class represents the RelatedTimeTypeRelativePosition xsd enumeration.")]
        public enum RelatedTimeTypeRelativePosition 
        {
        /// <summary>
        /// Before property
        /// </summary>
          Before,
        /// <summary>
        /// After property
        /// </summary>
          After,
        /// <summary>
        /// Begins property
        /// </summary>
          Begins,
        /// <summary>
        /// Ends property
        /// </summary>
          Ends,
        /// <summary>
        /// During property
        /// </summary>
          During,
        /// <summary>
        /// Equals property
        /// </summary>
          Equals,
        /// <summary>
        /// Contains property
        /// </summary>
          Contains,
        /// <summary>
        /// Overlaps property
        /// </summary>
          Overlaps,
        /// <summary>
        /// Meets property
        /// </summary>
          Meets,
        /// <summary>
        /// OverlappedBy property
        /// </summary>
          OverlappedBy,
        /// <summary>
        /// MetBy property
        /// </summary>
          MetBy,
        /// <summary>
        /// BegunBy property
        /// </summary>
          BegunBy,
        /// <summary>
        /// EndedBy property
        /// </summary>
          EndedBy
        }
        /// <summary>
        /// This class represents the AggregationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        [Description("This class represents the AggregationType xsd enumeration.")]
        public enum AggregationType 
        {
        /// <summary>
        /// set property
        /// </summary>
          set,
        /// <summary>
        /// bag property
        /// </summary>
          bag,
        /// <summary>
        /// sequence property
        /// </summary>
          sequence,
        /// <summary>
        /// array property
        /// </summary>
          array,
        /// <summary>
        /// record property
        /// </summary>
          record,
        /// <summary>
        /// table property
        /// </summary>
          table
        }
        /// <summary>
        /// This class represents the ErrorPropagationMode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ErrorPropagationMode xsd enumeration.")]
        public enum ErrorPropagationMode 
        {
        /// <summary>
        /// Bias.
        /// </summary>
          B,
        /// <summary>
        /// Random.
        /// </summary>
          R,
        /// <summary>
        /// Systematic.
        /// </summary>
          S,
        /// <summary>
        /// Well.
        /// </summary>
          W,
        /// <summary>
        /// Global.
        /// </summary>
          G
        }
        /// <summary>
        /// This class represents the ErrorModelMisalignmentMode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ErrorModelMisalignmentMode xsd enumeration.")]
        public enum ErrorModelMisalignmentMode 
        {
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// Item1 property
        /// </summary>
          [XmlEnum("1")]
          Item1,
        /// <summary>
        /// Item2 property
        /// </summary>
          [XmlEnum("2")]
          Item2,
        /// <summary>
        /// Item3 property
        /// </summary>
          [XmlEnum("3")]
          Item3
        }
        /// <summary>
        /// This class represents the AuthorizationStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the AuthorizationStatus xsd enumeration.")]
        public enum AuthorizationStatus 
        {
        /// <summary>
        /// Not yet approved.
        /// </summary>
          draft,
        /// <summary>
        /// Approved for use.
        /// </summary>
          authorized,
        /// <summary>
        /// Obsolete; a newer version is available.
        /// </summary>
          superseded,
        /// <summary>
        /// No longer approved in this or any other version.
        /// </summary>
          withdrawn
        }
        /// <summary>
        /// This class represents the GeologyType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the GeologyType xsd enumeration.")]
        public enum GeologyType 
        {
        /// <summary>
        /// aquifer property
        /// </summary>
          aquifer,
        /// <summary>
        /// reservoir property
        /// </summary>
          reservoir
        }
        /// <summary>
        /// This class represents the BoreholeType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BoreholeType xsd enumeration.")]
        public enum BoreholeType 
        {
        /// <summary>
        /// cavern property
        /// </summary>
          cavern,
        /// <summary>
        /// cavity property
        /// </summary>
          cavity,
        /// <summary>
        /// normalborehole property
        /// </summary>
          normalborehole,
        /// <summary>
        /// underream property
        /// </summary>
          underream
        }
        /// <summary>
        /// This class represents the ConnectionFormType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ConnectionFormType xsd enumeration.")]
        public enum ConnectionFormType 
        {
        /// <summary>
        /// box property
        /// </summary>
          box,
        /// <summary>
        /// flange property
        /// </summary>
          flange,
        /// <summary>
        /// mandrel property
        /// </summary>
          mandrel,
        /// <summary>
        /// pin property
        /// </summary>
          pin,
        /// <summary>
        /// welded property
        /// </summary>
          welded
        }
        /// <summary>
        /// This class represents the OtherConnectionTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the OtherConnectionTypes xsd enumeration.")]
        public enum OtherConnectionTypes 
        {
        /// <summary>
        /// cementedinplace property
        /// </summary>
          [XmlEnum("cemented-in-place")]
          cementedinplace,
        /// <summary>
        /// dogscompressionfitsealed property
        /// </summary>
          [XmlEnum("dogscompressionfit-sealed")]
          dogscompressionfitsealed
        }
        /// <summary>
        /// This class represents the RodConnectionTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RodConnectionTypes xsd enumeration.")]
        public enum RodConnectionTypes 
        {
        /// <summary>
        /// eatingnipplecup property
        /// </summary>
          [XmlEnum("eating nipple-cup")]
          eatingnipplecup,
        /// <summary>
        /// latched property
        /// </summary>
          latched,
        /// <summary>
        /// seatingnipplemechanical property
        /// </summary>
          [XmlEnum("seating nipple-mechanical")]
          seatingnipplemechanical,
        /// <summary>
        /// slipfitsealed property
        /// </summary>
          [XmlEnum("slipfit sealed")]
          slipfitsealed,
        /// <summary>
        /// threaded property
        /// </summary>
          threaded,
        /// <summary>
        /// welded property
        /// </summary>
          welded
        }
        /// <summary>
        /// This class represents the TubingConnectionTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TubingConnectionTypes xsd enumeration.")]
        public enum TubingConnectionTypes 
        {
        /// <summary>
        /// dogscompressionfitnotsealed property
        /// </summary>
          [XmlEnum("dogscompressionfit-notsealed")]
          dogscompressionfitnotsealed,
        /// <summary>
        /// landed property
        /// </summary>
          landed,
        /// <summary>
        /// latched property
        /// </summary>
          latched,
        /// <summary>
        /// radial property
        /// </summary>
          radial,
        /// <summary>
        /// selfsealingthreaded property
        /// </summary>
          [XmlEnum("selfsealing-threaded")]
          selfsealingthreaded,
        /// <summary>
        /// slipfitsealed property
        /// </summary>
          [XmlEnum("slipfit-sealed")]
          slipfitsealed,
        /// <summary>
        /// threaded property
        /// </summary>
          threaded
        }
        /// <summary>
        /// This class represents the CasingConnectionTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the CasingConnectionTypes xsd enumeration.")]
        public enum CasingConnectionTypes 
        {
        /// <summary>
        /// landed property
        /// </summary>
          landed,
        /// <summary>
        /// selfsealingthreaded property
        /// </summary>
          [XmlEnum("self-sealing-threaded")]
          selfsealingthreaded,
        /// <summary>
        /// welded property
        /// </summary>
          welded
        }
        /// <summary>
        /// This class represents the ConnectionPosition xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ConnectionPosition xsd enumeration.")]
        public enum ConnectionPosition 
        {
        /// <summary>
        /// The connection is the same at both ends of the component.
        /// </summary>
          both,
        /// <summary>
        /// This connection is only at the bottom of the component.
        /// </summary>
          bottom,
        /// <summary>
        /// This connection is only at the top of the component.
        /// </summary>
          top
        }
        /// <summary>
        /// This class represents the GradeType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the GradeType xsd enumeration.")]
        public enum GradeType 
        {
        /// <summary>
        /// Item13CR property
        /// </summary>
          [XmlEnum("13CR")]
          Item13CR,
        /// <summary>
        /// Item13CR80 property
        /// </summary>
          [XmlEnum("13CR- 80")]
          Item13CR80,
        /// <summary>
        /// Item13CR85 property
        /// </summary>
          [XmlEnum("13CR- 85")]
          Item13CR85,
        /// <summary>
        /// Item13CR95 property
        /// </summary>
          [XmlEnum("13CR- 95")]
          Item13CR95,
        /// <summary>
        /// Item13CR110 property
        /// </summary>
          [XmlEnum("13CR-110")]
          Item13CR110,
        /// <summary>
        /// Item35 property
        /// </summary>
          [XmlEnum("35")]
          Item35,
        /// <summary>
        /// Item45 property
        /// </summary>
          [XmlEnum("45")]
          Item45,
        /// <summary>
        /// Item46 property
        /// </summary>
          [XmlEnum("46")]
          Item46,
        /// <summary>
        /// Item50 property
        /// </summary>
          [XmlEnum("50")]
          Item50,
        /// <summary>
        /// Item620C property
        /// </summary>
          [XmlEnum("620C")]
          Item620C,
        /// <summary>
        /// Item75 property
        /// </summary>
          [XmlEnum("75")]
          Item75,
        /// <summary>
        /// Item750N property
        /// </summary>
          [XmlEnum("750N")]
          Item750N,
        /// <summary>
        /// Item75A property
        /// </summary>
          [XmlEnum("75A")]
          Item75A,
        /// <summary>
        /// Item780M property
        /// </summary>
          [XmlEnum("780M")]
          Item780M,
        /// <summary>
        /// Item95 property
        /// </summary>
          [XmlEnum("95")]
          Item95,
        /// <summary>
        /// Item960M property
        /// </summary>
          [XmlEnum("960M")]
          Item960M,
        /// <summary>
        /// Item970N property
        /// </summary>
          [XmlEnum("970N")]
          Item970N,
        /// <summary>
        /// A53 property
        /// </summary>
          A53,
        /// <summary>
        /// A53A property
        /// </summary>
          A53A,
        /// <summary>
        /// A53B property
        /// </summary>
          A53B,
        /// <summary>
        /// Armco95 property
        /// </summary>
          [XmlEnum("Armco-95")]
          Armco95,
        /// <summary>
        /// B property
        /// </summary>
          B,
        /// <summary>
        /// C property
        /// </summary>
          C,
        /// <summary>
        /// C110 property
        /// </summary>
          [XmlEnum("C-110")]
          C110,
        /// <summary>
        /// C75 property
        /// </summary>
          [XmlEnum("C-75")]
          C75,
        /// <summary>
        /// C90 property
        /// </summary>
          [XmlEnum("C-90")]
          C90,
        /// <summary>
        /// C95 property
        /// </summary>
          [XmlEnum("C-95")]
          C95,
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// DE property
        /// </summary>
          DE,
        /// <summary>
        /// DER property
        /// </summary>
          DER,
        /// <summary>
        /// DR property
        /// </summary>
          DR,
        /// <summary>
        /// DWR property
        /// </summary>
          DWR,
        /// <summary>
        /// E property
        /// </summary>
          E,
        /// <summary>
        /// E75 property
        /// </summary>
          [XmlEnum("E-75")]
          E75,
        /// <summary>
        /// EL property
        /// </summary>
          EL,
        /// <summary>
        /// F25 property
        /// </summary>
          [XmlEnum("F-25")]
          F25,
        /// <summary>
        /// FG property
        /// </summary>
          FG,
        /// <summary>
        /// FS80 property
        /// </summary>
          [XmlEnum("FS-80")]
          FS80,
        /// <summary>
        /// FSS95 property
        /// </summary>
          [XmlEnum("FSS-95")]
          FSS95,
        /// <summary>
        /// G property
        /// </summary>
          G,
        /// <summary>
        /// G105 property
        /// </summary>
          [XmlEnum("G-105")]
          G105,
        /// <summary>
        /// GT80S property
        /// </summary>
          [XmlEnum("GT-80S")]
          GT80S,
        /// <summary>
        /// H2S90 property
        /// </summary>
          [XmlEnum("H2S-90")]
          H2S90,
        /// <summary>
        /// H2S95 property
        /// </summary>
          [XmlEnum("H2S-95")]
          H2S95,
        /// <summary>
        /// H40 property
        /// </summary>
          [XmlEnum("H-40")]
          H40,
        /// <summary>
        /// HC95 property
        /// </summary>
          [XmlEnum("HC-95")]
          HC95,
        /// <summary>
        /// HCK55 property
        /// </summary>
          [XmlEnum("HCK-55")]
          HCK55,
        /// <summary>
        /// HCL80 property
        /// </summary>
          [XmlEnum("HCL-80")]
          HCL80,
        /// <summary>
        /// HCN80 property
        /// </summary>
          [XmlEnum("HCN-80")]
          HCN80,
        /// <summary>
        /// HCP110 property
        /// </summary>
          [XmlEnum("HCP-110")]
          HCP110,
        /// <summary>
        /// HCQ125 property
        /// </summary>
          [XmlEnum("HCQ-125")]
          HCQ125,
        /// <summary>
        /// HO70 property
        /// </summary>
          [XmlEnum("HO-70")]
          HO70,
        /// <summary>
        /// HS property
        /// </summary>
          HS,
        /// <summary>
        /// J20 property
        /// </summary>
          [XmlEnum("J-20")]
          J20,
        /// <summary>
        /// J55 property
        /// </summary>
          [XmlEnum("J-55")]
          J55,
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// K40 property
        /// </summary>
          [XmlEnum("K-40")]
          K40,
        /// <summary>
        /// K55 property
        /// </summary>
          [XmlEnum("K-55")]
          K55,
        /// <summary>
        /// KD property
        /// </summary>
          KD,
        /// <summary>
        /// KD63 property
        /// </summary>
          [XmlEnum("KD-63")]
          KD63,
        /// <summary>
        /// L80 property
        /// </summary>
          [XmlEnum("L-80")]
          L80,
        /// <summary>
        /// LS140 property
        /// </summary>
          [XmlEnum("LS-140")]
          LS140,
        /// <summary>
        /// LS50 property
        /// </summary>
          [XmlEnum("LS-50")]
          LS50,
        /// <summary>
        /// LS65 property
        /// </summary>
          [XmlEnum("LS-65")]
          LS65,
        /// <summary>
        /// M65 property
        /// </summary>
          [XmlEnum("M-65")]
          M65,
        /// <summary>
        /// M90 property
        /// </summary>
          [XmlEnum("M-90")]
          M90,
        /// <summary>
        /// M95 property
        /// </summary>
          [XmlEnum("M-95")]
          M95,
        /// <summary>
        /// MAV50 property
        /// </summary>
          [XmlEnum("MAV-50")]
          MAV50,
        /// <summary>
        /// MD56 property
        /// </summary>
          [XmlEnum("MD-56")]
          MD56,
        /// <summary>
        /// MMS property
        /// </summary>
          MMS,
        /// <summary>
        /// N105 property
        /// </summary>
          [XmlEnum("N-105")]
          N105,
        /// <summary>
        /// N23 property
        /// </summary>
          [XmlEnum("N-23")]
          N23,
        /// <summary>
        /// N30 property
        /// </summary>
          [XmlEnum("N-30")]
          N30,
        /// <summary>
        /// N40 property
        /// </summary>
          [XmlEnum("N-40")]
          N40,
        /// <summary>
        /// N54 property
        /// </summary>
          [XmlEnum("N-54")]
          N54,
        /// <summary>
        /// N75 property
        /// </summary>
          [XmlEnum("N-75")]
          N75,
        /// <summary>
        /// N78 property
        /// </summary>
          [XmlEnum("N-78")]
          N78,
        /// <summary>
        /// N80 property
        /// </summary>
          [XmlEnum("N-80")]
          N80,
        /// <summary>
        /// N90 property
        /// </summary>
          [XmlEnum("N-90")]
          N90,
        /// <summary>
        /// N96 property
        /// </summary>
          [XmlEnum("N-96")]
          N96,
        /// <summary>
        /// N97 property
        /// </summary>
          [XmlEnum("N-97")]
          N97,
        /// <summary>
        /// P105 property
        /// </summary>
          [XmlEnum("P-105")]
          P105,
        /// <summary>
        /// P110 property
        /// </summary>
          [XmlEnum("P-110")]
          P110,
        /// <summary>
        /// PCP900 property
        /// </summary>
          [XmlEnum("PCP  900")]
          PCP900,
        /// <summary>
        /// PCP1000 property
        /// </summary>
          [XmlEnum("PCP 1000")]
          PCP1000,
        /// <summary>
        /// PCP1500 property
        /// </summary>
          [XmlEnum("PCP 1500")]
          PCP1500,
        /// <summary>
        /// PCP2500 property
        /// </summary>
          [XmlEnum("PCP 2500")]
          PCP2500,
        /// <summary>
        /// PH6 property
        /// </summary>
          [XmlEnum("PH-6")]
          PH6,
        /// <summary>
        /// Plus property
        /// </summary>
          Plus,
        /// <summary>
        /// Q125 property
        /// </summary>
          [XmlEnum("Q-125")]
          Q125,
        /// <summary>
        /// QT1000 property
        /// </summary>
          [XmlEnum("QT-1000")]
          QT1000,
        /// <summary>
        /// QT1200 property
        /// </summary>
          [XmlEnum("QT-1200")]
          QT1200,
        /// <summary>
        /// QT700 property
        /// </summary>
          [XmlEnum("QT-700")]
          QT700,
        /// <summary>
        /// QT800 property
        /// </summary>
          [XmlEnum("QT-800")]
          QT800,
        /// <summary>
        /// QT900 property
        /// </summary>
          [XmlEnum("QT-900")]
          QT900,
        /// <summary>
        /// S property
        /// </summary>
          S,
        /// <summary>
        /// S135 property
        /// </summary>
          [XmlEnum("S-135")]
          S135,
        /// <summary>
        /// S59 property
        /// </summary>
          [XmlEnum("S-59")]
          S59,
        /// <summary>
        /// S60 property
        /// </summary>
          [XmlEnum("S-60")]
          S60,
        /// <summary>
        /// S67 property
        /// </summary>
          [XmlEnum("S-67")]
          S67,
        /// <summary>
        /// S80 property
        /// </summary>
          [XmlEnum("S-80")]
          S80,
        /// <summary>
        /// S87 property
        /// </summary>
          [XmlEnum("S-87")]
          S87,
        /// <summary>
        /// S88 property
        /// </summary>
          [XmlEnum("S-88")]
          S88,
        /// <summary>
        /// S95 property
        /// </summary>
          [XmlEnum("S-95")]
          S95,
        /// <summary>
        /// SC90 property
        /// </summary>
          [XmlEnum("SC-90")]
          SC90,
        /// <summary>
        /// SE property
        /// </summary>
          SE,
        /// <summary>
        /// SER property
        /// </summary>
          SER,
        /// <summary>
        /// SM property
        /// </summary>
          SM,
        /// <summary>
        /// SOO95 property
        /// </summary>
          [XmlEnum("SOO-95")]
          SOO95,
        /// <summary>
        /// Stainless property
        /// </summary>
          Stainless,
        /// <summary>
        /// SWR property
        /// </summary>
          SWR,
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// T66 property
        /// </summary>
          [XmlEnum("T-66")]
          T66,
        /// <summary>
        /// T95 property
        /// </summary>
          [XmlEnum("T-95")]
          T95,
        /// <summary>
        /// TD61 property
        /// </summary>
          [XmlEnum("T-D61")]
          TD61,
        /// <summary>
        /// TD63 property
        /// </summary>
          [XmlEnum("T-D63")]
          TD63,
        /// <summary>
        /// TK65 property
        /// </summary>
          [XmlEnum("T-K65")]
          TK65,
        /// <summary>
        /// UHS property
        /// </summary>
          UHS,
        /// <summary>
        /// USS125 property
        /// </summary>
          [XmlEnum("USS-125")]
          USS125,
        /// <summary>
        /// USS140 property
        /// </summary>
          [XmlEnum("USS-140")]
          USS140,
        /// <summary>
        /// USS50 property
        /// </summary>
          [XmlEnum("USS-50")]
          USS50,
        /// <summary>
        /// USS95 property
        /// </summary>
          [XmlEnum("USS-95")]
          USS95,
        /// <summary>
        /// V150 property
        /// </summary>
          [XmlEnum("V-150")]
          V150,
        /// <summary>
        /// WC50 property
        /// </summary>
          [XmlEnum("WC-50")]
          WC50,
        /// <summary>
        /// X property
        /// </summary>
          X,
        /// <summary>
        /// X140 property
        /// </summary>
          [XmlEnum("X-140")]
          X140,
        /// <summary>
        /// X42 property
        /// </summary>
          [XmlEnum("X-42")]
          X42,
        /// <summary>
        /// X46 property
        /// </summary>
          [XmlEnum("X-46")]
          X46,
        /// <summary>
        /// X52 property
        /// </summary>
          [XmlEnum("X-52")]
          X52,
        /// <summary>
        /// X56 property
        /// </summary>
          [XmlEnum("X-56")]
          X56,
        /// <summary>
        /// X60 property
        /// </summary>
          [XmlEnum("X-60")]
          X60,
        /// <summary>
        /// X70 property
        /// </summary>
          [XmlEnum("X-70")]
          X70,
        /// <summary>
        /// X95 property
        /// </summary>
          [XmlEnum("X-95")]
          X95,
        /// <summary>
        /// XD property
        /// </summary>
          XD
        }
        /// <summary>
        /// This class represents the Coating xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the Coating xsd enumeration.")]
        public enum Coating 
        {
        /// <summary>
        /// bare property
        /// </summary>
          bare,
        /// <summary>
        /// carbonnitrided property
        /// </summary>
          carbonnitrided,
        /// <summary>
        /// carburized property
        /// </summary>
          carburized,
        /// <summary>
        /// carburizedhardened property
        /// </summary>
          [XmlEnum("carburized-hardened")]
          carburizedhardened,
        /// <summary>
        /// cementlined property
        /// </summary>
          cementlined,
        /// <summary>
        /// chrome property
        /// </summary>
          chrome,
        /// <summary>
        /// chromeplated property
        /// </summary>
          [XmlEnum("chrome-plated")]
          chromeplated,
        /// <summary>
        /// chromeplatedgrooved property
        /// </summary>
          [XmlEnum("chromeplated-grooved")]
          chromeplatedgrooved,
        /// <summary>
        /// chromeplatedheavy property
        /// </summary>
          [XmlEnum("chromeplated-heavy")]
          chromeplatedheavy,
        /// <summary>
        /// corrosioncoating property
        /// </summary>
          [XmlEnum("corrosion coating")]
          corrosioncoating,
        /// <summary>
        /// dblgalv property
        /// </summary>
          dblgalv,
        /// <summary>
        /// duolin20wr property
        /// </summary>
          duolin20wr,
        /// <summary>
        /// duoline property
        /// </summary>
          duoline,
        /// <summary>
        /// duoline10 property
        /// </summary>
          duoline10,
        /// <summary>
        /// duoline20 property
        /// </summary>
          duoline20,
        /// <summary>
        /// epdm property
        /// </summary>
          epdm,
        /// <summary>
        /// fiberglasslined property
        /// </summary>
          [XmlEnum("fiberglass-lined")]
          fiberglasslined,
        /// <summary>
        /// galvanized property
        /// </summary>
          galvanized,
        /// <summary>
        /// hardened property
        /// </summary>
          hardened,
        /// <summary>
        /// hardlined property
        /// </summary>
          [XmlEnum("hard-lined")]
          hardlined,
        /// <summary>
        /// ins property
        /// </summary>
          ins,
        /// <summary>
        /// ipc property
        /// </summary>
          ipc,
        /// <summary>
        /// ipcepoxy property
        /// </summary>
          [XmlEnum("ipc-epoxy")]
          ipcepoxy,
        /// <summary>
        /// ipcepxthk property
        /// </summary>
          [XmlEnum("ipc-epxthk")]
          ipcepxthk,
        /// <summary>
        /// ipcepxthn property
        /// </summary>
          [XmlEnum("ipc-epxthn")]
          ipcepxthn,
        /// <summary>
        /// ipcnylon property
        /// </summary>
          [XmlEnum("ipc-nylon")]
          ipcnylon,
        /// <summary>
        /// ipcrwrap property
        /// </summary>
          [XmlEnum("ipc-rwrap")]
          ipcrwrap,
        /// <summary>
        /// ipcs505 property
        /// </summary>
          [XmlEnum("ipc-s505")]
          ipcs505,
        /// <summary>
        /// ipcs650 property
        /// </summary>
          [XmlEnum("ipc-s650")]
          ipcs650,
        /// <summary>
        /// ipctk70 property
        /// </summary>
          [XmlEnum("ipc-tk70")]
          ipctk70,
        /// <summary>
        /// ipctk75 property
        /// </summary>
          [XmlEnum("ipc-tk75")]
          ipctk75,
        /// <summary>
        /// lp property
        /// </summary>
          lp,
        /// <summary>
        /// moly property
        /// </summary>
          moly,
        /// <summary>
        /// mtr property
        /// </summary>
          mtr,
        /// <summary>
        /// na property
        /// </summary>
          [XmlEnum("n/a")]
          na,
        /// <summary>
        /// nickelcarbide property
        /// </summary>
          [XmlEnum("nickel-carbide")]
          nickelcarbide,
        /// <summary>
        /// nickelplated property
        /// </summary>
          [XmlEnum("nickel-plated")]
          nickelplated,
        /// <summary>
        /// nitrided property
        /// </summary>
          nitrided,
        /// <summary>
        /// nitrile property
        /// </summary>
          nitrile,
        /// <summary>
        /// pap property
        /// </summary>
          pap,
        /// <summary>
        /// pelined property
        /// </summary>
          pelined,
        /// <summary>
        /// phosphate property
        /// </summary>
          phosphate,
        /// <summary>
        /// phosphorus property
        /// </summary>
          phosphorus,
        /// <summary>
        /// plastic property
        /// </summary>
          plastic,
        /// <summary>
        /// plungerlubricant property
        /// </summary>
          [XmlEnum("plunger-lubricant")]
          plungerlubricant,
        /// <summary>
        /// polishedrodliner property
        /// </summary>
          [XmlEnum("polished-rodliner")]
          polishedrodliner,
        /// <summary>
        /// polypropylene property
        /// </summary>
          polypropylene,
        /// <summary>
        /// ppwnitrl property
        /// </summary>
          [XmlEnum("ppw/nitrl")]
          ppwnitrl,
        /// <summary>
        /// pvclined property
        /// </summary>
          pvclined,
        /// <summary>
        /// rodguide1 property
        /// </summary>
          [XmlEnum("rodguide-1")]
          rodguide1,
        /// <summary>
        /// rodguide2 property
        /// </summary>
          [XmlEnum("rodguide-2")]
          rodguide2,
        /// <summary>
        /// rodguide21 property
        /// </summary>
          [XmlEnum("rodguide-2.")]
          rodguide21,
        /// <summary>
        /// rodguide3 property
        /// </summary>
          [XmlEnum("rodguide-3")]
          rodguide3,
        /// <summary>
        /// rodguide4 property
        /// </summary>
          [XmlEnum("rodguide-4")]
          rodguide4,
        /// <summary>
        /// rodguide5 property
        /// </summary>
          [XmlEnum("rodguide-5")]
          rodguide5,
        /// <summary>
        /// rodguide6 property
        /// </summary>
          [XmlEnum("rodguide-6")]
          rodguide6,
        /// <summary>
        /// rodguide7 property
        /// </summary>
          [XmlEnum("rodguide-7")]
          rodguide7,
        /// <summary>
        /// rodguidefx property
        /// </summary>
          [XmlEnum("rodguide-fx")]
          rodguidefx,
        /// <summary>
        /// rodguideso property
        /// </summary>
          [XmlEnum("rodguide-so")]
          rodguideso,
        /// <summary>
        /// rodguideso1 property
        /// </summary>
          [XmlEnum("rodguide-so1")]
          rodguideso1,
        /// <summary>
        /// rodguideso2 property
        /// </summary>
          [XmlEnum("rodguide-so2")]
          rodguideso2,
        /// <summary>
        /// rodguideso3 property
        /// </summary>
          [XmlEnum("rodguide-so3")]
          rodguideso3,
        /// <summary>
        /// rodguideso4 property
        /// </summary>
          [XmlEnum("rodguide-so4")]
          rodguideso4,
        /// <summary>
        /// rodguideso5 property
        /// </summary>
          [XmlEnum("rodguide-so5")]
          rodguideso5,
        /// <summary>
        /// rodguideso6 property
        /// </summary>
          [XmlEnum("rodguide-so6")]
          rodguideso6,
        /// <summary>
        /// rodguideso8 property
        /// </summary>
          [XmlEnum("rodguide-so8")]
          rodguideso8,
        /// <summary>
        /// rodguidesp property
        /// </summary>
          [XmlEnum("rodguide-sp")]
          rodguidesp,
        /// <summary>
        /// spraymetal property
        /// </summary>
          [XmlEnum("spray-metal")]
          spraymetal,
        /// <summary>
        /// spraymetalmonel property
        /// </summary>
          [XmlEnum("spray-metal-monel")]
          spraymetalmonel,
        /// <summary>
        /// spraymetalmonel1 property
        /// </summary>
          [XmlEnum("spraymetal-monel")]
          spraymetalmonel1,
        /// <summary>
        /// spraymetalnickel property
        /// </summary>
          [XmlEnum("spraymetal-nickel")]
          spraymetalnickel,
        /// <summary>
        /// spraymetalodnickelplatedid property
        /// </summary>
          [XmlEnum("spraymetal-od/nickelplated-id")]
          spraymetalodnickelplatedid,
        /// <summary>
        /// spraymetalsteel property
        /// </summary>
          [XmlEnum("spraymetal-steel")]
          spraymetalsteel,
        /// <summary>
        /// spraymetalthick property
        /// </summary>
          [XmlEnum("spraymetal-thick")]
          spraymetalthick,
        /// <summary>
        /// sslined property
        /// </summary>
          sslined,
        /// <summary>
        /// teflon property
        /// </summary>
          teflon,
        /// <summary>
        /// teflonred property
        /// </summary>
          [XmlEnum("teflon-red")]
          teflonred,
        /// <summary>
        /// teflontan property
        /// </summary>
          [XmlEnum("teflon-tan")]
          teflontan,
        /// <summary>
        /// teflonyellow property
        /// </summary>
          [XmlEnum("teflon-yellow")]
          teflonyellow,
        /// <summary>
        /// thermo property
        /// </summary>
          thermo,
        /// <summary>
        /// tk4 property
        /// </summary>
          [XmlEnum("tk-4")]
          tk4,
        /// <summary>
        /// tk99 property
        /// </summary>
          [XmlEnum("tk-99")]
          tk99,
        /// <summary>
        /// tuffr property
        /// </summary>
          tuffr,
        /// <summary>
        /// tungstenplated property
        /// </summary>
          [XmlEnum("tungsten plated")]
          tungstenplated,
        /// <summary>
        /// zincplated property
        /// </summary>
          zincplated
        }
        /// <summary>
        /// This class represents the PerforationToolType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PerforationToolType xsd enumeration.")]
        public enum PerforationToolType 
        {
        /// <summary>
        /// casinggun property
        /// </summary>
          [XmlEnum("casing gun")]
          casinggun,
        /// <summary>
        /// coiledtubingjettool property
        /// </summary>
          [XmlEnum("coiled tubing jet tool")]
          coiledtubingjettool,
        /// <summary>
        /// drilled property
        /// </summary>
          drilled,
        /// <summary>
        /// mandrel property
        /// </summary>
          mandrel,
        /// <summary>
        /// na property
        /// </summary>
          [XmlEnum("n/a")]
          na,
        /// <summary>
        /// slotsmachinecut property
        /// </summary>
          [XmlEnum("slots-machine cut")]
          slotsmachinecut,
        /// <summary>
        /// slotsundercut property
        /// </summary>
          [XmlEnum("slots-undercut")]
          slotsundercut,
        /// <summary>
        /// stripgun property
        /// </summary>
          [XmlEnum("strip gun")]
          stripgun,
        /// <summary>
        /// tcpgun property
        /// </summary>
          [XmlEnum("tcp gun")]
          tcpgun,
        /// <summary>
        /// throughtubinggun property
        /// </summary>
          [XmlEnum("through tubing gun")]
          throughtubinggun
        }
        /// <summary>
        /// This class represents the DownholeStringType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DownholeStringType xsd enumeration.")]
        public enum DownholeStringType 
        {
        /// <summary>
        /// casing property
        /// </summary>
          casing,
        /// <summary>
        /// others property
        /// </summary>
          others,
        /// <summary>
        /// rod property
        /// </summary>
          rod,
        /// <summary>
        /// tubing property
        /// </summary>
          tubing,
        /// <summary>
        /// wellhead property
        /// </summary>
          wellhead
        }
        /// <summary>
        /// This class represents the SubStringType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the SubStringType xsd enumeration.")]
        public enum SubStringType 
        {
        /// <summary>
        /// abandonedjunkfish property
        /// </summary>
          [XmlEnum("abandoned junk/fish")]
          abandonedjunkfish,
        /// <summary>
        /// capillarystringinsidetubing property
        /// </summary>
          [XmlEnum("capillary string (inside tubing)")]
          capillarystringinsidetubing,
        /// <summary>
        /// capillarystringtubingcasingannulus property
        /// </summary>
          [XmlEnum("capillary string (tubing/casing annulus)")]
          capillarystringtubingcasingannulus,
        /// <summary>
        /// conductorcasing property
        /// </summary>
          [XmlEnum("conductor casing")]
          conductorcasing,
        /// <summary>
        /// drillstring property
        /// </summary>
          [XmlEnum("drill string")]
          drillstring,
        /// <summary>
        /// flowline property
        /// </summary>
          flowline,
        /// <summary>
        /// geologicalobjects property
        /// </summary>
          [XmlEnum("geological objects")]
          geologicalobjects,
        /// <summary>
        /// innerliner property
        /// </summary>
          [XmlEnum("inner liner")]
          innerliner,
        /// <summary>
        /// intermediatecasing property
        /// </summary>
          [XmlEnum("intermediate casing")]
          intermediatecasing,
        /// <summary>
        /// productioncasing property
        /// </summary>
          [XmlEnum("production casing")]
          productioncasing,
        /// <summary>
        /// productionliner property
        /// </summary>
          [XmlEnum("production liner")]
          productionliner,
        /// <summary>
        /// protectivecasing property
        /// </summary>
          [XmlEnum("protective casing")]
          protectivecasing,
        /// <summary>
        /// surfacecasing property
        /// </summary>
          [XmlEnum("surface casing")]
          surfacecasing,
        /// <summary>
        /// wellborenotes property
        /// </summary>
          [XmlEnum("wellbore notes")]
          wellborenotes,
        /// <summary>
        /// ytoolstring property
        /// </summary>
          [XmlEnum("y-tool string")]
          ytoolstring
        }
        /// <summary>
        /// This class represents the VolumePerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerMassUom xsd enumeration.")]
        public enum VolumePerMassUom 
        {
        /// <summary>
        /// Item001Lkg property
        /// </summary>
          [XmlEnum("0.01 L/kg")]
          Item001Lkg,
        /// <summary>
        /// bbltonUK property
        /// </summary>
          [XmlEnum("bbl/ton[UK]")]
          bbltonUK,
        /// <summary>
        /// bbltonUS property
        /// </summary>
          [XmlEnum("bbl/ton[US]")]
          bbltonUS,
        /// <summary>
        /// cm3g property
        /// </summary>
          [XmlEnum("cm3/g")]
          cm3g,
        /// <summary>
        /// dm3kg property
        /// </summary>
          [XmlEnum("dm3/kg")]
          dm3kg,
        /// <summary>
        /// dm3t property
        /// </summary>
          [XmlEnum("dm3/t")]
          dm3t,
        /// <summary>
        /// ft3kg property
        /// </summary>
          [XmlEnum("ft3/kg")]
          ft3kg,
        /// <summary>
        /// ft3lbm property
        /// </summary>
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        /// <summary>
        /// ft3sack94lbm property
        /// </summary>
          [XmlEnum("ft3/sack[94lbm]")]
          ft3sack94lbm,
        /// <summary>
        /// galUKlbm property
        /// </summary>
          [XmlEnum("gal[UK]/lbm")]
          galUKlbm,
        /// <summary>
        /// galUSlbm property
        /// </summary>
          [XmlEnum("gal[US]/lbm")]
          galUSlbm,
        /// <summary>
        /// galUSsack94lbm property
        /// </summary>
          [XmlEnum("gal[US]/sack[94lbm]")]
          galUSsack94lbm,
        /// <summary>
        /// galUStonUK property
        /// </summary>
          [XmlEnum("gal[US]/ton[UK]")]
          galUStonUK,
        /// <summary>
        /// galUStonUS property
        /// </summary>
          [XmlEnum("gal[US]/ton[US]")]
          galUStonUS,
        /// <summary>
        /// Lkg property
        /// </summary>
          [XmlEnum("L/kg")]
          Lkg,
        /// <summary>
        /// Lt property
        /// </summary>
          [XmlEnum("L/t")]
          Lt,
        /// <summary>
        /// LtonUK property
        /// </summary>
          [XmlEnum("L/ton[UK]")]
          LtonUK,
        /// <summary>
        /// m3g property
        /// </summary>
          [XmlEnum("m3/g")]
          m3g,
        /// <summary>
        /// m3kg property
        /// </summary>
          [XmlEnum("m3/kg")]
          m3kg,
        /// <summary>
        /// m3t property
        /// </summary>
          [XmlEnum("m3/t")]
          m3t,
        /// <summary>
        /// m3tonUK property
        /// </summary>
          [XmlEnum("m3/ton[UK]")]
          m3tonUK,
        /// <summary>
        /// m3tonUS property
        /// </summary>
          [XmlEnum("m3/ton[US]")]
          m3tonUS
        }
        /// <summary>
        /// This class represents the WellboreFluidLocation xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellboreFluidLocation xsd enumeration.")]
        public enum WellboreFluidLocation 
        {
        /// <summary>
        /// annulus property
        /// </summary>
          annulus,
        /// <summary>
        /// deadend property
        /// </summary>
          deadend,
        /// <summary>
        /// inpipe property
        /// </summary>
          [XmlEnum("in pipe")]
          inpipe,
        /// <summary>
        /// rathole property
        /// </summary>
          [XmlEnum("rat hole")]
          rathole
        }
        /// <summary>
        /// This class represents the HoleCasingType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the HoleCasingType xsd enumeration.")]
        public enum HoleCasingType 
        {
        /// <summary>
        /// blowoutpreventer property
        /// </summary>
          [XmlEnum("blow out preventer")]
          blowoutpreventer,
        /// <summary>
        /// casing property
        /// </summary>
          casing,
        /// <summary>
        /// conductor property
        /// </summary>
          conductor,
        /// <summary>
        /// curvedconductor property
        /// </summary>
          [XmlEnum("curved conductor")]
          curvedconductor,
        /// <summary>
        /// liner property
        /// </summary>
          liner,
        /// <summary>
        /// openhole property
        /// </summary>
          [XmlEnum("open hole")]
          openhole,
        /// <summary>
        /// riser property
        /// </summary>
          riser,
        /// <summary>
        /// tubing property
        /// </summary>
          tubing
        }
        /// <summary>
        /// This class represents the EtpDataType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the EtpDataType xsd enumeration.")]
        public enum EtpDataType 
        {
        /// <summary>
        /// True or false values.
        /// </summary>
          boolean,
        /// <summary>
        /// Integer data value (nominally a one-byte value). The value must conform to the format of the xsd:dateTime data type (minInclusive=-128 and maxInclusive=127).
        /// </summary>
          bytes,
        /// <summary>
        /// Double-precision floating-point value (nominally an 8-byte value). The value must conform to the format of the xsd:double data type.
        /// </summary>
          @double,
        /// <summary>
        /// Single-precision floating-point value (nominally a 4-byte value). The value must conform to the format of the xsd:float data type
        /// </summary>
          @float,
        /// <summary>
        /// Integer data value (nominally a 4-byte value). The value must conform to the format of the xsd:int data type.
        /// </summary>
          @int,
        /// <summary>
        /// Long integer data value (nominally an 8-byte value). The value must conform to the format of the xsd:long data type.
        /// </summary>
          @long,
        /// <summary>
        /// No value or the value is null.
        /// </summary>
          @null,
        /// <summary>
        /// Character string data. The value must conform to the format of the xsd:string data type. The maximum length of a value is determined by individual servers. 
        /// </summary>
          @string,
        /// <summary>
        /// An array of doubles.
        /// </summary>
          vector
        }
        /// <summary>
        /// This class represents the ChannelIndexType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ChannelIndexType xsd enumeration.")]
        public enum ChannelIndexType 
        {
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// trueverticaldepth property
        /// </summary>
          [XmlEnum("true vertical depth")]
          trueverticaldepth,
        /// <summary>
        /// passindexeddepth property
        /// </summary>
          [XmlEnum("pass indexed depth")]
          passindexeddepth,
        /// <summary>
        /// datetime property
        /// </summary>
          [XmlEnum("date time")]
          datetime,
        /// <summary>
        /// elapsedtime property
        /// </summary>
          [XmlEnum("elapsed time")]
          elapsedtime,
        /// <summary>
        /// Temperature.
        /// </summary>
          temperature,
        /// <summary>
        /// Pressure.
        /// </summary>
          pressure
        }
        /// <summary>
        /// This class represents the IndexDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the IndexDirection xsd enumeration.")]
        public enum IndexDirection 
        {
        /// <summary>
        /// The sort order of the data row index values. For a "decreasing" direction, the index value of consecutive data nodes are descending.
        /// </summary>
          decreasing,
        /// <summary>
        /// The sort order of the data row index values. For an "increasing" direction, the index value of consecutive data nodes are ascending.
        /// </summary>
          increasing
        }
        /// <summary>
        /// This class represents the MudClass xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MudClass xsd enumeration.")]
        public enum MudClass 
        {
        /// <summary>
        /// oilbased property
        /// </summary>
          [XmlEnum("oil-based")]
          oilbased,
        /// <summary>
        /// waterbased property
        /// </summary>
          [XmlEnum("water-based")]
          waterbased,
        /// <summary>
        /// A drilling fluid in which neither water nor oil is the continuous phase.
        /// </summary>
          other,
        /// <summary>
        /// A drilling fluid which is gas-based.
        /// </summary>
          pneumatic
        }
        /// <summary>
        /// This class represents the MudSubClass xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MudSubClass xsd enumeration.")]
        public enum MudSubClass 
        {
        /// <summary>
        /// aeratedmud property
        /// </summary>
          [XmlEnum("aerated mud")]
          aeratedmud,
        /// <summary>
        /// air property
        /// </summary>
          air,
        /// <summary>
        /// brackishwater property
        /// </summary>
          [XmlEnum("brackish water")]
          brackishwater,
        /// <summary>
        /// brine property
        /// </summary>
          brine,
        /// <summary>
        /// caesiumformate property
        /// </summary>
          [XmlEnum("caesium formate")]
          caesiumformate,
        /// <summary>
        /// dieseloilbased property
        /// </summary>
          [XmlEnum("diesel oil-based")]
          dieseloilbased,
        /// <summary>
        /// estersyntheticbased property
        /// </summary>
          [XmlEnum("ester synthetic-based")]
          estersyntheticbased,
        /// <summary>
        /// freshwater property
        /// </summary>
          freshwater,
        /// <summary>
        /// glycolmud property
        /// </summary>
          [XmlEnum("glycol mud")]
          glycolmud,
        /// <summary>
        /// gypmud property
        /// </summary>
          [XmlEnum("gyp mud")]
          gypmud,
        /// <summary>
        /// internalolefinsyntheticbased property
        /// </summary>
          [XmlEnum("internal-olefin synthetic-based")]
          internalolefinsyntheticbased,
        /// <summary>
        /// lightlytreatednondispersed property
        /// </summary>
          [XmlEnum("lightly treated non-dispersed")]
          lightlytreatednondispersed,
        /// <summary>
        /// lignitelignosulfonatemud property
        /// </summary>
          [XmlEnum("lignite/lignosulfonate mud")]
          lignitelignosulfonatemud,
        /// <summary>
        /// limemud property
        /// </summary>
          [XmlEnum("lime mud")]
          limemud,
        /// <summary>
        /// linearparaffinsyntheticbased property
        /// </summary>
          [XmlEnum("linear paraffin synthetic-based")]
          linearparaffinsyntheticbased,
        /// <summary>
        /// linearalphaolefinsyntheticbased property
        /// </summary>
          [XmlEnum("linear-alpha-olefin synthetic-based")]
          linearalphaolefinsyntheticbased,
        /// <summary>
        /// lowsolids property
        /// </summary>
          [XmlEnum("low solids")]
          lowsolids,
        /// <summary>
        /// lowtoxicitymineraloilbased property
        /// </summary>
          [XmlEnum("low toxicity mineral oil-based")]
          lowtoxicitymineraloilbased,
        /// <summary>
        /// mineraloilbased property
        /// </summary>
          [XmlEnum("mineral oil-based")]
          mineraloilbased,
        /// <summary>
        /// mist property
        /// </summary>
          mist,
        /// <summary>
        /// mixedmetaloxidemud property
        /// </summary>
          [XmlEnum("mixed-metal oxide mud")]
          mixedmetaloxidemud,
        /// <summary>
        /// nativenaturalmud property
        /// </summary>
          [XmlEnum("native/natural mud")]
          nativenaturalmud,
        /// <summary>
        /// naturalgas property
        /// </summary>
          [XmlEnum("natural gas")]
          naturalgas,
        /// <summary>
        /// nitrogenaeratedmud property
        /// </summary>
          [XmlEnum("nitrogen-aerated mud")]
          nitrogenaeratedmud,
        /// <summary>
        /// nonaqueousinvertemulsiondrillingfluids property
        /// </summary>
          [XmlEnum("non-aqueous (invert emulsion) drilling fluids")]
          nonaqueousinvertemulsiondrillingfluids,
        /// <summary>
        /// nondispersed property
        /// </summary>
          [XmlEnum("non-dispersed")]
          nondispersed,
        /// <summary>
        /// pneumaticgaseousdrillingfluids property
        /// </summary>
          [XmlEnum("pneumatic (gaseous) drilling fluids")]
          pneumaticgaseousdrillingfluids,
        /// <summary>
        /// polymermud property
        /// </summary>
          [XmlEnum("polymer mud")]
          polymermud,
        /// <summary>
        /// potassiumformate property
        /// </summary>
          [XmlEnum("potassium formate")]
          potassiumformate,
        /// <summary>
        /// potassiumtreatedmud property
        /// </summary>
          [XmlEnum("potassium-treated mud")]
          potassiumtreatedmud,
        /// <summary>
        /// saltwatermud property
        /// </summary>
          [XmlEnum("salt water mud")]
          saltwatermud,
        /// <summary>
        /// saturatedsaltmud property
        /// </summary>
          [XmlEnum("saturated salt mud")]
          saturatedsaltmud,
        /// <summary>
        /// seawater property
        /// </summary>
          [XmlEnum("sea water")]
          seawater,
        /// <summary>
        /// seawatermud property
        /// </summary>
          [XmlEnum("seawater mud")]
          seawatermud,
        /// <summary>
        /// silicatemud property
        /// </summary>
          [XmlEnum("silicate mud")]
          silicatemud,
        /// <summary>
        /// sodiumformate property
        /// </summary>
          [XmlEnum("sodium formate")]
          sodiumformate,
        /// <summary>
        /// spudmud property
        /// </summary>
          [XmlEnum("spud mud")]
          spudmud,
        /// <summary>
        /// stablefoam property
        /// </summary>
          [XmlEnum("stable foam")]
          stablefoam,
        /// <summary>
        /// stifffoam property
        /// </summary>
          [XmlEnum("stiff foam")]
          stifffoam,
        /// <summary>
        /// waterbaseddrillingfluids property
        /// </summary>
          [XmlEnum("water-based drilling fluids")]
          waterbaseddrillingfluids
        }
        /// <summary>
        /// This class represents the ReadingKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ReadingKind xsd enumeration.")]
        public enum ReadingKind 
        {
        /// <summary>
        /// The reading was measured.
        /// </summary>
          measured,
        /// <summary>
        /// The reading was estimated.
        /// </summary>
          estimated,
        /// <summary>
        /// The value is not known. Avoid using this value. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations. 
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ElectricPotentialDifferenceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricPotentialDifferenceUom xsd enumeration.")]
        public enum ElectricPotentialDifferenceUom 
        {
        /// <summary>
        /// cV property
        /// </summary>
          cV,
        /// <summary>
        /// dV property
        /// </summary>
          dV,
        /// <summary>
        /// fV property
        /// </summary>
          fV,
        /// <summary>
        /// GV property
        /// </summary>
          GV,
        /// <summary>
        /// kV property
        /// </summary>
          kV,
        /// <summary>
        /// mV property
        /// </summary>
          mV,
        /// <summary>
        /// MV property
        /// </summary>
          MV,
        /// <summary>
        /// nV property
        /// </summary>
          nV,
        /// <summary>
        /// pV property
        /// </summary>
          pV,
        /// <summary>
        /// TV property
        /// </summary>
          TV,
        /// <summary>
        /// uV property
        /// </summary>
          uV,
        /// <summary>
        /// V property
        /// </summary>
          V
        }
        /// <summary>
        /// This class represents the WellboreType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellboreType xsd enumeration.")]
        public enum WellboreType 
        {
        /// <summary>
        /// The original wellbore had to be abandoned before its final usage. This wellbore is being drilled as a different wellbore, but one which has the same target as the one that was abandoned.
        /// </summary>
          bypass,
        /// <summary>
        /// This is the first wellbore that has been drilled, or attempted, in a given well.
        /// </summary>
          initial,
        /// <summary>
        /// The wellbore is being redrilled.
        /// </summary>
          redrill,
        /// <summary>
        /// The wellbore is being reentered after a period of abandonment.
        /// </summary>
          reentry,
        /// <summary>
        /// The wellbore is part of an existing regulatory well. The original borehole did not reach the target depth. This borehole required the well to be respudded (drilled from a different surface position).
        /// </summary>
          respud,
        /// <summary>
        /// The wellbore is a deviation from a given wellbore that produces a different borehole from the others, and whose bottomhole differs from any previously existing wellbore bottomholes.
        /// </summary>
          sidetrack
        }
        /// <summary>
        /// This class represents the PresTestType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PresTestType xsd enumeration.")]
        public enum PresTestType 
        {
        /// <summary>
        /// leakofftest property
        /// </summary>
          [XmlEnum("leak off test")]
          leakofftest,
        /// <summary>
        /// formationintegritytest property
        /// </summary>
          [XmlEnum("formation integrity test")]
          formationintegritytest
        }
        /// <summary>
        /// This class represents the DrillActivityCode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DrillActivityCode xsd enumeration.")]
        public enum DrillActivityCode 
        {
        /// <summary>
        /// abandonment property
        /// </summary>
          abandonment,
        /// <summary>
        /// abandonmentlogplugs property
        /// </summary>
          [XmlEnum("abandonment -- log plugs")]
          abandonmentlogplugs,
        /// <summary>
        /// abandonmentrunplugs property
        /// </summary>
          [XmlEnum("abandonment -- run plugs")]
          abandonmentrunplugs,
        /// <summary>
        /// abandonmentwaitoncement property
        /// </summary>
          [XmlEnum("abandonment -- wait on cement")]
          abandonmentwaitoncement,
        /// <summary>
        /// casing property
        /// </summary>
          casing,
        /// <summary>
        /// cement property
        /// </summary>
          cement,
        /// <summary>
        /// cementcirculate property
        /// </summary>
          [XmlEnum("cement -- circulate")]
          cementcirculate,
        /// <summary>
        /// cementother property
        /// </summary>
          [XmlEnum("cement -- other")]
          cementother,
        /// <summary>
        /// cementrigup property
        /// </summary>
          [XmlEnum("cement -- rig up")]
          cementrigup,
        /// <summary>
        /// cementwaitoncement property
        /// </summary>
          [XmlEnum("cement -- wait on cement")]
          cementwaitoncement,
        /// <summary>
        /// circulate property
        /// </summary>
          circulate,
        /// <summary>
        /// circulateboulderorgravel property
        /// </summary>
          [XmlEnum("circulate -- boulder or gravel")]
          circulateboulderorgravel,
        /// <summary>
        /// circulatecasing property
        /// </summary>
          [XmlEnum("circulate -- casing")]
          circulatecasing,
        /// <summary>
        /// circulatecementing property
        /// </summary>
          [XmlEnum("circulate -- cementing")]
          circulatecementing,
        /// <summary>
        /// circulatecirculatesamples property
        /// </summary>
          [XmlEnum("circulate -- circulate samples")]
          circulatecirculatesamples,
        /// <summary>
        /// circulatecoring property
        /// </summary>
          [XmlEnum("circulate -- coring")]
          circulatecoring,
        /// <summary>
        /// circulatedrilling property
        /// </summary>
          [XmlEnum("circulate -- drilling")]
          circulatedrilling,
        /// <summary>
        /// circulatefishing property
        /// </summary>
          [XmlEnum("circulate -- fishing")]
          circulatefishing,
        /// <summary>
        /// circulategumboattack property
        /// </summary>
          [XmlEnum("circulate -- gumbo attack")]
          circulategumboattack,
        /// <summary>
        /// circulatelogging property
        /// </summary>
          [XmlEnum("circulate -- logging")]
          circulatelogging,
        /// <summary>
        /// circulatelostcirculation property
        /// </summary>
          [XmlEnum("circulate -- lost circulation")]
          circulatelostcirculation,
        /// <summary>
        /// circulatewellcontrol property
        /// </summary>
          [XmlEnum("circulate -- well control")]
          circulatewellcontrol,
        /// <summary>
        /// completionoperations property
        /// </summary>
          [XmlEnum("completion operations")]
          completionoperations,
        /// <summary>
        /// completionoperationsgravelpacking property
        /// </summary>
          [XmlEnum("completion operations -- gravel packing")]
          completionoperationsgravelpacking,
        /// <summary>
        /// completionoperationslogging property
        /// </summary>
          [XmlEnum("completion operations -- logging")]
          completionoperationslogging,
        /// <summary>
        /// completionoperationsrigup property
        /// </summary>
          [XmlEnum("completion operations -- rig up")]
          completionoperationsrigup,
        /// <summary>
        /// completionoperationsrunningliner property
        /// </summary>
          [XmlEnum("completion operations -- running liner")]
          completionoperationsrunningliner,
        /// <summary>
        /// completionoperationsteardown property
        /// </summary>
          [XmlEnum("completion operations -- tear down")]
          completionoperationsteardown,
        /// <summary>
        /// completionoperationstesting property
        /// </summary>
          [XmlEnum("completion operations -- testing")]
          completionoperationstesting,
        /// <summary>
        /// condmud property
        /// </summary>
          [XmlEnum("cond mud")]
          condmud,
        /// <summary>
        /// coring property
        /// </summary>
          coring,
        /// <summary>
        /// coringconventional property
        /// </summary>
          [XmlEnum("coring -- conventional")]
          coringconventional,
        /// <summary>
        /// coringflowcheck property
        /// </summary>
          [XmlEnum("coring -- flow check")]
          coringflowcheck,
        /// <summary>
        /// coringlaydownbarrel property
        /// </summary>
          [XmlEnum("coring -- laydown barrel")]
          coringlaydownbarrel,
        /// <summary>
        /// coringoriented property
        /// </summary>
          [XmlEnum("coring -- oriented")]
          coringoriented,
        /// <summary>
        /// coringplasticsleeve property
        /// </summary>
          [XmlEnum("coring -- plastic sleeve")]
          coringplasticsleeve,
        /// <summary>
        /// coringrigupcorebarrel property
        /// </summary>
          [XmlEnum("coring -- rig up core barrel")]
          coringrigupcorebarrel,
        /// <summary>
        /// coringsponge property
        /// </summary>
          [XmlEnum("coring -- sponge")]
          coringsponge,
        /// <summary>
        /// cut property
        /// </summary>
          cut,
        /// <summary>
        /// deviationsurvey property
        /// </summary>
          [XmlEnum("deviation survey")]
          deviationsurvey,
        /// <summary>
        /// deviationsurveydirmultishot property
        /// </summary>
          [XmlEnum("deviation survey -- dir multi-shot")]
          deviationsurveydirmultishot,
        /// <summary>
        /// deviationsurveydirsingleshot property
        /// </summary>
          [XmlEnum("deviation survey -- dir single shot")]
          deviationsurveydirsingleshot,
        /// <summary>
        /// deviationsurveydrift property
        /// </summary>
          [XmlEnum("deviation survey -- drift")]
          deviationsurveydrift,
        /// <summary>
        /// deviationsurveygyro property
        /// </summary>
          [XmlEnum("deviation survey -- gyro")]
          deviationsurveygyro,
        /// <summary>
        /// deviationsurveyMWD property
        /// </summary>
          [XmlEnum("deviation survey -- MWD")]
          deviationsurveyMWD,
        /// <summary>
        /// dirwork property
        /// </summary>
          [XmlEnum("dir work")]
          dirwork,
        /// <summary>
        /// dirworkhorizontaldrilling property
        /// </summary>
          [XmlEnum("dir work -- horizontal drilling")]
          dirworkhorizontaldrilling,
        /// <summary>
        /// dirworkmotordrilling property
        /// </summary>
          [XmlEnum("dir work -- motor drilling")]
          dirworkmotordrilling,
        /// <summary>
        /// dirworkorient property
        /// </summary>
          [XmlEnum("dir work -- orient")]
          dirworkorient,
        /// <summary>
        /// dirworkrotarydrilling property
        /// </summary>
          [XmlEnum("dir work -- rotary drilling")]
          dirworkrotarydrilling,
        /// <summary>
        /// dirworkslantdrilling property
        /// </summary>
          [XmlEnum("dir work -- slant drilling")]
          dirworkslantdrilling,
        /// <summary>
        /// drilling property
        /// </summary>
          drilling,
        /// <summary>
        /// drillingcasing property
        /// </summary>
          [XmlEnum("drilling -- casing")]
          drillingcasing,
        /// <summary>
        /// drillingconnection property
        /// </summary>
          [XmlEnum("drilling -- connection")]
          drillingconnection,
        /// <summary>
        /// drillingdrillcement property
        /// </summary>
          [XmlEnum("drilling -- drill cement")]
          drillingdrillcement,
        /// <summary>
        /// drillingflowcheck property
        /// </summary>
          [XmlEnum("drilling -- flow check")]
          drillingflowcheck,
        /// <summary>
        /// drillingholeopening property
        /// </summary>
          [XmlEnum("drilling -- hole opening")]
          drillingholeopening,
        /// <summary>
        /// drillingnewhole property
        /// </summary>
          [XmlEnum("drilling -- new hole")]
          drillingnewhole,
        /// <summary>
        /// drillingsidetracking property
        /// </summary>
          [XmlEnum("drilling -- sidetracking")]
          drillingsidetracking,
        /// <summary>
        /// drillingunderreaming property
        /// </summary>
          [XmlEnum("drilling -- under-reaming")]
          drillingunderreaming,
        /// <summary>
        /// DST property
        /// </summary>
          DST,
        /// <summary>
        /// DSTcasedhole property
        /// </summary>
          [XmlEnum("DST -- cased hole")]
          DSTcasedhole,
        /// <summary>
        /// DSTlaydowntools property
        /// </summary>
          [XmlEnum("DST -- lay down tools")]
          DSTlaydowntools,
        /// <summary>
        /// DSTopenhole property
        /// </summary>
          [XmlEnum("DST -- open hole")]
          DSTopenhole,
        /// <summary>
        /// DSTopenholeclosedchamber property
        /// </summary>
          [XmlEnum("DST -- open hole closed chamber")]
          DSTopenholeclosedchamber,
        /// <summary>
        /// DSTriguptools property
        /// </summary>
          [XmlEnum("DST -- rig up tools")]
          DSTriguptools,
        /// <summary>
        /// fishing property
        /// </summary>
          fishing,
        /// <summary>
        /// fishingBHA property
        /// </summary>
          [XmlEnum("fishing -- BHA")]
          fishingBHA,
        /// <summary>
        /// fishingcasing property
        /// </summary>
          [XmlEnum("fishing -- casing")]
          fishingcasing,
        /// <summary>
        /// fishingcones property
        /// </summary>
          [XmlEnum("fishing -- cones")]
          fishingcones,
        /// <summary>
        /// fishingother property
        /// </summary>
          [XmlEnum("fishing -- other")]
          fishingother,
        /// <summary>
        /// fishingstuckpipe property
        /// </summary>
          [XmlEnum("fishing -- stuck pipe")]
          fishingstuckpipe,
        /// <summary>
        /// fishingwirelinetools property
        /// </summary>
          [XmlEnum("fishing -- wireline tools")]
          fishingwirelinetools,
        /// <summary>
        /// floatequip property
        /// </summary>
          [XmlEnum("float equip")]
          floatequip,
        /// <summary>
        /// HSE property
        /// </summary>
          HSE,
        /// <summary>
        /// HSEholddrill property
        /// </summary>
          [XmlEnum("HSE -- hold drill")]
          HSEholddrill,
        /// <summary>
        /// HSEincident property
        /// </summary>
          [XmlEnum("HSE -- incident")]
          HSEincident,
        /// <summary>
        /// HSEsafetymeeting property
        /// </summary>
          [XmlEnum("HSE -- safety meeting")]
          HSEsafetymeeting,
        /// <summary>
        /// mill property
        /// </summary>
          mill,
        /// <summary>
        /// millcutcasingortubing property
        /// </summary>
          [XmlEnum("mill -- cut casing or tubing")]
          millcutcasingortubing,
        /// <summary>
        /// millmilling property
        /// </summary>
          [XmlEnum("mill -- milling")]
          millmilling,
        /// <summary>
        /// miscellaneous property
        /// </summary>
          miscellaneous,
        /// <summary>
        /// nippleupBOP property
        /// </summary>
          [XmlEnum("nipple up BOP")]
          nippleupBOP,
        /// <summary>
        /// nippleupBOPdiverter property
        /// </summary>
          [XmlEnum("nipple up BOP -- diverter")]
          nippleupBOPdiverter,
        /// <summary>
        /// nippleupBOPmanifold property
        /// </summary>
          [XmlEnum("nipple up BOP -- manifold")]
          nippleupBOPmanifold,
        /// <summary>
        /// nippleupBOPother property
        /// </summary>
          [XmlEnum("nipple up BOP -- other")]
          nippleupBOPother,
        /// <summary>
        /// nippleupBOPPVTsystem property
        /// </summary>
          [XmlEnum("nipple up BOP -- PVT system")]
          nippleupBOPPVTsystem,
        /// <summary>
        /// nippleupBOPstack property
        /// </summary>
          [XmlEnum("nipple up BOP -- stack")]
          nippleupBOPstack,
        /// <summary>
        /// plugback property
        /// </summary>
          [XmlEnum("plug back")]
          plugback,
        /// <summary>
        /// plugbackabandonment property
        /// </summary>
          [XmlEnum("plug back -- abandonment")]
          plugbackabandonment,
        /// <summary>
        /// plugbackkickoffplug property
        /// </summary>
          [XmlEnum("plug back -- kick off plug")]
          plugbackkickoffplug,
        /// <summary>
        /// plugbacklostcirculation property
        /// </summary>
          [XmlEnum("plug back -- lost circulation")]
          plugbacklostcirculation,
        /// <summary>
        /// plugbackwaitoncement property
        /// </summary>
          [XmlEnum("plug back -- wait on cement")]
          plugbackwaitoncement,
        /// <summary>
        /// plugbackwellcontrol property
        /// </summary>
          [XmlEnum("plug back -- well control")]
          plugbackwellcontrol,
        /// <summary>
        /// pressuretest property
        /// </summary>
          [XmlEnum("pressure test")]
          pressuretest,
        /// <summary>
        /// pressuretestBOPmanifold property
        /// </summary>
          [XmlEnum("pressure test -- BOP manifold")]
          pressuretestBOPmanifold,
        /// <summary>
        /// pressuretestBOPstack property
        /// </summary>
          [XmlEnum("pressure test -- BOP stack")]
          pressuretestBOPstack,
        /// <summary>
        /// pressuretestformintegritytest property
        /// </summary>
          [XmlEnum("pressure test -- form integrity test")]
          pressuretestformintegritytest,
        /// <summary>
        /// pressuretestformleakofftest property
        /// </summary>
          [XmlEnum("pressure test -- form leak off test")]
          pressuretestformleakofftest,
        /// <summary>
        /// pressuretestpacker property
        /// </summary>
          [XmlEnum("pressure test -- packer")]
          pressuretestpacker,
        /// <summary>
        /// pressuretestPIT property
        /// </summary>
          [XmlEnum("pressure test -- PIT")]
          pressuretestPIT,
        /// <summary>
        /// reaming property
        /// </summary>
          reaming,
        /// <summary>
        /// reamingbackreaming property
        /// </summary>
          [XmlEnum("reaming -- back reaming")]
          reamingbackreaming,
        /// <summary>
        /// reamingcoring property
        /// </summary>
          [XmlEnum("reaming -- coring")]
          reamingcoring,
        /// <summary>
        /// reamingdrill property
        /// </summary>
          [XmlEnum("reaming -- drill")]
          reamingdrill,
        /// <summary>
        /// reaminglogging property
        /// </summary>
          [XmlEnum("reaming -- logging")]
          reaminglogging,
        /// <summary>
        /// reamingunderreaming property
        /// </summary>
          [XmlEnum("reaming -- under-reaming")]
          reamingunderreaming,
        /// <summary>
        /// rigmove property
        /// </summary>
          [XmlEnum("rig move")]
          rigmove,
        /// <summary>
        /// rigmoveanchorhandling property
        /// </summary>
          [XmlEnum("rig move -- anchor handling")]
          rigmoveanchorhandling,
        /// <summary>
        /// rigmoveinterpadmove property
        /// </summary>
          [XmlEnum("rig move -- inter-pad move")]
          rigmoveinterpadmove,
        /// <summary>
        /// rigmoveinterwellmove property
        /// </summary>
          [XmlEnum("rig move -- inter-well move")]
          rigmoveinterwellmove,
        /// <summary>
        /// rigmovejackupordown property
        /// </summary>
          [XmlEnum("rig move -- jack up or down")]
          rigmovejackupordown,
        /// <summary>
        /// rigmoveother property
        /// </summary>
          [XmlEnum("rig move -- other")]
          rigmoveother,
        /// <summary>
        /// rigmovepositionrig property
        /// </summary>
          [XmlEnum("rig move -- position rig")]
          rigmovepositionrig,
        /// <summary>
        /// rigmoveskidrig property
        /// </summary>
          [XmlEnum("rig move -- skid rig")]
          rigmoveskidrig,
        /// <summary>
        /// rigrelease property
        /// </summary>
          [XmlEnum("rig release")]
          rigrelease,
        /// <summary>
        /// rigreleasecutcasing property
        /// </summary>
          [XmlEnum("rig release -- cut casing")]
          rigreleasecutcasing,
        /// <summary>
        /// rigreleaseinstallcappingassembly property
        /// </summary>
          [XmlEnum("rig release -- install capping assembly")]
          rigreleaseinstallcappingassembly,
        /// <summary>
        /// rigreleaseMOBorDEMOB property
        /// </summary>
          [XmlEnum("rig release -- MOB or DE-MOB")]
          rigreleaseMOBorDEMOB,
        /// <summary>
        /// rigrepairs property
        /// </summary>
          [XmlEnum("rig repairs")]
          rigrepairs,
        /// <summary>
        /// rigrepairsdrawworks property
        /// </summary>
          [XmlEnum("rig repairs -- drawworks")]
          rigrepairsdrawworks,
        /// <summary>
        /// rigrepairselectrical property
        /// </summary>
          [XmlEnum("rig repairs -- electrical")]
          rigrepairselectrical,
        /// <summary>
        /// rigrepairsmudsystem property
        /// </summary>
          [XmlEnum("rig repairs -- mud system")]
          rigrepairsmudsystem,
        /// <summary>
        /// rigrepairsother property
        /// </summary>
          [XmlEnum("rig repairs -- other")]
          rigrepairsother,
        /// <summary>
        /// rigrepairsrotary property
        /// </summary>
          [XmlEnum("rig repairs -- rotary")]
          rigrepairsrotary,
        /// <summary>
        /// rigrepairssubseaequipment property
        /// </summary>
          [XmlEnum("rig repairs -- subsea equipment")]
          rigrepairssubseaequipment,
        /// <summary>
        /// rigrepairswellcontrolequipment property
        /// </summary>
          [XmlEnum("rig repairs -- well control equipment")]
          rigrepairswellcontrolequipment,
        /// <summary>
        /// rigservice property
        /// </summary>
          [XmlEnum("rig service")]
          rigservice,
        /// <summary>
        /// rigservicelubricaterig property
        /// </summary>
          [XmlEnum("rig service -- lubricate rig")]
          rigservicelubricaterig,
        /// <summary>
        /// rigservicetestequipment property
        /// </summary>
          [XmlEnum("rig service -- test equipment")]
          rigservicetestequipment,
        /// <summary>
        /// riguporteardown property
        /// </summary>
          [XmlEnum("rig up or tear down")]
          riguporteardown,
        /// <summary>
        /// riguporteardownrigup property
        /// </summary>
          [XmlEnum("rig up or tear down -- rig up")]
          riguporteardownrigup,
        /// <summary>
        /// riguporteardownsitework property
        /// </summary>
          [XmlEnum("rig up or tear down -- site work")]
          riguporteardownsitework,
        /// <summary>
        /// riguporteardownteardown property
        /// </summary>
          [XmlEnum("rig up or tear down -- tear down")]
          riguporteardownteardown,
        /// <summary>
        /// runcasing property
        /// </summary>
          [XmlEnum("run casing")]
          runcasing,
        /// <summary>
        /// runliner property
        /// </summary>
          [XmlEnum("run liner")]
          runliner,
        /// <summary>
        /// runorpullriser property
        /// </summary>
          [XmlEnum("run or pull riser")]
          runorpullriser,
        /// <summary>
        /// runorpullriserother property
        /// </summary>
          [XmlEnum("run or pull riser -- other")]
          runorpullriserother,
        /// <summary>
        /// runorpullriserrunorpullriser property
        /// </summary>
          [XmlEnum("run or pull riser -- run or pull riser")]
          runorpullriserrunorpullriser,
        /// <summary>
        /// set property
        /// </summary>
          set,
        /// <summary>
        /// slipdrillingline property
        /// </summary>
          [XmlEnum("slip drilling line")]
          slipdrillingline,
        /// <summary>
        /// squeezecement property
        /// </summary>
          [XmlEnum("squeeze cement")]
          squeezecement,
        /// <summary>
        /// squeezecementcasingrepair property
        /// </summary>
          [XmlEnum("squeeze cement -- casing repair")]
          squeezecementcasingrepair,
        /// <summary>
        /// squeezecementcasingshoe property
        /// </summary>
          [XmlEnum("squeeze cement -- casing shoe")]
          squeezecementcasingshoe,
        /// <summary>
        /// squeezecementpartedcasing property
        /// </summary>
          [XmlEnum("squeeze cement -- parted casing")]
          squeezecementpartedcasing,
        /// <summary>
        /// squeezecementperforationsDST property
        /// </summary>
          [XmlEnum("squeeze cement -- perforations DST")]
          squeezecementperforationsDST,
        /// <summary>
        /// stuckpipe property
        /// </summary>
          [XmlEnum("stuck pipe")]
          stuckpipe,
        /// <summary>
        /// surfacestringhandling property
        /// </summary>
          [XmlEnum("surface string handling")]
          surfacestringhandling,
        /// <summary>
        /// testcompletion property
        /// </summary>
          [XmlEnum("test completion")]
          testcompletion,
        /// <summary>
        /// testinggeneral property
        /// </summary>
          [XmlEnum("testing general")]
          testinggeneral,
        /// <summary>
        /// testinggeneralequipment property
        /// </summary>
          [XmlEnum("testing general -- equipment")]
          testinggeneralequipment,
        /// <summary>
        /// testinggeneralflow property
        /// </summary>
          [XmlEnum("testing general -- flow")]
          testinggeneralflow,
        /// <summary>
        /// tripping property
        /// </summary>
          tripping,
        /// <summary>
        /// trippingbackreaming property
        /// </summary>
          [XmlEnum("tripping -- back-reaming")]
          trippingbackreaming,
        /// <summary>
        /// trippingflowcheck property
        /// </summary>
          [XmlEnum("tripping -- flow check")]
          trippingflowcheck,
        /// <summary>
        /// trippingshorttripin property
        /// </summary>
          [XmlEnum("tripping -- short trip in")]
          trippingshorttripin,
        /// <summary>
        /// trippingshorttripout property
        /// </summary>
          [XmlEnum("tripping -- short trip out")]
          trippingshorttripout,
        /// <summary>
        /// trippingtripinfromsurface property
        /// </summary>
          [XmlEnum("tripping -- trip in (from surface)")]
          trippingtripinfromsurface,
        /// <summary>
        /// trippingtripouttosurface property
        /// </summary>
          [XmlEnum("tripping -- trip out (to surface)")]
          trippingtripouttosurface,
        /// <summary>
        /// wait property
        /// </summary>
          wait,
        /// <summary>
        /// waitdaylight property
        /// </summary>
          [XmlEnum("wait -- daylight")]
          waitdaylight,
        /// <summary>
        /// waitenvironmentalorregulatory property
        /// </summary>
          [XmlEnum("wait -- environmental or regulatory")]
          waitenvironmentalorregulatory,
        /// <summary>
        /// waitequipment property
        /// </summary>
          [XmlEnum("wait -- equipment")]
          waitequipment,
        /// <summary>
        /// waitholiday property
        /// </summary>
          [XmlEnum("wait -- holiday")]
          waitholiday,
        /// <summary>
        /// waitice property
        /// </summary>
          [XmlEnum("wait -- ice")]
          waitice,
        /// <summary>
        /// waitonorders property
        /// </summary>
          [XmlEnum("wait -- on orders")]
          waitonorders,
        /// <summary>
        /// waitoperator property
        /// </summary>
          [XmlEnum("wait -- operator")]
          waitoperator,
        /// <summary>
        /// waitother property
        /// </summary>
          [XmlEnum("wait -- other")]
          waitother,
        /// <summary>
        /// waitpartners property
        /// </summary>
          [XmlEnum("wait -- partners")]
          waitpartners,
        /// <summary>
        /// waitservicecompany property
        /// </summary>
          [XmlEnum("wait -- service company")]
          waitservicecompany,
        /// <summary>
        /// waitweather property
        /// </summary>
          [XmlEnum("wait -- weather")]
          waitweather,
        /// <summary>
        /// wellcontrol property
        /// </summary>
          [XmlEnum("well control")]
          wellcontrol,
        /// <summary>
        /// wellcontrolmix property
        /// </summary>
          [XmlEnum("well control -- mix")]
          wellcontrolmix,
        /// <summary>
        /// wellcontrolshutin property
        /// </summary>
          [XmlEnum("well control -- shut in")]
          wellcontrolshutin,
        /// <summary>
        /// wellcontrolstrip property
        /// </summary>
          [XmlEnum("well control -- strip")]
          wellcontrolstrip,
        /// <summary>
        /// wellcontrolwellkill property
        /// </summary>
          [XmlEnum("well control -- well kill")]
          wellcontrolwellkill,
        /// <summary>
        /// wellsrvc property
        /// </summary>
          [XmlEnum("well srvc")]
          wellsrvc,
        /// <summary>
        /// wellsrvccasingrepair property
        /// </summary>
          [XmlEnum("well srvc -- casing repair")]
          wellsrvccasingrepair,
        /// <summary>
        /// wellsrvccleanwelltocomplfluid property
        /// </summary>
          [XmlEnum("well srvc -- clean well to compl fluid")]
          wellsrvccleanwelltocomplfluid,
        /// <summary>
        /// wellsrvccoiledtubingwork property
        /// </summary>
          [XmlEnum("well srvc -- coiled tubing work")]
          wellsrvccoiledtubingwork,
        /// <summary>
        /// wellsrvcgravelpack property
        /// </summary>
          [XmlEnum("well srvc -- gravel pack")]
          wellsrvcgravelpack,
        /// <summary>
        /// wellsrvcinstallortestxmastree property
        /// </summary>
          [XmlEnum("well srvc -- install or test xmas tree")]
          wellsrvcinstallortestxmastree,
        /// <summary>
        /// wellsrvckillwell property
        /// </summary>
          [XmlEnum("well srvc -- kill well")]
          wellsrvckillwell,
        /// <summary>
        /// wellsrvcland property
        /// </summary>
          [XmlEnum("well srvc -- land")]
          wellsrvcland,
        /// <summary>
        /// wellsrvcperforate property
        /// </summary>
          [XmlEnum("well srvc -- perforate")]
          wellsrvcperforate,
        /// <summary>
        /// wellsrvcpullcompletion property
        /// </summary>
          [XmlEnum("well srvc -- pull completion")]
          wellsrvcpullcompletion,
        /// <summary>
        /// wellsrvcpullsuspensionplugs property
        /// </summary>
          [XmlEnum("well srvc -- pull suspension plugs")]
          wellsrvcpullsuspensionplugs,
        /// <summary>
        /// wellsrvcruncompletion property
        /// </summary>
          [XmlEnum("well srvc -- run completion")]
          wellsrvcruncompletion,
        /// <summary>
        /// wellsrvcrunscreens property
        /// </summary>
          [XmlEnum("well srvc -- run screens")]
          wellsrvcrunscreens,
        /// <summary>
        /// wellsrvcsandcontrol property
        /// </summary>
          [XmlEnum("well srvc -- sand control")]
          wellsrvcsandcontrol,
        /// <summary>
        /// wellsrvcstimulation property
        /// </summary>
          [XmlEnum("well srvc -- stimulation")]
          wellsrvcstimulation,
        /// <summary>
        /// wellsrvcsubseawork property
        /// </summary>
          [XmlEnum("well srvc -- subsea work")]
          wellsrvcsubseawork,
        /// <summary>
        /// wellsrvcsurfacelinework property
        /// </summary>
          [XmlEnum("well srvc -- surface line work")]
          wellsrvcsurfacelinework,
        /// <summary>
        /// wellsrvcsuspendwellorpullBOPs property
        /// </summary>
          [XmlEnum("well srvc -- suspend well or pull BOPs")]
          wellsrvcsuspendwellorpullBOPs,
        /// <summary>
        /// wellsrvctestwell property
        /// </summary>
          [XmlEnum("well srvc -- test well")]
          wellsrvctestwell,
        /// <summary>
        /// wellsrvcwash property
        /// </summary>
          [XmlEnum("well srvc -- wash")]
          wellsrvcwash,
        /// <summary>
        /// wellsrvcwirelinework property
        /// </summary>
          [XmlEnum("well srvc -- wireline work")]
          wellsrvcwirelinework,
        /// <summary>
        /// wellsrvcworktubulars property
        /// </summary>
          [XmlEnum("well srvc -- work tubulars")]
          wellsrvcworktubulars,
        /// <summary>
        /// wellsrvcworkstringrun property
        /// </summary>
          [XmlEnum("well srvc -- workstring run")]
          wellsrvcworkstringrun,
        /// <summary>
        /// wirelinelogs property
        /// </summary>
          [XmlEnum("wireline logs")]
          wirelinelogs,
        /// <summary>
        /// wirelinelogsabandonment property
        /// </summary>
          [XmlEnum("wireline logs -- abandonment")]
          wirelinelogsabandonment,
        /// <summary>
        /// wirelinelogsevaluation property
        /// </summary>
          [XmlEnum("wireline logs -- evaluation")]
          wirelinelogsevaluation,
        /// <summary>
        /// wirelinelogsformtester property
        /// </summary>
          [XmlEnum("wireline logs -- form tester")]
          wirelinelogsformtester,
        /// <summary>
        /// wirelinelogsother property
        /// </summary>
          [XmlEnum("wireline logs -- other")]
          wirelinelogsother,
        /// <summary>
        /// wirelinelogssidewallcores property
        /// </summary>
          [XmlEnum("wireline logs -- side wall cores")]
          wirelinelogssidewallcores,
        /// <summary>
        /// wirelinelogsvelocity property
        /// </summary>
          [XmlEnum("wireline logs -- velocity")]
          wirelinelogsvelocity
        }
        /// <summary>
        /// This class represents the WellControlIncidentType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellControlIncidentType xsd enumeration.")]
        public enum WellControlIncidentType 
        {
        /// <summary>
        /// shallowgaskick property
        /// </summary>
          [XmlEnum("shallow gas kick")]
          shallowgaskick,
        /// <summary>
        /// waterkick property
        /// </summary>
          [XmlEnum("water kick")]
          waterkick,
        /// <summary>
        /// oilkick property
        /// </summary>
          [XmlEnum("oil kick")]
          oilkick,
        /// <summary>
        /// gaskick property
        /// </summary>
          [XmlEnum("gas kick")]
          gaskick
        }
        /// <summary>
        /// This class represents the WellKillingProcedureType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellKillingProcedureType xsd enumeration.")]
        public enum WellKillingProcedureType 
        {
        /// <summary>
        /// drillersmethod property
        /// </summary>
          [XmlEnum("drillers method")]
          drillersmethod,
        /// <summary>
        /// waitandweight property
        /// </summary>
          [XmlEnum("wait and weight")]
          waitandweight,
        /// <summary>
        /// Prescribes pumping kill-weight fluid down the tubing and forcing the wellbore fluids back into the formation through the perforations.
        /// </summary>
          bullheading,
        /// <summary>
        /// lubricateandbleed property
        /// </summary>
          [XmlEnum("lubricate and bleed")]
          lubricateandbleed,
        /// <summary>
        /// forwardcirculation property
        /// </summary>
          [XmlEnum("forward circulation")]
          forwardcirculation,
        /// <summary>
        /// reversecirculation property
        /// </summary>
          [XmlEnum("reverse circulation")]
          reversecirculation
        }
        /// <summary>
        /// This class represents the WellTestType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellTestType xsd enumeration.")]
        public enum WellTestType 
        {
        /// <summary>
        /// drillstemtest property
        /// </summary>
          [XmlEnum("drill stem test")]
          drillstemtest,
        /// <summary>
        /// productiontest property
        /// </summary>
          [XmlEnum("production test")]
          productiontest
        }
        /// <summary>
        /// This class represents the InnerBarrelType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the InnerBarrelType xsd enumeration.")]
        public enum InnerBarrelType 
        {
        /// <summary>
        /// A pipe that is located inside a core barrel to hold the core sample.
        /// </summary>
          undifferentiated,
        /// <summary>
        /// An inner core barrel made of aluminium.
        /// </summary>
          aluminum,
        /// <summary>
        /// An inner core barrel that that seals off the core sample using gel as the sealing material.
        /// </summary>
          gel,
        /// <summary>
        /// An inner core barrel made of glass fiber reinforced plastic.
        /// </summary>
          fiberglass
        }
        /// <summary>
        /// This class represents the DrillActivityClassType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DrillActivityClassType xsd enumeration.")]
        public enum DrillActivityClassType 
        {
        /// <summary>
        /// planned property
        /// </summary>
          planned,
        /// <summary>
        /// unplanned property
        /// </summary>
          unplanned,
        /// <summary>
        /// downtime property
        /// </summary>
          downtime
        }
        /// <summary>
        /// This class represents the StateDetailActivity xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the StateDetailActivity xsd enumeration.")]
        public enum StateDetailActivity 
        {
        /// <summary>
        /// Personnel injury in connection with drilling and/or drilling related operations.
        /// </summary>
          injury,
        /// <summary>
        /// operationfailed property
        /// </summary>
          [XmlEnum("operation failed")]
          operationfailed,
        /// <summary>
        /// Formation fluid invading the wellbore.
        /// </summary>
          kick,
        /// <summary>
        /// circulationloss property
        /// </summary>
          [XmlEnum("circulation loss")]
          circulationloss,
        /// <summary>
        /// mudloss property
        /// </summary>
          [XmlEnum("mud loss")]
          mudloss,
        /// <summary>
        /// stuckequipment property
        /// </summary>
          [XmlEnum("stuck equipment")]
          stuckequipment,
        /// <summary>
        /// equipmentfailure property
        /// </summary>
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// equipmenthang property
        /// </summary>
          [XmlEnum("equipment hang")]
          equipmenthang,
        /// <summary>
        /// Operation achieved the objective.
        /// </summary>
          success
        }
        /// <summary>
        /// This class represents the ItemState xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ItemState xsd enumeration.")]
        public enum ItemState 
        {
        /// <summary>
        /// Actual data measured or entered at the well site.
        /// </summary>
          actual,
        /// <summary>
        /// Model data used for "what if" calculations.
        /// </summary>
          model,
        /// <summary>
        /// A planned object. That is, one which is expected to be executed in the future.
        /// </summary>
          plan
        }
        /// <summary>
        /// This class represents the NozzleType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the NozzleType xsd enumeration.")]
        public enum NozzleType 
        {
        /// <summary>
        /// extended property
        /// </summary>
          extended,
        /// <summary>
        /// normal property
        /// </summary>
          normal
        }
        /// <summary>
        /// This class represents the DeflectionMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DeflectionMethod xsd enumeration.")]
        public enum DeflectionMethod 
        {
        /// <summary>
        /// Rotary steerable system that changes the trajectory of a wellbore using both point-the-bit and push-the-bit methods.
        /// </summary>
          hybrid,
        /// <summary>
        /// pointbit property
        /// </summary>
          [XmlEnum("point bit")]
          pointbit,
        /// <summary>
        /// pushbit property
        /// </summary>
          [XmlEnum("push bit")]
          pushbit
        }
        /// <summary>
        /// This class represents the MeasurementType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MeasurementType xsd enumeration.")]
        public enum MeasurementType 
        {
        /// <summary>
        /// acceleration property
        /// </summary>
          acceleration,
        /// <summary>
        /// acousticcaliper property
        /// </summary>
          [XmlEnum("acoustic caliper")]
          acousticcaliper,
        /// <summary>
        /// acousticcasingcollarlocator property
        /// </summary>
          [XmlEnum("acoustic casing collar locator")]
          acousticcasingcollarlocator,
        /// <summary>
        /// acousticimpedance property
        /// </summary>
          [XmlEnum("acoustic impedance")]
          acousticimpedance,
        /// <summary>
        /// acousticporosity property
        /// </summary>
          [XmlEnum("acoustic porosity")]
          acousticporosity,
        /// <summary>
        /// acousticvelocity property
        /// </summary>
          [XmlEnum("acoustic velocity")]
          acousticvelocity,
        /// <summary>
        /// acousticwavematrixtraveltime property
        /// </summary>
          [XmlEnum("acoustic wave matrix travel time")]
          acousticwavematrixtraveltime,
        /// <summary>
        /// acousticwavetraveltime property
        /// </summary>
          [XmlEnum("acoustic wave travel time")]
          acousticwavetraveltime,
        /// <summary>
        /// amplitude property
        /// </summary>
          amplitude,
        /// <summary>
        /// amplitudeofacousticwave property
        /// </summary>
          [XmlEnum("amplitude of acoustic wave")]
          amplitudeofacousticwave,
        /// <summary>
        /// amplitudeofEMwave property
        /// </summary>
          [XmlEnum("amplitude of E-M wave")]
          amplitudeofEMwave,
        /// <summary>
        /// amplituderatio property
        /// </summary>
          [XmlEnum("amplitude ratio")]
          amplituderatio,
        /// <summary>
        /// area property
        /// </summary>
          area,
        /// <summary>
        /// attenuation property
        /// </summary>
          attenuation,
        /// <summary>
        /// attenuationofacousticwave property
        /// </summary>
          [XmlEnum("attenuation of acoustic wave")]
          attenuationofacousticwave,
        /// <summary>
        /// attenuationofEMwave property
        /// </summary>
          [XmlEnum("attenuation of E-M wave")]
          attenuationofEMwave,
        /// <summary>
        /// auxiliary property
        /// </summary>
          auxiliary,
        /// <summary>
        /// averageporosity property
        /// </summary>
          [XmlEnum("average porosity")]
          averageporosity,
        /// <summary>
        /// azimuth property
        /// </summary>
          azimuth,
        /// <summary>
        /// baritemudcorrection property
        /// </summary>
          [XmlEnum("barite mud correction")]
          baritemudcorrection,
        /// <summary>
        /// bedthicknesscorrection property
        /// </summary>
          [XmlEnum("bed thickness correction")]
          bedthicknesscorrection,
        /// <summary>
        /// bitsize property
        /// </summary>
          [XmlEnum("bit size")]
          bitsize,
        /// <summary>
        /// blocked property
        /// </summary>
          blocked,
        /// <summary>
        /// boreholeenvironmentcorrection property
        /// </summary>
          [XmlEnum("borehole environment correction")]
          boreholeenvironmentcorrection,
        /// <summary>
        /// boreholefluidcorrection property
        /// </summary>
          [XmlEnum("borehole fluid correction")]
          boreholefluidcorrection,
        /// <summary>
        /// boreholesizecorrection property
        /// </summary>
          [XmlEnum("borehole size correction")]
          boreholesizecorrection,
        /// <summary>
        /// bromidemudcorrection property
        /// </summary>
          [XmlEnum("bromide mud correction")]
          bromidemudcorrection,
        /// <summary>
        /// bulkcompressibility property
        /// </summary>
          [XmlEnum("bulk compressibility")]
          bulkcompressibility,
        /// <summary>
        /// bulkdensity property
        /// </summary>
          [XmlEnum("bulk density")]
          bulkdensity,
        /// <summary>
        /// bulkvolume property
        /// </summary>
          [XmlEnum("bulk volume")]
          bulkvolume,
        /// <summary>
        /// bulkvolumegas property
        /// </summary>
          [XmlEnum("bulk volume gas")]
          bulkvolumegas,
        /// <summary>
        /// bulkvolumehydrocarbon property
        /// </summary>
          [XmlEnum("bulk volume hydrocarbon")]
          bulkvolumehydrocarbon,
        /// <summary>
        /// bulkvolumeoil property
        /// </summary>
          [XmlEnum("bulk volume oil")]
          bulkvolumeoil,
        /// <summary>
        /// bulkvolumewater property
        /// </summary>
          [XmlEnum("bulk volume water")]
          bulkvolumewater,
        /// <summary>
        /// COratio property
        /// </summary>
          [XmlEnum("C/O ratio")]
          COratio,
        /// <summary>
        /// caliper property
        /// </summary>
          caliper,
        /// <summary>
        /// casedholecorrection property
        /// </summary>
          [XmlEnum("cased hole correction")]
          casedholecorrection,
        /// <summary>
        /// casingcollarlocator property
        /// </summary>
          [XmlEnum("casing collar locator")]
          casingcollarlocator,
        /// <summary>
        /// casingcorrection property
        /// </summary>
          [XmlEnum("casing correction")]
          casingcorrection,
        /// <summary>
        /// casingdiametercorrection property
        /// </summary>
          [XmlEnum("casing diameter correction")]
          casingdiametercorrection,
        /// <summary>
        /// casinginspection property
        /// </summary>
          [XmlEnum("casing inspection")]
          casinginspection,
        /// <summary>
        /// casingthicknesscorrection property
        /// </summary>
          [XmlEnum("casing thickness correction")]
          casingthicknesscorrection,
        /// <summary>
        /// casingweightcorrection property
        /// </summary>
          [XmlEnum("casing weight correction")]
          casingweightcorrection,
        /// <summary>
        /// cementcorrection property
        /// </summary>
          [XmlEnum("cement correction")]
          cementcorrection,
        /// <summary>
        /// cementdensitycorrection property
        /// </summary>
          [XmlEnum("cement density correction")]
          cementdensitycorrection,
        /// <summary>
        /// cementevaluation property
        /// </summary>
          [XmlEnum("cement evaluation")]
          cementevaluation,
        /// <summary>
        /// cementthicknesscorrection property
        /// </summary>
          [XmlEnum("cement thickness correction")]
          cementthicknesscorrection,
        /// <summary>
        /// cementtypecorrection property
        /// </summary>
          [XmlEnum("cement type correction")]
          cementtypecorrection,
        /// <summary>
        /// CHdensityporosity property
        /// </summary>
          [XmlEnum("CH density porosity")]
          CHdensityporosity,
        /// <summary>
        /// CHdolomitedensityporosity property
        /// </summary>
          [XmlEnum("CH dolomite density porosity")]
          CHdolomitedensityporosity,
        /// <summary>
        /// CHdolomiteneutronporosity property
        /// </summary>
          [XmlEnum("CH dolomite neutron porosity")]
          CHdolomiteneutronporosity,
        /// <summary>
        /// CHlimestonedensityporosity property
        /// </summary>
          [XmlEnum("CH limestone density porosity")]
          CHlimestonedensityporosity,
        /// <summary>
        /// CHlimestoneneutronporosity property
        /// </summary>
          [XmlEnum("CH limestone neutron porosity")]
          CHlimestoneneutronporosity,
        /// <summary>
        /// CHneutronporosity property
        /// </summary>
          [XmlEnum("CH neutron porosity")]
          CHneutronporosity,
        /// <summary>
        /// CHsandstonedensityporosity property
        /// </summary>
          [XmlEnum("CH sandstone density porosity")]
          CHsandstonedensityporosity,
        /// <summary>
        /// CHsandstoneneutronporosity property
        /// </summary>
          [XmlEnum("CH sandstone neutron porosity")]
          CHsandstoneneutronporosity,
        /// <summary>
        /// compressionalwavedolomiteporosity property
        /// </summary>
          [XmlEnum("compressional wave dolomite porosity")]
          compressionalwavedolomiteporosity,
        /// <summary>
        /// compressionalwavelimestoneporosity property
        /// </summary>
          [XmlEnum("compressional wave limestone porosity")]
          compressionalwavelimestoneporosity,
        /// <summary>
        /// compressionalwavematrixtraveltime property
        /// </summary>
          [XmlEnum("compressional wave matrix travel time")]
          compressionalwavematrixtraveltime,
        /// <summary>
        /// compressionalwavesandstoneporosity property
        /// </summary>
          [XmlEnum("compressional wave sandstone porosity")]
          compressionalwavesandstoneporosity,
        /// <summary>
        /// compressionalwavetraveltime property
        /// </summary>
          [XmlEnum("compressional wave travel time")]
          compressionalwavetraveltime,
        /// <summary>
        /// conductivity property
        /// </summary>
          conductivity,
        /// <summary>
        /// conductivityfromattenuation property
        /// </summary>
          [XmlEnum("conductivity from attenuation")]
          conductivityfromattenuation,
        /// <summary>
        /// conductivityfromphaseshift property
        /// </summary>
          [XmlEnum("conductivity from phase shift")]
          conductivityfromphaseshift,
        /// <summary>
        /// connatewaterconductivity property
        /// </summary>
          [XmlEnum("connate water conductivity")]
          connatewaterconductivity,
        /// <summary>
        /// connatewaterresistivity property
        /// </summary>
          [XmlEnum("connate water resistivity")]
          connatewaterresistivity,
        /// <summary>
        /// conventionalcoreporosity property
        /// </summary>
          [XmlEnum("conventional core porosity")]
          conventionalcoreporosity,
        /// <summary>
        /// corematrixdensity property
        /// </summary>
          [XmlEnum("core matrix density")]
          corematrixdensity,
        /// <summary>
        /// corepermeability property
        /// </summary>
          [XmlEnum("core permeability")]
          corepermeability,
        /// <summary>
        /// coreporosity property
        /// </summary>
          [XmlEnum("core porosity")]
          coreporosity,
        /// <summary>
        /// corrected property
        /// </summary>
          corrected,
        /// <summary>
        /// countrate property
        /// </summary>
          [XmlEnum("count rate")]
          countrate,
        /// <summary>
        /// countrateratio property
        /// </summary>
          [XmlEnum("count rate ratio")]
          countrateratio,
        /// <summary>
        /// crossplotporosity property
        /// </summary>
          [XmlEnum("cross plot porosity")]
          crossplotporosity,
        /// <summary>
        /// decaytime property
        /// </summary>
          [XmlEnum("decay time")]
          decaytime,
        /// <summary>
        /// deepconductivity property
        /// </summary>
          [XmlEnum("deep conductivity")]
          deepconductivity,
        /// <summary>
        /// deepinductionconductivity property
        /// </summary>
          [XmlEnum("deep induction conductivity")]
          deepinductionconductivity,
        /// <summary>
        /// deepinductionresistivity property
        /// </summary>
          [XmlEnum("deep induction resistivity")]
          deepinductionresistivity,
        /// <summary>
        /// deeplaterologconductivity property
        /// </summary>
          [XmlEnum("deep laterolog conductivity")]
          deeplaterologconductivity,
        /// <summary>
        /// deeplaterologresistivity property
        /// </summary>
          [XmlEnum("deep laterolog resistivity")]
          deeplaterologresistivity,
        /// <summary>
        /// deepresistivity property
        /// </summary>
          [XmlEnum("deep resistivity")]
          deepresistivity,
        /// <summary>
        /// density property
        /// </summary>
          density,
        /// <summary>
        /// densityporosity property
        /// </summary>
          [XmlEnum("density porosity")]
          densityporosity,
        /// <summary>
        /// depth property
        /// </summary>
          depth,
        /// <summary>
        /// depthadjusted property
        /// </summary>
          [XmlEnum("depth adjusted")]
          depthadjusted,
        /// <summary>
        /// depthderivedfromvelocity property
        /// </summary>
          [XmlEnum("depth derived from velocity")]
          depthderivedfromvelocity,
        /// <summary>
        /// deviation property
        /// </summary>
          deviation,
        /// <summary>
        /// dielectric property
        /// </summary>
          dielectric,
        /// <summary>
        /// diffusioncorrection property
        /// </summary>
          [XmlEnum("diffusion correction")]
          diffusioncorrection,
        /// <summary>
        /// dip property
        /// </summary>
          dip,
        /// <summary>
        /// dipmeter property
        /// </summary>
          dipmeter,
        /// <summary>
        /// dipmeterconductivity property
        /// </summary>
          [XmlEnum("dipmeter conductivity")]
          dipmeterconductivity,
        /// <summary>
        /// dipmeterresistivity property
        /// </summary>
          [XmlEnum("dipmeter resistivity")]
          dipmeterresistivity,
        /// <summary>
        /// dolomiteacousticporosity property
        /// </summary>
          [XmlEnum("dolomite acoustic porosity")]
          dolomiteacousticporosity,
        /// <summary>
        /// dolomitedensityporosity property
        /// </summary>
          [XmlEnum("dolomite density porosity")]
          dolomitedensityporosity,
        /// <summary>
        /// dolomiteneutronporosity property
        /// </summary>
          [XmlEnum("dolomite neutron porosity")]
          dolomiteneutronporosity,
        /// <summary>
        /// edited property
        /// </summary>
          edited,
        /// <summary>
        /// effectiveporosity property
        /// </summary>
          [XmlEnum("effective porosity")]
          effectiveporosity,
        /// <summary>
        /// electriccurrent property
        /// </summary>
          [XmlEnum("electric current")]
          electriccurrent,
        /// <summary>
        /// electricpotential property
        /// </summary>
          [XmlEnum("electric potential")]
          electricpotential,
        /// <summary>
        /// electromagneticwavematrixtraveltime property
        /// </summary>
          [XmlEnum("electromagnetic wave matrix travel time")]
          electromagneticwavematrixtraveltime,
        /// <summary>
        /// electromagneticwavetraveltime property
        /// </summary>
          [XmlEnum("electromagnetic wave travel time")]
          electromagneticwavetraveltime,
        /// <summary>
        /// element property
        /// </summary>
          element,
        /// <summary>
        /// elementalratio property
        /// </summary>
          [XmlEnum("elemental ratio")]
          elementalratio,
        /// <summary>
        /// enhanced property
        /// </summary>
          enhanced,
        /// <summary>
        /// filtered property
        /// </summary>
          filtered,
        /// <summary>
        /// flowmeter property
        /// </summary>
          flowmeter,
        /// <summary>
        /// fluiddensity property
        /// </summary>
          [XmlEnum("fluid density")]
          fluiddensity,
        /// <summary>
        /// fluidvelocity property
        /// </summary>
          [XmlEnum("fluid velocity")]
          fluidvelocity,
        /// <summary>
        /// fluidviscosity property
        /// </summary>
          [XmlEnum("fluid viscosity")]
          fluidviscosity,
        /// <summary>
        /// flushedzoneconductivity property
        /// </summary>
          [XmlEnum("flushed zone conductivity")]
          flushedzoneconductivity,
        /// <summary>
        /// flushedzoneresistivity property
        /// </summary>
          [XmlEnum("flushed zone resistivity")]
          flushedzoneresistivity,
        /// <summary>
        /// flushedzonesaturation property
        /// </summary>
          [XmlEnum("flushed zone saturation")]
          flushedzonesaturation,
        /// <summary>
        /// force property
        /// </summary>
          force,
        /// <summary>
        /// formationdensitycorrection property
        /// </summary>
          [XmlEnum("formation density correction")]
          formationdensitycorrection,
        /// <summary>
        /// formationpropertiescorrection property
        /// </summary>
          [XmlEnum("formation properties correction")]
          formationpropertiescorrection,
        /// <summary>
        /// formationsalinitycorrection property
        /// </summary>
          [XmlEnum("formation salinity correction")]
          formationsalinitycorrection,
        /// <summary>
        /// formationsaturationcorrection property
        /// </summary>
          [XmlEnum("formation saturation correction")]
          formationsaturationcorrection,
        /// <summary>
        /// formationvolumefactorcorrection property
        /// </summary>
          [XmlEnum("formation volume factor correction")]
          formationvolumefactorcorrection,
        /// <summary>
        /// formationwaterdensitycorrection property
        /// </summary>
          [XmlEnum("formation water density correction")]
          formationwaterdensitycorrection,
        /// <summary>
        /// formationwatersaturationcorrection property
        /// </summary>
          [XmlEnum("formation water saturation correction")]
          formationwatersaturationcorrection,
        /// <summary>
        /// freefluidindex property
        /// </summary>
          [XmlEnum("free fluid index")]
          freefluidindex,
        /// <summary>
        /// frictioneffectcorrection property
        /// </summary>
          [XmlEnum("friction effect correction")]
          frictioneffectcorrection,
        /// <summary>
        /// gammaray property
        /// </summary>
          [XmlEnum("gamma ray")]
          gammaray,
        /// <summary>
        /// gammarayminusuranium property
        /// </summary>
          [XmlEnum("gamma ray minus uranium")]
          gammarayminusuranium,
        /// <summary>
        /// gassaturation property
        /// </summary>
          [XmlEnum("gas saturation")]
          gassaturation,
        /// <summary>
        /// gradiomanometer property
        /// </summary>
          gradiomanometer,
        /// <summary>
        /// highfrequencyconductivity property
        /// </summary>
          [XmlEnum("high frequency conductivity")]
          highfrequencyconductivity,
        /// <summary>
        /// highfrequencyelectromagnetic property
        /// </summary>
          [XmlEnum("high frequency electromagnetic")]
          highfrequencyelectromagnetic,
        /// <summary>
        /// highfrequencyelectromagneticporosity property
        /// </summary>
          [XmlEnum("high frequency electromagnetic porosity")]
          highfrequencyelectromagneticporosity,
        /// <summary>
        /// highfrequencyEMphaseshift property
        /// </summary>
          [XmlEnum("high frequency E-M phase shift")]
          highfrequencyEMphaseshift,
        /// <summary>
        /// highfrequencyresistivity property
        /// </summary>
          [XmlEnum("high frequency resistivity")]
          highfrequencyresistivity,
        /// <summary>
        /// hydrocarboncorrection property
        /// </summary>
          [XmlEnum("hydrocarbon correction")]
          hydrocarboncorrection,
        /// <summary>
        /// hydrocarbondensitycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon density correction")]
          hydrocarbondensitycorrection,
        /// <summary>
        /// hydrocarbongravitycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon gravity correction")]
          hydrocarbongravitycorrection,
        /// <summary>
        /// hydrocarbonsaturation property
        /// </summary>
          [XmlEnum("hydrocarbon saturation")]
          hydrocarbonsaturation,
        /// <summary>
        /// hydrocarbonviscositycorrection property
        /// </summary>
          [XmlEnum("hydrocarbon viscosity correction")]
          hydrocarbonviscositycorrection,
        /// <summary>
        /// image property
        /// </summary>
          image,
        /// <summary>
        /// interpretationvariable property
        /// </summary>
          [XmlEnum("interpretation variable")]
          interpretationvariable,
        /// <summary>
        /// ironmudcorrection property
        /// </summary>
          [XmlEnum("iron mud correction")]
          ironmudcorrection,
        /// <summary>
        /// joined property
        /// </summary>
          joined,
        /// <summary>
        /// KClmudcorrection property
        /// </summary>
          [XmlEnum("KCl mud correction")]
          KClmudcorrection,
        /// <summary>
        /// length property
        /// </summary>
          length,
        /// <summary>
        /// limestoneacousticporosity property
        /// </summary>
          [XmlEnum("limestone acoustic porosity")]
          limestoneacousticporosity,
        /// <summary>
        /// limestonedensityporosity property
        /// </summary>
          [XmlEnum("limestone density porosity")]
          limestonedensityporosity,
        /// <summary>
        /// limestoneneutronporosity property
        /// </summary>
          [XmlEnum("limestone neutron porosity")]
          limestoneneutronporosity,
        /// <summary>
        /// lithologycorrection property
        /// </summary>
          [XmlEnum("lithology correction")]
          lithologycorrection,
        /// <summary>
        /// logderivedpermeability property
        /// </summary>
          [XmlEnum("log derived permeability")]
          logderivedpermeability,
        /// <summary>
        /// logmatrixdensity property
        /// </summary>
          [XmlEnum("log matrix density")]
          logmatrixdensity,
        /// <summary>
        /// magneticcasingcollarlocator property
        /// </summary>
          [XmlEnum("magnetic casing collar locator")]
          magneticcasingcollarlocator,
        /// <summary>
        /// matrixdensity property
        /// </summary>
          [XmlEnum("matrix density")]
          matrixdensity,
        /// <summary>
        /// matrixtraveltime property
        /// </summary>
          [XmlEnum("matrix travel time")]
          matrixtraveltime,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth,
        /// <summary>
        /// mechanicalcaliper property
        /// </summary>
          [XmlEnum("mechanical caliper")]
          mechanicalcaliper,
        /// <summary>
        /// mechanicalcasingcollarlocator property
        /// </summary>
          [XmlEnum("mechanical casing collar locator")]
          mechanicalcasingcollarlocator,
        /// <summary>
        /// mediumconductivity property
        /// </summary>
          [XmlEnum("medium conductivity")]
          mediumconductivity,
        /// <summary>
        /// mediuminductionconductivity property
        /// </summary>
          [XmlEnum("medium induction conductivity")]
          mediuminductionconductivity,
        /// <summary>
        /// mediuminductionresistivity property
        /// </summary>
          [XmlEnum("medium induction resistivity")]
          mediuminductionresistivity,
        /// <summary>
        /// mediumlaterologconductivity property
        /// </summary>
          [XmlEnum("medium laterolog conductivity")]
          mediumlaterologconductivity,
        /// <summary>
        /// mediumlaterologresistivity property
        /// </summary>
          [XmlEnum("medium laterolog resistivity")]
          mediumlaterologresistivity,
        /// <summary>
        /// mediumresistivity property
        /// </summary>
          [XmlEnum("medium resistivity")]
          mediumresistivity,
        /// <summary>
        /// microconductivity property
        /// </summary>
          [XmlEnum("micro conductivity")]
          microconductivity,
        /// <summary>
        /// microinverseconductivity property
        /// </summary>
          [XmlEnum("micro inverse conductivity")]
          microinverseconductivity,
        /// <summary>
        /// microinverseresistivity property
        /// </summary>
          [XmlEnum("micro inverse resistivity")]
          microinverseresistivity,
        /// <summary>
        /// microlaterologconductivity property
        /// </summary>
          [XmlEnum("micro laterolog conductivity")]
          microlaterologconductivity,
        /// <summary>
        /// microlaterologresistivity property
        /// </summary>
          [XmlEnum("micro laterolog resistivity")]
          microlaterologresistivity,
        /// <summary>
        /// micronormalconductivity property
        /// </summary>
          [XmlEnum("micro normal conductivity")]
          micronormalconductivity,
        /// <summary>
        /// micronormalresistivity property
        /// </summary>
          [XmlEnum("micro normal resistivity")]
          micronormalresistivity,
        /// <summary>
        /// microresistivity property
        /// </summary>
          [XmlEnum("micro resistivity")]
          microresistivity,
        /// <summary>
        /// microsphericallyfocusedconductivity property
        /// </summary>
          [XmlEnum("micro spherically focused conductivity")]
          microsphericallyfocusedconductivity,
        /// <summary>
        /// microsphericallyfocusedresistivity property
        /// </summary>
          [XmlEnum("micro spherically focused resistivity")]
          microsphericallyfocusedresistivity,
        /// <summary>
        /// mineral property
        /// </summary>
          mineral,
        /// <summary>
        /// mudcakeconductivity property
        /// </summary>
          [XmlEnum("mud cake conductivity")]
          mudcakeconductivity,
        /// <summary>
        /// mudcakecorrection property
        /// </summary>
          [XmlEnum("mud cake correction")]
          mudcakecorrection,
        /// <summary>
        /// mudcakedensitycorrection property
        /// </summary>
          [XmlEnum("mud cake density correction")]
          mudcakedensitycorrection,
        /// <summary>
        /// mudcakeresistivity property
        /// </summary>
          [XmlEnum("mud cake resistivity")]
          mudcakeresistivity,
        /// <summary>
        /// mudcakeresistivitycorrection property
        /// </summary>
          [XmlEnum("mud cake resistivity correction")]
          mudcakeresistivitycorrection,
        /// <summary>
        /// mudcakethicknesscorrection property
        /// </summary>
          [XmlEnum("mud cake thickness correction")]
          mudcakethicknesscorrection,
        /// <summary>
        /// mudcompositioncorrection property
        /// </summary>
          [XmlEnum("mud composition correction")]
          mudcompositioncorrection,
        /// <summary>
        /// mudconductivity property
        /// </summary>
          [XmlEnum("mud conductivity")]
          mudconductivity,
        /// <summary>
        /// mudfiltrateconductivity property
        /// </summary>
          [XmlEnum("mud filtrate conductivity")]
          mudfiltrateconductivity,
        /// <summary>
        /// mudfiltratecorrection property
        /// </summary>
          [XmlEnum("mud filtrate correction")]
          mudfiltratecorrection,
        /// <summary>
        /// mudfiltratedensitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate density correction")]
          mudfiltratedensitycorrection,
        /// <summary>
        /// mudfiltrateresistivity property
        /// </summary>
          [XmlEnum("mud filtrate resistivity")]
          mudfiltrateresistivity,
        /// <summary>
        /// mudfiltrateresistivitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate resistivity correction")]
          mudfiltrateresistivitycorrection,
        /// <summary>
        /// mudfiltratesalinitycorrection property
        /// </summary>
          [XmlEnum("mud filtrate salinity correction")]
          mudfiltratesalinitycorrection,
        /// <summary>
        /// mudresistivity property
        /// </summary>
          [XmlEnum("mud resistivity")]
          mudresistivity,
        /// <summary>
        /// mudsalinitycorrection property
        /// </summary>
          [XmlEnum("mud salinity correction")]
          mudsalinitycorrection,
        /// <summary>
        /// mudviscositycorrection property
        /// </summary>
          [XmlEnum("mud viscosity correction")]
          mudviscositycorrection,
        /// <summary>
        /// mudweightcorrection property
        /// </summary>
          [XmlEnum("mud weight correction")]
          mudweightcorrection,
        /// <summary>
        /// neutrondieawaytime property
        /// </summary>
          [XmlEnum("neutron die away time")]
          neutrondieawaytime,
        /// <summary>
        /// neutronporosity property
        /// </summary>
          [XmlEnum("neutron porosity")]
          neutronporosity,
        /// <summary>
        /// nuclearcaliper property
        /// </summary>
          [XmlEnum("nuclear caliper")]
          nuclearcaliper,
        /// <summary>
        /// nuclearmagneticdecaytime property
        /// </summary>
          [XmlEnum("nuclear magnetic decay time")]
          nuclearmagneticdecaytime,
        /// <summary>
        /// nuclearmagnetismlogpermeability property
        /// </summary>
          [XmlEnum("nuclear magnetism log permeability")]
          nuclearmagnetismlogpermeability,
        /// <summary>
        /// nuclearmagnetismporosity property
        /// </summary>
          [XmlEnum("nuclear magnetism porosity")]
          nuclearmagnetismporosity,
        /// <summary>
        /// OHdensityporosity property
        /// </summary>
          [XmlEnum("OH density porosity")]
          OHdensityporosity,
        /// <summary>
        /// OHdolomitedensityporosity property
        /// </summary>
          [XmlEnum("OH dolomite density porosity")]
          OHdolomitedensityporosity,
        /// <summary>
        /// OHdolomiteneutronporosity property
        /// </summary>
          [XmlEnum("OH dolomite neutron porosity")]
          OHdolomiteneutronporosity,
        /// <summary>
        /// OHlimestonedensityporosity property
        /// </summary>
          [XmlEnum("OH limestone density porosity")]
          OHlimestonedensityporosity,
        /// <summary>
        /// OHlimestoneneutronporosity property
        /// </summary>
          [XmlEnum("OH limestone neutron porosity")]
          OHlimestoneneutronporosity,
        /// <summary>
        /// OHneutronporosity property
        /// </summary>
          [XmlEnum("OH neutron porosity")]
          OHneutronporosity,
        /// <summary>
        /// OHsandstonedensityporosity property
        /// </summary>
          [XmlEnum("OH sandstone density porosity")]
          OHsandstonedensityporosity,
        /// <summary>
        /// OHsandstoneneutronporosity property
        /// </summary>
          [XmlEnum("OH sandstone neutron porosity")]
          OHsandstoneneutronporosity,
        /// <summary>
        /// oilbasedmudcorrection property
        /// </summary>
          [XmlEnum("oil based mud correction")]
          oilbasedmudcorrection,
        /// <summary>
        /// oilsaturation property
        /// </summary>
          [XmlEnum("oil saturation")]
          oilsaturation,
        /// <summary>
        /// The procedure for introducing holes through casing into a formation so that formation fluids can enter into the casing.
        /// </summary>
          perforating,
        /// <summary>
        /// The permeability of the surrounding formation.
        /// </summary>
          permeability,
        /// <summary>
        /// phaseshift property
        /// </summary>
          [XmlEnum("phase shift")]
          phaseshift,
        /// <summary>
        /// photoelectricabsorption property
        /// </summary>
          [XmlEnum("photoelectric absorption")]
          photoelectricabsorption,
        /// <summary>
        /// photoelectricabsorptioncorrection property
        /// </summary>
          [XmlEnum("photoelectric absorption correction")]
          photoelectricabsorptioncorrection,
        /// <summary>
        /// physicalmeasurementcorrection property
        /// </summary>
          [XmlEnum("physical measurement correction")]
          physicalmeasurementcorrection,
        /// <summary>
        /// planeangle property
        /// </summary>
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// The total pore volume occupied by fluid in a rock. Includes isolated nonconnecting pores and volume occupied by absorbed, immobile fluid.
        /// </summary>
          porosity,
        /// <summary>
        /// porositycorrection property
        /// </summary>
          [XmlEnum("porosity correction")]
          porositycorrection,
        /// <summary>
        /// The measurement of gamma radiation emitted by potassium.
        /// </summary>
          potassium,
        /// <summary>
        /// The force or thrust exerted upon a surface divided by the area of the surface.
        /// </summary>
          pressure,
        /// <summary>
        /// pressurecorrection property
        /// </summary>
          [XmlEnum("pressure correction")]
          pressurecorrection,
        /// <summary>
        /// A well log trace which has been processed in some way; e.g., depth adjusted or environmentally corrected.
        /// </summary>
          processed,
        /// <summary>
        /// pulsedneutronporosity property
        /// </summary>
          [XmlEnum("pulsed neutron porosity")]
          pulsedneutronporosity,
        /// <summary>
        /// Degree of excellence.
        /// </summary>
          quality,
        /// <summary>
        /// A relationship between two values usually expressed as a fraction.
        /// </summary>
          ratio,
        /// <summary>
        /// A well log trace which has not had any processing. In other words, a trace which has not been depth adjusted or environmentally corrected.
        /// </summary>
          raw,
        /// <summary>
        /// relativebearing property
        /// </summary>
          [XmlEnum("relative bearing")]
          relativebearing,
        /// <summary>
        /// The property measuring the resistance to flow of an electrical current.
        /// </summary>
          resistivity,
        /// <summary>
        /// resistivityfactorcorrection property
        /// </summary>
          [XmlEnum("resistivity factor correction")]
          resistivityfactorcorrection,
        /// <summary>
        /// resistivityfromattenuation property
        /// </summary>
          [XmlEnum("resistivity from attenuation")]
          resistivityfromattenuation,
        /// <summary>
        /// resistivityfromphaseshift property
        /// </summary>
          [XmlEnum("resistivity from phase shift")]
          resistivityfromphaseshift,
        /// <summary>
        /// resistivityphaseshift property
        /// </summary>
          [XmlEnum("resistivity phase shift")]
          resistivityphaseshift,
        /// <summary>
        /// resistivityratio property
        /// </summary>
          [XmlEnum("resistivity ratio")]
          resistivityratio,
        /// <summary>
        /// The concentration of ions in solution.
        /// </summary>
          salinity,
        /// <summary>
        /// To take a sample of or from something.
        /// </summary>
          sampling,
        /// <summary>
        /// sandstoneacousticporosity property
        /// </summary>
          [XmlEnum("sandstone acoustic porosity")]
          sandstoneacousticporosity,
        /// <summary>
        /// sandstonedensityporosity property
        /// </summary>
          [XmlEnum("sandstone density porosity")]
          sandstonedensityporosity,
        /// <summary>
        /// sandstoneneutronporosity property
        /// </summary>
          [XmlEnum("sandstone neutron porosity")]
          sandstoneneutronporosity,
        /// <summary>
        /// The fraction or percentage of the pore volume of a rock.
        /// </summary>
          saturation,
        /// <summary>
        /// shalevolume property
        /// </summary>
          [XmlEnum("shale volume")]
          shalevolume,
        /// <summary>
        /// shallowconductivity property
        /// </summary>
          [XmlEnum("shallow conductivity")]
          shallowconductivity,
        /// <summary>
        /// shallowinductionconductivity property
        /// </summary>
          [XmlEnum("shallow induction conductivity")]
          shallowinductionconductivity,
        /// <summary>
        /// shallowinductionresistivity property
        /// </summary>
          [XmlEnum("shallow induction resistivity")]
          shallowinductionresistivity,
        /// <summary>
        /// shallowlaterologconductivity property
        /// </summary>
          [XmlEnum("shallow laterolog conductivity")]
          shallowlaterologconductivity,
        /// <summary>
        /// shallowlaterologresistivity property
        /// </summary>
          [XmlEnum("shallow laterolog resistivity")]
          shallowlaterologresistivity,
        /// <summary>
        /// shallowresistivity property
        /// </summary>
          [XmlEnum("shallow resistivity")]
          shallowresistivity,
        /// <summary>
        /// shearwavedolomiteporosity property
        /// </summary>
          [XmlEnum("shear wave dolomite porosity")]
          shearwavedolomiteporosity,
        /// <summary>
        /// shearwavelimestoneporosity property
        /// </summary>
          [XmlEnum("shear wave limestone porosity")]
          shearwavelimestoneporosity,
        /// <summary>
        /// shearwavematrixtraveltime property
        /// </summary>
          [XmlEnum("shear wave matrix travel time")]
          shearwavematrixtraveltime,
        /// <summary>
        /// shearwavesandstoneporosity property
        /// </summary>
          [XmlEnum("shear wave sandstone porosity")]
          shearwavesandstoneporosity,
        /// <summary>
        /// shearwavetraveltime property
        /// </summary>
          [XmlEnum("shear wave travel time")]
          shearwavetraveltime,
        /// <summary>
        /// A well log trace which has had its original values shifted by some factor; e.g., added or multiplied by a constant.
        /// </summary>
          shifted,
        /// <summary>
        /// sidewallcoreporosity property
        /// </summary>
          [XmlEnum("sidewall core porosity")]
          sidewallcoreporosity,
        /// <summary>
        /// The macroscopic capture cross section, i.e. the effective cross-sectional area per unit volume for the capture of neutrons.
        /// </summary>
          sigma,
        /// <summary>
        /// sigmaformation property
        /// </summary>
          [XmlEnum("sigma formation")]
          sigmaformation,
        /// <summary>
        /// sigmagas property
        /// </summary>
          [XmlEnum("sigma gas")]
          sigmagas,
        /// <summary>
        /// sigmahydrocarbon property
        /// </summary>
          [XmlEnum("sigma hydrocarbon")]
          sigmahydrocarbon,
        /// <summary>
        /// sigmamatrix property
        /// </summary>
          [XmlEnum("sigma matrix")]
          sigmamatrix,
        /// <summary>
        /// sigmaoil property
        /// </summary>
          [XmlEnum("sigma oil")]
          sigmaoil,
        /// <summary>
        /// sigmawater property
        /// </summary>
          [XmlEnum("sigma water")]
          sigmawater,
        /// <summary>
        /// slippagevelocitycorrection property
        /// </summary>
          [XmlEnum("slippage velocity correction")]
          slippagevelocitycorrection,
        /// <summary>
        /// A well log trace which has been filtered to smooth, or average the trace.
        /// </summary>
          smoothed,
        /// <summary>
        /// spectralgammaray property
        /// </summary>
          [XmlEnum("spectral gamma ray")]
          spectralgammaray,
        /// <summary>
        /// sphericallyfocusedconductivity property
        /// </summary>
          [XmlEnum("spherically focused conductivity")]
          sphericallyfocusedconductivity,
        /// <summary>
        /// sphericallyfocusedresistivity property
        /// </summary>
          [XmlEnum("spherically focused resistivity")]
          sphericallyfocusedresistivity,
        /// <summary>
        /// spontaneouspotential property
        /// </summary>
          [XmlEnum("spontaneous potential")]
          spontaneouspotential,
        /// <summary>
        /// spreadinglosscorrection property
        /// </summary>
          [XmlEnum("spreading loss correction")]
          spreadinglosscorrection,
        /// <summary>
        /// syntheticwelllogtrace property
        /// </summary>
          [XmlEnum("synthetic well log trace")]
          syntheticwelllogtrace,
        /// <summary>
        /// A temperature measurement.
        /// </summary>
          temperature,
        /// <summary>
        /// temperaturecorrection property
        /// </summary>
          [XmlEnum("temperature correction")]
          temperaturecorrection,
        /// <summary>
        /// The tension on the wireline cable while logging.
        /// </summary>
          tension,
        /// <summary>
        /// ThKratio property
        /// </summary>
          [XmlEnum("Th/K ratio")]
          ThKratio,
        /// <summary>
        /// The measurement of gamma radiation emitted by thorium.
        /// </summary>
          thorium,
        /// <summary>
        /// A measured or measurable period.
        /// </summary>
          time,
        /// <summary>
        /// tooldiametercorrection property
        /// </summary>
          [XmlEnum("tool diameter correction")]
          tooldiametercorrection,
        /// <summary>
        /// tooleccentricitycorrection property
        /// </summary>
          [XmlEnum("tool eccentricity correction")]
          tooleccentricitycorrection,
        /// <summary>
        /// totalgammaray property
        /// </summary>
          [XmlEnum("total gamma ray")]
          totalgammaray,
        /// <summary>
        /// totalporosity property
        /// </summary>
          [XmlEnum("total porosity")]
          totalporosity,
        /// <summary>
        /// tracersurvey property
        /// </summary>
          [XmlEnum("tracer survey")]
          tracersurvey,
        /// <summary>
        /// traveltime property
        /// </summary>
          [XmlEnum("travel time")]
          traveltime,
        /// <summary>
        /// trueconductivity property
        /// </summary>
          [XmlEnum("true conductivity")]
          trueconductivity,
        /// <summary>
        /// trueresistivity property
        /// </summary>
          [XmlEnum("true resistivity")]
          trueresistivity,
        /// <summary>
        /// trueverticaldepth property
        /// </summary>
          [XmlEnum("true vertical depth")]
          trueverticaldepth,
        /// <summary>
        /// tubewavedolomiteporosity property
        /// </summary>
          [XmlEnum("tube wave dolomite porosity")]
          tubewavedolomiteporosity,
        /// <summary>
        /// tubewavelimestoneporosity property
        /// </summary>
          [XmlEnum("tube wave limestone porosity")]
          tubewavelimestoneporosity,
        /// <summary>
        /// tubewavematrixtraveltime property
        /// </summary>
          [XmlEnum("tube wave matrix travel time")]
          tubewavematrixtraveltime,
        /// <summary>
        /// tubewavesandstoneporosity property
        /// </summary>
          [XmlEnum("tube wave sandstone porosity")]
          tubewavesandstoneporosity,
        /// <summary>
        /// tubewavetraveltime property
        /// </summary>
          [XmlEnum("tube wave travel time")]
          tubewavetraveltime,
        /// <summary>
        /// The measurement of gamma radiation emitted by uranium.
        /// </summary>
          uranium,
        /// <summary>
        /// directional speed
        /// </summary>
          velocity,
        /// <summary>
        /// cubic capacity
        /// </summary>
          volume,
        /// <summary>
        /// waterbasedfluidcorrection property
        /// </summary>
          [XmlEnum("water based fluid correction")]
          waterbasedfluidcorrection,
        /// <summary>
        /// waterholdupcorrection property
        /// </summary>
          [XmlEnum("water holdup correction")]
          waterholdupcorrection,
        /// <summary>
        /// watersaturatedconductivity property
        /// </summary>
          [XmlEnum("water saturated conductivity")]
          watersaturatedconductivity,
        /// <summary>
        /// watersaturatedresistivity property
        /// </summary>
          [XmlEnum("water saturated resistivity")]
          watersaturatedresistivity,
        /// <summary>
        /// watersaturation property
        /// </summary>
          [XmlEnum("water saturation")]
          watersaturation
        }
        /// <summary>
        /// This class represents the HoleOpenerType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the HoleOpenerType xsd enumeration.")]
        public enum HoleOpenerType 
        {
        /// <summary>
        /// underreamer property
        /// </summary>
          [XmlEnum("under-reamer")]
          underreamer,
        /// <summary>
        /// fixedblade property
        /// </summary>
          [XmlEnum("fixed blade")]
          fixedblade
        }
        /// <summary>
        /// This class represents the BladeShapeType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BladeShapeType xsd enumeration.")]
        public enum BladeShapeType 
        {
        /// <summary>
        /// dynamic property
        /// </summary>
          dynamic,
        /// <summary>
        /// melon property
        /// </summary>
          melon,
        /// <summary>
        /// spiral property
        /// </summary>
          spiral,
        /// <summary>
        /// straight property
        /// </summary>
          straight,
        /// <summary>
        /// variable property
        /// </summary>
          variable
        }
        /// <summary>
        /// This class represents the BladeType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BladeType xsd enumeration.")]
        public enum BladeType 
        {
        /// <summary>
        /// clampon property
        /// </summary>
          [XmlEnum("clamp-on")]
          clampon,
        /// <summary>
        /// integral property
        /// </summary>
          integral,
        /// <summary>
        /// sleeve property
        /// </summary>
          sleeve,
        /// <summary>
        /// welded property
        /// </summary>
          welded
        }
        /// <summary>
        /// This class represents the BearingType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BearingType xsd enumeration.")]
        public enum BearingType 
        {
        /// <summary>
        /// oilseal property
        /// </summary>
          [XmlEnum("oil seal")]
          oilseal,
        /// <summary>
        /// mudlube property
        /// </summary>
          [XmlEnum("mud lube")]
          mudlube,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the BitType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BitType xsd enumeration.")]
        public enum BitType 
        {
        /// <summary>
        /// Diamond bit.
        /// </summary>
          diamond,
        /// <summary>
        /// diamondcore property
        /// </summary>
          [XmlEnum("diamond core")]
          diamondcore,
        /// <summary>
        /// insertrollercone property
        /// </summary>
          [XmlEnum("insert roller cone")]
          insertrollercone,
        /// <summary>
        /// Polycrystalline diamond compact fixed-cutter bit.
        /// </summary>
          PDC,
        /// <summary>
        /// PDCcore property
        /// </summary>
          [XmlEnum("PDC core")]
          PDCcore,
        /// <summary>
        /// rollercone property
        /// </summary>
          [XmlEnum("roller cone")]
          rollercone
        }
        /// <summary>
        /// This class represents the IadcIntegerCode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the IadcIntegerCode xsd enumeration.")]
        public enum IadcIntegerCode 
        {
        /// <summary>
        /// Item0 property
        /// </summary>
          [XmlEnum("0")]
          Item0,
        /// <summary>
        /// Item1 property
        /// </summary>
          [XmlEnum("1")]
          Item1,
        /// <summary>
        /// Item2 property
        /// </summary>
          [XmlEnum("2")]
          Item2,
        /// <summary>
        /// Item3 property
        /// </summary>
          [XmlEnum("3")]
          Item3,
        /// <summary>
        /// Item4 property
        /// </summary>
          [XmlEnum("4")]
          Item4,
        /// <summary>
        /// Item5 property
        /// </summary>
          [XmlEnum("5")]
          Item5,
        /// <summary>
        /// Item6 property
        /// </summary>
          [XmlEnum("6")]
          Item6,
        /// <summary>
        /// Item7 property
        /// </summary>
          [XmlEnum("7")]
          Item7,
        /// <summary>
        /// Item8 property
        /// </summary>
          [XmlEnum("8")]
          Item8
        }
        /// <summary>
        /// This class represents the BitDullCode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BitDullCode xsd enumeration.")]
        public enum BitDullCode 
        {
        /// <summary>
        /// Broken Cone
        /// </summary>
          BC,
        /// <summary>
        /// Broken teeth/cutters
        /// </summary>
          BT,
        /// <summary>
        /// Balled Up
        /// </summary>
          BU,
        /// <summary>
        /// Cracked Cone
        /// </summary>
          CC,
        /// <summary>
        /// Cone Dragged
        /// </summary>
          CD,
        /// <summary>
        /// Cone Interference
        /// </summary>
          CI,
        /// <summary>
        /// Cored
        /// </summary>
          CR,
        /// <summary>
        /// Chipped Teeth
        /// </summary>
          CT,
        /// <summary>
        /// Erosion
        /// </summary>
          ER,
        /// <summary>
        /// Flat Crested Wear
        /// </summary>
          FC,
        /// <summary>
        /// Heat Checking
        /// </summary>
          HC,
        /// <summary>
        /// Junk Damage
        /// </summary>
          JD,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LC,
        /// <summary>
        /// Lost Nozzle
        /// </summary>
          LN,
        /// <summary>
        /// Lost Teeth/Cutters
        /// </summary>
          LT,
        /// <summary>
        /// No Dull/No Other Wear
        /// </summary>
          NO,
        /// <summary>
        /// Off-Center Wear
        /// </summary>
          OC,
        /// <summary>
        /// Pinched Bit
        /// </summary>
          PB,
        /// <summary>
        /// Plugged Nozzle
        /// </summary>
          PN,
        /// <summary>
        /// Rounded Gauge
        /// </summary>
          RG,
        /// <summary>
        /// Ring Out
        /// </summary>
          RO,
        /// <summary>
        /// Shirttail Damage
        /// </summary>
          SD,
        /// <summary>
        /// Self-Sharpening Wear
        /// </summary>
          SS,
        /// <summary>
        /// Tracking
        /// </summary>
          TR,
        /// <summary>
        /// WashOut on Bit
        /// </summary>
          WO,
        /// <summary>
        /// Worn Teeth/Cutters
        /// </summary>
          WT
        }
        /// <summary>
        /// This class represents the IadcBearingWearCode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the IadcBearingWearCode xsd enumeration.")]
        public enum IadcBearingWearCode 
        {
        /// <summary>
        /// Item0 property
        /// </summary>
          [XmlEnum("0")]
          Item0,
        /// <summary>
        /// Item1 property
        /// </summary>
          [XmlEnum("1")]
          Item1,
        /// <summary>
        /// Item2 property
        /// </summary>
          [XmlEnum("2")]
          Item2,
        /// <summary>
        /// Item3 property
        /// </summary>
          [XmlEnum("3")]
          Item3,
        /// <summary>
        /// Item4 property
        /// </summary>
          [XmlEnum("4")]
          Item4,
        /// <summary>
        /// Item5 property
        /// </summary>
          [XmlEnum("5")]
          Item5,
        /// <summary>
        /// Item6 property
        /// </summary>
          [XmlEnum("6")]
          Item6,
        /// <summary>
        /// Item7 property
        /// </summary>
          [XmlEnum("7")]
          Item7,
        /// <summary>
        /// Item8 property
        /// </summary>
          [XmlEnum("8")]
          Item8,
        /// <summary>
        /// E property
        /// </summary>
          E,
        /// <summary>
        /// F property
        /// </summary>
          F,
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// X property
        /// </summary>
          X
        }
        /// <summary>
        /// This class represents the BitReasonPulled xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BitReasonPulled xsd enumeration.")]
        public enum BitReasonPulled 
        {
        /// <summary>
        /// Change Bottom Hole Assembly
        /// </summary>
          BHA,
        /// <summary>
        /// Condition Mud
        /// </summary>
          CM,
        /// <summary>
        /// Core Point
        /// </summary>
          CP,
        /// <summary>
        /// Downhole Motor Failure
        /// </summary>
          DMF,
        /// <summary>
        /// Drill Plug
        /// </summary>
          DP,
        /// <summary>
        /// Drill Stem Test
        /// </summary>
          DST,
        /// <summary>
        /// Downhole Tool Failure
        /// </summary>
          DTF,
        /// <summary>
        /// Formation Change
        /// </summary>
          FM,
        /// <summary>
        /// Hole Problems
        /// </summary>
          HP,
        /// <summary>
        /// Hours on Bit
        /// </summary>
          HR,
        /// <summary>
        /// Run Logs
        /// </summary>
          LOG,
        /// <summary>
        /// Pump Pressure
        /// </summary>
          PP,
        /// <summary>
        /// Penetration Rate
        /// </summary>
          PR,
        /// <summary>
        /// Rig Repairs
        /// </summary>
          RIG,
        /// <summary>
        /// Total Depth/Casing Depth
        /// </summary>
          TD,
        /// <summary>
        /// Torque
        /// </summary>
          TQ,
        /// <summary>
        /// Twist Off
        /// </summary>
          TW,
        /// <summary>
        /// Weather Conditions
        /// </summary>
          WC
        }
        /// <summary>
        /// This class represents the JarType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the JarType xsd enumeration.")]
        public enum JarType 
        {
        /// <summary>
        /// mechanical property
        /// </summary>
          mechanical,
        /// <summary>
        /// hydraulic property
        /// </summary>
          hydraulic,
        /// <summary>
        /// hydromechanical property
        /// </summary>
          [XmlEnum("hydro mechanical")]
          hydromechanical
        }
        /// <summary>
        /// This class represents the JarAction xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the JarAction xsd enumeration.")]
        public enum JarAction 
        {
        /// <summary>
        /// up property
        /// </summary>
          up,
        /// <summary>
        /// down property
        /// </summary>
          down,
        /// <summary>
        /// both property
        /// </summary>
          both,
        /// <summary>
        /// vibrating property
        /// </summary>
          vibrating
        }
        /// <summary>
        /// This class represents the ForcePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerLengthUom xsd enumeration.")]
        public enum ForcePerLengthUom 
        {
        /// <summary>
        /// Item001lbfft property
        /// </summary>
          [XmlEnum("0.01 lbf/ft")]
          Item001lbfft,
        /// <summary>
        /// Item130lbfm property
        /// </summary>
          [XmlEnum("1/30 lbf/m")]
          Item130lbfm,
        /// <summary>
        /// Item130Nm property
        /// </summary>
          [XmlEnum("1/30 N/m")]
          Item130Nm,
        /// <summary>
        /// dynecm property
        /// </summary>
          [XmlEnum("dyne/cm")]
          dynecm,
        /// <summary>
        /// kgfcm property
        /// </summary>
          [XmlEnum("kgf/cm")]
          kgfcm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN/m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf/ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf/in")]
          lbfin,
        /// <summary>
        /// mNkm property
        /// </summary>
          [XmlEnum("mN/km")]
          mNkm,
        /// <summary>
        /// mNm property
        /// </summary>
          [XmlEnum("mN/m")]
          mNm,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm,
        /// <summary>
        /// pdlcm property
        /// </summary>
          [XmlEnum("pdl/cm")]
          pdlcm,
        /// <summary>
        /// tonfUKft property
        /// </summary>
          [XmlEnum("tonf[UK]/ft")]
          tonfUKft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US]/ft")]
          tonfUSft
        }
        /// <summary>
        /// This class represents the LengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerLengthUom xsd enumeration.")]
        public enum LengthPerLengthUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Item001ftft property
        /// </summary>
          [XmlEnum("0.01 ft/ft")]
          Item001ftft,
        /// <summary>
        /// Item130mm property
        /// </summary>
          [XmlEnum("1/30 m/m")]
          Item130mm,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin
        }
        /// <summary>
        /// This class represents the TubularComponentType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TubularComponentType xsd enumeration.")]
        public enum TubularComponentType 
        {
        /// <summary>
        /// accelerator property
        /// </summary>
          accelerator,
        /// <summary>
        /// adjustablekickoff property
        /// </summary>
          [XmlEnum("adjustable kickoff")]
          adjustablekickoff,
        /// <summary>
        /// bitcorediamond property
        /// </summary>
          [XmlEnum("bit core diamond")]
          bitcorediamond,
        /// <summary>
        /// bitcorePDC property
        /// </summary>
          [XmlEnum("bit core PDC")]
          bitcorePDC,
        /// <summary>
        /// bitdiamondfixedcut property
        /// </summary>
          [XmlEnum("bit diamond fixed cut")]
          bitdiamondfixedcut,
        /// <summary>
        /// bitholeopener property
        /// </summary>
          [XmlEnum("bit hole opener")]
          bitholeopener,
        /// <summary>
        /// bitinsertrollercone property
        /// </summary>
          [XmlEnum("bit insert roller cone")]
          bitinsertrollercone,
        /// <summary>
        /// bitmilltoothrollercone property
        /// </summary>
          [XmlEnum("bit mill tooth roller cone")]
          bitmilltoothrollercone,
        /// <summary>
        /// bitPDCfixedcutter property
        /// </summary>
          [XmlEnum("bit PDC fixed cutter")]
          bitPDCfixedcutter,
        /// <summary>
        /// bitunderreamer property
        /// </summary>
          [XmlEnum("bit under reamer")]
          bitunderreamer,
        /// <summary>
        /// bridgeplug property
        /// </summary>
          [XmlEnum("bridge plug")]
          bridgeplug,
        /// <summary>
        /// bullplug property
        /// </summary>
          [XmlEnum("bull plug")]
          bullplug,
        /// <summary>
        /// bullnose property
        /// </summary>
          bullnose,
        /// <summary>
        /// casing property
        /// </summary>
          casing,
        /// <summary>
        /// casingcrossover property
        /// </summary>
          [XmlEnum("casing crossover")]
          casingcrossover,
        /// <summary>
        /// casingcutter property
        /// </summary>
          [XmlEnum("casing cutter")]
          casingcutter,
        /// <summary>
        /// casinghead property
        /// </summary>
          [XmlEnum("casing head")]
          casinghead,
        /// <summary>
        /// casinginflatablepacker property
        /// </summary>
          [XmlEnum("casing inflatable packer")]
          casinginflatablepacker,
        /// <summary>
        /// casingshoescrewin property
        /// </summary>
          [XmlEnum("casing shoe screw-in")]
          casingshoescrewin,
        /// <summary>
        /// catchassembly property
        /// </summary>
          [XmlEnum("catch assembly")]
          catchassembly,
        /// <summary>
        /// coiledtubinginhole property
        /// </summary>
          [XmlEnum("coiled tubing in hole")]
          coiledtubinginhole,
        /// <summary>
        /// coiledtubingoncoil property
        /// </summary>
          [XmlEnum("coiled tubing on coil")]
          coiledtubingoncoil,
        /// <summary>
        /// corebarrel property
        /// </summary>
          [XmlEnum("core barrel")]
          corebarrel,
        /// <summary>
        /// coreorientationbarrel property
        /// </summary>
          [XmlEnum("core orientation barrel")]
          coreorientationbarrel,
        /// <summary>
        /// diecollar property
        /// </summary>
          [XmlEnum("die collar")]
          diecollar,
        /// <summary>
        /// diecollarLH property
        /// </summary>
          [XmlEnum("die collar LH")]
          diecollarLH,
        /// <summary>
        /// directionalguidancesystem property
        /// </summary>
          [XmlEnum("directional guidance system")]
          directionalguidancesystem,
        /// <summary>
        /// drillcollar property
        /// </summary>
          [XmlEnum("drill collar")]
          drillcollar,
        /// <summary>
        /// drillcollarshort property
        /// </summary>
          [XmlEnum("drill collar short")]
          drillcollarshort,
        /// <summary>
        /// drillpipe property
        /// </summary>
          [XmlEnum("drill pipe")]
          drillpipe,
        /// <summary>
        /// drillpipecompressive property
        /// </summary>
          [XmlEnum("drill pipe compressive")]
          drillpipecompressive,
        /// <summary>
        /// drillpipeLH property
        /// </summary>
          [XmlEnum("drill pipe LH")]
          drillpipeLH,
        /// <summary>
        /// drillstemtestBHA property
        /// </summary>
          [XmlEnum("drill stem test BHA")]
          drillstemtestBHA,
        /// <summary>
        /// drivepipe property
        /// </summary>
          [XmlEnum("drive pipe")]
          drivepipe,
        /// <summary>
        /// dualcatchassembly property
        /// </summary>
          [XmlEnum("dual catch assembly")]
          dualcatchassembly,
        /// <summary>
        /// extensionbowlovershot property
        /// </summary>
          [XmlEnum("extension bowl overshot")]
          extensionbowlovershot,
        /// <summary>
        /// extensionsubovershot property
        /// </summary>
          [XmlEnum("extension sub-overshot")]
          extensionsubovershot,
        /// <summary>
        /// floatcollar property
        /// </summary>
          [XmlEnum("float collar")]
          floatcollar,
        /// <summary>
        /// floatshoe property
        /// </summary>
          [XmlEnum("float shoe")]
          floatshoe,
        /// <summary>
        /// flowhead property
        /// </summary>
          [XmlEnum("flow head")]
          flowhead,
        /// <summary>
        /// guideshoe property
        /// </summary>
          [XmlEnum("guide shoe")]
          guideshoe,
        /// <summary>
        /// hangercasingsubsea property
        /// </summary>
          [XmlEnum("hanger casing subsea")]
          hangercasingsubsea,
        /// <summary>
        /// hangercasingsurface property
        /// </summary>
          [XmlEnum("hanger casing surface")]
          hangercasingsurface,
        /// <summary>
        /// hangerliner property
        /// </summary>
          [XmlEnum("hanger liner")]
          hangerliner,
        /// <summary>
        /// hangermudline property
        /// </summary>
          [XmlEnum("hanger mud line")]
          hangermudline,
        /// <summary>
        /// hangertubing property
        /// </summary>
          [XmlEnum("hanger tubing")]
          hangertubing,
        /// <summary>
        /// heavyweightdrillpipe property
        /// </summary>
          [XmlEnum("heavy weight drill pipe")]
          heavyweightdrillpipe,
        /// <summary>
        /// heavyweightdrillpipeLH property
        /// </summary>
          [XmlEnum("heavy weight drill pipe LH")]
          heavyweightdrillpipeLH,
        /// <summary>
        /// jar property
        /// </summary>
          jar,
        /// <summary>
        /// junkbasket property
        /// </summary>
          [XmlEnum("junk basket")]
          junkbasket,
        /// <summary>
        /// junkbasketreversecirculation property
        /// </summary>
          [XmlEnum("junk basket reverse circulation")]
          junkbasketreversecirculation,
        /// <summary>
        /// kelly property
        /// </summary>
          kelly,
        /// <summary>
        /// keyseatwipertool property
        /// </summary>
          [XmlEnum("keyseat wiper tool")]
          keyseatwipertool,
        /// <summary>
        /// landingfloatcollar property
        /// </summary>
          [XmlEnum("landing float collar")]
          landingfloatcollar,
        /// <summary>
        /// leadimpressionblock property
        /// </summary>
          [XmlEnum("lead impression block")]
          leadimpressionblock,
        /// <summary>
        /// liner property
        /// </summary>
          liner,
        /// <summary>
        /// loggingwhiledrillingtool property
        /// </summary>
          [XmlEnum("logging while drilling tool")]
          loggingwhiledrillingtool,
        /// <summary>
        /// magnet property
        /// </summary>
          magnet,
        /// <summary>
        /// millcasingcutting property
        /// </summary>
          [XmlEnum("mill casing cutting")]
          millcasingcutting,
        /// <summary>
        /// milldress property
        /// </summary>
          [XmlEnum("mill dress")]
          milldress,
        /// <summary>
        /// millflatbottom property
        /// </summary>
          [XmlEnum("mill flat bottom")]
          millflatbottom,
        /// <summary>
        /// millhollow property
        /// </summary>
          [XmlEnum("mill hollow")]
          millhollow,
        /// <summary>
        /// millpackerpickerassembly property
        /// </summary>
          [XmlEnum("mill packer picker assembly")]
          millpackerpickerassembly,
        /// <summary>
        /// millpilot property
        /// </summary>
          [XmlEnum("mill pilot")]
          millpilot,
        /// <summary>
        /// millpolish property
        /// </summary>
          [XmlEnum("mill polish")]
          millpolish,
        /// <summary>
        /// millsection property
        /// </summary>
          [XmlEnum("mill section")]
          millsection,
        /// <summary>
        /// milltaper property
        /// </summary>
          [XmlEnum("mill taper")]
          milltaper,
        /// <summary>
        /// millwashover property
        /// </summary>
          [XmlEnum("mill washover")]
          millwashover,
        /// <summary>
        /// millwatermelon property
        /// </summary>
          [XmlEnum("mill watermelon")]
          millwatermelon,
        /// <summary>
        /// milloutextension property
        /// </summary>
          [XmlEnum("millout extension")]
          milloutextension,
        /// <summary>
        /// motor property
        /// </summary>
          motor,
        /// <summary>
        /// motorinstrumented property
        /// </summary>
          [XmlEnum("motor instrumented")]
          motorinstrumented,
        /// <summary>
        /// motorsteerable property
        /// </summary>
          [XmlEnum("motor steerable")]
          motorsteerable,
        /// <summary>
        /// muleshoe property
        /// </summary>
          [XmlEnum("mule shoe")]
          muleshoe,
        /// <summary>
        /// multilateralhangerrunningtool property
        /// </summary>
          [XmlEnum("multilateral hanger running tool")]
          multilateralhangerrunningtool,
        /// <summary>
        /// MWDhangoffsub property
        /// </summary>
          [XmlEnum("MWD hang off sub")]
          MWDhangoffsub,
        /// <summary>
        /// MWDpulser property
        /// </summary>
          [XmlEnum("MWD pulser")]
          MWDpulser,
        /// <summary>
        /// nonmagneticcollar property
        /// </summary>
          [XmlEnum("non-magnetic collar")]
          nonmagneticcollar,
        /// <summary>
        /// nonmagneticstabilizer property
        /// </summary>
          [XmlEnum("non-magnetic stabilizer")]
          nonmagneticstabilizer,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// overshot property
        /// </summary>
          overshot,
        /// <summary>
        /// overshotLH property
        /// </summary>
          [XmlEnum("overshot LH")]
          overshotLH,
        /// <summary>
        /// oversizelipguideovershot property
        /// </summary>
          [XmlEnum("oversize lip guide overshot")]
          oversizelipguideovershot,
        /// <summary>
        /// packer property
        /// </summary>
          packer,
        /// <summary>
        /// packerretrieveTTsqueeze property
        /// </summary>
          [XmlEnum("packer retrieve TT squeeze")]
          packerretrieveTTsqueeze,
        /// <summary>
        /// packerRTTS property
        /// </summary>
          [XmlEnum("packer RTTS")]
          packerRTTS,
        /// <summary>
        /// packerstormvalveRTTS property
        /// </summary>
          [XmlEnum("packer storm valve RTTS")]
          packerstormvalveRTTS,
        /// <summary>
        /// pipecutter property
        /// </summary>
          [XmlEnum("pipe cutter")]
          pipecutter,
        /// <summary>
        /// polishedborereceptacle property
        /// </summary>
          [XmlEnum("polished bore receptacle")]
          polishedborereceptacle,
        /// <summary>
        /// portedstinger property
        /// </summary>
          [XmlEnum("ported stinger")]
          portedstinger,
        /// <summary>
        /// prepackedscreens property
        /// </summary>
          [XmlEnum("prepacked screens")]
          prepackedscreens,
        /// <summary>
        /// reamer property
        /// </summary>
          reamer,
        /// <summary>
        /// reversingtool property
        /// </summary>
          [XmlEnum("reversing tool")]
          reversingtool,
        /// <summary>
        /// riserhighpressure property
        /// </summary>
          [XmlEnum("riser high pressure")]
          riserhighpressure,
        /// <summary>
        /// risermarine property
        /// </summary>
          [XmlEnum("riser marine")]
          risermarine,
        /// <summary>
        /// riserproduction property
        /// </summary>
          [XmlEnum("riser production")]
          riserproduction,
        /// <summary>
        /// rotarysteeringtool property
        /// </summary>
          [XmlEnum("rotary steering tool")]
          rotarysteeringtool,
        /// <summary>
        /// runningtool property
        /// </summary>
          [XmlEnum("running tool")]
          runningtool,
        /// <summary>
        /// safetyjoint property
        /// </summary>
          [XmlEnum("safety joint")]
          safetyjoint,
        /// <summary>
        /// safetyjointLH property
        /// </summary>
          [XmlEnum("safety joint LH")]
          safetyjointLH,
        /// <summary>
        /// scablinerbitguide property
        /// </summary>
          [XmlEnum("scab liner bit guide")]
          scablinerbitguide,
        /// <summary>
        /// scraper property
        /// </summary>
          scraper,
        /// <summary>
        /// scratchers property
        /// </summary>
          scratchers,
        /// <summary>
        /// slottedliner property
        /// </summary>
          [XmlEnum("slotted liner")]
          slottedliner,
        /// <summary>
        /// spear property
        /// </summary>
          spear,
        /// <summary>
        /// stabilizer property
        /// </summary>
          stabilizer,
        /// <summary>
        /// stabilizerinline property
        /// </summary>
          [XmlEnum("stabilizer inline")]
          stabilizerinline,
        /// <summary>
        /// stabilizernearbit property
        /// </summary>
          [XmlEnum("stabilizer near bit")]
          stabilizernearbit,
        /// <summary>
        /// stabilizernearbitrollerreamer property
        /// </summary>
          [XmlEnum("stabilizer near bit roller reamer")]
          stabilizernearbitrollerreamer,
        /// <summary>
        /// stabilizernonrotating property
        /// </summary>
          [XmlEnum("stabilizer non-rotating")]
          stabilizernonrotating,
        /// <summary>
        /// stabilizersteerable property
        /// </summary>
          [XmlEnum("stabilizer steerable")]
          stabilizersteerable,
        /// <summary>
        /// stabilizerstring property
        /// </summary>
          [XmlEnum("stabilizer string")]
          stabilizerstring,
        /// <summary>
        /// stabilizerstringrollerreamer property
        /// </summary>
          [XmlEnum("stabilizer string roller reamer")]
          stabilizerstringrollerreamer,
        /// <summary>
        /// stabilizerturboback property
        /// </summary>
          [XmlEnum("stabilizer turbo back")]
          stabilizerturboback,
        /// <summary>
        /// stabilizervariableblade property
        /// </summary>
          [XmlEnum("stabilizer variable blade")]
          stabilizervariableblade,
        /// <summary>
        /// stagecementcollar property
        /// </summary>
          [XmlEnum("stage cement collar")]
          stagecementcollar,
        /// <summary>
        /// subbarcatcher property
        /// </summary>
          [XmlEnum("sub-bar catcher")]
          subbarcatcher,
        /// <summary>
        /// subbent property
        /// </summary>
          [XmlEnum("sub-bent")]
          subbent,
        /// <summary>
        /// subbit property
        /// </summary>
          [XmlEnum("sub-bit")]
          subbit,
        /// <summary>
        /// subbumper property
        /// </summary>
          [XmlEnum("sub-bumper")]
          subbumper,
        /// <summary>
        /// subcatcher property
        /// </summary>
          [XmlEnum("sub-catcher")]
          subcatcher,
        /// <summary>
        /// subcirculation property
        /// </summary>
          [XmlEnum("sub-circulation")]
          subcirculation,
        /// <summary>
        /// subcone property
        /// </summary>
          [XmlEnum("sub-cone")]
          subcone,
        /// <summary>
        /// subcrossover property
        /// </summary>
          [XmlEnum("sub-crossover")]
          subcrossover,
        /// <summary>
        /// subdart property
        /// </summary>
          [XmlEnum("sub-dart")]
          subdart,
        /// <summary>
        /// subfilter property
        /// </summary>
          [XmlEnum("sub-filter")]
          subfilter,
        /// <summary>
        /// subfloat property
        /// </summary>
          [XmlEnum("sub-float")]
          subfloat,
        /// <summary>
        /// subjetting property
        /// </summary>
          [XmlEnum("sub-jetting")]
          subjetting,
        /// <summary>
        /// subjunk property
        /// </summary>
          [XmlEnum("sub-junk")]
          subjunk,
        /// <summary>
        /// suborienting property
        /// </summary>
          [XmlEnum("sub-orienting")]
          suborienting,
        /// <summary>
        /// subported property
        /// </summary>
          [XmlEnum("sub-ported")]
          subported,
        /// <summary>
        /// subpressurerelief property
        /// </summary>
          [XmlEnum("sub-pressure relief")]
          subpressurerelief,
        /// <summary>
        /// subpumpout property
        /// </summary>
          [XmlEnum("sub-pump out")]
          subpumpout,
        /// <summary>
        /// subrestrictor property
        /// </summary>
          [XmlEnum("sub-restrictor")]
          subrestrictor,
        /// <summary>
        /// subsaver property
        /// </summary>
          [XmlEnum("sub-saver")]
          subsaver,
        /// <summary>
        /// subshock property
        /// </summary>
          [XmlEnum("sub-shock")]
          subshock,
        /// <summary>
        /// subsideentry property
        /// </summary>
          [XmlEnum("sub-side entry")]
          subsideentry,
        /// <summary>
        /// substop property
        /// </summary>
          [XmlEnum("sub-stop")]
          substop,
        /// <summary>
        /// surfacepipe property
        /// </summary>
          [XmlEnum("surface pipe")]
          surfacepipe,
        /// <summary>
        /// tapertap property
        /// </summary>
          [XmlEnum("taper tap")]
          tapertap,
        /// <summary>
        /// tapertapLH property
        /// </summary>
          [XmlEnum("taper tap LH")]
          tapertapLH,
        /// <summary>
        /// thruster property
        /// </summary>
          thruster,
        /// <summary>
        /// tiebackpolishedborereceptacle property
        /// </summary>
          [XmlEnum("tieback polished bore receptacle")]
          tiebackpolishedborereceptacle,
        /// <summary>
        /// tiebackstinger property
        /// </summary>
          [XmlEnum("tieback stinger")]
          tiebackstinger,
        /// <summary>
        /// tubing property
        /// </summary>
          tubing,
        /// <summary>
        /// tubingconveyedperforatinggun property
        /// </summary>
          [XmlEnum("tubing-conveyed perforating gun")]
          tubingconveyedperforatinggun,
        /// <summary>
        /// turbine property
        /// </summary>
          turbine,
        /// <summary>
        /// unknown property
        /// </summary>
          unknown,
        /// <summary>
        /// washoverpipe property
        /// </summary>
          [XmlEnum("washover pipe")]
          washoverpipe,
        /// <summary>
        /// whipstock property
        /// </summary>
          whipstock,
        /// <summary>
        /// whipstockanchor property
        /// </summary>
          [XmlEnum("whipstock anchor")]
          whipstockanchor
        }
        /// <summary>
        /// This class represents the BoxPinConfig xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BoxPinConfig xsd enumeration.")]
        public enum BoxPinConfig 
        {
        /// <summary>
        /// bottombox property
        /// </summary>
          [XmlEnum("bottom box")]
          bottombox,
        /// <summary>
        /// topbox property
        /// </summary>
          [XmlEnum("top box")]
          topbox,
        /// <summary>
        /// toppin property
        /// </summary>
          [XmlEnum("top pin")]
          toppin,
        /// <summary>
        /// bottompintopbox property
        /// </summary>
          [XmlEnum("bottom pin top box")]
          bottompintopbox,
        /// <summary>
        /// bottompin property
        /// </summary>
          [XmlEnum("bottom pin")]
          bottompin
        }
        /// <summary>
        /// This class represents the MaterialType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MaterialType xsd enumeration.")]
        public enum MaterialType 
        {
        /// <summary>
        /// aluminum property
        /// </summary>
          aluminum,
        /// <summary>
        /// berylliumcopper property
        /// </summary>
          [XmlEnum("beryllium copper")]
          berylliumcopper,
        /// <summary>
        /// chromealloy property
        /// </summary>
          [XmlEnum("chrome alloy")]
          chromealloy,
        /// <summary>
        /// composite property
        /// </summary>
          composite,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// nonmagneticsteel property
        /// </summary>
          [XmlEnum("non-magnetic steel")]
          nonmagneticsteel,
        /// <summary>
        /// plastic property
        /// </summary>
          plastic,
        /// <summary>
        /// steel property
        /// </summary>
          steel,
        /// <summary>
        /// steelalloy property
        /// </summary>
          [XmlEnum("steel alloy")]
          steelalloy,
        /// <summary>
        /// titanium property
        /// </summary>
          titanium
        }
        /// <summary>
        /// This class represents the EastOrWest xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the EastOrWest xsd enumeration.")]
        public enum EastOrWest 
        {
        /// <summary>
        /// East of something.
        /// </summary>
          east,
        /// <summary>
        /// West of something.
        /// </summary>
          west
        }
        /// <summary>
        /// This class represents the NorthOrSouth xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the NorthOrSouth xsd enumeration.")]
        public enum NorthOrSouth 
        {
        /// <summary>
        /// North of something.
        /// </summary>
          north,
        /// <summary>
        /// South of something.
        /// </summary>
          south
        }
        /// <summary>
        /// This class represents the PrincipalMeridian xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PrincipalMeridian xsd enumeration.")]
        public enum PrincipalMeridian 
        {
        /// <summary>
        /// Item1stPrincipalMeridian property
        /// </summary>
          [XmlEnum("1st Principal Meridian")]
          Item1stPrincipalMeridian,
        /// <summary>
        /// Item2ndPrincipalMeridian property
        /// </summary>
          [XmlEnum("2nd Principal Meridian")]
          Item2ndPrincipalMeridian,
        /// <summary>
        /// Item3rdPrincipalMeridian property
        /// </summary>
          [XmlEnum("3rd Principal Meridian")]
          Item3rdPrincipalMeridian,
        /// <summary>
        /// Item4thPrincipalMeridian property
        /// </summary>
          [XmlEnum("4th Principal Meridian")]
          Item4thPrincipalMeridian,
        /// <summary>
        /// Item5thPrincipalMeridian property
        /// </summary>
          [XmlEnum("5th Principal Meridian")]
          Item5thPrincipalMeridian,
        /// <summary>
        /// Item6thPrincipalMeridian property
        /// </summary>
          [XmlEnum("6th Principal Meridian")]
          Item6thPrincipalMeridian,
        /// <summary>
        /// BlackHillsMeridian property
        /// </summary>
          [XmlEnum("Black Hills Meridian")]
          BlackHillsMeridian,
        /// <summary>
        /// BoiseMeridian property
        /// </summary>
          [XmlEnum("Boise Meridian")]
          BoiseMeridian,
        /// <summary>
        /// ChickasawMeridian property
        /// </summary>
          [XmlEnum("Chickasaw Meridian")]
          ChickasawMeridian,
        /// <summary>
        /// ChoctawMeridian property
        /// </summary>
          [XmlEnum("Choctaw Meridian")]
          ChoctawMeridian,
        /// <summary>
        /// CimarronMeridian property
        /// </summary>
          [XmlEnum("Cimarron Meridian")]
          CimarronMeridian,
        /// <summary>
        /// CopperRiverMeridian property
        /// </summary>
          [XmlEnum("Copper River Meridian")]
          CopperRiverMeridian,
        /// <summary>
        /// FairbanksMeridian property
        /// </summary>
          [XmlEnum("Fairbanks Meridian")]
          FairbanksMeridian,
        /// <summary>
        /// GilaandSaltRiverMeridian property
        /// </summary>
          [XmlEnum("Gila and Salt River Meridian")]
          GilaandSaltRiverMeridian,
        /// <summary>
        /// HumboldtMeridian property
        /// </summary>
          [XmlEnum("Humboldt Meridian")]
          HumboldtMeridian,
        /// <summary>
        /// HuntsvilleMeridian property
        /// </summary>
          [XmlEnum("Huntsville Meridian")]
          HuntsvilleMeridian,
        /// <summary>
        /// IndianMeridian property
        /// </summary>
          [XmlEnum("Indian Meridian")]
          IndianMeridian,
        /// <summary>
        /// KateelRiverMeridian property
        /// </summary>
          [XmlEnum("Kateel River Meridian")]
          KateelRiverMeridian,
        /// <summary>
        /// LousianaMeridian property
        /// </summary>
          [XmlEnum("Lousiana Meridian")]
          LousianaMeridian,
        /// <summary>
        /// MichiganMeridian property
        /// </summary>
          [XmlEnum("Michigan Meridian")]
          MichiganMeridian,
        /// <summary>
        /// MontanaMeridian property
        /// </summary>
          [XmlEnum("Montana Meridian")]
          MontanaMeridian,
        /// <summary>
        /// MountDiabloMeridian property
        /// </summary>
          [XmlEnum("Mount Diablo Meridian")]
          MountDiabloMeridian,
        /// <summary>
        /// NavajoMeridian property
        /// </summary>
          [XmlEnum("Navajo Meridian")]
          NavajoMeridian,
        /// <summary>
        /// NewMexicoMeridian property
        /// </summary>
          [XmlEnum("New Mexico Meridian")]
          NewMexicoMeridian,
        /// <summary>
        /// SaintHelenaMeridian property
        /// </summary>
          [XmlEnum("Saint Helena Meridian")]
          SaintHelenaMeridian,
        /// <summary>
        /// SaintStephensMeridian property
        /// </summary>
          [XmlEnum("Saint Stephens Meridian")]
          SaintStephensMeridian,
        /// <summary>
        /// SaltLakeMeridian property
        /// </summary>
          [XmlEnum("Salt Lake Meridian")]
          SaltLakeMeridian,
        /// <summary>
        /// SanBernardoMeridian property
        /// </summary>
          [XmlEnum("San Bernardo Meridian")]
          SanBernardoMeridian,
        /// <summary>
        /// SewardMeridian property
        /// </summary>
          [XmlEnum("Seward Meridian")]
          SewardMeridian,
        /// <summary>
        /// TallahasseeMeridian property
        /// </summary>
          [XmlEnum("Tallahassee Meridian")]
          TallahasseeMeridian,
        /// <summary>
        /// UintahMeridian property
        /// </summary>
          [XmlEnum("Uintah Meridian")]
          UintahMeridian,
        /// <summary>
        /// UmiatMeridian property
        /// </summary>
          [XmlEnum("Umiat Meridian")]
          UmiatMeridian,
        /// <summary>
        /// UteMeridian property
        /// </summary>
          [XmlEnum("Ute Meridian")]
          UteMeridian,
        /// <summary>
        /// WashingtonMeridian property
        /// </summary>
          [XmlEnum("Washington Meridian")]
          WashingtonMeridian,
        /// <summary>
        /// WilliametteMeridian property
        /// </summary>
          [XmlEnum("Williamette Meridian")]
          WilliametteMeridian,
        /// <summary>
        /// WindRiverMeridian property
        /// </summary>
          [XmlEnum("Wind River Meridian")]
          WindRiverMeridian
        }
        /// <summary>
        /// This class represents the ParameterKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ParameterKind xsd enumeration.")]
        public enum ParameterKind 
        {
        /// <summary>
        /// dataObject property
        /// </summary>
          dataObject,
        /// <summary>
        /// double property
        /// </summary>
          @double,
        /// <summary>
        /// integer property
        /// </summary>
          integer,
        /// <summary>
        /// string property
        /// </summary>
          @string,
        /// <summary>
        /// timestamp property
        /// </summary>
          timestamp,
        /// <summary>
        /// subActivity property
        /// </summary>
          subActivity
        }
        /// <summary>
        /// This class represents the PIDXCommodityCode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the PIDXCommodityCode xsd enumeration.")]
        public enum PIDXCommodityCode 
        {
        /// <summary>
        /// Item71131001 property
        /// </summary>
          [XmlEnum("71131001")]
          Item71131001,
        /// <summary>
        /// Item71131002 property
        /// </summary>
          [XmlEnum("71131002")]
          Item71131002,
        /// <summary>
        /// Item71131003 property
        /// </summary>
          [XmlEnum("71131003")]
          Item71131003,
        /// <summary>
        /// Item71131004 property
        /// </summary>
          [XmlEnum("71131004")]
          Item71131004,
        /// <summary>
        /// Item71131005 property
        /// </summary>
          [XmlEnum("71131005")]
          Item71131005,
        /// <summary>
        /// Item71131006 property
        /// </summary>
          [XmlEnum("71131006")]
          Item71131006,
        /// <summary>
        /// Item71131007 property
        /// </summary>
          [XmlEnum("71131007")]
          Item71131007,
        /// <summary>
        /// Item71131008 property
        /// </summary>
          [XmlEnum("71131008")]
          Item71131008,
        /// <summary>
        /// Item71131009 property
        /// </summary>
          [XmlEnum("71131009")]
          Item71131009,
        /// <summary>
        /// Item71131010 property
        /// </summary>
          [XmlEnum("71131010")]
          Item71131010,
        /// <summary>
        /// Item71131011 property
        /// </summary>
          [XmlEnum("71131011")]
          Item71131011,
        /// <summary>
        /// Item71131012 property
        /// </summary>
          [XmlEnum("71131012")]
          Item71131012,
        /// <summary>
        /// Item71131013 property
        /// </summary>
          [XmlEnum("71131013")]
          Item71131013,
        /// <summary>
        /// Item71131014 property
        /// </summary>
          [XmlEnum("71131014")]
          Item71131014,
        /// <summary>
        /// Item71131015 property
        /// </summary>
          [XmlEnum("71131015")]
          Item71131015,
        /// <summary>
        /// Item71131016 property
        /// </summary>
          [XmlEnum("71131016")]
          Item71131016,
        /// <summary>
        /// Item71131018 property
        /// </summary>
          [XmlEnum("71131018")]
          Item71131018,
        /// <summary>
        /// Item71131019 property
        /// </summary>
          [XmlEnum("71131019")]
          Item71131019
        }
        /// <summary>
        /// This class represents the RiskType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RiskType xsd enumeration.")]
        public enum RiskType 
        {
        /// <summary>
        /// risk property
        /// </summary>
          risk,
        /// <summary>
        /// event property
        /// </summary>
          @event,
        /// <summary>
        /// nearmiss property
        /// </summary>
          [XmlEnum("near miss")]
          nearmiss,
        /// <summary>
        /// bestpractice property
        /// </summary>
          [XmlEnum("best practice")]
          bestpractice,
        /// <summary>
        /// lessonslearned property
        /// </summary>
          [XmlEnum("lessons learned")]
          lessonslearned,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the RiskCategory xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RiskCategory xsd enumeration.")]
        public enum RiskCategory 
        {
        /// <summary>
        /// hydraulics property
        /// </summary>
          hydraulics,
        /// <summary>
        /// mechanical property
        /// </summary>
          mechanical,
        /// <summary>
        /// timerelated property
        /// </summary>
          [XmlEnum("time related")]
          timerelated,
        /// <summary>
        /// wellborestability property
        /// </summary>
          [XmlEnum("wellbore stability")]
          wellborestability,
        /// <summary>
        /// directionaldrilling property
        /// </summary>
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// bit property
        /// </summary>
          bit,
        /// <summary>
        /// equipmentfailure property
        /// </summary>
          [XmlEnum("equipment failure")]
          equipmentfailure,
        /// <summary>
        /// completion property
        /// </summary>
          completion,
        /// <summary>
        /// casing property
        /// </summary>
          casing,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE
        }
        /// <summary>
        /// This class represents the RiskSubCategory xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RiskSubCategory xsd enumeration.")]
        public enum RiskSubCategory 
        {
        /// <summary>
        /// gaskick property
        /// </summary>
          [XmlEnum("gas kick")]
          gaskick,
        /// <summary>
        /// shallowwaterinflux property
        /// </summary>
          [XmlEnum("shallow water influx")]
          shallowwaterinflux,
        /// <summary>
        /// otherinfluxorkicks property
        /// </summary>
          [XmlEnum("other influx or kicks")]
          otherinfluxorkicks,
        /// <summary>
        /// losscirculation property
        /// </summary>
          [XmlEnum("loss circulation")]
          losscirculation,
        /// <summary>
        /// poorholecleaning property
        /// </summary>
          [XmlEnum("poor hole cleaning")]
          poorholecleaning,
        /// <summary>
        /// goodholecleaningathighROP property
        /// </summary>
          [XmlEnum("good hole cleaning at high ROP")]
          goodholecleaningathighROP,
        /// <summary>
        /// highmudweight property
        /// </summary>
          [XmlEnum("high mud weight")]
          highmudweight,
        /// <summary>
        /// specialadditivesneeded property
        /// </summary>
          [XmlEnum("special additives needed")]
          specialadditivesneeded,
        /// <summary>
        /// gumboproblems property
        /// </summary>
          [XmlEnum("gumbo problems")]
          gumboproblems,
        /// <summary>
        /// highECDrheologyrelated property
        /// </summary>
          [XmlEnum("high ECD - rheology related")]
          highECDrheologyrelated,
        /// <summary>
        /// excessivecirculation property
        /// </summary>
          [XmlEnum("excessive circulation")]
          excessivecirculation,
        /// <summary>
        /// performingakill property
        /// </summary>
          [XmlEnum("performing a kill")]
          performingakill,
        /// <summary>
        /// mudweightchange property
        /// </summary>
          [XmlEnum("mud weight change")]
          mudweightchange,
        /// <summary>
        /// excessivepipecementscaling property
        /// </summary>
          [XmlEnum("excessive pipe cement scaling")]
          excessivepipecementscaling,
        /// <summary>
        /// pitgainorloss property
        /// </summary>
          [XmlEnum("pit gain or loss")]
          pitgainorloss,
        /// <summary>
        /// mudstabilityproblems property
        /// </summary>
          [XmlEnum("mud stability problems")]
          mudstabilityproblems,
        /// <summary>
        /// shallowgasflow property
        /// </summary>
          [XmlEnum("shallow gas flow")]
          shallowgasflow,
        /// <summary>
        /// twistoff property
        /// </summary>
          [XmlEnum("twist off")]
          twistoff,
        /// <summary>
        /// stuckpipe property
        /// </summary>
          [XmlEnum("stuck pipe")]
          stuckpipe,
        /// <summary>
        /// wirelinestuckinhole property
        /// </summary>
          [XmlEnum("wireline stuck in hole")]
          wirelinestuckinhole,
        /// <summary>
        /// stickandslip property
        /// </summary>
          [XmlEnum("stick and slip")]
          stickandslip,
        /// <summary>
        /// vibrationaxial property
        /// </summary>
          [XmlEnum("vibration - axial")]
          vibrationaxial,
        /// <summary>
        /// vibrationtorsional property
        /// </summary>
          [XmlEnum("vibration - torsional")]
          vibrationtorsional,
        /// <summary>
        /// vibrationtransverse property
        /// </summary>
          [XmlEnum("vibration - transverse")]
          vibrationtransverse,
        /// <summary>
        /// vibrationunknownorroughdrilling property
        /// </summary>
          [XmlEnum("vibration unknown or rough drilling")]
          vibrationunknownorroughdrilling,
        /// <summary>
        /// unevenwearofBHA property
        /// </summary>
          [XmlEnum("uneven wear of BHA")]
          unevenwearofBHA,
        /// <summary>
        /// unevenwearofdrillstring property
        /// </summary>
          [XmlEnum("uneven wear of drillstring")]
          unevenwearofdrillstring,
        /// <summary>
        /// excessivetorque property
        /// </summary>
          [XmlEnum("excessive torque")]
          excessivetorque,
        /// <summary>
        /// excessivedrag property
        /// </summary>
          [XmlEnum("excessive drag")]
          excessivedrag,
        /// <summary>
        /// reaminggreaterthan2hours property
        /// </summary>
          [XmlEnum("reaming greater than 2 hours")]
          reaminggreaterthan2hours,
        /// <summary>
        /// washouts property
        /// </summary>
          washouts,
        /// <summary>
        /// tightholeoroverPull property
        /// </summary>
          [XmlEnum("tight hole or overPull")]
          tightholeoroverPull,
        /// <summary>
        /// failedinspectionsorfatiguewear property
        /// </summary>
          [XmlEnum("failed inspections or fatigue wear")]
          failedinspectionsorfatiguewear,
        /// <summary>
        /// mechanical property
        /// </summary>
          mechanical,
        /// <summary>
        /// drillinggreaterthan1000feetday property
        /// </summary>
          [XmlEnum("drilling greater than 1000 feet/day")]
          drillinggreaterthan1000feetday,
        /// <summary>
        /// drillinggreaterthan2000feetday property
        /// </summary>
          [XmlEnum("drilling greater than 2000 feet/day")]
          drillinggreaterthan2000feetday,
        /// <summary>
        /// drillinglessthan20feetday property
        /// </summary>
          [XmlEnum("drilling less than 20 feet/day")]
          drillinglessthan20feetday,
        /// <summary>
        /// tripsgreaterthan24hours property
        /// </summary>
          [XmlEnum("trips greater than 24 hours")]
          tripsgreaterthan24hours,
        /// <summary>
        /// excessivetimeforBHAmakeup property
        /// </summary>
          [XmlEnum("excessive time for BHA makeup")]
          excessivetimeforBHAmakeup,
        /// <summary>
        /// waitingondecisions property
        /// </summary>
          [XmlEnum("waiting on decisions")]
          waitingondecisions,
        /// <summary>
        /// waitingonweather property
        /// </summary>
          [XmlEnum("waiting on weather")]
          waitingonweather,
        /// <summary>
        /// waitingontools property
        /// </summary>
          [XmlEnum("waiting on tools")]
          waitingontools,
        /// <summary>
        /// sloughingorpackoffs property
        /// </summary>
          [XmlEnum("sloughing or packoffs")]
          sloughingorpackoffs,
        /// <summary>
        /// ballooning property
        /// </summary>
          ballooning,
        /// <summary>
        /// fractureproblems property
        /// </summary>
          [XmlEnum("fracture problems")]
          fractureproblems,
        /// <summary>
        /// unstablezones property
        /// </summary>
          [XmlEnum("unstable zones")]
          unstablezones,
        /// <summary>
        /// formationintegritytest property
        /// </summary>
          [XmlEnum("formation integrity test")]
          formationintegritytest,
        /// <summary>
        /// leakofftest property
        /// </summary>
          [XmlEnum("leak-off test")]
          leakofftest,
        /// <summary>
        /// tectonics property
        /// </summary>
          tectonics,
        /// <summary>
        /// porepressure property
        /// </summary>
          [XmlEnum("pore pressure")]
          porepressure,
        /// <summary>
        /// breakouts property
        /// </summary>
          breakouts,
        /// <summary>
        /// bedparallel property
        /// </summary>
          [XmlEnum("bed parallel")]
          bedparallel,
        /// <summary>
        /// wellborestability property
        /// </summary>
          [XmlEnum("wellbore stability")]
          wellborestability,
        /// <summary>
        /// excessivedoglegs property
        /// </summary>
          [XmlEnum("excessive doglegs")]
          excessivedoglegs,
        /// <summary>
        /// sidetrack property
        /// </summary>
          sidetrack,
        /// <summary>
        /// BHAchangefordirectional property
        /// </summary>
          [XmlEnum("BHA change for directional")]
          BHAchangefordirectional,
        /// <summary>
        /// wrongtotalflowarea property
        /// </summary>
          [XmlEnum("wrong total flow area")]
          wrongtotalflowarea,
        /// <summary>
        /// wellcollisionactual property
        /// </summary>
          [XmlEnum("well collision - actual")]
          wellcollisionactual,
        /// <summary>
        /// wellcollisiontechnical property
        /// </summary>
          [XmlEnum("well collision - technical")]
          wellcollisiontechnical,
        /// <summary>
        /// geosteering property
        /// </summary>
          geosteering,
        /// <summary>
        /// abnormaltendencychanges property
        /// </summary>
          [XmlEnum("abnormal tendency changes")]
          abnormaltendencychanges,
        /// <summary>
        /// resurveying property
        /// </summary>
          resurveying,
        /// <summary>
        /// infieldreferencingIFRactions property
        /// </summary>
          [XmlEnum("in-field referencing (IFR) actions")]
          infieldreferencingIFRactions,
        /// <summary>
        /// bitorBHAperformance property
        /// </summary>
          [XmlEnum("bit or BHA performance")]
          bitorBHAperformance,
        /// <summary>
        /// drillingoptimization property
        /// </summary>
          [XmlEnum("drilling optimization")]
          drillingoptimization,
        /// <summary>
        /// bitballing property
        /// </summary>
          [XmlEnum("bit balling")]
          bitballing,
        /// <summary>
        /// lostconesorbrokencutters property
        /// </summary>
          [XmlEnum("lost cones or broken cutters")]
          lostconesorbrokencutters,
        /// <summary>
        /// excessivebitwearorgauge property
        /// </summary>
          [XmlEnum("excessive bit wear or gauge")]
          excessivebitwearorgauge,
        /// <summary>
        /// lowrateofbitpenetration property
        /// </summary>
          [XmlEnum("low rate of bit penetration")]
          lowrateofbitpenetration,
        /// <summary>
        /// highrateofbitpenetration property
        /// </summary>
          [XmlEnum("high rate of bit penetration")]
          highrateofbitpenetration,
        /// <summary>
        /// downholetool property
        /// </summary>
          [XmlEnum("downhole tool")]
          downholetool,
        /// <summary>
        /// surfacesystem property
        /// </summary>
          [XmlEnum("surface system")]
          surfacesystem,
        /// <summary>
        /// motororrotarysteerablesystemfailure property
        /// </summary>
          [XmlEnum("motor or rotary steerable system failure")]
          motororrotarysteerablesystemfailure,
        /// <summary>
        /// topdrivefailure property
        /// </summary>
          [XmlEnum("topdrive failure")]
          topdrivefailure,
        /// <summary>
        /// hoistingequipmentfailure property
        /// </summary>
          [XmlEnum("hoisting equipment failure")]
          hoistingequipmentfailure,
        /// <summary>
        /// circulatingequipmentfailure property
        /// </summary>
          [XmlEnum("circulating equipment failure")]
          circulatingequipmentfailure,
        /// <summary>
        /// electricalsystemfailure property
        /// </summary>
          [XmlEnum("electrical system failure")]
          electricalsystemfailure,
        /// <summary>
        /// blowoutpreventerevents property
        /// </summary>
          [XmlEnum("blow out preventer events")]
          blowoutpreventerevents,
        /// <summary>
        /// surfaceinstrumentationproblems property
        /// </summary>
          [XmlEnum("surface instrumentation problems")]
          surfaceinstrumentationproblems,
        /// <summary>
        /// rigcommunications property
        /// </summary>
          [XmlEnum("rig communications")]
          rigcommunications,
        /// <summary>
        /// completionequipmentfailure property
        /// </summary>
          [XmlEnum("completion equipment failure")]
          completionequipmentfailure,
        /// <summary>
        /// miscellaneousrigequipment property
        /// </summary>
          [XmlEnum("miscellaneous rig equipment")]
          miscellaneousrigequipment,
        /// <summary>
        /// toolorequipmentfailure property
        /// </summary>
          [XmlEnum("tool or equipment failure")]
          toolorequipmentfailure,
        /// <summary>
        /// squeezejobs property
        /// </summary>
          [XmlEnum("squeeze jobs")]
          squeezejobs,
        /// <summary>
        /// casingsurgelosses property
        /// </summary>
          [XmlEnum("casing surge losses")]
          casingsurgelosses,
        /// <summary>
        /// stuckcasingorcompletion property
        /// </summary>
          [XmlEnum("stuck casing or completion")]
          stuckcasingorcompletion,
        /// <summary>
        /// shoefailures property
        /// </summary>
          [XmlEnum("shoe failures")]
          shoefailures,
        /// <summary>
        /// earlycementsetup property
        /// </summary>
          [XmlEnum("early cement setup")]
          earlycementsetup,
        /// <summary>
        /// casingcollapse property
        /// </summary>
          [XmlEnum("casing collapse")]
          casingcollapse,
        /// <summary>
        /// milling property
        /// </summary>
          milling,
        /// <summary>
        /// excessivecasingwearorcuttings property
        /// </summary>
          [XmlEnum("excessive casing wear or cuttings")]
          excessivecasingwearorcuttings,
        /// <summary>
        /// excessiveformationdamageorskin property
        /// </summary>
          [XmlEnum("excessive formation damage or skin")]
          excessiveformationdamageorskin,
        /// <summary>
        /// casingrotationorreciprocationrqd property
        /// </summary>
          [XmlEnum("casing rotation or reciprocation rqd")]
          casingrotationorreciprocationrqd,
        /// <summary>
        /// broaching property
        /// </summary>
          broaching,
        /// <summary>
        /// completionorcasing property
        /// </summary>
          [XmlEnum("completion or casing")]
          completionorcasing,
        /// <summary>
        /// stratigraphy property
        /// </summary>
          stratigraphy,
        /// <summary>
        /// fishing property
        /// </summary>
          fishing,
        /// <summary>
        /// junkinhole property
        /// </summary>
          [XmlEnum("junk in hole")]
          junkinhole,
        /// <summary>
        /// delayduetopoliticalunrest property
        /// </summary>
          [XmlEnum("delay due to political unrest")]
          delayduetopoliticalunrest,
        /// <summary>
        /// rigmove property
        /// </summary>
          [XmlEnum("rig move")]
          rigmove,
        /// <summary>
        /// gashydrates property
        /// </summary>
          [XmlEnum("gas hydrates")]
          gashydrates,
        /// <summary>
        /// pendinganalysis property
        /// </summary>
          [XmlEnum("pending analysis")]
          pendinganalysis,
        /// <summary>
        /// riserdisconnect property
        /// </summary>
          [XmlEnum("riser disconnect")]
          riserdisconnect,
        /// <summary>
        /// other property
        /// </summary>
          other,
        /// <summary>
        /// personnel property
        /// </summary>
          personnel,
        /// <summary>
        /// environmental property
        /// </summary>
          environmental,
        /// <summary>
        /// automotive property
        /// </summary>
          automotive,
        /// <summary>
        /// asset property
        /// </summary>
          asset,
        /// <summary>
        /// information property
        /// </summary>
          information,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// health, safety and environmental
        /// </summary>
          HSE
        }
        /// <summary>
        /// This class represents the RiskAffectedPersonnel xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RiskAffectedPersonnel xsd enumeration.")]
        public enum RiskAffectedPersonnel 
        {
        /// <summary>
        /// cementer property
        /// </summary>
          cementer,
        /// <summary>
        /// companyman property
        /// </summary>
          [XmlEnum("company man")]
          companyman,
        /// <summary>
        /// contractor property
        /// </summary>
          contractor,
        /// <summary>
        /// directionaldriller property
        /// </summary>
          [XmlEnum("directional driller")]
          directionaldriller,
        /// <summary>
        /// driller property
        /// </summary>
          driller,
        /// <summary>
        /// drillingengineer property
        /// </summary>
          [XmlEnum("drilling engineer")]
          drillingengineer,
        /// <summary>
        /// drillingsuperintendent property
        /// </summary>
          [XmlEnum("drilling superintendent")]
          drillingsuperintendent,
        /// <summary>
        /// drillingteam property
        /// </summary>
          [XmlEnum("drilling team")]
          drillingteam,
        /// <summary>
        /// facilityengineer property
        /// </summary>
          [XmlEnum("facility engineer")]
          facilityengineer,
        /// <summary>
        /// fieldservicemanager property
        /// </summary>
          [XmlEnum("field service manager")]
          fieldservicemanager,
        /// <summary>
        /// foreman property
        /// </summary>
          foreman,
        /// <summary>
        /// generalservicesupervisor property
        /// </summary>
          [XmlEnum("general service supervisor")]
          generalservicesupervisor,
        /// <summary>
        /// geologist property
        /// </summary>
          geologist,
        /// <summary>
        /// member property
        /// </summary>
          member,
        /// <summary>
        /// mudengineer property
        /// </summary>
          [XmlEnum("mud engineer")]
          mudengineer,
        /// <summary>
        /// mudlogger property
        /// </summary>
          [XmlEnum("mud logger")]
          mudlogger,
        /// <summary>
        /// MWDorLWDengineer property
        /// </summary>
          [XmlEnum("MWD or LWD engineer")]
          MWDorLWDengineer,
        /// <summary>
        /// performengineer property
        /// </summary>
          [XmlEnum("perform engineer")]
          performengineer,
        /// <summary>
        /// petrophysicist property
        /// </summary>
          petrophysicist,
        /// <summary>
        /// productionengineer property
        /// </summary>
          [XmlEnum("production engineer")]
          productionengineer,
        /// <summary>
        /// remotelyoperatedvehicleengineer property
        /// </summary>
          [XmlEnum("remotely operated vehicle engineer")]
          remotelyoperatedvehicleengineer,
        /// <summary>
        /// safetymanager property
        /// </summary>
          [XmlEnum("safety manager")]
          safetymanager,
        /// <summary>
        /// salesengineer property
        /// </summary>
          [XmlEnum("sales engineer")]
          salesengineer,
        /// <summary>
        /// servicesupervisor property
        /// </summary>
          [XmlEnum("service supervisor")]
          servicesupervisor,
        /// <summary>
        /// technicalsupport property
        /// </summary>
          [XmlEnum("technical support")]
          technicalsupport,
        /// <summary>
        /// toolpusher property
        /// </summary>
          [XmlEnum("tool pusher")]
          toolpusher,
        /// <summary>
        /// wirelineengineer property
        /// </summary>
          [XmlEnum("wireline engineer")]
          wirelineengineer
        }
        /// <summary>
        /// This class represents the RigType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the RigType xsd enumeration.")]
        public enum RigType 
        {
        /// <summary>
        /// Barge rig.
        /// </summary>
          barge,
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// Floating rig.
        /// </summary>
          floater,
        /// <summary>
        /// Jackup rig.
        /// </summary>
          jackup,
        /// <summary>
        /// Land rig.
        /// </summary>
          land,
        /// <summary>
        /// Fixed platform.
        /// </summary>
          platform,
        /// <summary>
        /// semisubmersible property
        /// </summary>
          [XmlEnum("semi-submersible")]
          semisubmersible
        }
        /// <summary>
        /// This class represents the DerrickType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DerrickType xsd enumeration.")]
        public enum DerrickType 
        {
        /// <summary>
        /// 2-stand capacity derrick.
        /// </summary>
          @double,
        /// <summary>
        /// 4-stand capacity derrick.
        /// </summary>
          quadruple,
        /// <summary>
        /// Slant derrick.
        /// </summary>
          slant,
        /// <summary>
        /// 3-stand capacity derrick.
        /// </summary>
          triple
        }
        /// <summary>
        /// This class represents the DrawWorksType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DrawWorksType xsd enumeration.")]
        public enum DrawWorksType 
        {
        /// <summary>
        /// mechanical property
        /// </summary>
          mechanical,
        /// <summary>
        /// standardelectric property
        /// </summary>
          [XmlEnum("standard electric")]
          standardelectric,
        /// <summary>
        /// dieselelectric property
        /// </summary>
          [XmlEnum("diesel electric")]
          dieselelectric,
        /// <summary>
        /// ramrig property
        /// </summary>
          [XmlEnum("ram rig")]
          ramrig
        }
        /// <summary>
        /// This class represents the DriveType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the DriveType xsd enumeration.")]
        public enum DriveType 
        {
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// rotarykellydrive property
        /// </summary>
          [XmlEnum("rotary kelly drive")]
          rotarykellydrive,
        /// <summary>
        /// topdrive property
        /// </summary>
          [XmlEnum("top drive")]
          topdrive
        }
        /// <summary>
        /// This class represents the ChannelStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ChannelStatus xsd enumeration.")]
        public enum ChannelStatus 
        {
        /// <summary>
        /// Actively producing data points.
        /// </summary>
          active,
        /// <summary>
        /// Closed and will never produce new data points.
        /// </summary>
          closed,
        /// <summary>
        /// Currently inactive but may produce data points in the future.
        /// </summary>
          inactive
        }
        /// <summary>
        /// This class represents the ShowFluid xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ShowFluid xsd enumeration.")]
        public enum ShowFluid 
        {
        /// <summary>
        /// gas property
        /// </summary>
          gas,
        /// <summary>
        /// oil property
        /// </summary>
          oil
        }
        /// <summary>
        /// This class represents the FileNameType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the FileNameType xsd enumeration.")]
        public enum FileNameType 
        {
        /// <summary>
        /// filename property
        /// </summary>
          [XmlEnum("file name")]
          filename,
        /// <summary>
        /// pathname property
        /// </summary>
          [XmlEnum("path name")]
          pathname,
        /// <summary>
        /// universalresourcelocator property
        /// </summary>
          [XmlEnum("universal resource locator")]
          universalresourcelocator,
        /// <summary>
        /// The value is not known. Avoid using this value. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the MimeType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MimeType xsd enumeration.")]
        public enum MimeType 
        {
        /// <summary>
        /// imagetiff property
        /// </summary>
          [XmlEnum("image/tiff")]
          imagetiff,
        /// <summary>
        /// imagegif property
        /// </summary>
          [XmlEnum("image/gif")]
          imagegif,
        /// <summary>
        /// imagepng property
        /// </summary>
          [XmlEnum("image/png")]
          imagepng,
        /// <summary>
        /// imagexmlsvg property
        /// </summary>
          [XmlEnum("image/xml+svg")]
          imagexmlsvg,
        /// <summary>
        /// The value is not known. Avoid using this value. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the MessageDigestType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the MessageDigestType xsd enumeration.")]
        public enum MessageDigestType 
        {
        /// <summary>
        /// MD5 property
        /// </summary>
          MD5,
        /// <summary>
        /// SHA1 property
        /// </summary>
          SHA1,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the AziRef xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the AziRef xsd enumeration.")]
        public enum AziRef 
        {
        /// <summary>
        /// magneticnorth property
        /// </summary>
          [XmlEnum("magnetic north")]
          magneticnorth,
        /// <summary>
        /// gridnorth property
        /// </summary>
          [XmlEnum("grid north")]
          gridnorth,
        /// <summary>
        /// truenorth property
        /// </summary>
          [XmlEnum("true north")]
          truenorth
        }
        /// <summary>
        /// This class represents the CementJobType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the CementJobType xsd enumeration.")]
        public enum CementJobType 
        {
        /// <summary>
        /// primary property
        /// </summary>
          primary,
        /// <summary>
        /// plug property
        /// </summary>
          plug,
        /// <summary>
        /// squeeze property
        /// </summary>
          squeeze
        }
        /// <summary>
        /// This class represents the ChannelState xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ChannelState xsd enumeration.")]
        public enum ChannelState 
        {
        /// <summary>
        /// Calculated from measurements
        /// </summary>
          calculated,
        /// <summary>
        /// Considered final and not subject to change
        /// </summary>
          final,
        /// <summary>
        /// Sensor data is recorded into downhole memory of a tool, rather than transmitting in "real time" to surface. 
        /// </summary>
          memory,
        /// <summary>
        /// Results of calculations based on measurements
        /// </summary>
          processed,
        /// <summary>
        /// realtime property
        /// </summary>
          [XmlEnum("real time")]
          realtime
        }
        /// <summary>
        /// This class represents the ChannelDerivation xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ChannelDerivation xsd enumeration.")]
        public enum ChannelDerivation 
        {
        /// <summary>
        /// Raw measured data, directly from sensors.
        /// </summary>
          raw,
        /// <summary>
        /// Simulated.
        /// </summary>
          simulated,
        /// <summary>
        /// Derived by splicing values from two or more other channels.
        /// </summary>
          spliced,
        /// <summary>
        /// Derived by sampling values from one or more other channels.
        /// </summary>
          sampled,
        /// <summary>
        /// Based on some modeled results of values in another one or more channels.
        /// </summary>
          model
        }
        /// <summary>
        /// This class represents the LoggingMethod xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the LoggingMethod xsd enumeration.")]
        public enum LoggingMethod 
        {
        /// <summary>
        /// The log is a result of computed analyses from various sources.
        /// </summary>
          computed,
        /// <summary>
        /// The log is derived from various different systems.
        /// </summary>
          distributed,
        /// <summary>
        /// The data of the log is a result of logging-while-drilling.
        /// </summary>
          LWD,
        /// <summary>
        /// The data is derived from multiple logging methods.
        /// </summary>
          mixed,
        /// <summary>
        /// The data of the log is a result of measurement-while-drilling.
        /// </summary>
          MWD,
        /// <summary>
        /// The data is recorded on the surface or in real time.
        /// </summary>
          surface,
        /// <summary>
        /// The data is derived as a function of wellbore depth.
        /// </summary>
          wireline
        }
        /// <summary>
        /// This class represents the BhaStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the BhaStatus xsd enumeration.")]
        public enum BhaStatus 
        {
        /// <summary>
        /// final property
        /// </summary>
          final,
        /// <summary>
        /// progress property
        /// </summary>
          progress,
        /// <summary>
        /// plan property
        /// </summary>
          plan
        }
        /// <summary>
        /// This class represents the OpsReportVersion xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the OpsReportVersion xsd enumeration.")]
        public enum OpsReportVersion 
        {
        /// <summary>
        /// A report that has not yet been approved by the drilling operator. This report is normally issued at the beginning of the work day (e.g., 6:00 am). 
        /// </summary>
          preliminary,
        /// <summary>
        /// A daily status report that has been approved by the drilling operator.
        /// </summary>
          normal,
        /// <summary>
        /// A report that represents the final definitive status for the well. This report is typically issued some period of time (e.g., 6 months) after drilling has concluded.
        /// </summary>
          final
        }
        /// <summary>
        /// This class represents the TubularAssembly xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the TubularAssembly xsd enumeration.")]
        public enum TubularAssembly 
        {
        /// <summary>
        /// drilling property
        /// </summary>
          drilling,
        /// <summary>
        /// directionaldrilling property
        /// </summary>
          [XmlEnum("directional drilling")]
          directionaldrilling,
        /// <summary>
        /// fishing property
        /// </summary>
          fishing,
        /// <summary>
        /// conditionmud property
        /// </summary>
          [XmlEnum("condition mud")]
          conditionmud,
        /// <summary>
        /// tubingconveyedlogging property
        /// </summary>
          [XmlEnum("tubing conveyed logging")]
          tubingconveyedlogging,
        /// <summary>
        /// cementing property
        /// </summary>
          cementing,
        /// <summary>
        /// casing property
        /// </summary>
          casing,
        /// <summary>
        /// cleanout property
        /// </summary>
          [XmlEnum("clean out")]
          cleanout,
        /// <summary>
        /// completionortesting property
        /// </summary>
          [XmlEnum("completion or testing")]
          completionortesting,
        /// <summary>
        /// coring property
        /// </summary>
          coring,
        /// <summary>
        /// holeopeningorunderreaming property
        /// </summary>
          [XmlEnum("hole opening or underreaming")]
          holeopeningorunderreaming,
        /// <summary>
        /// millingordressingorcutting property
        /// </summary>
          [XmlEnum("milling or dressing or cutting")]
          millingordressingorcutting,
        /// <summary>
        /// wiperorcheckorreaming property
        /// </summary>
          [XmlEnum("wiper or check or reaming")]
          wiperorcheckorreaming,
        /// <summary>
        /// The value is not known. Avoid using this value. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations. 
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellPurpose xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellPurpose xsd enumeration.")]
        public enum WellPurpose 
        {
        /// <summary>
        /// A well drilled into a formation shown to be potentially productive of oil or gas by an earlier well for the purpose of obtaining more information about the reservoir. Also known as a delineation well.
        /// </summary>
          appraisal,
        /// <summary>
        /// appraisalconfirmationappraisal property
        /// </summary>
          [XmlEnum("appraisal -- confirmation appraisal")]
          appraisalconfirmationappraisal,
        /// <summary>
        /// appraisalexploratoryappraisal property
        /// </summary>
          [XmlEnum("appraisal -- exploratory appraisal")]
          appraisalexploratoryappraisal,
        /// <summary>
        /// An exploratory well drilled in an unproved area to test for a new field, a new pay, a deeper reservoir, or a shallower reservoir. Also known as a wildcat.
        /// </summary>
          exploration,
        /// <summary>
        /// explorationdeeperpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- deeper-pool wildcat")]
          explorationdeeperpoolwildcat,
        /// <summary>
        /// explorationnewfieldwildcat property
        /// </summary>
          [XmlEnum("exploration -- new-field wildcat")]
          explorationnewfieldwildcat,
        /// <summary>
        /// explorationnewpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- new-pool wildcat")]
          explorationnewpoolwildcat,
        /// <summary>
        /// explorationoutpostwildcat property
        /// </summary>
          [XmlEnum("exploration -- outpost wildcat")]
          explorationoutpostwildcat,
        /// <summary>
        /// explorationshallowerpoolwildcat property
        /// </summary>
          [XmlEnum("exploration -- shallower-pool wildcat")]
          explorationshallowerpoolwildcat,
        /// <summary>
        /// A well drilled in a zone in an area already proved productive.
        /// </summary>
          development,
        /// <summary>
        /// developmentinfilldevelopment property
        /// </summary>
          [XmlEnum("development -- infill development")]
          developmentinfilldevelopment,
        /// <summary>
        /// developmentinjector property
        /// </summary>
          [XmlEnum("development -- injector")]
          developmentinjector,
        /// <summary>
        /// developmentproducer property
        /// </summary>
          [XmlEnum("development -- producer")]
          developmentproducer,
        /// <summary>
        /// fluidstorage property
        /// </summary>
          [XmlEnum("fluid storage")]
          fluidstorage,
        /// <summary>
        /// fluidstoragegasstorage property
        /// </summary>
          [XmlEnum("fluid storage -- gas storage")]
          fluidstoragegasstorage,
        /// <summary>
        /// generalsrvc property
        /// </summary>
          [XmlEnum("general srvc")]
          generalsrvc,
        /// <summary>
        /// generalsrvcboreholereacquisition property
        /// </summary>
          [XmlEnum("general srvc -- borehole re-acquisition")]
          generalsrvcboreholereacquisition,
        /// <summary>
        /// generalsrvcobservation property
        /// </summary>
          [XmlEnum("general srvc -- observation")]
          generalsrvcobservation,
        /// <summary>
        /// generalsrvcrelief property
        /// </summary>
          [XmlEnum("general srvc -- relief")]
          generalsrvcrelief,
        /// <summary>
        /// generalsrvcresearch property
        /// </summary>
          [XmlEnum("general srvc -- research")]
          generalsrvcresearch,
        /// <summary>
        /// generalsrvcresearchdrilltest property
        /// </summary>
          [XmlEnum("general srvc -- research -- drill test")]
          generalsrvcresearchdrilltest,
        /// <summary>
        /// generalsrvcresearchstrattest property
        /// </summary>
          [XmlEnum("general srvc -- research -- strat test")]
          generalsrvcresearchstrattest,
        /// <summary>
        /// generalsrvcwastedisposal property
        /// </summary>
          [XmlEnum("general srvc -- waste disposal")]
          generalsrvcwastedisposal,
        /// <summary>
        /// A non-oil and gas well drilled for the purpose of locating and/or extracting a mineral from the subsurface, usually through the injection and/or extraction of mineral-bearing fluids.
        /// </summary>
          mineral
        }
        /// <summary>
        /// This class represents the WellboreShape xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellboreShape xsd enumeration.")]
        public enum WellboreShape 
        {
        /// <summary>
        /// buildandhold property
        /// </summary>
          [XmlEnum("build and hold")]
          buildandhold,
        /// <summary>
        /// A wellbore that significantly departs from vertical with respect to the surface location.
        /// </summary>
          deviated,
        /// <summary>
        /// doublekickoff property
        /// </summary>
          [XmlEnum("double kickoff")]
          doublekickoff,
        /// <summary>
        /// A wellbore whose path deviates from the vertical by at least 75 degrees.
        /// </summary>
          horizontal,
        /// <summary>
        /// Sshaped property
        /// </summary>
          [XmlEnum("S-shaped")]
          Sshaped,
        /// <summary>
        /// A wellbore that is nearly vertical with respect to the surface location.
        /// </summary>
          vertical
        }
        /// <summary>
        /// This class represents the WellFluid xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellFluid xsd enumeration.")]
        public enum WellFluid 
        {
        /// <summary>
        /// This is generally an injected fluid.
        /// </summary>
          air,
        /// <summary>
        /// Liquid hydrocarbons produced with natural gas that are separated from the gas by cooling and various other means. Condensate generally has an API gravity of 50 degrees to 120 degrees and is water white, straw, or bluish in color. It is the liquid recovery from a well classified as a gas well. It is generally dissolved in the gaseous state under reservoir conditions but separates as a liquid either in passing up the hole or at the surface. These hydrocarbons, from associated and non-associated gas well gas, normally are recovered from lease separators or field facilities by mechanical separation.
        /// </summary>
          condensate,
        /// <summary>
        /// The well facility is classified as a dry well. It has not been, nor will it be used to produce or inject any fluids.
        /// </summary>
          dry,
        /// <summary>
        /// The well is classified as a gas well, producing or injecting a hydrocarbon gas. The gas is generally methane but may have a mixture of other gases also.
        /// </summary>
          gas,
        /// <summary>
        /// gaswater property
        /// </summary>
          [XmlEnum("gas-water")]
          gaswater,
        /// <summary>
        /// nonHCgas property
        /// </summary>
          [XmlEnum("non HC gas")]
          nonHCgas,
        /// <summary>
        /// nonHCgasCO2 property
        /// </summary>
          [XmlEnum("non HC gas -- CO2")]
          nonHCgasCO2,
        /// <summary>
        /// The liquid hydrocarbon generally referred to as crude oil.
        /// </summary>
          oil,
        /// <summary>
        /// oilgas property
        /// </summary>
          [XmlEnum("oil-gas")]
          oilgas,
        /// <summary>
        /// oilwater property
        /// </summary>
          [XmlEnum("oil-water")]
          oilwater,
        /// <summary>
        /// The gaseous state of water. This is generally an injected fluid, but it is possible that some hydrothermal wells produce steam.
        /// </summary>
          steam,
        /// <summary>
        /// The well is classified as a water well without distinguishing between brine or fresh water.
        /// </summary>
          water,
        /// <summary>
        /// waterbrine property
        /// </summary>
          [XmlEnum("water -- brine")]
          waterbrine,
        /// <summary>
        /// waterfreshwater property
        /// </summary>
          [XmlEnum("water -- fresh water")]
          waterfreshwater
        }
        /// <summary>
        /// This class represents the WellDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the WellDirection xsd enumeration.")]
        public enum WellDirection 
        {
        /// <summary>
        /// huffnpuff property
        /// </summary>
          [XmlEnum("huff-n-puff")]
          huffnpuff,
        /// <summary>
        /// The well facility is injecting fluids into the subsurface.
        /// </summary>
          injector,
        /// <summary>
        /// The well facility is producing fluids from the subsurface.
        /// </summary>
          producer,
        /// <summary>
        /// The flow direction of the fluids is variable, but not on a regular basis as is the case with the huff-n-puff flow.
        /// </summary>
          uncertain
        }
        /// <summary>
        /// This class represents the AxisOrder2d xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AxisOrder2d xsd enumeration.")]
        public enum AxisOrder2d 
        {
        /// <summary>
        /// eastingnorthing property
        /// </summary>
          [XmlEnum("easting northing")]
          eastingnorthing,
        /// <summary>
        /// northingeasting property
        /// </summary>
          [XmlEnum("northing easting")]
          northingeasting,
        /// <summary>
        /// westingsouthing property
        /// </summary>
          [XmlEnum("westing southing")]
          westingsouthing,
        /// <summary>
        /// southingwesting property
        /// </summary>
          [XmlEnum("southing westing")]
          southingwesting,
        /// <summary>
        /// northingwesting property
        /// </summary>
          [XmlEnum("northing westing")]
          northingwesting,
        /// <summary>
        /// westingnorthing property
        /// </summary>
          [XmlEnum("westing northing")]
          westingnorthing
        }
        /// <summary>
        /// This class represents the VerticalDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VerticalDirection xsd enumeration.")]
        public enum VerticalDirection 
        {
        /// <summary>
        /// up property
        /// </summary>
          up,
        /// <summary>
        /// down property
        /// </summary>
          down
        }
        /// <summary>
        /// This class represents the LogarithmicPowerRatioUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LogarithmicPowerRatioUom xsd enumeration.")]
        public enum LogarithmicPowerRatioUom 
        {
        /// <summary>
        /// B property
        /// </summary>
          B,
        /// <summary>
        /// dB property
        /// </summary>
          dB
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerTimeUom xsd enumeration.")]
        public enum AmountOfSubstancePerTimeUom 
        {
        /// <summary>
        /// kat property
        /// </summary>
          kat,
        /// <summary>
        /// kmolh property
        /// </summary>
          [XmlEnum("kmol/h")]
          kmolh,
        /// <summary>
        /// kmols property
        /// </summary>
          [XmlEnum("kmol/s")]
          kmols,
        /// <summary>
        /// lbmolh property
        /// </summary>
          [XmlEnum("lbmol/h")]
          lbmolh,
        /// <summary>
        /// lbmols property
        /// </summary>
          [XmlEnum("lbmol/s")]
          lbmols,
        /// <summary>
        /// mols property
        /// </summary>
          [XmlEnum("mol/s")]
          mols
        }
        /// <summary>
        /// This class represents the ElectricConductivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricConductivityUom xsd enumeration.")]
        public enum ElectricConductivityUom 
        {
        /// <summary>
        /// kSm property
        /// </summary>
          [XmlEnum("kS/m")]
          kSm,
        /// <summary>
        /// mScm property
        /// </summary>
          [XmlEnum("mS/cm")]
          mScm,
        /// <summary>
        /// mSm property
        /// </summary>
          [XmlEnum("mS/m")]
          mSm,
        /// <summary>
        /// Sm property
        /// </summary>
          [XmlEnum("S/m")]
          Sm
        }
        /// <summary>
        /// This class represents the VolumePerRotationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerRotationUom xsd enumeration.")]
        public enum VolumePerRotationUom 
        {
        /// <summary>
        /// ft3rad property
        /// </summary>
          [XmlEnum("ft3/rad")]
          ft3rad,
        /// <summary>
        /// m3rad property
        /// </summary>
          [XmlEnum("m3/rad")]
          m3rad,
        /// <summary>
        /// m3rev property
        /// </summary>
          [XmlEnum("m3/rev")]
          m3rev
        }
        /// <summary>
        /// This class represents the DiffusiveTimeOfFlightUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DiffusiveTimeOfFlightUom xsd enumeration.")]
        public enum DiffusiveTimeOfFlightUom 
        {
        /// <summary>
        /// h05 property
        /// </summary>
          [XmlEnum("h(0.5)")]
          h05,
        /// <summary>
        /// s05 property
        /// </summary>
          [XmlEnum("s(0.5)")]
          s05
        }
        /// <summary>
        /// This class represents the VolumePerTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerAreaUom xsd enumeration.")]
        public enum VolumePerTimePerAreaUom 
        {
        /// <summary>
        /// ft3minft2 property
        /// </summary>
          [XmlEnum("ft3/(min.ft2)")]
          ft3minft2,
        /// <summary>
        /// ft3sft2 property
        /// </summary>
          [XmlEnum("ft3/(s.ft2)")]
          ft3sft2,
        /// <summary>
        /// galUKhft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft2)")]
          galUKhft2,
        /// <summary>
        /// galUKhin2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in2)")]
          galUKhin2,
        /// <summary>
        /// galUKminft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft2)")]
          galUKminft2,
        /// <summary>
        /// galUShft2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft2)")]
          galUShft2,
        /// <summary>
        /// galUShin2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.in2)")]
          galUShin2,
        /// <summary>
        /// galUSminft2 property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft2)")]
          galUSminft2,
        /// <summary>
        /// m3sm2 property
        /// </summary>
          [XmlEnum("m3/(s.m2)")]
          m3sm2
        }
        /// <summary>
        /// This class represents the MobilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MobilityUom xsd enumeration.")]
        public enum MobilityUom 
        {
        /// <summary>
        /// DPas property
        /// </summary>
          [XmlEnum("D/(Pa.s)")]
          DPas,
        /// <summary>
        /// DcP property
        /// </summary>
          [XmlEnum("D/cP")]
          DcP,
        /// <summary>
        /// mDft2lbfs property
        /// </summary>
          [XmlEnum("mD.ft2/(lbf.s)")]
          mDft2lbfs,
        /// <summary>
        /// mDin2lbfs property
        /// </summary>
          [XmlEnum("mD.in2/(lbf.s)")]
          mDin2lbfs,
        /// <summary>
        /// mDPas property
        /// </summary>
          [XmlEnum("mD/(Pa.s)")]
          mDPas,
        /// <summary>
        /// mDcP property
        /// </summary>
          [XmlEnum("mD/cP")]
          mDcP,
        /// <summary>
        /// TDAPIPas property
        /// </summary>
          [XmlEnum("TD[API]/(Pa.s)")]
          TDAPIPas
        }
        /// <summary>
        /// This class represents the HeatTransferCoefficientUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the HeatTransferCoefficientUom xsd enumeration.")]
        public enum HeatTransferCoefficientUom 
        {
        /// <summary>
        /// BtuIThft2deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.deltaF)")]
          BtuIThft2deltaF,
        /// <summary>
        /// BtuIThft2deltaR property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.deltaR)")]
          BtuIThft2deltaR,
        /// <summary>
        /// BtuIThm2deltaC property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.m2.deltaC)")]
          BtuIThm2deltaC,
        /// <summary>
        /// BtuITsft2deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2.deltaF)")]
          BtuITsft2deltaF,
        /// <summary>
        /// calthhcm2deltaC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2.deltaC)")]
          calthhcm2deltaC,
        /// <summary>
        /// calthscm2deltaC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm2.deltaC)")]
          calthscm2deltaC,
        /// <summary>
        /// Jsm2deltaC property
        /// </summary>
          [XmlEnum("J/(s.m2.deltaC)")]
          Jsm2deltaC,
        /// <summary>
        /// kcalthhm2deltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m2.deltaC)")]
          kcalthhm2deltaC,
        /// <summary>
        /// kJhm2deltaK property
        /// </summary>
          [XmlEnum("kJ/(h.m2.deltaK)")]
          kJhm2deltaK,
        /// <summary>
        /// kWm2deltaK property
        /// </summary>
          [XmlEnum("kW/(m2.deltaK)")]
          kWm2deltaK,
        /// <summary>
        /// Wm2deltaK property
        /// </summary>
          [XmlEnum("W/(m2.deltaK)")]
          Wm2deltaK
        }
        /// <summary>
        /// This class represents the MassPerEnergyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerEnergyUom xsd enumeration.")]
        public enum MassPerEnergyUom 
        {
        /// <summary>
        /// kgkWh property
        /// </summary>
          [XmlEnum("kg/(kW.h)")]
          kgkWh,
        /// <summary>
        /// kgJ property
        /// </summary>
          [XmlEnum("kg/J")]
          kgJ,
        /// <summary>
        /// kgMJ property
        /// </summary>
          [XmlEnum("kg/MJ")]
          kgMJ,
        /// <summary>
        /// lbmhph property
        /// </summary>
          [XmlEnum("lbm/(hp.h)")]
          lbmhph,
        /// <summary>
        /// mgJ property
        /// </summary>
          [XmlEnum("mg/J")]
          mgJ
        }
        /// <summary>
        /// This class represents the MomentOfInertiaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MomentOfInertiaUom xsd enumeration.")]
        public enum MomentOfInertiaUom 
        {
        /// <summary>
        /// kgm2 property
        /// </summary>
          [XmlEnum("kg.m2")]
          kgm2,
        /// <summary>
        /// lbmft2 property
        /// </summary>
          [XmlEnum("lbm.ft2")]
          lbmft2
        }
        /// <summary>
        /// This class represents the CapacitanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the CapacitanceUom xsd enumeration.")]
        public enum CapacitanceUom 
        {
        /// <summary>
        /// cF property
        /// </summary>
          cF,
        /// <summary>
        /// dF property
        /// </summary>
          dF,
        /// <summary>
        /// EF property
        /// </summary>
          EF,
        /// <summary>
        /// F property
        /// </summary>
          F,
        /// <summary>
        /// fF property
        /// </summary>
          fF,
        /// <summary>
        /// GF property
        /// </summary>
          GF,
        /// <summary>
        /// kF property
        /// </summary>
          kF,
        /// <summary>
        /// mF property
        /// </summary>
          mF,
        /// <summary>
        /// MF property
        /// </summary>
          MF,
        /// <summary>
        /// nF property
        /// </summary>
          nF,
        /// <summary>
        /// pF property
        /// </summary>
          pF,
        /// <summary>
        /// TF property
        /// </summary>
          TF,
        /// <summary>
        /// uF property
        /// </summary>
          uF
        }
        /// <summary>
        /// This class represents the MagneticFluxDensityPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFluxDensityPerLengthUom xsd enumeration.")]
        public enum MagneticFluxDensityPerLengthUom 
        {
        /// <summary>
        /// gausscm property
        /// </summary>
          [XmlEnum("gauss/cm")]
          gausscm,
        /// <summary>
        /// mTdm property
        /// </summary>
          [XmlEnum("mT/dm")]
          mTdm,
        /// <summary>
        /// Tm property
        /// </summary>
          [XmlEnum("T/m")]
          Tm
        }
        /// <summary>
        /// This class represents the LengthPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerVolumeUom xsd enumeration.")]
        public enum LengthPerVolumeUom 
        {
        /// <summary>
        /// ftbbl property
        /// </summary>
          [XmlEnum("ft/bbl")]
          ftbbl,
        /// <summary>
        /// ftft3 property
        /// </summary>
          [XmlEnum("ft/ft3")]
          ftft3,
        /// <summary>
        /// ftgalUS property
        /// </summary>
          [XmlEnum("ft/gal[US]")]
          ftgalUS,
        /// <summary>
        /// kmdm3 property
        /// </summary>
          [XmlEnum("km/dm3")]
          kmdm3,
        /// <summary>
        /// kmL property
        /// </summary>
          [XmlEnum("km/L")]
          kmL,
        /// <summary>
        /// mm3 property
        /// </summary>
          [XmlEnum("m/m3")]
          mm3,
        /// <summary>
        /// migalUK property
        /// </summary>
          [XmlEnum("mi/gal[UK]")]
          migalUK,
        /// <summary>
        /// migalUS property
        /// </summary>
          [XmlEnum("mi/gal[US]")]
          migalUS
        }
        /// <summary>
        /// This class represents the CationExchangeCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the CationExchangeCapacityUom xsd enumeration.")]
        public enum CationExchangeCapacityUom 
        {
        /// <summary>
        /// Item01meqg property
        /// </summary>
          [XmlEnum(".01 meq/g")]
          Item01meqg
        }
        /// <summary>
        /// This class represents the MolecularWeightUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolecularWeightUom xsd enumeration.")]
        public enum MolecularWeightUom 
        {
        /// <summary>
        /// gmol property
        /// </summary>
          [XmlEnum("g/mol")]
          gmol,
        /// <summary>
        /// kgmol property
        /// </summary>
          [XmlEnum("kg/mol")]
          kgmol,
        /// <summary>
        /// lbmlbmol property
        /// </summary>
          [XmlEnum("lbm/lbmol")]
          lbmlbmol
        }
        /// <summary>
        /// This class represents the MagneticFluxUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFluxUom xsd enumeration.")]
        public enum MagneticFluxUom 
        {
        /// <summary>
        /// cWb property
        /// </summary>
          cWb,
        /// <summary>
        /// dWb property
        /// </summary>
          dWb,
        /// <summary>
        /// EWb property
        /// </summary>
          EWb,
        /// <summary>
        /// fWb property
        /// </summary>
          fWb,
        /// <summary>
        /// GWb property
        /// </summary>
          GWb,
        /// <summary>
        /// kWb property
        /// </summary>
          kWb,
        /// <summary>
        /// mWb property
        /// </summary>
          mWb,
        /// <summary>
        /// MWb property
        /// </summary>
          MWb,
        /// <summary>
        /// nWb property
        /// </summary>
          nWb,
        /// <summary>
        /// pWb property
        /// </summary>
          pWb,
        /// <summary>
        /// TWb property
        /// </summary>
          TWb,
        /// <summary>
        /// uWb property
        /// </summary>
          uWb,
        /// <summary>
        /// Wb property
        /// </summary>
          Wb
        }
        /// <summary>
        /// This class represents the ThermalConductanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalConductanceUom xsd enumeration.")]
        public enum ThermalConductanceUom 
        {
        /// <summary>
        /// WdeltaK property
        /// </summary>
          [XmlEnum("W/deltaK")]
          WdeltaK
        }
        /// <summary>
        /// This class represents the MassPerVolumePerTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumePerTemperatureUom xsd enumeration.")]
        public enum MassPerVolumePerTemperatureUom 
        {
        /// <summary>
        /// kgm3degC property
        /// </summary>
          [XmlEnum("kg/m3.degC")]
          kgm3degC,
        /// <summary>
        /// kgm3K property
        /// </summary>
          [XmlEnum("kg/m3.K")]
          kgm3K,
        /// <summary>
        /// lbftdegF property
        /// </summary>
          [XmlEnum("lb/ft.degF")]
          lbftdegF
        }
        /// <summary>
        /// This class represents the QuantityOfLightUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the QuantityOfLightUom xsd enumeration.")]
        public enum QuantityOfLightUom 
        {
        /// <summary>
        /// lms property
        /// </summary>
          [XmlEnum("lm.s")]
          lms
        }
        /// <summary>
        /// This class represents the ForceLengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForceLengthPerLengthUom xsd enumeration.")]
        public enum ForceLengthPerLengthUom 
        {
        /// <summary>
        /// kgfmm property
        /// </summary>
          [XmlEnum("kgf.m/m")]
          kgfmm,
        /// <summary>
        /// lbfftin property
        /// </summary>
          [XmlEnum("lbf.ft/in")]
          lbfftin,
        /// <summary>
        /// lbfinin property
        /// </summary>
          [XmlEnum("lbf.in/in")]
          lbfinin,
        /// <summary>
        /// Nmm property
        /// </summary>
          [XmlEnum("N.m/m")]
          Nmm,
        /// <summary>
        /// tonfUSmift property
        /// </summary>
          [XmlEnum("tonf[US].mi/ft")]
          tonfUSmift
        }
        /// <summary>
        /// This class represents the SolidAngleUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SolidAngleUom xsd enumeration.")]
        public enum SolidAngleUom 
        {
        /// <summary>
        /// sr property
        /// </summary>
          sr
        }
        /// <summary>
        /// This class represents the MassPerVolumePerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumePerPressureUom xsd enumeration.")]
        public enum MassPerVolumePerPressureUom 
        {
        /// <summary>
        /// kgm3kPa property
        /// </summary>
          [XmlEnum("kg/m3.kPa")]
          kgm3kPa,
        /// <summary>
        /// lbftpsi property
        /// </summary>
          [XmlEnum("lb/ft.psi")]
          lbftpsi
        }
        /// <summary>
        /// This class represents the VolumePerTimePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerVolumeUom xsd enumeration.")]
        public enum VolumePerTimePerVolumeUom 
        {
        /// <summary>
        /// bbldacreft property
        /// </summary>
          [XmlEnum("bbl/(d.acre.ft)")]
          bbldacreft,
        /// <summary>
        /// m3sm3 property
        /// </summary>
          [XmlEnum("m3/(s.m3)")]
          m3sm3
        }
        /// <summary>
        /// This class represents the MolarVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolarVolumeUom xsd enumeration.")]
        public enum MolarVolumeUom 
        {
        /// <summary>
        /// dm3kmol property
        /// </summary>
          [XmlEnum("dm3/kmol")]
          dm3kmol,
        /// <summary>
        /// ft3lbmol property
        /// </summary>
          [XmlEnum("ft3/lbmol")]
          ft3lbmol,
        /// <summary>
        /// Lkmol property
        /// </summary>
          [XmlEnum("L/kmol")]
          Lkmol,
        /// <summary>
        /// Lmol property
        /// </summary>
          [XmlEnum("L/mol")]
          Lmol,
        /// <summary>
        /// m3kmol property
        /// </summary>
          [XmlEnum("m3/kmol")]
          m3kmol,
        /// <summary>
        /// m3mol property
        /// </summary>
          [XmlEnum("m3/mol")]
          m3mol
        }
        /// <summary>
        /// This class represents the AmountOfSubstanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstanceUom xsd enumeration.")]
        public enum AmountOfSubstanceUom 
        {
        /// <summary>
        /// kmol property
        /// </summary>
          kmol,
        /// <summary>
        /// lbmol property
        /// </summary>
          lbmol,
        /// <summary>
        /// mmol property
        /// </summary>
          mmol,
        /// <summary>
        /// mol property
        /// </summary>
          mol,
        /// <summary>
        /// umol property
        /// </summary>
          umol
        }
        /// <summary>
        /// This class represents the DipoleMomentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DipoleMomentUom xsd enumeration.")]
        public enum DipoleMomentUom 
        {
        /// <summary>
        /// Cm property
        /// </summary>
          [XmlEnum("C.m")]
          Cm
        }
        /// <summary>
        /// This class represents the APINeutronUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the APINeutronUom xsd enumeration.")]
        public enum APINeutronUom 
        {
        /// <summary>
        /// nAPI property
        /// </summary>
          nAPI
        }
        /// <summary>
        /// This class represents the ReciprocalTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalTimeUom xsd enumeration.")]
        public enum ReciprocalTimeUom 
        {
        /// <summary>
        /// Item1a property
        /// </summary>
          [XmlEnum("1/a")]
          Item1a,
        /// <summary>
        /// Item1d property
        /// </summary>
          [XmlEnum("1/d")]
          Item1d,
        /// <summary>
        /// Item1h property
        /// </summary>
          [XmlEnum("1/h")]
          Item1h,
        /// <summary>
        /// Item1min property
        /// </summary>
          [XmlEnum("1/min")]
          Item1min,
        /// <summary>
        /// Item1ms property
        /// </summary>
          [XmlEnum("1/ms")]
          Item1ms,
        /// <summary>
        /// Item1s property
        /// </summary>
          [XmlEnum("1/s")]
          Item1s,
        /// <summary>
        /// Item1us property
        /// </summary>
          [XmlEnum("1/us")]
          Item1us,
        /// <summary>
        /// Item1wk property
        /// </summary>
          [XmlEnum("1/wk")]
          Item1wk
        }
        /// <summary>
        /// This class represents the TemperatureIntervalPerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalPerPressureUom xsd enumeration.")]
        public enum TemperatureIntervalPerPressureUom 
        {
        /// <summary>
        /// deltaCkPa property
        /// </summary>
          [XmlEnum("deltaC/kPa")]
          deltaCkPa,
        /// <summary>
        /// deltaFpsi property
        /// </summary>
          [XmlEnum("deltaF/psi")]
          deltaFpsi,
        /// <summary>
        /// deltaKPa property
        /// </summary>
          [XmlEnum("deltaK/Pa")]
          deltaKPa
        }
        /// <summary>
        /// This class represents the APIGammaRayUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the APIGammaRayUom xsd enumeration.")]
        public enum APIGammaRayUom 
        {
        /// <summary>
        /// gAPI property
        /// </summary>
          gAPI
        }
        /// <summary>
        /// This class represents the ElectricCurrentDensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricCurrentDensityUom xsd enumeration.")]
        public enum ElectricCurrentDensityUom 
        {
        /// <summary>
        /// Acm2 property
        /// </summary>
          [XmlEnum("A/cm2")]
          Acm2,
        /// <summary>
        /// Aft2 property
        /// </summary>
          [XmlEnum("A/ft2")]
          Aft2,
        /// <summary>
        /// Am2 property
        /// </summary>
          [XmlEnum("A/m2")]
          Am2,
        /// <summary>
        /// Amm2 property
        /// </summary>
          [XmlEnum("A/mm2")]
          Amm2,
        /// <summary>
        /// mAcm2 property
        /// </summary>
          [XmlEnum("mA/cm2")]
          mAcm2,
        /// <summary>
        /// mAft2 property
        /// </summary>
          [XmlEnum("mA/ft2")]
          mAft2,
        /// <summary>
        /// uAcm2 property
        /// </summary>
          [XmlEnum("uA/cm2")]
          uAcm2,
        /// <summary>
        /// uAin2 property
        /// </summary>
          [XmlEnum("uA/in2")]
          uAin2
        }
        /// <summary>
        /// This class represents the VolumePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerAreaUom xsd enumeration.")]
        public enum VolumePerAreaUom 
        {
        /// <summary>
        /// Item1E6bblacre property
        /// </summary>
          [XmlEnum("1E6 bbl/acre")]
          Item1E6bblacre,
        /// <summary>
        /// bblacre property
        /// </summary>
          [XmlEnum("bbl/acre")]
          bblacre,
        /// <summary>
        /// ft3ft2 property
        /// </summary>
          [XmlEnum("ft3/ft2")]
          ft3ft2,
        /// <summary>
        /// m3m2 property
        /// </summary>
          [XmlEnum("m3/m2")]
          m3m2
        }
        /// <summary>
        /// This class represents the ReciprocalElectricPotentialDifferenceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalElectricPotentialDifferenceUom xsd enumeration.")]
        public enum ReciprocalElectricPotentialDifferenceUom 
        {
        /// <summary>
        /// Item1uV property
        /// </summary>
          [XmlEnum("1/uV")]
          Item1uV,
        /// <summary>
        /// Item1V property
        /// </summary>
          [XmlEnum("1/V")]
          Item1V
        }
        /// <summary>
        /// This class represents the TimePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerLengthUom xsd enumeration.")]
        public enum TimePerLengthUom 
        {
        /// <summary>
        /// Item0001hft property
        /// </summary>
          [XmlEnum("0.001 h/ft")]
          Item0001hft,
        /// <summary>
        /// hkm property
        /// </summary>
          [XmlEnum("h/km")]
          hkm,
        /// <summary>
        /// minft property
        /// </summary>
          [XmlEnum("min/ft")]
          minft,
        /// <summary>
        /// minm property
        /// </summary>
          [XmlEnum("min/m")]
          minm,
        /// <summary>
        /// mscm property
        /// </summary>
          [XmlEnum("ms/cm")]
          mscm,
        /// <summary>
        /// msft property
        /// </summary>
          [XmlEnum("ms/ft")]
          msft,
        /// <summary>
        /// msin property
        /// </summary>
          [XmlEnum("ms/in")]
          msin,
        /// <summary>
        /// msm property
        /// </summary>
          [XmlEnum("ms/m")]
          msm,
        /// <summary>
        /// nsft property
        /// </summary>
          [XmlEnum("ns/ft")]
          nsft,
        /// <summary>
        /// nsm property
        /// </summary>
          [XmlEnum("ns/m")]
          nsm,
        /// <summary>
        /// scm property
        /// </summary>
          [XmlEnum("s/cm")]
          scm,
        /// <summary>
        /// sft property
        /// </summary>
          [XmlEnum("s/ft")]
          sft,
        /// <summary>
        /// sin property
        /// </summary>
          [XmlEnum("s/in")]
          sin,
        /// <summary>
        /// sm property
        /// </summary>
          [XmlEnum("s/m")]
          sm,
        /// <summary>
        /// usft property
        /// </summary>
          [XmlEnum("us/ft")]
          usft,
        /// <summary>
        /// usin property
        /// </summary>
          [XmlEnum("us/in")]
          usin,
        /// <summary>
        /// usm property
        /// </summary>
          [XmlEnum("us/m")]
          usm
        }
        /// <summary>
        /// This class represents the VolumePerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerPressureUom xsd enumeration.")]
        public enum VolumePerPressureUom 
        {
        /// <summary>
        /// bblpsi property
        /// </summary>
          [XmlEnum("bbl/psi")]
          bblpsi,
        /// <summary>
        /// m3kPa property
        /// </summary>
          [XmlEnum("m3/kPa")]
          m3kPa,
        /// <summary>
        /// m3Pa property
        /// </summary>
          [XmlEnum("m3/Pa")]
          m3Pa
        }
        /// <summary>
        /// This class represents the ElectricChargePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargePerAreaUom xsd enumeration.")]
        public enum ElectricChargePerAreaUom 
        {
        /// <summary>
        /// Ccm2 property
        /// </summary>
          [XmlEnum("C/cm2")]
          Ccm2,
        /// <summary>
        /// Cm2 property
        /// </summary>
          [XmlEnum("C/m2")]
          Cm2,
        /// <summary>
        /// Cmm2 property
        /// </summary>
          [XmlEnum("C/mm2")]
          Cmm2,
        /// <summary>
        /// mCm2 property
        /// </summary>
          [XmlEnum("mC/m2")]
          mCm2
        }
        /// <summary>
        /// This class represents the MassPerTimePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerTimePerLengthUom xsd enumeration.")]
        public enum MassPerTimePerLengthUom 
        {
        /// <summary>
        /// kgms property
        /// </summary>
          [XmlEnum("kg/(m.s)")]
          kgms,
        /// <summary>
        /// lbmfth property
        /// </summary>
          [XmlEnum("lbm/(ft.h)")]
          lbmfth,
        /// <summary>
        /// lbmfts property
        /// </summary>
          [XmlEnum("lbm/(ft.s)")]
          lbmfts,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas
        }
        /// <summary>
        /// This class represents the SignalingEventPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SignalingEventPerTimeUom xsd enumeration.")]
        public enum SignalingEventPerTimeUom 
        {
        /// <summary>
        /// Bd property
        /// </summary>
          Bd
        }
        /// <summary>
        /// This class represents the EnergyPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerLengthUom xsd enumeration.")]
        public enum EnergyPerLengthUom 
        {
        /// <summary>
        /// Jm property
        /// </summary>
          [XmlEnum("J/m")]
          Jm,
        /// <summary>
        /// MJm property
        /// </summary>
          [XmlEnum("MJ/m")]
          MJm
        }
        /// <summary>
        /// This class represents the PressureSquaredUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureSquaredUom xsd enumeration.")]
        public enum PressureSquaredUom 
        {
        /// <summary>
        /// bar2 property
        /// </summary>
          bar2,
        /// <summary>
        /// GPa2 property
        /// </summary>
          GPa2,
        /// <summary>
        /// kPa2 property
        /// </summary>
          kPa2,
        /// <summary>
        /// kpsi2 property
        /// </summary>
          kpsi2,
        /// <summary>
        /// Pa2 property
        /// </summary>
          Pa2,
        /// <summary>
        /// psi2 property
        /// </summary>
          psi2
        }
        /// <summary>
        /// This class represents the AngularAccelerationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AngularAccelerationUom xsd enumeration.")]
        public enum AngularAccelerationUom 
        {
        /// <summary>
        /// rads2 property
        /// </summary>
          [XmlEnum("rad/s2")]
          rads2,
        /// <summary>
        /// rpms property
        /// </summary>
          [XmlEnum("rpm/s")]
          rpms
        }
        /// <summary>
        /// This class represents the ReciprocalMassTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalMassTimeUom xsd enumeration.")]
        public enum ReciprocalMassTimeUom 
        {
        /// <summary>
        /// Item1kgs property
        /// </summary>
          [XmlEnum("1/(kg.s)")]
          Item1kgs,
        /// <summary>
        /// Bqkg property
        /// </summary>
          [XmlEnum("Bq/kg")]
          Bqkg,
        /// <summary>
        /// pCig property
        /// </summary>
          [XmlEnum("pCi/g")]
          pCig
        }
        /// <summary>
        /// This class represents the ThermalDiffusivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalDiffusivityUom xsd enumeration.")]
        public enum ThermalDiffusivityUom 
        {
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s
        }
        /// <summary>
        /// This class represents the VolumePerTimeLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimeLengthUom xsd enumeration.")]
        public enum VolumePerTimeLengthUom 
        {
        /// <summary>
        /// Item1000bblftd property
        /// </summary>
          [XmlEnum("1000 bbl.ft/d")]
          Item1000bblftd,
        /// <summary>
        /// Item1000m4d property
        /// </summary>
          [XmlEnum("1000 m4/d")]
          Item1000m4d,
        /// <summary>
        /// m4s property
        /// </summary>
          [XmlEnum("m4/s")]
          m4s
        }
        /// <summary>
        /// This class represents the SecondMomentOfAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SecondMomentOfAreaUom xsd enumeration.")]
        public enum SecondMomentOfAreaUom 
        {
        /// <summary>
        /// cm4 property
        /// </summary>
          cm4,
        /// <summary>
        /// in4 property
        /// </summary>
          in4,
        /// <summary>
        /// m4 property
        /// </summary>
          m4
        }
        /// <summary>
        /// This class represents the ForceAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForceAreaUom xsd enumeration.")]
        public enum ForceAreaUom 
        {
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne.cm2")]
          dynecm2,
        /// <summary>
        /// kgfm2 property
        /// </summary>
          [XmlEnum("kgf.m2")]
          kgfm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN.m2")]
          kNm2,
        /// <summary>
        /// lbfin2 property
        /// </summary>
          [XmlEnum("lbf.in2")]
          lbfin2,
        /// <summary>
        /// mNm2 property
        /// </summary>
          [XmlEnum("mN.m2")]
          mNm2,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N.m2")]
          Nm2,
        /// <summary>
        /// pdlcm2 property
        /// </summary>
          [XmlEnum("pdl.cm2")]
          pdlcm2,
        /// <summary>
        /// tonfUKft2 property
        /// </summary>
          [XmlEnum("tonf[UK].ft2")]
          tonfUKft2,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonf[US].ft2")]
          tonfUSft2
        }
        /// <summary>
        /// This class represents the ElectricFieldStrengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricFieldStrengthUom xsd enumeration.")]
        public enum ElectricFieldStrengthUom 
        {
        /// <summary>
        /// mVft property
        /// </summary>
          [XmlEnum("mV/ft")]
          mVft,
        /// <summary>
        /// mVm property
        /// </summary>
          [XmlEnum("mV/m")]
          mVm,
        /// <summary>
        /// uVft property
        /// </summary>
          [XmlEnum("uV/ft")]
          uVft,
        /// <summary>
        /// uVm property
        /// </summary>
          [XmlEnum("uV/m")]
          uVm,
        /// <summary>
        /// Vm property
        /// </summary>
          [XmlEnum("V/m")]
          Vm
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerAreaUom xsd enumeration.")]
        public enum AmountOfSubstancePerAreaUom 
        {
        /// <summary>
        /// molm2 property
        /// </summary>
          [XmlEnum("mol/m2")]
          molm2
        }
        /// <summary>
        /// This class represents the AreaPerAmountOfSubstanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerAmountOfSubstanceUom xsd enumeration.")]
        public enum AreaPerAmountOfSubstanceUom 
        {
        /// <summary>
        /// m2mol property
        /// </summary>
          [XmlEnum("m2/mol")]
          m2mol
        }
        /// <summary>
        /// This class represents the LogarithmicPowerRatioPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LogarithmicPowerRatioPerLengthUom xsd enumeration.")]
        public enum LogarithmicPowerRatioPerLengthUom 
        {
        /// <summary>
        /// Bm property
        /// </summary>
          [XmlEnum("B/m")]
          Bm,
        /// <summary>
        /// dBft property
        /// </summary>
          [XmlEnum("dB/ft")]
          dBft,
        /// <summary>
        /// dBkm property
        /// </summary>
          [XmlEnum("dB/km")]
          dBkm,
        /// <summary>
        /// dBm property
        /// </summary>
          [XmlEnum("dB/m")]
          dBm
        }
        /// <summary>
        /// This class represents the LuminanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminanceUom xsd enumeration.")]
        public enum LuminanceUom 
        {
        /// <summary>
        /// cdm2 property
        /// </summary>
          [XmlEnum("cd/m2")]
          cdm2
        }
        /// <summary>
        /// This class represents the VolumePerTimePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerTimeUom xsd enumeration.")]
        public enum VolumePerTimePerTimeUom 
        {
        /// <summary>
        /// bbld2 property
        /// </summary>
          [XmlEnum("bbl/d2")]
          bbld2,
        /// <summary>
        /// bblh2 property
        /// </summary>
          [XmlEnum("bbl/h2")]
          bblh2,
        /// <summary>
        /// dm3s2 property
        /// </summary>
          [XmlEnum("dm3/s2")]
          dm3s2,
        /// <summary>
        /// ft3d2 property
        /// </summary>
          [XmlEnum("ft3/d2")]
          ft3d2,
        /// <summary>
        /// ft3h2 property
        /// </summary>
          [XmlEnum("ft3/h2")]
          ft3h2,
        /// <summary>
        /// ft3min2 property
        /// </summary>
          [XmlEnum("ft3/min2")]
          ft3min2,
        /// <summary>
        /// ft3s2 property
        /// </summary>
          [XmlEnum("ft3/s2")]
          ft3s2,
        /// <summary>
        /// galUKh2 property
        /// </summary>
          [XmlEnum("gal[UK]/h2")]
          galUKh2,
        /// <summary>
        /// galUKmin2 property
        /// </summary>
          [XmlEnum("gal[UK]/min2")]
          galUKmin2,
        /// <summary>
        /// galUSh2 property
        /// </summary>
          [XmlEnum("gal[US]/h2")]
          galUSh2,
        /// <summary>
        /// galUSmin2 property
        /// </summary>
          [XmlEnum("gal[US]/min2")]
          galUSmin2,
        /// <summary>
        /// Ls2 property
        /// </summary>
          [XmlEnum("L/s2")]
          Ls2,
        /// <summary>
        /// m3d2 property
        /// </summary>
          [XmlEnum("m3/d2")]
          m3d2,
        /// <summary>
        /// m3s2 property
        /// </summary>
          [XmlEnum("m3/s2")]
          m3s2
        }
        /// <summary>
        /// This class represents the MolarHeatCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolarHeatCapacityUom xsd enumeration.")]
        public enum MolarHeatCapacityUom 
        {
        /// <summary>
        /// BtuITlbmoldeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbmol.deltaF)")]
          BtuITlbmoldeltaF,
        /// <summary>
        /// calthmoldeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(mol.deltaC)")]
          calthmoldeltaC,
        /// <summary>
        /// JmoldeltaK property
        /// </summary>
          [XmlEnum("J/(mol.deltaK)")]
          JmoldeltaK,
        /// <summary>
        /// kJkmoldeltaK property
        /// </summary>
          [XmlEnum("kJ/(kmol.deltaK)")]
          kJkmoldeltaK
        }
        /// <summary>
        /// This class represents the VolumeFlowRatePerVolumeFlowRateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumeFlowRatePerVolumeFlowRateUom xsd enumeration.")]
        public enum VolumeFlowRatePerVolumeFlowRateUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// bbldbbld property
        /// </summary>
          [XmlEnum("(bbl/d)/(bbl/d)")]
          bbldbbld,
        /// <summary>
        /// m3dm3d property
        /// </summary>
          [XmlEnum("(m3/d)/(m3/d)")]
          m3dm3d,
        /// <summary>
        /// m3sm3s property
        /// </summary>
          [XmlEnum("(m3/s)/(m3/s)")]
          m3sm3s,
        /// <summary>
        /// Item1E6ft3dbbld property
        /// </summary>
          [XmlEnum("1E6 (ft3/d)/(bbl/d)")]
          Item1E6ft3dbbld,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc
        }
        /// <summary>
        /// This class represents the FrequencyIntervalUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the FrequencyIntervalUom xsd enumeration.")]
        public enum FrequencyIntervalUom 
        {
        /// <summary>
        /// O property
        /// </summary>
          O
        }
        /// <summary>
        /// This class represents the TemperatureIntervalUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalUom xsd enumeration.")]
        public enum TemperatureIntervalUom 
        {
        /// <summary>
        /// deltaC property
        /// </summary>
          deltaC,
        /// <summary>
        /// deltaF property
        /// </summary>
          deltaF,
        /// <summary>
        /// deltaK property
        /// </summary>
          deltaK,
        /// <summary>
        /// deltaR property
        /// </summary>
          deltaR
        }
        /// <summary>
        /// This class represents the RadiantIntensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the RadiantIntensityUom xsd enumeration.")]
        public enum RadiantIntensityUom 
        {
        /// <summary>
        /// Wsr property
        /// </summary>
          [XmlEnum("W/sr")]
          Wsr
        }
        /// <summary>
        /// This class represents the DataTransferSpeedUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DataTransferSpeedUom xsd enumeration.")]
        public enum DataTransferSpeedUom 
        {
        /// <summary>
        /// bits property
        /// </summary>
          [XmlEnum("bit/s")]
          bits,
        /// <summary>
        /// bytes property
        /// </summary>
          [XmlEnum("byte/s")]
          bytes
        }
        /// <summary>
        /// This class represents the InductanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the InductanceUom xsd enumeration.")]
        public enum InductanceUom 
        {
        /// <summary>
        /// cH property
        /// </summary>
          cH,
        /// <summary>
        /// dH property
        /// </summary>
          dH,
        /// <summary>
        /// EH property
        /// </summary>
          EH,
        /// <summary>
        /// fH property
        /// </summary>
          fH,
        /// <summary>
        /// GH property
        /// </summary>
          GH,
        /// <summary>
        /// H property
        /// </summary>
          H,
        /// <summary>
        /// kH property
        /// </summary>
          kH,
        /// <summary>
        /// MH property
        /// </summary>
          MH,
        /// <summary>
        /// mH property
        /// </summary>
          mH,
        /// <summary>
        /// nH property
        /// </summary>
          nH,
        /// <summary>
        /// TH property
        /// </summary>
          TH,
        /// <summary>
        /// uH property
        /// </summary>
          uH
        }
        /// <summary>
        /// This class represents the KinematicViscosityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the KinematicViscosityUom xsd enumeration.")]
        public enum KinematicViscosityUom 
        {
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// cSt property
        /// </summary>
          cSt,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s,
        /// <summary>
        /// Pasm3kg property
        /// </summary>
          [XmlEnum("Pa.s.m3/kg")]
          Pasm3kg,
        /// <summary>
        /// St property
        /// </summary>
          St
        }
        /// <summary>
        /// This class represents the VolumePerTimePerPressureLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerPressureLengthUom xsd enumeration.")]
        public enum VolumePerTimePerPressureLengthUom 
        {
        /// <summary>
        /// bblftpsid property
        /// </summary>
          [XmlEnum("bbl/(ft.psi.d)")]
          bblftpsid,
        /// <summary>
        /// ft3ftpsid property
        /// </summary>
          [XmlEnum("ft3/(ft.psi.d)")]
          ft3ftpsid,
        /// <summary>
        /// m2kPad property
        /// </summary>
          [XmlEnum("m2/(kPa.d)")]
          m2kPad,
        /// <summary>
        /// m2Pas property
        /// </summary>
          [XmlEnum("m2/(Pa.s)")]
          m2Pas
        }
        /// <summary>
        /// This class represents the ReciprocalForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalForceUom xsd enumeration.")]
        public enum ReciprocalForceUom 
        {
        /// <summary>
        /// Item1lbf property
        /// </summary>
          [XmlEnum("1/lbf")]
          Item1lbf,
        /// <summary>
        /// Item1N property
        /// </summary>
          [XmlEnum("1/N")]
          Item1N
        }
        /// <summary>
        /// This class represents the ReciprocalAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalAreaUom xsd enumeration.")]
        public enum ReciprocalAreaUom 
        {
        /// <summary>
        /// Item1ft2 property
        /// </summary>
          [XmlEnum("1/ft2")]
          Item1ft2,
        /// <summary>
        /// Item1km2 property
        /// </summary>
          [XmlEnum("1/km2")]
          Item1km2,
        /// <summary>
        /// Item1m2 property
        /// </summary>
          [XmlEnum("1/m2")]
          Item1m2,
        /// <summary>
        /// Item1mi2 property
        /// </summary>
          [XmlEnum("1/mi2")]
          Item1mi2
        }
        /// <summary>
        /// This class represents the PressurePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressurePerTimeUom xsd enumeration.")]
        public enum PressurePerTimeUom 
        {
        /// <summary>
        /// atmh property
        /// </summary>
          [XmlEnum("atm/h")]
          atmh,
        /// <summary>
        /// barh property
        /// </summary>
          [XmlEnum("bar/h")]
          barh,
        /// <summary>
        /// kPah property
        /// </summary>
          [XmlEnum("kPa/h")]
          kPah,
        /// <summary>
        /// kPamin property
        /// </summary>
          [XmlEnum("kPa/min")]
          kPamin,
        /// <summary>
        /// MPah property
        /// </summary>
          [XmlEnum("MPa/h")]
          MPah,
        /// <summary>
        /// Pah property
        /// </summary>
          [XmlEnum("Pa/h")]
          Pah,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa/s")]
          Pas,
        /// <summary>
        /// psih property
        /// </summary>
          [XmlEnum("psi/h")]
          psih,
        /// <summary>
        /// psimin property
        /// </summary>
          [XmlEnum("psi/min")]
          psimin
        }
        /// <summary>
        /// This class represents the ElectricChargeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargeUom xsd enumeration.")]
        public enum ElectricChargeUom 
        {
        /// <summary>
        /// Ah property
        /// </summary>
          [XmlEnum("A.h")]
          Ah,
        /// <summary>
        /// As property
        /// </summary>
          [XmlEnum("A.s")]
          As,
        /// <summary>
        /// C property
        /// </summary>
          C,
        /// <summary>
        /// cC property
        /// </summary>
          cC,
        /// <summary>
        /// dC property
        /// </summary>
          dC,
        /// <summary>
        /// EC property
        /// </summary>
          EC,
        /// <summary>
        /// fC property
        /// </summary>
          fC,
        /// <summary>
        /// GC property
        /// </summary>
          GC,
        /// <summary>
        /// kC property
        /// </summary>
          kC,
        /// <summary>
        /// MC property
        /// </summary>
          MC,
        /// <summary>
        /// mC property
        /// </summary>
          mC,
        /// <summary>
        /// nC property
        /// </summary>
          nC,
        /// <summary>
        /// pC property
        /// </summary>
          pC,
        /// <summary>
        /// TC property
        /// </summary>
          TC,
        /// <summary>
        /// uC property
        /// </summary>
          uC
        }
        /// <summary>
        /// This class represents the LuminousEfficacyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminousEfficacyUom xsd enumeration.")]
        public enum LuminousEfficacyUom 
        {
        /// <summary>
        /// lmW property
        /// </summary>
          [XmlEnum("lm/W")]
          lmW
        }
        /// <summary>
        /// This class represents the PressurePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressurePerVolumeUom xsd enumeration.")]
        public enum PressurePerVolumeUom 
        {
        /// <summary>
        /// Pam3 property
        /// </summary>
          [XmlEnum("Pa/m3")]
          Pam3,
        /// <summary>
        /// psi2dcPft3 property
        /// </summary>
          [XmlEnum("psi2.d/(cP.ft3)")]
          psi2dcPft3
        }
        /// <summary>
        /// This class represents the ActivityOfRadioactivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ActivityOfRadioactivityUom xsd enumeration.")]
        public enum ActivityOfRadioactivityUom 
        {
        /// <summary>
        /// Bq property
        /// </summary>
          Bq,
        /// <summary>
        /// Ci property
        /// </summary>
          Ci,
        /// <summary>
        /// GBq property
        /// </summary>
          GBq,
        /// <summary>
        /// MBq property
        /// </summary>
          MBq,
        /// <summary>
        /// mCi property
        /// </summary>
          mCi,
        /// <summary>
        /// nCi property
        /// </summary>
          nCi,
        /// <summary>
        /// pCi property
        /// </summary>
          pCi,
        /// <summary>
        /// TBq property
        /// </summary>
          TBq,
        /// <summary>
        /// uCi property
        /// </summary>
          uCi
        }
        /// <summary>
        /// This class represents the LengthPerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerPressureUom xsd enumeration.")]
        public enum LengthPerPressureUom 
        {
        /// <summary>
        /// ftpsi property
        /// </summary>
          [XmlEnum("ft/psi")]
          ftpsi,
        /// <summary>
        /// mkPa property
        /// </summary>
          [XmlEnum("m/kPa")]
          mkPa,
        /// <summary>
        /// mPa property
        /// </summary>
          [XmlEnum("m/Pa")]
          mPa
        }
        /// <summary>
        /// This class represents the AreaPerCountUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerCountUom xsd enumeration.")]
        public enum AreaPerCountUom 
        {
        /// <summary>
        /// belectron property
        /// </summary>
          [XmlEnum("b/electron")]
          belectron
        }
        /// <summary>
        /// This class represents the MagneticVectorPotentialUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticVectorPotentialUom xsd enumeration.")]
        public enum MagneticVectorPotentialUom 
        {
        /// <summary>
        /// Wbm property
        /// </summary>
          [XmlEnum("Wb/m")]
          Wbm,
        /// <summary>
        /// Wbmm property
        /// </summary>
          [XmlEnum("Wb/mm")]
          Wbmm
        }
        /// <summary>
        /// This class represents the MagneticFieldStrengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFieldStrengthUom xsd enumeration.")]
        public enum MagneticFieldStrengthUom 
        {
        /// <summary>
        /// Am property
        /// </summary>
          [XmlEnum("A/m")]
          Am,
        /// <summary>
        /// Amm property
        /// </summary>
          [XmlEnum("A/mm")]
          Amm,
        /// <summary>
        /// Oe property
        /// </summary>
          Oe
        }
        /// <summary>
        /// This class represents the ThermalResistanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalResistanceUom xsd enumeration.")]
        public enum ThermalResistanceUom 
        {
        /// <summary>
        /// deltaKW property
        /// </summary>
          [XmlEnum("deltaK/W")]
          deltaKW
        }
        /// <summary>
        /// This class represents the ForcePerForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerForceUom xsd enumeration.")]
        public enum ForcePerForceUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// kgfkgf property
        /// </summary>
          [XmlEnum("kgf/kgf")]
          kgfkgf,
        /// <summary>
        /// lbflbf property
        /// </summary>
          [XmlEnum("lbf/lbf")]
          lbflbf,
        /// <summary>
        /// NN property
        /// </summary>
          [XmlEnum("N/N")]
          NN
        }
        /// <summary>
        /// This class represents the LengthPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerMassUom xsd enumeration.")]
        public enum LengthPerMassUom 
        {
        /// <summary>
        /// ftlbm property
        /// </summary>
          [XmlEnum("ft/lbm")]
          ftlbm,
        /// <summary>
        /// mkg property
        /// </summary>
          [XmlEnum("m/kg")]
          mkg
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerTimePerAreaUom xsd enumeration.")]
        public enum AmountOfSubstancePerTimePerAreaUom 
        {
        /// <summary>
        /// lbmolhft2 property
        /// </summary>
          [XmlEnum("lbmol/(h.ft2)")]
          lbmolhft2,
        /// <summary>
        /// lbmolsft2 property
        /// </summary>
          [XmlEnum("lbmol/(s.ft2)")]
          lbmolsft2,
        /// <summary>
        /// molsm2 property
        /// </summary>
          [XmlEnum("mol/(s.m2)")]
          molsm2
        }
        /// <summary>
        /// This class represents the LinearThermalExpansionUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LinearThermalExpansionUom xsd enumeration.")]
        public enum LinearThermalExpansionUom 
        {
        /// <summary>
        /// Item1deltaK property
        /// </summary>
          [XmlEnum("1/deltaK")]
          Item1deltaK,
        /// <summary>
        /// inindeltaF property
        /// </summary>
          [XmlEnum("in/(in.deltaF)")]
          inindeltaF,
        /// <summary>
        /// mmdeltaK property
        /// </summary>
          [XmlEnum("m/(m.deltaK)")]
          mmdeltaK,
        /// <summary>
        /// mmmmdeltaK property
        /// </summary>
          [XmlEnum("mm/(mm.deltaK)")]
          mmmmdeltaK
        }
        /// <summary>
        /// This class represents the ElectricalResistivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricalResistivityUom xsd enumeration.")]
        public enum ElectricalResistivityUom 
        {
        /// <summary>
        /// kohmm property
        /// </summary>
          [XmlEnum("kohm.m")]
          kohmm,
        /// <summary>
        /// nohmmil2ft property
        /// </summary>
          [XmlEnum("nohm.mil2/ft")]
          nohmmil2ft,
        /// <summary>
        /// nohmmm2m property
        /// </summary>
          [XmlEnum("nohm.mm2/m")]
          nohmmm2m,
        /// <summary>
        /// ohmcm property
        /// </summary>
          [XmlEnum("ohm.cm")]
          ohmcm,
        /// <summary>
        /// ohmm property
        /// </summary>
          [XmlEnum("ohm.m")]
          ohmm,
        /// <summary>
        /// ohmm2m property
        /// </summary>
          [XmlEnum("ohm.m2/m")]
          ohmm2m
        }
        /// <summary>
        /// This class represents the PressureSquaredPerForceTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureSquaredPerForceTimePerAreaUom xsd enumeration.")]
        public enum PressureSquaredPerForceTimePerAreaUom 
        {
        /// <summary>
        /// Item0001kPa2cP property
        /// </summary>
          [XmlEnum("0.001 kPa2/cP")]
          Item0001kPa2cP,
        /// <summary>
        /// bar2cP property
        /// </summary>
          [XmlEnum("bar2/cP")]
          bar2cP,
        /// <summary>
        /// kPa2cP property
        /// </summary>
          [XmlEnum("kPa2/cP")]
          kPa2cP,
        /// <summary>
        /// Pa2Pas property
        /// </summary>
          [XmlEnum("Pa2/(Pa.s)")]
          Pa2Pas,
        /// <summary>
        /// psi2cP property
        /// </summary>
          [XmlEnum("psi2/cP")]
          psi2cP
        }
        /// <summary>
        /// This class represents the LuminousFluxUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminousFluxUom xsd enumeration.")]
        public enum LuminousFluxUom 
        {
        /// <summary>
        /// lm property
        /// </summary>
          lm
        }
        /// <summary>
        /// This class represents the VolumePerTimePerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerPressureUom xsd enumeration.")]
        public enum VolumePerTimePerPressureUom 
        {
        /// <summary>
        /// Item1000ft3psid property
        /// </summary>
          [XmlEnum("1000 ft3/(psi.d)")]
          Item1000ft3psid,
        /// <summary>
        /// bblkPad property
        /// </summary>
          [XmlEnum("bbl/(kPa.d)")]
          bblkPad,
        /// <summary>
        /// bblpsid property
        /// </summary>
          [XmlEnum("bbl/(psi.d)")]
          bblpsid,
        /// <summary>
        /// Lbarmin property
        /// </summary>
          [XmlEnum("L/(bar.min)")]
          Lbarmin,
        /// <summary>
        /// m3bard property
        /// </summary>
          [XmlEnum("m3/(bar.d)")]
          m3bard,
        /// <summary>
        /// m3barh property
        /// </summary>
          [XmlEnum("m3/(bar.h)")]
          m3barh,
        /// <summary>
        /// m3barmin property
        /// </summary>
          [XmlEnum("m3/(bar.min)")]
          m3barmin,
        /// <summary>
        /// m3kPad property
        /// </summary>
          [XmlEnum("m3/(kPa.d)")]
          m3kPad,
        /// <summary>
        /// m3kPah property
        /// </summary>
          [XmlEnum("m3/(kPa.h)")]
          m3kPah,
        /// <summary>
        /// m3Pas property
        /// </summary>
          [XmlEnum("m3/(Pa.s)")]
          m3Pas,
        /// <summary>
        /// m3psid property
        /// </summary>
          [XmlEnum("m3/(psi.d)")]
          m3psid
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerVolumeUom xsd enumeration.")]
        public enum AmountOfSubstancePerVolumeUom 
        {
        /// <summary>
        /// kmolm3 property
        /// </summary>
          [XmlEnum("kmol/m3")]
          kmolm3,
        /// <summary>
        /// lbmolft3 property
        /// </summary>
          [XmlEnum("lbmol/ft3")]
          lbmolft3,
        /// <summary>
        /// lbmolgalUK property
        /// </summary>
          [XmlEnum("lbmol/gal[UK]")]
          lbmolgalUK,
        /// <summary>
        /// lbmolgalUS property
        /// </summary>
          [XmlEnum("lbmol/gal[US]")]
          lbmolgalUS,
        /// <summary>
        /// molm3 property
        /// </summary>
          [XmlEnum("mol/m3")]
          molm3
        }
        /// <summary>
        /// This class represents the EnergyPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerMassUom xsd enumeration.")]
        public enum EnergyPerMassUom 
        {
        /// <summary>
        /// BtuITlbm property
        /// </summary>
          [XmlEnum("Btu[IT]/lbm")]
          BtuITlbm,
        /// <summary>
        /// calthg property
        /// </summary>
          [XmlEnum("cal[th]/g")]
          calthg,
        /// <summary>
        /// calthkg property
        /// </summary>
          [XmlEnum("cal[th]/kg")]
          calthkg,
        /// <summary>
        /// calthlbm property
        /// </summary>
          [XmlEnum("cal[th]/lbm")]
          calthlbm,
        /// <summary>
        /// ergg property
        /// </summary>
          [XmlEnum("erg/g")]
          ergg,
        /// <summary>
        /// ergkg property
        /// </summary>
          [XmlEnum("erg/kg")]
          ergkg,
        /// <summary>
        /// hphlbm property
        /// </summary>
          [XmlEnum("hp.h/lbm")]
          hphlbm,
        /// <summary>
        /// Jg property
        /// </summary>
          [XmlEnum("J/g")]
          Jg,
        /// <summary>
        /// Jkg property
        /// </summary>
          [XmlEnum("J/kg")]
          Jkg,
        /// <summary>
        /// kcalthg property
        /// </summary>
          [XmlEnum("kcal[th]/g")]
          kcalthg,
        /// <summary>
        /// kcalthkg property
        /// </summary>
          [XmlEnum("kcal[th]/kg")]
          kcalthkg,
        /// <summary>
        /// kJkg property
        /// </summary>
          [XmlEnum("kJ/kg")]
          kJkg,
        /// <summary>
        /// kWhkg property
        /// </summary>
          [XmlEnum("kW.h/kg")]
          kWhkg,
        /// <summary>
        /// lbfftlbm property
        /// </summary>
          [XmlEnum("lbf.ft/lbm")]
          lbfftlbm,
        /// <summary>
        /// MJkg property
        /// </summary>
          [XmlEnum("MJ/kg")]
          MJkg,
        /// <summary>
        /// MWhkg property
        /// </summary>
          [XmlEnum("MW.h/kg")]
          MWhkg
        }
        /// <summary>
        /// This class represents the PermittivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermittivityUom xsd enumeration.")]
        public enum PermittivityUom 
        {
        /// <summary>
        /// Fm property
        /// </summary>
          [XmlEnum("F/m")]
          Fm,
        /// <summary>
        /// uFm property
        /// </summary>
          [XmlEnum("uF/m")]
          uFm
        }
        /// <summary>
        /// This class represents the ElectromagneticMomentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectromagneticMomentUom xsd enumeration.")]
        public enum ElectromagneticMomentUom 
        {
        /// <summary>
        /// Am2 property
        /// </summary>
          [XmlEnum("A.m2")]
          Am2
        }
        /// <summary>
        /// This class represents the ThermalInsulanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalInsulanceUom xsd enumeration.")]
        public enum ThermalInsulanceUom 
        {
        /// <summary>
        /// deltaCm2hkcalth property
        /// </summary>
          [XmlEnum("deltaC.m2.h/kcal[th]")]
          deltaCm2hkcalth,
        /// <summary>
        /// deltaFft2hBtuIT property
        /// </summary>
          [XmlEnum("deltaF.ft2.h/Btu[IT]")]
          deltaFft2hBtuIT,
        /// <summary>
        /// deltaKm2kW property
        /// </summary>
          [XmlEnum("deltaK.m2/kW")]
          deltaKm2kW,
        /// <summary>
        /// deltaKm2W property
        /// </summary>
          [XmlEnum("deltaK.m2/W")]
          deltaKm2W
        }
        /// <summary>
        /// This class represents the PowerPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerPerAreaUom xsd enumeration.")]
        public enum PowerPerAreaUom 
        {
        /// <summary>
        /// BtuIThft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2)")]
          BtuIThft2,
        /// <summary>
        /// BtuITsft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2)")]
          BtuITsft2,
        /// <summary>
        /// calthhcm2 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2)")]
          calthhcm2,
        /// <summary>
        /// hpin2 property
        /// </summary>
          [XmlEnum("hp/in2")]
          hpin2,
        /// <summary>
        /// hphydin2 property
        /// </summary>
          [XmlEnum("hp[hyd]/in2")]
          hphydin2,
        /// <summary>
        /// kWcm2 property
        /// </summary>
          [XmlEnum("kW/cm2")]
          kWcm2,
        /// <summary>
        /// kWm2 property
        /// </summary>
          [XmlEnum("kW/m2")]
          kWm2,
        /// <summary>
        /// mWm2 property
        /// </summary>
          [XmlEnum("mW/m2")]
          mWm2,
        /// <summary>
        /// ucalthscm2 property
        /// </summary>
          [XmlEnum("ucal[th]/(s.cm2)")]
          ucalthscm2,
        /// <summary>
        /// Wcm2 property
        /// </summary>
          [XmlEnum("W/cm2")]
          Wcm2,
        /// <summary>
        /// Wm2 property
        /// </summary>
          [XmlEnum("W/m2")]
          Wm2,
        /// <summary>
        /// Wmm2 property
        /// </summary>
          [XmlEnum("W/mm2")]
          Wmm2
        }
        /// <summary>
        /// This class represents the MassPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerAreaUom xsd enumeration.")]
        public enum MassPerAreaUom 
        {
        /// <summary>
        /// Item001lbmft2 property
        /// </summary>
          [XmlEnum("0.01 lbm/ft2")]
          Item001lbmft2,
        /// <summary>
        /// kgm2 property
        /// </summary>
          [XmlEnum("kg/m2")]
          kgm2,
        /// <summary>
        /// lbmft2 property
        /// </summary>
          [XmlEnum("lbm/ft2")]
          lbmft2,
        /// <summary>
        /// Mgm2 property
        /// </summary>
          [XmlEnum("Mg/m2")]
          Mgm2,
        /// <summary>
        /// tonUSft2 property
        /// </summary>
          [XmlEnum("ton[US]/ft2")]
          tonUSft2
        }
        /// <summary>
        /// This class represents the AreaPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerVolumeUom xsd enumeration.")]
        public enum AreaPerVolumeUom 
        {
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// bcm3 property
        /// </summary>
          [XmlEnum("b/cm3")]
          bcm3,
        /// <summary>
        /// cu property
        /// </summary>
          cu,
        /// <summary>
        /// ft2in3 property
        /// </summary>
          [XmlEnum("ft2/in3")]
          ft2in3,
        /// <summary>
        /// m2cm3 property
        /// </summary>
          [XmlEnum("m2/cm3")]
          m2cm3,
        /// <summary>
        /// m2m3 property
        /// </summary>
          [XmlEnum("m2/m3")]
          m2m3
        }
        /// <summary>
        /// This class represents the TemperatureIntervalPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalPerTimeUom xsd enumeration.")]
        public enum TemperatureIntervalPerTimeUom 
        {
        /// <summary>
        /// deltaCh property
        /// </summary>
          [XmlEnum("deltaC/h")]
          deltaCh,
        /// <summary>
        /// deltaCmin property
        /// </summary>
          [XmlEnum("deltaC/min")]
          deltaCmin,
        /// <summary>
        /// deltaCs property
        /// </summary>
          [XmlEnum("deltaC/s")]
          deltaCs,
        /// <summary>
        /// deltaFh property
        /// </summary>
          [XmlEnum("deltaF/h")]
          deltaFh,
        /// <summary>
        /// deltaFmin property
        /// </summary>
          [XmlEnum("deltaF/min")]
          deltaFmin,
        /// <summary>
        /// deltaFs property
        /// </summary>
          [XmlEnum("deltaF/s")]
          deltaFs,
        /// <summary>
        /// deltaKs property
        /// </summary>
          [XmlEnum("deltaK/s")]
          deltaKs
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerAmountOfSubstanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerAmountOfSubstanceUom xsd enumeration.")]
        public enum AmountOfSubstancePerAmountOfSubstanceUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// molar property
        /// </summary>
          [XmlEnum("%[molar]")]
          molar,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// molmol property
        /// </summary>
          [XmlEnum("mol/mol")]
          molmol,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm
        }
        /// <summary>
        /// This class represents the RadianceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the RadianceUom xsd enumeration.")]
        public enum RadianceUom 
        {
        /// <summary>
        /// Wm2sr property
        /// </summary>
          [XmlEnum("W/(m2.sr)")]
          Wm2sr
        }
        /// <summary>
        /// This class represents the HeatFlowRateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the HeatFlowRateUom xsd enumeration.")]
        public enum HeatFlowRateUom 
        {
        /// <summary>
        /// Item1E6BtuITh property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]/h")]
          Item1E6BtuITh,
        /// <summary>
        /// BtuITh property
        /// </summary>
          [XmlEnum("Btu[IT]/h")]
          BtuITh,
        /// <summary>
        /// BtuITmin property
        /// </summary>
          [XmlEnum("Btu[IT]/min")]
          BtuITmin,
        /// <summary>
        /// BtuITs property
        /// </summary>
          [XmlEnum("Btu[IT]/s")]
          BtuITs,
        /// <summary>
        /// calthh property
        /// </summary>
          [XmlEnum("cal[th]/h")]
          calthh,
        /// <summary>
        /// EJa property
        /// </summary>
          [XmlEnum("EJ/a")]
          EJa,
        /// <summary>
        /// erga property
        /// </summary>
          [XmlEnum("erg/a")]
          erga,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// Js property
        /// </summary>
          [XmlEnum("J/s")]
          Js,
        /// <summary>
        /// kcalthh property
        /// </summary>
          [XmlEnum("kcal[th]/h")]
          kcalthh,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// lbfftmin property
        /// </summary>
          [XmlEnum("lbf.ft/min")]
          lbfftmin,
        /// <summary>
        /// lbffts property
        /// </summary>
          [XmlEnum("lbf.ft/s")]
          lbffts,
        /// <summary>
        /// MJa property
        /// </summary>
          [XmlEnum("MJ/a")]
          MJa,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// quada property
        /// </summary>
          [XmlEnum("quad/a")]
          quada,
        /// <summary>
        /// TJa property
        /// </summary>
          [XmlEnum("TJ/a")]
          TJa,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// ucalths property
        /// </summary>
          [XmlEnum("ucal[th]/s")]
          ucalths,
        /// <summary>
        /// uW property
        /// </summary>
          uW,
        /// <summary>
        /// W property
        /// </summary>
          W
        }
        /// <summary>
        /// This class represents the DoseEquivalentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DoseEquivalentUom xsd enumeration.")]
        public enum DoseEquivalentUom 
        {
        /// <summary>
        /// mrem property
        /// </summary>
          mrem,
        /// <summary>
        /// mSv property
        /// </summary>
          mSv,
        /// <summary>
        /// rem property
        /// </summary>
          rem,
        /// <summary>
        /// Sv property
        /// </summary>
          Sv
        }
        /// <summary>
        /// This class represents the ElectricChargePerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargePerMassUom xsd enumeration.")]
        public enum ElectricChargePerMassUom 
        {
        /// <summary>
        /// Askg property
        /// </summary>
          [XmlEnum("A.s/kg")]
          Askg,
        /// <summary>
        /// Cg property
        /// </summary>
          [XmlEnum("C/g")]
          Cg,
        /// <summary>
        /// Ckg property
        /// </summary>
          [XmlEnum("C/kg")]
          Ckg
        }
        /// <summary>
        /// This class represents the MassPerVolumePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumePerLengthUom xsd enumeration.")]
        public enum MassPerVolumePerLengthUom 
        {
        /// <summary>
        /// gcm4 property
        /// </summary>
          [XmlEnum("g/cm4")]
          gcm4,
        /// <summary>
        /// kgdm4 property
        /// </summary>
          [XmlEnum("kg/dm4")]
          kgdm4,
        /// <summary>
        /// kgm4 property
        /// </summary>
          [XmlEnum("kg/m4")]
          kgm4,
        /// <summary>
        /// lbmgalUKft property
        /// </summary>
          [XmlEnum("lbm/(gal[UK].ft)")]
          lbmgalUKft,
        /// <summary>
        /// lbmgalUSft property
        /// </summary>
          [XmlEnum("lbm/(gal[US].ft)")]
          lbmgalUSft,
        /// <summary>
        /// lbmft4 property
        /// </summary>
          [XmlEnum("lbm/ft4")]
          lbmft4,
        /// <summary>
        /// Pas2m3 property
        /// </summary>
          [XmlEnum("Pa.s2/m3")]
          Pas2m3
        }
        /// <summary>
        /// This class represents the MassLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassLengthUom xsd enumeration.")]
        public enum MassLengthUom 
        {
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg.m")]
          kgm,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm.ft")]
          lbmft
        }
        /// <summary>
        /// This class represents the ElectricChargePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargePerVolumeUom xsd enumeration.")]
        public enum ElectricChargePerVolumeUom 
        {
        /// <summary>
        /// Asm3 property
        /// </summary>
          [XmlEnum("A.s/m3")]
          Asm3,
        /// <summary>
        /// Ccm3 property
        /// </summary>
          [XmlEnum("C/cm3")]
          Ccm3,
        /// <summary>
        /// Cm3 property
        /// </summary>
          [XmlEnum("C/m3")]
          Cm3,
        /// <summary>
        /// Cmm3 property
        /// </summary>
          [XmlEnum("C/mm3")]
          Cmm3
        }
        /// <summary>
        /// This class represents the APIGravityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the APIGravityUom xsd enumeration.")]
        public enum APIGravityUom 
        {
        /// <summary>
        /// dAPI property
        /// </summary>
          dAPI
        }
        /// <summary>
        /// This class represents the ReluctanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReluctanceUom xsd enumeration.")]
        public enum ReluctanceUom 
        {
        /// <summary>
        /// Item1H property
        /// </summary>
          [XmlEnum("1/H")]
          Item1H
        }
        /// <summary>
        /// This class represents the LengthPerTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerTemperatureUom xsd enumeration.")]
        public enum LengthPerTemperatureUom 
        {
        /// <summary>
        /// ftdeltaF property
        /// </summary>
          [XmlEnum("ft/deltaF")]
          ftdeltaF,
        /// <summary>
        /// mdeltaK property
        /// </summary>
          [XmlEnum("m/deltaK")]
          mdeltaK
        }
        /// <summary>
        /// This class represents the VolumePerTimePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerLengthUom xsd enumeration.")]
        public enum VolumePerTimePerLengthUom 
        {
        /// <summary>
        /// Item1000ft3dft property
        /// </summary>
          [XmlEnum("1000 ft3/(d.ft)")]
          Item1000ft3dft,
        /// <summary>
        /// Item1000m3dm property
        /// </summary>
          [XmlEnum("1000 m3/(d.m)")]
          Item1000m3dm,
        /// <summary>
        /// Item1000m3hm property
        /// </summary>
          [XmlEnum("1000 m3/(h.m)")]
          Item1000m3hm,
        /// <summary>
        /// bbldft property
        /// </summary>
          [XmlEnum("bbl/(d.ft)")]
          bbldft,
        /// <summary>
        /// ft3dft property
        /// </summary>
          [XmlEnum("ft3/(d.ft)")]
          ft3dft,
        /// <summary>
        /// galUKhft property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft)")]
          galUKhft,
        /// <summary>
        /// galUKhin property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in)")]
          galUKhin,
        /// <summary>
        /// galUKminft property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft)")]
          galUKminft,
        /// <summary>
        /// galUShft property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft)")]
          galUShft,
        /// <summary>
        /// galUShin property
        /// </summary>
          [XmlEnum("gal[US]/(h.in)")]
          galUShin,
        /// <summary>
        /// galUSminft property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft)")]
          galUSminft,
        /// <summary>
        /// m3dm property
        /// </summary>
          [XmlEnum("m3/(d.m)")]
          m3dm,
        /// <summary>
        /// m3hm property
        /// </summary>
          [XmlEnum("m3/(h.m)")]
          m3hm,
        /// <summary>
        /// m3sft property
        /// </summary>
          [XmlEnum("m3/(s.ft)")]
          m3sft,
        /// <summary>
        /// m3sm property
        /// </summary>
          [XmlEnum("m3/(s.m)")]
          m3sm
        }
        /// <summary>
        /// This class represents the EnergyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyUom xsd enumeration.")]
        public enum EnergyUom 
        {
        /// <summary>
        /// Item1E6BtuIT property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]")]
          Item1E6BtuIT,
        /// <summary>
        /// aJ property
        /// </summary>
          aJ,
        /// <summary>
        /// BtuIT property
        /// </summary>
          [XmlEnum("Btu[IT]")]
          BtuIT,
        /// <summary>
        /// Btuth property
        /// </summary>
          [XmlEnum("Btu[th]")]
          Btuth,
        /// <summary>
        /// BtuUK property
        /// </summary>
          [XmlEnum("Btu[UK]")]
          BtuUK,
        /// <summary>
        /// calIT property
        /// </summary>
          [XmlEnum("cal[IT]")]
          calIT,
        /// <summary>
        /// calth property
        /// </summary>
          [XmlEnum("cal[th]")]
          calth,
        /// <summary>
        /// ccalth property
        /// </summary>
          [XmlEnum("ccal[th]")]
          ccalth,
        /// <summary>
        /// ceV property
        /// </summary>
          ceV,
        /// <summary>
        /// cJ property
        /// </summary>
          cJ,
        /// <summary>
        /// dcalth property
        /// </summary>
          [XmlEnum("dcal[th]")]
          dcalth,
        /// <summary>
        /// deV property
        /// </summary>
          deV,
        /// <summary>
        /// dJ property
        /// </summary>
          dJ,
        /// <summary>
        /// Ecalth property
        /// </summary>
          [XmlEnum("Ecal[th]")]
          Ecalth,
        /// <summary>
        /// EeV property
        /// </summary>
          EeV,
        /// <summary>
        /// EJ property
        /// </summary>
          EJ,
        /// <summary>
        /// erg property
        /// </summary>
          erg,
        /// <summary>
        /// eV property
        /// </summary>
          eV,
        /// <summary>
        /// fcalth property
        /// </summary>
          [XmlEnum("fcal[th]")]
          fcalth,
        /// <summary>
        /// feV property
        /// </summary>
          feV,
        /// <summary>
        /// fJ property
        /// </summary>
          fJ,
        /// <summary>
        /// Gcalth property
        /// </summary>
          [XmlEnum("Gcal[th]")]
          Gcalth,
        /// <summary>
        /// GeV property
        /// </summary>
          GeV,
        /// <summary>
        /// GJ property
        /// </summary>
          GJ,
        /// <summary>
        /// GWh property
        /// </summary>
          [XmlEnum("GW.h")]
          GWh,
        /// <summary>
        /// hph property
        /// </summary>
          [XmlEnum("hp.h")]
          hph,
        /// <summary>
        /// hpmetrich property
        /// </summary>
          [XmlEnum("hp[metric].h")]
          hpmetrich,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// kcalth property
        /// </summary>
          [XmlEnum("kcal[th]")]
          kcalth,
        /// <summary>
        /// keV property
        /// </summary>
          keV,
        /// <summary>
        /// kJ property
        /// </summary>
          kJ,
        /// <summary>
        /// kWh property
        /// </summary>
          [XmlEnum("kW.h")]
          kWh,
        /// <summary>
        /// mcalth property
        /// </summary>
          [XmlEnum("mcal[th]")]
          mcalth,
        /// <summary>
        /// Mcalth property
        /// </summary>
          [XmlEnum("Mcal[th]")]
          Mcalth,
        /// <summary>
        /// meV property
        /// </summary>
          meV,
        /// <summary>
        /// MeV property
        /// </summary>
          MeV,
        /// <summary>
        /// MJ property
        /// </summary>
          MJ,
        /// <summary>
        /// mJ property
        /// </summary>
          mJ,
        /// <summary>
        /// MWh property
        /// </summary>
          [XmlEnum("MW.h")]
          MWh,
        /// <summary>
        /// ncalth property
        /// </summary>
          [XmlEnum("ncal[th]")]
          ncalth,
        /// <summary>
        /// neV property
        /// </summary>
          neV,
        /// <summary>
        /// nJ property
        /// </summary>
          nJ,
        /// <summary>
        /// pcalth property
        /// </summary>
          [XmlEnum("pcal[th]")]
          pcalth,
        /// <summary>
        /// peV property
        /// </summary>
          peV,
        /// <summary>
        /// pJ property
        /// </summary>
          pJ,
        /// <summary>
        /// quad property
        /// </summary>
          quad,
        /// <summary>
        /// Tcalth property
        /// </summary>
          [XmlEnum("Tcal[th]")]
          Tcalth,
        /// <summary>
        /// TeV property
        /// </summary>
          TeV,
        /// <summary>
        /// thermEC property
        /// </summary>
          [XmlEnum("therm[EC]")]
          thermEC,
        /// <summary>
        /// thermUK property
        /// </summary>
          [XmlEnum("therm[UK]")]
          thermUK,
        /// <summary>
        /// thermUS property
        /// </summary>
          [XmlEnum("therm[US]")]
          thermUS,
        /// <summary>
        /// TJ property
        /// </summary>
          TJ,
        /// <summary>
        /// TWh property
        /// </summary>
          [XmlEnum("TW.h")]
          TWh,
        /// <summary>
        /// ucalth property
        /// </summary>
          [XmlEnum("ucal[th]")]
          ucalth,
        /// <summary>
        /// ueV property
        /// </summary>
          ueV,
        /// <summary>
        /// uJ property
        /// </summary>
          uJ
        }
        /// <summary>
        /// This class represents the VerticalCoordinateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VerticalCoordinateUom xsd enumeration.")]
        public enum VerticalCoordinateUom 
        {
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftUS property
        /// </summary>
          ftUS,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65
        }
        /// <summary>
        /// This class represents the EnergyPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerVolumeUom xsd enumeration.")]
        public enum EnergyPerVolumeUom 
        {
        /// <summary>
        /// BtuITbbl property
        /// </summary>
          [XmlEnum("Btu[IT]/bbl")]
          BtuITbbl,
        /// <summary>
        /// BtuITft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/ft3")]
          BtuITft3,
        /// <summary>
        /// BtuITgalUK property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[UK]")]
          BtuITgalUK,
        /// <summary>
        /// BtuITgalUS property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[US]")]
          BtuITgalUS,
        /// <summary>
        /// calthcm3 property
        /// </summary>
          [XmlEnum("cal[th]/cm3")]
          calthcm3,
        /// <summary>
        /// calthmL property
        /// </summary>
          [XmlEnum("cal[th]/mL")]
          calthmL,
        /// <summary>
        /// calthmm3 property
        /// </summary>
          [XmlEnum("cal[th]/mm3")]
          calthmm3,
        /// <summary>
        /// ergcm3 property
        /// </summary>
          [XmlEnum("erg/cm3")]
          ergcm3,
        /// <summary>
        /// ergm3 property
        /// </summary>
          [XmlEnum("erg/m3")]
          ergm3,
        /// <summary>
        /// hphbbl property
        /// </summary>
          [XmlEnum("hp.h/bbl")]
          hphbbl,
        /// <summary>
        /// Jdm3 property
        /// </summary>
          [XmlEnum("J/dm3")]
          Jdm3,
        /// <summary>
        /// Jm3 property
        /// </summary>
          [XmlEnum("J/m3")]
          Jm3,
        /// <summary>
        /// kcalthcm3 property
        /// </summary>
          [XmlEnum("kcal[th]/cm3")]
          kcalthcm3,
        /// <summary>
        /// kcalthm3 property
        /// </summary>
          [XmlEnum("kcal[th]/m3")]
          kcalthm3,
        /// <summary>
        /// kJdm3 property
        /// </summary>
          [XmlEnum("kJ/dm3")]
          kJdm3,
        /// <summary>
        /// kJm3 property
        /// </summary>
          [XmlEnum("kJ/m3")]
          kJm3,
        /// <summary>
        /// kWhdm3 property
        /// </summary>
          [XmlEnum("kW.h/dm3")]
          kWhdm3,
        /// <summary>
        /// kWhm3 property
        /// </summary>
          [XmlEnum("kW.h/m3")]
          kWhm3,
        /// <summary>
        /// lbfftbbl property
        /// </summary>
          [XmlEnum("lbf.ft/bbl")]
          lbfftbbl,
        /// <summary>
        /// lbfftgalUS property
        /// </summary>
          [XmlEnum("lbf.ft/gal[US]")]
          lbfftgalUS,
        /// <summary>
        /// MJm3 property
        /// </summary>
          [XmlEnum("MJ/m3")]
          MJm3,
        /// <summary>
        /// MWhm3 property
        /// </summary>
          [XmlEnum("MW.h/m3")]
          MWhm3,
        /// <summary>
        /// tonfUSmibbl property
        /// </summary>
          [XmlEnum("tonf[US].mi/bbl")]
          tonfUSmibbl
        }
        /// <summary>
        /// This class represents the MagneticPermeabilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticPermeabilityUom xsd enumeration.")]
        public enum MagneticPermeabilityUom 
        {
        /// <summary>
        /// Hm property
        /// </summary>
          [XmlEnum("H/m")]
          Hm,
        /// <summary>
        /// uHm property
        /// </summary>
          [XmlEnum("uH/m")]
          uHm
        }
        /// <summary>
        /// This class represents the ReciprocalMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalMassUom xsd enumeration.")]
        public enum ReciprocalMassUom 
        {
        /// <summary>
        /// Item1g property
        /// </summary>
          [XmlEnum("1/g")]
          Item1g,
        /// <summary>
        /// Item1kg property
        /// </summary>
          [XmlEnum("1/kg")]
          Item1kg,
        /// <summary>
        /// Item1lbm property
        /// </summary>
          [XmlEnum("1/lbm")]
          Item1lbm
        }
        /// <summary>
        /// This class represents the PotentialDifferencePerPowerDropUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PotentialDifferencePerPowerDropUom xsd enumeration.")]
        public enum PotentialDifferencePerPowerDropUom 
        {
        /// <summary>
        /// VB property
        /// </summary>
          [XmlEnum("V/B")]
          VB,
        /// <summary>
        /// VdB property
        /// </summary>
          [XmlEnum("V/dB")]
          VdB
        }
        /// <summary>
        /// This class represents the AreaPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerTimeUom xsd enumeration.")]
        public enum AreaPerTimeUom 
        {
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// m2d property
        /// </summary>
          [XmlEnum("m2/d")]
          m2d,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s
        }
        /// <summary>
        /// This class represents the HeatCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the HeatCapacityUom xsd enumeration.")]
        public enum HeatCapacityUom 
        {
        /// <summary>
        /// JdeltaK property
        /// </summary>
          [XmlEnum("J/deltaK")]
          JdeltaK
        }
        /// <summary>
        /// This class represents the ThermodynamicTemperaturePerThermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermodynamicTemperaturePerThermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperaturePerThermodynamicTemperatureUom 
        {
        /// <summary>
        /// degCdegC property
        /// </summary>
          [XmlEnum("degC/degC")]
          degCdegC,
        /// <summary>
        /// degFdegF property
        /// </summary>
          [XmlEnum("degF/degF")]
          degFdegF,
        /// <summary>
        /// degRdegR property
        /// </summary>
          [XmlEnum("degR/degR")]
          degRdegR,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// KK property
        /// </summary>
          [XmlEnum("K/K")]
          KK
        }
        /// <summary>
        /// This class represents the MolarEnergyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolarEnergyUom xsd enumeration.")]
        public enum MolarEnergyUom 
        {
        /// <summary>
        /// BtuITlbmol property
        /// </summary>
          [XmlEnum("Btu[IT]/lbmol")]
          BtuITlbmol,
        /// <summary>
        /// Jmol property
        /// </summary>
          [XmlEnum("J/mol")]
          Jmol,
        /// <summary>
        /// kcalthmol property
        /// </summary>
          [XmlEnum("kcal[th]/mol")]
          kcalthmol,
        /// <summary>
        /// kJkmol property
        /// </summary>
          [XmlEnum("kJ/kmol")]
          kJkmol,
        /// <summary>
        /// MJkmol property
        /// </summary>
          [XmlEnum("MJ/kmol")]
          MJkmol
        }
        /// <summary>
        /// This class represents the ElectricConductanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricConductanceUom xsd enumeration.")]
        public enum ElectricConductanceUom 
        {
        /// <summary>
        /// cS property
        /// </summary>
          cS,
        /// <summary>
        /// dS property
        /// </summary>
          dS,
        /// <summary>
        /// ES property
        /// </summary>
          ES,
        /// <summary>
        /// fS property
        /// </summary>
          fS,
        /// <summary>
        /// GS property
        /// </summary>
          GS,
        /// <summary>
        /// kS property
        /// </summary>
          kS,
        /// <summary>
        /// mS property
        /// </summary>
          mS,
        /// <summary>
        /// MS property
        /// </summary>
          MS,
        /// <summary>
        /// nS property
        /// </summary>
          nS,
        /// <summary>
        /// pS property
        /// </summary>
          pS,
        /// <summary>
        /// S property
        /// </summary>
          S,
        /// <summary>
        /// TS property
        /// </summary>
          TS,
        /// <summary>
        /// uS property
        /// </summary>
          uS
        }
        /// <summary>
        /// This class represents the MomentumUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MomentumUom xsd enumeration.")]
        public enum MomentumUom 
        {
        /// <summary>
        /// kgms property
        /// </summary>
          [XmlEnum("kg.m/s")]
          kgms,
        /// <summary>
        /// lbmfts property
        /// </summary>
          [XmlEnum("lbm.ft/s")]
          lbmfts
        }
        /// <summary>
        /// This class represents the MassPerTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerTimePerAreaUom xsd enumeration.")]
        public enum MassPerTimePerAreaUom 
        {
        /// <summary>
        /// gftcm3s property
        /// </summary>
          [XmlEnum("g.ft/(cm3.s)")]
          gftcm3s,
        /// <summary>
        /// gmcm3s property
        /// </summary>
          [XmlEnum("g.m/(cm3.s)")]
          gmcm3s,
        /// <summary>
        /// kgm2s property
        /// </summary>
          [XmlEnum("kg/(m2.s)")]
          kgm2s,
        /// <summary>
        /// kPasm property
        /// </summary>
          [XmlEnum("kPa.s/m")]
          kPasm,
        /// <summary>
        /// lbmft2h property
        /// </summary>
          [XmlEnum("lbm/(ft2.h)")]
          lbmft2h,
        /// <summary>
        /// lbmft2s property
        /// </summary>
          [XmlEnum("lbm/(ft2.s)")]
          lbmft2s,
        /// <summary>
        /// MPasm property
        /// </summary>
          [XmlEnum("MPa.s/m")]
          MPasm
        }
        /// <summary>
        /// This class represents the PowerPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerPerVolumeUom xsd enumeration.")]
        public enum PowerPerVolumeUom 
        {
        /// <summary>
        /// BtuIThft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3)")]
          BtuIThft3,
        /// <summary>
        /// BtuITsft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3)")]
          BtuITsft3,
        /// <summary>
        /// calthhcm3 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm3)")]
          calthhcm3,
        /// <summary>
        /// calthscm3 property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm3)")]
          calthscm3,
        /// <summary>
        /// hpft3 property
        /// </summary>
          [XmlEnum("hp/ft3")]
          hpft3,
        /// <summary>
        /// kWm3 property
        /// </summary>
          [XmlEnum("kW/m3")]
          kWm3,
        /// <summary>
        /// uWm3 property
        /// </summary>
          [XmlEnum("uW/m3")]
          uWm3,
        /// <summary>
        /// Wm3 property
        /// </summary>
          [XmlEnum("W/m3")]
          Wm3
        }
        /// <summary>
        /// This class represents the FrequencyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the FrequencyUom xsd enumeration.")]
        public enum FrequencyUom 
        {
        /// <summary>
        /// cHz property
        /// </summary>
          cHz,
        /// <summary>
        /// dHz property
        /// </summary>
          dHz,
        /// <summary>
        /// EHz property
        /// </summary>
          EHz,
        /// <summary>
        /// fHz property
        /// </summary>
          fHz,
        /// <summary>
        /// GHz property
        /// </summary>
          GHz,
        /// <summary>
        /// Hz property
        /// </summary>
          Hz,
        /// <summary>
        /// kHz property
        /// </summary>
          kHz,
        /// <summary>
        /// mHz property
        /// </summary>
          mHz,
        /// <summary>
        /// MHz property
        /// </summary>
          MHz,
        /// <summary>
        /// nHz property
        /// </summary>
          nHz,
        /// <summary>
        /// pHz property
        /// </summary>
          pHz,
        /// <summary>
        /// THz property
        /// </summary>
          THz,
        /// <summary>
        /// uHz property
        /// </summary>
          uHz
        }
        /// <summary>
        /// This class represents the LuminousIntensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminousIntensityUom xsd enumeration.")]
        public enum LuminousIntensityUom 
        {
        /// <summary>
        /// cd property
        /// </summary>
          cd,
        /// <summary>
        /// kcd property
        /// </summary>
          kcd
        }
        /// <summary>
        /// This class represents the AbsorbedDoseUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AbsorbedDoseUom xsd enumeration.")]
        public enum AbsorbedDoseUom 
        {
        /// <summary>
        /// cGy property
        /// </summary>
          cGy,
        /// <summary>
        /// crd property
        /// </summary>
          crd,
        /// <summary>
        /// dGy property
        /// </summary>
          dGy,
        /// <summary>
        /// drd property
        /// </summary>
          drd,
        /// <summary>
        /// EGy property
        /// </summary>
          EGy,
        /// <summary>
        /// Erd property
        /// </summary>
          Erd,
        /// <summary>
        /// fGy property
        /// </summary>
          fGy,
        /// <summary>
        /// frd property
        /// </summary>
          frd,
        /// <summary>
        /// GGy property
        /// </summary>
          GGy,
        /// <summary>
        /// Grd property
        /// </summary>
          Grd,
        /// <summary>
        /// Gy property
        /// </summary>
          Gy,
        /// <summary>
        /// kGy property
        /// </summary>
          kGy,
        /// <summary>
        /// krd property
        /// </summary>
          krd,
        /// <summary>
        /// mGy property
        /// </summary>
          mGy,
        /// <summary>
        /// MGy property
        /// </summary>
          MGy,
        /// <summary>
        /// Mrd property
        /// </summary>
          Mrd,
        /// <summary>
        /// mrd property
        /// </summary>
          mrd,
        /// <summary>
        /// nGy property
        /// </summary>
          nGy,
        /// <summary>
        /// nrd property
        /// </summary>
          nrd,
        /// <summary>
        /// pGy property
        /// </summary>
          pGy,
        /// <summary>
        /// prd property
        /// </summary>
          prd,
        /// <summary>
        /// rd property
        /// </summary>
          rd,
        /// <summary>
        /// TGy property
        /// </summary>
          TGy,
        /// <summary>
        /// Trd property
        /// </summary>
          Trd,
        /// <summary>
        /// uGy property
        /// </summary>
          uGy,
        /// <summary>
        /// urd property
        /// </summary>
          urd
        }
        /// <summary>
        /// This class represents the TimePerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerMassUom xsd enumeration.")]
        public enum TimePerMassUom 
        {
        /// <summary>
        /// skg property
        /// </summary>
          [XmlEnum("s/kg")]
          skg
        }
        /// <summary>
        /// This class represents the VolumetricHeatTransferCoefficientUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumetricHeatTransferCoefficientUom xsd enumeration.")]
        public enum VolumetricHeatTransferCoefficientUom 
        {
        /// <summary>
        /// BtuIThft3deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3.deltaF)")]
          BtuIThft3deltaF,
        /// <summary>
        /// BtuITsft3deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3.deltaF)")]
          BtuITsft3deltaF,
        /// <summary>
        /// kWm3deltaK property
        /// </summary>
          [XmlEnum("kW/(m3.deltaK)")]
          kWm3deltaK,
        /// <summary>
        /// Wm3deltaK property
        /// </summary>
          [XmlEnum("W/(m3.deltaK)")]
          Wm3deltaK
        }
        /// <summary>
        /// This class represents the NormalizedPowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the NormalizedPowerUom xsd enumeration.")]
        public enum NormalizedPowerUom 
        {
        /// <summary>
        /// BW property
        /// </summary>
          [XmlEnum("B.W")]
          BW,
        /// <summary>
        /// dBmW property
        /// </summary>
          [XmlEnum("dB.mW")]
          dBmW,
        /// <summary>
        /// dBMW property
        /// </summary>
          [XmlEnum("dB.MW")]
          dBMW,
        /// <summary>
        /// dBW property
        /// </summary>
          [XmlEnum("dB.W")]
          dBW
        }
        /// <summary>
        /// This class represents the EnergyLengthPerTimeAreaTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyLengthPerTimeAreaTemperatureUom xsd enumeration.")]
        public enum EnergyLengthPerTimeAreaTemperatureUom 
        {
        /// <summary>
        /// BtuITinhft2deltaF property
        /// </summary>
          [XmlEnum("Btu[IT].in/(h.ft2.deltaF)")]
          BtuITinhft2deltaF,
        /// <summary>
        /// Jmsm2deltaK property
        /// </summary>
          [XmlEnum("J.m/(s.m2.deltaK)")]
          Jmsm2deltaK,
        /// <summary>
        /// kJmhm2deltaK property
        /// </summary>
          [XmlEnum("kJ.m/(h.m2.deltaK)")]
          kJmhm2deltaK,
        /// <summary>
        /// WmdeltaK property
        /// </summary>
          [XmlEnum("W/(m.deltaK)")]
          WmdeltaK
        }
        /// <summary>
        /// This class represents the PressureTimePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureTimePerVolumeUom xsd enumeration.")]
        public enum PressureTimePerVolumeUom 
        {
        /// <summary>
        /// Pasm3 property
        /// </summary>
          [XmlEnum("Pa.s/m3")]
          Pasm3,
        /// <summary>
        /// psidbbl property
        /// </summary>
          [XmlEnum("psi.d/bbl")]
          psidbbl
        }
        /// <summary>
        /// This class represents the AnglePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AnglePerVolumeUom xsd enumeration.")]
        public enum AnglePerVolumeUom 
        {
        /// <summary>
        /// radft3 property
        /// </summary>
          [XmlEnum("rad/ft3")]
          radft3,
        /// <summary>
        /// radm3 property
        /// </summary>
          [XmlEnum("rad/m3")]
          radm3
        }
        /// <summary>
        /// This class represents the DiffusionCoefficientUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DiffusionCoefficientUom xsd enumeration.")]
        public enum DiffusionCoefficientUom 
        {
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s
        }
        /// <summary>
        /// This class represents the TimePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerTimeUom xsd enumeration.")]
        public enum TimePerTimeUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// mss property
        /// </summary>
          [XmlEnum("ms/s")]
          mss,
        /// <summary>
        /// ss property
        /// </summary>
          [XmlEnum("s/s")]
          ss
        }
        /// <summary>
        /// This class represents the PressurePerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressurePerPressureUom xsd enumeration.")]
        public enum PressurePerPressureUom 
        {
        /// <summary>
        /// atmatm property
        /// </summary>
          [XmlEnum("atm/atm")]
          atmatm,
        /// <summary>
        /// barbar property
        /// </summary>
          [XmlEnum("bar/bar")]
          barbar,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// kPakPa property
        /// </summary>
          [XmlEnum("kPa/kPa")]
          kPakPa,
        /// <summary>
        /// MPaMPa property
        /// </summary>
          [XmlEnum("MPa/MPa")]
          MPaMPa,
        /// <summary>
        /// PaPa property
        /// </summary>
          [XmlEnum("Pa/Pa")]
          PaPa,
        /// <summary>
        /// psipsi property
        /// </summary>
          [XmlEnum("psi/psi")]
          psipsi
        }
        /// <summary>
        /// This class represents the EnergyPerMassPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerMassPerTimeUom xsd enumeration.")]
        public enum EnergyPerMassPerTimeUom 
        {
        /// <summary>
        /// mremh property
        /// </summary>
          [XmlEnum("mrem/h")]
          mremh,
        /// <summary>
        /// mSvh property
        /// </summary>
          [XmlEnum("mSv/h")]
          mSvh,
        /// <summary>
        /// remh property
        /// </summary>
          [XmlEnum("rem/h")]
          remh,
        /// <summary>
        /// Svh property
        /// </summary>
          [XmlEnum("Sv/h")]
          Svh,
        /// <summary>
        /// Svs property
        /// </summary>
          [XmlEnum("Sv/s")]
          Svs
        }
        /// <summary>
        /// This class represents the TemperatureIntervalPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalPerLengthUom xsd enumeration.")]
        public enum TemperatureIntervalPerLengthUom 
        {
        /// <summary>
        /// Item001deltaFft property
        /// </summary>
          [XmlEnum("0.01 deltaF/ft")]
          Item001deltaFft,
        /// <summary>
        /// deltaCft property
        /// </summary>
          [XmlEnum("deltaC/ft")]
          deltaCft,
        /// <summary>
        /// deltaChm property
        /// </summary>
          [XmlEnum("deltaC/hm")]
          deltaChm,
        /// <summary>
        /// deltaCkm property
        /// </summary>
          [XmlEnum("deltaC/km")]
          deltaCkm,
        /// <summary>
        /// deltaCm property
        /// </summary>
          [XmlEnum("deltaC/m")]
          deltaCm,
        /// <summary>
        /// deltaFft property
        /// </summary>
          [XmlEnum("deltaF/ft")]
          deltaFft,
        /// <summary>
        /// deltaFm property
        /// </summary>
          [XmlEnum("deltaF/m")]
          deltaFm,
        /// <summary>
        /// deltaKkm property
        /// </summary>
          [XmlEnum("deltaK/km")]
          deltaKkm,
        /// <summary>
        /// deltaKm property
        /// </summary>
          [XmlEnum("deltaK/m")]
          deltaKm
        }
        /// <summary>
        /// This class represents the AttenuationPerFrequencyIntervalUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AttenuationPerFrequencyIntervalUom xsd enumeration.")]
        public enum AttenuationPerFrequencyIntervalUom 
        {
        /// <summary>
        /// BO property
        /// </summary>
          [XmlEnum("B/O")]
          BO,
        /// <summary>
        /// dBO property
        /// </summary>
          [XmlEnum("dB/O")]
          dBO
        }
        /// <summary>
        /// This class represents the ElectricResistanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricResistanceUom xsd enumeration.")]
        public enum ElectricResistanceUom 
        {
        /// <summary>
        /// cohm property
        /// </summary>
          cohm,
        /// <summary>
        /// dohm property
        /// </summary>
          dohm,
        /// <summary>
        /// Eohm property
        /// </summary>
          Eohm,
        /// <summary>
        /// fohm property
        /// </summary>
          fohm,
        /// <summary>
        /// Gohm property
        /// </summary>
          Gohm,
        /// <summary>
        /// kohm property
        /// </summary>
          kohm,
        /// <summary>
        /// Mohm property
        /// </summary>
          Mohm,
        /// <summary>
        /// mohm property
        /// </summary>
          mohm,
        /// <summary>
        /// nohm property
        /// </summary>
          nohm,
        /// <summary>
        /// ohm property
        /// </summary>
          ohm,
        /// <summary>
        /// pohm property
        /// </summary>
          pohm,
        /// <summary>
        /// Tohm property
        /// </summary>
          Tohm,
        /// <summary>
        /// uohm property
        /// </summary>
          uohm
        }
        /// <summary>
        /// This class represents the ReciprocalVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalVolumeUom xsd enumeration.")]
        public enum ReciprocalVolumeUom 
        {
        /// <summary>
        /// Item1bbl property
        /// </summary>
          [XmlEnum("1/bbl")]
          Item1bbl,
        /// <summary>
        /// Item1ft3 property
        /// </summary>
          [XmlEnum("1/ft3")]
          Item1ft3,
        /// <summary>
        /// Item1galUK property
        /// </summary>
          [XmlEnum("1/gal[UK]")]
          Item1galUK,
        /// <summary>
        /// Item1galUS property
        /// </summary>
          [XmlEnum("1/gal[US]")]
          Item1galUS,
        /// <summary>
        /// Item1L property
        /// </summary>
          [XmlEnum("1/L")]
          Item1L,
        /// <summary>
        /// Item1m3 property
        /// </summary>
          [XmlEnum("1/m3")]
          Item1m3
        }
        /// <summary>
        /// This class represents the TimePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerVolumeUom xsd enumeration.")]
        public enum TimePerVolumeUom 
        {
        /// <summary>
        /// Item0001dft3 property
        /// </summary>
          [XmlEnum("0.001 d/ft3")]
          Item0001dft3,
        /// <summary>
        /// dbbl property
        /// </summary>
          [XmlEnum("d/bbl")]
          dbbl,
        /// <summary>
        /// dft3 property
        /// </summary>
          [XmlEnum("d/ft3")]
          dft3,
        /// <summary>
        /// dm3 property
        /// </summary>
          [XmlEnum("d/m3")]
          dm3,
        /// <summary>
        /// hft3 property
        /// </summary>
          [XmlEnum("h/ft3")]
          hft3,
        /// <summary>
        /// hm3 property
        /// </summary>
          [XmlEnum("h/m3")]
          hm3,
        /// <summary>
        /// sft3 property
        /// </summary>
          [XmlEnum("s/ft3")]
          sft3,
        /// <summary>
        /// sL property
        /// </summary>
          [XmlEnum("s/L")]
          sL,
        /// <summary>
        /// sm3 property
        /// </summary>
          [XmlEnum("s/m3")]
          sm3,
        /// <summary>
        /// sqtUK property
        /// </summary>
          [XmlEnum("s/qt[UK]")]
          sqtUK,
        /// <summary>
        /// sqtUS property
        /// </summary>
          [XmlEnum("s/qt[US]")]
          sqtUS
        }
        /// <summary>
        /// This class represents the EnergyLengthPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyLengthPerAreaUom xsd enumeration.")]
        public enum EnergyLengthPerAreaUom 
        {
        /// <summary>
        /// Jmm2 property
        /// </summary>
          [XmlEnum("J.m/m2")]
          Jmm2,
        /// <summary>
        /// kcalthmcm2 property
        /// </summary>
          [XmlEnum("kcal[th].m/cm2")]
          kcalthmcm2
        }
        /// <summary>
        /// This class represents the ElectricResistancePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricResistancePerLengthUom xsd enumeration.")]
        public enum ElectricResistancePerLengthUom 
        {
        /// <summary>
        /// ohmm property
        /// </summary>
          [XmlEnum("ohm/m")]
          ohmm,
        /// <summary>
        /// uohmft property
        /// </summary>
          [XmlEnum("uohm/ft")]
          uohmft,
        /// <summary>
        /// uohmm property
        /// </summary>
          [XmlEnum("uohm/m")]
          uohmm
        }
        /// <summary>
        /// This class represents the ReciprocalPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalPressureUom xsd enumeration.")]
        public enum ReciprocalPressureUom 
        {
        /// <summary>
        /// Item1bar property
        /// </summary>
          [XmlEnum("1/bar")]
          Item1bar,
        /// <summary>
        /// Item1kPa property
        /// </summary>
          [XmlEnum("1/kPa")]
          Item1kPa,
        /// <summary>
        /// Item1Pa property
        /// </summary>
          [XmlEnum("1/Pa")]
          Item1Pa,
        /// <summary>
        /// Item1pPa property
        /// </summary>
          [XmlEnum("1/pPa")]
          Item1pPa,
        /// <summary>
        /// Item1psi property
        /// </summary>
          [XmlEnum("1/psi")]
          Item1psi,
        /// <summary>
        /// Item1upsi property
        /// </summary>
          [XmlEnum("1/upsi")]
          Item1upsi
        }
        /// <summary>
        /// This class represents the LightExposureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LightExposureUom xsd enumeration.")]
        public enum LightExposureUom 
        {
        /// <summary>
        /// footcandles property
        /// </summary>
          [XmlEnum("footcandle.s")]
          footcandles,
        /// <summary>
        /// lxs property
        /// </summary>
          [XmlEnum("lx.s")]
          lxs
        }
        /// <summary>
        /// This class represents the EnergyPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerAreaUom xsd enumeration.")]
        public enum EnergyPerAreaUom 
        {
        /// <summary>
        /// ergcm2 property
        /// </summary>
          [XmlEnum("erg/cm2")]
          ergcm2,
        /// <summary>
        /// Jcm2 property
        /// </summary>
          [XmlEnum("J/cm2")]
          Jcm2,
        /// <summary>
        /// Jm2 property
        /// </summary>
          [XmlEnum("J/m2")]
          Jm2,
        /// <summary>
        /// kgfmcm2 property
        /// </summary>
          [XmlEnum("kgf.m/cm2")]
          kgfmcm2,
        /// <summary>
        /// lbfftin2 property
        /// </summary>
          [XmlEnum("lbf.ft/in2")]
          lbfftin2,
        /// <summary>
        /// mJcm2 property
        /// </summary>
          [XmlEnum("mJ/cm2")]
          mJcm2,
        /// <summary>
        /// mJm2 property
        /// </summary>
          [XmlEnum("mJ/m2")]
          mJm2,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm
        }
        /// <summary>
        /// This class represents the MagneticDipoleMomentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticDipoleMomentUom xsd enumeration.")]
        public enum MagneticDipoleMomentUom 
        {
        /// <summary>
        /// Wbm property
        /// </summary>
          [XmlEnum("Wb.m")]
          Wbm
        }
        /// <summary>
        /// This class represents the ReferencePressureKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReferencePressureKind xsd enumeration.")]
        public enum ReferencePressureKind 
        {
        /// <summary>
        /// absolute property
        /// </summary>
          absolute,
        /// <summary>
        /// ambient property
        /// </summary>
          ambient,
        /// <summary>
        /// legal property
        /// </summary>
          legal
        }
        /// <summary>
        /// This class represents the ElevCodeEnum xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the ElevCodeEnum xsd enumeration.")]
        public enum ElevCodeEnum 
        {
        /// <summary>
        /// Casing flange: A flange affixed to the top of the casing string used to attach production equipment.
        /// </summary>
          CF,
        /// <summary>
        /// Crown valve.
        /// </summary>
          CV,
        /// <summary>
        /// Derrick floor.
        /// </summary>
          DF,
        /// <summary>
        /// Ground level.
        /// </summary>
          GL,
        /// <summary>
        /// Kelly bushing.
        /// </summary>
          KB,
        /// <summary>
        /// Rotary bushing.
        /// </summary>
          RB,
        /// <summary>
        /// Rotary table.
        /// </summary>
          RT,
        /// <summary>
        /// Sea floor.
        /// </summary>
          SF,
        /// <summary>
        /// Lowest astronomical tide (LAT). The lowest tide level over the duration of the National Tidal Datum Epoch (19 years).
        /// </summary>
          LAT,
        /// <summary>
        /// Mean sea level: a tidal datum. The arithmetic mean of hourly heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          SL,
        /// <summary>
        /// Mean higher high water: a tidal datum. The average of the higher high water height of each tidal day observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHHW,
        /// <summary>
        /// Mean high water: a tidal datum. The average of all the high water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHW,
        /// <summary>
        /// Mean lower low water: a tidal datum. The average of the lower low water height of each tidal day observed over the National Tidal Datum Epoch (19 years ).
        /// </summary>
          MLLW,
        /// <summary>
        /// Mean low water: a tidal datum. The average of all the low water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MLW,
        /// <summary>
        /// Mean tide level: a tidal datum. The arithmetic mean of mean high water and mean low water. Same as the half-tide level.
        /// </summary>
          MTL,
        /// <summary>
        /// Kickoff point. 
        /// </summary>
          KO,
        /// <summary>
        /// The value is not known. Avoid using this value. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the EquipmentType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
        [Description("This class represents the EquipmentType xsd enumeration.")]
        public enum EquipmentType 
        {
        /// <summary>
        /// bridgeplug property
        /// </summary>
          [XmlEnum("bridge plug")]
          bridgeplug,
        /// <summary>
        /// bullplug property
        /// </summary>
          [XmlEnum("bull plug")]
          bullplug,
        /// <summary>
        /// capillarytubing property
        /// </summary>
          [XmlEnum("capillary tubing")]
          capillarytubing,
        /// <summary>
        /// casingcrossover property
        /// </summary>
          [XmlEnum("casing crossover")]
          casingcrossover,
        /// <summary>
        /// casinghanger property
        /// </summary>
          [XmlEnum("casing hanger")]
          casinghanger,
        /// <summary>
        /// casinghead property
        /// </summary>
          [XmlEnum("casing head")]
          casinghead,
        /// <summary>
        /// casinglinerexpandable property
        /// </summary>
          [XmlEnum("casing liner-expandable")]
          casinglinerexpandable,
        /// <summary>
        /// casingshoe property
        /// </summary>
          [XmlEnum("casing shoe")]
          casingshoe,
        /// <summary>
        /// casingspool property
        /// </summary>
          [XmlEnum("casing spool")]
          casingspool,
        /// <summary>
        /// casingcasingliner property
        /// </summary>
          [XmlEnum("casing/casing liner")]
          casingcasingliner,
        /// <summary>
        /// cementbehindcasing property
        /// </summary>
          [XmlEnum("cement (behind casing)")]
          cementbehindcasing,
        /// <summary>
        /// cementbasket property
        /// </summary>
          [XmlEnum("cement basket")]
          cementbasket,
        /// <summary>
        /// cementretainer property
        /// </summary>
          [XmlEnum("cement retainer")]
          cementretainer,
        /// <summary>
        /// cementsqueeze property
        /// </summary>
          [XmlEnum("cement squeeze")]
          cementsqueeze,
        /// <summary>
        /// cementstagetool property
        /// </summary>
          [XmlEnum("cement stage tool")]
          cementstagetool,
        /// <summary>
        /// chemicalinjectionmandrel property
        /// </summary>
          [XmlEnum("chemical injection mandrel")]
          chemicalinjectionmandrel,
        /// <summary>
        /// chemicalinjectionvalve property
        /// </summary>
          [XmlEnum("chemical injection valve")]
          chemicalinjectionvalve,
        /// <summary>
        /// corrosioncouponcarrier property
        /// </summary>
          [XmlEnum("corrosion coupon carrier")]
          corrosioncouponcarrier,
        /// <summary>
        /// diptube property
        /// </summary>
          [XmlEnum("dip tube")]
          diptube,
        /// <summary>
        /// downholechoke property
        /// </summary>
          [XmlEnum("downhole choke")]
          downholechoke,
        /// <summary>
        /// downholesensor property
        /// </summary>
          [XmlEnum("downhole sensor")]
          downholesensor,
        /// <summary>
        /// ESPassembly property
        /// </summary>
          [XmlEnum("ESP assembly")]
          ESPassembly,
        /// <summary>
        /// ESPboltondischarge property
        /// </summary>
          [XmlEnum("ESP bolt on discharge")]
          ESPboltondischarge,
        /// <summary>
        /// ESPboltonintake property
        /// </summary>
          [XmlEnum("ESP bolt on intake")]
          ESPboltonintake,
        /// <summary>
        /// ESPboltonmotorbase property
        /// </summary>
          [XmlEnum("ESP bolt on motor base")]
          ESPboltonmotorbase,
        /// <summary>
        /// ESPboltonmotorhead property
        /// </summary>
          [XmlEnum("ESP bolt on motor head")]
          ESPboltonmotorhead,
        /// <summary>
        /// ESPcable property
        /// </summary>
          [XmlEnum("ESP cable")]
          ESPcable,
        /// <summary>
        /// ESPgashandler property
        /// </summary>
          [XmlEnum("ESP gas handler")]
          ESPgashandler,
        /// <summary>
        /// ESPgasseparator property
        /// </summary>
          [XmlEnum("ESP gas separator")]
          ESPgasseparator,
        /// <summary>
        /// ESPlowerpigtail property
        /// </summary>
          [XmlEnum("ESP lower pigtail")]
          ESPlowerpigtail,
        /// <summary>
        /// ESPmotor property
        /// </summary>
          [XmlEnum("ESP motor")]
          ESPmotor,
        /// <summary>
        /// ESPmotorbasecentralizer property
        /// </summary>
          [XmlEnum("ESP motor base centralizer")]
          ESPmotorbasecentralizer,
        /// <summary>
        /// ESPmotorflatcable property
        /// </summary>
          [XmlEnum("ESP motor flat cable")]
          ESPmotorflatcable,
        /// <summary>
        /// ESPmotorshroud property
        /// </summary>
          [XmlEnum("ESP motor shroud")]
          ESPmotorshroud,
        /// <summary>
        /// ESPpromotor property
        /// </summary>
          [XmlEnum("ESP promotor")]
          ESPpromotor,
        /// <summary>
        /// ESPpump property
        /// </summary>
          [XmlEnum("ESP pump")]
          ESPpump,
        /// <summary>
        /// ESPpumpdischargesensorsub property
        /// </summary>
          [XmlEnum("ESP pump discharge sensor sub")]
          ESPpumpdischargesensorsub,
        /// <summary>
        /// ESPseal property
        /// </summary>
          [XmlEnum("ESP seal")]
          ESPseal,
        /// <summary>
        /// expansionjoint property
        /// </summary>
          [XmlEnum("expansion joint")]
          expansionjoint,
        /// <summary>
        /// externalcementingport property
        /// </summary>
          [XmlEnum("external cementing port")]
          externalcementingport,
        /// <summary>
        /// fill property
        /// </summary>
          fill,
        /// <summary>
        /// fish property
        /// </summary>
          fish,
        /// <summary>
        /// floatcollar property
        /// </summary>
          [XmlEnum("float collar")]
          floatcollar,
        /// <summary>
        /// floatshoeguideshoe property
        /// </summary>
          [XmlEnum("float shoe/guide shoe")]
          floatshoeguideshoe,
        /// <summary>
        /// gasanchor property
        /// </summary>
          [XmlEnum("gas anchor")]
          gasanchor,
        /// <summary>
        /// gasliftmandrel property
        /// </summary>
          [XmlEnum("gas lift mandrel")]
          gasliftmandrel,
        /// <summary>
        /// gasliftvalve property
        /// </summary>
          [XmlEnum("gas lift valve")]
          gasliftvalve,
        /// <summary>
        /// gravelpackscreen property
        /// </summary>
          [XmlEnum("gravel pack screen")]
          gravelpackscreen,
        /// <summary>
        /// hydraulicpump property
        /// </summary>
          [XmlEnum("hydraulic pump")]
          hydraulicpump,
        /// <summary>
        /// injectionmandrel property
        /// </summary>
          [XmlEnum("injection mandrel")]
          injectionmandrel,
        /// <summary>
        /// injectionvalve property
        /// </summary>
          [XmlEnum("injection valve")]
          injectionvalve,
        /// <summary>
        /// junkinwellbore property
        /// </summary>
          [XmlEnum("junk in wellbore")]
          junkinwellbore,
        /// <summary>
        /// landingcollar property
        /// </summary>
          [XmlEnum("landing collar")]
          landingcollar,
        /// <summary>
        /// linerentryguide property
        /// </summary>
          [XmlEnum("liner entry guide")]
          linerentryguide,
        /// <summary>
        /// linerhanger property
        /// </summary>
          [XmlEnum("liner hanger")]
          linerhanger,
        /// <summary>
        /// muleshoe property
        /// </summary>
          [XmlEnum("mule shoe")]
          muleshoe,
        /// <summary>
        /// notchedcollar property
        /// </summary>
          [XmlEnum("notched collar")]
          notchedcollar,
        /// <summary>
        /// onofftool property
        /// </summary>
          [XmlEnum("on-off tool")]
          onofftool,
        /// <summary>
        /// overshot property
        /// </summary>
          overshot,
        /// <summary>
        /// packer property
        /// </summary>
          packer,
        /// <summary>
        /// packerplug property
        /// </summary>
          [XmlEnum("packer plug")]
          packerplug,
        /// <summary>
        /// packermultiplestrings property
        /// </summary>
          [XmlEnum("packer-multiple strings")]
          packermultiplestrings,
        /// <summary>
        /// packofftubing property
        /// </summary>
          [XmlEnum("packoff (tubing)")]
          packofftubing,
        /// <summary>
        /// pcpflexshaftintake property
        /// </summary>
          [XmlEnum("pcp-flex shaft intake")]
          pcpflexshaftintake,
        /// <summary>
        /// pcpgearreducersubsurface property
        /// </summary>
          [XmlEnum("pcp-gear reducer (subsurface)")]
          pcpgearreducersubsurface,
        /// <summary>
        /// pcpnoturntooltorqueanchor property
        /// </summary>
          [XmlEnum("pcp-no turn tool/torque anchor")]
          pcpnoturntooltorqueanchor,
        /// <summary>
        /// pcprotor property
        /// </summary>
          [XmlEnum("pcp-rotor")]
          pcprotor,
        /// <summary>
        /// pcpstator property
        /// </summary>
          [XmlEnum("pcp-stator")]
          pcpstator,
        /// <summary>
        /// pcptagbar property
        /// </summary>
          [XmlEnum("pcp-tag bar")]
          pcptagbar,
        /// <summary>
        /// plugcement property
        /// </summary>
          [XmlEnum("plug - cement")]
          plugcement,
        /// <summary>
        /// plugmud property
        /// </summary>
          [XmlEnum("plug - mud")]
          plugmud,
        /// <summary>
        /// plungerliftball property
        /// </summary>
          [XmlEnum("plunger lift ball")]
          plungerliftball,
        /// <summary>
        /// plungerliftbottomholebumperassembly property
        /// </summary>
          [XmlEnum("plunger lift bottom hole bumper assembly")]
          plungerliftbottomholebumperassembly,
        /// <summary>
        /// plungerliftbumperspring property
        /// </summary>
          [XmlEnum("plunger lift bumper spring")]
          plungerliftbumperspring,
        /// <summary>
        /// plungerliftcollarstop property
        /// </summary>
          [XmlEnum("plunger lift collar stop")]
          plungerliftcollarstop,
        /// <summary>
        /// plungerliftplunger property
        /// </summary>
          [XmlEnum("plunger lift plunger")]
          plungerliftplunger,
        /// <summary>
        /// polishedrod property
        /// </summary>
          [XmlEnum("polished rod")]
          polishedrod,
        /// <summary>
        /// polishedrodliner property
        /// </summary>
          [XmlEnum("polished rod liner")]
          polishedrodliner,
        /// <summary>
        /// portedcollar property
        /// </summary>
          [XmlEnum("ported collar")]
          portedcollar,
        /// <summary>
        /// profilenipple property
        /// </summary>
          [XmlEnum("profile nipple")]
          profilenipple,
        /// <summary>
        /// profilenippleplug property
        /// </summary>
          [XmlEnum("profile nipple plug")]
          profilenippleplug,
        /// <summary>
        /// pumpoutplug property
        /// </summary>
          [XmlEnum("pump-out plug")]
          pumpoutplug,
        /// <summary>
        /// sandscreentubing property
        /// </summary>
          [XmlEnum("sand screen-tubing")]
          sandscreentubing,
        /// <summary>
        /// sandseparator property
        /// </summary>
          [XmlEnum("sand separator")]
          sandseparator,
        /// <summary>
        /// screenlinerinsert property
        /// </summary>
          [XmlEnum("screen liner/insert")]
          screenlinerinsert,
        /// <summary>
        /// sealassembly property
        /// </summary>
          [XmlEnum("seal assembly")]
          sealassembly,
        /// <summary>
        /// sealboreextension property
        /// </summary>
          [XmlEnum("seal bore extension")]
          sealboreextension,
        /// <summary>
        /// seatnippleshoe property
        /// </summary>
          [XmlEnum("seat nipple/shoe")]
          seatnippleshoe,
        /// <summary>
        /// sheartool property
        /// </summary>
          [XmlEnum("shear tool")]
          sheartool,
        /// <summary>
        /// slidingsleeve property
        /// </summary>
          [XmlEnum("sliding sleeve")]
          slidingsleeve,
        /// <summary>
        /// steamcupmandrel property
        /// </summary>
          [XmlEnum("steam cup mandrel")]
          steamcupmandrel,
        /// <summary>
        /// steamdeflectors property
        /// </summary>
          [XmlEnum("steam deflectors")]
          steamdeflectors,
        /// <summary>
        /// strainernipple property
        /// </summary>
          [XmlEnum("strainer nipple")]
          strainernipple,
        /// <summary>
        /// subsurfacesafetyvalve property
        /// </summary>
          [XmlEnum("subsurface safety valve")]
          subsurfacesafetyvalve,
        /// <summary>
        /// suckerrod property
        /// </summary>
          [XmlEnum("sucker rod")]
          suckerrod,
        /// <summary>
        /// suckerrodbackoffcoupling property
        /// </summary>
          [XmlEnum("sucker rod backoff coupling")]
          suckerrodbackoffcoupling,
        /// <summary>
        /// suckerrodpumpinsert property
        /// </summary>
          [XmlEnum("sucker rod pump-insert")]
          suckerrodpumpinsert,
        /// <summary>
        /// suckerrodpumpjacket property
        /// </summary>
          [XmlEnum("sucker rod pump-jacket")]
          suckerrodpumpjacket,
        /// <summary>
        /// suckerrodpumptubingpumpbarrel property
        /// </summary>
          [XmlEnum("sucker rod pump-tubing pump barrel")]
          suckerrodpumptubingpumpbarrel,
        /// <summary>
        /// suckerrodpumptubingpumpplunger property
        /// </summary>
          [XmlEnum("sucker rod pump-tubing pump plunger")]
          suckerrodpumptubingpumpplunger,
        /// <summary>
        /// suckerrodsub property
        /// </summary>
          [XmlEnum("sucker rod sub")]
          suckerrodsub,
        /// <summary>
        /// suckerrodcontinuous property
        /// </summary>
          [XmlEnum("sucker rod-continuous")]
          suckerrodcontinuous,
        /// <summary>
        /// suckerrodribbon property
        /// </summary>
          [XmlEnum("sucker rod-ribbon")]
          suckerrodribbon,
        /// <summary>
        /// suckerrodsinkerbar property
        /// </summary>
          [XmlEnum("sucker rod-sinker bar")]
          suckerrodsinkerbar,
        /// <summary>
        /// tcpgun property
        /// </summary>
          [XmlEnum("tcp gun")]
          tcpgun,
        /// <summary>
        /// tubing property
        /// </summary>
          tubing,
        /// <summary>
        /// tubingcoiled property
        /// </summary>
          [XmlEnum("tubing (coiled)")]
          tubingcoiled,
        /// <summary>
        /// tubinganchorcatcher property
        /// </summary>
          [XmlEnum("tubing anchor/catcher")]
          tubinganchorcatcher,
        /// <summary>
        /// tubingcrossover property
        /// </summary>
          [XmlEnum("tubing crossover")]
          tubingcrossover,
        /// <summary>
        /// tubingdrain property
        /// </summary>
          [XmlEnum("tubing drain")]
          tubingdrain,
        /// <summary>
        /// tubinghanger property
        /// </summary>
          [XmlEnum("tubing hanger")]
          tubinghanger,
        /// <summary>
        /// tubingheadspool property
        /// </summary>
          [XmlEnum("tubing head (spool)")]
          tubingheadspool,
        /// <summary>
        /// tubingpurgecheckvalve property
        /// </summary>
          [XmlEnum("tubing purge check valve")]
          tubingpurgecheckvalve,
        /// <summary>
        /// tubingsub property
        /// </summary>
          [XmlEnum("tubing sub")]
          tubingsub,
        /// <summary>
        /// wellborenotes property
        /// </summary>
          [XmlEnum("wellbore notes")]
          wellborenotes,
        /// <summary>
        /// whipstock property
        /// </summary>
          whipstock,
        /// <summary>
        /// wirelinereentryguidebellcollar property
        /// </summary>
          [XmlEnum("wireline re-entry guide (bell collar)")]
          wirelinereentryguidebellcollar,
        /// <summary>
        /// ytool property
        /// </summary>
          [XmlEnum("y-tool")]
          ytool
        }
    }
    #endregion
}