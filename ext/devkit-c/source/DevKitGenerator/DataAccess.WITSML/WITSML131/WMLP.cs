//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
namespace Energistics.DataAccess.WITSML131.WMLP {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="PublishSoapBinding", Namespace="http://www.witsml.org/wsdl/120")]
    public partial class WMLP : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback WMLP_GetBaseMsgOperationCompleted;
        
        private System.Threading.SendOrPostCallback WMLP_GetCapOperationCompleted;
        
        private System.Threading.SendOrPostCallback WMLP_GetVersionOperationCompleted;
        
        private System.Threading.SendOrPostCallback WMLP_SubscribeOperationCompleted;
        
        /// <remarks/>
        public WMLP() {
            this.Url = "http://yourorg.com/yourwebservice";
        }
        
        /// <remarks/>
        public event WMLP_GetBaseMsgCompletedEventHandler WMLP_GetBaseMsgCompleted;
        
        /// <remarks/>
        public event WMLP_GetCapCompletedEventHandler WMLP_GetCapCompleted;
        
        /// <remarks/>
        public event WMLP_GetVersionCompletedEventHandler WMLP_GetVersionCompleted;
        
        /// <remarks/>
        public event WMLP_SubscribeCompletedEventHandler WMLP_SubscribeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.witsml.org/action/120/Publish.WMLP_GetBaseMsg", RequestNamespace="http://www.witsml.org/message/120", ResponseNamespace="http://www.witsml.org/message/120")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public string WMLP_GetBaseMsg(short ReturnValueIn) {
            object[] results = this.Invoke("WMLP_GetBaseMsg", new object[] {
                        ReturnValueIn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWMLP_GetBaseMsg(short ReturnValueIn, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WMLP_GetBaseMsg", new object[] {
                        ReturnValueIn}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndWMLP_GetBaseMsg(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WMLP_GetBaseMsgAsync(short ReturnValueIn) {
            this.WMLP_GetBaseMsgAsync(ReturnValueIn, null);
        }
        
        /// <remarks/>
        public void WMLP_GetBaseMsgAsync(short ReturnValueIn, object userState) {
            if ((this.WMLP_GetBaseMsgOperationCompleted == null)) {
                this.WMLP_GetBaseMsgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWMLP_GetBaseMsgOperationCompleted);
            }
            this.InvokeAsync("WMLP_GetBaseMsg", new object[] {
                        ReturnValueIn}, this.WMLP_GetBaseMsgOperationCompleted, userState);
        }
        
        private void OnWMLP_GetBaseMsgOperationCompleted(object arg) {
            if ((this.WMLP_GetBaseMsgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WMLP_GetBaseMsgCompleted(this, new WMLP_GetBaseMsgCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.witsml.org/action/120/Publish.WMLP_GetCap", RequestNamespace="http://www.witsml.org/message/120", ResponseNamespace="http://www.witsml.org/message/120")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public short WMLP_GetCap(string OptionsIn, out string CapabilitiesOut, out string SuppMsgOut) {
            object[] results = this.Invoke("WMLP_GetCap", new object[] {
                        OptionsIn});
            CapabilitiesOut = ((string)(results[1]));
            SuppMsgOut = ((string)(results[2]));
            return ((short)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWMLP_GetCap(string OptionsIn, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WMLP_GetCap", new object[] {
                        OptionsIn}, callback, asyncState);
        }
        
        /// <remarks/>
        public short EndWMLP_GetCap(System.IAsyncResult asyncResult, out string CapabilitiesOut, out string SuppMsgOut) {
            object[] results = this.EndInvoke(asyncResult);
            CapabilitiesOut = ((string)(results[1]));
            SuppMsgOut = ((string)(results[2]));
            return ((short)(results[0]));
        }
        
        /// <remarks/>
        public void WMLP_GetCapAsync(string OptionsIn) {
            this.WMLP_GetCapAsync(OptionsIn, null);
        }
        
        /// <remarks/>
        public void WMLP_GetCapAsync(string OptionsIn, object userState) {
            if ((this.WMLP_GetCapOperationCompleted == null)) {
                this.WMLP_GetCapOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWMLP_GetCapOperationCompleted);
            }
            this.InvokeAsync("WMLP_GetCap", new object[] {
                        OptionsIn}, this.WMLP_GetCapOperationCompleted, userState);
        }
        
        private void OnWMLP_GetCapOperationCompleted(object arg) {
            if ((this.WMLP_GetCapCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WMLP_GetCapCompleted(this, new WMLP_GetCapCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.witsml.org/action/120/Publish.WMLP_GetVersion", RequestNamespace="http://www.witsml.org/message/120", ResponseNamespace="http://www.witsml.org/message/120")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public string WMLP_GetVersion() {
            object[] results = this.Invoke("WMLP_GetVersion", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWMLP_GetVersion(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WMLP_GetVersion", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndWMLP_GetVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void WMLP_GetVersionAsync() {
            this.WMLP_GetVersionAsync(null);
        }
        
        /// <remarks/>
        public void WMLP_GetVersionAsync(object userState) {
            if ((this.WMLP_GetVersionOperationCompleted == null)) {
                this.WMLP_GetVersionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWMLP_GetVersionOperationCompleted);
            }
            this.InvokeAsync("WMLP_GetVersion", new object[0], this.WMLP_GetVersionOperationCompleted, userState);
        }
        
        private void OnWMLP_GetVersionOperationCompleted(object arg) {
            if ((this.WMLP_GetVersionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WMLP_GetVersionCompleted(this, new WMLP_GetVersionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://www.witsml.org/action/120/Publish.WMLP_Subscribe", RequestNamespace="http://www.witsml.org/message/120", ResponseNamespace="http://www.witsml.org/message/120")]
        [return: System.Xml.Serialization.SoapElementAttribute("Result")]
        public short WMLP_Subscribe(string SubscriptionIn, string OptionsIn, string CapabilitiesIn, out string SubscriptionOut, out string SuppMsgOut) {
            object[] results = this.Invoke("WMLP_Subscribe", new object[] {
                        SubscriptionIn,
                        OptionsIn,
                        CapabilitiesIn});
            SubscriptionOut = ((string)(results[1]));
            SuppMsgOut = ((string)(results[2]));
            return ((short)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWMLP_Subscribe(string SubscriptionIn, string OptionsIn, string CapabilitiesIn, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WMLP_Subscribe", new object[] {
                        SubscriptionIn,
                        OptionsIn,
                        CapabilitiesIn}, callback, asyncState);
        }
        
        /// <remarks/>
        public short EndWMLP_Subscribe(System.IAsyncResult asyncResult, out string SubscriptionOut, out string SuppMsgOut) {
            object[] results = this.EndInvoke(asyncResult);
            SubscriptionOut = ((string)(results[1]));
            SuppMsgOut = ((string)(results[2]));
            return ((short)(results[0]));
        }
        
        /// <remarks/>
        public void WMLP_SubscribeAsync(string SubscriptionIn, string OptionsIn, string CapabilitiesIn) {
            this.WMLP_SubscribeAsync(SubscriptionIn, OptionsIn, CapabilitiesIn, null);
        }
        
        /// <remarks/>
        public void WMLP_SubscribeAsync(string SubscriptionIn, string OptionsIn, string CapabilitiesIn, object userState) {
            if ((this.WMLP_SubscribeOperationCompleted == null)) {
                this.WMLP_SubscribeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWMLP_SubscribeOperationCompleted);
            }
            this.InvokeAsync("WMLP_Subscribe", new object[] {
                        SubscriptionIn,
                        OptionsIn,
                        CapabilitiesIn}, this.WMLP_SubscribeOperationCompleted, userState);
        }
        
        private void OnWMLP_SubscribeOperationCompleted(object arg) {
            if ((this.WMLP_SubscribeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WMLP_SubscribeCompleted(this, new WMLP_SubscribeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    public delegate void WMLP_GetBaseMsgCompletedEventHandler(object sender, WMLP_GetBaseMsgCompletedEventArgs e);
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WMLP_GetBaseMsgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WMLP_GetBaseMsgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void WMLP_GetCapCompletedEventHandler(object sender, WMLP_GetCapCompletedEventArgs e);
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WMLP_GetCapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WMLP_GetCapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public short Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string CapabilitiesOut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string SuppMsgOut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void WMLP_GetVersionCompletedEventHandler(object sender, WMLP_GetVersionCompletedEventArgs e);
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WMLP_GetVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WMLP_GetVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    public delegate void WMLP_SubscribeCompletedEventHandler(object sender, WMLP_SubscribeCompletedEventArgs e);
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WMLP_SubscribeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal WMLP_SubscribeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public short Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string SubscriptionOut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string SuppMsgOut {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
}
